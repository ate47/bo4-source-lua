-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/menus/core_ui_require" ) --[[ @ 0]]

if CoD.isPC then
	require( "x64:2cfcd4cb80781b03" ) --[[ @ 0]]
end
if LUI.DEV ~= nil then
	require( "x64:501c64f03fcbffe" ) --[[ @ 0]]
end
DataSources.InitControllerModelsAndSubscriptions() --[[ @ 0]]
local f0_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
f0_local0:create( "lobbyRoot.gameClient.update", true ) --[[ @ 0]]
f0_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
f0_local0:create( "lobbyRoot.gameClient.isHost", true ) --[[ @ 0]]
if CoD.isFrontend then
	require( "x64:12dd4ff313102b79" ) --[[ @ 0]]
	require( "x64:66eee5926f63b60b" ) --[[ @ 0]]
	LUI.createMenu.main = function ()
		local f1_local0 = Engine[@"GetMaxControllerCount"]() --[[ @ 0]]
		for f1_local1 = 0 --[[ @ 0]], f1_local0 - 1, 1 do
			Engine[@"LockInput"]( f1_local1, true ) --[[ @ 0]]
			Engine[@"SetUIActive"]( f1_local1, true ) --[[ @ 0]]
		end
		CoD.VideoStreamingUtility.StartLiveEventFromData( {
			liveEventStreamerIndex = Dvar[@"hash_52B10FD54D7DBE8"]:get()
		} ) --[[ @ 0]]
		local f1_local1 = CoD.Menu.NewFromState( "main", nil, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
		f1_local1._elementsThatCloseOnReload = {} --[[ @ 0]]
		f1_local1.addElementThatClosesOnReload = function ( f2_arg0, f2_arg1 )
			f2_arg0:addElement( f2_arg1 ) --[[ @ 0]]
			table.insert( f2_arg0._elementsThatCloseOnReload, f2_arg1 ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		f1_local1.closeElementsThatCloseOnReload = function ( f3_arg0 )
			for f3_local3, f3_local4 in ipairs( f3_arg0._elementsThatCloseOnReload ) --[[ @ 0]] do
				f3_local4:close() --[[ @ 0]]
			end
			f3_arg0._elementsThatCloseOnReload = {} --[[ @ 0]]
		end
		 --[[ @ 0]]
		f1_local1.ignoreCursor = true --[[ @ 0]]
		f1_local1.anyChildUsesUpdateState = true --[[ @ 0]]
		f1_local1:setPriority( 9999 ) --[[ @ 0]]
		f1_local1:processEvent( {
			name = "menu_loaded"
		} ) --[[ @ 0]]
		Engine[@"CreateModel"]( Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "MapVote", true ), "mapVoteMapNext", true ) --[[ @ 0]]
		local f1_local3 = function ( f4_arg0, f4_arg1, f4_arg2 )
			f4_arg0:closeElementsThatCloseOnReload() --[[ @ 0]]
			local f4_local0 = CoD.ToastNotification.new( f4_arg0, f4_arg1, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
			f4_local0:setState( f4_arg1, "DefaultState" ) --[[ @ 0]]
			f4_arg0:addElementThatClosesOnReload( f4_local0 ) --[[ @ 0]]
			local f4_local1 = CoD.Spinner.new( f4_arg0, f4_arg1, 0, 0, 0, CoD.Spinner.__defaultWidth, 0, 0, 0, CoD.Spinner.__defaultHeight ) --[[ @ 0]]
			f4_arg0:addElementThatClosesOnReload( f4_local1 ) --[[ @ 0]]
			f4_local1:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f4_local1:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f4_local1:processEvent( {
				name = "update_state",
				menu = f4_arg0,
				controller = f4_arg1,
				forceDispatch = true
			} ) --[[ @ 0]]
			f4_arg0:sendInitializationEvents( f4_arg1, f4_local1 ) --[[ @ 0]]
			if CoD.MatchStartWarning then
				local f4_local2 = CoD.MatchStartWarning.new( f4_arg0, f4_arg1, 0, 1, 0, 0, 0, 0, 0, CoD.MatchStartWarning.__defaultHeight ) --[[ @ 0]]
				f4_local2:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
				f4_arg0:addElementThatClosesOnReload( f4_local2 ) --[[ @ 0]]
				f4_arg0:sendInitializationEvents( f4_arg1, f4_local2 ) --[[ @ 0]]
			end
			if Engine[@"hash_28069F5969D47DEF"]() then
				local f4_local2 = LUI.createMenu.FreeCursor( f4_arg1 ) --[[ @ 0]]
				f4_local2:setPriority( 1000 ) --[[ @ 0]]
				f4_local2:menuOpened( f4_arg1, f4_local2 ) --[[ @ 0]]
				if f4_arg2 then
					local f4_local3 = Engine[@"GetModelForController"]( f4_arg1 ) --[[ @ 0]]
					f4_local3.FreeCursor.hidden:set( 1 ) --[[ @ 0]]
					local f4_local4 = f4_local3.FreeCursor:create( "ignoreNextMenuHides" ) --[[ @ 0]]
					f4_local4:set( true ) --[[ @ 0]]
				end
				f4_arg0:addElementThatClosesOnReload( f4_local2 ) --[[ @ 0]]
			end
			f4_arg0:setOwner( f4_arg1 ) --[[ @ 0]]
			CoD.BaseUtility.SubscribeToMessageDialogBox( f4_arg0, f4_arg1 ) --[[ @ 0]]
			f4_arg0.MainOverlay = CoD.MainOverlay.new( f4_arg0, 0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f4_arg0.MainOverlay:setPriority( 1000 ) --[[ @ 0]]
			f4_arg0:addElementThatClosesOnReload( f4_arg0.MainOverlay ) --[[ @ 0]]
			f4_arg0:sendInitializationEvents( f4_arg1, f4_arg0.MainOverlay ) --[[ @ 0]]
			f4_arg0.waitForUI3DTimer = LUI.UITimer.newElementTimer( 200, false, function ()
				if Engine[@"hash_17D6FD4F19566B8A"]() then
					f4_arg0:addElementThatClosesOnReload( CoD.DirectorTagsUI3D.new( f4_arg0, f4_arg1, 0, 0, 0, CoD.DirectorTagsUI3D.__defaultWidth, 0, 0, 0, CoD.DirectorTagsUI3D.__defaultHeight ) ) --[[ @ 0]]
					f4_arg0.waitForUI3DTimer:close() --[[ @ 0]]
					f4_arg0.waitForUI3DTimer = nil --[[ @ 0]]
				end
			end ) --[[ @ 0]]
			f4_arg0:addElement( f4_arg0.waitForUI3DTimer ) --[[ @ 0]]
			if f4_arg0._menuMusicSub then
				f4_arg0:removeSubscription( f4_arg0._menuMusicSub ) --[[ @ 0]]
			end
			local f4_local3 = f4_arg0 --[[ @ 0]]
			local f4_local2 = f4_arg0.subscribeToModel --[[ @ 0]]
			local f4_local4 = Engine[@"GetModelForController"]( f4_arg1 ) --[[ @ 0]]
			f4_arg0._menuMusicSub = f4_local2( f4_local3, f4_local4.MenuMusic, function ( f6_arg0 )
				local f6_local0 = f6_arg0.musicStateName:get() --[[ @ 0]]
				local f6_local1 = f6_arg0.delayInMS:get() --[[ @ 0]]
				if f6_local0 ~= "" then
					if f4_arg0._menuMusicTimer then
						f4_arg0._menuMusicTimer:close() --[[ @ 0]]
						f4_arg0._menuMusicTimer = nil --[[ @ 0]]
					end
					f4_arg0._menuMusicTimer = LUI.UITimer.newElementTimer( f6_local1, true, function ()
						Engine[@"PlayMenuMusic"]( f6_local0 ) --[[ @ 0]]
					end ) --[[ @ 0]]
					f4_arg0:addElement( f4_arg0._menuMusicTimer ) --[[ @ 0]]
				elseif f4_arg0._menuMusicTimer then
					f4_arg0._menuMusicTimer:close() --[[ @ 0]]
					f4_arg0._menuMusicTimer = nil --[[ @ 0]]
				end
			end, false ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		local f1_local4 = Engine[@"GetPrimaryController"]() --[[ @ 0]]
		f1_local3( f1_local1, f1_local4, true ) --[[ @ 0]]
		f1_local1:registerEventHandler( "debug_reload", function ( element, event )
			element:closeElementsThatCloseOnReload() --[[ @ 0]]
			element:removeAllChildren() --[[ @ 0]]
			f1_local3( f1_local1, f1_local4, false ) --[[ @ 0]]
		end ) --[[ @ 0]]
		LUI.OverrideFunction_CallOriginalSecond( f1_local1, "close", function ( element )
			element.toastNotification:close() --[[ @ 0]]
		end ) --[[ @ 0]]
		if CoD.isPC then
			CoD.PCUtility.RegisterPlaytimeLeftWatcher( f1_local1 ) --[[ @ 0]]
		end
		CoD.mainMenu = f1_local1 --[[ @ 0]]
		return f1_local1
	end
	 --[[ @ 0]]
else
	require( "ui/uieditor/menus/overlaysystem/systemoverlay_messagedialog" ) --[[ @ 0]]
	require( "ui/uieditor/menus/overlaysystem/systemoverlay_nobg" ) --[[ @ 0]]
	local f0_local0, f0_local1, f0_local2, f0_local3, f0_local4, f0_local5, f0_local6, f0_local7 = nil --[[ @ 0]]
	local f0_local8 = 10 --[[ @ 0]]
	local f0_local9 = nil --[[ @ 0]]
	local f0_local10 = false --[[ @ 0]]
	EnableGlobals() --[[ @ 0]]
	function HUD_IngameMenuClosed()
		f0_local9 = nil --[[ @ 0]]
	end
	
	function HUD_DelayLoadMenus()
		if f0_local10 then
			return 
		end
		DebugPrint( "Loading HUD menus" ) --[[ @ 0]]
		f0_local10 = true --[[ @ 0]]
		if CoD.isCampaign then
			require( "x64:3a60cfdff30b341a" ) --[[ @ 0]]
			require( "x64:ad86e26de1fa54e" ) --[[ @ 0]]
		elseif CoD.isZombie then
			require( "x64:2cb5bf4e094259d8" ) --[[ @ 0]]
			require( "x64:319c89699d4ccb93" ) --[[ @ 0]]
			require( "x64:29aedfb02e1b42ad" ) --[[ @ 0]]
			if Engine[@"GetCurrentMap"]() == "zm_zod" then
				require( "x64:42532ef6b6f817cc" ) --[[ @ 0]]
				require( "x64:3e78fa14df4f0af7" ) --[[ @ 0]]
				require( "ui/uieditor/widgets/zminventory/fusebox/fusewidget" ) --[[ @ 0]]
				require( "x64:3bba34780c0a9b3e" ) --[[ @ 0]]
				require( "ui/uieditor/widgets/zminventory/ritual/ritualitem" ) --[[ @ 0]]
				require( "ui/uieditor/widgets/zminventory/ritual/ritualwidget" ) --[[ @ 0]]
			elseif Engine[@"GetCurrentMap"]() == "zm_factory" then
				require( "x64:3e096ca64b60431f" ) --[[ @ 0]]
			elseif Engine[@"GetCurrentMap"]() == "zm_castle" then
				require( "x64:782fa79a45ef9936" ) --[[ @ 0]]
			elseif Engine[@"GetCurrentMap"]() == "zm_island" then
				require( "x64:3e00202699294517" ) --[[ @ 0]]
			else
				require( "x64:31824fcd24cd5764" ) --[[ @ 0]]
			end
		elseif CoD.isWarzone then
			require( "x64:8f9e828ebdeac4c" ) --[[ @ 0]]
			require( "x64:5be322a54ff91a9a" ) --[[ @ 0]]
			require( "x64:29aedfb02e1b42ad" ) --[[ @ 0]]
			require( "x64:ad86e26de1fa54e" ) --[[ @ 0]]
		else
			require( "x64:eb491e34e330ae0" ) --[[ @ 0]]
			require( "x64:6b7fc557f641386" ) --[[ @ 0]]
			require( "x64:2f1b9c001eb57aa3" ) --[[ @ 0]]
			require( "x64:5be322a54ff91a9a" ) --[[ @ 0]]
			require( "x64:37c614e146b5eea5" ) --[[ @ 0]]
			require( "x64:29aedfb02e1b42ad" ) --[[ @ 0]]
			require( "x64:ad86e26de1fa54e" ) --[[ @ 0]]
		end
	end
	
	if CoD.isCampaign or Engine[@"GetCurrentMap"]() == "zm_zod" then
		HUD_DelayLoadMenus() --[[ @ 0]]
	end
	local f0_local11 = function ( f12_arg0, f12_arg1, f12_arg2, f12_arg3 )
		if f12_arg3 and f12_arg0.vehicleHUD then
			f12_arg2 = f12_arg0.vehicleHUD.vehicleType --[[ @ 0]]
		end
		if f12_arg0.vehicleHUD then
			if (f12_arg0.vehicleHUD.vehicleType == f12_arg2 or CoD.isPC and f12_arg2 ~= @"hash_0") and not f12_arg3 then
				return 
			end
			f12_arg0.vehicleHUD:close() --[[ @ 0]]
			f12_arg0.vehicleHUD = nil --[[ @ 0]]
			Engine[@"DisableSceneFilter"]( f12_arg0:getOwner(), 4 ) --[[ @ 0]]
			DataSources.VehicleInfo.resetVehicleModels( f12_arg1 ) --[[ @ 0]]
		end
		if not f12_arg2 or f12_arg2 == "" then
			return 
		elseif Engine[@"IsVisibilityBitSet"]( f12_arg1, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) then
			return 
		elseif CoD.CodCasterUtility.CodCasterIsInAerialCam( f12_arg1 ) then
			return 
		end
		local f12_local0 = CoD.VehicleUtility.GetVehicleHudInfo( f12_arg0, f12_arg1, f12_arg2 ) --[[ @ 0]]
		if not f12_local0 then
			return 
		end
		local f12_local1 = LUI.createMenu[f12_local0.hudName] --[[ @ 0]]
		if f12_local1 then
			DataSources.VehicleInfo.setupVehicleModels( f12_arg1, f12_local0 ) --[[ @ 0]]
			if CoD.isWarzone then
				local f12_local2 = DataSources.VehicleInfo.getModel( f12_arg1 ) --[[ @ 0]]
				f12_local2 = f12_local2.hidePlayerInfo --[[ @ 0]]
				if f12_local2 and f12_local2:get() then
					CoD.WZUtility.CloseQuickAccessInventory( f12_arg0, f12_arg1 ) --[[ @ 0]]
				end
			end
			f12_arg0.vehicleHUD = f12_local1( f12_arg1 ) --[[ @ 0]]
			f12_arg0.vehicleHUD:setPriority( -10 ) --[[ @ 0]]
			f12_arg0.vehicleHUD.vehicleType = f12_arg2 --[[ @ 0]]
			f12_arg0.vehicleHUD:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f12_arg0.vehicleHUD:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f12_arg0.vehicleHUD:setModel( DataSources.VehicleInfo.getModel( f12_arg1 ), f12_arg1 ) --[[ @ 0]]
			f12_arg0:addForceClosedChild( f12_arg0.vehicleHUD, "vehicleHUD" ) --[[ @ 0]]
			f12_arg0.vehicleHUD:menuOpened( f12_arg1, f12_arg0.vehicleHUD ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f0_local12 = function ( f13_arg0, f13_arg1 )
		local f13_local0 = true --[[ @ 0]]
		if IsCampaign() then
			local f13_local1 = false --[[ @ 0]]
			local f13_local2 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f13_arg1 ), "safehouse" ) --[[ @ 0]]
			if f13_local2 then
				f13_local1 = CoD.SafeGetModelValue( f13_local2, "inTrainingSim" ) == 1 --[[ @ 0]]
			end
		end
		local f13_local1 = DataSources.VehicleInfo.getModel( f13_arg1 ) --[[ @ 0]]
		if f13_local1.vehicleType:get() == "killcamVehicle" then
			f13_local0 = false --[[ @ 0]]
		end
		if Engine[@"IsVisibilityBitSet"]( f13_arg1, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) then
			f13_local0 = false --[[ @ 0]]
		end
		f13_arg0.reticleVisible = f13_local0 --[[ @ 0]]
		if f13_arg0.reticle then
			f13_arg0.reticle:setAlpha( f13_arg0.reticleVisible and 1 or 0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f0_local13 = function ( f14_arg0, f14_arg1, f14_arg2, f14_arg3 )
		if f14_arg0.reticle then
			if f14_arg3 then
				f14_arg2 = f14_arg0.reticle.reticleType --[[ @ 0]]
			end
			if f14_arg0.reticle.reticleType == f14_arg2 and not f14_arg3 then
				return 
			end
			f14_arg0.reticle:close() --[[ @ 0]]
			f14_arg0.reticle = nil --[[ @ 0]]
		end
		if f14_arg2 and f14_arg2 ~= "" and CoD[f14_arg2] and CoD[f14_arg2].new then
			f14_arg0.reticle = CoD[f14_arg2].new( f14_arg0, f14_arg1, 0, 0, 0, CoD[f14_arg2].__defaultWidth, 0, 0, 0, CoD[f14_arg2].__defaultHeight ) --[[ @ 0]]
			f14_arg0.reticle.reticleType = f14_arg2 --[[ @ 0]]
			f14_arg0.reticle:setPriority( -100 ) --[[ @ 0]]
			f14_arg0.reticle:setAlpha( f14_arg0.reticleVisible and 1 or 0 ) --[[ @ 0]]
			LUI.OverrideFunction_CallOriginalSecond( f14_arg0.reticle, "close", function ( element )
				if element == f14_arg0.reticle then
					f14_arg0.reticle = nil --[[ @ 0]]
				end
			end ) --[[ @ 0]]
			f14_arg0:addForceClosedChild( f14_arg0.reticle, "reticle" ) --[[ @ 0]]
			f14_arg0:sendInitializationEvents( f14_arg1, f14_arg0.reticle ) --[[ @ 0]]
		end
		f0_local12( f14_arg0, f14_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f0_local14 = function ( f16_arg0, f16_arg1, f16_arg2 )
		if f16_arg0.lockOnWidget then
			f16_arg0.lockOnWidget:close() --[[ @ 0]]
			f16_arg0.lockOnWidget = nil --[[ @ 0]]
		end
		if f16_arg2 and f16_arg2 ~= "" and CoD[f16_arg2] and CoD[f16_arg2].new then
			local f16_local0 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f16_arg1 ), "lockOnModel" ) --[[ @ 0]]
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f16_local0, "status" ), 0 ) --[[ @ 0]]
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f16_local0, "lockOnPercent" ), 0 ) --[[ @ 0]]
			f16_arg0.lockOnWidget = CoD[f16_arg2].new( f16_arg0, f16_arg1, 0, 0, 0, CoD[f16_arg2].__defaultWidth, 0, 0, 0, CoD[f16_arg2].__defaultWidth ) --[[ @ 0]]
			f16_arg0.lockOnWidget:setModel( f16_local0, f16_arg1 ) --[[ @ 0]]
			f16_arg0:addForceClosedChild( f16_arg0.lockOnWidget, "lockOnWidget" ) --[[ @ 0]]
			f16_arg0:sendInitializationEvents( f16_arg1, f16_arg0.lockOnWidget ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	LUI.createMenu.HUD = function ( f17_arg0 )
		local f17_local0 = CoD.Menu.NewFromState( "HUD", f17_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
		f17_local0.ignoreCursor = true --[[ @ 0]]
		CoD.BaseUtility.SubscribeToMessageDialogBox( f17_local0, f17_arg0 ) --[[ @ 0]]
		f17_local0:appendEventHandler( "occlusion_change", function ( f18_arg0, f18_arg1 )
			if f18_arg0.T7HudMenu then
				f18_arg0.T7HudMenu.m_disableAllButtonActions = f18_arg1.occluded --[[ @ 0]]
			end
			if f18_arg0.T7HudMenuGameMode then
				f18_arg0.T7HudMenuGameMode.m_disableAllButtonActions = f18_arg1.occluded --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		if not CoD.isCampaign and Engine[@"GetCurrentMap"]() ~= "zm_zod" then
			f17_local0:registerEventHandler( "delay_load_menus", HUD_DelayLoadMenus ) --[[ @ 0]]
		end
		f17_local0:addElement( LUI.UITimer.new( 3000, "delay_load_menus", true ) ) --[[ @ 0]]
		f17_local0:setOwner( f17_arg0 ) --[[ @ 0]]
		f17_local0.controller = f17_arg0 --[[ @ 0]]
		local f17_local1 = function ( f19_arg0 )
			for f19_local3, f19_local4 in ipairs( f17_local0.forceCloseChildren ) --[[ @ 0]] do
				if f19_local4.widget == f19_arg0 then
					return f19_local3
				end
			end
			return -1
		end
		 --[[ @ 0]]
		local f17_local2 = function ( f20_arg0 )
			local f20_local0 = f17_local1( f20_arg0 ) --[[ @ 0]]
			if f20_local0 ~= -1 then
				table.remove( f17_local0.forceCloseChildren, f20_local0 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f17_local0.forceCloseChildren = {} --[[ @ 0]]
		f17_local0.addForceClosedChild = function ( f21_arg0, f21_arg1, f21_arg2 )
			f21_arg0:addElement( f21_arg1 ) --[[ @ 0]]
			if f17_local1( f21_arg1 ) == -1 then
				table.insert( f21_arg0.forceCloseChildren, {
					widget = f21_arg1,
					selfFieldName = f21_arg2
				} ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalFirst( f21_arg1, "close", f17_local2 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f17_local0.addForceClosedSafeAreaChild = function ( f22_arg0, f22_arg1, f22_arg2 )
			f22_arg0.safeArea:addElement( f22_arg1 ) --[[ @ 0]]
			if f17_local1( f22_arg1 ) == -1 then
				table.insert( f22_arg0.forceCloseChildren, {
					widget = f22_arg1,
					selfFieldName = f22_arg2
				} ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalFirst( f22_arg1, "close", f17_local2 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f17_local0.addCustomForceClosedWidget = function ( f23_arg0, f23_arg1, f23_arg2 )
			if f17_local1( f23_arg1 ) == -1 then
				table.insert( f23_arg0.forceCloseChildren, {
					widget = f23_arg1,
					selfFieldName = f23_arg2
				} ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalFirst( f23_arg1, "close", f17_local2 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f0_local1( f17_local0 ) --[[ @ 0]]
		f17_local0:registerEventHandler( "debug_reload", HUD_DebugReload ) --[[ @ 0]]
		if CoD.isPC then
			Engine[@"exec"]( f17_arg0, "ui_keyboard_cancel" ) --[[ @ 0]]
			CoD.PCUtility.RegisterPlaytimeLeftWatcher( f17_local0 ) --[[ @ 0]]
		end
		Engine[@"PlayMenuMusic"]( "" ) --[[ @ 0]]
		if f17_arg0 == 0 then
			if (not CoD.isCampaign or not "Loading_CP") and (not CoD.isZombie or not "Loading_ZM") then
				local f17_local3 = CoD.isWarzone --[[ @ 0]]
				local f17_local4 = "Loading_WZ" --[[ @ 0]]
				local f17_local5 = "Loading_MP" --[[ @ 0]]
			end
			f17_local0.loadingMenu = LUI.createMenu[f17_local3 and f17_local4 or f17_local5]( f17_arg0 ) --[[ @ 0]]
			if f17_local0:getFirstChild() then
				f17_local0.loadingMenu:addElementBefore( f17_local0:getFirstChild() ) --[[ @ 0]]
			else
				f17_local0:addElement( f17_local0.loadingMenu ) --[[ @ 0]]
			end
			f17_local0.loadingMenu:menuOpened( f17_arg0, f17_local0.loadingMenu ) --[[ @ 0]]
		end
		if CoD.isWarzone and Engine[@"IsSplitscreen"]() then
			f17_local0.splitscreenLoading = LUI.createMenu.Loading_WZ_Splitscreen( f17_arg0 ) --[[ @ 0]]
			if f17_local0:getFirstChild() then
				f17_local0.splitscreenLoading:addElementBefore( f17_local0:getFirstChild() ) --[[ @ 0]]
			else
				f17_local0:addElement( f17_local0.splitscreenLoading ) --[[ @ 0]]
			end
			f17_local0.splitscreenLoading:menuOpened( f17_arg0, f17_local0.splitscreenLoading ) --[[ @ 0]]
		end
		f17_local0:setAlpha( 1 ) --[[ @ 0]]
		f17_local0:processEvent( {
			name = "menu_loaded",
			controller = f17_arg0
		} ) --[[ @ 0]]
		Dvar.ui_shouldDiscardStableStats:set( false ) --[[ @ 0]]
		return f17_local0
	end
	 --[[ @ 0]]
	f0_local1 = function ( f24_arg0 )
		HUD_SetupEventHandlers_Common( f24_arg0 ) --[[ @ 0]]
		if CoD.isZombie == false then
			HUD_SetupEventHandlers_Multiplayer( f24_arg0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	function UpdateHUDVisibility( f25_arg0, f25_arg1 )
		if Engine[@"IsVisibilityBitSet"]( f25_arg1.controller, Enum[@"UIVisibilityBit"][@"hash_7F1E7A0F1975796E"] ) then
			if f25_arg0.T7HudMenu then
				f25_arg0.T7HudMenu:setAlpha( 0 ) --[[ @ 0]]
			end
			if f25_arg0.T7HudMenuGameMode then
				f25_arg0.T7HudMenuGameMode:setAlpha( 0 ) --[[ @ 0]]
			end
		else
			if f25_arg0.T7HudMenu then
				f25_arg0.T7HudMenu:setAlpha( 1 ) --[[ @ 0]]
			end
			if f25_arg0.T7HudMenuGameMode then
				f25_arg0.T7HudMenuGameMode:setAlpha( 1 ) --[[ @ 0]]
			end
		end
	end
	
	function HUD_Hide( f26_arg0, f26_arg1 )
		f26_arg0:setAlpha( 0 ) --[[ @ 0]]
	end
	
	function HUD_Show( f27_arg0, f27_arg1 )
		f27_arg0:setAlpha( 1 ) --[[ @ 0]]
	end
	
	local f0_local15 = function ( f28_arg0, f28_arg1 )
		local f28_local0 = LUI.roots --[[ @ 0]]
		local f28_local1 = "UIRoot" --[[ @ 0]]
		if f28_local0["UIRoot" .. f28_arg1.controller].ingameFriendsList then
			LUI.roots[rootName]:processEvent( {
				name = "closeFriendsList",
				controller = f28_arg1.controller
			} ) --[[ @ 0]]
			LUI.roots[rootName]:processEvent( {
				name = "closeallpopups",
				controller = f28_arg1.controller
			} ) --[[ @ 0]]
		else
			f28_arg0:openPopup( "FriendsList", f28_arg1.controller ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f0_local16 = function ( f29_arg0, f29_arg1 )
		Engine[@"SetActiveMenu"]( f29_arg1.controller, Enum[@"hash_152E616D9ABDBF0E"][@"hash_1A1CE036AEF3710F"] ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f0_local17 = function ( f30_arg0, f30_arg1 )
		local f30_local0 = f30_arg1.isError --[[ @ 0]]
		local f30_local1 = f30_arg1.gamertag --[[ @ 0]]
		if f30_local0 == false then
			CoD.OverlayUtility.ShowToast( "Invite", Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5513526C1CA23EB9" ), f30_local1, LuaDefine.INVITE_TOAST_POPUP_ICON ) --[[ @ 0]]
		else
			CoD.OverlayUtility.ShowToast( "Invite", Engine[@"ToUpper"]( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3248E1604D27C8DA" ) ), f30_local1, LuaDefine.INVITE_TOAST_POPUP_ERROR_ICON ) --[[ @ 0]]
		end
		return true
	end
	 --[[ @ 0]]
	function HUD_SetupEventHandlers_Common( f31_arg0 )
		f31_arg0:registerEventHandler( "first_snapshot", HUD_FirstSnapshot ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "open_ingame_menu", f0_local0 ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "close_ingame_menu", HUD_CloseInGameMenu ) --[[ @ 0]]
		if CoD.isPC then
			CoD.PCUtility.SetupUIMenuShortcuts( f31_arg0, f31_arg0.controller ) --[[ @ 0]]
		end
		f31_arg0:registerEventHandler( "open_toaster_popup", f0_local17 ) --[[ @ 0]]
		f31_arg0:subscribeToModel( Engine[@"GetModel"]( Engine[@"GetModelForController"]( f31_arg0.controller ), "scriptNotify" ), function ( model )
			local f32_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f32_local0 == @"show_outcome" then
				f0_local16( f31_arg0, {
					controller = f31_arg0.controller,
					name = f32_local0,
					data = CoD.GetScriptNotifyData( model )
				} ) --[[ @ 0]]
			elseif f32_local0 == @"track_victim_death" then
				f0_local5( f31_arg0, {
					controller = f31_arg0.controller,
					name = f32_local0,
					data = CoD.GetScriptNotifyData( model )
				} ) --[[ @ 0]]
			elseif f32_local0 == @"force_scoreboard" then
				if Engine[@"hash_2A55C3ACD0D2BCF0"]() == false or CoD.isZombie == false then
					local f32_local1 = 1 --[[ @ 0]]
					if CoD.isZombie == true then
						local f32_local2 = CoD.GetScriptNotifyData( model ) --[[ @ 0]]
						if f32_local2 ~= nil then
							f32_local1 = f32_local2[1] --[[ @ 0]]
						end
					end
					Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f31_arg0.controller ), "forceScoreboard" ), f32_local1 ) --[[ @ 0]]
				end
			elseif f32_local0 == @"hash_4B524C1480EF80A7" then
				f0_local0( f31_arg0, {
					controller = f31_arg0.controller,
					name = f32_local0,
					data = CoD.GetScriptNotifyData( model )
				} ) --[[ @ 0]]
			elseif f32_local0 == @"hash_69A890CD62D64C85" then
				HUD_CloseSpecificInGameMenu( f31_arg0, {
					controller = f31_arg0.controller,
					name = f32_local0,
					data = CoD.GetScriptNotifyData( model )
				} ) --[[ @ 0]]
			elseif f32_local0 == @"hash_9AB42B593C66ED" then
				f0_local6( f31_arg0, {
					controller = f31_arg0.controller,
					name = f32_local0,
					data = CoD.GetScriptNotifyData( model )
				} ) --[[ @ 0]]
			elseif f32_local0 == @"potm_client" then
				local f32_local1 = CoD.GetScriptNotifyData( model ) --[[ @ 0]]
				if f32_local1 ~= nil then
					local f32_local2 = f32_local1[1] --[[ @ 0]]
					if f32_local2 then
						local f32_local3 = DataSources.StageResults.getModel() --[[ @ 0]]
						f32_local3.potmClient:set( f32_local2 ) --[[ @ 0]]
					end
				end
			elseif f32_local0 == @"hash_EE32E40C182320B" then
				assert( CoD.isWarzone ) --[[ @ 0]]
				f31_arg0.downButNotOutHUD = LUI.createMenu.DownButNotOut( f31_arg0.controller ) --[[ @ 0]]
				local f32_local1 = f31_arg0:getParent() --[[ @ 0]]
				f32_local1:addElement( f31_arg0.downButNotOutHUD ) --[[ @ 0]]
				f31_arg0:addCustomForceClosedWidget( f31_arg0.downButNotOutHUD, "downButNotOutHUD" ) --[[ @ 0]]
				f31_arg0.downButNotOutHUD:menuOpened( f31_arg0.controller, f31_arg0.downButNotOutHUD ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		f31_arg0:subscribeToModel( Engine[@"GetModel"]( Engine[@"GetModelForController"]( f31_arg0.controller ), "engineLoadoutSelect" ), function ( model )
			local f33_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			local f33_local1 = f33_local0 --[[ @ 0]]
			local f33_local2 = CoD.CACUtility.classModels --[[ @ 0]]
			if f33_local2 then
				f33_local2 = CoD.CACUtility.classModels[f31_arg0.controller] --[[ @ 0]]
				if f33_local2 then
					f33_local2 = f33_local1 and CoD.CACUtility.classModels[f31_arg0.controller][f33_local0 + 1] --[[ @ 0]]
				end
			end
			local f33_local3 = f33_local2 and f33_local2.properties.classNum --[[ @ 0]]
			if f33_local3 and f33_local3 <= 11 and f33_local0 and f33_local0 >= 0 and not CoD.CACUtility.IsClassLocked( f31_arg0.controller, f33_local0 ) and not CoD.BountyHunterUtility.GameTypeIsBounty( f31_arg0.controller ) then
				CoD.CACUtility.ChangeClass( f31_arg0.controller, f33_local0, nil ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		local f31_local0 = Engine[@"GetModelForController"]( f31_arg0.controller ) --[[ @ 0]]
		f31_local0 = f31_local0:create( "open_ingame_menu_update" ) --[[ @ 0]]
		f31_local0:set( 0 ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "open_migration_menu", HUD_StartMigration ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "open_hud_menu", HUD_OpenHudMenu ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "close_hud_menu", HUD_CloseHudMenu ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "open_hud_popup", HUD_OpenHudPopup ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "close_hud", HUD_Close ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "spectate_hide_gamehud", HUD_Hide ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "spectate_show_gamehud", HUD_Show ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "fullscreen_viewport_start", HUD_FullscreenStart ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "fullscreen_viewport_stop", HUD_FullscreenStop ) --[[ @ 0]]
		f31_arg0:registerEventHandler( "update_scoreboard_columns", HUD_UpdateScoreboardColumns ) --[[ @ 0]]
		f31_local0 = f31_arg0:getOwner() --[[ @ 0]]
		if f31_local0 == nil then
			f31_local0 = Engine[@"GetPrimaryController"]() --[[ @ 0]]
		end
		local f31_local1 = Engine[@"GetModelForController"]( f31_local0 ) --[[ @ 0]]
		f31_arg0:subscribeToModel( Engine[@"GetModel"]( f31_local1, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7F1E7A0F1975796E"] ), function ( model )
			UpdateHUDVisibility( f31_arg0, {
				controller = f31_local0
			} ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		local f31_local2 = DataSources.CurrentWeapon.getModel( f31_local0 ) --[[ @ 0]]
		f31_local2:create( "weaponReticle" ) --[[ @ 0]]
		f31_local2 = DataSources.CurrentWeapon.getModel( f31_local0 ) --[[ @ 0]]
		f31_local2:create( "lockOnWidget" ) --[[ @ 0]]
		f31_arg0:subscribeToGlobalModel( f31_local0, "VehicleInfo", "vehicleType", function ( model )
			local f35_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f35_local0 then
				f0_local11( f31_arg0, f31_local0, f35_local0, false ) --[[ @ 0]]
				f0_local12( f31_arg0, f31_local0 ) --[[ @ 0]]
			end
		end, true ) --[[ @ 0]]
		f31_arg0:subscribeToGlobalModel( f31_local0, "VehicleInfo", "forceUpdateVehicleBindings", function ( model )
			if f31_arg0.vehicleHUD then
				f0_local11( f31_arg0, f31_local0, f31_arg0.vehicleHUD.vehicleType, true ) --[[ @ 0]]
			end
		end, true ) --[[ @ 0]]
		f31_arg0:subscribeToGlobalModel( f31_local0, "VehicleInfo", "isVehicleOwner", function ( model )
			if f31_arg0.vehicleHUD then
				f0_local11( f31_arg0, f31_local0, f31_arg0.vehicleHUD.vehicleType, true ) --[[ @ 0]]
			end
		end, true ) --[[ @ 0]]
		if not CoD.isZombie then
			Engine[@"CreateModel"]( f31_local1, "vehicle.vehicleAttackMode" ) --[[ @ 0]]
			f31_arg0:subscribeToGlobalModel( f31_local0, "PerController", "vehicle.vehicleAttackMode", function ( model )
				if f31_arg0.vehicleHUD then
					f0_local11( f31_arg0, f31_local0, f31_arg0.vehicleHUD.vehicleType, true ) --[[ @ 0]]
				end
			end, true ) --[[ @ 0]]
		end
		if CoD.isPC and not CoD.isWarzone then
			f31_arg0:subscribeToModel( f31_local1.LastInput, function ()
				if f31_arg0.vehicleHUD and Engine[@"hash_1A11C376CCDCBA5A"]( f31_local0 ) then
					f0_local11( f31_arg0, f31_local0, f31_arg0.vehicleHUD.vehicleType, true ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
		f31_arg0.reticleVisible = true --[[ @ 0]]
		f31_arg0:subscribeToGlobalModel( f31_local0, "CurrentWeapon", "weaponReticle", function ( model )
			local f40_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f40_local0 then
				f0_local13( f31_arg0, f31_local0, f40_local0, false ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		f31_arg0:subscribeToGlobalModel( f31_local0, "CurrentWeapon", "lockOnWidget", function ( model )
			local f41_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f41_local0 then
				f0_local14( f31_arg0, f31_local0, f41_local0 ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		CoD.DemoUtility.RegisterEventHandlers( f31_arg0, f31_local0 ) --[[ @ 0]]
		if Engine[@"hash_2A55C3ACD0D2BCF0"]() then
			f31_arg0:subscribeToGlobalModel( f31_local0, "Demo", "cameraMode", function ( model )
				local f42_local0 = DataSources.VehicleInfo.getModel( f31_local0 ) --[[ @ 0]]
				f0_local11( f31_arg0, f31_local0, f42_local0.vehicleType:get(), true ) --[[ @ 0]]
				f0_local12( f31_arg0, f31_local0 ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end
	
	function HUD_SetupEventHandlers_Multiplayer( f43_arg0 )
		f43_arg0:registerEventHandler( "hud_force_kill_killstreak_hud", f0_local3 ) --[[ @ 0]]
		local f43_local0 = f43_arg0:getOwner() --[[ @ 0]]
		if f43_local0 == nil then
			f43_local0 = Engine[@"GetPrimaryController"]() --[[ @ 0]]
		end
		local f43_local1 = function ( f44_arg0 )
			HUD_UpdateRefresh( f43_arg0, {
				controller = f43_local0
			} ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		local f43_local2 = Engine[@"GetModelForController"]( f43_local0 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5198075B069840DC"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_DA8E6697A56A554"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_57EAF988DDEB83EA"] ), f43_local1 ) --[[ @ 0]]
		f43_arg0:subscribeToModel( Engine[@"GetModel"]( f43_local2, "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1999FA50941A83B"] ), function ( model )
			f0_local4( f43_arg0, {
				controller = f43_local0
			} ) --[[ @ 0]]
		end ) --[[ @ 0]]
		f43_arg0:subscribeToModel( f43_local2.heldWeapons[0]:create( "viewmodelWeaponName" ), function ( model )
			CoD.HUDUtility[@"hash_1DCC62D0D0DCD91E"]( f43_arg0, f43_arg0.safeArea, model:get(), f43_local0 ) --[[ @ 0]]
		end ) --[[ @ 0]]
		if Engine[@"GetModel"]( f43_local2, "team" ) == nil then
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f43_local2, "team" ), 0 ) --[[ @ 0]]
		end
		if CoD.isPC then
			f43_arg0:registerEventHandler( "chooseclass_hotkey", HUD_Handle_ChooseClass_HotKey ) --[[ @ 0]]
			f43_arg0:subscribeToModel( f43_local2.LastInput, function ()
				if Engine[@"hash_1A11C376CCDCBA5A"]( f43_local0 ) then
					CoD.ScoreboardUtility.HideScoreboard( f43_arg0, f43_local0 ) --[[ @ 0]]
					CoD.ModelUtility.SetGlobalDatasourceModelValueToEnum( f43_local0, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1E16E7DEBC8823D8"] ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f43_local0 ), "forceScoreboard" ), 0 ) --[[ @ 0]]
	end
	
	function HUD_RemoveAllChildren( f48_arg0 )
		while #f48_arg0.forceCloseChildren > 0 do
			local f48_local0 = f48_arg0.forceCloseChildren[1] --[[ @ 0]]
			if f48_local0.widget then
				f48_local0.widget:close() --[[ @ 0]]
			end
			if f48_local0.selfFieldName then
				f48_arg0[f48_local0.selfFieldName] = nil --[[ @ 0]]
			end
		end
		f48_arg0.forceCloseChildren = {} --[[ @ 0]]
		f48_arg0:removeAllChildren() --[[ @ 0]]
	end
	
	function HUD_FirstSnapshot( f49_arg0, f49_arg1 )
		f49_arg0:dispatchEventToChildren( {
			name = "close_all_popups",
			controller = f49_arg1.controller
		} ) --[[ @ 0]]
		f49_arg0.bootOnOpen = false --[[ @ 0]]
		if f49_arg0.T7HudMenu ~= nil then
			if f49_arg1.debugReload or f49_arg1.hostMigrationOccured then
				CoD.Menu.DebugCloseMenu( f49_arg0.T7HudMenu ) --[[ @ 0]]
				f49_arg0.T7HudMenu = nil --[[ @ 0]]
			else
				f49_arg0.bootOnOpen = f49_arg0.T7HudMenu.hasBooted --[[ @ 0]]
			end
		end
		if f49_arg0.T7HudMenuGameMode ~= nil and (f49_arg1.debugReload or f49_arg1.hostMigrationOccured) then
			CoD.Menu.DebugCloseMenu( f49_arg0.T7HudMenuGameMode ) --[[ @ 0]]
			CoD.HUDUtility.ClearCustomGainFocusWidgets( f49_arg0 ) --[[ @ 0]]
			f49_arg0.T7HudMenuGameMode = nil --[[ @ 0]]
		end
		HUD_RemoveAllChildren( f49_arg0 ) --[[ @ 0]]
		if f49_arg0.loadingMenu then
			local f49_local0 = function ( f50_arg0 )
				if f50_arg0.loadingMenu then
					Engine[@"hash_2B3B13569A733293"]() --[[ @ 0]]
					if f50_arg0.loadingMenu:hasClip( "Close" ) and not Engine[@"IsSplitscreen"]() then
						f50_arg0.loadingMenu:playClip( "Close" ) --[[ @ 0]]
						f50_arg0.loadingMenu:registerEventHandler( "clip_over", function ( element, event )
							element:close() --[[ @ 0]]
							f50_arg0.loadingMenu = nil --[[ @ 0]]
						end ) --[[ @ 0]]
					else
						f50_arg0.loadingMenu:close() --[[ @ 0]]
						f50_arg0.loadingMenu = nil --[[ @ 0]]
					end
				end
			end
			 --[[ @ 0]]
			local f49_local1 = f49_arg0:getParent() --[[ @ 0]]
			f49_local1:addElement( f49_arg0.loadingMenu ) --[[ @ 0]]
			if CoD.isWarzone then
				f49_local1 = DataSources.HUDItems.getModel( f49_arg1.controller ) --[[ @ 0]]
				f49_arg0:subscribeToModel( f49_local1.wzLoadFinished, function ( model )
					if model:get() == 1 then
						f49_local0( f49_arg0 ) --[[ @ 0]]
					end
				end ) --[[ @ 0]]
			else
				f49_local1 = f49_arg0:getParent() --[[ @ 0]]
				f49_local1:addElement( LUI.UITimer.newElementTimer( 0, true, function ()
					f49_local0( f49_arg0 ) --[[ @ 0]]
				end ) ) --[[ @ 0]]
			end
		else
			Engine[@"hash_2B3B13569A733293"]() --[[ @ 0]]
		end
		if CoD.isWarzone and f49_arg0.splitscreenLoading then
			local f49_local0 = DataSources.HUDItems.getModel( f49_arg1.controller ) --[[ @ 0]]
			f49_local0 = f49_local0.wzLoadFinished --[[ @ 0]]
			local f49_local1 = f49_arg0:getParent() --[[ @ 0]]
			f49_local1:addElement( f49_arg0.splitscreenLoading ) --[[ @ 0]]
			f49_arg0:subscribeToModel( f49_local0, function ( model )
				if model:get() == 1 then
					f49_arg0.splitscreenLoading:close() --[[ @ 0]]
					f49_arg0.splitscreenLoading = nil --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
		f49_arg0:setOwner( f49_arg1.controller ) --[[ @ 0]]
		f49_arg0.controller = f49_arg1.controller --[[ @ 0]]
		HUD_DelayLoadMenus() --[[ @ 0]]
		if Engine[@"hash_28069F5969D47DEF"]() then
			if not f49_arg0.freeCursor then
				f49_arg0.freeCursor = LUI.createMenu.FreeCursor( f49_arg0.controller ) --[[ @ 0]]
				f49_arg0.freeCursor:setPriority( 1000 ) --[[ @ 0]]
				local f49_local0 = f49_arg0:getParent() --[[ @ 0]]
				f49_local0:addElement( f49_arg0.freeCursor ) --[[ @ 0]]
				f49_arg0:addCustomForceClosedWidget( f49_arg0.freeCursor, "freeCursor" ) --[[ @ 0]]
			end
			f49_arg0.freeCursor:menuOpened( f49_arg0.controller, f49_arg0.freeCursor ) --[[ @ 0]]
		end
		local f49_local0 = CoD.BlackTransitionFade.new( f49_arg0, f49_arg0.controller, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
		f49_local0:setPriority( 1001 ) --[[ @ 0]]
		local f49_local1 = f49_arg0:getParent() --[[ @ 0]]
		f49_local1:addElement( f49_local0 ) --[[ @ 0]]
		f49_arg0:addCustomForceClosedWidget( f49_local0, "BlackFade" ) --[[ @ 0]]
		f49_local1 = CoD.MainOverlay.new( f49_arg0, f49_arg0.controller, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
		f49_local1:setPriority( 1000 ) --[[ @ 0]]
		local f49_local2 = f49_arg0:getParent() --[[ @ 0]]
		f49_local2:addElement( f49_local1 ) --[[ @ 0]]
		f49_arg0:sendInitializationEvents( f49_arg0.controller, f49_local1 ) --[[ @ 0]]
		f49_arg0:addCustomForceClosedWidget( f49_local1, "MainOverlay" ) --[[ @ 0]]
		f49_arg0.startMenu = LUI.createMenu.StartMenu_Main( f49_arg0.controller ) --[[ @ 0]]
		f49_arg0.startMenu.onStartMenuOpened = function ( f55_arg0, f55_arg1 )
			if CoD.isPC then
				f55_arg0:CheckDefaultFocus( f55_arg1 ) --[[ @ 0]]
			elseif f55_arg0.__defaultFocus then
				CoD.FreeCursorUtility.GiveFocusToElementsDefaultFocus( f55_arg0, f55_arg0, f55_arg1 ) --[[ @ 0]]
			end
			local f55_local0 = Engine[@"GetModelForController"]( f55_arg1 ) --[[ @ 0]]
			f55_local0.open_ingame_menu_update:forceNotifySubscriptions() --[[ @ 0]]
		end
		 --[[ @ 0]]
		f49_arg0.startMenu.onStartMenuClosed = function ( f56_arg0, f56_arg1 )
			
		end
		 --[[ @ 0]]
		f49_arg0.startMenu.m_disableAllButtonActions = true --[[ @ 0]]
		if not CoD.isPC then
			f49_arg0:addCustomForceClosedWidget( f49_arg0.startMenu, "startMenu" ) --[[ @ 0]]
		end
		f49_arg0.startMenu:processEvent( {
			name = "menu_loaded",
			controller = f49_arg0.controller,
			menu = f49_arg0.startMenu
		} ) --[[ @ 0]]
		f49_arg0.startMenu:menuOpened( f49_arg0.controller, f49_arg0.startMenu ) --[[ @ 0]]
		HUD_FirstSnapshot_Common( f49_arg0, f49_arg1 ) --[[ @ 0]]
		if false == CoD.isZombie then
			HUD_FirstSnapshot_NotZombie( f49_arg0, f49_arg1 ) --[[ @ 0]]
			if CoD.isCampaign == true then
				HUD_FirstSnapshot_Campaign( f49_arg0, f49_arg1 ) --[[ @ 0]]
			elseif Engine[@"hash_217B32C04C4BE462"]( Engine[@"hash_3C3DF042E7492B66"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"] ) ) == Enum[@"LobbyMode"][@"hash_3B3A1BBF18C0B176"] or IsSimulateCT() then
				HUD_FirstSnapshot_CombatTraining( f49_arg0, f49_arg1 ) --[[ @ 0]]
			end
		else
			if not CoD.isPC then
				f49_arg0:dispatchEventToRoot( {
					name = "close_menu",
					menuName = "StartMenu_Main",
					controller = f49_arg1.controller
				} ) --[[ @ 0]]
			end
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f49_arg1.controller ), "forceScoreboard" ), 0 ) --[[ @ 0]]
			HUD_FirstSnapshot_Zombie( f49_arg0, f49_arg1 ) --[[ @ 0]]
		end
		if f49_arg0.safeArea then
			f49_arg0.safeArea:processEvent( {
				name = "menu_loaded",
				controller = f49_arg0.controller,
				menu = f49_arg0.safeArea
			} ) --[[ @ 0]]
			f49_arg0.safeArea:menuOpened( f49_arg0.controller, f49_arg0.startMenu ) --[[ @ 0]]
		end
		Engine[@"ForceHUDRefresh"]( f49_arg1.controller ) --[[ @ 0]]
		HUD_UpdateRefresh( f49_arg0, f49_arg1 ) --[[ @ 0]]
		f49_arg0.firstSnapshotProcessed = true --[[ @ 0]]
		if f49_arg0.pendingInGameMenuEvents then
			for f49_local2 = 1 --[[ @ 0]], #f49_arg0.pendingInGameMenuEvents, 1 do
				f0_local0( f49_arg0, f49_arg0.pendingInGameMenuEvents[f49_local2] ) --[[ @ 0]]
			end
			f49_arg0.pendingInGameMenuEvents = nil --[[ @ 0]]
		end
		return true
	end
	
	function HUD_StartMigration( f57_arg0, f57_arg1 )
		HUD_RemoveAllChildren( f57_arg0 ) --[[ @ 0]]
		CoD.CodCasterUtility.SetupUIModels( f57_arg1.controller ) --[[ @ 0]]
		CoD.SubtitleUtility.ClearSubtitleModels( f57_arg1.controller ) --[[ @ 0]]
		f57_arg0.hostMigrationMenu = LUI.createMenu.Migration( f57_arg1.controller, f57_arg0 ) --[[ @ 0]]
		f57_arg0.hostMigrationMenu:setPriority( 1002 ) --[[ @ 0]]
		local f57_local0 = f57_arg0:getParent() --[[ @ 0]]
		if f57_local0 then
			f57_local0:addElement( f57_arg0.hostMigrationMenu ) --[[ @ 0]]
			f57_arg0:addCustomForceClosedWidget( f57_arg0.hostMigrationMenu, "hostMigrationMenu" ) --[[ @ 0]]
			f57_arg0.hostMigrationMenu:menuOpened( f57_arg1.controller, f57_arg0.hostMigrationMenu ) --[[ @ 0]]
		end
	end
	
	function HUD_FirstSnapshot_Common( f58_arg0, f58_arg1 )
		CoD.scoreInfoTable = CoD.GameTypeUtility.GetGameTypeValue( Engine[@"hash_169811927938FCD7"](), "scoreInfoFile", CoD.scoreInfoTable ) --[[ @ 0]]
		if not CoD.isMultiplayer and not CoD.isWarzone then
			f58_arg0.cinematicSubtitles = CoD.MovieSubtitles.new( f58_arg0, f58_arg1.controller, 0.5, 0.5, -640, 640, 0.5, 0.5, -360, 360 ) --[[ @ 0]]
			f58_arg0:addForceClosedChild( f58_arg0.cinematicSubtitles, "cinematicSubtitles" ) --[[ @ 0]]
			f58_arg0.SubtitlesContainer = CoD.SubtitlesContainer.new( f58_arg0, f58_arg1.controller, 0.5, 0.5, -555, 555, 1, 1, -468, -321 ) --[[ @ 0]]
			f58_arg0:addForceClosedChild( f58_arg0.SubtitlesContainer, "SubtitlesContainer" ) --[[ @ 0]]
		end
		CoD.HUDUtility.GetCachedBloodSettings() --[[ @ 0]]
		local f58_local0 = f58_arg1.controller --[[ @ 0]]
		HUD_AddHintTextElements( f58_arg0, f58_local0 ) --[[ @ 0]]
		local f58_local1 = CoD.Menu.NewFromState( "hud_safearea" ) --[[ @ 0]]
		f58_local1.ignoreCursor = true --[[ @ 0]]
		f58_local1.disableKeyboardNavigation = true --[[ @ 0]]
		f58_local1:sizeToSafeArea( f58_local0 ) --[[ @ 0]]
		f58_local1:setPriority( 100 ) --[[ @ 0]]
		f58_local1:setOwner( f58_arg1.controller ) --[[ @ 0]]
		f58_arg0:addElement( f58_local1 ) --[[ @ 0]]
		if f58_arg0.safeArea and f58_arg0.safeArea.buttonModel then
			if LUI.DEV then
				local f58_local2 = LUI.DEV.ErrorIfModelsDoNotMatch( f58_arg0.safeArea.buttonModel, Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f58_local0 ), "HUDSafeArea.buttonPrompts" ) ) --[[ @ 0]]
			end
			Engine[@"UnsubscribeAndFreeModel"]( f58_arg0.safeArea.buttonModel ) --[[ @ 0]]
			f58_arg0.safeArea:close() --[[ @ 0]]
		end
		f58_arg0.safeArea = f58_local1 --[[ @ 0]]
		CoD.HUDUtility.AddCustomGainFocusWidget( f58_arg0, f58_arg0.safeArea ) --[[ @ 0]]
		f58_arg0.safeArea.buttonModel = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f58_local0 ), "HUDSafeArea.buttonPrompts" ) --[[ @ 0]]
	end
	
	function HUD_AddHintTextElements( f59_arg0, f59_arg1 )
		local f59_local0 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f59_arg1 ), "profile.colorblindMode" ) --[[ @ 0]]
		local f59_local1 = Engine[@"hash_169811927938FCD7"]() --[[ @ 0]]
		if f59_local1 == "codfu" then
			return 
		elseif f59_local1 == "doa" then
			return 
		end
		local self = LUI.UIElement.new() --[[ @ 0]]
		self:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		self:setTopBottom( false, true, -320, -320 + CoD.textSize.ExtraSmall ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( self ) --[[ @ 0]]
		self:setupPlayerStance() --[[ @ 0]]
		local f59_local3 = LUI.UIElement.new() --[[ @ 0]]
		f59_local3:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local3:setTopBottom( true, false, 180, 180 + CoD.textSize.Default ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local3 ) --[[ @ 0]]
		f59_local3:setupHoldBreathHint() --[[ @ 0]]
		local f59_local4 = LUI.UIElement.new() --[[ @ 0]]
		f59_local4:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local4:setTopBottom( true, false, 140, 140 + CoD.textSize.Default ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local4 ) --[[ @ 0]]
		f59_local4:setupHoldBreathZoomHint() --[[ @ 0]]
		local f59_local5 = LUI.UIElement.new() --[[ @ 0]]
		f59_local5:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local5:setTopBottom( false, false, 90, 90 + CoD.textSize.Default ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local5 ) --[[ @ 0]]
		f59_local5:setupMeleeChargeHint() --[[ @ 0]]
		local f59_local6 = LUI.UIElement.new() --[[ @ 0]]
		f59_local6:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local6:setTopBottom( false, false, 90, 90 + CoD.textSize.Default ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local6 ) --[[ @ 0]]
		f59_local6:setupMeleeCounterHint() --[[ @ 0]]
		local f59_local7 = LUI.UIElement.new() --[[ @ 0]]
		f59_local7:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local7:setTopBottom( false, false, 45, 45 + CoD.textSize.ExtraSmall ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local7 ) --[[ @ 0]]
		f59_local7:setupInvalidCmdHint() --[[ @ 0]]
		if not CoD.isZombie and not CoD.isCampaign then
			if not IsWarzone() then
				local f59_local8 = LUI.UIElement.new() --[[ @ 0]]
				f59_local8:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
				f59_local8:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
				f59_local8:setImage( RegisterMaterial( @"compassping_enemy_diamond_bottom" ) ) --[[ @ 0]]
				f59_local8:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "EnemyScorestreakTarget" ) ) ) --[[ @ 0]]
				f59_arg0:addForceClosedChild( f59_local8 ) --[[ @ 0]]
				f59_local8:setupTargetHighlights_Enemy() --[[ @ 0]]
				if f59_local0 then
					f59_local8:subscribeToModel( f59_local0, function ( model )
						f59_local8:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "EnemyScorestreakTarget" ) ) ) --[[ @ 0]]
					end, false ) --[[ @ 0]]
				end
			end
			local f59_local8 = LUI.UIElement.new() --[[ @ 0]]
			f59_local8:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
			f59_local8:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
			f59_local8:setImage( RegisterMaterial( @"compassping_enemy_diamond_bottom" ) ) --[[ @ 0]]
			f59_local8:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "PlayerYellow" ) ) ) --[[ @ 0]]
			f59_arg0:addForceClosedChild( f59_local8 ) --[[ @ 0]]
			f59_local8:setupTargetHighlights_Friendly() --[[ @ 0]]
			if f59_local0 then
				f59_local8:subscribeToModel( f59_local0, function ( model )
					f59_local8:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, IsMultiplayer() and "PlayerYellow" or "PlayerGreen" ) ) ) --[[ @ 0]]
				end, false ) --[[ @ 0]]
			end
			local f59_local9 = LUI.UIElement.new() --[[ @ 0]]
			f59_local9:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
			f59_local9:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
			f59_local9:setImage( RegisterMaterial( @"compassping_enemysatellite_diamond" ) ) --[[ @ 0]]
			f59_local9:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "PlayerYellow" ) ) ) --[[ @ 0]]
			f59_arg0:addForceClosedChild( f59_local9 ) --[[ @ 0]]
			f59_local9:setupTargetHighlights_Friendly() --[[ @ 0]]
			if f59_local0 then
				f59_local9:subscribeToModel( f59_local0, function ( model )
					f59_local9:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, IsMultiplayer() and "PlayerYellow" or "PlayerGreen" ) ) ) --[[ @ 0]]
				end, false ) --[[ @ 0]]
			end
			local f59_local10 = LUI.UIElement.new() --[[ @ 0]]
			f59_local10:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
			f59_local10:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
			f59_local10:setImage( RegisterMaterial( @"compassping_enemysatellite_diamond" ) ) --[[ @ 0]]
			f59_local10:setRGB( 1, 0, 0 ) --[[ @ 0]]
			f59_arg0:addForceClosedChild( f59_local10 ) --[[ @ 0]]
			f59_local10:setupPlayerPivotTargetting() --[[ @ 0]]
		end
		local f59_local8 = LUI.UIElement.new() --[[ @ 0]]
		f59_local8:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		f59_local8:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
		f59_local8:setRGB( 1, 0, 0 ) --[[ @ 0]]
		f59_arg0:addForceClosedChild( f59_local8 ) --[[ @ 0]]
		f59_local8:setupPlayerGrappleTargetting() --[[ @ 0]]
		if not CoD.isZombie and not CoD.isCampaign then
			local f59_local9 = LUI.UIElement.new() --[[ @ 0]]
			f59_local9:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
			f59_local9:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
			f59_local9:setImage( RegisterMaterial( @"compassping_enemysatellite_diamond" ) ) --[[ @ 0]]
			f59_local9:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "EnemyScorestreakTarget" ) ) ) --[[ @ 0]]
			f59_arg0:addForceClosedChild( f59_local9 ) --[[ @ 0]]
			f59_local9:setupLockonHighlights() --[[ @ 0]]
			if f59_local0 then
				f59_local9:subscribeToModel( f59_local0, function ( model )
					f59_local9:setRGB( CoD.ColorUtility.ExplodeColor( CoD.ColorUtility.GetColorBlindColorForPlayer( f59_arg1, "EnemyScorestreakTarget" ) ) ) --[[ @ 0]]
				end, false ) --[[ @ 0]]
			end
		end
		if CoD.isZombie == true or CoD.isWarzone then
			local f59_local9 = LUI.UIElement.new() --[[ @ 0]]
			f59_local9:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
			f59_local9:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
			f59_arg0:addForceClosedChild( f59_local9 ) --[[ @ 0]]
			f59_local9:setupFriendlyArrows() --[[ @ 0]]
			if CoD.isZombie == true then
				local f59_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
				f59_local10 = f59_local10["ZMHudGlobal.trials.hudDeactivated"] --[[ @ 0]]
				if f59_local10 then
					f59_local9:subscribeToModel( f59_local10, function ( model )
						if model:get() == 1 then
							f59_local9:setAlpha( 0 ) --[[ @ 0]]
						else
							f59_local9:setAlpha( 1 ) --[[ @ 0]]
						end
					end ) --[[ @ 0]]
				end
			end
		end
	end
	
	local f0_local18 = function ( f65_arg0, f65_arg1, f65_arg2 )
		if CoD.isMultiplayer and not Engine[@"hash_2A55C3ACD0D2BCF0"]() then
			local f65_local0 = CoD.SpawnSelectKillcam.new( f65_arg1, f65_arg2, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
			f65_local0:setState( f65_arg2, "Hidden" ) --[[ @ 0]]
			LUI.roots["UIRoot" .. f65_arg2].addElement( REG4["UIRoot" .. f65_arg2], f65_local0 ) --[[ @ 0]]
			f65_arg0:addCustomForceClosedWidget( f65_local0, "spawnSelect" ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f0_local19 = function ( f66_arg0, f66_arg1, f66_arg2 )
		f66_arg0.killcamHUD = LUI.createMenu.KillcamMenu( f66_arg2 ) --[[ @ 0]]
		f66_arg0.killcamHUD:addElementBefore( f66_arg1 ) --[[ @ 0]]
		f66_arg0.killcamHUD.persistent = true --[[ @ 0]]
		f66_arg0.killcamHUD:setAlpha( 0 ) --[[ @ 0]]
		f66_arg0:addCustomForceClosedWidget( f66_arg0.killcamHUD, "killcamHUD" ) --[[ @ 0]]
		f66_arg0.killcamHUD:menuOpened( f66_arg2, f66_arg0.killcamHUD ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f0_local20 = function ( f67_arg0, f67_arg1 )
		if Engine[@"hash_2A55C3ACD0D2BCF0"]() then
			return 
		else
			local f67_local0 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f67_arg1 ), "team" ) --[[ @ 0]]
			local f67_local1 = function ( f68_arg0 )
				if Engine[@"GetModelValue"]( f68_arg0 ) == Enum[@"team_t"][@"hash_5E4DDAC9C5C45556"] then
					if f67_arg0.safeArea and f67_arg0.safeArea.CodCaster == nil then
						if CoD.isWarzone then
							f67_arg0.safeArea.CodCaster = CoD.CodCaster_WZ.new( f67_arg0.safeArea, f67_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
						else
							f67_arg0.safeArea.CodCaster = CoD.CodCaster.new( f67_arg0.safeArea, f67_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
						end
						f67_arg0:addForceClosedSafeAreaChild( f67_arg0.safeArea.CodCaster ) --[[ @ 0]]
						f67_arg0.safeArea:sendInitializationEvents( f67_arg1, f67_arg0.safeArea.CodCaster ) --[[ @ 0]]
						f67_arg0.safeArea.buttonFunctions = f67_arg0.safeArea.CodCaster.buttonFunctions --[[ @ 0]]
						if not Engine[@"IsVisibilityBitSet"]( f67_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) then
							f67_arg0.safeArea.CodCaster:processEvent( {
								name = "gain_focus",
								controller = f67_arg1
							} ) --[[ @ 0]]
							f67_arg0.safeArea.CodCaster:gainFocus( {
								controller = f67_arg1
							} ) --[[ @ 0]]
						end
						if f67_arg0.safeArea.PostCodCasterLoad then
							f67_arg0.safeArea.PostCodCasterLoad( f67_arg0.safeArea.CodCaster ) --[[ @ 0]]
							f67_arg0.safeArea.PostCodCasterLoad = nil --[[ @ 0]]
						end
						LUI.OverrideFunction_CallOriginalSecond( f67_arg0.safeArea.CodCaster, "close", function ( element )
							CoD.Menu.UnsubscribeFromControllerSubscriptionsForElement( f67_arg0.safeArea, element ) --[[ @ 0]]
						end ) --[[ @ 0]]
						UpdateState( f67_arg0.safeArea.CodCaster, {
							controller = f67_arg1
						} ) --[[ @ 0]]
					end
				elseif f67_arg0.safeArea and f67_arg0.safeArea.CodCaster ~= nil then
					f67_arg0.safeArea.CodCaster:close() --[[ @ 0]]
					f67_arg0.safeArea.buttonFunctions = nil --[[ @ 0]]
					f67_arg0.safeArea.CodCaster = nil --[[ @ 0]]
				end
			end
			 --[[ @ 0]]
			if f67_arg0.hasTeamModelSubscription then
				f67_local1( f67_local0 ) --[[ @ 0]]
				return 
			else
				f67_arg0.hasTeamModelSubscription = true --[[ @ 0]]
				f67_arg0:subscribeToModel( f67_local0, f67_local1 ) --[[ @ 0]]
			end
		end
	end
	 --[[ @ 0]]
	function HUD_FirstSnapshot_NotZombie( f70_arg0, f70_arg1 )
		CoD.CodCasterUtility.SetupUIModels( f70_arg1.controller ) --[[ @ 0]]
		CoD.BaseUtility.CreateControllerModel( f70_arg1.controller, "interactivePrompt.activeObjectiveID" ) --[[ @ 0]]
		HUD_DelayLoadMenus() --[[ @ 0]]
		if CoD.isPC then
			CoD.PCUtility.DeactivateMenuChat( f70_arg1.controller ) --[[ @ 0]]
		end
		f70_arg0.toastNotification = CoD.ToastNotification.new( f70_arg0, f70_arg1.controller, 0.5, 0.5, -960, 960, 0, 0, 0, CoD.ToastNotification.__defaultHeight ) --[[ @ 0]]
		f70_arg0.toastNotification:setState( f70_arg1.controller, "DefaultState" ) --[[ @ 0]]
		f70_arg0.toastNotification:setPriority( 9999 ) --[[ @ 0]]
		local f70_local0 = f70_arg0:getParent() --[[ @ 0]]
		if f70_local0 then
			f70_local0:addElement( f70_arg0.toastNotification ) --[[ @ 0]]
			f70_arg0:addCustomForceClosedWidget( f70_arg0.toastNotification, "toastNotification" ) --[[ @ 0]]
		end
		local f70_local1 = Engine[@"GetModelForController"]( f70_arg1.controller ) --[[ @ 0]]
		if f70_local1 then
			f70_local1 = Engine[@"GetModel"]( f70_local1, "hudItems.playerSpawned" ) --[[ @ 0]]
		end
		local f70_local2 = f70_local1 and Engine[@"GetModelValue"]( f70_local1 ) --[[ @ 0]]
		if f70_local2 then
			Engine[@"SetModelValue"]( f70_local1, false ) --[[ @ 0]]
		end
		local f70_local3 = Engine[@"hash_169811927938FCD7"]() --[[ @ 0]]
		if f70_arg0.T7HudMenu then
			f70_arg0.T7HudMenu.SafeAreaContainerBack.Notifications.NotificationQueueWidget:clearNotificationQueue() --[[ @ 0]]
			f70_arg0.T7HudMenu.hasBooted = false --[[ @ 0]]
			f70_arg0.T7HudMenu:setAlpha( 1 ) --[[ @ 0]]
		elseif f70_local3 ~= "doa" and f70_local3 ~= "codfu" then
			local f70_local4 = nil --[[ @ 0]]
			f70_local4 = LUI.createMenu.Hud( f70_arg1.controller ) --[[ @ 0]]
			if f70_arg0.bootOnOpen and not CoD.IsShoutcaster( f70_arg1.controller ) then
				f70_arg0.bootOnOpen = false --[[ @ 0]]
				TryBootHUD( f70_local4, 0 ) --[[ @ 0]]
			end
			f70_arg0.T7HudMenu = f70_local4 --[[ @ 0]]
		end
		if f70_arg0.T7HudMenu then
			f70_arg0:addElement( f70_arg0.T7HudMenu ) --[[ @ 0]]
			f70_arg0.T7HudMenu:menuOpened( f70_arg1.controller, f70_arg0.T7HudMenu ) --[[ @ 0]]
		end
		local f70_local4 = nil --[[ @ 0]]
		if CoD.isCampaign == true then
			f70_local4 = "CP" --[[ @ 0]]
		elseif CoD.isWarzone or f70_local3 == "warzone" then
			f70_local4 = "WZ" --[[ @ 0]]
		else
			f70_local4 = "MP" --[[ @ 0]]
		end
		if f70_local3 == "codfu" then
			f70_local4 = "CODFU" --[[ @ 0]]
		end
		if f70_local3 == "doa" then
			require( "x64:7ba86678eab61fd3" ) --[[ @ 0]]
			f70_local4 = "DOA" --[[ @ 0]]
		end
		if not f70_arg0.T7HudMenuGameMode then
			local f70_local5 = nil --[[ @ 0]]
			if CoD.CodCasterUtility.IsCodCasterAssigned( f70_arg1.controller ) and not CoD.isWarzone then
				f70_local5 = LUI.createMenu.Hud_MP_Codcaster( f70_arg1.controller ) --[[ @ 0]]
			else
				f70_local5 = LUI.createMenu["Hud_" .. f70_local4]( f70_arg1.controller ) --[[ @ 0]]
			end
			if f70_local4 == "CP" and not f70_arg0.InGameTalkersWidget then
				local f70_local6 = CoD.InGameTalkersWidget.new( f70_local5, f70_arg1.controller, 0, 0, 64, 254, 0, 0, 36, 123 ) --[[ @ 0]]
				f70_arg0:addElement( f70_local6 ) --[[ @ 0]]
				f70_arg0.InGameTalkersWidget = f70_local6 --[[ @ 0]]
			end
			if f70_local2 then
				Engine[@"SetModelValue"]( f70_local1, true ) --[[ @ 0]]
			end
			f70_arg0.T7HudMenuGameMode = f70_local5 --[[ @ 0]]
		else
			f70_arg0.T7HudMenuGameMode:setAlpha( 1 ) --[[ @ 0]]
			if f70_local2 then
				Engine[@"SetModelValue"]( f70_local1, true ) --[[ @ 0]]
			end
		end
		f70_arg0:addElement( f70_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		if CoD.isPC and not IsMultiplayer() then
			CoD.PCUtility.DisableKeyboardNavigationInMenu( f70_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		end
		CoD.HUDUtility.AddCustomGainFocusWidget( f70_arg0, f70_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		f70_arg0.T7HudMenuGameMode:menuOpened( f70_arg1.controller, f70_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		CoD.HUDUtility.GiveFocus( f70_arg0.T7HudMenuGameMode, f70_arg1.controller ) --[[ @ 0]]
		if f70_arg0.T7HudMenu then
			f70_arg0.T7HudMenu:registerEventHandler( "gain_focus", function ( element, event )
				CoD.HUDUtility.GiveFocus( f70_arg0.T7HudMenuGameMode, event.controller ) --[[ @ 0]]
			end ) --[[ @ 0]]
		else
			CoD.HUDUtility.GiveFocus( f70_arg0.T7HudMenuGameMode, f70_arg1.controller ) --[[ @ 0]]
		end
		f70_arg0:setAlpha( 1 ) --[[ @ 0]]
		if f70_arg0.T7HudMenuGameMode then
			f0_local18( f70_arg0, f70_arg0.T7HudMenuGameMode, f70_arg1.controller ) --[[ @ 0]]
		end
		if CoD.isMultiplayer then
			f0_local19( f70_arg0, f70_arg0.T7HudMenu, f70_arg1.controller ) --[[ @ 0]]
		end
		CoD.scoreInfoTable = CoD.GameTypeUtility.GetGameTypeValue( f70_local3, "scoreInfoFile", nil ) or CoD.scoreInfoTable --[[ @ 0]]
		f0_local20( f70_arg0, f70_arg1.controller ) --[[ @ 0]]
		CoD.DemoUtility.AddHUDWidgets( f70_arg0.T7HudMenuGameMode, f70_arg1 ) --[[ @ 0]]
		if f70_arg0.T7HudMenuGameMode then
			if f70_arg0.positionDraftSub then
				f70_arg0:removeSubscription( f70_arg0.positionDraftSub ) --[[ @ 0]]
			end
			if CoD.isPC and CoD.isWarzone then
				f70_arg0.T7HudMenuGameMode:appendEventHandler( "occlusion_change", CoD.PCUtility.OnWZOcclusionChange ) --[[ @ 0]]
				f70_arg0:appendEventHandler( "occlusion_change", function ( f72_arg0, f72_arg1 )
					CoD.PCUtility.OnWZOcclusionChange( f72_arg0.T7HudMenuGameMode, f72_arg1 ) --[[ @ 0]]
				end ) --[[ @ 0]]
			end
			if CoD.isMultiplayer then
				local f70_local7 = f70_arg0 --[[ @ 0]]
				local f70_local6 = f70_arg0.subscribeToModel --[[ @ 0]]
				local f70_local8 = Engine[@"GetModelForController"]( f70_arg1.controller ) --[[ @ 0]]
				f70_arg0.positionDraftSub = f70_local6( f70_local7, f70_local8:create( "PositionDraft.stage" ), function ( f73_arg0 )
					if f73_arg0 then
						local f73_local0 = f70_arg0 --[[ @ 0]]
						local f73_local1 = f73_arg0:get() --[[ @ 0]]
						if f73_local1 ~= nil and f73_local1 > CoD.PlayerRoleUtility.DraftStage.DRAFT_STAGE_NONE and f73_local1 <= CoD.PlayerRoleUtility.DraftStage.DRAFT_STAGE_FINALIZE then
							CreatePrematchDraft( f70_arg0, f70_arg1.controller ) --[[ @ 0]]
						elseif f73_local1 == CoD.PlayerRoleUtility.DraftStage.DRAFT_STAGE_CHOOSE_POST_DRAFT then
							CoD.PlayerRoleUtility.ChooseSpecialistMidMatch( f70_arg0, f70_arg1.controller ) --[[ @ 0]]
						end
					end
				end ) --[[ @ 0]]
			end
		end
	end
	
	local f0_local21 = function ( f74_arg0, f74_arg1 )
		if f74_arg0._vehicleHackModeSubscription then
			f74_arg0:removeSubscription( f74_arg0._vehicleHackModeSubscription ) --[[ @ 0]]
		end
		f74_arg0._vehicleHackModeSubscription = f74_arg0:subscribeToGlobalModel( f74_arg1.controller, "HUDItems", "vehicleHack.mode", function ( model )
			local f75_local0 = model:get() or 0 --[[ @ 0]]
			if f74_arg0.vehicleHack and f75_local0 == 0 then
				f74_arg0.vehicleHack:close() --[[ @ 0]]
				f74_arg0.vehicleHack = nil --[[ @ 0]]
			elseif not f74_arg0.vehicleHack and f75_local0 ~= 0 then
				f74_arg0.vehicleHack = CoD.vehicleHack.new( f74_arg0, f74_arg1.controller, 0, 0, 0, CoD.vehicleHack.__defaultWidth, 0, 0, 0, CoD.vehicleHack.__defaultHeight ) --[[ @ 0]]
				f74_arg0.vehicleHack.mode = f75_local0 --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f74_arg0.vehicleHack, "close", function ()
					f74_arg0.vehicleHack = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f74_arg0:addForceClosedChild( f74_arg0.vehicleHack, "vehicleHack" ) --[[ @ 0]]
				f74_arg0:sendInitializationEvents( f74_arg0.controller, f74_arg0.vehicleHack ) --[[ @ 0]]
			elseif f74_arg0.vehicleHack and f74_arg0.vehicleHack.mode ~= f75_local0 then
				CoD.CPUtility.SetupVehicleHack( f74_arg0.vehicleHack, f74_arg1.controller ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		if f74_arg0._spinnerPuzzleSubscription then
			f74_arg0:removeSubscription( f74_arg0._spinnerPuzzleSubscription ) --[[ @ 0]]
		end
		f74_arg0._spinnerPuzzleSubscription = f74_arg0:subscribeToGlobalModel( f74_arg1.controller, "SpinnerPuzzle", "active", function ( model )
			if model:get() and not f74_arg0.spinnerPuzzle then
				f74_arg0.spinnerPuzzle = CoD.spinnersPuzzle.new( f74_arg0, f74_arg0.controller, 0, 0, 0, CoD.spinnersPuzzle.__defaultWidth, 0, 0, 0, CoD.spinnersPuzzle.__defaultHeight ) --[[ @ 0]]
				f74_arg0:sendInitializationEvents( f74_arg0.controller, f74_arg0.spinnerPuzzle ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f74_arg0.spinnerPuzzle, "close", function ()
					f74_arg0.spinnerPuzzle = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f74_arg0:addForceClosedChild( f74_arg0.spinnerPuzzle, "spinnerPuzzle" ) --[[ @ 0]]
				f74_arg0:sendInitializationEvents( f74_arg0.controller, f74_arg0.spinnerPuzzle ) --[[ @ 0]]
			elseif not model:get() and f74_arg0.spinnerPuzzle then
				f74_arg0.spinnerPuzzle:close() --[[ @ 0]]
				f74_arg0.spinnerPuzzle = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		if f74_arg0._threeRingsSubscription then
			f74_arg0:removeSubscription( f74_arg0._threeRingsSubscription ) --[[ @ 0]]
		end
		f74_arg0._threeRingsSubscription = f74_arg0:subscribeToGlobalModel( f74_arg1.controller, "ThreeRings", "active", function ( model )
			if model:get() and not f74_arg0.threeRings then
				f74_arg0.threeRings = CoD.ThreeRings.new( f74_arg0, f74_arg0.controller, 0, 0, 0, CoD.ThreeRings.__defaultWidth, 0, 0, 0, CoD.ThreeRings.__defaultHeight ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f74_arg0.threeRings, "close", function ()
					f74_arg0.threeRings = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f74_arg0:addForceClosedChild( f74_arg0.threeRings, "threeRings" ) --[[ @ 0]]
				f74_arg0:sendInitializationEvents( f74_arg0.controller, f74_arg0.threeRings ) --[[ @ 0]]
			elseif not model:get() and f74_arg0.threeRings then
				f74_arg0.threeRings:close() --[[ @ 0]]
				f74_arg0.threeRings = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		if f74_arg0._axeHackSubscription then
			f74_arg0:removeSubscription( f74_arg0._axeHackSubscription ) --[[ @ 0]]
		end
		f74_arg0._axeHackSubscription = f74_arg0:subscribeToGlobalModel( f74_arg1.controller, "AxeHack", "active", function ( model )
			if model:get() and not f74_arg0.axeHack then
				f74_arg0.axeHack = CoD.AxeHack.new( f74_arg0, f74_arg0.controller, 0, 0, 0, CoD.AxeHack.__defaultWidth, 0, 0, 0, CoD.AxeHack.__defaultHeight ) --[[ @ 0]]
				f74_arg0.axeHack:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
				f74_arg0.axeHack:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f74_arg0.axeHack, "close", function ()
					f74_arg0.axeHack = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f74_arg0:addForceClosedChild( f74_arg0.axeHack, "axeHack" ) --[[ @ 0]]
				f74_arg0:sendInitializationEvents( f74_arg0.controller, f74_arg0.axeHack ) --[[ @ 0]]
			elseif not model:get() and f74_arg0.axeHack then
				f74_arg0.axeHack:close() --[[ @ 0]]
				f74_arg0.axeHack = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f0_local22 = function ( f83_arg0, f83_arg1 )
		if f83_arg0._interferenceSelectorSubscription then
			f83_arg0:removeSubscription( f83_arg0._interferenceSelectorSubscription ) --[[ @ 0]]
		end
		f83_arg0._interferenceSelectorSubscription = f83_arg0:subscribeToGlobalModel( f83_arg1.controller, "InterferenceSelect", "active", function ( model )
			if model:get() == 1 and not f83_arg0.interferenceSelector then
				f83_arg0.interferenceSelector = LUI.createMenu.InterferenceSelector( f83_arg0.controller ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f83_arg0.interferenceSelector, "close", function ()
					f83_arg0.interferenceSelector = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f83_arg0:addForceClosedChild( f83_arg0.interferenceSelector, "interferenceSelector" ) --[[ @ 0]]
				f83_arg0.interferenceSelector:sendInitializationEvents( f83_arg0.controller, f83_arg0.interferenceSelector ) --[[ @ 0]]
				f83_arg0.interferenceSelector:menuOpened( f83_arg0.controller, f83_arg0.interferenceSelector ) --[[ @ 0]]
			elseif model:get() == 0 and f83_arg0.interferenceSelector then
				f83_arg0.interferenceSelector:close() --[[ @ 0]]
				f83_arg0.interferenceSelector = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	function HUD_FirstSnapshot_Campaign( f86_arg0, f86_arg1 )
		CoD.CodCasterUtility.SetupUIModels( f86_arg1.controller ) --[[ @ 0]]
		local f86_local0 = DataSources.HUDItems.getModel( f86_arg1.controller ) --[[ @ 0]]
		f86_local0 = f86_local0:create( "vehicleHack.mode" ) --[[ @ 0]]
		f86_local0:set( 0 ) --[[ @ 0]]
		f86_local0 = DataSources.HUDItems.getModel( f86_arg1.controller ) --[[ @ 0]]
		f86_local0 = f86_local0:create( "vehicleHack.level" ) --[[ @ 0]]
		f86_local0:set( 0 ) --[[ @ 0]]
		f0_local21( f86_arg0, f86_arg1 ) --[[ @ 0]]
		f0_local22( f86_arg0, f86_arg1 ) --[[ @ 0]]
	end
	
	function HUD_FirstSnapshot_CombatTraining( f87_arg0, f87_arg1 )
		local f87_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		local f87_local1 = f87_local0:create( "isIntroTutorialMovie" ) --[[ @ 0]]
		local f87_local2 = 0 --[[ @ 0]]
		if f87_local1 and f87_local1:get() then
			f87_local2 = 1 --[[ @ 0]]
		end
		Engine[@"SendMenuResponse"]( f87_arg1.controller, f87_arg0.menuName, "isIntroTutorialMovie", f87_local2 ) --[[ @ 0]]
	end
	
	function HUD_FirstSnapshot_Zombie( f88_arg0, f88_arg1 )
		CoD.CodCasterUtility.SetupUIModels( f88_arg1.controller ) --[[ @ 0]]
		local self = LUI.UIElement.new() --[[ @ 0]]
		self:setLeftRight( true, true, 0, 0 ) --[[ @ 0]]
		self:setTopBottom( true, true, 0, 0 ) --[[ @ 0]]
		self:sizeToSafeArea( f88_arg1.controller ) --[[ @ 0]]
		f88_arg0:addForceClosedChild( self ) --[[ @ 0]]
		HUD_DelayLoadMenus() --[[ @ 0]]
		f88_arg0.toastNotification = CoD.ToastNotification.new( f88_arg0, f88_arg1.controller, 0.5, 0.5, -960, 960, 0, 0, 0, CoD.ToastNotification.__defaultHeight ) --[[ @ 0]]
		f88_arg0.toastNotification:setState( f88_arg1.controller, "DefaultState" ) --[[ @ 0]]
		f88_arg0.toastNotification:setPriority( 9999 ) --[[ @ 0]]
		local f88_local1 = f88_arg0:getParent() --[[ @ 0]]
		if f88_local1 then
			f88_local1:addElement( f88_arg0.toastNotification ) --[[ @ 0]]
			f88_arg0:addCustomForceClosedWidget( f88_arg0.toastNotification, "toastNotification" ) --[[ @ 0]]
		end
		if f88_arg0.T7HudMenuGameMode == nil then
			local f88_local2 = LUI.createMenu["T7Hud_" .. Engine[@"GetCurrentMap"]()] --[[ @ 0]]
			if f88_local2 then
				f88_arg0.T7HudMenuGameMode = f88_local2( f88_arg1.controller ) --[[ @ 0]]
			else
				f88_arg0.T7HudMenuGameMode = LUI.createMenu.T7Hud_zm_factory( f88_arg1.controller ) --[[ @ 0]]
			end
		else
			f88_arg0.T7HudMenuGameMode:setAlpha( 1 ) --[[ @ 0]]
			local f88_local3 = Engine[@"GetModelForController"]( f88_arg1.controller ) --[[ @ 0]]
			if f88_local3 then
				f88_local3 = Engine[@"GetModel"]( f88_local3, "hudItems.playerSpawned" ) --[[ @ 0]]
			end
			if f88_local3 and Engine[@"GetModelValue"]( f88_local3 ) then
				Engine[@"SetModelValue"]( f88_local3, true ) --[[ @ 0]]
			end
		end
		f88_arg0:addElement( f88_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		if CoD.isPC then
			CoD.PCUtility.DisableKeyboardNavigationInMenu( f88_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		end
		f88_arg0.T7HudMenuGameMode:menuOpened( f88_arg1.controller, f88_arg0.T7HudMenuGameMode ) --[[ @ 0]]
		if f88_arg0.T7HudMenuGameMode then
			if f88_arg0.positionDraftSub then
				f88_arg0:removeSubscription( f88_arg0.positionDraftSub ) --[[ @ 0]]
			end
			local f88_local2 = f88_arg0 --[[ @ 0]]
			local f88_local3 = f88_arg0.subscribeToModel --[[ @ 0]]
			local f88_local4 = Engine[@"GetModelForController"]( f88_arg1.controller ) --[[ @ 0]]
			f88_arg0.positionDraftSub = f88_local3( f88_local2, f88_local4:create( "PositionDraft.stage" ), function ( f89_arg0 )
				if f89_arg0 then
					local f89_local0 = f88_arg0 --[[ @ 0]]
					local f89_local1 = f89_arg0:get() --[[ @ 0]]
					if f89_local1 ~= nil and f89_local1 > CoD.PlayerRoleUtility.DraftStage.DRAFT_STAGE_NONE then
						CreatePrematchDraft( f88_arg0, f88_arg1.controller ) --[[ @ 0]]
					end
				end
			end ) --[[ @ 0]]
		end
		CoD.DemoUtility.AddHUDWidgets( f88_arg0.T7HudMenuGameMode, f88_arg1 ) --[[ @ 0]]
	end
	
	function HasAnyChildWithID( f90_arg0, f90_arg1 )
		local f90_local0 = f90_arg0:getFirstChild() --[[ @ 0]]
		while f90_local0 ~= nil do
			if f90_local0.id == f90_arg1 then
				return true
			end
			f90_local0 = f90_local0:getNextSibling() --[[ @ 0]]
		end
		return false
	end
	
	f0_local0 = function ( f91_arg0, f91_arg1 )
		if not f91_arg0.firstSnapshotProcessed then
			if not f91_arg0.pendingInGameMenuEvents then
				f91_arg0.pendingInGameMenuEvents = {} --[[ @ 0]]
			end
			table.insert( f91_arg0.pendingInGameMenuEvents, f91_arg1 ) --[[ @ 0]]
			return 
		elseif type( f91_arg1.menuName ) == "xhash" then
			local f91_local0 = nil --[[ @ 0]]
			for f91_local4, f91_local5 in pairs( LUI.createMenu ) --[[ @ 0]] do
				if Engine[@"hash_1C53F8D38DF9042B"]( f91_local4 ) == f91_arg1.menuName then
					f91_local0 = f91_local4 --[[ @ 0]]
					break
				end
			end
			if not f91_local0 then
				for f91_local4, f91_local5 in pairs( CoD.OverlayUtility.Overlays ) --[[ @ 0]] do
					if Engine[@"hash_1C53F8D38DF9042B"]( f91_local4 ) == f91_arg1.menuName then
						f91_local0 = f91_local4 --[[ @ 0]]
						break
					end
				end
			end
			if not f91_local0 then
				return 
			end
			f91_arg1.menuName = f91_local0 --[[ @ 0]]
		end
		if f91_arg1.menuName == "DOA_INGAME_PAUSE" and CoD.isDOAPauseMenuOpen ~= nil and CoD.isDOAPauseMenuOpen == true then
			return 
		elseif f91_arg1.menuName == "StartMenu_Main" then
			if Engine[@"IsMigrating"]( f91_arg1.controller ) == true then
				return 
			end
			local f91_local0 = f91_arg0:getParent() --[[ @ 0]]
			if f91_local0 ~= nil and HasAnyChildWithID( f91_local0, "Menu.StartMenu_Main" ) then
				return 
			end
		end
		if Engine[@"CanPauseGame"]() then
			if CoD.InGameMenu.m_unpauseDisabled == nil then
				CoD.InGameMenu.m_unpauseDisabled = {} --[[ @ 0]]
			end
			CoD.InGameMenu.m_unpauseDisabled[f91_arg1.controller + 1] = 0 --[[ @ 0]]
			if f91_arg1.unpausable ~= nil and f91_arg1.unpausable == 0 then
				CoD.InGameMenu.m_unpauseDisabled[f91_arg1.controller + 1] = 1 --[[ @ 0]]
			end
		end
		if f91_arg1.data ~= nil then
			f91_arg1.menuName = Engine[@"GetIString"]( f91_arg1.data[1], "CS_SCRIPT_MENUS" ) --[[ @ 0]]
		end
		local f91_local0 = nil --[[ @ 0]]
		CoD.Menu.ModelToUse = f91_arg1.model --[[ @ 0]]
		if f91_arg1.menuName == "StartMenu_Main" then
			local f91_local2 = function ( f92_arg0 )
				if not CoD.isPC or not CoD.isWarzone then
					return false
				elseif Engine[@"hash_2A55C3ACD0D2BCF0"]() then
					return false
				end
				local f92_local0 = Engine[@"GetModelForController"]( f92_arg0 ) --[[ @ 0]]
				f92_local0 = f92_local0.gameScore --[[ @ 0]]
				if f92_local0 then
					f92_local0 = Engine[@"GetModelForController"]( f92_arg0 ) --[[ @ 0]]
					f92_local0 = f92_local0.gameScore.currentState:get() --[[ @ 0]]
				end
				if f92_local0 ~= nil and f92_local0 ~= "" then
					return true
				elseif IsVisibilityBitSet( f92_arg0, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) then
					return true
				end
				return false
			end
			 --[[ @ 0]]
			if f91_local2( f91_arg1.controller ) then
				f91_local2 = QuitPCGame_WZ_Spectating( f91_arg0, f91_arg1.controller, true ) --[[ @ 0]]
				if f91_local2 then
					LUI.OverrideFunction_CallOriginalFirst( f91_local2, "close", function ()
						StartMenuResumeGame( f91_local2, f91_arg1.controller ) --[[ @ 0]]
					end ) --[[ @ 0]]
				end
				return nil
			end
			f91_local0 = f91_arg0.startMenu --[[ @ 0]]
			f91_local0:setOccludedMenu( f91_arg0 ) --[[ @ 0]]
			f91_local0.m_disableAllButtonActions = false --[[ @ 0]]
			f91_local2 = LUI.getTableFromPath( "SafeAreaContainer.TabBar.Tabs.grid", f91_local0 ) --[[ @ 0]]
			if f91_local2 then
				f91_local2:updateDataSource( true ) --[[ @ 0]]
			end
			if CoD.isPC then
				CoD.PCUtility.MigrateStickyElementsForward( f91_local0, f91_arg0.controller ) --[[ @ 0]]
			end
			local f91_local3 = f91_arg0:getParent() --[[ @ 0]]
			f91_local3:addElement( f91_local0 ) --[[ @ 0]]
			DataSources.FreeCursor.registerButtonPrompts( f91_arg0.controller, f91_local0.buttonModel ) --[[ @ 0]]
			if not CoD.isWarzone then
				DataSources.XPProgressionBar.getModel( f91_arg0.controller ) --[[ @ 0]]
			end
			f91_local0:onStartMenuOpened( f91_arg0.controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.GiveFocusToElementsDefaultFocus( f91_local0, f91_local0, f91_arg0.controller ) --[[ @ 0]]
			if CoD.isPC then
				CoD.PCUtility.DeactivateMenuChat( f91_arg1.controller ) --[[ @ 0]]
			end
		elseif LUI.createMenu[f91_arg1.menuName] ~= nil then
			f0_local9 = true --[[ @ 0]]
			if f91_arg1.menuName == "ChooseClass_InGame" or f91_arg1.menuName == "PositionDraft" then
				f91_arg0:dispatchEventToRoot( {
					name = "close_menu",
					menuName = f91_arg1.menuName,
					controller = f91_arg1.controller
				} ) --[[ @ 0]]
			end
			if f91_arg1.isMenu or LUI.hudMenuType[f91_arg1.menuName] == "hud" then
				f91_local0 = f91_arg0:openMenu( f91_arg1.menuName, f91_arg1.controller ) --[[ @ 0]]
				if f91_local0._priority ~= nil then
					f91_local0:setPriority( f91_local0._priority ) --[[ @ 0]]
				end
			else
				f91_local0 = f91_arg0:openPopup( f91_arg1.menuName, f91_arg1.controller ) --[[ @ 0]]
			end
			if CoD.isPC and f91_arg1.menuName == "BountyHunterBuy" then
				CoD.ChatClientUtility.SetIsInBountyHunterMenu( true ) --[[ @ 0]]
				CoD.PCUtility.MigrateStickyElementsForward( f91_local0, f91_arg0.controller ) --[[ @ 0]]
			end
		else
			f91_local0 = CoD.OverlayUtility.CreateOverlay( f91_arg1.controller, f91_arg0, f91_arg1.menuName, f91_arg1.controller ) --[[ @ 0]]
			if f91_local0 then
				f0_local9 = true --[[ @ 0]]
			end
		end
		if f91_local0 and f91_local0:getModel() then
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f91_local0:getModel(), "close_current_menu" ), 0 ) --[[ @ 0]]
			f91_local0:subscribeToCloseMenuModel() --[[ @ 0]]
			f91_local0:subscribeToStateModel( f91_arg1.controller ) --[[ @ 0]]
			f91_local0:subscribeToCurrAnimationModel() --[[ @ 0]]
		end
		CoD.Menu.ModelToUse = nil --[[ @ 0]]
		return f91_local0
	end
	 --[[ @ 0]]
	function HUD_CloseSpecificInGameMenu( f94_arg0, f94_arg1 )
		if f94_arg1.data ~= nil then
			if f94_arg0.pendingInGameMenuEvents then
				for f94_local0 = #f94_arg0.pendingInGameMenuEvents --[[ @ 0]], 1, -1 do
					if f94_arg0.pendingInGameMenuEvents[f94_local0].controller == f94_arg1.controller and (not (not f94_arg0.pendingInGameMenuEvents[f94_local0].data or f94_arg0.pendingInGameMenuEvents[f94_local0].data[1] ~= f94_arg1.data[1]) or f94_arg0.pendingInGameMenuEvents[f94_local0].menuName and f94_arg0.pendingInGameMenuEvents[f94_local0].menuName == f94_arg1.menuName) then
						table.remove( f94_arg0.pendingInGameMenuEvents, f94_local0 ) --[[ @ 0]]
					end
				end
			end
			f94_arg0:dispatchEventToRoot( {
				name = "close_menu",
				menuName = Engine[@"GetIString"]( f94_arg1.data[1], "CS_SCRIPT_MENUS" ),
				controller = f94_arg1.controller
			} ) --[[ @ 0]]
		end
	end
	
	function HUD_OpenHudMenu( f95_arg0, f95_arg1 )
		f95_arg1.isMenu = true --[[ @ 0]]
		f0_local0( f95_arg0, f95_arg1 ) --[[ @ 0]]
		return true
	end
	
	function HUD_CloseHudMenu( f96_arg0, f96_arg1 )
		local f96_local0 = f96_arg1.menuName --[[ @ 0]]
		if f96_local0 then
			f96_arg0:dispatchEventToRoot( {
				name = "close_menu",
				menuName = f96_local0,
				controller = f96_arg1.controller
			} ) --[[ @ 0]]
		end
	end
	
	function HUD_Close( f97_arg0, f97_arg1 )
		if f97_arg0.safeArea and f97_arg0.safeArea.buttonModel then
			if LUI.DEV then
				local f97_local0 = LUI.DEV.ErrorIfModelsDoNotMatch( f97_arg0.safeArea.buttonModel, Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f97_arg0:getOwner() or 0 ), "HUDSafeArea.buttonPrompts" ) ) --[[ @ 0]]
			end
			Engine[@"UnsubscribeAndFreeModel"]( f97_arg0.safeArea.buttonModel ) --[[ @ 0]]
		end
		f97_arg0.safeArea.buttonModel = nil --[[ @ 0]]
		f97_arg0:close() --[[ @ 0]]
	end
	
	function HUD_OpenHudPopup( f98_arg0, f98_arg1 )
		f0_local0( f98_arg0, f98_arg1 ) --[[ @ 0]]
		return true
	end
	
	function HUD_CloseInGameMenu( f99_arg0, f99_arg1 )
		if Engine[@"CanPauseGame"]() then
			if CoD.InGameMenu.m_unpauseDisabled == nil then
				CoD.InGameMenu.m_unpauseDisabled = {} --[[ @ 0]]
			end
			CoD.InGameMenu.m_unpauseDisabled[f99_arg1.controller + 1] = 0 --[[ @ 0]]
		end
		f0_local9 = nil --[[ @ 0]]
		if Engine[@"CanPauseGame"]() then
			Engine[@"SetActiveMenu"]( f99_arg1.controller, Enum[@"hash_152E616D9ABDBF0E"][@"hash_1A1CE036AEF3710F"] ) --[[ @ 0]]
		end
	end
	
	function HUD_DebugReload( f100_arg0, f100_arg1 )
		if f100_arg0.m_eventHandlers.debug_reload ~= HUD_DebugReload then
			f100_arg0:registerEventHandler( "debug_reload", HUD_DebugReload ) --[[ @ 0]]
			f100_arg0:processEvent( {
				name = "debug_reload"
			} ) --[[ @ 0]]
			return 
		else
			HUD_FirstSnapshot( f100_arg0, {
				controller = f100_arg0.controller,
				debugReload = true
			} ) --[[ @ 0]]
			Engine[@"ForceHUDRefresh"]( f100_arg0.controller ) --[[ @ 0]]
			f100_arg0:processEvent( {
				name = "hud_boot",
				controller = f100_arg0.controller
			} ) --[[ @ 0]]
			Engine[@"SetModelValue"]( Engine[@"GetModel"]( Engine[@"GetModelForController"]( f100_arg0.controller ), "scriptNotify" ), @"player_spawned" ) --[[ @ 0]]
		end
	end
	
	function HUD_UpdateRefresh( f101_arg0, f101_arg1 )
		local f101_local0 = DataSources.VehicleInfo.getModel( f101_arg1.controller ) --[[ @ 0]]
		f101_local0 = f101_local0.vehicleType:get() --[[ @ 0]]
		if f101_local0 then
			f0_local11( f101_arg0, f101_arg1.controller, f101_local0, true ) --[[ @ 0]]
		end
		local f101_local1 = CoD.SafeGetModelValue( DataSources.CurrentWeapon.getModel( f101_arg1.controller ), "weaponReticle" ) --[[ @ 0]]
		if f101_local1 then
			f0_local13( f101_arg0, f101_arg1.controller, f101_local1, true ) --[[ @ 0]]
		end
		f0_local4( f101_arg0, f101_arg1 ) --[[ @ 0]]
		f0_local2( f101_arg0, f101_arg1 ) --[[ @ 0]]
	end
	
	function HUD_FullscreenStart( f102_arg0, f102_arg1 )
		f102_arg0:dispatchEventToChildren( f102_arg1 ) --[[ @ 0]]
		CoD.HUDUtility.FullscreenController = f102_arg1.controller --[[ @ 0]]
	end
	
	function HUD_FullscreenStop( f103_arg0, f103_arg1 )
		f103_arg0:dispatchEventToChildren( f103_arg1 ) --[[ @ 0]]
		CoD.HUDUtility.FullscreenController = nil --[[ @ 0]]
	end
	
	function HUD_UpdateScoreboardColumns( f104_arg0, f104_arg1 )
		
	end
	
	function HUD_StartKillcamHud( f105_arg0, f105_arg1 )
		if f105_arg0.T7HudMenu and not f105_arg0._isKillcamHUDOpen then
			if Engine[@"UpdateKillcamUIModels"] then
				Engine[@"UpdateKillcamUIModels"]( f105_arg1.controller, Engine[@"GetPredictedClientNum"]( f105_arg1.controller ) ) --[[ @ 0]]
			end
			if f105_arg0.killcamHUD and f105_arg0.killcamHUD.persistent then
				f105_arg0.killcamHUD:setAlpha( 1 ) --[[ @ 0]]
			else
				assert( CoD.isWarzone ) --[[ @ 0]]
				f105_arg0.killcamHUD = LUI.createMenu.KillcamMenu_WZ( f105_arg1.controller ) --[[ @ 0]]
				f105_arg0.killcamHUD:menuOpened( f105_arg1.controller, f105_arg0.killcamHUD ) --[[ @ 0]]
			end
			if CoD.isWarzone then
				f105_arg0:addElement( f105_arg0.killcamHUD ) --[[ @ 0]]
			else
				
			end
			assert( f105_arg0.killcamHUD ) --[[ @ 0]]
			f105_arg0._isKillcamHUDOpen = true --[[ @ 0]]
		end
	end
	
	function HUD_StopKillcamHud( f106_arg0, f106_arg1 )
		if f106_arg0._isKillcamHUDOpen then
			if f106_arg0.killcamHUD then
				if f106_arg0.killcamHUD.persistent then
					f106_arg0.killcamHUD:setAlpha( 0 ) --[[ @ 0]]
				else
					f106_arg0.killcamHUD:close() --[[ @ 0]]
					f106_arg0.killcamHUD = nil --[[ @ 0]]
				end
			end
			f106_arg0._isKillcamHUDOpen = false --[[ @ 0]]
		end
	end
	
	f0_local2 = function ( f107_arg0, f107_arg1 )
		if Engine[@"IsVisibilityBitSet"]( f107_arg1.controller, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) or Engine[@"IsVisibilityBitSet"]( f107_arg1.controller, Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"] ) or Engine[@"IsVisibilityBitSet"]( f107_arg1.controller, Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"] ) or Engine[@"IsVisibilityBitSet"]( f107_arg1.controller, Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ) then
			HUD_StartKillcamHud( f107_arg0, f107_arg1 ) --[[ @ 0]]
		else
			HUD_StopKillcamHud( f107_arg0, f107_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f0_local23 = function ( f108_arg0 )
		local f108_local0 --[[ @ 0]]
		if Engine[@"IsSplitscreen"]() == false then
			if Engine[@"IsDemoShoutcaster"]() ~= true then
				f108_local0 = Engine[@"IsVisibilityBitSet"]( f108_arg0, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) --[[ @ 0]]
				if f108_local0 then
					f108_local0 = Engine[@"IsVisibilityBitSet"]( f108_arg0, Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"] ) --[[ @ 0]]
					if f108_local0 then
						if not Engine[@"IsVisibilityBitSet"]( f108_arg0, Enum[@"UIVisibilityBit"][@"hash_5198075B069840DC"] ) then
							f108_local0 = not Engine[@"IsVisibilityBitSet"]( f108_arg0, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) --[[ @ 0]]
						else
							f108_local0 = false --[[ @ 0]]
						end
					end
				end
			else
				f108_local0 = true --[[ @ 0]]
			end
		else
			f108_local0 = false --[[ @ 0]]
		end
		return f108_local0
	end
	 --[[ @ 0]]
	local f0_local24 = function ( f109_arg0 )
		return Engine[@"IsVisibilityBitSet"]( f109_arg0, Enum[@"UIVisibilityBit"][@"hash_1999FA50941A83B"] ) and not Engine[@"IsVisibilityBitSet"]( f109_arg0, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] )
	end
	 --[[ @ 0]]
	if not CoD.isZombie then
		require( "x64:2d923ab4f5b48d75" ) --[[ @ 0]]
	end
	f0_local4 = function ( f110_arg0, f110_arg1 )
		if f0_local24( f110_arg1.controller ) then
			if f110_arg0.newLocationSelectorMap == nil then
				f110_arg0.newLocationSelectorMap = CoD.TabletLocationSelector.new( f110_arg0, f110_arg1.controller, 0, 0, 0, CoD.TabletLocationSelector.__defaultWidth, 0, 0, 0, CoD.TabletLocationSelector.__defaultHeight ) --[[ @ 0]]
				LUI.OverrideFunction_CallOriginalSecond( f110_arg0.newLocationSelectorMap, "close", function ()
					f110_arg0.newLocationSelectorMap = nil --[[ @ 0]]
				end ) --[[ @ 0]]
				f110_arg0:addForceClosedChild( f110_arg0.newLocationSelectorMap, "newLocationSelectorMap" ) --[[ @ 0]]
				f110_arg0:sendInitializationEvents( f110_arg0.controller, f110_arg0.newLocationSelectorMap ) --[[ @ 0]]
			end
		elseif f110_arg0.newLocationSelectorMap ~= nil then
			f110_arg0.newLocationSelectorMap:close() --[[ @ 0]]
			f110_arg0.newLocationSelectorMap = nil --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f0_local3 = function ( f112_arg0, f112_arg1 )
		if f112_arg0 ~= nil then
			local f112_local0 = f112_arg0:getOwner() --[[ @ 0]]
			if f112_local0 ~= nil then
				Engine[@"DisableSceneFilter"]( f112_local0, 4 ) --[[ @ 0]]
			end
		end
	end
	 --[[ @ 0]]
	f0_local5 = function ( f113_arg0, f113_arg1 )
		local f113_local0 = f113_arg1.data[1] --[[ @ 0]]
		local f113_local1 = f113_arg1.data[2] --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f113_arg1.controller ), "Attacker" ), "kills" ), f113_local0 ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f113_arg1.controller ), "Victim" ), "kills" ), f113_local1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f0_local6 = function ( f114_arg0, f114_arg1 )
		local f114_local0 = f114_arg1.data[1] --[[ @ 0]]
		local f114_local1 = f114_arg1.data[2] --[[ @ 0]]
		local f114_local2 = f114_arg1.data[3] --[[ @ 0]]
		local f114_local3 = f114_arg1.data[4] --[[ @ 0]]
		local f114_local4 = f114_arg1.data[5] --[[ @ 0]]
		local f114_local5 = Engine[@"hash_E4D2F32833CFA6C"]( f114_local0 ) --[[ @ 0]]
		local f114_local6 = f114_local5.scoreboard.killStats[f114_local1] --[[ @ 0]]
		if f114_local6 then
			f114_local6.clientNum:set( f114_local2 ) --[[ @ 0]]
			f114_local6.killed:set( f114_local3 ) --[[ @ 0]]
			f114_local6.killedBy:set( f114_local4 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	function HUD_IsFFA()
		if f0_local7 == nil then
			local f115_local0 = Engine[@"hash_169811927938FCD7"]() --[[ @ 0]]
			local f115_local1 --[[ @ 0]]
			if f115_local0 ~= "dm" and f115_local0 ~= "hcdm" and f115_local0 ~= "hack" then
				f115_local1 = false --[[ @ 0]]
			else
				f115_local1 = true --[[ @ 0]]
			end
			f0_local7 = f115_local1 --[[ @ 0]]
		end
		return f0_local7
	end
	
	function HUD_Handle_ChooseClass_HotKey( f116_arg0, f116_arg1 )
		if UIExpression.Team( f116_arg1.controller, "name" ) ~= "TEAM_SPECTATOR" and CoD.IsWagerMode() == false and not (Engine[@"GetGametypeSetting"]( @"disableclassselection" ) == 1) then
			f0_local0( f116_arg0, {
				menuName = "changeclass",
				controller = f116_arg1.controller
			} ) --[[ @ 0]]
		end
	end
	
end
DisableGlobals() --[[ @ 0]]
Engine[@"StopEditingPresetClass"]() --[[ @ 0]]
