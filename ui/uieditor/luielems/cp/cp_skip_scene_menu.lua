-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/cplevels/cpholdtoskipscenetext" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cplevels/cphostskippingscene" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cplevels/cpvoteskippingscene" ) --[[ @ 0]]

CoD.cp_skip_scene_menu = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.cp_skip_scene_menu = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "cp_skip_scene_menu", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.cp_skip_scene_menu ) --[[ @ 0]]
	self.soundSet = "HUD" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CPHostSkippingScene0 = CoD.CPHostSkippingScene.new( f1_local1, f1_arg0, 0.5, 0.5, -140, 140, 0, 0, 97, 136 ) --[[ @ 0]]
	CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CPHostSkippingScene0 ) --[[ @ 0]]
	self.CPHostSkippingScene0 = CPHostSkippingScene0 --[[ @ 0]]
	
	local CPSkipSceneButton0 = CoD.CPHoldToSkipSceneText.new( f1_local1, f1_arg0, 1, 1, -394, -113, 1, 1, -104, -66 ) --[[ @ 0]]
	CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CPSkipSceneButton0 ) --[[ @ 0]]
	self.CPSkipSceneButton0 = CPSkipSceneButton0 --[[ @ 0]]
	
	local CPVoteSkippingScene0 = CoD.CPVoteSkippingScene.new( f1_local1, f1_arg0, 0, 0, 1526, 1806, 0, 0, 976, 1013 ) --[[ @ 0]]
	CPVoteSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CPVoteSkippingScene0 ) --[[ @ 0]]
	self.CPVoteSkippingScene0 = CPVoteSkippingScene0 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HostIsSkipping",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "hostIsSkipping", 1 )
			end
		},
		{
			stateName = "ShowSkipButton_Newsroom",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "showSkipButton", 1 ) and IsMapName( "cp_newsroom" )
			end
		},
		{
			stateName = "ShowSkipButton",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "showSkipButton", 1 )
			end
		},
		{
			stateName = "VotedToSkip",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "votedToSkip", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "hostIsSkipping", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "hostIsSkipping"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "showSkipButton", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "showSkipButton"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "votedToSkip", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "votedToSkip"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.cp_skip_scene_menu.__resetProperties = function ( f9_arg0 )
	f9_arg0.CPHostSkippingScene0:completeAnimation() --[[ @ 0]]
	f9_arg0.CPSkipSceneButton0:completeAnimation() --[[ @ 0]]
	f9_arg0.CPVoteSkippingScene0:completeAnimation() --[[ @ 0]]
	f9_arg0.CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.CPSkipSceneButton0:setLeftRight( 1, 1, -394, -113 ) --[[ @ 0]]
	f9_arg0.CPSkipSceneButton0:setTopBottom( 1, 1, -104, -66 ) --[[ @ 0]]
	f9_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.CPVoteSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.cp_skip_scene_menu.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HostIsSkipping = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f11_local0 = function ( f12_arg0 )
				f11_arg0.CPHostSkippingScene0:beginAnimation( 500 ) --[[ @ 0]]
				f11_arg0.CPHostSkippingScene0:setAlpha( 1 ) --[[ @ 0]]
				f11_arg0.CPHostSkippingScene0:registerEventHandler( "interrupted_keyframe", f11_arg0.clipInterrupted ) --[[ @ 0]]
				f11_arg0.CPHostSkippingScene0:registerEventHandler( "transition_complete_keyframe", f11_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f11_arg0.CPHostSkippingScene0:completeAnimation() --[[ @ 0]]
			f11_arg0.CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
			f11_local0( f11_arg0.CPHostSkippingScene0 ) --[[ @ 0]]
		end,
		DefaultState = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f13_local0 = function ( f14_arg0 )
				f13_arg0.CPHostSkippingScene0:beginAnimation( 500 ) --[[ @ 0]]
				f13_arg0.CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
				f13_arg0.CPHostSkippingScene0:registerEventHandler( "interrupted_keyframe", f13_arg0.clipInterrupted ) --[[ @ 0]]
				f13_arg0.CPHostSkippingScene0:registerEventHandler( "transition_complete_keyframe", f13_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f13_arg0.CPHostSkippingScene0:completeAnimation() --[[ @ 0]]
			f13_arg0.CPHostSkippingScene0:setAlpha( 1 ) --[[ @ 0]]
			f13_local0( f13_arg0.CPHostSkippingScene0 ) --[[ @ 0]]
			f13_arg0.CPSkipSceneButton0:beginAnimation( 500 ) --[[ @ 0]]
			f13_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.CPSkipSceneButton0:registerEventHandler( "interrupted_keyframe", f13_arg0.clipInterrupted ) --[[ @ 0]]
			f13_arg0.CPSkipSceneButton0:registerEventHandler( "transition_complete_keyframe", f13_arg0.clipFinished ) --[[ @ 0]]
		end
	},
	ShowSkipButton_Newsroom = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f15_local0 = function ( f16_arg0 )
				f15_arg0.CPSkipSceneButton0:beginAnimation( 500 ) --[[ @ 0]]
				f15_arg0.CPSkipSceneButton0:setLeftRight( 1, 1, -1903, -1622 ) --[[ @ 0]]
				f15_arg0.CPSkipSceneButton0:setAlpha( 1 ) --[[ @ 0]]
				f15_arg0.CPSkipSceneButton0:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.CPSkipSceneButton0:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.CPSkipSceneButton0:completeAnimation() --[[ @ 0]]
			f15_arg0.CPSkipSceneButton0:setLeftRight( 1, 1, -1903.5, -1622.5 ) --[[ @ 0]]
			f15_arg0.CPSkipSceneButton0:setTopBottom( 1, 1, -941, -903 ) --[[ @ 0]]
			f15_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
			f15_local0( f15_arg0.CPSkipSceneButton0 ) --[[ @ 0]]
		end,
		DefaultState = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f17_arg0.CPHostSkippingScene0:beginAnimation( 500 ) --[[ @ 0]]
			f17_arg0.CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.CPHostSkippingScene0:registerEventHandler( "interrupted_keyframe", f17_arg0.clipInterrupted ) --[[ @ 0]]
			f17_arg0.CPHostSkippingScene0:registerEventHandler( "transition_complete_keyframe", f17_arg0.clipFinished ) --[[ @ 0]]
			local f17_local0 = function ( f18_arg0 )
				f17_arg0.CPSkipSceneButton0:beginAnimation( 490 ) --[[ @ 0]]
				f17_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
				f17_arg0.CPSkipSceneButton0:registerEventHandler( "interrupted_keyframe", f17_arg0.clipInterrupted ) --[[ @ 0]]
				f17_arg0.CPSkipSceneButton0:registerEventHandler( "transition_complete_keyframe", f17_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f17_arg0.CPSkipSceneButton0:completeAnimation() --[[ @ 0]]
			f17_arg0.CPSkipSceneButton0:setAlpha( 1 ) --[[ @ 0]]
			f17_local0( f17_arg0.CPSkipSceneButton0 ) --[[ @ 0]]
		end
	},
	ShowSkipButton = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f19_local0 = function ( f20_arg0 )
				f19_arg0.CPSkipSceneButton0:beginAnimation( 500 ) --[[ @ 0]]
				f19_arg0.CPSkipSceneButton0:setAlpha( 1 ) --[[ @ 0]]
				f19_arg0.CPSkipSceneButton0:registerEventHandler( "interrupted_keyframe", f19_arg0.clipInterrupted ) --[[ @ 0]]
				f19_arg0.CPSkipSceneButton0:registerEventHandler( "transition_complete_keyframe", f19_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f19_arg0.CPSkipSceneButton0:completeAnimation() --[[ @ 0]]
			f19_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
			f19_local0( f19_arg0.CPSkipSceneButton0 ) --[[ @ 0]]
		end,
		DefaultState = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.CPHostSkippingScene0:beginAnimation( 500 ) --[[ @ 0]]
			f21_arg0.CPHostSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.CPHostSkippingScene0:registerEventHandler( "interrupted_keyframe", f21_arg0.clipInterrupted ) --[[ @ 0]]
			f21_arg0.CPHostSkippingScene0:registerEventHandler( "transition_complete_keyframe", f21_arg0.clipFinished ) --[[ @ 0]]
			local f21_local0 = function ( f22_arg0 )
				f21_arg0.CPSkipSceneButton0:beginAnimation( 490 ) --[[ @ 0]]
				f21_arg0.CPSkipSceneButton0:setAlpha( 0 ) --[[ @ 0]]
				f21_arg0.CPSkipSceneButton0:registerEventHandler( "interrupted_keyframe", f21_arg0.clipInterrupted ) --[[ @ 0]]
				f21_arg0.CPSkipSceneButton0:registerEventHandler( "transition_complete_keyframe", f21_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f21_arg0.CPSkipSceneButton0:completeAnimation() --[[ @ 0]]
			f21_arg0.CPSkipSceneButton0:setAlpha( 1 ) --[[ @ 0]]
			f21_local0( f21_arg0.CPSkipSceneButton0 ) --[[ @ 0]]
		end
	},
	VotedToSkip = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f23_local0 = function ( f24_arg0 )
				f23_arg0.CPVoteSkippingScene0:beginAnimation( 250 ) --[[ @ 0]]
				f23_arg0.CPVoteSkippingScene0:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.CPVoteSkippingScene0:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.CPVoteSkippingScene0:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.CPVoteSkippingScene0:completeAnimation() --[[ @ 0]]
			f23_arg0.CPVoteSkippingScene0:setAlpha( 0 ) --[[ @ 0]]
			f23_local0( f23_arg0.CPVoteSkippingScene0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.cp_skip_scene_menu.__onClose = function ( f25_arg0 )
	f25_arg0.CPHostSkippingScene0:close() --[[ @ 0]]
	f25_arg0.CPSkipSceneButton0:close() --[[ @ 0]]
	f25_arg0.CPVoteSkippingScene0:close() --[[ @ 0]]
end
 --[[ @ 0]]
