-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "x64:25ec5b3e9479f805" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/movieplayback/moviesubtitles" ) --[[ @ 0]]

local PreLoadFunc = function ( self, controller )
	self:registerEventHandler( "finished_movie_playback", function ( element, event )
		CoD.VideoStreamingUtility.SkipFullScreenMovie( element, controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self.Movie:linkToElementModel( self, "movieName", true, function ( model )
		if not (IsGameTypeCombatTraining() or IsMPTrainingLobby()) or not CoD.isPC or not CoD.PCKoreaUtility.ShowKorea15Plus() then
			local f3_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f3_local0 then
				local f3_local1 = CoD.SafeGetModelValue( self:getModel(), "additive" ) --[[ @ 0]]
				f3_local1 = f3_local1 and f3_local1 ~= 0 --[[ @ 0]]
				local f3_local2 = CoD.SafeGetModelValue( self:getModel(), "looping" ) --[[ @ 0]]
				f3_local2 = f3_local2 and f3_local2 ~= 0 --[[ @ 0]]
				local f3_local3 = CoD.SafeGetModelValue( self:getModel(), "movieKey" ) --[[ @ 0]]
				if f3_local1 and Engine[@"IsSplitscreen"]() then
					self.SplitscreenSideBarLeft:setAlpha( 100 ) --[[ @ 0]]
					self.SplitscreenSideBarRight:setAlpha( 100 ) --[[ @ 0]]
				end
				self.Movie:setupMoviePlayback( f3_local0, f3_local1, f3_local2, f3_local3 ) --[[ @ 0]]
			end
		else
			CoD.VideoStreamingUtility.SkipFullScreenMovie( self, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.Movie:linkToElementModel( self, "playOutroMovie", true, function ( model )
		if not IsGameTypeCombatTraining() or not CoD.isPC or not CoD.PCKoreaUtility.ShowKorea15Plus() then
			if Engine[@"GetModelValue"]( model ) then
				local f4_local0 = CoD.mapsTable[Engine[@"GetCurrentMap"]()] --[[ @ 0]]
				if f4_local0 and f4_local0.outroMovie then
					self.Movie:setupMoviePlayback( f4_local0.outroMovie, false, false ) --[[ @ 0]]
				end
			end
		else
			CoD.VideoStreamingUtility.SkipFullScreenMovie( self, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.BlackBg:linkToElementModel( self, "showBlackScreen", true, function ( model )
		local f5_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
		if not f5_local0 or f5_local0 == 0 then
			self.BlackBg:setAlpha( 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		element.Movie:close() --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.full_screen_movie = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.full_screen_movie = function ( f7_arg0, f7_arg1 )
	local self = CoD.Menu.NewForUIEditor( "full_screen_movie", f7_arg0 ) --[[ @ 0]]
	local f7_local1 = self --[[ @ 0]]
	CoD.BaseUtility.InitGlobalModel( "cutsceneSkippable", false ) --[[ @ 0]]
	self:setClass( CoD.full_screen_movie ) --[[ @ 0]]
	self.soundSet = "HUD" --[[ @ 0]]
	self:setOwner( f7_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f7_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f7_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SplitscreenSideBarRight = LUI.UIImage.new( 0.5, 0.5, 960, 1672, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	SplitscreenSideBarRight:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SplitscreenSideBarRight:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SplitscreenSideBarRight ) --[[ @ 0]]
	self.SplitscreenSideBarRight = SplitscreenSideBarRight --[[ @ 0]]
	
	local SplitscreenSideBarLeft = LUI.UIImage.new( 0.5, 0.5, -1712, -960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	SplitscreenSideBarLeft:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SplitscreenSideBarLeft:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SplitscreenSideBarLeft ) --[[ @ 0]]
	self.SplitscreenSideBarLeft = SplitscreenSideBarLeft --[[ @ 0]]
	
	local BlackBg = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BlackBg:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlackBg ) --[[ @ 0]]
	self.BlackBg = BlackBg --[[ @ 0]]
	
	local Movie = LUI.UIImage.new( 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	Movie:setupMoviePlayback( "" ) --[[ @ 0]]
	self:addElement( Movie ) --[[ @ 0]]
	self.Movie = Movie --[[ @ 0]]
	
	local VoDViewerSkipPrompt = CoD.VoDViewerSkipPrompt.new( f7_local1, f7_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( VoDViewerSkipPrompt ) --[[ @ 0]]
	self.VoDViewerSkipPrompt = VoDViewerSkipPrompt --[[ @ 0]]
	
	local MovieSubtitles = CoD.MovieSubtitles.new( f7_local1, f7_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( MovieSubtitles ) --[[ @ 0]]
	self.MovieSubtitles = MovieSubtitles --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Skippable",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "cutsceneSkippable" )
			end
		}
	} ) --[[ @ 0]]
	local f7_local8 = self --[[ @ 0]]
	local f7_local9 = self.subscribeToModel --[[ @ 0]]
	local f7_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f7_local9( f7_local8, f7_local10.cutsceneSkippable, function ( f9_arg0 )
		f7_local1:updateElementState( self, {
			name = "model_validation",
			menu = f7_local1,
			controller = f7_arg0,
			modelValue = f9_arg0:get(),
			modelName = "cutsceneSkippable"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "skippable", true, function ( model, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f7_local1, f7_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f7_local1:AddButtonCallbackFunction( self, f7_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.BaseUtility.IsSelfInState( self, "Skippable" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "skippable", 1 ) and not CoD.VideoStreamingUtility.IsMoviePaused( self.Movie ) then
			CoD.VideoStreamingUtility.SkipFullScreenMovie( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BaseUtility.IsSelfInState( self, "Skippable" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "skippable", 1 ) and not CoD.VideoStreamingUtility.IsMoviePaused( self.Movie ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f13_arg2, f13_arg3, f13_arg4 )
		if IsSelfInState( self, "Skippable" ) and IsPC() then
			LockInput( self, controller, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		if IsPC() then
			LockInput( self, f7_arg0, false ) --[[ @ 0]]
			CoD.PCUtility.UnlockUIShortcutInput( f7_local1, f7_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	VoDViewerSkipPrompt:setModel( self.buttonModel, f7_arg0 ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f7_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f7_arg0 ) --[[ @ 0]]
	end
	f7_local9 = self --[[ @ 0]]
	if IsPC() and CoD.ModelUtility.IsSelfModelValueEqualTo( f7_local9, f7_arg0, "skippable", 1 ) then
		CoD.CTUtility.StartSkipTimer( f7_local1, 5000 ) --[[ @ 0]]
		CoD.PCUtility.LockUIShortcutInput( f7_local1, f7_arg0 ) --[[ @ 0]]
	elseif CoD.ModelUtility.IsSelfModelValueEqualTo( f7_local9, f7_arg0, "skippable", 1 ) then
		CoD.CTUtility.StartSkipTimer( f7_local1, 5000 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.full_screen_movie.__onClose = function ( f15_arg0 )
	f15_arg0.VoDViewerSkipPrompt:close() --[[ @ 0]]
	f15_arg0.MovieSubtitles:close() --[[ @ 0]]
end
 --[[ @ 0]]
