-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/startmenu/options/flyout/startmenu_options_customsettingsindicator" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsmaincorners" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsmainframe" ) --[[ @ 0]]

CoD.StartMenu_Options_SettingGridItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.__defaultWidth = 300 --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.__defaultHeight = 60 --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Options_SettingGridItem ) --[[ @ 0]]
	self.id = "StartMenu_Options_SettingGridItem" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Backing:setRGB( 0.13, 0.12, 0.12 ) --[[ @ 0]]
	Backing:setAlpha( 0.6 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local Frame = CoD.StartMenuOptionsMainFrame.new( f1_arg0, f1_arg1, 0, 0, 0, 300, 0, 0, 0, 60 ) --[[ @ 0]]
	Frame:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
	Frame:setAlpha( 0.04 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local Corner = CoD.StartMenuOptionsMainCorners.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( Corner ) --[[ @ 0]]
	self.Corner = Corner --[[ @ 0]]
	
	local SettingLabel = LUI.UIText.new( 0, 0, 15, 275, 0, 0, 17.5, 42.5 ) --[[ @ 0]]
	SettingLabel:setAlpha( 0.25 ) --[[ @ 0]]
	SettingLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	SettingLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	SettingLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	SettingLabel:linkToElementModel( self, "text", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			SettingLabel:setText( CoD.BaseUtility.AlreadyLocalized( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SettingLabel ) --[[ @ 0]]
	self.SettingLabel = SettingLabel --[[ @ 0]]
	
	local CustomSettingsIndicator = CoD.StartMenu_Options_CustomSettingsIndicator.new( f1_arg0, f1_arg1, 0, 0, 3, 7, 0, 0, 3, 57 ) --[[ @ 0]]
	CustomSettingsIndicator:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isDefault" )
			end
		}
	} ) --[[ @ 0]]
	CustomSettingsIndicator:linkToElementModel( CustomSettingsIndicator, "isDefault", true, function ( model )
		f1_arg0:updateElementState( CustomSettingsIndicator, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isDefault"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CustomSettingsIndicator:linkToElementModel( self, nil, false, function ( model )
		CustomSettingsIndicator:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CustomSettingsIndicator ) --[[ @ 0]]
	self.CustomSettingsIndicator = CustomSettingsIndicator --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalFirst( self, "childFocusGained", function ( element )
		if CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "controllerLayoutState", CoD.OptionsUtility.ControllerPreviewStates.CONTROLLER_BUTTONS ) then
			CoD.OptionsUtility.SetButtonLayoutPreview( element, f1_arg1 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "controllerLayoutState", CoD.OptionsUtility.ControllerPreviewStates.CONTROLLER_STICKS ) then
			CoD.OptionsUtility.SetStickLayoutPreview( element, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.__resetProperties = function ( f7_arg0 )
	f7_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
	f7_arg0.Backing:completeAnimation() --[[ @ 0]]
	f7_arg0.Corner:completeAnimation() --[[ @ 0]]
	f7_arg0.Frame:completeAnimation() --[[ @ 0]]
	f7_arg0.SettingLabel:completeAnimation() --[[ @ 0]]
	f7_arg0.CustomSettingsIndicator:setAlpha( 1 ) --[[ @ 0]]
	f7_arg0.Backing:setRGB( 0.13, 0.12, 0.12 ) --[[ @ 0]]
	f7_arg0.Backing:setAlpha( 0.6 ) --[[ @ 0]]
	f7_arg0.Corner:setScale( 1, 1 ) --[[ @ 0]]
	f7_arg0.Frame:setAlpha( 0.04 ) --[[ @ 0]]
	f7_arg0.SettingLabel:setLeftRight( 0, 0, 15, 275 ) --[[ @ 0]]
	f7_arg0.SettingLabel:setTopBottom( 0, 0, 17.5, 42.5 ) --[[ @ 0]]
	f7_arg0.SettingLabel:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f7_arg0.SettingLabel:setAlpha( 0.25 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f8_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
			f8_arg0.CustomSettingsIndicator:setAlpha( 0 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.CustomSettingsIndicator ) --[[ @ 0]]
		end,
		Focus = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f9_arg0.Backing:completeAnimation() --[[ @ 0]]
			f9_arg0.Backing:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f9_arg0.Backing:setAlpha( 0.2 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Backing ) --[[ @ 0]]
			f9_arg0.Frame:completeAnimation() --[[ @ 0]]
			f9_arg0.Frame:setAlpha( 0.6 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Frame ) --[[ @ 0]]
			f9_arg0.Corner:completeAnimation() --[[ @ 0]]
			f9_arg0.Corner:setScale( 0.96, 0.84 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Corner ) --[[ @ 0]]
			f9_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
			f9_arg0.CustomSettingsIndicator:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.CustomSettingsIndicator ) --[[ @ 0]]
		end,
		GainFocus = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f10_local0 = function ( f11_arg0 )
				f10_arg0.Backing:beginAnimation( 150 ) --[[ @ 0]]
				f10_arg0.Backing:setAlpha( 0.2 ) --[[ @ 0]]
				f10_arg0.Backing:registerEventHandler( "interrupted_keyframe", f10_arg0.clipInterrupted ) --[[ @ 0]]
				f10_arg0.Backing:registerEventHandler( "transition_complete_keyframe", f10_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f10_arg0.Backing:completeAnimation() --[[ @ 0]]
			f10_arg0.Backing:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f10_arg0.Backing:setAlpha( 0.1 ) --[[ @ 0]]
			f10_local0( f10_arg0.Backing ) --[[ @ 0]]
			local f10_local1 = function ( f12_arg0 )
				f10_arg0.Frame:beginAnimation( 150 ) --[[ @ 0]]
				f10_arg0.Frame:setAlpha( 0.6 ) --[[ @ 0]]
				f10_arg0.Frame:registerEventHandler( "interrupted_keyframe", f10_arg0.clipInterrupted ) --[[ @ 0]]
				f10_arg0.Frame:registerEventHandler( "transition_complete_keyframe", f10_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f10_arg0.Frame:completeAnimation() --[[ @ 0]]
			f10_arg0.Frame:setAlpha( 0.04 ) --[[ @ 0]]
			f10_local1( f10_arg0.Frame ) --[[ @ 0]]
			local f10_local2 = function ( f13_arg0 )
				f10_arg0.Corner:beginAnimation( 150 ) --[[ @ 0]]
				f10_arg0.Corner:setScale( 0.96, 0.84 ) --[[ @ 0]]
				f10_arg0.Corner:registerEventHandler( "interrupted_keyframe", f10_arg0.clipInterrupted ) --[[ @ 0]]
				f10_arg0.Corner:registerEventHandler( "transition_complete_keyframe", f10_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f10_arg0.Corner:completeAnimation() --[[ @ 0]]
			f10_arg0.Corner:setScale( 1, 1 ) --[[ @ 0]]
			f10_local2( f10_arg0.Corner ) --[[ @ 0]]
			f10_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
			f10_arg0.CustomSettingsIndicator:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.CustomSettingsIndicator ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f14_arg0.Backing:completeAnimation() --[[ @ 0]]
			f14_arg0.Backing:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f14_arg0.Backing:setAlpha( 0.2 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.Backing ) --[[ @ 0]]
			f14_arg0.Frame:completeAnimation() --[[ @ 0]]
			f14_arg0.Frame:setAlpha( 0.6 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.Frame ) --[[ @ 0]]
			f14_arg0.SettingLabel:completeAnimation() --[[ @ 0]]
			f14_arg0.SettingLabel:setLeftRight( 0, 0, 15, 275 ) --[[ @ 0]]
			f14_arg0.SettingLabel:setTopBottom( 0, 0, 17.5, 42.5 ) --[[ @ 0]]
			f14_arg0.SettingLabel:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f14_arg0.SettingLabel:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.SettingLabel ) --[[ @ 0]]
			f14_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
			f14_arg0.CustomSettingsIndicator:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.CustomSettingsIndicator ) --[[ @ 0]]
		end,
		Focus = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f15_arg0.Backing:completeAnimation() --[[ @ 0]]
			f15_arg0.Backing:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f15_arg0.Backing:setAlpha( 0.2 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.Backing ) --[[ @ 0]]
			f15_arg0.SettingLabel:completeAnimation() --[[ @ 0]]
			f15_arg0.SettingLabel:setLeftRight( 0, 0, 15, 275 ) --[[ @ 0]]
			f15_arg0.SettingLabel:setTopBottom( 0, 0, 17.5, 42.5 ) --[[ @ 0]]
			f15_arg0.SettingLabel:setRGB( 0.78, 0.74, 0.67 ) --[[ @ 0]]
			f15_arg0.SettingLabel:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.SettingLabel ) --[[ @ 0]]
			f15_arg0.CustomSettingsIndicator:completeAnimation() --[[ @ 0]]
			f15_arg0.CustomSettingsIndicator:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CustomSettingsIndicator ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Options_SettingGridItem.__onClose = function ( f16_arg0 )
	f16_arg0.Frame:close() --[[ @ 0]]
	f16_arg0.Corner:close() --[[ @ 0]]
	f16_arg0.SettingLabel:close() --[[ @ 0]]
	f16_arg0.CustomSettingsIndicator:close() --[[ @ 0]]
end
 --[[ @ 0]]
