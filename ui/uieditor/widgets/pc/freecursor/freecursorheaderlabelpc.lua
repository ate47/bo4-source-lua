-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
CoD.freeCursorHeaderLabelPC = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.__defaultWidth = 405 --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.__defaultHeight = 36 --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.freeCursorHeaderLabelPC ) --[[ @ 0]]
	self.id = "freeCursorHeaderLabelPC" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	backing:setRGB( 0.09, 0.09, 0.09 ) --[[ @ 0]]
	backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local title = LUI.UIText.new( 0, 0, 10, 210, 0, 0, 7, 29 ) --[[ @ 0]]
	title:setRGB( 0.86, 0.74, 0.25 ) --[[ @ 0]]
	title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	title:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	title:setLetterSpacing( 4 ) --[[ @ 0]]
	title:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	title:setBackingType( 2 ) --[[ @ 0]]
	title:setBackingColor( 0.09, 0.09, 0.09 ) --[[ @ 0]]
	title:setBackingAlpha( 0 ) --[[ @ 0]]
	title:setBackingXPadding( 10 ) --[[ @ 0]]
	title:setBackingYPadding( 7 ) --[[ @ 0]]
	title:linkToElementModel( self, "title", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			title:setText( LocalizeToUpperString( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( title, "setText", function ( element, controller )
		if not IsTextEmpty( element ) then
			ScaleWidgetToLabel( self, self.title, 10 ) --[[ @ 0]]
			SetContainerWidthToText( self, element, 10 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( title ) --[[ @ 0]]
	self.title = title --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.FreeCursorUtility.IsTooltipTitleVisible( element, f1_arg1 )
			end
		},
		{
			stateName = "VisibleDetailed",
			condition = function ( menu, element, event )
				return CoD.FreeCursorUtility.IsTooltipTitleVisible( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "title", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "title"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = self --[[ @ 0]]
	local f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedViewPC", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedViewPC"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f9_arg2, f9_arg3, f9_arg4 )
		if IsInDefaultState( self ) then
			CollapseFreeCursorElement( self ) --[[ @ 0]]
			CollapseFreeCursorElementParent( self ) --[[ @ 0]]
		else
			ExpandFreeCursorElement( self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.__resetProperties = function ( f10_arg0 )
	f10_arg0.title:completeAnimation() --[[ @ 0]]
	f10_arg0.backing:completeAnimation() --[[ @ 0]]
	f10_arg0.title:setTopBottom( 0, 0, 7, 29 ) --[[ @ 0]]
	f10_arg0.title:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.title:setBackingAlpha( 0 ) --[[ @ 0]]
	f10_arg0.title:setBackingYPadding( 7 ) --[[ @ 0]]
	f10_arg0.backing:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f11_arg0.title:completeAnimation() --[[ @ 0]]
			f11_arg0.title:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.title ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f12_arg0.backing:completeAnimation() --[[ @ 0]]
			f12_arg0.backing:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.backing ) --[[ @ 0]]
			f12_arg0.title:completeAnimation() --[[ @ 0]]
			f12_arg0.title:setBackingAlpha( 1 ) --[[ @ 0]]
			f12_arg0.title:setBackingYPadding( 8 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.title ) --[[ @ 0]]
		end
	},
	VisibleDetailed = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.backing:completeAnimation() --[[ @ 0]]
			f13_arg0.backing:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.backing ) --[[ @ 0]]
			f13_arg0.title:completeAnimation() --[[ @ 0]]
			f13_arg0.title:setTopBottom( 0, 0, 9, 31 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.title ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.freeCursorHeaderLabelPC.__onClose = function ( f14_arg0 )
	f14_arg0.title:close() --[[ @ 0]]
end
 --[[ @ 0]]
