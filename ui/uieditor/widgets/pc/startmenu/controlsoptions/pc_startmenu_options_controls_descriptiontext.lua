-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/freecursor/infopanelsubwidgets/freecursornolabelbuttonpromptarea" ) --[[ @ 0]]
require( "x64:5b934bb48ed3be32" ) --[[ @ 0]]

CoD.PC_StartMenu_Options_Controls_DescriptionText = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.__defaultWidth = 673 --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.__defaultHeight = 157 --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PC_StartMenu_Options_Controls_DescriptionText ) --[[ @ 0]]
	self.id = "PC_StartMenu_Options_Controls_DescriptionText" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local bg = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	bg:setRGB( 0.13, 0.12, 0.12 ) --[[ @ 0]]
	bg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( bg ) --[[ @ 0]]
	self.bg = bg --[[ @ 0]]
	
	local detailedDescription = LUI.UIText.new( 0, 0, 0, 673, 0, 0, 40, 57 ) --[[ @ 0]]
	detailedDescription:setRGB( 0.76, 0.76, 0.76 ) --[[ @ 0]]
	detailedDescription:setText( "" ) --[[ @ 0]]
	detailedDescription:setTTF( "dinnext_regular" ) --[[ @ 0]]
	detailedDescription:setLetterSpacing( 2 ) --[[ @ 0]]
	detailedDescription:setLineSpacing( 3 ) --[[ @ 0]]
	detailedDescription:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	detailedDescription:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	detailedDescription:setBackingType( 1 ) --[[ @ 0]]
	detailedDescription:setBackingWidget( CoD.PC_StartMenu_Options_Description_TextBacking, f1_arg0, f1_arg1 ) --[[ @ 0]]
	detailedDescription:setBackingAlpha( 0 ) --[[ @ 0]]
	self:addElement( detailedDescription ) --[[ @ 0]]
	self.detailedDescription = detailedDescription --[[ @ 0]]
	
	local OptionName = LUI.UIText.new( 0, 0, 0, 200, 0, 0, 0, 21 ) --[[ @ 0]]
	OptionName:setRGB( 0.76, 0.76, 0.76 ) --[[ @ 0]]
	OptionName:setText( LocalizeToUpperString( @"hash_393E719493E9E18F" ) ) --[[ @ 0]]
	OptionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	OptionName:setLetterSpacing( 3 ) --[[ @ 0]]
	OptionName:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	self:addElement( OptionName ) --[[ @ 0]]
	self.OptionName = OptionName --[[ @ 0]]
	
	local noLabelButtonPrompts = CoD.freeCursorNoLabelButtonPromptArea.new( f1_arg0, f1_arg1, 0, 0, 0, 300, 1, 1, 0, 36 ) --[[ @ 0]]
	noLabelButtonPrompts:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	noLabelButtonPrompts:setAlpha( 0 ) --[[ @ 0]]
	noLabelButtonPrompts:linkToElementModel( self, nil, false, function ( model )
		noLabelButtonPrompts:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( noLabelButtonPrompts ) --[[ @ 0]]
	self.noLabelButtonPrompts = noLabelButtonPrompts --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "detailedDescription" ) and CoD.ModelUtility.AreButtonModelValueBitsSet( f1_arg1, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], Enum[@"LUIButtonFlags"][@"hash_5253A6F6CAAAE464"] )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedDescription", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedDescription"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["ButtonBits." .. Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"]], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "ButtonBits." .. Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.__resetProperties = function ( f7_arg0 )
	f7_arg0.detailedDescription:completeAnimation() --[[ @ 0]]
	f7_arg0.bg:completeAnimation() --[[ @ 0]]
	f7_arg0.noLabelButtonPrompts:completeAnimation() --[[ @ 0]]
	f7_arg0.detailedDescription:setAlpha( 1 ) --[[ @ 0]]
	f7_arg0.bg:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f7_arg0.bg:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f7_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
	f7_arg0.noLabelButtonPrompts:setLeftRight( 0, 0, 0, 300 ) --[[ @ 0]]
	f7_arg0.noLabelButtonPrompts:setTopBottom( 1, 1, 0, 36 ) --[[ @ 0]]
	f7_arg0.noLabelButtonPrompts:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f8_arg0.bg:completeAnimation() --[[ @ 0]]
			f8_arg0.bg:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f8_arg0.bg:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f8_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.bg ) --[[ @ 0]]
			f8_arg0.detailedDescription:completeAnimation() --[[ @ 0]]
			f8_arg0.detailedDescription:setAlpha( 1 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.detailedDescription ) --[[ @ 0]]
		end,
		Active = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f9_arg0.bg:completeAnimation() --[[ @ 0]]
			f9_arg0.bg:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f9_arg0.bg:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f9_arg0.bg:setAlpha( 1 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.bg ) --[[ @ 0]]
			f9_arg0.detailedDescription:completeAnimation() --[[ @ 0]]
			f9_arg0.detailedDescription:setAlpha( 1 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.detailedDescription ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f10_arg0.bg:completeAnimation() --[[ @ 0]]
			f10_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.bg ) --[[ @ 0]]
			f10_arg0.detailedDescription:completeAnimation() --[[ @ 0]]
			f10_arg0.detailedDescription:setAlpha( 1 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.detailedDescription ) --[[ @ 0]]
		end,
		DefaultState = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f11_local0 = function ( f12_arg0 )
				f12_arg0:beginAnimation( 80 ) --[[ @ 0]]
				f12_arg0:setTopBottom( 0, 0, 0, 0 ) --[[ @ 0]]
				f12_arg0:registerEventHandler( "transition_complete_keyframe", f11_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f11_arg0.bg:beginAnimation( 20 ) --[[ @ 0]]
			f11_arg0.bg:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f11_arg0.bg:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f11_arg0.bg:registerEventHandler( "interrupted_keyframe", f11_arg0.clipInterrupted ) --[[ @ 0]]
			f11_arg0.bg:registerEventHandler( "transition_complete_keyframe", f11_local0 ) --[[ @ 0]]
			local f11_local1 = function ( f13_arg0 )
				f13_arg0:beginAnimation( 80 ) --[[ @ 0]]
				f13_arg0:setAlpha( 0 ) --[[ @ 0]]
				f13_arg0:registerEventHandler( "transition_complete_keyframe", f11_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f11_arg0.detailedDescription:beginAnimation( 20 ) --[[ @ 0]]
			f11_arg0.detailedDescription:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.detailedDescription:registerEventHandler( "interrupted_keyframe", f11_arg0.clipInterrupted ) --[[ @ 0]]
			f11_arg0.detailedDescription:registerEventHandler( "transition_complete_keyframe", f11_local1 ) --[[ @ 0]]
			local f11_local2 = function ( f14_arg0 )
				f11_arg0.noLabelButtonPrompts:beginAnimation( 150 ) --[[ @ 0]]
				f11_arg0.noLabelButtonPrompts:setTopBottom( 0, 0, -36, 0 ) --[[ @ 0]]
				f11_arg0.noLabelButtonPrompts:registerEventHandler( "interrupted_keyframe", f11_arg0.clipInterrupted ) --[[ @ 0]]
				f11_arg0.noLabelButtonPrompts:registerEventHandler( "transition_complete_keyframe", f11_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f11_arg0.noLabelButtonPrompts:completeAnimation() --[[ @ 0]]
			f11_arg0.noLabelButtonPrompts:setLeftRight( 0, 0, 0, 300 ) --[[ @ 0]]
			f11_arg0.noLabelButtonPrompts:setTopBottom( 1, 1, 0, 36 ) --[[ @ 0]]
			f11_arg0.noLabelButtonPrompts:setAlpha( 1 ) --[[ @ 0]]
			f11_local2( f11_arg0.noLabelButtonPrompts ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PC_StartMenu_Options_Controls_DescriptionText.__onClose = function ( f15_arg0 )
	f15_arg0.noLabelButtonPrompts:close() --[[ @ 0]]
end
 --[[ @ 0]]
