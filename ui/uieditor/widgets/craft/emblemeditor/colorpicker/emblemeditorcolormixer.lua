-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/common/commoncornerpips01" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/colorpicker/emblemeditorcolormixerbar" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]

local f0_local0 = function ( f1_arg0, f1_arg1, f1_arg2 )
	f1_arg0.redBar.m_colorMixer = f1_arg0 --[[ @ 0]]
	f1_arg0.redBar.m_color = "red" --[[ @ 0]]
	f1_arg0.greenBar.m_colorMixer = f1_arg0 --[[ @ 0]]
	f1_arg0.greenBar.m_color = "green" --[[ @ 0]]
	f1_arg0.blueBar.m_colorMixer = f1_arg0 --[[ @ 0]]
	f1_arg0.blueBar.m_color = "blue" --[[ @ 0]]
end
 --[[ @ 0]]
local PostLoadFunc = function ( self, controller, menu )
	if CoD.isPC then
		f0_local0( self, controller, menu ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.EmblemEditorColorMixer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorColorMixer.__defaultWidth = 880 --[[ @ 0]]
CoD.EmblemEditorColorMixer.__defaultHeight = 240 --[[ @ 0]]
CoD.EmblemEditorColorMixer.new = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3, f3_arg4, f3_arg5, f3_arg6, f3_arg7, f3_arg8, f3_arg9 )
	local self = LUI.UIElement.new( f3_arg2, f3_arg3, f3_arg4, f3_arg5, f3_arg6, f3_arg7, f3_arg8, f3_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorColorMixer ) --[[ @ 0]]
	self.id = "EmblemEditorColorMixer" --[[ @ 0]]
	self.soundSet = "SelectColor_ColorMixer" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Backing:setAlpha( 0.5 ) --[[ @ 0]]
	Backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local BotTiledBackingAdd = LUI.UIImage.new( 0, 1, 0, 0, 0.85, 1, 0, 0 ) --[[ @ 0]]
	BotTiledBackingAdd:setAlpha( 0.1 ) --[[ @ 0]]
	BotTiledBackingAdd:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	BotTiledBackingAdd:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	BotTiledBackingAdd:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BotTiledBackingAdd:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( BotTiledBackingAdd ) --[[ @ 0]]
	self.BotTiledBackingAdd = BotTiledBackingAdd --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 1, -1, 1, 0, 1, -1, 1 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local ColorBacking = LUI.UIImage.new( 0, 0, 0, 92, 0, 0, 0, 202 ) --[[ @ 0]]
	ColorBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ColorBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( ColorBacking ) --[[ @ 0]]
	self.ColorBacking = ColorBacking --[[ @ 0]]
	
	local BarBacking = LUI.UIImage.new( 0, 0, 0, 880, 0, 0, 0, 240 ) --[[ @ 0]]
	BarBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( BarBacking ) --[[ @ 0]]
	self.BarBacking = BarBacking --[[ @ 0]]
	
	local blueColorValue = LUI.UIText.new( 0, 0, 811, 858, 0, 0, 162, 188 ) --[[ @ 0]]
	blueColorValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	blueColorValue:setLetterSpacing( 1 ) --[[ @ 0]]
	blueColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	blueColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	blueColorValue:linkToElementModel( self, "blue", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			blueColorValue:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( blueColorValue ) --[[ @ 0]]
	self.blueColorValue = blueColorValue --[[ @ 0]]
	
	local greenColorValue = LUI.UIText.new( 0, 0, 811, 858, 0, 0, 95.5, 120.5 ) --[[ @ 0]]
	greenColorValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	greenColorValue:setLetterSpacing( 1 ) --[[ @ 0]]
	greenColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	greenColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	greenColorValue:linkToElementModel( self, "green", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			greenColorValue:setText( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( greenColorValue ) --[[ @ 0]]
	self.greenColorValue = greenColorValue --[[ @ 0]]
	
	local redColorValue = LUI.UIText.new( 0, 0, 811, 858, 0, 0, 26, 51 ) --[[ @ 0]]
	redColorValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	redColorValue:setLetterSpacing( 1 ) --[[ @ 0]]
	redColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	redColorValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	redColorValue:linkToElementModel( self, "red", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			redColorValue:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( redColorValue ) --[[ @ 0]]
	self.redColorValue = redColorValue --[[ @ 0]]
	
	local ColorPreview = LUI.UIImage.new( 0, 0, 21, 73, 0, 0, 24, 186 ) --[[ @ 0]]
	ColorPreview:linkToElementModel( self, "color", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			ColorPreview:setRGB( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ColorPreview ) --[[ @ 0]]
	self.ColorPreview = ColorPreview --[[ @ 0]]
	
	local ColorCornerPips = CoD.CommonCornerPips01.new( f3_arg0, f3_arg1, 0, 0, 21, 73, 0, 0, 24, 186 ) --[[ @ 0]]
	self:addElement( ColorCornerPips ) --[[ @ 0]]
	self.ColorCornerPips = ColorCornerPips --[[ @ 0]]
	
	local ColorFrame = LUI.UIImage.new( 0, 0, 20.5, 73.5, 0, 0, 23.5, 186.5 ) --[[ @ 0]]
	ColorFrame:setAlpha( 0.5 ) --[[ @ 0]]
	ColorFrame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	ColorFrame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	ColorFrame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	ColorFrame:setupNineSliceShader( 4, 4 ) --[[ @ 0]]
	self:addElement( ColorFrame ) --[[ @ 0]]
	self.ColorFrame = ColorFrame --[[ @ 0]]
	
	local redColor = LUI.UIText.new( 0, 0, 107.5, 227.5, 0, 0, 24.5, 51.5 ) --[[ @ 0]]
	redColor:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	redColor:setText( LocalizeToUpperString( @"hash_7D6726B93C89AA3D" ) ) --[[ @ 0]]
	redColor:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	redColor:setLetterSpacing( 2 ) --[[ @ 0]]
	redColor:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( redColor ) --[[ @ 0]]
	self.redColor = redColor --[[ @ 0]]
	
	local greenColor = LUI.UIText.new( 0, 0, 107.5, 227.5, 0, 0, 93.5, 120.5 ) --[[ @ 0]]
	greenColor:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	greenColor:setText( LocalizeToUpperString( @"hash_1BCBD80A292877C1" ) ) --[[ @ 0]]
	greenColor:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	greenColor:setLetterSpacing( 2 ) --[[ @ 0]]
	greenColor:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( greenColor ) --[[ @ 0]]
	self.greenColor = greenColor --[[ @ 0]]
	
	local blueColor = LUI.UIText.new( 0, 0, 107.5, 227.5, 0, 0, 161, 188 ) --[[ @ 0]]
	blueColor:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	blueColor:setText( LocalizeToUpperString( @"hash_2714D845DAF54E6E" ) ) --[[ @ 0]]
	blueColor:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	blueColor:setLetterSpacing( 2 ) --[[ @ 0]]
	blueColor:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( blueColor ) --[[ @ 0]]
	self.blueColor = blueColor --[[ @ 0]]
	
	local redBar = CoD.EmblemEditorColorMixerBar.new( f3_arg0, f3_arg1, 0, 0, 221, 773, 0, 0, 27.5, 47.5 ) --[[ @ 0]]
	local blueBar = redBar --[[ @ 0]]
	local greenBar = redBar.subscribeToModel --[[ @ 0]]
	local toggleSolidColorButton = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	greenBar( blueBar, toggleSolidColorButton["Emblem.EmblemProperties.isGradientMode"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	blueBar = redBar --[[ @ 0]]
	greenBar = redBar.subscribeToModel --[[ @ 0]]
	toggleSolidColorButton = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	greenBar( blueBar, toggleSolidColorButton["Emblem.EmblemProperties.colorMode"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	redBar:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_left"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_right"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( redBar, f3_arg1, Enum[@"luibutton"][@"lui_key_left"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_DecrementColorComponent( self, element, controller, "red" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_left"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( redBar, f3_arg1, Enum[@"luibutton"][@"lui_key_right"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_IncrementColorComponent( self, element, controller, "red" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_right"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( redBar, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_BackFromColorPicker( self, element, menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_ShowSwatchContainer( self, element, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( redBar ) --[[ @ 0]]
	self.redBar = redBar --[[ @ 0]]
	
	greenBar = CoD.EmblemEditorColorMixerBar.new( f3_arg0, f3_arg1, 0, 0, 221, 773, 0, 0, 96.5, 116.5 ) --[[ @ 0]]
	toggleSolidColorButton = greenBar --[[ @ 0]]
	blueBar = greenBar.subscribeToModel --[[ @ 0]]
	local dividerH = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	blueBar( toggleSolidColorButton, dividerH["Emblem.EmblemProperties.isGradientMode"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	toggleSolidColorButton = greenBar --[[ @ 0]]
	blueBar = greenBar.subscribeToModel --[[ @ 0]]
	dividerH = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	blueBar( toggleSolidColorButton, dividerH["Emblem.EmblemProperties.colorMode"], function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	greenBar:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_left"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_right"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( greenBar, f3_arg1, Enum[@"luibutton"][@"lui_key_left"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_DecrementColorComponent( self, element, controller, "green" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_left"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( greenBar, f3_arg1, Enum[@"luibutton"][@"lui_key_right"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_IncrementColorComponent( self, element, controller, "green" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_right"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( greenBar, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_BackFromColorPicker( self, element, menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_ShowSwatchContainer( self, element, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( greenBar ) --[[ @ 0]]
	self.greenBar = greenBar --[[ @ 0]]
	
	blueBar = CoD.EmblemEditorColorMixerBar.new( f3_arg0, f3_arg1, 0, 0, 221, 773, 0, 0, 163.5, 183.5 ) --[[ @ 0]]
	dividerH = blueBar --[[ @ 0]]
	toggleSolidColorButton = blueBar.subscribeToModel --[[ @ 0]]
	local dividerV = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	toggleSolidColorButton( dividerH, dividerV["Emblem.EmblemProperties.isGradientMode"], function ( f26_arg0, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	dividerH = blueBar --[[ @ 0]]
	toggleSolidColorButton = blueBar.subscribeToModel --[[ @ 0]]
	dividerV = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	toggleSolidColorButton( dividerH, dividerV["Emblem.EmblemProperties.colorMode"], function ( f27_arg0, f27_arg1 )
		CoD.Menu.UpdateButtonShownState( f27_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	blueBar:registerEventHandler( "gain_focus", function ( element, event )
		local f28_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f28_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f28_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_left"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_right"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f28_local0
	end ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( blueBar, f3_arg1, Enum[@"luibutton"][@"lui_key_left"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_DecrementColorComponent( self, element, controller, "blue" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_left"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( blueBar, f3_arg1, Enum[@"luibutton"][@"lui_key_right"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_IncrementColorComponent( self, element, controller, "blue" ) --[[ @ 0]]
		PlaySoundSetSound( self, "manipulate_slider" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_right"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( blueBar, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_BackFromColorPicker( self, element, menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_ShowSwatchContainer( self, element, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( blueBar ) --[[ @ 0]]
	self.blueBar = blueBar --[[ @ 0]]
	
	toggleSolidColorButton = CoD.PaintshopButtonPrompt.new( f3_arg0, f3_arg1, 0, 0, 28.5, 378.5, 0, 0, 205, 251 ) --[[ @ 0]]
	toggleSolidColorButton:mergeStateConditions( {
		{
			stateName = "KM",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f3_arg1 )
			end
		}
	} ) --[[ @ 0]]
	toggleSolidColorButton:appendEventHandler( "input_source_changed", function ( f37_arg0, f37_arg1 )
		f37_arg1.menu = f37_arg1.menu or f3_arg0 --[[ @ 0]]
		f3_arg0:updateElementState( toggleSolidColorButton, f37_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	dividerV = toggleSolidColorButton --[[ @ 0]]
	dividerH = toggleSolidColorButton.subscribeToModel --[[ @ 0]]
	local FooterStripe1 = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	dividerH( dividerV, FooterStripe1.LastInput, function ( f38_arg0 )
		f3_arg0:updateElementState( toggleSolidColorButton, {
			name = "model_validation",
			menu = f3_arg0,
			controller = f3_arg1,
			modelValue = f38_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	toggleSolidColorButton.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C01001B9AF5D45E" ) ) --[[ @ 0]]
	toggleSolidColorButton:subscribeToGlobalModel( f3_arg1, "Controller", "back_button_image", function ( model )
		local f39_local0 = model:get() --[[ @ 0]]
		if f39_local0 ~= nil then
			toggleSolidColorButton.buttonPromptImage:setImage( RegisterImage( f39_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( toggleSolidColorButton ) --[[ @ 0]]
	self.toggleSolidColorButton = toggleSolidColorButton --[[ @ 0]]
	
	dividerH = LUI.UIImage.new( 0, 0, 0, 880, 0, 0, 201, 205 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	dividerV = LUI.UIImage.new( 0, 0, 90, 94, 0, 0, 0, 202 ) --[[ @ 0]]
	dividerV:setAlpha( 0.1 ) --[[ @ 0]]
	dividerV:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	dividerV:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	dividerV:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerV:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( dividerV ) --[[ @ 0]]
	self.dividerV = dividerV --[[ @ 0]]
	
	FooterStripe1 = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -38, 0 ) --[[ @ 0]]
	FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	FooterStripe1:setImage( RegisterImage( @"hash_2C7A051F5EFC70E5" ) ) --[[ @ 0]]
	FooterStripe1:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	FooterStripe1:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FooterStripe1:setupNineSliceShader( 245, 40 ) --[[ @ 0]]
	self:addElement( FooterStripe1 ) --[[ @ 0]]
	self.FooterStripe1 = FooterStripe1 --[[ @ 0]]
	
	redBar.id = "redBar" --[[ @ 0]]
	greenBar.id = "greenBar" --[[ @ 0]]
	blueBar.id = "blueBar" --[[ @ 0]]
	self.__defaultFocus = redBar --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f3_arg1, f3_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorColorMixer.__onClose = function ( f40_arg0 )
	f40_arg0.blueColorValue:close() --[[ @ 0]]
	f40_arg0.greenColorValue:close() --[[ @ 0]]
	f40_arg0.redColorValue:close() --[[ @ 0]]
	f40_arg0.ColorPreview:close() --[[ @ 0]]
	f40_arg0.ColorCornerPips:close() --[[ @ 0]]
	f40_arg0.redBar:close() --[[ @ 0]]
	f40_arg0.greenBar:close() --[[ @ 0]]
	f40_arg0.blueBar:close() --[[ @ 0]]
	f40_arg0.toggleSolidColorButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
