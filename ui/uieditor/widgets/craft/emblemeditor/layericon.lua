-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/craft/emblemeditor/emblemchainicon" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/emblemlayernumber" ) --[[ @ 0]]

CoD.LayerIcon = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.LayerIcon.__defaultWidth = 180 --[[ @ 0]]
CoD.LayerIcon.__defaultHeight = 180 --[[ @ 0]]
CoD.LayerIcon.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.LayerIcon ) --[[ @ 0]]
	self.id = "LayerIcon" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local layerIcon = LUI.UIElement.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	layerIcon:setScale( 0.9, 0.9 ) --[[ @ 0]]
	layerIcon.__DrawLayerDecal = function ( f2_arg0 )
		local f2_local0 = f2_arg0:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			layerIcon:setupDrawEmblemLayer( GetEmblemLayerAndGroupIndex( f1_arg1, f2_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	layerIcon:linkToElementModel( self, "layerAndGroupIndex", true, layerIcon.__DrawLayerDecal ) --[[ @ 0]]
	layerIcon.__DrawLayerDecal_FullPath = function ()
		local f3_local0 = self:getModel() --[[ @ 0]]
		if f3_local0 then
			f3_local0 = self:getModel() --[[ @ 0]]
			f3_local0 = f3_local0.layerAndGroupIndex --[[ @ 0]]
		end
		if f3_local0 then
			layerIcon.__DrawLayerDecal( f3_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	self:addElement( layerIcon ) --[[ @ 0]]
	self.layerIcon = layerIcon --[[ @ 0]]
	
	local emptyLayerIcon = LUI.UIImage.new( 0.5, 0.5, -24, 24, 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	emptyLayerIcon:setAlpha( 0 ) --[[ @ 0]]
	emptyLayerIcon:setImage( RegisterImage( @"uie_ui_menu_common_add_plus" ) ) --[[ @ 0]]
	emptyLayerIcon:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	emptyLayerIcon:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( emptyLayerIcon ) --[[ @ 0]]
	self.emptyLayerIcon = emptyLayerIcon --[[ @ 0]]
	
	local linkIcon = CoD.EmblemChainIcon.new( f1_arg0, f1_arg1, 1, 1, -33, -9, 0, 0, 9, 33 ) --[[ @ 0]]
	linkIcon:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblems_IsLayerLinked( element, f1_arg1 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	linkIcon:linkToElementModel( linkIcon, "isLinked", true, function ( model )
		f1_arg0:updateElementState( linkIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isLinked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	linkIcon:linkToElementModel( linkIcon, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( linkIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	linkIcon:linkToElementModel( self, nil, false, function ( model )
		linkIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( linkIcon ) --[[ @ 0]]
	self.linkIcon = linkIcon --[[ @ 0]]
	
	local emblemLayerNumber = CoD.EmblemLayerNumber.new( f1_arg0, f1_arg1, 0, 0, 9, 84, 0, 0, 9, 33 ) --[[ @ 0]]
	emblemLayerNumber:mergeStateConditions( {
		{
			stateName = "GroupLayerNum",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblems_IsLayerLinked( element, f1_arg1 ) and CoD.CraftUtility.Emblem_IsLayerGrouped( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	emblemLayerNumber:linkToElementModel( emblemLayerNumber, "isLinked", true, function ( model )
		f1_arg0:updateElementState( emblemLayerNumber, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isLinked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemLayerNumber:linkToElementModel( emblemLayerNumber, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( emblemLayerNumber, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemLayerNumber:linkToElementModel( self, nil, false, function ( model )
		emblemLayerNumber:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( emblemLayerNumber ) --[[ @ 0]]
	self.emblemLayerNumber = emblemLayerNumber --[[ @ 0]]
	
	layerIcon:linkToElementModel( self, "iconID", true, layerIcon.__DrawLayerDecal_FullPath ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LayerIcon.__resetProperties = function ( f12_arg0 )
	f12_arg0.layerIcon:completeAnimation() --[[ @ 0]]
	f12_arg0.emblemLayerNumber:completeAnimation() --[[ @ 0]]
	f12_arg0.linkIcon:completeAnimation() --[[ @ 0]]
	f12_arg0.emptyLayerIcon:completeAnimation() --[[ @ 0]]
	f12_arg0.layerIcon:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.layerIcon:setScale( 0.9, 0.9 ) --[[ @ 0]]
	f12_arg0.emblemLayerNumber:setLeftRight( 0, 0, 9, 84 ) --[[ @ 0]]
	f12_arg0.emblemLayerNumber:setTopBottom( 0, 0, 9, 33 ) --[[ @ 0]]
	f12_arg0.emblemLayerNumber:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.linkIcon:setLeftRight( 1, 1, -33, -9 ) --[[ @ 0]]
	f12_arg0.linkIcon:setTopBottom( 0, 0, 9, 33 ) --[[ @ 0]]
	f12_arg0.linkIcon:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.emptyLayerIcon:setLeftRight( 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	f12_arg0.emptyLayerIcon:setTopBottom( 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	f12_arg0.emptyLayerIcon:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.LayerIcon.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f13_arg0.layerIcon:completeAnimation() --[[ @ 0]]
			f13_arg0.layerIcon:setScale( 0.8, 0.8 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.layerIcon ) --[[ @ 0]]
			f13_arg0.linkIcon:completeAnimation() --[[ @ 0]]
			f13_arg0.linkIcon:setLeftRight( 1, 1, -26, -2 ) --[[ @ 0]]
			f13_arg0.linkIcon:setTopBottom( 0, 0, 6, 30 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.linkIcon ) --[[ @ 0]]
			f13_arg0.emblemLayerNumber:completeAnimation() --[[ @ 0]]
			f13_arg0.emblemLayerNumber:setLeftRight( 0, 0, 6.5, 81.5 ) --[[ @ 0]]
			f13_arg0.emblemLayerNumber:setTopBottom( 0, 0, 4, 28 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.emblemLayerNumber ) --[[ @ 0]]
		end
	},
	EmptyLayer = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f14_arg0.layerIcon:completeAnimation() --[[ @ 0]]
			f14_arg0.layerIcon:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.layerIcon ) --[[ @ 0]]
			f14_arg0.emptyLayerIcon:completeAnimation() --[[ @ 0]]
			f14_arg0.emptyLayerIcon:setLeftRight( 0.5, 0.5, -18, 18 ) --[[ @ 0]]
			f14_arg0.emptyLayerIcon:setTopBottom( 0.5, 0.5, -18, 18 ) --[[ @ 0]]
			f14_arg0.emptyLayerIcon:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.emptyLayerIcon ) --[[ @ 0]]
			f14_arg0.linkIcon:completeAnimation() --[[ @ 0]]
			f14_arg0.linkIcon:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.linkIcon ) --[[ @ 0]]
			f14_arg0.emblemLayerNumber:completeAnimation() --[[ @ 0]]
			f14_arg0.emblemLayerNumber:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.emblemLayerNumber ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.LayerIcon.__onClose = function ( f15_arg0 )
	f15_arg0.layerIcon:close() --[[ @ 0]]
	f15_arg0.linkIcon:close() --[[ @ 0]]
	f15_arg0.emblemLayerNumber:close() --[[ @ 0]]
end
 --[[ @ 0]]
