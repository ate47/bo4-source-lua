-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/scoreboard/scoreboardgamestatus" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/scoreboardgamestatusscores" ) --[[ @ 0]]
require( "x64:78503431250d50b7" ) --[[ @ 0]]
require( "x64:467035dcc0ce94cc" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/tabbedscoreboardscores" ) --[[ @ 0]]
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "x64:7dc94decf3a09a57" ) --[[ @ 0]]

CoD.TabbedScoreboard = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.TabbedScoreboard.__defaultWidth = 1920 --[[ @ 0]]
CoD.TabbedScoreboard.__defaultHeight = 1080 --[[ @ 0]]
CoD.TabbedScoreboard.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	DataSourceHelperRecreate( f1_arg1, "PositionEditLoadout" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "scoreboardInfo.activeTab", 0 ) --[[ @ 0]]
	self:setClass( CoD.TabbedScoreboard ) --[[ @ 0]]
	self.id = "TabbedScoreboard" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local emptyFocusable = nil --[[ @ 0]]
	
	emptyFocusable = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	local ScoreboardGameMap = CoD.ScoreboardGameStatus.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -470, 323 ) --[[ @ 0]]
	self:addElement( ScoreboardGameMap ) --[[ @ 0]]
	self.ScoreboardGameMap = ScoreboardGameMap --[[ @ 0]]
	
	local PCTabbedScoreboardAccessMapPrompt = nil --[[ @ 0]]
	
	PCTabbedScoreboardAccessMapPrompt = CoD.PCTabbedScoreboardAccessMapPrompt.new( f1_arg0, f1_arg1, 0.5, 1.5, -726, -1194, 0.5, 0.5, -470, -430 ) --[[ @ 0]]
	self:addElement( PCTabbedScoreboardAccessMapPrompt ) --[[ @ 0]]
	self.PCTabbedScoreboardAccessMapPrompt = PCTabbedScoreboardAccessMapPrompt --[[ @ 0]]
	
	local ScoreboardGameStatusScores = CoD.ScoreboardGameStatusScores.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -200, 0 ) --[[ @ 0]]
	ScoreboardGameStatusScores:mergeStateConditions( {
		{
			stateName = "HiddenByEvent",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_SCORES )
			end
		}
	} ) --[[ @ 0]]
	local TabbedScoreboardScores = ScoreboardGameStatusScores --[[ @ 0]]
	local TabbedScoreboardHeader = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	local ScoreboardTabs = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	TabbedScoreboardHeader( TabbedScoreboardScores, ScoreboardTabs["scoreboardInfo.activeTab"], function ( f3_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "scoreboardInfo.activeTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabbedScoreboardScores = ScoreboardGameStatusScores --[[ @ 0]]
	TabbedScoreboardHeader = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	ScoreboardTabs = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	TabbedScoreboardHeader( TabbedScoreboardScores, ScoreboardTabs["factions.isCoDCaster"], function ( f4_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabbedScoreboardScores = ScoreboardGameStatusScores --[[ @ 0]]
	TabbedScoreboardHeader = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	ScoreboardTabs = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	TabbedScoreboardHeader( TabbedScoreboardScores, ScoreboardTabs["scoreboard.team1.count"], function ( f5_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "scoreboard.team1.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabbedScoreboardScores = ScoreboardGameStatusScores --[[ @ 0]]
	TabbedScoreboardHeader = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	ScoreboardTabs = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	TabbedScoreboardHeader( TabbedScoreboardScores, ScoreboardTabs["scoreboard.team2.count"], function ( f6_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "scoreboard.team2.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ScoreboardGameStatusScores:linkToElementModel( ScoreboardGameStatusScores, "scoreboard.characterIndex", true, function ( model )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "scoreboard.characterIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ScoreboardGameStatusScores:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ScoreboardGameStatusScores ) --[[ @ 0]]
	self.ScoreboardGameStatusScores = ScoreboardGameStatusScores --[[ @ 0]]
	
	TabbedScoreboardHeader = CoD.TabbedScoreboardHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -725, 725, 0.5, 0.5, -470, -300 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardHeader ) --[[ @ 0]]
	self.TabbedScoreboardHeader = TabbedScoreboardHeader --[[ @ 0]]
	
	TabbedScoreboardScores = CoD.TabbedScoreboardScores.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -470, 323 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardScores ) --[[ @ 0]]
	self.TabbedScoreboardScores = TabbedScoreboardScores --[[ @ 0]]
	
	ScoreboardTabs = CoD.ScoreboardTabs.new( f1_arg0, f1_arg1, 0.5, 0.5, -360, 360, 0.5, 0.5, -470, -436 ) --[[ @ 0]]
	self:addElement( ScoreboardTabs ) --[[ @ 0]]
	self.ScoreboardTabs = ScoreboardTabs --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] )
			end
		},
		{
			stateName = "Forced",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "forceScoreboard", 1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.forceScoreboard, function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "forceScoreboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f12_arg2, f12_arg3, f12_arg4 )
		if IsSelfInState( self, "Active" ) and IsPC() and IsDemoPlaying() then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", nil ) --[[ @ 0]]
		elseif IsSelfInState( self, "Active" ) and IsPC() then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", nil ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, true, false ) --[[ @ 0]]
		elseif IsSelfInState( self, "Active" ) then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", nil ) --[[ @ 0]]
		elseif IsSelfInState( self, "Forced" ) then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", nil ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, false, false ) --[[ @ 0]]
		elseif IsSelfInState( self, "DefaultState" ) and IsDemoPlaying() then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", true ) --[[ @ 0]]
			SetControllerModelValue( controller, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_SCORES ) --[[ @ 0]]
			SetFocusToElement( self, "ScoreboardTabs", controller ) --[[ @ 0]]
			CoD.ScoreboardUtility.UpdateScoreboardTabsFocus( self.ScoreboardTabs ) --[[ @ 0]]
			CoD.HUDUtility.GiveFocusToMenu( f1_arg0, controller ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.ScoreboardUtility.CloseOccluders( controller, f1_arg0 ) --[[ @ 0]]
		elseif IsSelfInState( self, "DefaultState" ) then
			SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", true ) --[[ @ 0]]
			SetControllerModelValue( controller, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_SCORES ) --[[ @ 0]]
			SetFocusToElement( self, "ScoreboardTabs", controller ) --[[ @ 0]]
			CoD.ScoreboardUtility.UpdateScoreboardTabsFocus( self.ScoreboardTabs ) --[[ @ 0]]
			CoD.HUDUtility.GiveFocusToMenu( f1_arg0, controller ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.ScoreboardUtility.CloseOccluders( controller, f1_arg0 ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, false, false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	end
	TabbedScoreboardHeader.id = "TabbedScoreboardHeader" --[[ @ 0]]
	TabbedScoreboardScores.id = "TabbedScoreboardScores" --[[ @ 0]]
	ScoreboardTabs.id = "ScoreboardTabs" --[[ @ 0]]
	self.__defaultFocus = TabbedScoreboardScores --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local9 = self --[[ @ 0]]
	SetElementProperty( self.ScoreboardTabs, "m_disableNavigation", true ) --[[ @ 0]]
	CoD.ScoreboardUtility.SetupFooterSubscription( self.ScoreboardGameStatusScores, f1_arg1 ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( emptyFocusable ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.TabbedScoreboard.__resetProperties = function ( f13_arg0 )
	f13_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
	f13_arg0.ScoreboardGameMap:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.TabbedScoreboard.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f14_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
			f14_arg0.ScoreboardGameMap:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.ScoreboardGameMap ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Forced = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.TabbedScoreboard.__onClose = function ( f17_arg0 )
	f17_arg0.emptyFocusable:close() --[[ @ 0]]
	f17_arg0.ScoreboardGameMap:close() --[[ @ 0]]
	f17_arg0.PCTabbedScoreboardAccessMapPrompt:close() --[[ @ 0]]
	f17_arg0.ScoreboardGameStatusScores:close() --[[ @ 0]]
	f17_arg0.TabbedScoreboardHeader:close() --[[ @ 0]]
	f17_arg0.TabbedScoreboardScores:close() --[[ @ 0]]
	f17_arg0.ScoreboardTabs:close() --[[ @ 0]]
end
 --[[ @ 0]]
