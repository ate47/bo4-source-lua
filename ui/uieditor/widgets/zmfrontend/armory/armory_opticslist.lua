-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/zmfrontend/armory/armory_attachmentpip" ) --[[ @ 0]]
require( "ui/uieditor/widgets/zmfrontend/armory/armory_attachmentslotcontainer" ) --[[ @ 0]]

CoD.Armory_OpticsList = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Armory_OpticsList.__defaultWidth = 500 --[[ @ 0]]
CoD.Armory_OpticsList.__defaultHeight = 300 --[[ @ 0]]
CoD.Armory_OpticsList.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Armory_OpticsList ) --[[ @ 0]]
	self.id = "Armory_OpticsList" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local BlackGradientBG = LUI.UIImage.new( 0, 1, 5, -5, 0, 1, 35, 31 ) --[[ @ 0]]
	BlackGradientBG:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BlackGradientBG:setAlpha( 0.3 ) --[[ @ 0]]
	BlackGradientBG:setZRot( 180 ) --[[ @ 0]]
	BlackGradientBG:setZoom( 10 ) --[[ @ 0]]
	BlackGradientBG:setImage( RegisterImage( @"hash_78A6742E3F9A2ED" ) ) --[[ @ 0]]
	self:addElement( BlackGradientBG ) --[[ @ 0]]
	self.BlackGradientBG = BlackGradientBG --[[ @ 0]]
	
	local TopLine = LUI.UIImage.new( 0, 1, 1, -1, 0, 0, 31, 49 ) --[[ @ 0]]
	TopLine:setAlpha( 0.5 ) --[[ @ 0]]
	TopLine:setZoom( 10 ) --[[ @ 0]]
	TopLine:setImage( RegisterImage( @"uie_ui_menu_cac_primary_button_top_line" ) ) --[[ @ 0]]
	TopLine:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TopLine ) --[[ @ 0]]
	self.TopLine = TopLine --[[ @ 0]]
	
	local OpticsHeader = LUI.UIText.new( 0.5, 0.5, -192.5, 192.5, 0, 0, -8, 10 ) --[[ @ 0]]
	OpticsHeader:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
	OpticsHeader:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2BB87386985BA15F" ) ) --[[ @ 0]]
	OpticsHeader:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	OpticsHeader:setLetterSpacing( 4 ) --[[ @ 0]]
	OpticsHeader:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	OpticsHeader:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( OpticsHeader ) --[[ @ 0]]
	self.OpticsHeader = OpticsHeader --[[ @ 0]]
	
	local Optics = LUI.UIList.new( f1_arg0, f1_arg1, 15, 0, nil, false, false, false, false ) --[[ @ 0]]
	Optics:setLeftRight( 0.5, 0.5, -237, 237 ) --[[ @ 0]]
	Optics:setTopBottom( 0, 0, 42, 281 ) --[[ @ 0]]
	Optics:setZoom( 13 ) --[[ @ 0]]
	Optics:setWidgetType( CoD.Armory_AttachmentSlotContainer ) --[[ @ 0]]
	Optics:setHorizontalCount( 3 ) --[[ @ 0]]
	Optics:setVerticalCount( 2 ) --[[ @ 0]]
	Optics:setSpacing( 15 ) --[[ @ 0]]
	Optics:setBalanceGridRows( true ) --[[ @ 0]]
	Optics:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Optics:setFilter( function ( f2_arg0 )
		return f2_arg0.attachmentGroup:get() == Enum[@"hash_7420BCDBDE17A84"][@"hash_56AC43DB9B6634DA"]
	end ) --[[ @ 0]]
	Optics:setDataSource( "ArmoryWeaponAttachments" ) --[[ @ 0]]
	Optics:linkToElementModel( Optics, "itemIndex", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = Optics --[[ @ 0]]
	local OpticAttachmentPip = Optics.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	OpticAttachmentPip( f1_local5, f1_local7.armoryAttachmentUpdated, function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Optics:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = Optics --[[ @ 0]]
	OpticAttachmentPip = Optics.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	OpticAttachmentPip( f1_local5, f1_local7.LastInput, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Optics:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		CoD.ZMLoadoutUtility.UpdateArmoryAttachmentModel( f1_arg0, element, f1_arg1, true ) --[[ @ 0]]
		CoD.ZMLoadoutUtility.UpdateAttachmentListModelForWeaponAttributes( f1_arg0, self.Optics, f1_arg1 ) --[[ @ 0]]
		return f7_local0
	end ) --[[ @ 0]]
	Optics:registerEventHandler( "gain_list_focus", function ( element, event )
		return nil
	end ) --[[ @ 0]]
	Optics:registerEventHandler( "lose_list_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		CoD.ZMLoadoutUtility.UpdateArmoryAttachmentModel( f1_arg0, element, f1_arg1, false ) --[[ @ 0]]
		CoD.WeaponAttachmentsUtility.ResetActiveListItemForList( element, f1_arg1 ) --[[ @ 0]]
		CoD.ZMLoadoutUtility.ResetAttachmentListModelForWeaponAttributes( f1_arg0, f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	Optics:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Optics, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and not CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not CoD.ZMLoadoutUtility.IsArmoryAnyOpticAttachmentEquipped( controller, menu ) then
			CoD.ZMLoadoutUtility.EquipArmoryElementAttachment( element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_cac_attach_base" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.ZMLoadoutUtility.ToggleArmoryElementAttachment( element, controller, menu ) --[[ @ 0]]
			return true
		elseif IsPC() and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) then
			CoD.ZMLoadoutUtility.ForceEquipArmoryOpticElementAttachment( element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and not CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not CoD.ZMLoadoutUtility.IsArmoryAnyOpticAttachmentEquipped( controller, menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and not CoD.ZMLoadoutUtility.IsArmoryAttachmentItemLocked( menu, element, controller ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Optics, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.ZMLoadoutUtility.RemoveArmoryElementAttachment( element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_cac_attach_remove" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_1679ACA6FFC6C8F3", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Optics, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.ZMLoadoutUtility.RemoveArmoryElementAttachment( element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_cac_attach_remove" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Optics, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and IsBooleanDvarSet( "tu12_zmEnableReticleCustomization" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", element, "primary" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and IsBooleanDvarSet( "tu12_zmEnableReticleCustomization" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_4AFF37175F950D17", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Optics, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and IsBooleanDvarSet( "tu12_zmEnableReticleCustomization" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", element, "primary" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( element, controller, menu ) and not IsListElementChildInState( element, "AttachmentSlot", "NotAvailable" ) and IsBooleanDvarSet( "tu12_zmEnableReticleCustomization" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_4AFF37175F950D17", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	Optics:subscribeToGlobalModel( f1_arg1, "PerController", "LastInput", function ( model )
		local f21_local0 = Optics --[[ @ 0]]
		if not IsMouse( f1_arg1 ) and AlwaysFalse() then
			CoD.ZMLoadoutUtility.UpdateArmoryAttachmentModel( f1_arg0, f21_local0, f1_arg1, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Optics:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_1679ACA6FFC6C8F3", function ( f22_arg0, f22_arg1, f22_arg2, f22_arg3 )
		if CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( f22_arg0, f22_arg2, f22_arg1 ) then
			return function ( f23_arg0, f23_arg1, f23_arg2, f23_arg3 )
				CoD.ZMLoadoutUtility.RemoveArmoryElementAttachment( f23_arg0, f23_arg2, f23_arg1 ) --[[ @ 0]]
				PlaySoundAlias( "uin_cac_attach_remove" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	Optics:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f24_arg0, f24_arg1, f24_arg2, f24_arg3 )
		if CoD.ZMLoadoutUtility.IsArmoryElementAttachmentEquipped( f24_arg0, f24_arg2, f24_arg1 ) and not IsListElementChildInState( f24_arg0, "AttachmentSlot", "NotAvailable" ) and IsBooleanDvarSet( "tu12_zmEnableReticleCustomization" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( f24_arg1, f24_arg0 ) then
			return function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
				CoD.CraftUtility.SetUpOpticPersonalization( f25_arg0, f25_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenCACAttachmentOverlay( self, f25_arg0, f25_arg1, f25_arg2, "ReticleSelect", f25_arg0, "primary" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Optics ) --[[ @ 0]]
	self.Optics = Optics --[[ @ 0]]
	
	OpticAttachmentPip = CoD.Armory_AttachmentPip.new( f1_arg0, f1_arg1, 0.5, 0.5, -6, 6, 0, 0, 25, 37 ) --[[ @ 0]]
	OpticAttachmentPip:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Locked",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return not CoD.ZMLoadoutUtility.IsArmoryAnyOpticAttachmentEquipped( f1_arg1, menu )
			end
		}
	} ) --[[ @ 0]]
	OpticAttachmentPip:linkToElementModel( OpticAttachmentPip, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( OpticAttachmentPip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = OpticAttachmentPip --[[ @ 0]]
	f1_local5 = OpticAttachmentPip.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.armoryAttachmentUpdated, function ( f30_arg0 )
		f1_arg0:updateElementState( OpticAttachmentPip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "armoryAttachmentUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( OpticAttachmentPip ) --[[ @ 0]]
	self.OpticAttachmentPip = OpticAttachmentPip --[[ @ 0]]
	
	self.__on_menuOpened_self = function ( f31_arg0, f31_arg1, f31_arg2, f31_arg3 )
		local f31_local0 = self --[[ @ 0]]
		ScaleToElementWidth( self, self.Optics, 30 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	Optics.id = "Optics" --[[ @ 0]]
	self.__defaultFocus = Optics --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local5 = self --[[ @ 0]]
	f1_local5 = Optics --[[ @ 0]]
	if IsPC() then
		SetElementProperty( f1_local5, "_isOptic", true ) --[[ @ 0]]
		CoD.WeaponAttachmentsUtility.UpdateHorizontalCount( f1_arg0, f1_local5, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local5, f1_arg1, "name", "", "" ) --[[ @ 0]]
	else
		SetElementProperty( f1_local5, "_isOptic", true ) --[[ @ 0]]
		CoD.WeaponAttachmentsUtility.UpdateHorizontalCount( f1_arg0, f1_local5, f1_arg1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.Armory_OpticsList.__onClose = function ( f33_arg0 )
	f33_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f33_arg0.Optics:close() --[[ @ 0]]
	f33_arg0.OpticAttachmentPip:close() --[[ @ 0]]
end
 --[[ @ 0]]
