-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/freecursor/infopanelsubwidgets/freecursorbuttonpromptcontainer" ) --[[ @ 0]]

CoD.freeCursorButtonPromptArea = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.freeCursorButtonPromptArea.__defaultWidth = 1044 --[[ @ 0]]
CoD.freeCursorButtonPromptArea.__defaultHeight = 36 --[[ @ 0]]
CoD.freeCursorButtonPromptArea.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.freeCursorButtonPromptArea ) --[[ @ 0]]
	self.id = "freeCursorButtonPromptArea" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local buttonBacking = LUI.UIImage.new( 0, 0, 0, 430, 0, 0, 0, 36 ) --[[ @ 0]]
	buttonBacking:setRGB( 0.06, 0.06, 0.06 ) --[[ @ 0]]
	buttonBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	buttonBacking:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	buttonBacking:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	buttonBacking:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	buttonBacking:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	buttonBacking:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( buttonBacking ) --[[ @ 0]]
	self.buttonBacking = buttonBacking --[[ @ 0]]
	
	local buttonPrompts = CoD.freeCursorButtonPromptContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 36 ) --[[ @ 0]]
	self:addElement( buttonPrompts ) --[[ @ 0]]
	self.buttonPrompts = buttonPrompts --[[ @ 0]]
	
	local warzonePickupHint = nil --[[ @ 0]]
	
	warzonePickupHint = LUI.UIText.new( 0.03, 0.03, 0, 342, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	warzonePickupHint:setRGB( 1, 0, 0 ) --[[ @ 0]]
	warzonePickupHint:setAlpha( 0 ) --[[ @ 0]]
	warzonePickupHint:setTTF( "dinnext_regular" ) --[[ @ 0]]
	warzonePickupHint:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	warzonePickupHint:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	warzonePickupHint:linkToElementModel( self, "pickupHintWarzone", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			warzonePickupHint:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( warzonePickupHint ) --[[ @ 0]]
	self.warzonePickupHint = warzonePickupHint --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ShowWarzoneHint",
			condition = function ( menu, element, event )
				local f3_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( self, f1_arg1, "pickupHintWarzone" ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isStashFocused" ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "ShowBacking",
			condition = function ( menu, element, event )
				local f4_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( self, f1_arg1, "detailedDescription" ) --[[ @ 0]]
				if f4_local0 then
					f4_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "detailedView" ) --[[ @ 0]]
					if f4_local0 then
						f4_local0 = AnyContextualButtonPrompts( self, f1_arg1 ) --[[ @ 0]]
					end
				end
				return f4_local0
			end
		},
		{
			stateName = "DefaultStateKBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f6_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local4 = self --[[ @ 0]]
	local f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6.LastInput, function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "pickupHintWarzone", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "pickupHintWarzone"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isStashFocused", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isStashFocused"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedDescription", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedDescription"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedView", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedView"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "buttonPrompts", true, function ( model )
		local f12_local0 = self --[[ @ 0]]
		CoD.FreeCursorUtility.RecreateButtonPromptContainerAndLinkToSelfModelValue( self, f1_arg1, f1_arg0, "buttonPrompts", model ) --[[ @ 0]]
	end ) --[[ @ 0]]
	buttonPrompts.id = "buttonPrompts" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local5 = self --[[ @ 0]]
	if IsPC() then
		SetElementProperty( self.buttonBacking, "skipHorizontalLayout", true ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseVisibleChildrenWidth( self ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseMaxVisibleChildHeight( self ) --[[ @ 0]]
		CoD.HUDUtility.SetupWeaponHintPickupHintTextKBM( self, f1_local5, f1_arg1 ) --[[ @ 0]]
		CoD.FreeCursorUtility.SetIsShowingContextualPromptsModelPC( f1_local5, f1_arg1, f1_arg0 ) --[[ @ 0]]
	else
		SetElementProperty( self.buttonBacking, "skipHorizontalLayout", true ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseVisibleChildrenWidth( self ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseMaxVisibleChildHeight( self ) --[[ @ 0]]
	end
	f1_local5 = warzonePickupHint --[[ @ 0]]
	if not CoD.HUDUtility.IsWarzone() then
		ReplaceElementWithFake( self, "warzonePickupHint" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.freeCursorButtonPromptArea.__resetProperties = function ( f13_arg0 )
	f13_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
	f13_arg0.warzonePickupHint:completeAnimation() --[[ @ 0]]
	f13_arg0.buttonPrompts:completeAnimation() --[[ @ 0]]
	f13_arg0.buttonBacking:setTopBottom( 0, 0, 0, 36 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setRGB( 0.06, 0.06, 0.06 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	f13_arg0.buttonBacking:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f13_arg0.buttonBacking:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	f13_arg0.warzonePickupHint:setAlpha( 0 ) --[[ @ 0]]
	f13_arg0.buttonPrompts:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f13_arg0.buttonPrompts:setTopBottom( 0, 0, 0, 36 ) --[[ @ 0]]
	f13_arg0.buttonPrompts:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.freeCursorButtonPromptArea.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f14_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
			f14_arg0.buttonBacking:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.buttonBacking ) --[[ @ 0]]
		end,
		ShowBacking = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f15_local0 = function ( f16_arg0 )
				f15_arg0.buttonBacking:beginAnimation( 100 ) --[[ @ 0]]
				f15_arg0.buttonBacking:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
				f15_arg0.buttonBacking:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.buttonBacking:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
			f15_arg0.buttonBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
			f15_arg0.buttonBacking:setShaderVector( 0, 0.1, 0, 0, 0 ) --[[ @ 0]]
			f15_arg0.buttonBacking:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f15_arg0.buttonBacking:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f15_arg0.buttonBacking:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f15_arg0.buttonBacking:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
			f15_local0( f15_arg0.buttonBacking ) --[[ @ 0]]
		end
	},
	ShowWarzoneHint = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f17_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
			f17_arg0.buttonBacking:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.buttonBacking ) --[[ @ 0]]
			f17_arg0.buttonPrompts:completeAnimation() --[[ @ 0]]
			f17_arg0.buttonPrompts:setLeftRight( 0.36, 1.36, 0, 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.buttonPrompts ) --[[ @ 0]]
			f17_arg0.warzonePickupHint:completeAnimation() --[[ @ 0]]
			f17_arg0.warzonePickupHint:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.warzonePickupHint ) --[[ @ 0]]
		end
	},
	ShowBacking = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
			f18_arg0.buttonBacking:setTopBottom( 0, 0, 0, 30 ) --[[ @ 0]]
			f18_arg0.buttonBacking:setRGB( 0.14, 0.14, 0.14 ) --[[ @ 0]]
			f18_arg0.buttonBacking:setAlpha( 0.98 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.buttonBacking ) --[[ @ 0]]
			f18_arg0.buttonPrompts:completeAnimation() --[[ @ 0]]
			f18_arg0.buttonPrompts:setTopBottom( 0, 0, 0, 30 ) --[[ @ 0]]
			f18_arg0.buttonPrompts:setAlpha( 0.7 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.buttonPrompts ) --[[ @ 0]]
		end
	},
	DefaultStateKBM = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f19_arg0.buttonBacking:completeAnimation() --[[ @ 0]]
			f19_arg0.buttonBacking:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.buttonBacking ) --[[ @ 0]]
			f19_arg0.buttonPrompts:completeAnimation() --[[ @ 0]]
			f19_arg0.buttonPrompts:setLeftRight( 0, 0, 0, 1044 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.buttonPrompts ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.freeCursorButtonPromptArea.__onClose = function ( f20_arg0 )
	f20_arg0.buttonBacking:close() --[[ @ 0]]
	f20_arg0.buttonPrompts:close() --[[ @ 0]]
	f20_arg0.warzonePickupHint:close() --[[ @ 0]]
end
 --[[ @ 0]]
