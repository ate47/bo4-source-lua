-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/freecursor/freecursoridentitypanel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/freecursor/tooltiparchetypes/tooltipactionprompt" ) --[[ @ 0]]
require( "ui/uieditor/widgets/freecursor/tooltiparchetypes/tooltipfeaturetitle" ) --[[ @ 0]]

CoD.freeCursorInfoPanel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.freeCursorInfoPanel.__defaultWidth = 405 --[[ @ 0]]
CoD.freeCursorInfoPanel.__defaultHeight = 963 --[[ @ 0]]
CoD.freeCursorInfoPanel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.freeCursorInfoPanel ) --[[ @ 0]]
	self.id = "freeCursorInfoPanel" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TooltipActionPrompt = CoD.TooltipActionPrompt.new( f1_arg0, f1_arg1, 0, 0, 5, 410, 0, 0, 377, 754 ) --[[ @ 0]]
	TooltipActionPrompt:setAlpha( 0 ) --[[ @ 0]]
	TooltipActionPrompt:linkToElementModel( self, nil, false, function ( model )
		TooltipActionPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TooltipActionPrompt ) --[[ @ 0]]
	self.TooltipActionPrompt = TooltipActionPrompt --[[ @ 0]]
	
	local IdentityPanel = CoD.freeCursorIdentityPanel.new( f1_arg0, f1_arg1, 0, 0, 5, 374, 0, 0, 754, 843 ) --[[ @ 0]]
	IdentityPanel:setAlpha( 0 ) --[[ @ 0]]
	IdentityPanel:linkToElementModel( self, nil, false, function ( model )
		IdentityPanel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( IdentityPanel ) --[[ @ 0]]
	self.IdentityPanel = IdentityPanel --[[ @ 0]]
	
	local TooltipFeatureTitle = CoD.TooltipFeatureTitle.new( f1_arg0, f1_arg1, 0, 0, 5, 430, 0, 0, 5, 377 ) --[[ @ 0]]
	TooltipFeatureTitle:linkToElementModel( self, nil, false, function ( model )
		TooltipFeatureTitle:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TooltipFeatureTitle ) --[[ @ 0]]
	self.TooltipFeatureTitle = TooltipFeatureTitle --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "FeatureArchetype",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( self, f1_arg1, "tooltipArchetype", CoD.FreeCursorUtility.TooltipArchetypes.FEATURE_TITLE )
			end
		},
		{
			stateName = "ActionPrompt",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( self, f1_arg1, "tooltipArchetype", CoD.FreeCursorUtility.TooltipArchetypes.ACTION_PROMPT )
			end
		},
		{
			stateName = "Identity",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( self, f1_arg1, "tooltipArchetype", CoD.FreeCursorUtility.TooltipArchetypes.IDENTITY )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "tooltipArchetype", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tooltipArchetype"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.detailedView", function ( model )
		local f9_local0 = self --[[ @ 0]]
		if IsGamepad( f1_arg1 ) then
			CoD.FreeCursorUtility.AnimateToVerticalTopLayout( self, f1_arg1, 200 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.detailedViewPC", function ( model )
		local f10_local0 = self --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) then
			CoD.FreeCursorUtility.AnimateToVerticalTopLayout( self, f1_arg1, 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.updated", function ( model )
		local f11_local0 = self --[[ @ 0]]
		CoD.FreeCursorUtility.AnimateToVerticalTopLayout( self, f1_arg1, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TooltipActionPrompt.id = "TooltipActionPrompt" --[[ @ 0]]
	IdentityPanel.id = "IdentityPanel" --[[ @ 0]]
	TooltipFeatureTitle.id = "TooltipFeatureTitle" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local4 = self --[[ @ 0]]
	CoD.FreeCursorUtility.UseMaxVisibleChildWidth( self ) --[[ @ 0]]
	CoD.FreeCursorUtility.UseVisibleChildrenHeight( self ) --[[ @ 0]]
	SetElementProperty( self.TooltipActionPrompt, "inCompactView", true ) --[[ @ 0]]
	SetElementProperty( self.TooltipFeatureTitle, "inCompactView", true ) --[[ @ 0]]
	CoD.FreeCursorUtility.SetCustomPadding( self, f1_arg1, 10, 10, 0, 0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.freeCursorInfoPanel.__resetProperties = function ( f12_arg0 )
	f12_arg0.TooltipFeatureTitle:completeAnimation() --[[ @ 0]]
	f12_arg0.TooltipActionPrompt:completeAnimation() --[[ @ 0]]
	f12_arg0.IdentityPanel:completeAnimation() --[[ @ 0]]
	f12_arg0.TooltipFeatureTitle:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.TooltipActionPrompt:setAlpha( 0 ) --[[ @ 0]]
	f12_arg0.IdentityPanel:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.freeCursorInfoPanel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.TooltipActionPrompt:completeAnimation() --[[ @ 0]]
			f13_arg0.TooltipActionPrompt:setAlpha( 1 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.TooltipActionPrompt ) --[[ @ 0]]
			f13_arg0.TooltipFeatureTitle:completeAnimation() --[[ @ 0]]
			f13_arg0.TooltipFeatureTitle:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.TooltipFeatureTitle ) --[[ @ 0]]
		end
	},
	FeatureArchetype = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f14_local0 = function ( f15_arg0 )
				f14_arg0.TooltipFeatureTitle:beginAnimation( 150 ) --[[ @ 0]]
				f14_arg0.TooltipFeatureTitle:setAlpha( 1 ) --[[ @ 0]]
				f14_arg0.TooltipFeatureTitle:registerEventHandler( "interrupted_keyframe", f14_arg0.clipInterrupted ) --[[ @ 0]]
				f14_arg0.TooltipFeatureTitle:registerEventHandler( "transition_complete_keyframe", f14_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f14_arg0.TooltipFeatureTitle:completeAnimation() --[[ @ 0]]
			f14_arg0.TooltipFeatureTitle:setAlpha( 0.01 ) --[[ @ 0]]
			f14_local0( f14_arg0.TooltipFeatureTitle ) --[[ @ 0]]
		end
	},
	ActionPrompt = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f16_arg0.TooltipActionPrompt:completeAnimation() --[[ @ 0]]
			f16_arg0.TooltipActionPrompt:setAlpha( 1 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.TooltipActionPrompt ) --[[ @ 0]]
			f16_arg0.TooltipFeatureTitle:completeAnimation() --[[ @ 0]]
			f16_arg0.TooltipFeatureTitle:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.TooltipFeatureTitle ) --[[ @ 0]]
		end
	},
	Identity = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f17_arg0.IdentityPanel:completeAnimation() --[[ @ 0]]
			f17_arg0.IdentityPanel:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.IdentityPanel ) --[[ @ 0]]
			f17_arg0.TooltipFeatureTitle:completeAnimation() --[[ @ 0]]
			f17_arg0.TooltipFeatureTitle:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.TooltipFeatureTitle ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.freeCursorInfoPanel.__onClose = function ( f18_arg0 )
	f18_arg0.TooltipActionPrompt:close() --[[ @ 0]]
	f18_arg0.IdentityPanel:close() --[[ @ 0]]
	f18_arg0.TooltipFeatureTitle:close() --[[ @ 0]]
end
 --[[ @ 0]]
