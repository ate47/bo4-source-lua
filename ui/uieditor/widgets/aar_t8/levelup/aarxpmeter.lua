-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/aar_t8/levelup/aarxpmetercurrentlevel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/aar_t8/levelup/aarxpmeternextlevel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonwipemeterwithglow" ) --[[ @ 0]]

CoD.AARXpMeter = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARXpMeter.__defaultWidth = 1300 --[[ @ 0]]
CoD.AARXpMeter.__defaultHeight = 20 --[[ @ 0]]
CoD.AARXpMeter.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARXpMeter ) --[[ @ 0]]
	self.id = "AARXpMeter" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LevelMeterDarkTint = LUI.UIImage.new( 0.35, 1, 0, 0, 0.5, 0.5, -5, 5 ) --[[ @ 0]]
	LevelMeterDarkTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LevelMeterDarkTint:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( LevelMeterDarkTint ) --[[ @ 0]]
	self.LevelMeterDarkTint = LevelMeterDarkTint --[[ @ 0]]
	
	local LevelMeterBg = LUI.UIImage.new( 0.85, 1.5, -650, -650, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	LevelMeterBg:setImage( RegisterImage( @"uie_ui_menu_inspection_level_meter_bg" ) ) --[[ @ 0]]
	LevelMeterBg:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	LevelMeterBg:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LevelMeterBg ) --[[ @ 0]]
	self.LevelMeterBg = LevelMeterBg --[[ @ 0]]
	
	local LevelMeterBar = LUI.UIImage.new( 0.35, 1, 0, 0, 0.5, 0.5, -5, 5 ) --[[ @ 0]]
	LevelMeterBar:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
	LevelMeterBar:setAlpha( 0 ) --[[ @ 0]]
	LevelMeterBar:setImage( RegisterImage( @"uie_ui_menu_inspection_level_meter_bar" ) ) --[[ @ 0]]
	LevelMeterBar:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta" ) ) --[[ @ 0]]
	LevelMeterBar:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	LevelMeterBar:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LevelMeterBar:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	LevelMeterBar:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	LevelMeterBar:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LevelMeterBar ) --[[ @ 0]]
	self.LevelMeterBar = LevelMeterBar --[[ @ 0]]
	
	local LevelMeterTickGlow = LUI.UIImage.new( 0, 0, 1178.5, 1210.5, 0, 0, 0, 20 ) --[[ @ 0]]
	LevelMeterTickGlow:setAlpha( 0 ) --[[ @ 0]]
	LevelMeterTickGlow:setImage( RegisterImage( @"uie_ui_menu_inspection_level_meter_tick_glow" ) ) --[[ @ 0]]
	LevelMeterTickGlow:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	LevelMeterTickGlow:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LevelMeterTickGlow ) --[[ @ 0]]
	self.LevelMeterTickGlow = LevelMeterTickGlow --[[ @ 0]]
	
	local LevelMeterTick = LUI.UIImage.new( 0, 0, 1184.5, 1204.5, 0, 0, -20, 20 ) --[[ @ 0]]
	LevelMeterTick:setAlpha( 0 ) --[[ @ 0]]
	LevelMeterTick:setImage( RegisterImage( @"uie_ui_menu_inspection_level_meter_tick" ) ) --[[ @ 0]]
	LevelMeterTick:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	LevelMeterTick:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LevelMeterTick ) --[[ @ 0]]
	self.LevelMeterTick = LevelMeterTick --[[ @ 0]]
	
	local CurrentLevel = CoD.AARXpMeterCurrentLevel.new( f1_arg0, f1_arg1, 0, 0, 329.5, 449.5, 0, 0, -5, 25 ) --[[ @ 0]]
	CurrentLevel:linkToElementModel( self, nil, false, function ( model )
		CurrentLevel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentLevel:linkToElementModel( self, "nextRank", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			CurrentLevel.RankLabel:setRGB( CoD.RankUtility.GetInGameColorForRankTextByNextRank( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CurrentLevel:linkToElementModel( self, "nextRank", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			CurrentLevel.ZMRankLabel:setRGB( CoD.RankUtility.GetInGameColorForRankTextByNextRank( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CurrentLevel ) --[[ @ 0]]
	self.CurrentLevel = CurrentLevel --[[ @ 0]]
	
	local NextLevel = CoD.AARXpMeterNextLevel.new( f1_arg0, f1_arg1, 0, 0, 1304.5, 1424.5, 0, 0, -5, 25 ) --[[ @ 0]]
	NextLevel:linkToElementModel( self, nil, false, function ( model )
		NextLevel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NextLevel:linkToElementModel( self, "nextRank", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			NextLevel.RankLabel:setRGB( CoD.RankUtility.GetInGameColorForRankTextByRank( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	NextLevel:linkToElementModel( self, "nextRank", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			NextLevel.ZMRankLabel:setRGB( CoD.RankUtility.GetInGameColorForRankTextByRank( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NextLevel ) --[[ @ 0]]
	self.NextLevel = NextLevel --[[ @ 0]]
	
	local EarnedXP = CoD.CommonWipeMeterWithGlow.new( f1_arg0, f1_arg1, 0, 0, 456, 1301, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	EarnedXP.Meter:setRGB( 1, 0.73, 0 ) --[[ @ 0]]
	EarnedXP.Meter:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	EarnedXP.Meter:setShaderVector( 0, 0.75, 0, 0, 0 ) --[[ @ 0]]
	EarnedXP.MeterAdd:setAlpha( 0.3 ) --[[ @ 0]]
	EarnedXP.MeterAdd:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	EarnedXP.MeterAdd:setShaderVector( 0, 0.75, 0, 0, 0 ) --[[ @ 0]]
	EarnedXP.MeterGlow:setRGB( 0.39, 0.18, 0 ) --[[ @ 0]]
	EarnedXP.MeterGlow:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar_glow" ) ) --[[ @ 0]]
	EarnedXP.MeterGlow:setShaderVector( 0, 0.75, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( EarnedXP ) --[[ @ 0]]
	self.EarnedXP = EarnedXP --[[ @ 0]]
	
	local ExpPointer = LUI.UIImage.new( 0, 0, 1293, 1303, 0, 0, -12, -2 ) --[[ @ 0]]
	ExpPointer:setRGB( 0.9, 0.89, 0.78 ) --[[ @ 0]]
	ExpPointer:setAlpha( 0 ) --[[ @ 0]]
	ExpPointer:setZRot( -45 ) --[[ @ 0]]
	ExpPointer:setImage( RegisterImage( @"uie_ui_menu_social_emblem_corner" ) ) --[[ @ 0]]
	ExpPointer:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	ExpPointer:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ExpPointer ) --[[ @ 0]]
	self.ExpPointer = ExpPointer --[[ @ 0]]
	
	local PreviousXP = CoD.CommonWipeMeterWithGlow.new( f1_arg0, f1_arg1, 0, 0, 456, 1301, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	PreviousXP.Meter:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b ) --[[ @ 0]]
	PreviousXP.Meter:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	PreviousXP.Meter:setShaderVector( 0, 0.25, 0, 0, 0 ) --[[ @ 0]]
	PreviousXP.MeterAdd:setAlpha( 0 ) --[[ @ 0]]
	PreviousXP.MeterAdd:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	PreviousXP.MeterAdd:setShaderVector( 0, 0.25, 0, 0, 0 ) --[[ @ 0]]
	PreviousXP.MeterGlow:setRGB( ColorSet.Orange.r, ColorSet.Orange.g, ColorSet.Orange.b ) --[[ @ 0]]
	PreviousXP.MeterGlow:setAlpha( 0.5 ) --[[ @ 0]]
	PreviousXP.MeterGlow:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar_glow" ) ) --[[ @ 0]]
	PreviousXP.MeterGlow:setShaderVector( 0, 0.25, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( PreviousXP ) --[[ @ 0]]
	self.PreviousXP = PreviousXP --[[ @ 0]]
	
	local xpEarnedText = LUI.UIText.new( 0, 0, 454, 872, 0, 0, -25, -4 ) --[[ @ 0]]
	xpEarnedText:setRGB( ColorSet.PlayerYellow.r, ColorSet.PlayerYellow.g, ColorSet.PlayerYellow.b ) --[[ @ 0]]
	xpEarnedText:setAlpha( 0.3 ) --[[ @ 0]]
	xpEarnedText:setText( "" ) --[[ @ 0]]
	xpEarnedText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	xpEarnedText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	xpEarnedText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( xpEarnedText ) --[[ @ 0]]
	self.xpEarnedText = xpEarnedText --[[ @ 0]]
	
	local xpNeededText = LUI.UIText.new( 0, 0, 870, 1288, 0, 0, -25, -4 ) --[[ @ 0]]
	xpNeededText:setRGB( 0.9, 0.89, 0.78 ) --[[ @ 0]]
	xpNeededText:setAlpha( 0.3 ) --[[ @ 0]]
	xpNeededText:setText( "" ) --[[ @ 0]]
	xpNeededText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	xpNeededText:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	xpNeededText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( xpNeededText ) --[[ @ 0]]
	self.xpNeededText = xpNeededText --[[ @ 0]]
	
	local maxRankText = LUI.UIText.new( 0, 0, 870, 1288, 0, 0, -25, -4 ) --[[ @ 0]]
	maxRankText:setAlpha( 0 ) --[[ @ 0]]
	maxRankText:setText( "" ) --[[ @ 0]]
	maxRankText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	maxRankText:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	maxRankText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( maxRankText ) --[[ @ 0]]
	self.maxRankText = maxRankText --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AARXpMeter.__resetProperties = function ( f8_arg0 )
	f8_arg0.LevelMeterBar:completeAnimation() --[[ @ 0]]
	f8_arg0.ExpPointer:completeAnimation() --[[ @ 0]]
	f8_arg0.PreviousXP:completeAnimation() --[[ @ 0]]
	f8_arg0.EarnedXP:completeAnimation() --[[ @ 0]]
	f8_arg0.NextLevel:completeAnimation() --[[ @ 0]]
	f8_arg0.CurrentLevel:completeAnimation() --[[ @ 0]]
	f8_arg0.LevelMeterBg:completeAnimation() --[[ @ 0]]
	f8_arg0.xpEarnedText:completeAnimation() --[[ @ 0]]
	f8_arg0.xpNeededText:completeAnimation() --[[ @ 0]]
	f8_arg0.LevelMeterDarkTint:completeAnimation() --[[ @ 0]]
	f8_arg0.maxRankText:completeAnimation() --[[ @ 0]]
	f8_arg0.LevelMeterBar:setAlpha( 0 ) --[[ @ 0]]
	f8_arg0.LevelMeterBar:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	f8_arg0.LevelMeterBar:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f8_arg0.LevelMeterBar:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	f8_arg0.LevelMeterBar:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f8_arg0.LevelMeterBar:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	f8_arg0.ExpPointer:setAlpha( 0 ) --[[ @ 0]]
	f8_arg0.PreviousXP:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.EarnedXP:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.NextLevel:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.CurrentLevel:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.LevelMeterBg:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.xpEarnedText:setAlpha( 0.3 ) --[[ @ 0]]
	f8_arg0.xpNeededText:setAlpha( 0.3 ) --[[ @ 0]]
	f8_arg0.LevelMeterDarkTint:setAlpha( 0.1 ) --[[ @ 0]]
	f8_arg0.maxRankText:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARXpMeter.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f9_local0 = function ( f10_arg0 )
				local f10_local0 = function ( f11_arg0 )
					local f11_local0 = function ( f12_arg0 )
						local f12_local0 = function ( f13_arg0 )
							f13_arg0:beginAnimation( 1000 ) --[[ @ 0]]
							f13_arg0:registerEventHandler( "transition_complete_keyframe", f9_arg0.clipFinished ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f12_arg0:beginAnimation( 2500, Enum[@"hash_1F50FFF429AB1890"][@"hash_15193EA7825DC097"] ) --[[ @ 0]]
						f12_arg0:setShaderVector( 0, 1, 1, 0, 0 ) --[[ @ 0]]
						f12_arg0:registerEventHandler( "transition_complete_keyframe", f12_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f11_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f11_arg0:registerEventHandler( "transition_complete_keyframe", f11_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f9_arg0.LevelMeterBar:beginAnimation( 2500, Enum[@"hash_1F50FFF429AB1890"][@"hash_15193EA7825DC097"] ) --[[ @ 0]]
				f9_arg0.LevelMeterBar:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
				f9_arg0.LevelMeterBar:registerEventHandler( "interrupted_keyframe", f9_arg0.clipInterrupted ) --[[ @ 0]]
				f9_arg0.LevelMeterBar:registerEventHandler( "transition_complete_keyframe", f10_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f9_arg0.LevelMeterBar:completeAnimation() --[[ @ 0]]
			f9_arg0.LevelMeterBar:setAlpha( 0.02 ) --[[ @ 0]]
			f9_arg0.LevelMeterBar:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
			f9_arg0.LevelMeterBar:setShaderVector( 1, 0.01, 0.01, 0, 0 ) --[[ @ 0]]
			f9_arg0.LevelMeterBar:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
			f9_arg0.LevelMeterBar:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f9_arg0.LevelMeterBar:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
			f9_local0( f9_arg0.LevelMeterBar ) --[[ @ 0]]
			f9_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f14_arg0.LevelMeterDarkTint:completeAnimation() --[[ @ 0]]
			f14_arg0.LevelMeterDarkTint:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.LevelMeterDarkTint ) --[[ @ 0]]
			f14_arg0.LevelMeterBg:completeAnimation() --[[ @ 0]]
			f14_arg0.LevelMeterBg:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.LevelMeterBg ) --[[ @ 0]]
			f14_arg0.LevelMeterBar:completeAnimation() --[[ @ 0]]
			f14_arg0.LevelMeterBar:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.LevelMeterBar ) --[[ @ 0]]
			f14_arg0.CurrentLevel:completeAnimation() --[[ @ 0]]
			f14_arg0.CurrentLevel:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.CurrentLevel ) --[[ @ 0]]
			f14_arg0.NextLevel:completeAnimation() --[[ @ 0]]
			f14_arg0.NextLevel:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.NextLevel ) --[[ @ 0]]
			f14_arg0.EarnedXP:completeAnimation() --[[ @ 0]]
			f14_arg0.EarnedXP:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.EarnedXP ) --[[ @ 0]]
			f14_arg0.ExpPointer:completeAnimation() --[[ @ 0]]
			f14_arg0.ExpPointer:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.ExpPointer ) --[[ @ 0]]
			f14_arg0.PreviousXP:completeAnimation() --[[ @ 0]]
			f14_arg0.PreviousXP:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.PreviousXP ) --[[ @ 0]]
			f14_arg0.xpEarnedText:completeAnimation() --[[ @ 0]]
			f14_arg0.xpEarnedText:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.xpEarnedText ) --[[ @ 0]]
			f14_arg0.xpNeededText:completeAnimation() --[[ @ 0]]
			f14_arg0.xpNeededText:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.xpNeededText ) --[[ @ 0]]
		end
	},
	MaxRank = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f15_arg0.xpNeededText:completeAnimation() --[[ @ 0]]
			f15_arg0.xpNeededText:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.xpNeededText ) --[[ @ 0]]
			f15_arg0.maxRankText:completeAnimation() --[[ @ 0]]
			f15_arg0.maxRankText:setAlpha( 0.3 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.maxRankText ) --[[ @ 0]]
		end
	},
	MaxParagonRank = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f16_arg0.xpNeededText:completeAnimation() --[[ @ 0]]
			f16_arg0.xpNeededText:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.xpNeededText ) --[[ @ 0]]
			f16_arg0.maxRankText:completeAnimation() --[[ @ 0]]
			f16_arg0.maxRankText:setAlpha( 0.3 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.maxRankText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARXpMeter.__onClose = function ( f17_arg0 )
	f17_arg0.CurrentLevel:close() --[[ @ 0]]
	f17_arg0.NextLevel:close() --[[ @ 0]]
	f17_arg0.EarnedXP:close() --[[ @ 0]]
	f17_arg0.PreviousXP:close() --[[ @ 0]]
end
 --[[ @ 0]]
