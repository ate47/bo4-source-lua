-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/director/directorselectbuttonlines" ) --[[ @ 0]]
require( "ui/uieditor/widgets/lobby/common/vodpreviewwidgetimage" ) --[[ @ 0]]
require( "ui/uieditor/widgets/lobby/common/vodpreviewwidgetvideo" ) --[[ @ 0]]

CoD.VoDPreviewWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.VoDPreviewWidget.__defaultWidth = 192 --[[ @ 0]]
CoD.VoDPreviewWidget.__defaultHeight = 108 --[[ @ 0]]
CoD.VoDPreviewWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.VoDPreviewWidget ) --[[ @ 0]]
	self.id = "VoDPreviewWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Frame = LUI.UIFrame.new( f1_arg0, f1_arg1, 0, 0, false ) --[[ @ 0]]
	Frame:setLeftRight( 0, 1, 4, -4 ) --[[ @ 0]]
	Frame:setTopBottom( 0, 1, 4, -4 ) --[[ @ 0]]
	Frame:changeFrameWidget( CoD.VoDPreviewWidgetImage ) --[[ @ 0]]
	Frame:linkToElementModel( self, nil, false, function ( model )
		Frame:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local Lines = CoD.DirectorSelectButtonLines.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Lines:setRGB( ColorSet.T8__SILVER.r, ColorSet.T8__SILVER.g, ColorSet.T8__SILVER.b ) --[[ @ 0]]
	self:addElement( Lines ) --[[ @ 0]]
	self.Lines = Lines --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NoMovie",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "lowResVideo.movieName" )
			end
		},
		{
			stateName = "NoFocus",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "lowResVideo.movieName", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lowResVideo.movieName"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Frame.id = "Frame" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.VoDPreviewWidget.__resetProperties = function ( f6_arg0 )
	f6_arg0.Frame:completeAnimation() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.VoDPreviewWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f7_arg0.Frame:completeAnimation() --[[ @ 0]]
			f7_arg0.Frame:changeFrameWidget( CoD.VoDPreviewWidgetImage ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.Frame ) --[[ @ 0]]
		end,
		Focus = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f8_arg0.Frame:completeAnimation() --[[ @ 0]]
			f8_arg0.Frame:changeFrameWidget( CoD.VoDPreviewWidgetVideo ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.Frame ) --[[ @ 0]]
		end
	},
	NoMovie = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f9_arg0.Frame:completeAnimation() --[[ @ 0]]
			f9_arg0.Frame:changeFrameWidget( CoD.VoDPreviewWidgetImage ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Frame ) --[[ @ 0]]
		end
	},
	NoFocus = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.Frame:completeAnimation() --[[ @ 0]]
			f10_arg0.Frame:changeFrameWidget( CoD.VoDPreviewWidgetImage ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Frame ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.VoDPreviewWidget.__onClose = function ( f11_arg0 )
	f11_arg0.Frame:close() --[[ @ 0]]
	f11_arg0.Lines:close() --[[ @ 0]]
end
 --[[ @ 0]]
