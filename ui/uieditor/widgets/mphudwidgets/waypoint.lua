-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/mphudwidgets/waypoint_textbg" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointarrowcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointcenter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointprogressbar" ) --[[ @ 0]]
require( "x64:576c14e1bc07cd98" ) --[[ @ 0]]

CoD.Waypoint = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Waypoint.__defaultWidth = 120 --[[ @ 0]]
CoD.Waypoint.__defaultHeight = 180 --[[ @ 0]]
CoD.Waypoint.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg1, "interactivePrompt.activeObjectiveID" ) --[[ @ 0]]
	self:setClass( CoD.Waypoint ) --[[ @ 0]]
	self.id = "Waypoint" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ProgressBarBGBlur = LUI.UIImage.new( 0.5, 0.5, -179, 179, 0.5, 0.5, 60, 80 ) --[[ @ 0]]
	ProgressBarBGBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ProgressBarBGBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ProgressBarBGBlur ) --[[ @ 0]]
	self.ProgressBarBGBlur = ProgressBarBGBlur --[[ @ 0]]
	
	local ProgressBarBGTint = LUI.UIImage.new( 0.5, 0.5, -181.5, 181.5, 0.5, 0.5, 60, 80 ) --[[ @ 0]]
	ProgressBarBGTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ProgressBarBGTint:setAlpha( 0.7 ) --[[ @ 0]]
	self:addElement( ProgressBarBGTint ) --[[ @ 0]]
	self.ProgressBarBGTint = ProgressBarBGTint --[[ @ 0]]
	
	local ProgressBar = CoD.WaypointProgressBar.new( f1_arg0, f1_arg1, 0.5, 0.5, -175, 175, 0.5, 0.5, 65, 75 ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, nil, false, function ( model )
		ProgressBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ProgressBar.ProgressBarBacking:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ProgressBar.ProgressBarWhite:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			ProgressBar.ProgressBarColor2:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ProgressBar.ProgressBarColor:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			ProgressBar.ProgressBarColoByFlags2:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f7_local0, 1 ), CoD.GetVectorComponentFromString( f7_local0, 2 ), CoD.GetVectorComponentFromString( f7_local0, 3 ), CoD.GetVectorComponentFromString( f7_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressBar ) --[[ @ 0]]
	self.ProgressBar = ProgressBar --[[ @ 0]]
	
	local WaypointArrowDownNotClampedContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f8_local0 --[[ @ 0]]
				if not ParentObjectivePropertyIsTrue( element, "hide_arrow" ) and not CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo( self, @"hash_50129B22B0CDE96B", 1 ) then
					f8_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" ) --[[ @ 0]]
				else
					f8_local0 = false --[[ @ 0]]
				end
				return f8_local0
			end
		}
	} ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "id", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowDownNotClampedContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
	self.WaypointArrowDownNotClampedContainer = WaypointArrowDownNotClampedContainer --[[ @ 0]]
	
	local WaypointArrowContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, "direction", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			WaypointArrowContainer:setZRot( Add( 90, f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowContainer ) --[[ @ 0]]
	self.WaypointArrowContainer = WaypointArrowContainer --[[ @ 0]]
	
	local WaypointText = CoD.Waypoint_TextBG.new( f1_arg0, f1_arg1, 0.5, 0.5, -60, 60, 0.5, 0.5, -85, -53 ) --[[ @ 0]]
	WaypointText:mergeStateConditions( {
		{
			stateName = "Contested",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsContested( f1_arg1, self )
			end
		},
		{
			stateName = "Protect",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsProtect( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "distanceText", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "distanceText"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "text", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, nil, false, function ( model )
		WaypointText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "text", true, function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			WaypointText.WaypointTextWithBG.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( f22_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "distanceText", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			WaypointText.DistanceTextWithBG.text:setText( LocalizeIntoStringIfNotEmpty( @"hash_37235825812D46C6", f23_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointText ) --[[ @ 0]]
	self.WaypointText = WaypointText --[[ @ 0]]
	
	local WaypointBacker = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointBacker:setRGB( 0.27, 0.27, 0.26 ) --[[ @ 0]]
	WaypointBacker:linkToElementModel( self, "waypointBacking01", true, function ( model )
		local f24_local0 = model:get() --[[ @ 0]]
		if f24_local0 ~= nil then
			WaypointBacker:setImage( RegisterImage( f24_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointBacker ) --[[ @ 0]]
	self.WaypointBacker = WaypointBacker --[[ @ 0]]
	
	local WaypointPattern = LUI.UIImage.new( 0.5, 0.5, -37, 39, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointPattern:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_led" ) ) --[[ @ 0]]
	WaypointPattern:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	WaypointPattern:setShaderVector( 0, 1.3, 0, 0, 0 ) --[[ @ 0]]
	WaypointPattern:linkToElementModel( self, "color", true, function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			WaypointPattern:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f25_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointPattern ) --[[ @ 0]]
	self.WaypointPattern = WaypointPattern --[[ @ 0]]
	
	local WaypointProgressMeterEmpty = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:setRGB( 1, 0.98, 0.91 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:linkToElementModel( self, "waypointBacking02", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			WaypointProgressMeterEmpty:setImage( RegisterImage( f26_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointProgressMeterEmpty ) --[[ @ 0]]
	self.WaypointProgressMeterEmpty = WaypointProgressMeterEmpty --[[ @ 0]]
	
	local WaypointProgressMeter = CoD.WaypointProgressRing.new( f1_arg0, f1_arg1, 0.5, 0.5, -35, 35, 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, nil, false, function ( model )
		WaypointProgressMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f28_local0 = model:get() --[[ @ 0]]
		if f28_local0 ~= nil then
			WaypointProgressMeter.progressMeter:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f28_local0, 1 ), CoD.GetVectorComponentFromString( f28_local0, 2 ), CoD.GetVectorComponentFromString( f28_local0, 3 ), CoD.GetVectorComponentFromString( f28_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f29_local0 = model:get() --[[ @ 0]]
		if f29_local0 ~= nil then
			WaypointProgressMeter.progressMeterColoredByUsing:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f29_local0, 1 ), CoD.GetVectorComponentFromString( f29_local0, 2 ), CoD.GetVectorComponentFromString( f29_local0, 3 ), CoD.GetVectorComponentFromString( f29_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			WaypointProgressMeter.progressMeterColoredByUsing2:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f30_local0, 1 ), CoD.GetVectorComponentFromString( f30_local0, 2 ), CoD.GetVectorComponentFromString( f30_local0, 3 ), CoD.GetVectorComponentFromString( f30_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= nil then
			WaypointProgressMeter.progressMeterColoredByUsing3:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f31_local0, 1 ), CoD.GetVectorComponentFromString( f31_local0, 2 ), CoD.GetVectorComponentFromString( f31_local0, 3 ), CoD.GetVectorComponentFromString( f31_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointProgressMeter ) --[[ @ 0]]
	self.WaypointProgressMeter = WaypointProgressMeter --[[ @ 0]]
	
	local WaypointCenterIcon2 = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -35, 41 ) --[[ @ 0]]
	WaypointCenterIcon2:setAlpha( 0.06 ) --[[ @ 0]]
	WaypointCenterIcon2:linkToElementModel( self, nil, false, function ( model )
		WaypointCenterIcon2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenterIcon2 ) --[[ @ 0]]
	self.WaypointCenterIcon2 = WaypointCenterIcon2 --[[ @ 0]]
	
	local WaypointCenterIcon = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( self, nil, false, function ( model )
		WaypointCenterIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenterIcon ) --[[ @ 0]]
	self.WaypointCenterIcon = WaypointCenterIcon --[[ @ 0]]
	
	local LED = LUI.UIImage.new( 0, 0, 73, 254, 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED:setAlpha( 0.18 ) --[[ @ 0]]
	LED:setScale( 0.94, 0.94 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_status" ) ) --[[ @ 0]]
	LED:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	LED:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	LED:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LED:setShaderVector( 2, 0.24, 0.67, 0, 0 ) --[[ @ 0]]
	LED:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	LED:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local LED2 = LUI.UIImage.new( 0, 0, -79, 102, 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	LED2:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED2:setAlpha( 0.18 ) --[[ @ 0]]
	LED2:setScale( 0.94, 0.94 ) --[[ @ 0]]
	LED2:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_status" ) ) --[[ @ 0]]
	LED2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	LED2:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	LED2:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LED2:setShaderVector( 2, 0.24, 0.67, 0, 0 ) --[[ @ 0]]
	LED2:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	LED2:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LED2 ) --[[ @ 0]]
	self.LED2 = LED2 --[[ @ 0]]
	
	local LED3 = LUI.UIImage.new( 0, 0, -231, -50, 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	LED3:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED3:setAlpha( 0.18 ) --[[ @ 0]]
	LED3:setScale( 0.94, 0.94 ) --[[ @ 0]]
	LED3:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_status" ) ) --[[ @ 0]]
	LED3:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	LED3:setShaderVector( 0, 0.63, 1, 0, 0 ) --[[ @ 0]]
	LED3:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LED3:setShaderVector( 2, 0.24, 0.67, 0, 0 ) --[[ @ 0]]
	LED3:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	LED3:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LED3 ) --[[ @ 0]]
	self.LED3 = LED3 --[[ @ 0]]
	
	local Cap = LUI.UIImage.new( 0, 0, -125.5, -106.5, 0, 0, 155, 165 ) --[[ @ 0]]
	Cap:setZRot( 90 ) --[[ @ 0]]
	Cap:setImage( RegisterImage( @"hash_7F3E81C52AE39D91" ) ) --[[ @ 0]]
	Cap:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Cap ) --[[ @ 0]]
	self.Cap = Cap --[[ @ 0]]
	
	local Cap2 = LUI.UIImage.new( 0, 0, 225.5, 244.5, 0, 0, 155, 165 ) --[[ @ 0]]
	Cap2:setZRot( 90 ) --[[ @ 0]]
	Cap2:setImage( RegisterImage( @"hash_7F3E81C52AE39D91" ) ) --[[ @ 0]]
	Cap2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Cap2 ) --[[ @ 0]]
	self.Cap2 = Cap2 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldHideWaypoint( element, f1_arg1 )
			end
		},
		{
			stateName = "NoIcon",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointIcon( f1_arg1, self )
			end
		},
		{
			stateName = "ProgressBar",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointFlatProgressBar( f1_arg1, self )
			end
		},
		{
			stateName = "NoFrame",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointFrame( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "team", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "team"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "teamMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "teamMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local18 = self --[[ @ 0]]
	local f1_local19 = self.subscribeToModel --[[ @ 0]]
	local f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["interactivePrompt.activeObjectiveID"], function ( f43_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f43_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["hudItems.hacked"], function ( f44_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f44_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.ref, function ( f45_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f45_arg0:get(),
			modelName = "ref"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = DataSources.LethalOffhands.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.activeIndex, function ( f46_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f46_arg0:get(),
			modelName = "activeIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.count, function ( f47_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f47_arg0:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.secondaryOffhand, function ( f48_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f48_arg0:get(),
			modelName = "secondaryOffhand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.secondaryOffhandCount, function ( f49_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f49_arg0:get(),
			modelName = "secondaryOffhandCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f50_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f50_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f51_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f51_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f52_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f52_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local18 = self --[[ @ 0]]
	f1_local19 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]], function ( f53_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f53_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "icon", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "icon"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "progress", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "progress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.WaypointUtility.ShowMessageOnCloseIfNeeded( f1_arg1, self ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local19 = self --[[ @ 0]]
	CoD.HUDUtility.UseHintTextForActiveButtonPromptText( self, f1_arg1 ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointText ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointCenter ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.Waypoint.__resetProperties = function ( f57_arg0 )
	f57_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
	f57_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
	f57_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
	f57_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
	f57_arg0.LED3:completeAnimation() --[[ @ 0]]
	f57_arg0.LED2:completeAnimation() --[[ @ 0]]
	f57_arg0.LED:completeAnimation() --[[ @ 0]]
	f57_arg0.Cap2:completeAnimation() --[[ @ 0]]
	f57_arg0.Cap:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointText:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
	f57_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f57_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f57_arg0.ProgressBar:setLeftRight( 0.5, 0.5, -175, 175 ) --[[ @ 0]]
	f57_arg0.ProgressBar:setTopBottom( 0.5, 0.5, 65, 75 ) --[[ @ 0]]
	f57_arg0.ProgressBar:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGBlur:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGBlur:setTopBottom( 0.5, 0.5, 60, 80 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGBlur:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGTint:setLeftRight( 0.5, 0.5, -181.5, 181.5 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGTint:setTopBottom( 0.5, 0.5, 60, 80 ) --[[ @ 0]]
	f57_arg0.ProgressBarBGTint:setAlpha( 0.7 ) --[[ @ 0]]
	f57_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.LED3:setTopBottom( 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	f57_arg0.LED3:setAlpha( 0.18 ) --[[ @ 0]]
	f57_arg0.LED2:setTopBottom( 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	f57_arg0.LED2:setAlpha( 0.18 ) --[[ @ 0]]
	f57_arg0.LED:setTopBottom( 0, 0, 141.5, 181.5 ) --[[ @ 0]]
	f57_arg0.LED:setAlpha( 0.18 ) --[[ @ 0]]
	f57_arg0.Cap2:setLeftRight( 0, 0, 225.5, 244.5 ) --[[ @ 0]]
	f57_arg0.Cap2:setTopBottom( 0, 0, 155, 165 ) --[[ @ 0]]
	f57_arg0.Cap2:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.Cap:setLeftRight( 0, 0, -125.5, -106.5 ) --[[ @ 0]]
	f57_arg0.Cap:setTopBottom( 0, 0, 155, 165 ) --[[ @ 0]]
	f57_arg0.Cap:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
	f57_arg0.WaypointText:setTopBottom( 0.5, 0.5, -85, -53 ) --[[ @ 0]]
	f57_arg0.WaypointText:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.WaypointCenterIcon2:setAlpha( 0.06 ) --[[ @ 0]]
	f57_arg0.WaypointProgressMeterEmpty:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.WaypointProgressMeter:setLeftRight( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	f57_arg0.WaypointProgressMeter:setTopBottom( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	f57_arg0.WaypointProgressMeter:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.WaypointCenterIcon:setAlpha( 1 ) --[[ @ 0]]
	f57_arg0.WaypointPattern:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Waypoint.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f58_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f58_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f58_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f58_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f58_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f58_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ProgressBar ) --[[ @ 0]]
			f58_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f58_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f58_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f58_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f58_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f58_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
			f58_arg0.WaypointText:setTopBottom( 0.5, 0.5, -85, -53 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WaypointText ) --[[ @ 0]]
			f58_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f58_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WaypointBacker ) --[[ @ 0]]
			f58_arg0.LED:completeAnimation() --[[ @ 0]]
			f58_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.LED ) --[[ @ 0]]
			f58_arg0.LED2:completeAnimation() --[[ @ 0]]
			f58_arg0.LED2:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.LED2 ) --[[ @ 0]]
			f58_arg0.LED3:completeAnimation() --[[ @ 0]]
			f58_arg0.LED3:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.LED3 ) --[[ @ 0]]
			f58_arg0.Cap:completeAnimation() --[[ @ 0]]
			f58_arg0.Cap:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.Cap ) --[[ @ 0]]
			f58_arg0.Cap2:completeAnimation() --[[ @ 0]]
			f58_arg0.Cap2:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.Cap2 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f59_arg0, f59_arg1 )
			f59_arg0:__resetProperties() --[[ @ 0]]
			f59_arg0:setupElementClipCounter( 17 ) --[[ @ 0]]
			f59_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f59_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f59_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f59_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f59_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f59_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ProgressBar ) --[[ @ 0]]
			f59_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f59_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f59_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointText:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointText ) --[[ @ 0]]
			f59_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointBacker ) --[[ @ 0]]
			f59_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointPattern ) --[[ @ 0]]
			f59_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f59_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f59_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f59_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f59_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f59_arg0.LED:completeAnimation() --[[ @ 0]]
			f59_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.LED ) --[[ @ 0]]
			f59_arg0.LED2:completeAnimation() --[[ @ 0]]
			f59_arg0.LED2:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.LED2 ) --[[ @ 0]]
			f59_arg0.LED3:completeAnimation() --[[ @ 0]]
			f59_arg0.LED3:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.LED3 ) --[[ @ 0]]
			f59_arg0.Cap:completeAnimation() --[[ @ 0]]
			f59_arg0.Cap:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.Cap ) --[[ @ 0]]
			f59_arg0.Cap2:completeAnimation() --[[ @ 0]]
			f59_arg0.Cap2:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.Cap2 ) --[[ @ 0]]
		end
	},
	NoIcon = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 17 ) --[[ @ 0]]
			f60_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f60_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f60_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f60_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f60_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f60_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ProgressBar ) --[[ @ 0]]
			f60_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f60_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f60_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
			f60_arg0.WaypointText:setTopBottom( 0.5, 0.5, -51, -19 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointText ) --[[ @ 0]]
			f60_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointBacker ) --[[ @ 0]]
			f60_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointPattern ) --[[ @ 0]]
			f60_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f60_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f60_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f60_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f60_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f60_arg0.LED:completeAnimation() --[[ @ 0]]
			f60_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.LED ) --[[ @ 0]]
			f60_arg0.LED2:completeAnimation() --[[ @ 0]]
			f60_arg0.LED2:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.LED2 ) --[[ @ 0]]
			f60_arg0.LED3:completeAnimation() --[[ @ 0]]
			f60_arg0.LED3:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.LED3 ) --[[ @ 0]]
			f60_arg0.Cap:completeAnimation() --[[ @ 0]]
			f60_arg0.Cap:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.Cap ) --[[ @ 0]]
			f60_arg0.Cap2:completeAnimation() --[[ @ 0]]
			f60_arg0.Cap2:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.Cap2 ) --[[ @ 0]]
		end
	},
	ProgressBar = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 17 ) --[[ @ 0]]
			f61_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f61_arg0.ProgressBarBGBlur:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
			f61_arg0.ProgressBarBGBlur:setTopBottom( 0.5, 0.5, -36, -16 ) --[[ @ 0]]
			f61_arg0.ProgressBarBGBlur:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f61_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f61_arg0.ProgressBarBGTint:setLeftRight( 0.5, 0.5, -181.5, 181.5 ) --[[ @ 0]]
			f61_arg0.ProgressBarBGTint:setTopBottom( 0.5, 0.5, -36, -16 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f61_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f61_arg0.ProgressBar:setLeftRight( 0.5, 0.5, -175, 175 ) --[[ @ 0]]
			f61_arg0.ProgressBar:setTopBottom( 0.5, 0.5, -31, -21 ) --[[ @ 0]]
			f61_arg0.ProgressBar:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ProgressBar ) --[[ @ 0]]
			f61_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f61_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f61_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointText:setLeftRight( 0.5, 0.5, -59, 61 ) --[[ @ 0]]
			f61_arg0.WaypointText:setTopBottom( 0.5, 0.5, -81, -49 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointText ) --[[ @ 0]]
			f61_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointBacker ) --[[ @ 0]]
			f61_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointPattern ) --[[ @ 0]]
			f61_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f61_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointProgressMeter:setLeftRight( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
			f61_arg0.WaypointProgressMeter:setTopBottom( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
			f61_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f61_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f61_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f61_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f61_arg0.LED:completeAnimation() --[[ @ 0]]
			f61_arg0.LED:setTopBottom( 0, 0, 45.5, 85.5 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LED ) --[[ @ 0]]
			f61_arg0.LED2:completeAnimation() --[[ @ 0]]
			f61_arg0.LED2:setTopBottom( 0, 0, 45.5, 85.5 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LED2 ) --[[ @ 0]]
			f61_arg0.LED3:completeAnimation() --[[ @ 0]]
			f61_arg0.LED3:setTopBottom( 0, 0, 45.5, 85.5 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LED3 ) --[[ @ 0]]
			f61_arg0.Cap:completeAnimation() --[[ @ 0]]
			f61_arg0.Cap:setLeftRight( 0, 0, -124.5, -107.5 ) --[[ @ 0]]
			f61_arg0.Cap:setTopBottom( 0, 0, 58, 70 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.Cap ) --[[ @ 0]]
			f61_arg0.Cap2:completeAnimation() --[[ @ 0]]
			f61_arg0.Cap2:setLeftRight( 0, 0, 226.5, 243.5 ) --[[ @ 0]]
			f61_arg0.Cap2:setTopBottom( 0, 0, 58, 70 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.Cap2 ) --[[ @ 0]]
		end
	},
	NoFrame = {
		DefaultClip = function ( f62_arg0, f62_arg1 )
			f62_arg0:__resetProperties() --[[ @ 0]]
			f62_arg0:setupElementClipCounter( 13 ) --[[ @ 0]]
			f62_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f62_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f62_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f62_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f62_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f62_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.ProgressBar ) --[[ @ 0]]
			f62_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f62_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f62_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f62_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f62_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f62_arg0.WaypointText:setTopBottom( 0.5, 0.5, -85, -53 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WaypointText ) --[[ @ 0]]
			f62_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f62_arg0.WaypointProgressMeterEmpty:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f62_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f62_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f62_arg0.LED:completeAnimation() --[[ @ 0]]
			f62_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LED ) --[[ @ 0]]
			f62_arg0.LED2:completeAnimation() --[[ @ 0]]
			f62_arg0.LED2:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LED2 ) --[[ @ 0]]
			f62_arg0.LED3:completeAnimation() --[[ @ 0]]
			f62_arg0.LED3:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LED3 ) --[[ @ 0]]
			f62_arg0.Cap:completeAnimation() --[[ @ 0]]
			f62_arg0.Cap:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.Cap ) --[[ @ 0]]
			f62_arg0.Cap2:completeAnimation() --[[ @ 0]]
			f62_arg0.Cap2:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.Cap2 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Waypoint.__onClose = function ( f63_arg0 )
	f63_arg0.ProgressBar:close() --[[ @ 0]]
	f63_arg0.WaypointArrowDownNotClampedContainer:close() --[[ @ 0]]
	f63_arg0.WaypointArrowContainer:close() --[[ @ 0]]
	f63_arg0.WaypointText:close() --[[ @ 0]]
	f63_arg0.WaypointBacker:close() --[[ @ 0]]
	f63_arg0.WaypointPattern:close() --[[ @ 0]]
	f63_arg0.WaypointProgressMeterEmpty:close() --[[ @ 0]]
	f63_arg0.WaypointProgressMeter:close() --[[ @ 0]]
	f63_arg0.WaypointCenterIcon2:close() --[[ @ 0]]
	f63_arg0.WaypointCenterIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
