-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/startgameflow/loadingscreenplayerstats" ) --[[ @ 0]]

CoD.LoadingScreenHeader = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.LoadingScreenHeader.__defaultWidth = 1129 --[[ @ 0]]
CoD.LoadingScreenHeader.__defaultHeight = 200 --[[ @ 0]]
CoD.LoadingScreenHeader.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.LoadingScreenHeader ) --[[ @ 0]]
	self.id = "LoadingScreenHeader" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TiledBackingTop = LUI.UIImage.new( 0.5, 0.5, -542.5, 48.5, 0, 0, 2, 200 ) --[[ @ 0]]
	TiledBackingTop:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBackingTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBackingTop:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBackingTop:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBackingTop ) --[[ @ 0]]
	self.TiledBackingTop = TiledBackingTop --[[ @ 0]]
	
	local TiledBackingTop2 = LUI.UIImage.new( 0.5, 0.5, -542.5, 48.5, 0, 0, 41, 91 ) --[[ @ 0]]
	TiledBackingTop2:setRGB( 0.11, 0.11, 0.11 ) --[[ @ 0]]
	TiledBackingTop2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBackingTop2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBackingTop2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBackingTop2:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBackingTop2 ) --[[ @ 0]]
	self.TiledBackingTop2 = TiledBackingTop2 --[[ @ 0]]
	
	local BACKINGMapName = LUI.UIImage.new( 0, 0, 22, 613, 0, 0, 2, 42 ) --[[ @ 0]]
	BACKINGMapName:setRGB( 0.04, 0.04, 0.04 ) --[[ @ 0]]
	BACKINGMapName:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( BACKINGMapName ) --[[ @ 0]]
	self.BACKINGMapName = BACKINGMapName --[[ @ 0]]
	
	local DiagonalLine = LUI.UIImage.new( 0, 0, 22, 613, 0, 0, 2, 42 ) --[[ @ 0]]
	DiagonalLine:setRGB( 0.25, 0.25, 0.25 ) --[[ @ 0]]
	DiagonalLine:setImage( RegisterImage( @"uie_ui_menu_common_repeat_stripe" ) ) --[[ @ 0]]
	DiagonalLine:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_tile_scroll_normal" ) ) --[[ @ 0]]
	DiagonalLine:setShaderVector( 0, 8, 1, 0, 0 ) --[[ @ 0]]
	DiagonalLine:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( DiagonalLine ) --[[ @ 0]]
	self.DiagonalLine = DiagonalLine --[[ @ 0]]
	
	local LoadingScreenPlayerStats = CoD.LoadingScreenPlayerStats.new( f1_arg0, f1_arg1, 0.5, 0.5, -426.5, 38.5, 0, 0, 122, 192 ) --[[ @ 0]]
	LoadingScreenPlayerStats:subscribeToGlobalModel( f1_arg1, "LoadingScreenTeamInfo", nil, function ( model )
		LoadingScreenPlayerStats:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( LoadingScreenPlayerStats ) --[[ @ 0]]
	self.LoadingScreenPlayerStats = LoadingScreenPlayerStats --[[ @ 0]]
	
	local GamemodeName = LUI.UIText.new( 0, 0, 133, 603, 0, 0, 53, 91 ) --[[ @ 0]]
	GamemodeName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	GamemodeName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	GamemodeName:setLetterSpacing( 5 ) --[[ @ 0]]
	GamemodeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	GamemodeName:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	GamemodeName:subscribeToGlobalModel( f1_arg1, "LoadingScreenTeamInfo", "gameType", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			GamemodeName:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GamemodeName ) --[[ @ 0]]
	self.GamemodeName = GamemodeName --[[ @ 0]]
	
	local MapNameShadow = LUI.UIText.new( 0.5, 0.5, -431.5, 528.5, 0, 0, 8, 38 ) --[[ @ 0]]
	MapNameShadow:setRGB( 0, 0, 0 ) --[[ @ 0]]
	MapNameShadow:setAlpha( 0.25 ) --[[ @ 0]]
	MapNameShadow:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapNameShadow:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	MapNameShadow:setShaderVector( 0, 0.4, 0, 0, 0 ) --[[ @ 0]]
	MapNameShadow:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	MapNameShadow:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	MapNameShadow:setLetterSpacing( 6 ) --[[ @ 0]]
	MapNameShadow:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MapNameShadow:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	MapNameShadow:subscribeToGlobalModel( f1_arg1, "LoadingScreenTeamInfo", "mapName", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			MapNameShadow:setText( ToUpper( CoD.BaseUtility.AlreadyLocalized( f4_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MapNameShadow ) --[[ @ 0]]
	self.MapNameShadow = MapNameShadow --[[ @ 0]]
	
	local MapName = LUI.UIText.new( 0, 0, 133, 603, 0, 0, 8, 38 ) --[[ @ 0]]
	MapName:setRGB( ColorSet.PlayerYellow.r, ColorSet.PlayerYellow.g, ColorSet.PlayerYellow.b ) --[[ @ 0]]
	MapName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapName:setLetterSpacing( 6 ) --[[ @ 0]]
	MapName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MapName:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	MapName:subscribeToGlobalModel( f1_arg1, "LoadingScreenTeamInfo", "mapName", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			MapName:setText( ToUpper( CoD.BaseUtility.AlreadyLocalized( f5_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MapName ) --[[ @ 0]]
	self.MapName = MapName --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "CodCaster",
			condition = function ( menu, element, event )
				return CoD.CodCasterUtility.IsCodCasterOrAssigned( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LoadingScreenHeader.__resetProperties = function ( f7_arg0 )
	f7_arg0.LoadingScreenPlayerStats:completeAnimation() --[[ @ 0]]
	f7_arg0.LoadingScreenPlayerStats:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.LoadingScreenHeader.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	CodCaster = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f9_arg0.LoadingScreenPlayerStats:completeAnimation() --[[ @ 0]]
			f9_arg0.LoadingScreenPlayerStats:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.LoadingScreenPlayerStats ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.LoadingScreenHeader.__onClose = function ( f10_arg0 )
	f10_arg0.LoadingScreenPlayerStats:close() --[[ @ 0]]
	f10_arg0.GamemodeName:close() --[[ @ 0]]
	f10_arg0.MapNameShadow:close() --[[ @ 0]]
	f10_arg0.MapName:close() --[[ @ 0]]
end
 --[[ @ 0]]
