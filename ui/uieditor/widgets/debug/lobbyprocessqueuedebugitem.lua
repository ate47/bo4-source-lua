-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/debug/lobbyprocessqueuedebugitemtext" ) --[[ @ 0]]

CoD.LobbyProcessQueueDebugItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.__defaultWidth = 1119 --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.__defaultHeight = 20 --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.LobbyProcessQueueDebugItem ) --[[ @ 0]]
	self.id = "LobbyProcessQueueDebugItem" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Background:setAlpha( 0.7 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local LobbyProcessQueueDebugItemText = CoD.LobbyProcessQueueDebugItemText.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 4.7, 0, 0 ) --[[ @ 0]]
	self:addElement( LobbyProcessQueueDebugItemText ) --[[ @ 0]]
	self.LobbyProcessQueueDebugItemText = LobbyProcessQueueDebugItemText --[[ @ 0]]
	
	self.LobbyProcessQueueDebugItemText:linkToElementModel( self, nil, false, function ( model )
		LobbyProcessQueueDebugItemText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self.LobbyProcessQueueDebugItemText:linkToElementModel( self, "processName", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			LobbyProcessQueueDebugItemText.Name:setText( CoD.BaseUtility.AlreadyLocalized( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Process",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "process" )
			end
		},
		{
			stateName = "Action",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "action" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "type", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "type"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.__resetProperties = function ( f7_arg0 )
	f7_arg0.Background:completeAnimation() --[[ @ 0]]
	f7_arg0.Background:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f7_arg0.Background:setAlpha( 0.7 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Process = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f9_arg0.Background:completeAnimation() --[[ @ 0]]
			f9_arg0.Background:setRGB( 0, 0.04, 0.43 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Background ) --[[ @ 0]]
		end
	},
	Action = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.Background:completeAnimation() --[[ @ 0]]
			f10_arg0.Background:setAlpha( 0.7 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Background ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.LobbyProcessQueueDebugItem.__onClose = function ( f11_arg0 )
	f11_arg0.LobbyProcessQueueDebugItemText:close() --[[ @ 0]]
end
 --[[ @ 0]]
