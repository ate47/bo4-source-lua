-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]

CoD.vhud_ButtonPrompt_Minimal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.__defaultWidth = 175 --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.__defaultHeight = 50 --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_ButtonPrompt_Minimal ) --[[ @ 0]]
	self.id = "vhud_ButtonPrompt_Minimal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local prompt = LUI.UIText.new( 0, 0, 58, 358, 0, 0, 16.5, 33.5 ) --[[ @ 0]]
	prompt:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	prompt:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_3B0AEA8900F97CFB" ) ) --[[ @ 0]]
	prompt:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	prompt:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	prompt:setShaderVector( 2, 0.6, 0, 0, 0 ) --[[ @ 0]]
	prompt:setLetterSpacing( 0.5 ) --[[ @ 0]]
	prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	prompt:linkToElementModel( self, "text", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( prompt ) --[[ @ 0]]
	self.prompt = prompt --[[ @ 0]]
	
	local button = LUI.UIImage.new( 0.5, 0.5, -20, 20, 0.5, 0.5, -21, 15 ) --[[ @ 0]]
	button:setScale( 0.65, 0.65 ) --[[ @ 0]]
	self:addElement( button ) --[[ @ 0]]
	self.button = button --[[ @ 0]]
	
	local bind = LUI.UIText.new( 0.5, 0.5, -75, -35, 0.5, 0.5, -23, 13 ) --[[ @ 0]]
	bind:setTTF( "default" ) --[[ @ 0]]
	bind:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	bind:linkToElementModel( self, "bind", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			bind:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( bind ) --[[ @ 0]]
	self.bind = bind --[[ @ 0]]
	
	local triangle = LUI.UIImage.new( 0.5, 0.5, -32, 32, 0, 0, -14, 50 ) --[[ @ 0]]
	triangle:setRGB( 0.62, 0.61, 0.61 ) --[[ @ 0]]
	triangle:setScale( 0.15, 0.15 ) --[[ @ 0]]
	triangle:setImage( RegisterImage( @"uie_ui_menu_draft_triangle" ) ) --[[ @ 0]]
	self:addElement( triangle ) --[[ @ 0]]
	self.triangle = triangle --[[ @ 0]]
	
	local ControllerDependentTextBox = nil --[[ @ 0]]
	
	ControllerDependentTextBox = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0, 0, 32, 121, 0, 0, -25.5, -3.5 ) --[[ @ 0]]
	ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setText( "" ) --[[ @ 0]]
	ControllerDependentTextBox:linkToElementModel( self, "bind", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ControllerDependentTextBox.KBMText:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ControllerDependentTextBox ) --[[ @ 0]]
	self.ControllerDependentTextBox = ControllerDependentTextBox --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NotInUse",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "text" ) then
					f5_local0 = not IsPC() --[[ @ 0]]
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		},
		{
			stateName = "Codcaster",
			condition = function ( menu, element, event )
				return IsCodCaster( f1_arg1 )
			end
		},
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		},
		{
			stateName = "CoolingDownHideButton",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "bind" ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = CoD.ModelUtility.IsSelfModelPathValueLessThan( element, f1_arg1, "cooldown->cooldown", 1 ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = not IsPC() --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "hideButtonImage",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "bind" ) and not IsPC()
			end
		},
		{
			stateName = "CoolingDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueLessThan( element, f1_arg1, "cooldown->cooldown", 1 ) and not IsPC()
			end
		},
		{
			stateName = "HideTriangle",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ChooseClassPCGamepad",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "text", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["factions.isCoDCaster"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "bind", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "cooldown", true, function ( model )
		if self["__stateValidation_cooldown->cooldown"] then
			self:removeSubscription( self["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			self["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f16_local0 = model:get() --[[ @ 0]]
			local f16_local1 = model:get() --[[ @ 0]]
			model = f16_local0 and f16_local1.cooldown --[[ @ 0]]
		end
		if model then
			self["__stateValidation_cooldown->cooldown"] = self:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( self, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local7 = self --[[ @ 0]]
	f1_local7 = bind --[[ @ 0]]
	if IsPC() then
		ReplaceElementWithFake( self, "bind" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.__resetProperties = function ( f18_arg0 )
	f18_arg0.triangle:completeAnimation() --[[ @ 0]]
	f18_arg0.button:completeAnimation() --[[ @ 0]]
	f18_arg0.prompt:completeAnimation() --[[ @ 0]]
	f18_arg0.bind:completeAnimation() --[[ @ 0]]
	f18_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
	f18_arg0.triangle:setTopBottom( 0, 0, -14, 50 ) --[[ @ 0]]
	f18_arg0.triangle:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.button:setLeftRight( 0.5, 0.5, -20, 20 ) --[[ @ 0]]
	f18_arg0.button:setTopBottom( 0.5, 0.5, -21, 15 ) --[[ @ 0]]
	f18_arg0.button:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f18_arg0.button:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.prompt:setLeftRight( 0, 0, 58, 358 ) --[[ @ 0]]
	f18_arg0.prompt:setTopBottom( 0, 0, 16.5, 33.5 ) --[[ @ 0]]
	f18_arg0.prompt:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f18_arg0.prompt:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	f18_arg0.bind:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f18_arg0.bind:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f19_arg0.prompt:completeAnimation() --[[ @ 0]]
			f19_arg0.prompt:setLeftRight( 0.5, 0.5, -16, 284 ) --[[ @ 0]]
			f19_arg0.prompt:setTopBottom( 0.5, 0.5, -11.5, 5.5 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.prompt ) --[[ @ 0]]
			f19_arg0.button:completeAnimation() --[[ @ 0]]
			f19_arg0.button:setLeftRight( 0.5, 0.5, -55, -15 ) --[[ @ 0]]
			f19_arg0.button:setTopBottom( 0.5, 0.5, -23, 17 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.button ) --[[ @ 0]]
			f19_arg0.triangle:completeAnimation() --[[ @ 0]]
			f19_arg0.triangle:setTopBottom( 0, 0, 4, 68 ) --[[ @ 0]]
			f19_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.triangle ) --[[ @ 0]]
		end
	},
	NotInUse = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f20_arg0.prompt:completeAnimation() --[[ @ 0]]
			f20_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.prompt ) --[[ @ 0]]
			f20_arg0.button:completeAnimation() --[[ @ 0]]
			f20_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.button ) --[[ @ 0]]
			f20_arg0.bind:completeAnimation() --[[ @ 0]]
			f20_arg0.bind:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.bind ) --[[ @ 0]]
			f20_arg0.triangle:completeAnimation() --[[ @ 0]]
			f20_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.triangle ) --[[ @ 0]]
			f20_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f20_arg0.ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	},
	Codcaster = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f21_arg0.prompt:completeAnimation() --[[ @ 0]]
			f21_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.prompt ) --[[ @ 0]]
			f21_arg0.button:completeAnimation() --[[ @ 0]]
			f21_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.button ) --[[ @ 0]]
			f21_arg0.bind:completeAnimation() --[[ @ 0]]
			f21_arg0.bind:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.bind ) --[[ @ 0]]
			f21_arg0.triangle:completeAnimation() --[[ @ 0]]
			f21_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.triangle ) --[[ @ 0]]
			f21_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f21_arg0.ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f22_arg0.prompt:completeAnimation() --[[ @ 0]]
			f22_arg0.prompt:setLeftRight( 0.5, 0.5, -87, 87 ) --[[ @ 0]]
			f22_arg0.prompt:setTopBottom( 0.5, 0.5, -5.5, 11.5 ) --[[ @ 0]]
			f22_arg0.prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.prompt ) --[[ @ 0]]
			f22_arg0.button:completeAnimation() --[[ @ 0]]
			f22_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.button ) --[[ @ 0]]
			f22_arg0.bind:completeAnimation() --[[ @ 0]]
			f22_arg0.bind:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.bind ) --[[ @ 0]]
			f22_arg0.triangle:completeAnimation() --[[ @ 0]]
			f22_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.triangle ) --[[ @ 0]]
			f22_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f22_arg0.ControllerDependentTextBox:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	},
	CoolingDownHideButton = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f23_arg0.prompt:completeAnimation() --[[ @ 0]]
			f23_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.prompt ) --[[ @ 0]]
			f23_arg0.button:completeAnimation() --[[ @ 0]]
			f23_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.button ) --[[ @ 0]]
			f23_arg0.bind:completeAnimation() --[[ @ 0]]
			f23_arg0.bind:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.bind ) --[[ @ 0]]
			f23_arg0.triangle:completeAnimation() --[[ @ 0]]
			f23_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.triangle ) --[[ @ 0]]
		end
	},
	hideButtonImage = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f24_arg0.button:completeAnimation() --[[ @ 0]]
			f24_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.button ) --[[ @ 0]]
			f24_arg0.triangle:completeAnimation() --[[ @ 0]]
			f24_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.triangle ) --[[ @ 0]]
		end
	},
	CoolingDown = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f25_arg0.prompt:completeAnimation() --[[ @ 0]]
			f25_arg0.prompt:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.prompt ) --[[ @ 0]]
			f25_arg0.button:completeAnimation() --[[ @ 0]]
			f25_arg0.button:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.button ) --[[ @ 0]]
			f25_arg0.bind:completeAnimation() --[[ @ 0]]
			f25_arg0.bind:setRGB( 0.4, 0.4, 0.4 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.bind ) --[[ @ 0]]
			f25_arg0.triangle:completeAnimation() --[[ @ 0]]
			f25_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.triangle ) --[[ @ 0]]
		end
	},
	HideTriangle = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f26_arg0.prompt:completeAnimation() --[[ @ 0]]
			f26_arg0.prompt:setLeftRight( 0.5, 0.5, -16, 284 ) --[[ @ 0]]
			f26_arg0.prompt:setTopBottom( 0.5, 0.5, -11.5, 5.5 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.prompt ) --[[ @ 0]]
			f26_arg0.button:completeAnimation() --[[ @ 0]]
			f26_arg0.button:setLeftRight( 0.5, 0.5, -55, -15 ) --[[ @ 0]]
			f26_arg0.button:setTopBottom( 0.5, 0.5, -23, 17 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.button ) --[[ @ 0]]
			f26_arg0.triangle:completeAnimation() --[[ @ 0]]
			f26_arg0.triangle:setTopBottom( 0, 0, 4, 68 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.triangle ) --[[ @ 0]]
		end
	},
	ChooseClassPCGamepad = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f27_arg0.prompt:completeAnimation() --[[ @ 0]]
			f27_arg0.prompt:setLeftRight( 0.5, 0.5, -16, 284 ) --[[ @ 0]]
			f27_arg0.prompt:setTopBottom( 0.5, 0.5, -11.5, 5.5 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.prompt ) --[[ @ 0]]
			f27_arg0.button:completeAnimation() --[[ @ 0]]
			f27_arg0.button:setLeftRight( 0.5, 0.5, -55, -15 ) --[[ @ 0]]
			f27_arg0.button:setTopBottom( 0.5, 0.5, -23, 17 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.button ) --[[ @ 0]]
			f27_arg0.triangle:completeAnimation() --[[ @ 0]]
			f27_arg0.triangle:setTopBottom( 0, 0, 4, 68 ) --[[ @ 0]]
			f27_arg0.triangle:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.triangle ) --[[ @ 0]]
			f27_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f27_arg0.ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.vhud_ButtonPrompt_Minimal.__onClose = function ( f28_arg0 )
	f28_arg0.prompt:close() --[[ @ 0]]
	f28_arg0.bind:close() --[[ @ 0]]
	f28_arg0.ControllerDependentTextBox:close() --[[ @ 0]]
end
 --[[ @ 0]]
