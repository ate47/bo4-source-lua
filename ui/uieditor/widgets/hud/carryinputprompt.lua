-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/cphudwidgets/waypointcentercp" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/buttonprompt3dcpzm_usebuttonicon" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypoint_textwithbg" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointarrowcontainer" ) --[[ @ 0]]

CoD.CarryInputPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CarryInputPrompt.__defaultWidth = 72 --[[ @ 0]]
CoD.CarryInputPrompt.__defaultHeight = 72 --[[ @ 0]]
CoD.CarryInputPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg1, "interactivePrompt.activeObjectiveID" ) --[[ @ 0]]
	self:setClass( CoD.CarryInputPrompt ) --[[ @ 0]]
	self.id = "CarryInputPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonPromptText = CoD.Waypoint_TextWithBG.new( f1_arg0, f1_arg1, 0.5, 0.5, -120, 120, 0, 0, -38, 0 ) --[[ @ 0]]
	ButtonPromptText:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo( self, @"hash_1BB6EE6EB270DC8", nil )
			end
		}
	} ) --[[ @ 0]]
	ButtonPromptText:linkToElementModel( ButtonPromptText, "id", true, function ( model )
		f1_arg0:updateElementState( ButtonPromptText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonPromptText:setAlpha( 0 ) --[[ @ 0]]
	ButtonPromptText:linkToElementModel( self, "id", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ButtonPromptText.text:setText( ConvertToUpperString( LocalizeWithKeyBinding( f1_arg1, "+activate", GetObjectiveProperty( "buttonPromptText", f4_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ButtonPromptText ) --[[ @ 0]]
	self.ButtonPromptText = ButtonPromptText --[[ @ 0]]
	
	local ButtonPrompt = CoD.ButtonPrompt3dcpzm_UseButtonIcon.new( f1_arg0, f1_arg1, 0, 0, 7, 65, 0, 0, 7, 65 ) --[[ @ 0]]
	ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
	ButtonPrompt:linkToElementModel( self, nil, false, function ( model )
		ButtonPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ButtonPrompt ) --[[ @ 0]]
	self.ButtonPrompt = ButtonPrompt --[[ @ 0]]
	
	local ObjectiveWaypointText = CoD.Waypoint_TextWithBG.new( f1_arg0, f1_arg1, 0.5, 0.5, -120, 120, 0, 0, -38, 0 ) --[[ @ 0]]
	ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
	ObjectiveWaypointText:linkToElementModel( self, nil, false, function ( model )
		ObjectiveWaypointText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ObjectiveWaypointText:linkToElementModel( self, "text", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			ObjectiveWaypointText.text:setText( LocalizeToUpperString( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ObjectiveWaypointText ) --[[ @ 0]]
	self.ObjectiveWaypointText = ObjectiveWaypointText --[[ @ 0]]
	
	local IconImage = CoD.WaypointCenterCP.new( f1_arg0, f1_arg1, 0, 0, 6, 66, 0, 0, 6, 66 ) --[[ @ 0]]
	IconImage:setRGB( 0.93, 0.91, 0.8 ) --[[ @ 0]]
	IconImage:linkToElementModel( self, nil, false, function ( model )
		IconImage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( IconImage ) --[[ @ 0]]
	self.IconImage = IconImage --[[ @ 0]]
	
	local DirectionalArrow = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0, 0, 13, 56, 0, 0, 13, 59 ) --[[ @ 0]]
	DirectionalArrow:linkToElementModel( self, "direction", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			DirectionalArrow:setZRot( Add( 90, f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DirectionalArrow:linkToElementModel( self, nil, false, function ( model )
		DirectionalArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectionalArrow ) --[[ @ 0]]
	self.DirectionalArrow = DirectionalArrow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldHideWaypoint( element, f1_arg1 )
			end
		},
		{
			stateName = "Clamped",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" ) and CoD.WaypointUtility.IsObjectiveRequirementLabelHidden( element, f1_arg1 )
			end
		},
		{
			stateName = "HideRequirementLabel",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.IsObjectiveRequirementLabelHidden( element, f1_arg1 )
			end
		},
		{
			stateName = "ClampedInteractable",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		},
		{
			stateName = "OffscreenInteractable",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isOffscreen" ) and CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo( self, @"hash_44AC803636BB2F2", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "team", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "team"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "teamMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "teamMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["interactivePrompt.activeObjectiveID"], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.hacked"], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.ref, function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "ref"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.LethalOffhands.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.activeIndex, function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "activeIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.count, function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.secondaryOffhand, function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "secondaryOffhand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.secondaryOffhandCount, function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "secondaryOffhandCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]], function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]], function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]], function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "clamped", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f34_arg2, f34_arg3, f34_arg4 )
		if IsElementInState( element, "DefaultState" ) then
			SetElementStateByElementName( self, "nameLabel", controller, "Small" ) --[[ @ 0]]
		else
			SetElementStateByElementName( self, "nameLabel", controller, "DefaultState" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CarryInputPrompt.__resetProperties = function ( f35_arg0 )
	f35_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
	f35_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
	f35_arg0.IconImage:completeAnimation() --[[ @ 0]]
	f35_arg0.ButtonPromptText:completeAnimation() --[[ @ 0]]
	f35_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
	f35_arg0.DirectionalArrow:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.ButtonPrompt:setLeftRight( 0, 0, 7, 65 ) --[[ @ 0]]
	f35_arg0.ButtonPrompt:setTopBottom( 0, 0, 7, 65 ) --[[ @ 0]]
	f35_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.ButtonPromptText:setLeftRight( 0.5, 0.5, -120, 120 ) --[[ @ 0]]
	f35_arg0.ButtonPromptText:setTopBottom( 0, 0, -38, 0 ) --[[ @ 0]]
	f35_arg0.ButtonPromptText:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.ButtonPromptText.text:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	f35_arg0.ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CarryInputPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f36_arg0.ButtonPromptText:completeAnimation() --[[ @ 0]]
			f36_arg0.ButtonPromptText:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.ButtonPromptText ) --[[ @ 0]]
			f36_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f36_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.ButtonPrompt ) --[[ @ 0]]
			f36_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f36_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.IconImage ) --[[ @ 0]]
			f36_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f36_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.DirectionalArrow ) --[[ @ 0]]
		end,
		HideRequirementLabel = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f37_local0 = function ( f38_arg0 )
				f37_arg0.ButtonPrompt:beginAnimation( 70 ) --[[ @ 0]]
				f37_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
				f37_arg0.ButtonPrompt:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.ButtonPrompt:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f37_arg0.ButtonPrompt:setLeftRight( 0, 0, 7, 65 ) --[[ @ 0]]
			f37_arg0.ButtonPrompt:setTopBottom( 0, 0, 7, 65 ) --[[ @ 0]]
			f37_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
			f37_local0( f37_arg0.ButtonPrompt ) --[[ @ 0]]
			local f37_local1 = function ( f39_arg0 )
				f37_arg0.ObjectiveWaypointText:beginAnimation( 70 ) --[[ @ 0]]
				f37_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
				f37_arg0.ObjectiveWaypointText:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.ObjectiveWaypointText:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f37_arg0.ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
			f37_local1( f37_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			local f37_local2 = function ( f40_arg0 )
				f37_arg0.IconImage:beginAnimation( 70 ) --[[ @ 0]]
				f37_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
				f37_arg0.IconImage:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.IconImage:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f37_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
			f37_local2( f37_arg0.IconImage ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f41_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f41_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.IconImage ) --[[ @ 0]]
			f41_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f41_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.DirectionalArrow ) --[[ @ 0]]
		end,
		HideRequirementLabel = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f42_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f42_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			local f42_local0 = function ( f43_arg0 )
				f42_arg0.IconImage:beginAnimation( 200 ) --[[ @ 0]]
				f42_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
				f42_arg0.IconImage:registerEventHandler( "interrupted_keyframe", f42_arg0.clipInterrupted ) --[[ @ 0]]
				f42_arg0.IconImage:registerEventHandler( "transition_complete_keyframe", f42_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f42_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f42_arg0.IconImage:setAlpha( 0.85 ) --[[ @ 0]]
			f42_local0( f42_arg0.IconImage ) --[[ @ 0]]
		end
	},
	Clamped = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		ClampedInteractable = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f45_arg0.ButtonPromptText:beginAnimation( 220 ) --[[ @ 0]]
			f45_arg0.ButtonPromptText:setAlpha( 0.01 ) --[[ @ 0]]
			f45_arg0.ButtonPromptText:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
			f45_arg0.ButtonPromptText:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
			local f45_local0 = function ( f46_arg0 )
				f45_arg0.ButtonPrompt:beginAnimation( 250 ) --[[ @ 0]]
				f45_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
				f45_arg0.ButtonPrompt:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
				f45_arg0.ButtonPrompt:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f45_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f45_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
			f45_local0( f45_arg0.ButtonPrompt ) --[[ @ 0]]
			local f45_local1 = function ( f47_arg0 )
				f45_arg0.ObjectiveWaypointText:beginAnimation( 220 ) --[[ @ 0]]
				f45_arg0.ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
				f45_arg0.ObjectiveWaypointText:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
				f45_arg0.ObjectiveWaypointText:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f45_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f45_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f45_local1( f45_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			local f45_local2 = function ( f48_arg0 )
				f45_arg0.IconImage:beginAnimation( 250 ) --[[ @ 0]]
				f45_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
				f45_arg0.IconImage:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
				f45_arg0.IconImage:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f45_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f45_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
			f45_local2( f45_arg0.IconImage ) --[[ @ 0]]
		end
	},
	HideRequirementLabel = {
		DefaultClip = function ( f49_arg0, f49_arg1 )
			f49_arg0:__resetProperties() --[[ @ 0]]
			f49_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f49_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f49_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			f49_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f49_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.DirectionalArrow ) --[[ @ 0]]
		end,
		Hidden = function ( f50_arg0, f50_arg1 )
			f50_arg0:__resetProperties() --[[ @ 0]]
			f50_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f50_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f50_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			f50_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f50_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.DirectionalArrow ) --[[ @ 0]]
		end,
		DefaultState = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f51_local0 = function ( f52_arg0 )
				f51_arg0.ButtonPromptText:beginAnimation( 250 ) --[[ @ 0]]
				f51_arg0.ButtonPromptText:setAlpha( 1 ) --[[ @ 0]]
				f51_arg0.ButtonPromptText:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.ButtonPromptText:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.ButtonPromptText:completeAnimation() --[[ @ 0]]
			f51_arg0.ButtonPromptText:setAlpha( 0.01 ) --[[ @ 0]]
			f51_local0( f51_arg0.ButtonPromptText ) --[[ @ 0]]
			local f51_local1 = function ( f53_arg0 )
				f51_arg0.ButtonPrompt:beginAnimation( 250 ) --[[ @ 0]]
				f51_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
				f51_arg0.ButtonPrompt:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.ButtonPrompt:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f51_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
			f51_local1( f51_arg0.ButtonPrompt ) --[[ @ 0]]
			local f51_local2 = function ( f54_arg0 )
				f51_arg0.ObjectiveWaypointText:beginAnimation( 250 ) --[[ @ 0]]
				f51_arg0.ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
				f51_arg0.ObjectiveWaypointText:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.ObjectiveWaypointText:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f51_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f51_local2( f51_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			local f51_local3 = function ( f55_arg0 )
				f51_arg0.IconImage:beginAnimation( 250 ) --[[ @ 0]]
				f51_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
				f51_arg0.IconImage:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.IconImage:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f51_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
			f51_local3( f51_arg0.IconImage ) --[[ @ 0]]
			f51_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f51_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.DirectionalArrow ) --[[ @ 0]]
		end,
		ClampedInteractable = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f56_arg0.ButtonPromptText:beginAnimation( 200 ) --[[ @ 0]]
			f56_arg0.ButtonPromptText:setAlpha( 0.01 ) --[[ @ 0]]
			f56_arg0.ButtonPromptText:registerEventHandler( "interrupted_keyframe", f56_arg0.clipInterrupted ) --[[ @ 0]]
			f56_arg0.ButtonPromptText:registerEventHandler( "transition_complete_keyframe", f56_arg0.clipFinished ) --[[ @ 0]]
			local f56_local0 = function ( f57_arg0 )
				f56_arg0.ButtonPrompt:beginAnimation( 250 ) --[[ @ 0]]
				f56_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
				f56_arg0.ButtonPrompt:registerEventHandler( "interrupted_keyframe", f56_arg0.clipInterrupted ) --[[ @ 0]]
				f56_arg0.ButtonPrompt:registerEventHandler( "transition_complete_keyframe", f56_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f56_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f56_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
			f56_local0( f56_arg0.ButtonPrompt ) --[[ @ 0]]
			local f56_local1 = function ( f58_arg0 )
				f56_arg0.ObjectiveWaypointText:beginAnimation( 200 ) --[[ @ 0]]
				f56_arg0.ObjectiveWaypointText:setAlpha( 0 ) --[[ @ 0]]
				f56_arg0.ObjectiveWaypointText:registerEventHandler( "interrupted_keyframe", f56_arg0.clipInterrupted ) --[[ @ 0]]
				f56_arg0.ObjectiveWaypointText:registerEventHandler( "transition_complete_keyframe", f56_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f56_arg0.ObjectiveWaypointText:completeAnimation() --[[ @ 0]]
			f56_arg0.ObjectiveWaypointText:setAlpha( 1 ) --[[ @ 0]]
			f56_local1( f56_arg0.ObjectiveWaypointText ) --[[ @ 0]]
			local f56_local2 = function ( f59_arg0 )
				f56_arg0.IconImage:beginAnimation( 250 ) --[[ @ 0]]
				f56_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
				f56_arg0.IconImage:registerEventHandler( "interrupted_keyframe", f56_arg0.clipInterrupted ) --[[ @ 0]]
				f56_arg0.IconImage:registerEventHandler( "transition_complete_keyframe", f56_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f56_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f56_arg0.IconImage:setAlpha( 1 ) --[[ @ 0]]
			f56_local2( f56_arg0.IconImage ) --[[ @ 0]]
		end
	},
	ClampedInteractable = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f60_arg0.ButtonPromptText:completeAnimation() --[[ @ 0]]
			f60_arg0.ButtonPromptText:setAlpha( 1 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ButtonPromptText ) --[[ @ 0]]
			f60_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f60_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ButtonPrompt ) --[[ @ 0]]
			f60_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f60_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.IconImage ) --[[ @ 0]]
		end,
		Hidden = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f61_arg0.DirectionalArrow:completeAnimation() --[[ @ 0]]
			f61_arg0.DirectionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.DirectionalArrow ) --[[ @ 0]]
		end
	},
	OffscreenInteractable = {
		DefaultClip = function ( f62_arg0, f62_arg1 )
			f62_arg0:__resetProperties() --[[ @ 0]]
			f62_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f62_arg0.ButtonPromptText:completeAnimation() --[[ @ 0]]
			f62_arg0.ButtonPromptText.text:completeAnimation() --[[ @ 0]]
			f62_arg0.ButtonPromptText:setLeftRight( 0, 0, 135, 335 ) --[[ @ 0]]
			f62_arg0.ButtonPromptText:setTopBottom( 0, 0, 21, 51 ) --[[ @ 0]]
			f62_arg0.ButtonPromptText:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.ButtonPromptText.text:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.ButtonPromptText ) --[[ @ 0]]
			f62_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f62_arg0.ButtonPrompt:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.ButtonPrompt ) --[[ @ 0]]
			f62_arg0.IconImage:completeAnimation() --[[ @ 0]]
			f62_arg0.IconImage:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.IconImage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CarryInputPrompt.__onClose = function ( f63_arg0 )
	f63_arg0.ButtonPromptText:close() --[[ @ 0]]
	f63_arg0.ButtonPrompt:close() --[[ @ 0]]
	f63_arg0.ObjectiveWaypointText:close() --[[ @ 0]]
	f63_arg0.IconImage:close() --[[ @ 0]]
	f63_arg0.DirectionalArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
