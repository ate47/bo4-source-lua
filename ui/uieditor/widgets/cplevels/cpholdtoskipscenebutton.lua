-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
local PostLoadFunc = function ( self, controller, menu )
	self:registerEventHandler( "update_scene_skip_progress", function ( element )
		self.progressMeter:setShaderVector( 0, (Engine[@"CurrentGameTime"]() - self._progressStartTime) / (self._progressEndTime - self._progressStartTime), 0, 0, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( menu, "sceneSkipEndTime", true, function ( model )
		local f3_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
		if f3_local0 == 0 then
			if self._sceneSkipUpdateTimer then
				self._sceneSkipUpdateTimer:close() --[[ @ 0]]
				self._sceneSkipUpdateTimer = nil --[[ @ 0]]
			end
			self.progressMeter:setShaderVector( 0, -0.05, 0, 0, 0 ) --[[ @ 0]]
		else
			self._progressStartTime = Engine[@"CurrentGameTime"]() --[[ @ 0]]
			self._progressEndTime = f3_local0 --[[ @ 0]]
			if not self._sceneSkipUpdateTimer then
				self._sceneSkipUpdateTimer = LUI.UITimer.new( 1, "update_scene_skip_progress", false ) --[[ @ 0]]
				self:addElement( self._sceneSkipUpdateTimer ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CPHoldToSkipSceneButton = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.__defaultWidth = 30 --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.__defaultHeight = 30 --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.new = function ( f4_arg0, f4_arg1, f4_arg2, f4_arg3, f4_arg4, f4_arg5, f4_arg6, f4_arg7, f4_arg8, f4_arg9 )
	local self = LUI.UIElement.new( f4_arg2, f4_arg3, f4_arg4, f4_arg5, f4_arg6, f4_arg7, f4_arg8, f4_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CPHoldToSkipSceneButton ) --[[ @ 0]]
	self.id = "CPHoldToSkipSceneButton" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f4_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local progressMeter = LUI.UIImage.new( 0.5, 0.5, -17, 17, 0.5, 0.5, -17, 17 ) --[[ @ 0]]
	progressMeter:setImage( RegisterImage( @"uie_t7_hud_interact_meter_thick" ) ) --[[ @ 0]]
	progressMeter:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	progressMeter:setShaderVector( 0, -0.05, 0, 0, 0 ) --[[ @ 0]]
	progressMeter:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	progressMeter:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	progressMeter:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	progressMeter:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( progressMeter ) --[[ @ 0]]
	self.progressMeter = progressMeter --[[ @ 0]]
	
	local Button = LUI.UIImage.new( 0.5, 0.5, -15, 15, 0.5, 0.5, -15, 15 ) --[[ @ 0]]
	Button:subscribeToGlobalModel( f4_arg1, "Controller", "primary_button_image", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Button:setImage( RegisterImage( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Button ) --[[ @ 0]]
	self.Button = Button --[[ @ 0]]
	
	local Mouse = nil --[[ @ 0]]
	
	Mouse = LUI.UIImage.new( 0.5, 0.5, -15, 15, 0.5, 0.5, -15, 15 ) --[[ @ 0]]
	Mouse:setAlpha( 0 ) --[[ @ 0]]
	Mouse:subscribeToGlobalModel( f4_arg1, "Controller", "mouse_left_button_image", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			Mouse:setImage( RegisterImage( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Mouse ) --[[ @ 0]]
	self.Mouse = Mouse --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KBMouse",
			condition = function ( menu, element, event )
				local f7_local0 --[[ @ 0]]
				if not IsGamepad( f4_arg1 ) then
					f7_local0 = IsPC() --[[ @ 0]]
				else
					f7_local0 = false --[[ @ 0]]
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f8_arg0, f8_arg1 )
		f8_arg1.menu = f8_arg1.menu or f4_arg0 --[[ @ 0]]
		f4_arg0:updateElementState( self, f8_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f4_local4 = self --[[ @ 0]]
	local f4_local5 = self.subscribeToModel --[[ @ 0]]
	local f4_local6 = Engine[@"GetModelForController"]( f4_arg1 ) --[[ @ 0]]
	f4_local5( f4_local4, f4_local6.LastInput, function ( f9_arg0 )
		f4_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f4_arg0,
			controller = f4_arg1,
			modelValue = f9_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f4_arg1, f4_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.__resetProperties = function ( f10_arg0 )
	f10_arg0.Button:completeAnimation() --[[ @ 0]]
	f10_arg0.Mouse:completeAnimation() --[[ @ 0]]
	f10_arg0.Button:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.Mouse:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBMouse = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f12_arg0.Button:completeAnimation() --[[ @ 0]]
			f12_arg0.Button:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Button ) --[[ @ 0]]
			f12_arg0.Mouse:completeAnimation() --[[ @ 0]]
			f12_arg0.Mouse:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Mouse ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CPHoldToSkipSceneButton.__onClose = function ( f13_arg0 )
	f13_arg0.Button:close() --[[ @ 0]]
	f13_arg0.Mouse:close() --[[ @ 0]]
end
 --[[ @ 0]]
