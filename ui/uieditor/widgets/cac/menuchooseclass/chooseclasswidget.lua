-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/cac/attachmentloadoutclasslistitem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/loadoutclassitem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/loadoutclassitemequipment" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/loadoutclassitemequipmenttaketwo" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/menuchooseclass/categoryheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/menuchooseclass/chooseclasslockedoverlay" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/specialistissueequipmentwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/talentloadoutlistitem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/wildcardloadoutlistitem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.ChooseClassWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ChooseClassWidget.__defaultWidth = 1920 --[[ @ 0]]
CoD.ChooseClassWidget.__defaultHeight = 1080 --[[ @ 0]]
CoD.ChooseClassWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg1, "WildcardMenuOpen", false ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg1, "CACHasSelection", false ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "CustomClassList.equippedItemsChanged", false ) --[[ @ 0]]
	self:setClass( CoD.ChooseClassWidget ) --[[ @ 0]]
	self.id = "ChooseClassWidget" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 146, 566 ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	local perk1Header = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 335, 460, 1, 1, -497, -481 ) --[[ @ 0]]
	perk1Header.header:setText( LocalizeToUpperString( @"mpui/perk1" ) ) --[[ @ 0]]
	perk1Header:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "talent1", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			perk1Header:setModel( f2_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( perk1Header ) --[[ @ 0]]
	self.perk1Header = perk1Header --[[ @ 0]]
	
	local perk2Header = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 455, 580, 1, 1, -497, -481 ) --[[ @ 0]]
	perk2Header.header:setText( LocalizeToUpperString( @"mpui/perk2" ) ) --[[ @ 0]]
	perk2Header:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "talent2", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			perk2Header:setModel( f3_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( perk2Header ) --[[ @ 0]]
	self.perk2Header = perk2Header --[[ @ 0]]
	
	local perk3Header = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 575, 700, 1, 1, -497, -481 ) --[[ @ 0]]
	perk3Header.header:setText( LocalizeToUpperString( @"mpui/perk3" ) ) --[[ @ 0]]
	perk3Header:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "talent3", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			perk3Header:setModel( f4_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( perk3Header ) --[[ @ 0]]
	self.perk3Header = perk3Header --[[ @ 0]]
	
	local SecondaryAttachmentHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -184, -59, 1, 1, -287, -271 ) --[[ @ 0]]
	SecondaryAttachmentHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_56E6F15BA89EEED" ) ) --[[ @ 0]]
	self:addElement( SecondaryAttachmentHeader ) --[[ @ 0]]
	self.SecondaryAttachmentHeader = SecondaryAttachmentHeader --[[ @ 0]]
	
	local SecondaryOpticsHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -305, -180, 1, 1, -287, -271 ) --[[ @ 0]]
	SecondaryOpticsHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2BB87386985BA15F" ) ) --[[ @ 0]]
	self:addElement( SecondaryOpticsHeader ) --[[ @ 0]]
	self.SecondaryOpticsHeader = SecondaryOpticsHeader --[[ @ 0]]
	
	local wildcardsHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 336.5, 528.5, 1, 1, -287, -271 ) --[[ @ 0]]
	wildcardsHeader.header:setText( LocalizeToUpperString( @"hash_38DEB3201AB34D8E" ) ) --[[ @ 0]]
	wildcardsHeader:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "bonuscard1", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			wildcardsHeader:setModel( f5_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( wildcardsHeader ) --[[ @ 0]]
	self.wildcardsHeader = wildcardsHeader --[[ @ 0]]
	
	local EquipmentHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 83, 208, 1, 1, -287, -271 ) --[[ @ 0]]
	EquipmentHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6562BD8EE9E11C5B" ) ) --[[ @ 0]]
	EquipmentHeader:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "primarygrenade", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			EquipmentHeader:setModel( f6_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( EquipmentHeader ) --[[ @ 0]]
	self.EquipmentHeader = EquipmentHeader --[[ @ 0]]
	
	local PrimaryAttachmentHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -563, -438, 1, 1, -287, -271 ) --[[ @ 0]]
	PrimaryAttachmentHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_56E6F15BA89EEED" ) ) --[[ @ 0]]
	self:addElement( PrimaryAttachmentHeader ) --[[ @ 0]]
	self.PrimaryAttachmentHeader = PrimaryAttachmentHeader --[[ @ 0]]
	
	local PrimaryOpticsHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -684, -559, 1, 1, -287, -271 ) --[[ @ 0]]
	PrimaryOpticsHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2BB87386985BA15F" ) ) --[[ @ 0]]
	self:addElement( PrimaryOpticsHeader ) --[[ @ 0]]
	self.PrimaryOpticsHeader = PrimaryOpticsHeader --[[ @ 0]]
	
	local GearHeader = CoD.CategoryHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, 83, 208, 1, 1, -497, -481 ) --[[ @ 0]]
	GearHeader.header:setText( LocalizeToUpperString( @"hash_305E03714EE77FC" ) ) --[[ @ 0]]
	GearHeader:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "tacticalgear", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			GearHeader:setModel( f7_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GearHeader ) --[[ @ 0]]
	self.GearHeader = GearHeader --[[ @ 0]]
	
	local tacticalgear = CoD.LoadoutClassItemEquipment.new( f1_arg0, f1_arg1, 0.5, 0.5, 84.5, 297.5, 1, 1, -475, -305 ) --[[ @ 0]]
	tacticalgear:linkToElementModel( self, "tacticalgear", false, function ( model )
		tacticalgear:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	tacticalgear:linkToElementModel( tacticalgear, "itemIndex", true, function ( model, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	tacticalgear:appendEventHandler( "input_source_changed", function ( f10_arg0, f10_arg1 )
		f10_arg1.menu = f10_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f10_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f10_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local primary = tacticalgear --[[ @ 0]]
	local perkTalents = tacticalgear.subscribeToModel --[[ @ 0]]
	local primaryAttachments = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	perkTalents( primary, primaryAttachments.LastInput, function ( f11_arg0, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	tacticalgear:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( tacticalgear, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "EquipmentSelect", self, "tacticalgear" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( tacticalgear, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( tacticalgear, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	tacticalgear:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f19_arg0, f19_arg1, f19_arg2, f19_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f19_arg0, f19_arg2, "itemIndex", CoDShared.EmptyItemIndex ) then
			return function ( f20_arg0, f20_arg1, f20_arg2, f20_arg3 )
				CoD.CACUtility.UnequipItem( f20_arg2, f20_arg1, f20_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( tacticalgear ) --[[ @ 0]]
	self.tacticalgear = tacticalgear --[[ @ 0]]
	
	perkTalents = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	perkTalents:mergeStateConditions( {
		{
			stateName = "WildcardHighlight",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( element, f1_arg1, "BonuscardModifiedSlotEnum", "bonuscardModifier" )
			end
		}
	} ) --[[ @ 0]]
	primaryAttachments = perkTalents --[[ @ 0]]
	primary = perkTalents.subscribeToModel --[[ @ 0]]
	local wildcards = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	primary( primaryAttachments, wildcards.BonuscardModifiedSlotEnum, function ( f22_arg0 )
		f1_arg0:updateElementState( perkTalents, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "BonuscardModifiedSlotEnum"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	perkTalents:linkToElementModel( perkTalents, "bonuscardModifier", true, function ( model )
		f1_arg0:updateElementState( perkTalents, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bonuscardModifier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	perkTalents:setLeftRight( 0.5, 0.5, 336, 686 ) --[[ @ 0]]
	perkTalents:setTopBottom( 1, 1, -475, -305 ) --[[ @ 0]]
	perkTalents:setWidgetType( CoD.TalentLoadoutListItem ) --[[ @ 0]]
	perkTalents:setHorizontalCount( 3 ) --[[ @ 0]]
	perkTalents:setVerticalCount( 2 ) --[[ @ 0]]
	perkTalents:setSpacing( 10 ) --[[ @ 0]]
	perkTalents:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	perkTalents:linkToElementModel( self, "talents", true, function ( model )
		local f24_local0 = model:get() --[[ @ 0]]
		if f24_local0 ~= nil then
			perkTalents:setDataSource( f24_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	primaryAttachments = perkTalents --[[ @ 0]]
	primary = perkTalents.subscribeToModel --[[ @ 0]]
	wildcards = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	primary( primaryAttachments, wildcards["CustomClassList.equippedItemsChanged"], function ( f25_arg0, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	perkTalents:linkToElementModel( perkTalents, "loadoutListItem", true, function ( model, f26_arg1 )
		if perkTalents["__buttonPrompt_loadoutListItem->itemIndex"] then
			perkTalents:removeSubscription( perkTalents["__buttonPrompt_loadoutListItem->itemIndex"] ) --[[ @ 0]]
			perkTalents["__buttonPrompt_loadoutListItem->itemIndex"] = nil --[[ @ 0]]
		end
		if model then
			local f26_local0 = model:get() --[[ @ 0]]
			local f26_local1 = model:get() --[[ @ 0]]
			model = f26_local0 and f26_local1.itemIndex --[[ @ 0]]
		end
		if model then
			perkTalents["__buttonPrompt_loadoutListItem->itemIndex"] = perkTalents:subscribeToModel( model, function ( model )
				CoD.Menu.UpdateButtonShownState( f26_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
				CoD.Menu.UpdateButtonShownState( f26_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	perkTalents:appendEventHandler( "input_source_changed", function ( f28_arg0, f28_arg1 )
		f28_arg1.menu = f28_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f28_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f28_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primaryAttachments = perkTalents --[[ @ 0]]
	primary = perkTalents.subscribeToModel --[[ @ 0]]
	wildcards = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	primary( primaryAttachments, wildcards.LastInput, function ( f29_arg0, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	perkTalents:registerEventHandler( "gain_focus", function ( element, event )
		local f30_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f30_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f30_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		return f30_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( perkTalents, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.BonuscardUtility.IsRequiredGreedWildcardEquipped( menu, element ) then
			CoD.CACUtility.OpenWildcardPopup( self, element, menu, controller, "WildcardSelect", self, "bonuscard", true ) --[[ @ 0]]
			return true
		else
			CoD.CACUtility.OpenPerkTalentOverlay( self, element, menu, controller, "PerkTalentSelect", self, "talent" ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( perkTalents, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.CACUtility.UnequipLoadoutListItem( element, menu, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( perkTalents, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.UnequipLoadoutListItem( element, menu, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	perkTalents:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f37_arg0, f37_arg1, f37_arg2, f37_arg3 )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( f37_arg0, f37_arg2, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			return function ( f38_arg0, f38_arg1, f38_arg2, f38_arg3 )
				CoD.CACUtility.UnequipLoadoutListItem( f38_arg0, f38_arg1, f38_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateItemListSlotSetupContext( f38_arg0, f38_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateClassWeaponModel( f38_arg1, f38_arg0, f38_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( perkTalents ) --[[ @ 0]]
	self.perkTalents = perkTalents --[[ @ 0]]
	
	primary = CoD.LoadoutClassItem.new( f1_arg0, f1_arg1, 0.5, 0.5, -683, -333, 1, 1, -475, -271 ) --[[ @ 0]]
	primary:linkToElementModel( self, "primary", false, function ( model )
		primary:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primary:appendEventHandler( "input_source_changed", function ( f40_arg0, f40_arg1 )
		f40_arg1.menu = f40_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	wildcards = primary --[[ @ 0]]
	primaryAttachments = primary.subscribeToModel --[[ @ 0]]
	local secondary = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	primaryAttachments( wildcards, secondary.LastInput, function ( f41_arg0, f41_arg1 )
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	primary:linkToElementModel( primary, "itemIndex", true, function ( model, f42_arg1 )
		CoD.Menu.UpdateButtonShownState( f42_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f42_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f42_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f42_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	wildcards = primary --[[ @ 0]]
	primaryAttachments = primary.subscribeToModel --[[ @ 0]]
	secondary = Engine[@"getglobalmodel"]() --[[ @ 0]]
	primaryAttachments( wildcards, secondary["lobbyRoot.lobbyNetworkMode"], function ( f43_arg0, f43_arg1 )
		CoD.Menu.UpdateButtonShownState( f43_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f43_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	wildcards = primary --[[ @ 0]]
	primaryAttachments = primary.subscribeToModel --[[ @ 0]]
	secondary = Engine[@"getglobalmodel"]() --[[ @ 0]]
	primaryAttachments( wildcards, secondary["lobbyRoot.lobbyNav"], function ( f44_arg0, f44_arg1 )
		CoD.Menu.UpdateButtonShownState( f44_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f44_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	primary:registerEventHandler( "gain_focus", function ( element, event )
		local f45_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f45_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f45_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f45_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.OpenCACOverlay( self, menu, controller, "WeaponSelectFlyout", self, "primary" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_remove", function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, self, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_194122F68876E5D9", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, self, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"hash_194122F68876E5D9", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"lui_key_back"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.SetShowcaseWeapon( menu, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_4E629850E7968A6E", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primary, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.SetShowcaseWeapon( menu, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"menu/gun_rack", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	primary:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f58_arg0, f58_arg1, f58_arg2, f58_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f58_arg0, f58_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f58_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f59_arg0, f59_arg1, f59_arg2, f59_arg3 )
				CoD.CACUtility.UnequipItem( f59_arg2, f59_arg1, f59_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	primary:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f60_arg0, f60_arg1, f60_arg2, f60_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f60_arg0, f60_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f60_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f61_arg0, f61_arg1, f61_arg2, f61_arg3 )
				CoD.CraftUtility.SetupPaintjobPersonalization( self, f61_arg0, f61_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, f61_arg1, f61_arg2, self, f61_arg0, "primary" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	primary:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_E092C2BE5DD4778", function ( f62_arg0, f62_arg1, f62_arg2, f62_arg3 )
		if not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( f62_arg0, f62_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f62_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f63_arg0, f63_arg1, f63_arg2, f63_arg3 )
				CoD.CACUtility.SetShowcaseWeapon( f63_arg1, f63_arg2, f63_arg0 ) --[[ @ 0]]
				PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( primary ) --[[ @ 0]]
	self.primary = primary --[[ @ 0]]
	
	primaryAttachments = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	primaryAttachments:mergeStateConditions( {
		{
			stateName = "WildcardHighlight",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( element, f1_arg1, "BonuscardModifiedSlotEnum", "bonuscardModifier" ) and CoD.BonuscardUtility.IsNextAvailableAttachmentSlotForGunfighter( menu, element )
			end
		}
	} ) --[[ @ 0]]
	secondary = primaryAttachments --[[ @ 0]]
	wildcards = primaryAttachments.subscribeToModel --[[ @ 0]]
	local secondaryAttachments = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	wildcards( secondary, secondaryAttachments.BonuscardModifiedSlotEnum, function ( f65_arg0 )
		f1_arg0:updateElementState( primaryAttachments, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f65_arg0:get(),
			modelName = "BonuscardModifiedSlotEnum"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( primaryAttachments, "bonuscardModifier", true, function ( model )
		f1_arg0:updateElementState( primaryAttachments, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bonuscardModifier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primaryAttachments:setLeftRight( 0.5, 0.5, -683, -333 ) --[[ @ 0]]
	primaryAttachments:setTopBottom( 1, 1, -265, -95 ) --[[ @ 0]]
	primaryAttachments:setWidgetType( CoD.AttachmentLoadoutClassListItem ) --[[ @ 0]]
	primaryAttachments:setHorizontalCount( 3 ) --[[ @ 0]]
	primaryAttachments:setVerticalCount( 2 ) --[[ @ 0]]
	primaryAttachments:setSpacing( 10 ) --[[ @ 0]]
	primaryAttachments:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( self, "primaryattachments", true, function ( model )
		local f67_local0 = model:get() --[[ @ 0]]
		if f67_local0 ~= nil then
			primaryAttachments:setDataSource( f67_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( primaryAttachments, "itemIndex", true, function ( model, f68_arg1 )
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primaryAttachments:appendEventHandler( "input_source_changed", function ( f69_arg0, f69_arg1 )
		f69_arg1.menu = f69_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondary = primaryAttachments --[[ @ 0]]
	wildcards = primaryAttachments.subscribeToModel --[[ @ 0]]
	secondaryAttachments = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	wildcards( secondary, secondaryAttachments.LastInput, function ( f70_arg0, f70_arg1 )
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( primaryAttachments, "loadoutListItem", true, function ( model, f71_arg1 )
		if primaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] then
			primaryAttachments:removeSubscription( primaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] ) --[[ @ 0]]
			primaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] = nil --[[ @ 0]]
		end
		if model then
			local f71_local0 = model:get() --[[ @ 0]]
			local f71_local1 = model:get() --[[ @ 0]]
			model = f71_local0 and f71_local1.itemIndex --[[ @ 0]]
		end
		if model then
			primaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] = primaryAttachments:subscribeToModel( model, function ( model )
				CoD.Menu.UpdateButtonShownState( f71_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( primaryAttachments, "attachmentSlotIndex", true, function ( model, f73_arg1 )
		CoD.Menu.UpdateButtonShownState( f73_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f73_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primaryAttachments:registerEventHandler( "gain_focus", function ( element, event )
		local f74_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f74_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f74_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		return f74_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsListElementChildInState( element, "AttachmentSlot", "WildcardNeeded" ) then
			CoD.CACUtility.OpenWildcardPopup( self, element, menu, controller, "WildcardSelect", self, "bonuscard", true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.BaseUtility.HasChildElement( element, "AttachmentSlot" ) and not IsListElementChildInState( element, "AttachmentSlot", "WildcardNotAvailable" ) then
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "WeaponAttachmentSelect", self, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsListElementChildInState( element, "AttachmentSlot", "WildcardNeeded" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.BaseUtility.HasChildElement( element, "AttachmentSlot" ) and not IsListElementChildInState( element, "AttachmentSlot", "WildcardNotAvailable" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_remove", function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.RemoveAttachmentFromClass( element, menu, controller, "primary" ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.RemoveAttachmentFromClass( element, menu, controller, "primary" ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", self, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_194122F68876E5D9", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", self, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"hash_194122F68876E5D9", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	primaryAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f83_arg0, f83_arg1, f83_arg2, f83_arg3 )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( f83_arg0, f83_arg2, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			return function ( f84_arg0, f84_arg1, f84_arg2, f84_arg3 )
				CoD.CACUtility.RemoveAttachmentFromClass( f84_arg0, f84_arg1, f84_arg2, "primary" ) --[[ @ 0]]
				CoD.CACUtility.UpdateItemListSlotSetupContext( f84_arg0, f84_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateClassWeaponModel( f84_arg1, f84_arg0, f84_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	primaryAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f85_arg0, f85_arg1, f85_arg2, f85_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, f85_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( f85_arg0, f85_arg2, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( f85_arg0, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( f85_arg1, f85_arg0 ) then
			return function ( f86_arg0, f86_arg1, f86_arg2, f86_arg3 )
				CoD.CraftUtility.SetUpOpticPersonalization( f86_arg0, f86_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenCACAttachmentOverlay( self, f86_arg0, f86_arg1, f86_arg2, "ReticleSelect", self, "primary" ) --[[ @ 0]]
				PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( primaryAttachments ) --[[ @ 0]]
	self.primaryAttachments = primaryAttachments --[[ @ 0]]
	
	wildcards = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	wildcards:setLeftRight( 0.5, 0.5, 336, 686 ) --[[ @ 0]]
	wildcards:setTopBottom( 1, 1, -265, -97 ) --[[ @ 0]]
	wildcards:setWidgetType( CoD.WildcardLoadoutListItem ) --[[ @ 0]]
	wildcards:setHorizontalCount( 3 ) --[[ @ 0]]
	wildcards:setSpacing( 10 ) --[[ @ 0]]
	wildcards:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	wildcards:linkToElementModel( self, "bonuscards", true, function ( model )
		local f87_local0 = model:get() --[[ @ 0]]
		if f87_local0 ~= nil then
			wildcards:setDataSource( f87_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	wildcards:linkToElementModel( wildcards, "loadoutListItem", true, function ( model, f88_arg1 )
		if wildcards["__buttonPrompt_loadoutListItem->itemIndex"] then
			wildcards:removeSubscription( wildcards["__buttonPrompt_loadoutListItem->itemIndex"] ) --[[ @ 0]]
			wildcards["__buttonPrompt_loadoutListItem->itemIndex"] = nil --[[ @ 0]]
		end
		if model then
			local f88_local0 = model:get() --[[ @ 0]]
			local f88_local1 = model:get() --[[ @ 0]]
			model = f88_local0 and f88_local1.itemIndex --[[ @ 0]]
		end
		if model then
			wildcards["__buttonPrompt_loadoutListItem->itemIndex"] = wildcards:subscribeToModel( model, function ( model )
				CoD.Menu.UpdateButtonShownState( f88_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
				CoD.Menu.UpdateButtonShownState( f88_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	wildcards:appendEventHandler( "input_source_changed", function ( f90_arg0, f90_arg1 )
		f90_arg1.menu = f90_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f90_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f90_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondaryAttachments = wildcards --[[ @ 0]]
	secondary = wildcards.subscribeToModel --[[ @ 0]]
	local TempSelectedImage = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	secondary( secondaryAttachments, TempSelectedImage.LastInput, function ( f91_arg0, f91_arg1 )
		CoD.Menu.UpdateButtonShownState( f91_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f91_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	wildcards:registerEventHandler( "gain_focus", function ( element, event )
		local f92_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f92_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f92_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		return f92_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( wildcards, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.CACUtility.OpenWildcardPopup( self, element, menu, controller, "WildcardSelect", self, "bonuscard", false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( wildcards, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.CACUtility.UnequipLoadoutListItem( element, menu, controller ) --[[ @ 0]]
			CoD.CACUtility.EquippedItemsChanged( menu, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( wildcards, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) then
			CoD.CACUtility.UnequipLoadoutListItem( element, menu, controller ) --[[ @ 0]]
			CoD.CACUtility.EquippedItemsChanged( menu, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	wildcards:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f99_arg0, f99_arg1, f99_arg2, f99_arg3 )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( f99_arg0, f99_arg2, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			return function ( f100_arg0, f100_arg1, f100_arg2, f100_arg3 )
				CoD.CACUtility.UnequipLoadoutListItem( f100_arg0, f100_arg1, f100_arg2 ) --[[ @ 0]]
				CoD.CACUtility.EquippedItemsChanged( f100_arg1, f100_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateItemListSlotSetupContext( f100_arg0, f100_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateClassWeaponModel( f100_arg1, f100_arg0, f100_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( wildcards ) --[[ @ 0]]
	self.wildcards = wildcards --[[ @ 0]]
	
	secondary = CoD.LoadoutClassItem.new( f1_arg0, f1_arg1, 0.5, 0.5, -304, 46, 1, 1, -475, -271 ) --[[ @ 0]]
	secondary.PrimaryHeader.header:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_73F876131FB1D9D" ) ) --[[ @ 0]]
	secondary:linkToElementModel( self, "secondary", false, function ( model )
		secondary:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondary:linkToElementModel( secondary, "itemIndex", true, function ( model, f102_arg1 )
		CoD.Menu.UpdateButtonShownState( f102_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f102_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f102_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f102_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondary:appendEventHandler( "input_source_changed", function ( f103_arg0, f103_arg1 )
		f103_arg1.menu = f103_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TempSelectedImage = secondary --[[ @ 0]]
	secondaryAttachments = secondary.subscribeToModel --[[ @ 0]]
	local primarygrenade = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	secondaryAttachments( TempSelectedImage, primarygrenade.LastInput, function ( f104_arg0, f104_arg1 )
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TempSelectedImage = secondary --[[ @ 0]]
	secondaryAttachments = secondary.subscribeToModel --[[ @ 0]]
	primarygrenade = Engine[@"getglobalmodel"]() --[[ @ 0]]
	secondaryAttachments( TempSelectedImage, primarygrenade["lobbyRoot.lobbyNetworkMode"], function ( f105_arg0, f105_arg1 )
		CoD.Menu.UpdateButtonShownState( f105_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f105_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TempSelectedImage = secondary --[[ @ 0]]
	secondaryAttachments = secondary.subscribeToModel --[[ @ 0]]
	primarygrenade = Engine[@"getglobalmodel"]() --[[ @ 0]]
	secondaryAttachments( TempSelectedImage, primarygrenade["lobbyRoot.lobbyNav"], function ( f106_arg0, f106_arg1 )
		CoD.Menu.UpdateButtonShownState( f106_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f106_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	secondary:registerEventHandler( "gain_focus", function ( element, event )
		local f107_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f107_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f107_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_back"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f107_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.OpenCACOverlay( self, menu, controller, "WeaponSelectFlyout", self, "secondary" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, self, element, "secondary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_194122F68876E5D9", nil, "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsGamepad( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"lui_key_back"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.SetShowcaseWeapon( menu, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_4E629850E7968A6E", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "ui_contextual_1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, self, element, "secondary" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"hash_194122F68876E5D9", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondary, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.CACUtility.SetShowcaseWeapon( menu, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( element, "__hasFocusOnVariantWidget", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"menu/gun_rack", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	secondary:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f120_arg0, f120_arg1, f120_arg2, f120_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f120_arg0, f120_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f120_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f121_arg0, f121_arg1, f121_arg2, f121_arg3 )
				CoD.CACUtility.UnequipItem( f121_arg2, f121_arg1, f121_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	secondary:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f122_arg0, f122_arg1, f122_arg2, f122_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f122_arg0, f122_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f122_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f123_arg0, f123_arg1, f123_arg2, f123_arg3 )
				CoD.CraftUtility.SetupPaintjobPersonalization( self, f123_arg0, f123_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, f123_arg1, f123_arg2, self, f123_arg0, "secondary" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	secondary:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_E092C2BE5DD4778", function ( f124_arg0, f124_arg1, f124_arg2, f124_arg3 )
		if not IsLocal() and not IsCustomLobby() and not CoD.ModelUtility.IsSelfModelValueEqualTo( f124_arg0, f124_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not IsElementPropertyValue( f124_arg0, "__hasFocusOnVariantWidget", true ) then
			return function ( f125_arg0, f125_arg1, f125_arg2, f125_arg3 )
				CoD.CACUtility.SetShowcaseWeapon( f125_arg1, f125_arg2, f125_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( secondary ) --[[ @ 0]]
	self.secondary = secondary --[[ @ 0]]
	
	secondaryAttachments = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	secondaryAttachments:mergeStateConditions( {
		{
			stateName = "WildcardHighlight",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( element, f1_arg1, "BonuscardModifiedSlotEnum", "bonuscardModifier" ) and CoD.BonuscardUtility.IsNextAvailableAttachmentSlotForGunfighter( menu, element )
			end
		}
	} ) --[[ @ 0]]
	primarygrenade = secondaryAttachments --[[ @ 0]]
	TempSelectedImage = secondaryAttachments.subscribeToModel --[[ @ 0]]
	local SpecialistEquipmentWidget = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	TempSelectedImage( primarygrenade, SpecialistEquipmentWidget.BonuscardModifiedSlotEnum, function ( f127_arg0 )
		f1_arg0:updateElementState( secondaryAttachments, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f127_arg0:get(),
			modelName = "BonuscardModifiedSlotEnum"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( secondaryAttachments, "bonuscardModifier", true, function ( model )
		f1_arg0:updateElementState( secondaryAttachments, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bonuscardModifier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondaryAttachments:setLeftRight( 0.5, 0.5, -304.5, 45.5 ) --[[ @ 0]]
	secondaryAttachments:setTopBottom( 1, 1, -265, -95 ) --[[ @ 0]]
	secondaryAttachments:setWidgetType( CoD.AttachmentLoadoutClassListItem ) --[[ @ 0]]
	secondaryAttachments:setHorizontalCount( 3 ) --[[ @ 0]]
	secondaryAttachments:setVerticalCount( 2 ) --[[ @ 0]]
	secondaryAttachments:setSpacing( 10 ) --[[ @ 0]]
	secondaryAttachments:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( self, "secondaryattachments", true, function ( model )
		local f129_local0 = model:get() --[[ @ 0]]
		if f129_local0 ~= nil then
			secondaryAttachments:setDataSource( f129_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( secondaryAttachments, "itemIndex", true, function ( model, f130_arg1 )
		CoD.Menu.UpdateButtonShownState( f130_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f130_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f130_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondaryAttachments:appendEventHandler( "input_source_changed", function ( f131_arg0, f131_arg1 )
		f131_arg1.menu = f131_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f131_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f131_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f131_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primarygrenade = secondaryAttachments --[[ @ 0]]
	TempSelectedImage = secondaryAttachments.subscribeToModel --[[ @ 0]]
	SpecialistEquipmentWidget = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	TempSelectedImage( primarygrenade, SpecialistEquipmentWidget.LastInput, function ( f132_arg0, f132_arg1 )
		CoD.Menu.UpdateButtonShownState( f132_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f132_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f132_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( secondaryAttachments, "loadoutListItem", true, function ( model, f133_arg1 )
		if secondaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] then
			secondaryAttachments:removeSubscription( secondaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] ) --[[ @ 0]]
			secondaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] = nil --[[ @ 0]]
		end
		if model then
			local f133_local0 = model:get() --[[ @ 0]]
			local f133_local1 = model:get() --[[ @ 0]]
			model = f133_local0 and f133_local1.itemIndex --[[ @ 0]]
		end
		if model then
			secondaryAttachments["__buttonPrompt_loadoutListItem->itemIndex"] = secondaryAttachments:subscribeToModel( model, function ( model )
				CoD.Menu.UpdateButtonShownState( f133_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( secondaryAttachments, "attachmentSlotIndex", true, function ( model, f135_arg1 )
		CoD.Menu.UpdateButtonShownState( f135_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f135_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondaryAttachments:registerEventHandler( "gain_focus", function ( element, event )
		local f136_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f136_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f136_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		return f136_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsListElementChildInState( element, "AttachmentSlot", "WildcardNeeded" ) then
			CoD.CACUtility.OpenWildcardPopup( self, element, menu, controller, "WildcardSelect", self, "bonuscard", true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.BaseUtility.HasChildElement( element, "AttachmentSlot" ) and not IsListElementChildInState( element, "AttachmentSlot", "WildcardNotAvailable" ) then
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "WeaponAttachmentSelect", self, "secondary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsListElementChildInState( element, "AttachmentSlot", "WildcardNeeded" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.BaseUtility.HasChildElement( element, "AttachmentSlot" ) and not IsListElementChildInState( element, "AttachmentSlot", "WildcardNotAvailable" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_remove", function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.RemoveAttachmentFromClass( element, menu, controller, "secondary" ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.CACUtility.RemoveAttachmentFromClass( element, menu, controller, "secondary" ) --[[ @ 0]]
			CoD.CACUtility.UpdateItemListSlotSetupContext( element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateButtonPromptStatesForListSlots( menu, element, controller ) --[[ @ 0]]
			CoD.CACUtility.UpdateClassWeaponModel( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", self, "secondary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_194122F68876E5D9", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( secondaryAttachments, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.CraftUtility.SetUpOpticPersonalization( element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenCACAttachmentOverlay( self, element, menu, controller, "ReticleSelect", self, "secondary" ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( self.secondary, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and IsListElementChildInState( element, "AttachmentSlot", "DefaultStateHiddenName" ) and CoD.CACUtility.IsAttachmentWithCustomReticle( menu, element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"hash_194122F68876E5D9", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	secondaryAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f145_arg0, f145_arg1, f145_arg2, f145_arg3 )
		if not CoD.ModelUtility.IsSelfModelPathValueEqualTo( f145_arg0, f145_arg2, "loadoutListItem->itemIndex", CoDShared.EmptyItemIndex ) then
			return function ( f146_arg0, f146_arg1, f146_arg2, f146_arg3 )
				CoD.CACUtility.RemoveAttachmentFromClass( f146_arg0, f146_arg1, f146_arg2, "secondary" ) --[[ @ 0]]
				CoD.CACUtility.UpdateItemListSlotSetupContext( f146_arg0, f146_arg2 ) --[[ @ 0]]
				CoD.CACUtility.UpdateClassWeaponModel( f146_arg1, f146_arg0, f146_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	secondaryAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f147_arg0, f147_arg1, f147_arg2, f147_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( self.primary, f147_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.ModelUtility.IsSelfModelValueEqualTo( f147_arg0, f147_arg2, "attachmentSlotIndex", CoD.CACUtility.OpticSlotIndex ) and CoD.CACUtility.IsAttachmentWithCustomReticle( f147_arg1, f147_arg0 ) and IsListElementChildInState( f147_arg0, "AttachmentSlot", "DefaultStateHiddenName" ) then
			return function ( f148_arg0, f148_arg1, f148_arg2, f148_arg3 )
				CoD.CraftUtility.SetUpOpticPersonalization( f148_arg0, f148_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenCACAttachmentOverlay( self, f148_arg0, f148_arg1, f148_arg2, "ReticleSelect", self, "secondary" ) --[[ @ 0]]
				PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( secondaryAttachments ) --[[ @ 0]]
	self.secondaryAttachments = secondaryAttachments --[[ @ 0]]
	
	TempSelectedImage = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -256, 256, 1, 1, -968, -456 ) --[[ @ 0]]
	TempSelectedImage:setZoom( 40 ) --[[ @ 0]]
	TempSelectedImage:setScale( 0.8, 0.8 ) --[[ @ 0]]
	TempSelectedImage:linkToElementModel( self, "tempLargeImageForModel", true, function ( model )
		local f149_local0 = model:get() --[[ @ 0]]
		if f149_local0 ~= nil then
			TempSelectedImage:setImage( CoD.BaseUtility.AlreadyRegistered( f149_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TempSelectedImage ) --[[ @ 0]]
	self.TempSelectedImage = TempSelectedImage --[[ @ 0]]
	
	primarygrenade = CoD.LoadoutClassItemEquipmentTakeTwo.new( f1_arg0, f1_arg1, 0.5, 0.5, 84.5, 297.5, 1, 1, -265, -95 ) --[[ @ 0]]
	primarygrenade:linkToElementModel( self, nil, false, function ( model )
		primarygrenade:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( primarygrenade ) --[[ @ 0]]
	self.primarygrenade = primarygrenade --[[ @ 0]]
	
	SpecialistEquipmentWidget = CoD.SpecialistIssueEquipmentWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -200, 200, 1, 1, -912, -512 ) --[[ @ 0]]
	SpecialistEquipmentWidget:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "showSpecialistEquipmentWidgetModel" )
			end
		}
	} ) --[[ @ 0]]
	SpecialistEquipmentWidget:linkToElementModel( SpecialistEquipmentWidget, "showSpecialistEquipmentWidgetModel", true, function ( model )
		f1_arg0:updateElementState( SpecialistEquipmentWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "showSpecialistEquipmentWidgetModel"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialistEquipmentWidget:linkToElementModel( self, nil, false, function ( model )
		SpecialistEquipmentWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialistEquipmentWidget ) --[[ @ 0]]
	self.SpecialistEquipmentWidget = SpecialistEquipmentWidget --[[ @ 0]]
	
	local ChooseClassLockedOverlay = CoD.ChooseClassLockedOverlay.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -1080, 0 ) --[[ @ 0]]
	ChooseClassLockedOverlay:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.CACUtility.IsCurrentClassLocked( menu, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( ChooseClassLockedOverlay, nil, true, function ( model )
		f1_arg0:updateElementState( ChooseClassLockedOverlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( self, nil, false, function ( model )
		ChooseClassLockedOverlay:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ChooseClassLockedOverlay ) --[[ @ 0]]
	self.ChooseClassLockedOverlay = ChooseClassLockedOverlay --[[ @ 0]]
	
	local RestrictedText = CoD.RestrictedItemWarningText.new( f1_arg0, f1_arg1, 0.5, 0.5, -247, 247, 0.5, 0.5, -15, 15 ) --[[ @ 0]]
	RestrictedText:linkToElementModel( self, nil, false, function ( model )
		RestrictedText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "CompactText",
			condition = function ( menu, element, event )
				return not IsCurrentLanguageEnglish()
			end
		},
		{
			stateName = "TempInGame",
			condition = function ( menu, element, event )
				return IsInGame()
			end
		}
	} ) --[[ @ 0]]
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	tacticalgear.id = "tacticalgear" --[[ @ 0]]
	perkTalents.id = "perkTalents" --[[ @ 0]]
	primary.id = "primary" --[[ @ 0]]
	primaryAttachments.id = "primaryAttachments" --[[ @ 0]]
	wildcards.id = "wildcards" --[[ @ 0]]
	secondary.id = "secondary" --[[ @ 0]]
	secondaryAttachments.id = "secondaryAttachments" --[[ @ 0]]
	primarygrenade.id = "primarygrenade" --[[ @ 0]]
	if CoD.isPC then
		ChooseClassLockedOverlay.id = "ChooseClassLockedOverlay" --[[ @ 0]]
	end
	self.__defaultFocus = primary --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local24 = self --[[ @ 0]]
	CoD.BreadcrumbUtility.UpdateLoadoutBreadcrumbs( f1_arg0, f1_arg1 ) --[[ @ 0]]
	CoD.BreadcrumbUtility.UpdateWeaponOpticBreadcrumbs( f1_arg0, f1_arg1 ) --[[ @ 0]]
	f1_local24 = tacticalgear --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = perkTalents --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "loadoutListItem->name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = primary --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = primaryAttachments --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "loadoutListItem->name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = wildcards --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "loadoutListItem->name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = secondary --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local24 = secondaryAttachments --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local24, f1_arg1, "loadoutListItem->name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ChooseClassWidget.__resetProperties = function ( f160_arg0 )
	f160_arg0.perk1Header:completeAnimation() --[[ @ 0]]
	f160_arg0.perk2Header:completeAnimation() --[[ @ 0]]
	f160_arg0.perk3Header:completeAnimation() --[[ @ 0]]
	f160_arg0.perk1Header:setScale( 1, 1 ) --[[ @ 0]]
	f160_arg0.perk2Header:setScale( 1, 1 ) --[[ @ 0]]
	f160_arg0.perk3Header:setScale( 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ChooseClassWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f161_arg0, f161_arg1 )
			f161_arg0:__resetProperties() --[[ @ 0]]
			f161_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	CompactText = {
		DefaultClip = function ( f162_arg0, f162_arg1 )
			f162_arg0:__resetProperties() --[[ @ 0]]
			f162_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f162_arg0.perk1Header:completeAnimation() --[[ @ 0]]
			f162_arg0.perk1Header:setScale( 0.9, 1 ) --[[ @ 0]]
			f162_arg0.clipFinished( f162_arg0.perk1Header ) --[[ @ 0]]
			f162_arg0.perk2Header:completeAnimation() --[[ @ 0]]
			f162_arg0.perk2Header:setScale( 0.9, 1 ) --[[ @ 0]]
			f162_arg0.clipFinished( f162_arg0.perk2Header ) --[[ @ 0]]
			f162_arg0.perk3Header:completeAnimation() --[[ @ 0]]
			f162_arg0.perk3Header:setScale( 0.9, 1 ) --[[ @ 0]]
			f162_arg0.clipFinished( f162_arg0.perk3Header ) --[[ @ 0]]
		end
	},
	TempInGame = {
		DefaultClip = function ( f163_arg0, f163_arg1 )
			f163_arg0:__resetProperties() --[[ @ 0]]
			f163_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ChooseClassWidget.__onClose = function ( f164_arg0 )
	f164_arg0.XCamMouseControl:close() --[[ @ 0]]
	f164_arg0.perk1Header:close() --[[ @ 0]]
	f164_arg0.perk2Header:close() --[[ @ 0]]
	f164_arg0.perk3Header:close() --[[ @ 0]]
	f164_arg0.SecondaryAttachmentHeader:close() --[[ @ 0]]
	f164_arg0.SecondaryOpticsHeader:close() --[[ @ 0]]
	f164_arg0.wildcardsHeader:close() --[[ @ 0]]
	f164_arg0.EquipmentHeader:close() --[[ @ 0]]
	f164_arg0.PrimaryAttachmentHeader:close() --[[ @ 0]]
	f164_arg0.PrimaryOpticsHeader:close() --[[ @ 0]]
	f164_arg0.GearHeader:close() --[[ @ 0]]
	f164_arg0.tacticalgear:close() --[[ @ 0]]
	f164_arg0.perkTalents:close() --[[ @ 0]]
	f164_arg0.primary:close() --[[ @ 0]]
	f164_arg0.primaryAttachments:close() --[[ @ 0]]
	f164_arg0.wildcards:close() --[[ @ 0]]
	f164_arg0.secondary:close() --[[ @ 0]]
	f164_arg0.secondaryAttachments:close() --[[ @ 0]]
	f164_arg0.TempSelectedImage:close() --[[ @ 0]]
	f164_arg0.primarygrenade:close() --[[ @ 0]]
	f164_arg0.SpecialistEquipmentWidget:close() --[[ @ 0]]
	f164_arg0.ChooseClassLockedOverlay:close() --[[ @ 0]]
	f164_arg0.RestrictedText:close() --[[ @ 0]]
end
 --[[ @ 0]]
