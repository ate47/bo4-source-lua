-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/cac/menuchooseclass/itemwidgets/weaponlevelmetersmall" ) --[[ @ 0]]
require( "x64:26466c2aec2cf6a4" ) --[[ @ 0]]

CoD.ButtonWeaponLevel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ButtonWeaponLevel.__defaultWidth = 550 --[[ @ 0]]
CoD.ButtonWeaponLevel.__defaultHeight = 12 --[[ @ 0]]
CoD.ButtonWeaponLevel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ButtonWeaponLevel ) --[[ @ 0]]
	self.id = "ButtonWeaponLevel" --[[ @ 0]]
	self.soundSet = "CAC" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local bg = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 24 ) --[[ @ 0]]
	bg:setRGB( 0, 0, 0 ) --[[ @ 0]]
	bg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( bg ) --[[ @ 0]]
	self.bg = bg --[[ @ 0]]
	
	local levelBg = LUI.UIImage.new( 0, 0, 0, 123, 0, 0, 0, 24 ) --[[ @ 0]]
	levelBg:setRGB( 0.97, 0.92, 0.07 ) --[[ @ 0]]
	levelBg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( levelBg ) --[[ @ 0]]
	self.levelBg = levelBg --[[ @ 0]]
	
	local progressBarBgExtraOpacity = LUI.UIImage.new( 0, 0, 1, 265, 0, 0, 4.5, 7.5 ) --[[ @ 0]]
	progressBarBgExtraOpacity:setRGB( 0, 0, 0 ) --[[ @ 0]]
	progressBarBgExtraOpacity:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( progressBarBgExtraOpacity ) --[[ @ 0]]
	self.progressBarBgExtraOpacity = progressBarBgExtraOpacity --[[ @ 0]]
	
	local progressBarBg = LUI.UIImage.new( 0.5, 0.5, -269.5, -12.5, 0, 0, -96, 9 ) --[[ @ 0]]
	progressBarBg:setRGB( 0, 0, 0 ) --[[ @ 0]]
	progressBarBg:setScale( 1.1, 1.1 ) --[[ @ 0]]
	progressBarBg:setImage( RegisterImage( @"uie_ui_menu_cac_weapon_select_button_bar" ) ) --[[ @ 0]]
	self:addElement( progressBarBg ) --[[ @ 0]]
	self.progressBarBg = progressBarBg --[[ @ 0]]
	
	local progressBar = CoD.WeaponLevelMeterSmall.new( f1_arg0, f1_arg1, 0, 0, 0, 1580, 0, 0, 0, 12 ) --[[ @ 0]]
	progressBar:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	progressBar:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	progressBar:linkToElementModel( self, nil, false, function ( model )
		progressBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( progressBar ) --[[ @ 0]]
	self.progressBar = progressBar --[[ @ 0]]
	
	local LvlBg = LUI.UIImage.new( 0, 0, -4.5, 105.5, 0, 0, -29.5, 0.5 ) --[[ @ 0]]
	LvlBg:setAlpha( 0 ) --[[ @ 0]]
	LvlBg:setScale( 1.05, 1.05 ) --[[ @ 0]]
	LvlBg:setImage( RegisterImage( @"uie_ui_menu_cac_attachment_lvl_bg_01" ) ) --[[ @ 0]]
	self:addElement( LvlBg ) --[[ @ 0]]
	self.LvlBg = LvlBg --[[ @ 0]]
	
	local WeaponLevelWidget = CoD.WeaponLevelWidget.new( f1_arg0, f1_arg1, 0, 0, 0, 123, 0, 0, -130, -70 ) --[[ @ 0]]
	WeaponLevelWidget:linkToElementModel( self, nil, false, function ( model )
		WeaponLevelWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WeaponLevelWidget ) --[[ @ 0]]
	self.WeaponLevelWidget = WeaponLevelWidget --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "DoubleWeaponXP",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not IsArenaMode() and not IsPaintshop( f1_arg1 ) then
					f5_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
					if f5_local0 then
						if not CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) then
							f5_local0 = CoD.DoubleXPUtility.HasDoubleWeaponXP( f1_arg1, element ) --[[ @ 0]]
						else
							f5_local0 = false --[[ @ 0]]
						end
					end
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		},
		{
			stateName = "DisplayLevel",
			condition = function ( menu, element, event )
				local f6_local0 --[[ @ 0]]
				if not IsArenaMode() and not IsPaintshop( f1_arg1 ) then
					f6_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
					if f6_local0 then
						if not CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) then
							f6_local0 = not CoD.DoubleXPUtility.HasDoubleWeaponXP( f1_arg1, element ) --[[ @ 0]]
						else
							f6_local0 = false --[[ @ 0]]
						end
					end
				else
					f6_local0 = false --[[ @ 0]]
				end
				return f6_local0
			end
		},
		{
			stateName = "MaxLevel",
			condition = function ( menu, element, event )
				local f7_local0 --[[ @ 0]]
				if not IsArenaMode() and not IsPaintshop( f1_arg1 ) then
					f7_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
					if f7_local0 then
						f7_local0 = CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) --[[ @ 0]]
					end
				else
					f7_local0 = false --[[ @ 0]]
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "hasDoubleWeaponXP", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasDoubleWeaponXP"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.AutoEvents.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.cycled, function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "cycled"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ButtonWeaponLevel.__resetProperties = function ( f12_arg0 )
	f12_arg0.levelBg:completeAnimation() --[[ @ 0]]
	f12_arg0.bg:completeAnimation() --[[ @ 0]]
	f12_arg0.progressBar:completeAnimation() --[[ @ 0]]
	f12_arg0.LvlBg:completeAnimation() --[[ @ 0]]
	f12_arg0.WeaponLevelWidget:completeAnimation() --[[ @ 0]]
	f12_arg0.progressBarBg:completeAnimation() --[[ @ 0]]
	f12_arg0.progressBarBgExtraOpacity:completeAnimation() --[[ @ 0]]
	f12_arg0.levelBg:setRGB( 0.97, 0.92, 0.07 ) --[[ @ 0]]
	f12_arg0.levelBg:setAlpha( 0 ) --[[ @ 0]]
	f12_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
	f12_arg0.progressBar:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	f12_arg0.progressBar:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.LvlBg:setAlpha( 0 ) --[[ @ 0]]
	f12_arg0.WeaponLevelWidget:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.WeaponLevelWidget.LevelLabel:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	f12_arg0.WeaponLevelWidget.PrestigeStar1:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	f12_arg0.WeaponLevelWidget.PrestigeStar2:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	f12_arg0.progressBarBg:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.progressBarBgExtraOpacity:setAlpha( 0.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ButtonWeaponLevel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f13_arg0.bg:completeAnimation() --[[ @ 0]]
			f13_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.bg ) --[[ @ 0]]
			f13_arg0.levelBg:completeAnimation() --[[ @ 0]]
			f13_arg0.levelBg:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.levelBg ) --[[ @ 0]]
			f13_arg0.progressBarBgExtraOpacity:completeAnimation() --[[ @ 0]]
			f13_arg0.progressBarBgExtraOpacity:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.progressBarBgExtraOpacity ) --[[ @ 0]]
			f13_arg0.progressBarBg:completeAnimation() --[[ @ 0]]
			f13_arg0.progressBarBg:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.progressBarBg ) --[[ @ 0]]
			f13_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f13_arg0.progressBar:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.progressBar ) --[[ @ 0]]
			f13_arg0.LvlBg:completeAnimation() --[[ @ 0]]
			f13_arg0.LvlBg:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.LvlBg ) --[[ @ 0]]
			f13_arg0.WeaponLevelWidget:completeAnimation() --[[ @ 0]]
			f13_arg0.WeaponLevelWidget:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.WeaponLevelWidget ) --[[ @ 0]]
		end
	},
	DoubleWeaponXP = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f14_arg0.levelBg:completeAnimation() --[[ @ 0]]
			f14_arg0.levelBg:setRGB( 0.31, 0.13, 0.47 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.levelBg ) --[[ @ 0]]
			f14_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f14_arg0.progressBar:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.progressBar ) --[[ @ 0]]
			f14_arg0.WeaponLevelWidget:completeAnimation() --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.LevelLabel:completeAnimation() --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.PrestigeStar1:completeAnimation() --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.PrestigeStar2:completeAnimation() --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.LevelLabel:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.PrestigeStar1:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f14_arg0.WeaponLevelWidget.PrestigeStar2:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.WeaponLevelWidget ) --[[ @ 0]]
		end
	},
	DisplayLevel = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f15_arg0.WeaponLevelWidget:completeAnimation() --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.LevelLabel:completeAnimation() --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.PrestigeStar1:completeAnimation() --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.PrestigeStar2:completeAnimation() --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.LevelLabel:setRGB( 0.89, 0.69, 0.04 ) --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.PrestigeStar1:setRGB( 0.89, 0.7, 0.04 ) --[[ @ 0]]
			f15_arg0.WeaponLevelWidget.PrestigeStar2:setRGB( 0.89, 0.7, 0.04 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.WeaponLevelWidget ) --[[ @ 0]]
		end
	},
	MaxLevel = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f16_arg0.bg:completeAnimation() --[[ @ 0]]
			f16_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.bg ) --[[ @ 0]]
			f16_arg0.progressBarBgExtraOpacity:completeAnimation() --[[ @ 0]]
			f16_arg0.progressBarBgExtraOpacity:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.progressBarBgExtraOpacity ) --[[ @ 0]]
			f16_arg0.progressBarBg:completeAnimation() --[[ @ 0]]
			f16_arg0.progressBarBg:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.progressBarBg ) --[[ @ 0]]
			f16_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f16_arg0.progressBar:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.progressBar ) --[[ @ 0]]
			f16_arg0.WeaponLevelWidget:completeAnimation() --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.LevelLabel:completeAnimation() --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.PrestigeStar1:completeAnimation() --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.PrestigeStar2:completeAnimation() --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.LevelLabel:setRGB( 0.58, 0.78, 0.32 ) --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.PrestigeStar1:setRGB( 0.58, 0.78, 0.32 ) --[[ @ 0]]
			f16_arg0.WeaponLevelWidget.PrestigeStar2:setRGB( 0.58, 0.78, 0.32 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.WeaponLevelWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ButtonWeaponLevel.__onClose = function ( f17_arg0 )
	f17_arg0.progressBar:close() --[[ @ 0]]
	f17_arg0.WeaponLevelWidget:close() --[[ @ 0]]
end
 --[[ @ 0]]
