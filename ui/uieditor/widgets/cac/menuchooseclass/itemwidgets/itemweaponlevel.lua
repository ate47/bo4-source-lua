-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/cac/menuchooseclass/itemwidgets/weaponlevelmeter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/onoffimage" ) --[[ @ 0]]

CoD.ItemWeaponLevel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ItemWeaponLevel.__defaultWidth = 1580 --[[ @ 0]]
CoD.ItemWeaponLevel.__defaultHeight = 12 --[[ @ 0]]
CoD.ItemWeaponLevel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ItemWeaponLevel ) --[[ @ 0]]
	self.id = "ItemWeaponLevel" --[[ @ 0]]
	self.soundSet = "CAC" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local bg = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 24 ) --[[ @ 0]]
	bg:setRGB( 0, 0, 0 ) --[[ @ 0]]
	bg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( bg ) --[[ @ 0]]
	self.bg = bg --[[ @ 0]]
	
	local levelBg = LUI.UIImage.new( 0, 0, 0, 123, 0, 0, 0, 24 ) --[[ @ 0]]
	levelBg:setRGB( 0.97, 0.92, 0.07 ) --[[ @ 0]]
	levelBg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( levelBg ) --[[ @ 0]]
	self.levelBg = levelBg --[[ @ 0]]
	
	local progressBar = CoD.WeaponLevelMeter.new( f1_arg0, f1_arg1, 0, 0, 0, 1580, 0, 0, 0, 12 ) --[[ @ 0]]
	progressBar:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	progressBar:linkToElementModel( self, nil, false, function ( model )
		progressBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( progressBar ) --[[ @ 0]]
	self.progressBar = progressBar --[[ @ 0]]
	
	local levelLabel = LUI.UIText.new( 0, 0, 7.5, 236.5, 0, 0, -24.5, -4.5 ) --[[ @ 0]]
	levelLabel:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	levelLabel:setTTF( "0arame_mono_stencil" ) --[[ @ 0]]
	levelLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	levelLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	levelLabel:setBackingType( 3 ) --[[ @ 0]]
	levelLabel:setBackingColor( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	levelLabel:setBackingXPadding( 13 ) --[[ @ 0]]
	levelLabel:setBackingYPadding( 6 ) --[[ @ 0]]
	levelLabel:setBackingImage( RegisterImage( @"uie_ui_menu_cac_attachment_lvl_bg_colorless01" ) ) --[[ @ 0]]
	levelLabel:setBackingMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	levelLabel:setBackingShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	levelLabel:setupBackingNineSliceShader( 55, 16 ) --[[ @ 0]]
	levelLabel:linkToElementModel( self, "itemIndex", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			levelLabel:setText( CoD.CACUtility.LocalizeCurrentWeaponLevelIntoString( f1_arg0, @"hash_6D8F445CA5BD1B0E", f1_arg1, f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( levelLabel ) --[[ @ 0]]
	self.levelLabel = levelLabel --[[ @ 0]]
	
	local prestigeStar2 = CoD.onOffImage.new( f1_arg0, f1_arg1, 0, 0, -14, -3, 1, 1, -12, -1 ) --[[ @ 0]]
	prestigeStar2:setRGB( 0.97, 0.93, 0.07 ) --[[ @ 0]]
	prestigeStar2.image:setImage( RegisterImage( @"uie_t7_arena_star_petit_white" ) ) --[[ @ 0]]
	prestigeStar2:linkToElementModel( self, nil, false, function ( model )
		prestigeStar2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( prestigeStar2 ) --[[ @ 0]]
	self.prestigeStar2 = prestigeStar2 --[[ @ 0]]
	
	local prestigeStar1 = CoD.onOffImage.new( f1_arg0, f1_arg1, 0, 0, -14, -3, 1, 1, -31, -20 ) --[[ @ 0]]
	prestigeStar1:setRGB( 0.97, 0.93, 0.07 ) --[[ @ 0]]
	prestigeStar1.image:setImage( RegisterImage( @"uie_t7_arena_star_petit_white" ) ) --[[ @ 0]]
	prestigeStar1:linkToElementModel( self, nil, false, function ( model )
		prestigeStar1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( prestigeStar1 ) --[[ @ 0]]
	self.prestigeStar1 = prestigeStar1 --[[ @ 0]]
	
	local Glow = LUI.UIImage.new( 0, 0, -3, 7, 0, 0, -36, 8 ) --[[ @ 0]]
	Glow:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Glow:setImage( RegisterImage( @"uie_ui_menu_cac_attachment_meter_tick_glow" ) ) --[[ @ 0]]
	Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	Glow:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Glow ) --[[ @ 0]]
	self.Glow = Glow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "DoubleWeaponXP",
			condition = function ( menu, element, event )
				local f7_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
				if f7_local0 then
					if not CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) then
						f7_local0 = CoD.DoubleXPUtility.HasDoubleWeaponXP( f1_arg1, element ) --[[ @ 0]]
						if f7_local0 then
							f7_local0 = not IsArenaMode() --[[ @ 0]]
						end
					else
						f7_local0 = false --[[ @ 0]]
					end
				end
				return f7_local0
			end
		},
		{
			stateName = "DisplayLevel",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
				if f8_local0 then
					if not CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) and not CoD.DoubleXPUtility.HasDoubleWeaponXP( f1_arg1, element ) then
						f8_local0 = not IsArenaMode() --[[ @ 0]]
					else
						f8_local0 = false --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "MaxLevel",
			condition = function ( menu, element, event )
				local f9_local0 = CoD.CACUtility.IsCACGunLevelExists( menu, element, f1_arg1 ) --[[ @ 0]]
				if f9_local0 then
					f9_local0 = CoD.CACUtility.IsCACGunLevelMax( menu, element, f1_arg1 ) --[[ @ 0]]
					if f9_local0 then
						f9_local0 = not IsArenaMode() --[[ @ 0]]
					end
				end
				return f9_local0
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "hasDoubleWeaponXP", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasDoubleWeaponXP"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.AutoEvents.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.cycled, function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "cycled"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ItemWeaponLevel.__resetProperties = function ( f14_arg0 )
	f14_arg0.levelBg:completeAnimation() --[[ @ 0]]
	f14_arg0.levelLabel:completeAnimation() --[[ @ 0]]
	f14_arg0.prestigeStar1:completeAnimation() --[[ @ 0]]
	f14_arg0.prestigeStar2:completeAnimation() --[[ @ 0]]
	f14_arg0.bg:completeAnimation() --[[ @ 0]]
	f14_arg0.progressBar:completeAnimation() --[[ @ 0]]
	f14_arg0.Glow:completeAnimation() --[[ @ 0]]
	f14_arg0.levelBg:setAlpha( 0 ) --[[ @ 0]]
	f14_arg0.levelLabel:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	f14_arg0.levelLabel:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.levelLabel:setBackingColor( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	f14_arg0.prestigeStar1:setRGB( 0.97, 0.93, 0.07 ) --[[ @ 0]]
	f14_arg0.prestigeStar1:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.prestigeStar2:setRGB( 0.97, 0.93, 0.07 ) --[[ @ 0]]
	f14_arg0.prestigeStar2:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
	f14_arg0.progressBar:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.progressBar.progressBarColorless:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f14_arg0.Glow:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	f14_arg0.Glow:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ItemWeaponLevel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f15_arg0.bg:completeAnimation() --[[ @ 0]]
			f15_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.bg ) --[[ @ 0]]
			f15_arg0.levelBg:completeAnimation() --[[ @ 0]]
			f15_arg0.levelBg:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.levelBg ) --[[ @ 0]]
			f15_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f15_arg0.progressBar:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.progressBar ) --[[ @ 0]]
			f15_arg0.levelLabel:completeAnimation() --[[ @ 0]]
			f15_arg0.levelLabel:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.levelLabel ) --[[ @ 0]]
			f15_arg0.prestigeStar2:completeAnimation() --[[ @ 0]]
			f15_arg0.prestigeStar2:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.prestigeStar2 ) --[[ @ 0]]
			f15_arg0.prestigeStar1:completeAnimation() --[[ @ 0]]
			f15_arg0.prestigeStar1:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.prestigeStar1 ) --[[ @ 0]]
			f15_arg0.Glow:completeAnimation() --[[ @ 0]]
			f15_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.Glow ) --[[ @ 0]]
		end
	},
	DoubleWeaponXP = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f16_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f16_arg0.progressBar.progressBarColorless:completeAnimation() --[[ @ 0]]
			f16_arg0.progressBar.progressBarColorless:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.progressBar ) --[[ @ 0]]
			f16_arg0.levelLabel:completeAnimation() --[[ @ 0]]
			f16_arg0.levelLabel:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.levelLabel:setBackingColor( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.levelLabel ) --[[ @ 0]]
			f16_arg0.prestigeStar2:completeAnimation() --[[ @ 0]]
			f16_arg0.prestigeStar2:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.prestigeStar2 ) --[[ @ 0]]
			f16_arg0.prestigeStar1:completeAnimation() --[[ @ 0]]
			f16_arg0.prestigeStar1:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.prestigeStar1 ) --[[ @ 0]]
			f16_arg0.Glow:completeAnimation() --[[ @ 0]]
			f16_arg0.Glow:setRGB( 0.62, 0.35, 0.79 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Glow ) --[[ @ 0]]
		end
	},
	DisplayLevel = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f17_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f17_arg0.progressBar.progressBarColorless:completeAnimation() --[[ @ 0]]
			f17_arg0.progressBar.progressBarColorless:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.progressBar ) --[[ @ 0]]
			f17_arg0.prestigeStar2:completeAnimation() --[[ @ 0]]
			f17_arg0.prestigeStar2:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.prestigeStar2 ) --[[ @ 0]]
			f17_arg0.prestigeStar1:completeAnimation() --[[ @ 0]]
			f17_arg0.prestigeStar1:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.prestigeStar1 ) --[[ @ 0]]
		end
	},
	MaxLevel = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f18_arg0.bg:completeAnimation() --[[ @ 0]]
			f18_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.bg ) --[[ @ 0]]
			f18_arg0.progressBar:completeAnimation() --[[ @ 0]]
			f18_arg0.progressBar:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.progressBar ) --[[ @ 0]]
			f18_arg0.prestigeStar2:completeAnimation() --[[ @ 0]]
			f18_arg0.prestigeStar2:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.prestigeStar2 ) --[[ @ 0]]
			f18_arg0.prestigeStar1:completeAnimation() --[[ @ 0]]
			f18_arg0.prestigeStar1:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.prestigeStar1 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ItemWeaponLevel.__onClose = function ( f19_arg0 )
	f19_arg0.progressBar:close() --[[ @ 0]]
	f19_arg0.levelLabel:close() --[[ @ 0]]
	f19_arg0.prestigeStar2:close() --[[ @ 0]]
	f19_arg0.prestigeStar1:close() --[[ @ 0]]
end
 --[[ @ 0]]
