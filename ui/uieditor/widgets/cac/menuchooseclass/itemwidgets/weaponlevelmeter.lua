-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
CoD.WeaponLevelMeter = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponLevelMeter.__defaultWidth = 1580 --[[ @ 0]]
CoD.WeaponLevelMeter.__defaultHeight = 12 --[[ @ 0]]
CoD.WeaponLevelMeter.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponLevelMeter ) --[[ @ 0]]
	self.id = "WeaponLevelMeter" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local progressBarBg = LUI.UIImage.new( 0, 0, 0, 1580, 0, 0, 2, 10 ) --[[ @ 0]]
	progressBarBg:setImage( RegisterImage( @"uie_ui_menu_cac_attachment_meter_backing_01" ) ) --[[ @ 0]]
	self:addElement( progressBarBg ) --[[ @ 0]]
	self.progressBarBg = progressBarBg --[[ @ 0]]
	
	local progressBarColorless = LUI.UIImage.new( 0, 0, -5, 1585, 0, 0, 2, 10 ) --[[ @ 0]]
	progressBarColorless:setImage( RegisterImage( @"uie_ui_menu_cac_button_bottom_line_lvl_colorless" ) ) --[[ @ 0]]
	progressBarColorless:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	progressBarColorless:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	progressBarColorless:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	progressBarColorless:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	progressBarColorless:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	progressBarColorless:linkToElementModel( self, "itemIndex", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			progressBarColorless:setShaderVector( 0, CoD.CACUtility.GetCurrentWeaponXP( f1_arg0, f1_arg1, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( progressBarColorless ) --[[ @ 0]]
	self.progressBarColorless = progressBarColorless --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "DoubleWeaponXP",
			condition = function ( menu, element, event )
				return IsDoubleWeaponXP( f1_arg1 )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return true
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WeaponLevelMeter.__resetProperties = function ( f5_arg0 )
	f5_arg0.progressBarBg:completeAnimation() --[[ @ 0]]
	f5_arg0.progressBarBg:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponLevelMeter.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f6_arg0.progressBarBg:completeAnimation() --[[ @ 0]]
			f6_arg0.progressBarBg:setAlpha( 0 ) --[[ @ 0]]
			f6_arg0.clipFinished( f6_arg0.progressBarBg ) --[[ @ 0]]
		end
	},
	DoubleWeaponXP = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WeaponLevelMeter.__onClose = function ( f9_arg0 )
	f9_arg0.progressBarColorless:close() --[[ @ 0]]
end
 --[[ @ 0]]
