-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/classallocation" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/menuchooseclass/chooseclasswidget" ) --[[ @ 0]]
require( "x64:10b4c2a15a62cf08" ) --[[ @ 0]]
require( "x64:799377e746b9e938" ) --[[ @ 0]]
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "x64:47933ec9a45ffdd9" ) --[[ @ 0]]

CoD.ChooseClassSlideOutInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.__defaultWidth = 1920 --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.__defaultHeight = 600 --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.SetInGameMenuSessionMode( f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "BonuscardModifiedSlotEnum", CoD.BonuscardUtility.BonuscardModifiedSlotType.NONE ) --[[ @ 0]]
	self:setClass( CoD.ChooseClassSlideOutInternal ) --[[ @ 0]]
	self.id = "ChooseClassSlideOutInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ChooseClassWidget = CoD.ChooseClassWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -1080, 0 ) --[[ @ 0]]
	ChooseClassWidget:setZoom( -85 ) --[[ @ 0]]
	self:addElement( ChooseClassWidget ) --[[ @ 0]]
	self.ChooseClassWidget = ChooseClassWidget --[[ @ 0]]
	
	local allocation = CoD.ClassAllocation.new( f1_arg0, f1_arg1, 1, 1, -619, -172, 0, 0, 9, 33 ) --[[ @ 0]]
	allocation:registerEventHandler( "update_class", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		UpdateAllocationBar( self, element, f1_arg1 ) --[[ @ 0]]
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( allocation ) --[[ @ 0]]
	self.allocation = allocation --[[ @ 0]]
	
	local ClassList = LUI.UIList.new( f1_arg0, f1_arg1, 0, 0, nil, true, true, false, false ) --[[ @ 0]]
	ClassList:setLeftRight( 0.5, 0.5, -85, 85 ) --[[ @ 0]]
	ClassList:setTopBottom( 0, 0, 0, 35 ) --[[ @ 0]]
	ClassList:setWidgetType( CoD.SelectClassListButton ) --[[ @ 0]]
	ClassList:setSpacing( 0 ) --[[ @ 0]]
	ClassList:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ClassList:setHorizontalPips( CoD.CommonScalingListHorizontalPips ) --[[ @ 0]]
	ClassList:setDataSource( "ChooseClass_InGame" ) --[[ @ 0]]
	ClassList:registerEventHandler( "list_active_changed", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, element ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	self.__on_menuOpened_ClassList = function ( f4_arg0, f4_arg1, f4_arg2, f4_arg3 )
		local f4_local0 = ClassList --[[ @ 0]]
		if not IsElementPropertyValue( f4_local0, "_receivedMenuOpen", true ) then
			SetElementProperty( f4_local0, "_receivedMenuOpen", true ) --[[ @ 0]]
			CoD.CACUtility.SetActiveListItemToSelectedClass( f4_arg1, f4_arg2, f4_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_ClassList ) --[[ @ 0]]
	ClassList:subscribeToGlobalModel( f1_arg1, "PerController", "StartMenu_Main.ShowClassSelect", function ( model )
		local f5_local0 = ClassList --[[ @ 0]]
		if IsPC() then
			CoD.CACUtility.SetActiveListItemToSelectedClass( f1_arg1, f1_arg0, f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClassList ) --[[ @ 0]]
	self.ClassList = ClassList --[[ @ 0]]
	
	local focusBlocker = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( focusBlocker ) --[[ @ 0]]
	self.focusBlocker = focusBlocker --[[ @ 0]]
	
	local LB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, -300, -100, 0, 0, 1, 35 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	local RB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, 100, 300, 0, 0, 1, 35 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	local PreviewMWheelFocusable = nil --[[ @ 0]]
	
	PreviewMWheelFocusable = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 0, 0, 1920, 0, 0, 0, 600 ) --[[ @ 0]]
	PreviewMWheelFocusable:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = PreviewMWheelFocusable --[[ @ 0]]
	local ClassName = PreviewMWheelFocusable.subscribeToModel --[[ @ 0]]
	local ClassPClist = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ClassName( f1_local8, ClassPClist.LastInput, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PreviewMWheelFocusable:linkToElementModel( PreviewMWheelFocusable, nil, true, function ( model, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PreviewMWheelFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	PreviewMWheelFocusable:registerEventHandler( "lose_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.loseFocus then
			f10_local0 = element:loseFocus( event ) --[[ @ 0]]
		elseif element.super.loseFocus then
			f10_local0 = element.super:loseFocus( event ) --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PreviewMWheelFocusable, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.ClassPClist, controller, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PreviewMWheelFocusable, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.ClassPClist, controller, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PreviewMWheelFocusable, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.CACUtility.IsCurrentClassLocked( menu, controller ) then
			CoD.PCUtility.ConfirmChangeClass( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.CACUtility.IsCurrentClassLocked( menu, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PreviewMWheelFocusable ) --[[ @ 0]]
	self.PreviewMWheelFocusable = PreviewMWheelFocusable --[[ @ 0]]
	
	ClassName = nil --[[ @ 0]]
	
	ClassName = LUI.UIText.new( 0.5, 0.5, -270, 270, 0.5, 0.5, -294.5, -274.5 ) --[[ @ 0]]
	ClassName:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	ClassName:setAlpha( 0 ) --[[ @ 0]]
	ClassName:setTTF( "notosans_regular" ) --[[ @ 0]]
	ClassName:setLetterSpacing( 2 ) --[[ @ 0]]
	ClassName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ClassName:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( ClassName ) --[[ @ 0]]
	self.ClassName = ClassName --[[ @ 0]]
	
	f1_local8 = nil --[[ @ 0]]
	
	ClassPClist = LUI.UIList.new( f1_arg0, f1_arg1, -1, 0, nil, false, false, false, false ) --[[ @ 0]]
	ClassPClist:setLeftRight( 0.5, 0.5, -576.5, 576.5 ) --[[ @ 0]]
	ClassPClist:setTopBottom( 0.5, 0.5, -348.5, -313.5 ) --[[ @ 0]]
	ClassPClist:setAlpha( 0 ) --[[ @ 0]]
	ClassPClist:setWidgetType( CoD.PC_ChooseClassTabs ) --[[ @ 0]]
	ClassPClist:setHorizontalCount( 18 ) --[[ @ 0]]
	ClassPClist:setSpacing( -1 ) --[[ @ 0]]
	ClassPClist:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	ClassPClist:setDataSource( "ChooseClass_InGame" ) --[[ @ 0]]
	ClassPClist:linkToElementModel( ClassPClist, nil, true, function ( model, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ClassPClist:registerEventHandler( "list_active_changed", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, element ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f1_arg1, self.ClassList, element ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	ClassPClist:registerEventHandler( "lose_list_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, element ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f1_arg1, self.ClassList, element ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	ClassPClist:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, element ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f1_arg1, self.ClassList, element ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	ClassPClist:registerEventHandler( "gain_focus", function ( element, event )
		local f21_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f21_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f21_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f21_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ClassPClist, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCurrentClassLocked( menu, controller ) then
			CoD.PCUtility.ConfirmChangeClass( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCurrentClassLocked( menu, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	ClassPClist:subscribeToGlobalModel( f1_arg1, "PerController", "StartMenu_Main.ShowClassSelect", function ( model )
		local f24_local0 = ClassPClist --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, f24_local0 ) --[[ @ 0]]
		CoD.CACUtility.SetActiveListItemToSelectedClass( f1_arg1, f1_arg0, f24_local0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ClassPClist ) --[[ @ 0]]
	self.ClassPClist = ClassPClist --[[ @ 0]]
	
	ChooseClassWidget:linkToElementModel( ClassList, nil, false, function ( model )
		ChooseClassWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	allocation:linkToElementModel( ClassList, nil, false, function ( model )
		allocation:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ClassName:linkToElementModel( ClassList, "customClassName", true, function ( model )
		local f27_local0 = model:get() --[[ @ 0]]
		if f27_local0 ~= nil then
			ClassName:setText( ConvertToUpperString( f27_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "DefaultStateKBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f29_arg0, f29_arg1 )
		f29_arg1.menu = f29_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f29_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	local f1_local12 = self.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13.LastInput, function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f31_arg2, f31_arg3, f31_arg4 )
		if IsPC() then
			CoD.GridAndListUtility.RefreshActiveItem( self.ClassList ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ChooseClassWidget.id = "ChooseClassWidget" --[[ @ 0]]
	ClassList.id = "ClassList" --[[ @ 0]]
	focusBlocker.id = "focusBlocker" --[[ @ 0]]
	if CoD.isPC then
		PreviewMWheelFocusable.id = "PreviewMWheelFocusable" --[[ @ 0]]
	end
	ClassPClist.id = "ClassPClist" --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_ClassList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local12 = self --[[ @ 0]]
	if IsPC() then
		SetElementProperty( self.focusBlocker, "_yieldFocus", false ) --[[ @ 0]]
		DisableKeyboardNavigationByElement( self.focusBlocker ) --[[ @ 0]]
		DisableKeyboardNavigationByElement( self.ChooseClassWidget ) --[[ @ 0]]
		CoD.BaseUtility.SetupChooseClassAndReturnOnCustomFunction( f1_arg0, self, self.ClassList, f1_arg1, "_chooseClass" ) --[[ @ 0]]
		CoD.PCUtility.SetForceMouseEventDispatch( self, true ) --[[ @ 0]]
	else
		SetElementProperty( self.focusBlocker, "_yieldFocus", false ) --[[ @ 0]]
		DisableKeyboardNavigationByElement( self.focusBlocker ) --[[ @ 0]]
		DisableKeyboardNavigationByElement( self.ChooseClassWidget ) --[[ @ 0]]
		CoD.BaseUtility.SetupChooseClassAndReturnOnCustomFunction( f1_arg0, self, self.ClassList, f1_arg1, "_chooseClass" ) --[[ @ 0]]
	end
	f1_local12 = ClassList --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.ActivateListPCSelectionBehavior( f1_local12 ) --[[ @ 0]]
		SetElementProperty( f1_local12, "__gridKeyboardNavDisabled", true ) --[[ @ 0]]
		CoD.GridAndListUtility.AddBumperNavigation( f1_arg0, f1_local12, f1_arg1 ) --[[ @ 0]]
	else
		CoD.GridAndListUtility.AddBumperNavigation( f1_arg0, f1_local12, f1_arg1 ) --[[ @ 0]]
	end
	f1_local12 = PreviewMWheelFocusable --[[ @ 0]]
	SetElementProperty( f1_local12, "_yieldFocus", nil ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( f1_local12 ) --[[ @ 0]]
	f1_local12 = ClassPClist --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.ActivateListPCSelectionBehavior( f1_local12 ) --[[ @ 0]]
		CoD.GridAndListUtility.AddKeyboardGridTabNavigation( f1_arg0, f1_local12, f1_arg1 ) --[[ @ 0]]
		CoD.GridAndListUtility.DisableListActiveOnFocus( f1_local12 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.__resetProperties = function ( f33_arg0 )
	f33_arg0.ClassPClist:completeAnimation() --[[ @ 0]]
	f33_arg0.ClassList:completeAnimation() --[[ @ 0]]
	f33_arg0.ClassName:completeAnimation() --[[ @ 0]]
	f33_arg0.ChooseClassWidget:completeAnimation() --[[ @ 0]]
	f33_arg0.ClassPClist:setAlpha( 0 ) --[[ @ 0]]
	f33_arg0.ClassList:setAlpha( 1 ) --[[ @ 0]]
	f33_arg0.ClassName:setAlpha( 0 ) --[[ @ 0]]
	f33_arg0.ChooseClassWidget:setTopBottom( 1, 1, -1080, 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	DefaultStateKBM = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f35_arg0.ChooseClassWidget:completeAnimation() --[[ @ 0]]
			f35_arg0.ChooseClassWidget:setTopBottom( 1, 1, -600, 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.ChooseClassWidget ) --[[ @ 0]]
			f35_arg0.ClassList:completeAnimation() --[[ @ 0]]
			f35_arg0.ClassList:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.ClassList ) --[[ @ 0]]
			f35_arg0.ClassName:completeAnimation() --[[ @ 0]]
			f35_arg0.ClassName:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.ClassName ) --[[ @ 0]]
			f35_arg0.ClassPClist:completeAnimation() --[[ @ 0]]
			f35_arg0.ClassPClist:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.ClassPClist ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ChooseClassSlideOutInternal.__onClose = function ( f36_arg0 )
	f36_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f36_arg0.ChooseClassWidget:close() --[[ @ 0]]
	f36_arg0.allocation:close() --[[ @ 0]]
	f36_arg0.ClassName:close() --[[ @ 0]]
	f36_arg0.ClassList:close() --[[ @ 0]]
	f36_arg0.focusBlocker:close() --[[ @ 0]]
	f36_arg0.LB:close() --[[ @ 0]]
	f36_arg0.RB:close() --[[ @ 0]]
	f36_arg0.PreviewMWheelFocusable:close() --[[ @ 0]]
	f36_arg0.ClassPClist:close() --[[ @ 0]]
end
 --[[ @ 0]]
