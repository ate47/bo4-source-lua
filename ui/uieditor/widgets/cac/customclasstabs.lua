-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]
require( "x64:a22e4c82c4ffe1a" ) --[[ @ 0]]
require( "x64:314ab47ffb48a077" ) --[[ @ 0]]

CoD.CustomClassTabs = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CustomClassTabs.__defaultWidth = 1920 --[[ @ 0]]
CoD.CustomClassTabs.__defaultHeight = 98 --[[ @ 0]]
CoD.CustomClassTabs.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitGlobalModel( "CACCurrentActiveTabIndex", 1 ) --[[ @ 0]]
	self:setClass( CoD.CustomClassTabs ) --[[ @ 0]]
	self.id = "CustomClassTabs" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TabBackingBlur = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 52, 89 ) --[[ @ 0]]
	TabBackingBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	TabBackingBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( TabBackingBlur ) --[[ @ 0]]
	self.TabBackingBlur = TabBackingBlur --[[ @ 0]]
	
	local TabBackingTint = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 52, 89 ) --[[ @ 0]]
	TabBackingTint:setRGB( 0.05, 0.05, 0.05 ) --[[ @ 0]]
	TabBackingTint:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( TabBackingTint ) --[[ @ 0]]
	self.TabBackingTint = TabBackingTint --[[ @ 0]]
	
	local f1_local3 = nil --[[ @ 0]]
	self.NoiseTiledBacking = LUI.UIElement.createFake() --[[ @ 0]]
	
	local RB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, 695, 895, 0, 0, 53, 87 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	local LB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, -895, -695, 0, 0, 53, 87 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	local TabBottomLine = LUI.UIImage.new( 0.5, 0.5, -960, 960, 0, 0, 86, 90 ) --[[ @ 0]]
	TabBottomLine:setAlpha( 0.08 ) --[[ @ 0]]
	TabBottomLine:setImage( RegisterImage( @"uie_ui_menu_common_tab_line_bottom" ) ) --[[ @ 0]]
	self:addElement( TabBottomLine ) --[[ @ 0]]
	self.TabBottomLine = TabBottomLine --[[ @ 0]]
	
	local right = nil --[[ @ 0]]
	
	right = CoD.PC_TabsArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, 720, 780, 0.5, 0.5, 2, 42 ) --[[ @ 0]]
	right:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CACUtility.IsLastCACTabInRowActive( f1_arg1, self.grid )
			end
		}
	} ) --[[ @ 0]]
	local grid = right --[[ @ 0]]
	local left = right.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	left( grid, f1_local10.CACCurrentActiveTabIndex, function ( f3_arg0 )
		f1_arg0:updateElementState( right, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "CACCurrentActiveTabIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	right:setAlpha( 0 ) --[[ @ 0]]
	right:setZRot( 180 ) --[[ @ 0]]
	right:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( right, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		CoD.GridAndListUtility.DoBumperGridButton( menu, controller, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( right ) --[[ @ 0]]
	self.right = right --[[ @ 0]]
	
	left = nil --[[ @ 0]]
	
	left = CoD.PC_TabsArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -780, -720, 0.5, 0.5, 2, 42 ) --[[ @ 0]]
	left:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CACUtility.IsFirstCACTabInRowActive( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local10 = left --[[ @ 0]]
	grid = left.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	grid( f1_local10, f1_local11.CACCurrentActiveTabIndex, function ( f8_arg0 )
		f1_arg0:updateElementState( left, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "CACCurrentActiveTabIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	left:setAlpha( 0 ) --[[ @ 0]]
	left:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( left, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		CoD.GridAndListUtility.DoBumperGridButton( menu, controller, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( left ) --[[ @ 0]]
	self.left = left --[[ @ 0]]
	
	grid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 0, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	grid:setLeftRight( 0.5, 0.5, -690, 690 ) --[[ @ 0]]
	grid:setTopBottom( 0, 0, 52, 87 ) --[[ @ 0]]
	grid:setWidgetType( CoD.CACCustomClassListButton ) --[[ @ 0]]
	grid:setHorizontalCount( 6 ) --[[ @ 0]]
	grid:setSpacing( 0 ) --[[ @ 0]]
	grid:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	grid:setStaggeredIntroTime( 50 ) --[[ @ 0]]
	grid:setDataSource( "ChooseClassList" ) --[[ @ 0]]
	grid:registerEventHandler( "list_active_changed", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateSelectedCustomClass( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		CoD.BaseUtility.SetMenuModelToElementModel( f1_arg0, element ) --[[ @ 0]]
		UpdateButtonPromptState( f1_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		UpdateButtonPromptState( f1_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.CACUtility.UpdateLockedStateForCustomClass( f1_arg0, f1_arg1 ) --[[ @ 0]]
		CoD.CACUtility.DelayedUpdateClassWeaponModel( f1_arg0, element, f1_arg1, 10 ) --[[ @ 0]]
		CoD.CACUtility.UpdateCACCurrentActiveTabIndexValue( f1_arg1, self.grid ) --[[ @ 0]]
		CloseContextualMenu( f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	self:addElement( grid ) --[[ @ 0]]
	self.grid = grid --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ArrowShown",
			condition = function ( menu, element, event )
				return CoD.GridAndListUtility.ShowTabArrows( f1_arg1, self ) and not IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f14_arg0, f14_arg1 )
		f14_arg1.menu = f14_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f14_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f15_arg0, f15_arg1 )
		f15_arg1.menu = f15_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f15_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.LastInput, function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	if CoD.isPC then
		right.id = "right" --[[ @ 0]]
	end
	if CoD.isPC then
		left.id = "left" --[[ @ 0]]
	end
	grid.id = "grid" --[[ @ 0]]
	self.__defaultFocus = grid --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local10 = self --[[ @ 0]]
	f1_local10 = grid --[[ @ 0]]
	DisableKeyboardNavigationByElement( f1_local10 ) --[[ @ 0]]
	CoD.GridAndListUtility.AddBumperNavigation( f1_arg0, f1_local10, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.CustomClassTabs.__resetProperties = function ( f17_arg0 )
	f17_arg0.left:completeAnimation() --[[ @ 0]]
	f17_arg0.right:completeAnimation() --[[ @ 0]]
	f17_arg0.left:setAlpha( 0 ) --[[ @ 0]]
	f17_arg0.right:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CustomClassTabs.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ArrowShown = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f19_arg0.right:completeAnimation() --[[ @ 0]]
			f19_arg0.right:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.right ) --[[ @ 0]]
			f19_arg0.left:completeAnimation() --[[ @ 0]]
			f19_arg0.left:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.left ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CustomClassTabs.__onClose = function ( f20_arg0 )
	f20_arg0.RB:close() --[[ @ 0]]
	f20_arg0.LB:close() --[[ @ 0]]
	f20_arg0.right:close() --[[ @ 0]]
	f20_arg0.left:close() --[[ @ 0]]
	f20_arg0.grid:close() --[[ @ 0]]
end
 --[[ @ 0]]
