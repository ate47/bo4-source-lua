-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "x64:3e4f4fd1023f5306" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/weaponattributes/weaponattributeuberinfo" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/weaponattributestat" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/weaponattributevaluestat" ) --[[ @ 0]]

CoD.WeaponAttributes = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponAttributes.__defaultWidth = 445 --[[ @ 0]]
CoD.WeaponAttributes.__defaultHeight = 250 --[[ @ 0]]
CoD.WeaponAttributes.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponAttributes ) --[[ @ 0]]
	self.id = "WeaponAttributes" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local DamageAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 0, 0, 0, 437, 0, 0, 60, 78 ) --[[ @ 0]]
	DamageAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "damage" )
			end
		}
	} ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( DamageAttribute, "damage", true, function ( model )
		f1_arg0:updateElementState( DamageAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "damage"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DamageAttribute.attributeName:setText( LocalizeToUpperString( @"hash_6CFFC6656E99316E" ) ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( self, nil, false, function ( model )
		DamageAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( self, "damage", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			DamageAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( self, "damage", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			DamageAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DamageAttribute ) --[[ @ 0]]
	self.DamageAttribute = DamageAttribute --[[ @ 0]]
	
	local RangeAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 0, 0, 0, 437, 0, 0, 82, 100 ) --[[ @ 0]]
	RangeAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "range" )
			end
		}
	} ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( RangeAttribute, "range", true, function ( model )
		f1_arg0:updateElementState( RangeAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "range"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RangeAttribute.attributeName:setText( LocalizeToUpperString( @"hash_7470B2F1C3BDE7F4" ) ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( self, nil, false, function ( model )
		RangeAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( self, "range", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			RangeAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f10_local0, 1 ), CoD.GetVectorComponentFromString( f10_local0, 2 ), CoD.GetVectorComponentFromString( f10_local0, 3 ), CoD.GetVectorComponentFromString( f10_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( self, "range", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			RangeAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f11_local0, 1 ), CoD.GetVectorComponentFromString( f11_local0, 2 ), CoD.GetVectorComponentFromString( f11_local0, 3 ), CoD.GetVectorComponentFromString( f11_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RangeAttribute ) --[[ @ 0]]
	self.RangeAttribute = RangeAttribute --[[ @ 0]]
	
	local FireRateAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 0, 0, 0, 437, 0, 0, 104, 122 ) --[[ @ 0]]
	FireRateAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "fireRate" )
			end
		}
	} ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( FireRateAttribute, "fireRate", true, function ( model )
		f1_arg0:updateElementState( FireRateAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "fireRate"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FireRateAttribute.attributeName:setText( LocalizeToUpperString( @"hash_2A995770D23477EE" ) ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( self, nil, false, function ( model )
		FireRateAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( self, "fireRate", true, function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			FireRateAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f15_local0, 1 ), CoD.GetVectorComponentFromString( f15_local0, 2 ), CoD.GetVectorComponentFromString( f15_local0, 3 ), CoD.GetVectorComponentFromString( f15_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( self, "fireRate", true, function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			FireRateAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f16_local0, 1 ), CoD.GetVectorComponentFromString( f16_local0, 2 ), CoD.GetVectorComponentFromString( f16_local0, 3 ), CoD.GetVectorComponentFromString( f16_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FireRateAttribute ) --[[ @ 0]]
	self.FireRateAttribute = FireRateAttribute --[[ @ 0]]
	
	local AccuracyAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 0, 0, 0, 437, 0, 0, 126, 144 ) --[[ @ 0]]
	AccuracyAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "accuracy" )
			end
		}
	} ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( AccuracyAttribute, "accuracy", true, function ( model )
		f1_arg0:updateElementState( AccuracyAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "accuracy"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AccuracyAttribute.attributeName:setText( LocalizeToUpperString( @"hash_4F669512DF581896" ) ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( self, nil, false, function ( model )
		AccuracyAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( self, "accuracy", true, function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			AccuracyAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f20_local0, 1 ), CoD.GetVectorComponentFromString( f20_local0, 2 ), CoD.GetVectorComponentFromString( f20_local0, 3 ), CoD.GetVectorComponentFromString( f20_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( self, "accuracy", true, function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			AccuracyAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f21_local0, 1 ), CoD.GetVectorComponentFromString( f21_local0, 2 ), CoD.GetVectorComponentFromString( f21_local0, 3 ), CoD.GetVectorComponentFromString( f21_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AccuracyAttribute ) --[[ @ 0]]
	self.AccuracyAttribute = AccuracyAttribute --[[ @ 0]]
	
	local MagCountAttribute = CoD.WeaponAttributeValueStat.new( f1_arg0, f1_arg1, 0, 0, 151, 251, 0, 0, 154, 172 ) --[[ @ 0]]
	MagCountAttribute:mergeStateConditions( {
		{
			stateName = "PositiveAddValue",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeAddedValuePositive( self, element, f1_arg1, "magCount" )
			end
		}
	} ) --[[ @ 0]]
	MagCountAttribute:linkToElementModel( MagCountAttribute, "magCount", true, function ( model )
		f1_arg0:updateElementState( MagCountAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "magCount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MagCountAttribute:linkToElementModel( self, nil, false, function ( model )
		MagCountAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MagCountAttribute:linkToElementModel( self, "magCount", true, function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			MagCountAttribute.AttributeBaseValue:setText( GetWeaponAttributeBaseValueForAttachment( self, f25_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	MagCountAttribute:linkToElementModel( self, "magCount", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			MagCountAttribute.AttributeAddedValue:setText( GetWeaponAttributeAddedValueForAttachment( self, f26_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MagCountAttribute ) --[[ @ 0]]
	self.MagCountAttribute = MagCountAttribute --[[ @ 0]]
	
	local MagSizeAttribute = CoD.WeaponAttributeValueStat.new( f1_arg0, f1_arg1, 0, 0, 375, 475, 0, 0, 154, 172 ) --[[ @ 0]]
	MagSizeAttribute:mergeStateConditions( {
		{
			stateName = "PositiveAddValue",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeAddedValuePositive( self, element, f1_arg1, "magSize" )
			end
		}
	} ) --[[ @ 0]]
	MagSizeAttribute:linkToElementModel( MagSizeAttribute, "magSize", true, function ( model )
		f1_arg0:updateElementState( MagSizeAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "magSize"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MagSizeAttribute:linkToElementModel( self, nil, false, function ( model )
		MagSizeAttribute:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MagSizeAttribute:linkToElementModel( self, "magSize", true, function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			MagSizeAttribute.AttributeBaseValue:setText( GetWeaponAttributeBaseValueForAttachment( self, f30_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	MagSizeAttribute:linkToElementModel( self, "magSize", true, function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= nil then
			MagSizeAttribute.AttributeAddedValue:setText( GetWeaponAttributeAddedValueForAttachment( self, f31_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MagSizeAttribute ) --[[ @ 0]]
	self.MagSizeAttribute = MagSizeAttribute --[[ @ 0]]
	
	local MagCountName = LUI.UIText.new( 0, 0, 9, 139, 0, 0, 154, 172 ) --[[ @ 0]]
	MagCountName:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
	MagCountName:setText( LocalizeToUpperString( @"hash_CFA9EEE073FD746" ) ) --[[ @ 0]]
	MagCountName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MagCountName:setLetterSpacing( 3 ) --[[ @ 0]]
	MagCountName:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( MagCountName ) --[[ @ 0]]
	self.MagCountName = MagCountName --[[ @ 0]]
	
	local UberAttachmentName = LUI.UIText.new( 0, 0, 234, 364, 0, 0, 154, 172 ) --[[ @ 0]]
	UberAttachmentName:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
	UberAttachmentName:setText( LocalizeToUpperString( @"hash_4D3E9656E7289B9B" ) ) --[[ @ 0]]
	UberAttachmentName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	UberAttachmentName:setLetterSpacing( 3 ) --[[ @ 0]]
	UberAttachmentName:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( UberAttachmentName ) --[[ @ 0]]
	self.UberAttachmentName = UberAttachmentName --[[ @ 0]]
	
	local UberAttachmentIcon = CoD.WeaponAttributeUberInfo.new( f1_arg0, f1_arg1, 0, 0, -5, 245, 0, 0, 164, 228 ) --[[ @ 0]]
	UberAttachmentIcon:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( self, f1_arg1, "uberName" ) and not IsElementPropertyValue( menu, "_loadoutSlot", "zmStartWeapon" )
			end
		}
	} ) --[[ @ 0]]
	UberAttachmentIcon:linkToElementModel( UberAttachmentIcon, "uberName", true, function ( model )
		f1_arg0:updateElementState( UberAttachmentIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "uberName"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UberAttachmentIcon:linkToElementModel( self, nil, false, function ( model )
		UberAttachmentIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( UberAttachmentIcon ) --[[ @ 0]]
	self.UberAttachmentIcon = UberAttachmentIcon --[[ @ 0]]
	
	local MutualExclusiveWarning = CoD.MutualExclusiveWarning.new( f1_arg0, f1_arg1, 0, 0, 121, 496, 0, 0, 24, 61 ) --[[ @ 0]]
	self:addElement( MutualExclusiveWarning ) --[[ @ 0]]
	self.MutualExclusiveWarning = MutualExclusiveWarning --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WeaponAttributes.__resetProperties = function ( f36_arg0 )
	f36_arg0.MutualExclusiveWarning:completeAnimation() --[[ @ 0]]
	f36_arg0.UberAttachmentIcon:completeAnimation() --[[ @ 0]]
	f36_arg0.UberAttachmentName:completeAnimation() --[[ @ 0]]
	f36_arg0.MagCountName:completeAnimation() --[[ @ 0]]
	f36_arg0.MagSizeAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.MagCountAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.AccuracyAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.FireRateAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.RangeAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.DamageAttribute:completeAnimation() --[[ @ 0]]
	f36_arg0.MutualExclusiveWarning:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.UberAttachmentIcon:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.UberAttachmentName:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.MagCountName:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.MagSizeAttribute:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.MagCountAttribute:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.AccuracyAttribute:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.FireRateAttribute:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.RangeAttribute:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.DamageAttribute:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponAttributes.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f38_arg0.DamageAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.DamageAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.DamageAttribute ) --[[ @ 0]]
			f38_arg0.RangeAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.RangeAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.RangeAttribute ) --[[ @ 0]]
			f38_arg0.FireRateAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.FireRateAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.FireRateAttribute ) --[[ @ 0]]
			f38_arg0.AccuracyAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.AccuracyAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AccuracyAttribute ) --[[ @ 0]]
			f38_arg0.MagCountAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.MagCountAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.MagCountAttribute ) --[[ @ 0]]
			f38_arg0.MagSizeAttribute:completeAnimation() --[[ @ 0]]
			f38_arg0.MagSizeAttribute:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.MagSizeAttribute ) --[[ @ 0]]
			f38_arg0.MagCountName:completeAnimation() --[[ @ 0]]
			f38_arg0.MagCountName:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.MagCountName ) --[[ @ 0]]
			f38_arg0.UberAttachmentName:completeAnimation() --[[ @ 0]]
			f38_arg0.UberAttachmentName:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.UberAttachmentName ) --[[ @ 0]]
			f38_arg0.UberAttachmentIcon:completeAnimation() --[[ @ 0]]
			f38_arg0.UberAttachmentIcon:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.UberAttachmentIcon ) --[[ @ 0]]
			f38_arg0.MutualExclusiveWarning:completeAnimation() --[[ @ 0]]
			f38_arg0.MutualExclusiveWarning:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.MutualExclusiveWarning ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WeaponAttributes.__onClose = function ( f39_arg0 )
	f39_arg0.DamageAttribute:close() --[[ @ 0]]
	f39_arg0.RangeAttribute:close() --[[ @ 0]]
	f39_arg0.FireRateAttribute:close() --[[ @ 0]]
	f39_arg0.AccuracyAttribute:close() --[[ @ 0]]
	f39_arg0.MagCountAttribute:close() --[[ @ 0]]
	f39_arg0.MagSizeAttribute:close() --[[ @ 0]]
	f39_arg0.UberAttachmentIcon:close() --[[ @ 0]]
	f39_arg0.MutualExclusiveWarning:close() --[[ @ 0]]
end
 --[[ @ 0]]
