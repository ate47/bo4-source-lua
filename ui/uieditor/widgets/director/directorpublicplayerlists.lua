-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/menus/social/social_inviteplayerspopup" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorexpandedlobbymember" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footerbutton_partycount" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/verticallistspacer" ) --[[ @ 0]]

CoD.DirectorPublicPlayerLists = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorPublicPlayerLists.__defaultWidth = 425 --[[ @ 0]]
CoD.DirectorPublicPlayerLists.__defaultHeight = 761 --[[ @ 0]]
CoD.DirectorPublicPlayerLists.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIVerticalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 0, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Top ) --[[ @ 0]]
	self:setClass( CoD.DirectorPublicPlayerLists ) --[[ @ 0]]
	self.id = "DirectorPublicPlayerLists" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PartyCount = CoD.FooterButton_PartyCount.new( f1_arg0, f1_arg1, 0, 0, 1, 201, 0, 0, 0, 37 ) --[[ @ 0]]
	self:addElement( PartyCount ) --[[ @ 0]]
	self.PartyCount = PartyCount --[[ @ 0]]
	
	local PartyList = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	PartyList:mergeStateConditions( {
		{
			stateName = "FirstEmpty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY )
			end
		},
		{
			stateName = "EmptySearching",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	PartyList:linkToElementModel( PartyList, "clientListFlags", true, function ( model )
		f1_arg0:updateElementState( PartyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientListFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PartyList:linkToElementModel( PartyList, "info", true, function ( model )
		if PartyList["__stateValidation_info->isPartyMember"] then
			PartyList:removeSubscription( PartyList["__stateValidation_info->isPartyMember"] ) --[[ @ 0]]
			PartyList["__stateValidation_info->isPartyMember"] = nil --[[ @ 0]]
		end
		if model then
			local f6_local0 = model:get() --[[ @ 0]]
			local f6_local1 = model:get() --[[ @ 0]]
			model = f6_local0 and f6_local1.isPartyMember --[[ @ 0]]
		end
		if model then
			PartyList["__stateValidation_info->isPartyMember"] = PartyList:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( PartyList, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "info->isPartyMember"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f1_local3 = PartyList --[[ @ 0]]
	local VerticalListSpacer = PartyList.subscribeToModel --[[ @ 0]]
	local dotline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer( f1_local3, dotline["lobbyRoot.publicLobby.stage"], function ( f8_arg0 )
		f1_arg0:updateElementState( PartyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = PartyList --[[ @ 0]]
	VerticalListSpacer = PartyList.subscribeToModel --[[ @ 0]]
	dotline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer( f1_local3, dotline["lobbyRoot.lobbyNav"], function ( f9_arg0 )
		f1_arg0:updateElementState( PartyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PartyList:setLeftRight( 0, 0, 0, 425 ) --[[ @ 0]]
	PartyList:setTopBottom( 0, 0, 37, 395 ) --[[ @ 0]]
	PartyList:setWidgetType( CoD.DirectorExpandedLobbyMember ) --[[ @ 0]]
	PartyList:setVerticalCount( 5 ) --[[ @ 0]]
	PartyList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PartyList:setDataSource( "DirectorPartyListWithFirstEmpty" ) --[[ @ 0]]
	PartyList:linkToElementModel( PartyList, "clientListFlags", true, function ( model, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local3 = PartyList --[[ @ 0]]
	VerticalListSpacer = PartyList.subscribeToModel --[[ @ 0]]
	dotline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer( f1_local3, dotline["lobbyRoot.lobbyNetworkMode"], function ( f11_arg0, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = PartyList --[[ @ 0]]
	VerticalListSpacer = PartyList.subscribeToModel --[[ @ 0]]
	dotline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer( f1_local3, dotline["lobbyRoot.lobbyNav"], function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PartyList:registerEventHandler( "gain_list_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		DispatchEventToChildren( element, "update_state", f1_arg1 ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	PartyList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if AlwaysFalse() then
			CoD.DirectorUtility.PlayFrozenMomentForPartyMember( self, f1_arg0, f1_arg1, element ) --[[ @ 0]]
		end
		return f14_local0
	end ) --[[ @ 0]]
	PartyList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if AlwaysFalse() then
			CoD.DirectorUtility.PlayFrozenMomentForLocalClient( f1_arg1 ) --[[ @ 0]]
		end
		return f15_local0
	end ) --[[ @ 0]]
	PartyList:registerEventHandler( "gain_focus", function ( element, event )
		local f16_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f16_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f16_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f16_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PartyList, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and not IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			OpenOverlay( self, "Social_InvitePlayersPopup", controller, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			OpenOverlay( self, "Social_InvitePlayersPopup", controller, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) then
			OpenLobbyInspection( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and not IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_42EA47C1D2988981", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_FF0DBCF80106E7B", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( PartyList, "setHeight", function ( element, controller )
		ScaleToElementHeight( self, element, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PartyList ) --[[ @ 0]]
	self.PartyList = PartyList --[[ @ 0]]
	
	VerticalListSpacer = CoD.VerticalListSpacer.new( f1_arg0, f1_arg1, 0, 0, 4, 429, 0, 0, 395, 399 ) --[[ @ 0]]
	self:addElement( VerticalListSpacer ) --[[ @ 0]]
	self.VerticalListSpacer = VerticalListSpacer --[[ @ 0]]
	
	f1_local3 = nil --[[ @ 0]]
	self.FooterButtonAddControllerHelpContainer = LUI.UIElement.createFake() --[[ @ 0]]
	
	dotline = LUI.UIImage.new( 0, 0, 4, 425, 0, 0, 419, 425 ) --[[ @ 0]]
	dotline:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline" ) ) --[[ @ 0]]
	dotline:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	dotline:setShaderVector( 0, 1.2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( dotline ) --[[ @ 0]]
	self.dotline = dotline --[[ @ 0]]
	
	local VerticalListSpacer02 = CoD.VerticalListSpacer.new( f1_arg0, f1_arg1, 0, 0, 0, 425, 0, 0, 425, 427 ) --[[ @ 0]]
	self:addElement( VerticalListSpacer02 ) --[[ @ 0]]
	self.VerticalListSpacer02 = VerticalListSpacer02 --[[ @ 0]]
	
	local LobbyList = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	LobbyList:mergeStateConditions( {
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LobbyList:linkToElementModel( LobbyList, "clientListFlags", true, function ( model )
		f1_arg0:updateElementState( LobbyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientListFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LobbyList:linkToElementModel( LobbyList, "info", true, function ( model )
		if LobbyList["__stateValidation_info->xuid"] then
			LobbyList:removeSubscription( LobbyList["__stateValidation_info->xuid"] ) --[[ @ 0]]
			LobbyList["__stateValidation_info->xuid"] = nil --[[ @ 0]]
		end
		if model then
			local f22_local0 = model:get() --[[ @ 0]]
			local f22_local1 = model:get() --[[ @ 0]]
			model = f22_local0 and f22_local1.xuid --[[ @ 0]]
		end
		if model then
			LobbyList["__stateValidation_info->xuid"] = LobbyList:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( LobbyList, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "info->xuid"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LobbyList:linkToElementModel( LobbyList, "info", true, function ( model )
		if LobbyList["__stateValidation_info->isPartyMember"] then
			LobbyList:removeSubscription( LobbyList["__stateValidation_info->isPartyMember"] ) --[[ @ 0]]
			LobbyList["__stateValidation_info->isPartyMember"] = nil --[[ @ 0]]
		end
		if model then
			local f24_local0 = model:get() --[[ @ 0]]
			local f24_local1 = model:get() --[[ @ 0]]
			model = f24_local0 and f24_local1.isPartyMember --[[ @ 0]]
		end
		if model then
			LobbyList["__stateValidation_info->isPartyMember"] = LobbyList:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( LobbyList, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "info->isPartyMember"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f1_local8 = LobbyList --[[ @ 0]]
	local VerticalListSpacer01 = LobbyList.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer01( f1_local8, f1_local10["lobbyRoot.publicLobby.stage"], function ( f26_arg0 )
		f1_arg0:updateElementState( LobbyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = LobbyList --[[ @ 0]]
	VerticalListSpacer01 = LobbyList.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer01( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f27_arg0 )
		f1_arg0:updateElementState( LobbyList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LobbyList:setLeftRight( 0, 0, 0, 425 ) --[[ @ 0]]
	LobbyList:setTopBottom( 0, 0, 427, 785 ) --[[ @ 0]]
	LobbyList:setWidgetType( CoD.DirectorExpandedLobbyMember ) --[[ @ 0]]
	LobbyList:setVerticalCount( 5 ) --[[ @ 0]]
	LobbyList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	LobbyList:setDataSource( "DirectorLobbyNonPartyList" ) --[[ @ 0]]
	LobbyList:linkToElementModel( LobbyList, "clientListFlags", true, function ( model, f28_arg1 )
		CoD.Menu.UpdateButtonShownState( f28_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local8 = LobbyList --[[ @ 0]]
	VerticalListSpacer01 = LobbyList.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer01( f1_local8, f1_local10["lobbyRoot.lobbyNetworkMode"], function ( f29_arg0, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = LobbyList --[[ @ 0]]
	VerticalListSpacer01 = LobbyList.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	VerticalListSpacer01( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f30_arg0, f30_arg1 )
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LobbyList:registerEventHandler( "gain_list_focus", function ( element, event )
		local f31_local0 = nil --[[ @ 0]]
		DispatchEventToChildren( element, "update_state", f1_arg1 ) --[[ @ 0]]
		return f31_local0
	end ) --[[ @ 0]]
	LobbyList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f32_local0 = nil --[[ @ 0]]
		if AlwaysFalse() then
			CoD.DirectorUtility.PlayFrozenMomentForPartyMember( self, f1_arg0, f1_arg1, element ) --[[ @ 0]]
		end
		return f32_local0
	end ) --[[ @ 0]]
	LobbyList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f33_local0 = nil --[[ @ 0]]
		if AlwaysFalse() then
			CoD.DirectorUtility.PlayFrozenMomentForLocalClient( f1_arg1 ) --[[ @ 0]]
		end
		return f33_local0
	end ) --[[ @ 0]]
	LobbyList:registerEventHandler( "gain_focus", function ( element, event )
		local f34_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f34_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f34_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f34_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LobbyList, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and not IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			OpenOverlay( self, "Social_Main", controller, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			OpenOverlay( self, "Social_InvitePlayersPopup", controller, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) then
			OpenLobbyInspection( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and not IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_42EA47C1D2988981", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) and IsPC() and not IsLAN() and IsPlayerAllowedToPlayOnline( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, controller, "clientListFlags", CoD.DirectorUtility.ClientListFlags.FIRST_EMPTY ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_FF0DBCF80106E7B", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( LobbyList, "setHeight", function ( element, controller )
		ScaleToElementHeight( self, element, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( LobbyList ) --[[ @ 0]]
	self.LobbyList = LobbyList --[[ @ 0]]
	
	VerticalListSpacer01 = CoD.VerticalListSpacer.new( f1_arg0, f1_arg1, 0, 0, 0, 425, 0, 0, 785, 787 ) --[[ @ 0]]
	self:addElement( VerticalListSpacer01 ) --[[ @ 0]]
	self.VerticalListSpacer01 = VerticalListSpacer01 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ShowLobbyList",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorLobbyList( f1_arg1 )
			end
		},
		{
			stateName = "HideSplitscreenInstructions",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.IsMatchmakingInProgress( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local8( f1_local10, f1_local11["lobbyRoot.lobbyNav"], function ( f40_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f40_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local8( f1_local10, f1_local11["lobbyRoot.publicLobby.stage"], function ( f41_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f41_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PartyList.id = "PartyList" --[[ @ 0]]
	LobbyList.id = "LobbyList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorPublicPlayerLists.__resetProperties = function ( f42_arg0 )
	f42_arg0.LobbyList:completeAnimation() --[[ @ 0]]
	f42_arg0.FooterButtonAddControllerHelpContainer:completeAnimation() --[[ @ 0]]
	f42_arg0.LobbyList:setAlpha( 1 ) --[[ @ 0]]
	f42_arg0.FooterButtonAddControllerHelpContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorPublicPlayerLists.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f43_arg0.LobbyList:completeAnimation() --[[ @ 0]]
			f43_arg0.LobbyList:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.LobbyList ) --[[ @ 0]]
		end
	},
	ShowLobbyList = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f44_arg0.FooterButtonAddControllerHelpContainer:completeAnimation() --[[ @ 0]]
			f44_arg0.FooterButtonAddControllerHelpContainer:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.FooterButtonAddControllerHelpContainer ) --[[ @ 0]]
			f44_arg0.LobbyList:completeAnimation() --[[ @ 0]]
			f44_arg0.LobbyList:setAlpha( 1 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.LobbyList ) --[[ @ 0]]
		end
	},
	HideSplitscreenInstructions = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f45_arg0.FooterButtonAddControllerHelpContainer:completeAnimation() --[[ @ 0]]
			f45_arg0.FooterButtonAddControllerHelpContainer:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.FooterButtonAddControllerHelpContainer ) --[[ @ 0]]
			f45_arg0.LobbyList:completeAnimation() --[[ @ 0]]
			f45_arg0.LobbyList:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.LobbyList ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorPublicPlayerLists.__onClose = function ( f46_arg0 )
	f46_arg0.PartyCount:close() --[[ @ 0]]
	f46_arg0.PartyList:close() --[[ @ 0]]
	f46_arg0.VerticalListSpacer:close() --[[ @ 0]]
	f46_arg0.FooterButtonAddControllerHelpContainer:close() --[[ @ 0]]
	f46_arg0.VerticalListSpacer02:close() --[[ @ 0]]
	f46_arg0.LobbyList:close() --[[ @ 0]]
	f46_arg0.VerticalListSpacer01:close() --[[ @ 0]]
end
 --[[ @ 0]]
