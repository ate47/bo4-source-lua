-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "x64:36cc64e6f5d65b77" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpartyleaderonlyprompt" ) --[[ @ 0]]
require( "x64:39872a6aa619bf9" ) --[[ @ 0]]

CoD.DirectorFeaturedItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorFeaturedItem.__defaultWidth = 541 --[[ @ 0]]
CoD.DirectorFeaturedItem.__defaultHeight = 142 --[[ @ 0]]
CoD.DirectorFeaturedItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorFeaturedItem ) --[[ @ 0]]
	self.id = "DirectorFeaturedItem" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local GamemodeBackground = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	GamemodeBackground:setImage( RegisterImage( @"hash_42C6A5D3E653E02" ) ) --[[ @ 0]]
	GamemodeBackground:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	GamemodeBackground:setShaderVector( 0, 0.35, 0.19, 0, 0 ) --[[ @ 0]]
	GamemodeBackground:setShaderVector( 1, 1, 1, 0, 0 ) --[[ @ 0]]
	GamemodeBackground:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( GamemodeBackground ) --[[ @ 0]]
	self.GamemodeBackground = GamemodeBackground --[[ @ 0]]
	
	local NotFocused = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NotFocused:setRGB( 0, 0, 0 ) --[[ @ 0]]
	NotFocused:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( NotFocused ) --[[ @ 0]]
	self.NotFocused = NotFocused --[[ @ 0]]
	
	local Header = LUI.UIText.new( 0, 0, 13, 482, 0, 0, 7, 29 ) --[[ @ 0]]
	Header:setRGB( 0.14, 0.14, 0.14 ) --[[ @ 0]]
	Header:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Header:setLetterSpacing( 6 ) --[[ @ 0]]
	Header:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Header:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	Header:setBackingType( 2 ) --[[ @ 0]]
	Header:setBackingAlpha( 0.7 ) --[[ @ 0]]
	Header:setBackingXPadding( 10 ) --[[ @ 0]]
	Header:setBackingYPadding( 3 ) --[[ @ 0]]
	Header:setBackingImage( RegisterImage( @"hash_7C229CEBABEEAB0E" ) ) --[[ @ 0]]
	Header:linkToElementModel( self, "name", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			Header:setText( ToUpper( CoD.BaseUtility.LocalizeIfXHash( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Header ) --[[ @ 0]]
	self.Header = Header --[[ @ 0]]
	
	local DirectorFeatureInteractPrompt = CoD.DirectorFeatureInteractPrompt.new( f1_arg0, f1_arg1, 0, 0, 0, 550, 0, 0, 80.5, 120.5 ) --[[ @ 0]]
	DirectorFeatureInteractPrompt:linkToElementModel( self, nil, false, function ( model )
		DirectorFeatureInteractPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectorFeatureInteractPrompt ) --[[ @ 0]]
	self.DirectorFeatureInteractPrompt = DirectorFeatureInteractPrompt --[[ @ 0]]
	
	local PartyLeaderOnlyPrompt = CoD.DirectorPartyLeaderOnlyPrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -225, 225, 0, 0, -2, 22 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowForAllClients( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local FrontendFrameSelected = PartyLeaderOnlyPrompt --[[ @ 0]]
	local DoubleXPCardIconsRightAligned = PartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	DoubleXPCardIconsRightAligned( FrontendFrameSelected, f1_local8["lobbyRoot.lobbyNav"], function ( f5_arg0 )
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FrontendFrameSelected = PartyLeaderOnlyPrompt --[[ @ 0]]
	DoubleXPCardIconsRightAligned = PartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	DoubleXPCardIconsRightAligned( FrontendFrameSelected, f1_local8["lobbyRoot.gameClient.update"], function ( f6_arg0 )
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FrontendFrameSelected = PartyLeaderOnlyPrompt --[[ @ 0]]
	DoubleXPCardIconsRightAligned = PartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	DoubleXPCardIconsRightAligned( FrontendFrameSelected, f1_local8["lobbyRoot.privateClient.update"], function ( f7_arg0 )
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:linkToElementModel( PartyLeaderOnlyPrompt, "showForAllClients", true, function ( model )
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "showForAllClients"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:appendEventHandler( "on_session_start", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, f9_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:appendEventHandler( "on_session_end", function ( f10_arg0, f10_arg1 )
		f10_arg1.menu = f10_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( PartyLeaderOnlyPrompt, f10_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:linkToElementModel( self, nil, false, function ( model )
		PartyLeaderOnlyPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PartyLeaderOnlyPrompt ) --[[ @ 0]]
	self.PartyLeaderOnlyPrompt = PartyLeaderOnlyPrompt --[[ @ 0]]
	
	DoubleXPCardIconsRightAligned = CoD.DoubleXPCardIconsRightAligned.new( f1_arg0, f1_arg1, 1, 1, -129, 0, 0, 0, 0, 43 ) --[[ @ 0]]
	DoubleXPCardIconsRightAligned:linkToElementModel( self, nil, false, function ( model )
		DoubleXPCardIconsRightAligned:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DoubleXPCardIconsRightAligned ) --[[ @ 0]]
	self.DoubleXPCardIconsRightAligned = DoubleXPCardIconsRightAligned --[[ @ 0]]
	
	FrontendFrameSelected = nil --[[ @ 0]]
	
	FrontendFrameSelected = LUI.UIImage.new( 0, 1, -4, 4, 0, 1, -4, 4 ) --[[ @ 0]]
	FrontendFrameSelected:setRGB( 0.96, 0.94, 0.78 ) --[[ @ 0]]
	FrontendFrameSelected:setAlpha( 0 ) --[[ @ 0]]
	FrontendFrameSelected:setImage( RegisterImage( @"uie_ui_menu_store_focus_frame" ) ) --[[ @ 0]]
	FrontendFrameSelected:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrontendFrameSelected:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrontendFrameSelected:setupNineSliceShader( 10, 10 ) --[[ @ 0]]
	self:addElement( FrontendFrameSelected ) --[[ @ 0]]
	self.FrontendFrameSelected = FrontendFrameSelected --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Small",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "small" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "small", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "small"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "LastInput", function ( model )
		local f15_local0 = self --[[ @ 0]]
		if IsPC() and IsMouseOrKeyboard( f1_arg1 ) then
			HideWidget( self.DirectorFeatureInteractPrompt ) --[[ @ 0]]
		elseif IsPC() and IsGamepad( f1_arg1 ) then
			ShowWidget( self.DirectorFeatureInteractPrompt ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorFeaturedItem.__resetProperties = function ( f16_arg0 )
	f16_arg0.Header:completeAnimation() --[[ @ 0]]
	f16_arg0.PartyLeaderOnlyPrompt:completeAnimation() --[[ @ 0]]
	f16_arg0.NotFocused:completeAnimation() --[[ @ 0]]
	f16_arg0.FrontendFrameSelected:completeAnimation() --[[ @ 0]]
	f16_arg0.Header:setRGB( 0.14, 0.14, 0.14 ) --[[ @ 0]]
	f16_arg0.Header:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.PartyLeaderOnlyPrompt:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.NotFocused:setAlpha( 0.2 ) --[[ @ 0]]
	f16_arg0.FrontendFrameSelected:setLeftRight( 0, 1, -4, 4 ) --[[ @ 0]]
	f16_arg0.FrontendFrameSelected:setTopBottom( 0, 1, -4, 4 ) --[[ @ 0]]
	f16_arg0.FrontendFrameSelected:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorFeaturedItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f17_arg0.NotFocused:completeAnimation() --[[ @ 0]]
			f17_arg0.NotFocused:setAlpha( 0.5 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.NotFocused ) --[[ @ 0]]
			f17_arg0.Header:completeAnimation() --[[ @ 0]]
			f17_arg0.Header:setRGB( 0.14, 0.14, 0.14 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Header ) --[[ @ 0]]
			f17_arg0.PartyLeaderOnlyPrompt:completeAnimation() --[[ @ 0]]
			f17_arg0.PartyLeaderOnlyPrompt:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.PartyLeaderOnlyPrompt ) --[[ @ 0]]
		end,
		Active = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f18_arg0.Header:completeAnimation() --[[ @ 0]]
			f18_arg0.Header:setAlpha( 1 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Header ) --[[ @ 0]]
		end,
		ActiveAndFocus = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.NotFocused:completeAnimation() --[[ @ 0]]
			f19_arg0.NotFocused:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.NotFocused ) --[[ @ 0]]
		end,
		GainActiveAndFocus = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f20_local0 = function ( f21_arg0 )
				f20_arg0.NotFocused:beginAnimation( 200 ) --[[ @ 0]]
				f20_arg0.NotFocused:setAlpha( 0 ) --[[ @ 0]]
				f20_arg0.NotFocused:registerEventHandler( "interrupted_keyframe", f20_arg0.clipInterrupted ) --[[ @ 0]]
				f20_arg0.NotFocused:registerEventHandler( "transition_complete_keyframe", f20_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f20_arg0.NotFocused:completeAnimation() --[[ @ 0]]
			f20_arg0.NotFocused:setAlpha( 0.5 ) --[[ @ 0]]
			f20_local0( f20_arg0.NotFocused ) --[[ @ 0]]
			f20_arg0.Header:completeAnimation() --[[ @ 0]]
			f20_arg0.Header:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Header ) --[[ @ 0]]
		end,
		Focus = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.NotFocused:completeAnimation() --[[ @ 0]]
			f22_arg0.NotFocused:setAlpha( 0.2 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.NotFocused ) --[[ @ 0]]
			f22_arg0.FrontendFrameSelected:completeAnimation() --[[ @ 0]]
			f22_arg0.FrontendFrameSelected:setLeftRight( -0, 1, -4, 4 ) --[[ @ 0]]
			f22_arg0.FrontendFrameSelected:setTopBottom( -0, 1, -4, 4 ) --[[ @ 0]]
			f22_arg0.FrontendFrameSelected:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.FrontendFrameSelected ) --[[ @ 0]]
		end
	},
	Small = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.Header:completeAnimation() --[[ @ 0]]
			f23_arg0.Header:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Header ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.DirectorFeaturedItem.__clipsPerState.DefaultState.Focus = nil --[[ @ 0]]
end
CoD.DirectorFeaturedItem.__onClose = function ( f24_arg0 )
	f24_arg0.Header:close() --[[ @ 0]]
	f24_arg0.DirectorFeatureInteractPrompt:close() --[[ @ 0]]
	f24_arg0.PartyLeaderOnlyPrompt:close() --[[ @ 0]]
	f24_arg0.DoubleXPCardIconsRightAligned:close() --[[ @ 0]]
end
 --[[ @ 0]]
