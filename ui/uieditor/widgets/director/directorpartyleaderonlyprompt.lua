-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
CoD.DirectorPartyLeaderOnlyPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorPartyLeaderOnlyPrompt.__defaultWidth = 200 --[[ @ 0]]
CoD.DirectorPartyLeaderOnlyPrompt.__defaultHeight = 24 --[[ @ 0]]
CoD.DirectorPartyLeaderOnlyPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorPartyLeaderOnlyPrompt ) --[[ @ 0]]
	self.id = "DirectorPartyLeaderOnlyPrompt" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PartyLeaderOnlyPrompt = LUI.UIText.new( 0, 1, 0, 0, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5B71C5E80EBFDD82" ) ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setLetterSpacing( 2 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setBackingType( 2 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setBackingAlpha( 0.5 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setBackingXPadding( 4 ) --[[ @ 0]]
	PartyLeaderOnlyPrompt:setBackingYPadding( 1 ) --[[ @ 0]]
	self:addElement( PartyLeaderOnlyPrompt ) --[[ @ 0]]
	self.PartyLeaderOnlyPrompt = PartyLeaderOnlyPrompt --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return true
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not IsLobbyHostOfCurrentMenu()
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "on_session_start", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f4_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "on_session_end", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f5_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = self --[[ @ 0]]
	local f1_local3 = self.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.lobbyNav"], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.gameClient.update"], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.privateClient.update"], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorPartyLeaderOnlyPrompt.__resetProperties = function ( f9_arg0 )
	f9_arg0.PartyLeaderOnlyPrompt:completeAnimation() --[[ @ 0]]
	f9_arg0.PartyLeaderOnlyPrompt:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorPartyLeaderOnlyPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.PartyLeaderOnlyPrompt:completeAnimation() --[[ @ 0]]
			f10_arg0.PartyLeaderOnlyPrompt:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.PartyLeaderOnlyPrompt ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f11_arg0.PartyLeaderOnlyPrompt:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyLeaderOnlyPrompt:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.PartyLeaderOnlyPrompt ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
