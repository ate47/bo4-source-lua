-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]
require( "x64:37113d6053cc9f6" ) --[[ @ 0]]
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]

CoD.DirectorFeaturedAccentCarousel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.__defaultWidth = 581 --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.__defaultHeight = 38 --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIHorizontalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 0, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Center ) --[[ @ 0]]
	self:setClass( CoD.DirectorFeaturedAccentCarousel ) --[[ @ 0]]
	self.id = "DirectorFeaturedAccentCarousel" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0, 0, -161, 39, 0, 0, 0, 34 ) --[[ @ 0]]
	LB:setRGB( 0.66, 0.63, 0.52 ) --[[ @ 0]]
	LB:setAlpha( 0.45 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	local LeftArrow = nil --[[ @ 0]]
	
	LeftArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, -251.5, -184.5, 0, 0, -4, 41 ) --[[ @ 0]]
	LeftArrow:mergeStateConditions( {
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LeftArrow:appendEventHandler( "input_source_changed", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( LeftArrow, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local RightArrow = LeftArrow --[[ @ 0]]
	local PipsGrid = LeftArrow.subscribeToModel --[[ @ 0]]
	local RB = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	PipsGrid( RightArrow, RB.LastInput, function ( f4_arg0 )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftArrow:setZRot( 180 ) --[[ @ 0]]
	LeftArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	LeftArrow.ControllerImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	LeftArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.PipsGrid, controller, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( LeftArrow ) --[[ @ 0]]
	self.LeftArrow = LeftArrow --[[ @ 0]]
	
	PipsGrid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, -19, 0, nil, nil, true, false, false, false ) --[[ @ 0]]
	PipsGrid:setLeftRight( 0, 0, 106, 475 ) --[[ @ 0]]
	PipsGrid:setTopBottom( 0, 0, 8, 30 ) --[[ @ 0]]
	PipsGrid:setWidgetType( CoD.DirectorFeaturedPip ) --[[ @ 0]]
	PipsGrid:setHorizontalCount( 10 ) --[[ @ 0]]
	PipsGrid:setSpacing( -19 ) --[[ @ 0]]
	PipsGrid:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PipsGrid:setDataSource( "DirectorHomeButtons" ) --[[ @ 0]]
	PipsGrid:registerEventHandler( "list_active_changed", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		CoD.MOTDUtility.FeatureCard_MarkAsViewed( self, f1_arg1, element ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( PipsGrid ) --[[ @ 0]]
	self.PipsGrid = PipsGrid --[[ @ 0]]
	
	RightArrow = nil --[[ @ 0]]
	
	RightArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, 184.5, 251.5, 0, 0, -4, 41 ) --[[ @ 0]]
	RightArrow:mergeStateConditions( {
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	RightArrow:appendEventHandler( "input_source_changed", function ( f10_arg0, f10_arg1 )
		f10_arg1.menu = f10_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( RightArrow, f10_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = RightArrow --[[ @ 0]]
	RB = RightArrow.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	RB( f1_local6, f1_local7.LastInput, function ( f11_arg0 )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	RightArrow.ControllerImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	RightArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.PipsGrid, controller, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightArrow ) --[[ @ 0]]
	self.RightArrow = RightArrow --[[ @ 0]]
	
	RB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0, 0, 542, 742, 0, 0, 0, 34 ) --[[ @ 0]]
	RB:setRGB( 0.66, 0.63, 0.52 ) --[[ @ 0]]
	RB:setAlpha( 0.45 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ShowTriggers",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f17_arg0, f17_arg1 )
		f17_arg1.menu = f17_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f17_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local7, f1_local8.LastInput, function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	if CoD.isPC then
		LeftArrow.id = "LeftArrow" --[[ @ 0]]
	end
	PipsGrid.id = "PipsGrid" --[[ @ 0]]
	if CoD.isPC then
		RightArrow.id = "RightArrow" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local6 = self --[[ @ 0]]
	CoD.BaseUtility.SetUpProcessListElementOnCustomFunction( f1_arg0, self, self.PipsGrid, f1_arg1, "_activateFeaturedWidget" ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( LeftArrow ) --[[ @ 0]]
	f1_local6 = PipsGrid --[[ @ 0]]
	CoD.GridAndListUtility.AddBumperNavigationDontProcessAction( f1_arg0, f1_local6, f1_arg1 ) --[[ @ 0]]
	CoD.GridAndListUtility.CycleThroughItems( f1_arg0, f1_arg1, f1_local6, 3 ) --[[ @ 0]]
	CoD.DirectorUtility.AddFeaturedWidgetListAction( f1_arg0, f1_local6, f1_arg1 ) --[[ @ 0]]
	SetElementProperty( f1_local6, "__loopOnSameRow", true ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( RightArrow ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.__resetProperties = function ( f19_arg0 )
	f19_arg0.PipsGrid:completeAnimation() --[[ @ 0]]
	f19_arg0.PipsGrid:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f21_arg0.PipsGrid:completeAnimation() --[[ @ 0]]
			f21_arg0.PipsGrid:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.PipsGrid ) --[[ @ 0]]
		end
	},
	ShowTriggers = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorFeaturedAccentCarousel.__onClose = function ( f23_arg0 )
	f23_arg0.LB:close() --[[ @ 0]]
	f23_arg0.LeftArrow:close() --[[ @ 0]]
	f23_arg0.PipsGrid:close() --[[ @ 0]]
	f23_arg0.RightArrow:close() --[[ @ 0]]
	f23_arg0.RB:close() --[[ @ 0]]
end
 --[[ @ 0]]
