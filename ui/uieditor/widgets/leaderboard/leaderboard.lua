-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/leaderboard/leaderboardheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/leaderboard/leaderboardrow" ) --[[ @ 0]]

CoD.Leaderboard = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Leaderboard.__defaultWidth = 1170 --[[ @ 0]]
CoD.Leaderboard.__defaultHeight = 690 --[[ @ 0]]
CoD.Leaderboard.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Leaderboard ) --[[ @ 0]]
	self.id = "Leaderboard" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LeaderboardRows = LUI.UIList.new( f1_arg0, f1_arg1, 4, 0, nil, false, false, false, false ) --[[ @ 0]]
	LeaderboardRows:setLeftRight( 0, 0, 0, 1170 ) --[[ @ 0]]
	LeaderboardRows:setTopBottom( 0, 0, 42, 758 ) --[[ @ 0]]
	LeaderboardRows:setWidgetType( CoD.LeaderboardRow ) --[[ @ 0]]
	LeaderboardRows:setVerticalCount( 18 ) --[[ @ 0]]
	LeaderboardRows:setSpacing( 4 ) --[[ @ 0]]
	LeaderboardRows:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	LeaderboardRows:setDataSource( "LeaderboardRows" ) --[[ @ 0]]
	LeaderboardRows:appendEventHandler( "input_source_changed", function ( f2_arg0, f2_arg1 )
		f2_arg1.menu = f2_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local LoadingText = LeaderboardRows --[[ @ 0]]
	local LeaderboardHeader = LeaderboardRows.subscribeToModel --[[ @ 0]]
	local LeaderboardEmptyText = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	LeaderboardHeader( LoadingText, LeaderboardEmptyText.LastInput, function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeaderboardRows:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.LeaderboardUtility.LeaderboardEnablePCacheBuffer( self, element, f1_arg1 ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	LeaderboardRows:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.LeaderboardUtility.LeaderboardDisablePCacheBuffer( self, element, f1_arg1 ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	LeaderboardRows:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeaderboardRows, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"], nil, function ( element, menu, controller, model )
		if IsSelfInState( self, "DefaultState" ) and not IsRepeatButtonPress( model ) then
			PlaySoundAlias( "uin_paint_decal_nav" ) --[[ @ 0]]
			CoD.LeaderboardUtility.LeaderboardPageUp( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsSelfInState( self, "DefaultState" ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"hash_77630B08CE7BF317", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeaderboardRows, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"], nil, function ( element, menu, controller, model )
		if IsSelfInState( self, "DefaultState" ) and not IsRepeatButtonPress( model ) then
			PlaySoundAlias( "uin_paint_decal_nav" ) --[[ @ 0]]
			CoD.LeaderboardUtility.LeaderboardPageDown( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsSelfInState( self, "DefaultState" ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_35B6BF6242A52D2", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeaderboardRows, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if IsSelfInState( self, "DefaultState" ) then
			PlaySoundAlias( "uin_paint_decal_nav" ) --[[ @ 0]]
			CoD.LeaderboardUtility.LeaderboardGoToTopOfList( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsSelfInState( self, "DefaultState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_5973DD79B6545E80", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeaderboardRows, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsSelfInState( self, "DefaultState" ) and IsGamepad( controller ) then
			CoD.LeaderboardUtility.LeaderboardOpenPlayerDetails( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsSelfInState( self, "DefaultState" ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( LeaderboardRows ) --[[ @ 0]]
	self.LeaderboardRows = LeaderboardRows --[[ @ 0]]
	
	LeaderboardHeader = CoD.LeaderboardHeader.new( f1_arg0, f1_arg1, 0, 0, 0, 1170, 0, 0, 0, 36 ) --[[ @ 0]]
	LeaderboardHeader:subscribeToGlobalModel( f1_arg1, "LeaderboardHeader", nil, function ( model )
		LeaderboardHeader:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( LeaderboardHeader ) --[[ @ 0]]
	self.LeaderboardHeader = LeaderboardHeader --[[ @ 0]]
	
	LoadingText = LUI.UIText.new( 0.5, 0.5, -82.5, 82.5, 0.5, 0.5, -14, 14 ) --[[ @ 0]]
	LoadingText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	LoadingText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/lb_loading" ) ) --[[ @ 0]]
	LoadingText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	LoadingText:setLetterSpacing( 2 ) --[[ @ 0]]
	LoadingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	LoadingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( LoadingText ) --[[ @ 0]]
	self.LoadingText = LoadingText --[[ @ 0]]
	
	LeaderboardEmptyText = LUI.UIText.new( 0.5, 0.5, -331, 331, 0.5, 0.5, -14, 14 ) --[[ @ 0]]
	LeaderboardEmptyText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	LeaderboardEmptyText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_601BBC59F370DA3F" ) ) --[[ @ 0]]
	LeaderboardEmptyText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	LeaderboardEmptyText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	LeaderboardEmptyText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( LeaderboardEmptyText ) --[[ @ 0]]
	self.LeaderboardEmptyText = LeaderboardEmptyText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "UpdatingLeaderboard",
			condition = function ( menu, element, event )
				return CoD.LeaderboardUtility.IsLeaderboardUpdating()
			end
		},
		{
			stateName = "EmptyLeaderboard",
			condition = function ( menu, element, event )
				return CoD.LeaderboardUtility.IsLeaderboardEmpty()
			end
		}
	} ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.LeaderboardRows.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.status, function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "status"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.LeaderboardRows.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.totalCount, function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "totalCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f20_arg2, f20_arg3, f20_arg4 )
		if IsInDefaultState( element ) then
			CoD.LeaderboardUtility.LeaderboardUpdateHeaderModel( self, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( f1_arg0, controller ) --[[ @ 0]]
		else
			UpdateAllMenuButtonPrompts( f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeaderboardRows.id = "LeaderboardRows" --[[ @ 0]]
	self.__defaultFocus = LeaderboardRows --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local6 = self --[[ @ 0]]
	CoD.LeaderboardUtility.LeaderboardListGridUpdated( self, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.Leaderboard.__resetProperties = function ( f21_arg0 )
	f21_arg0.LoadingText:completeAnimation() --[[ @ 0]]
	f21_arg0.LeaderboardEmptyText:completeAnimation() --[[ @ 0]]
	f21_arg0.LeaderboardRows:completeAnimation() --[[ @ 0]]
	f21_arg0.LoadingText:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.LeaderboardEmptyText:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.LeaderboardRows:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Leaderboard.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.LoadingText:completeAnimation() --[[ @ 0]]
			f22_arg0.LoadingText:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.LoadingText ) --[[ @ 0]]
			f22_arg0.LeaderboardEmptyText:completeAnimation() --[[ @ 0]]
			f22_arg0.LeaderboardEmptyText:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.LeaderboardEmptyText ) --[[ @ 0]]
		end
	},
	UpdatingLeaderboard = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f23_arg0.LeaderboardRows:completeAnimation() --[[ @ 0]]
			f23_arg0.LeaderboardRows:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.LeaderboardRows ) --[[ @ 0]]
			f23_arg0.LeaderboardEmptyText:completeAnimation() --[[ @ 0]]
			f23_arg0.LeaderboardEmptyText:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.LeaderboardEmptyText ) --[[ @ 0]]
		end
	},
	EmptyLeaderboard = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f24_arg0.LeaderboardRows:completeAnimation() --[[ @ 0]]
			f24_arg0.LeaderboardRows:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.LeaderboardRows ) --[[ @ 0]]
			f24_arg0.LoadingText:completeAnimation() --[[ @ 0]]
			f24_arg0.LoadingText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.LoadingText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Leaderboard.__onClose = function ( f25_arg0 )
	f25_arg0.LeaderboardRows:close() --[[ @ 0]]
	f25_arg0.LeaderboardHeader:close() --[[ @ 0]]
end
 --[[ @ 0]]
