-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/menus/craft/emblemeditor/emblemchooseicon" ) --[[ @ 0]]
require( "ui/uieditor/menus/craft/emblemeditor/emblemeditormaterialpicker" ) --[[ @ 0]]
require( "ui/uieditor/menus/craft/emblemeditor/emblemiconcolorpicker" ) --[[ @ 0]]
require( "ui/uieditor/widgets/backgroundframes/genericmenuframe" ) --[[ @ 0]]
require( "x64:73a93d900ceb94aa" ) --[[ @ 0]]
require( "x64:7f402714dd006d0f" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/emblemdrawwidgetnew" ) --[[ @ 0]]
require( "x64:34a46c5eb417fe54" ) --[[ @ 0]]
require( "x64:4adab6b12122be" ) --[[ @ 0]]
require( "x64:536e77a9b049f485" ) --[[ @ 0]]
require( "x64:367f78c5fc3fabc3" ) --[[ @ 0]]
require( "x64:323d82441ecd8c0" ) --[[ @ 0]]
require( "x64:41d53e3f47e4acc1" ) --[[ @ 0]]
require( "x64:4364e318b9b1d8f3" ) --[[ @ 0]]
require( "x64:1dc7282a18b413e0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]
require( "x64:5a13526379cc0c3" ) --[[ @ 0]]
require( "x64:5543d2b49d2efc00" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.EmblemEditor = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.EmblemEditor = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "EmblemEditor", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.DirectorUtility.DisableLeaderChangeShutdown( f1_local1 ) --[[ @ 0]]
	DisableRestoreState( f1_local1 ) --[[ @ 0]]
	DisableAutoButtonCallback( f1_local1, self, f1_arg0 ) --[[ @ 0]]
	SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, true ) --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg0, "DecalGroups.UpdateDataSource" ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditor ) --[[ @ 0]]
	self.soundSet = "CustomizationEditor" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 1, 0, 0, 0, 2, -540, -540 ) --[[ @ 0]]
	Background:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Background:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local emptyFocusable = CoD.craftEmptyFocusable.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, -10, 1070 ) --[[ @ 0]]
	emptyFocusable:mergeStateConditions( {
		{
			stateName = "Unfocusable",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsBrowseMode( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local GroupFull = emptyFocusable --[[ @ 0]]
	local BgGrain = emptyFocusable.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BgGrain( GroupFull, f1_local6["Emblem.EmblemProperties.editorMode"], function ( f3_arg0 )
		f1_local1:updateElementState( emptyFocusable, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f3_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GroupFull = emptyFocusable --[[ @ 0]]
	BgGrain = emptyFocusable.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BgGrain( GroupFull, f1_local6["Emblem.EmblemProperties.editorMode"], function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	GroupFull = emptyFocusable --[[ @ 0]]
	BgGrain = emptyFocusable.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BgGrain( GroupFull, f1_local6.LastInput, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "layerIndex", true, function ( model, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "iconID", true, function ( model, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	GroupFull = emptyFocusable --[[ @ 0]]
	BgGrain = emptyFocusable.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BgGrain( GroupFull, f1_local6["Emblem.EmblemProperties.groupsUsed"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GroupFull = emptyFocusable --[[ @ 0]]
	BgGrain = emptyFocusable.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BgGrain( GroupFull, f1_local6["Emblem.EmblemProperties.layersUsed"], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "isGrouped", true, function ( model, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "left" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f14_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f14_local0 ) and IsDpadButton( f14_local0 ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "right" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f16_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f16_local0 ) and IsDpadButton( f16_local0 ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) and IsDpadButton( model ) and CoD.BaseUtility.IsDvarEnabled( "enable_material_picker" ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemEditorMaterialPicker", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) and IsDpadButton( nil ) and CoD.BaseUtility.IsDvarEnabled( "enable_material_picker" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and CoD.BaseUtility.IsDvarEnabled( "enable_clip_mask" ) then
			CoD.CraftUtility.EmblemEditor_ClipLayer( self, self.layerCarousel, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f20_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f20_local0 ) and IsDpadButton( f20_local0 ) and CoD.BaseUtility.IsDvarEnabled( "enable_clip_mask" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	BgGrain = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BgGrain:setAlpha( 0.4 ) --[[ @ 0]]
	BgGrain:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	BgGrain:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	BgGrain:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BgGrain:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( BgGrain ) --[[ @ 0]]
	self.BgGrain = BgGrain --[[ @ 0]]
	
	GroupFull = nil --[[ @ 0]]
	
	GroupFull = CoD.PaintshopButtonPrompt.new( f1_local1, f1_arg0, 0.5, 0.5, -180, 180, 0.5, 0.5, 235, 275 ) --[[ @ 0]]
	GroupFull:mergeStateConditions( {
		{
			stateName = "KM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 ) and CoD.CraftUtility.EmblemEditor_ShowGroupSlotsFull( self, f1_arg0, menu )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.CraftUtility.EmblemEditor_ShowGroupSlotsFull( self, f1_arg0, menu )
			end
		}
	} ) --[[ @ 0]]
	GroupFull:appendEventHandler( "input_source_changed", function ( f23_arg0, f23_arg1 )
		f23_arg1.menu = f23_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( GroupFull, f23_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local layerGrid = GroupFull --[[ @ 0]]
	f1_local6 = GroupFull.subscribeToModel --[[ @ 0]]
	local ChangeLayerArrows = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local6( layerGrid, ChangeLayerArrows.LastInput, function ( f24_arg0 )
		f1_local1:updateElementState( GroupFull, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f24_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GroupFull:setAlpha( 0 ) --[[ @ 0]]
	GroupFull.buttonPromptImage:setImage( RegisterImage( @"hash_51F10DEAAEFC50A4" ) ) --[[ @ 0]]
	GroupFull.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_35E24C3255091DF" ) ) --[[ @ 0]]
	self:addElement( GroupFull ) --[[ @ 0]]
	self.GroupFull = GroupFull --[[ @ 0]]
	
	f1_local6 = nil --[[ @ 0]]
	
	layerGrid = LUI.GridLayout.new( f1_local1, f1_arg0, false, 0, 0, 0, 0, nil, nil, true, false, false, false ) --[[ @ 0]]
	layerGrid:mergeStateConditions( {
		{
			stateName = "DefaultStateKBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layerGrid:appendEventHandler( "input_source_changed", function ( f26_arg0, f26_arg1 )
		f26_arg1.menu = f26_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( layerGrid, f26_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	local emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget.LastInput, function ( f27_arg0 )
		f1_local1:updateElementState( layerGrid, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f27_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:setLeftRight( 0.5, 0.5, 390, 906 ) --[[ @ 0]]
	layerGrid:setTopBottom( 0, 0, 92, 952 ) --[[ @ 0]]
	layerGrid:setAlpha( 0 ) --[[ @ 0]]
	layerGrid:setWidgetType( CoD.EmblemLayerContainer ) --[[ @ 0]]
	layerGrid:setHorizontalCount( 3 ) --[[ @ 0]]
	layerGrid:setVerticalCount( 5 ) --[[ @ 0]]
	layerGrid:setSpacing( 0 ) --[[ @ 0]]
	layerGrid:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	layerGrid:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	layerGrid:setDataSource( "EmblemLayerList" ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "layerIndex", true, function ( model, f28_arg1 )
		CoD.Menu.UpdateButtonShownState( f28_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "iconID", true, function ( model, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget["Emblem.EmblemProperties.groupsUsed"], function ( f30_arg0, f30_arg1 )
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget["Emblem.EmblemProperties.layersUsed"], function ( f31_arg0, f31_arg1 )
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget["Emblem.EmblemProperties.editorMode"], function ( f32_arg0, f32_arg1 )
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:appendEventHandler( "input_source_changed", function ( f33_arg0, f33_arg1 )
		f33_arg1.menu = f33_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget.LastInput, function ( f34_arg0, f34_arg1 )
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemDrawWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemDrawWidget["Emblem.EmblemProperties.isClipboardEmpty"], function ( f35_arg0, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "isLinked", true, function ( model, f36_arg1 )
		CoD.Menu.UpdateButtonShownState( f36_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerGrid:registerEventHandler( "gain_focus", function ( element, event )
		local f37_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f37_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f37_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f37_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "GroupFull", controller ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayerPC",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_link", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_link" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_contextual_3", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_contextual_3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_remove", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_layertop", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "left" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_layertop" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_layerbottom", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "right" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_layerbottom" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_newlayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_newlayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_cutlayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_CutLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_cutlayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_copylayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_copylayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_group", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_group" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_972C68080927021", function ( f58_arg0, f58_arg1, f58_arg2, f58_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f58_arg0, f58_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f58_arg0, f58_arg2 ) and not CoD.CraftUtility.Emblems_IsLayerLinked( f58_arg0, f58_arg2 ) then
			return function ( f59_arg0, f59_arg1, f59_arg2, f59_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f59_arg1, self, f59_arg0, f59_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, f59_arg2, f59_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f59_arg2, f59_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_782789B43F936B78", function ( f60_arg0, f60_arg1, f60_arg2, f60_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f60_arg0, f60_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f60_arg0, f60_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f60_arg0, f60_arg2 ) then
			return function ( f61_arg0, f61_arg1, f61_arg2, f61_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f61_arg1, self, f61_arg0, f61_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, f61_arg2, f61_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f61_arg2, f61_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_E4FD6AD543818C0", function ( f62_arg0, f62_arg1, f62_arg2, f62_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f62_arg0, f62_arg2 ) then
			return function ( f63_arg0, f63_arg1, f63_arg2, f63_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f63_arg1, self, f63_arg0, f63_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_CutLayer( self, f63_arg0, f63_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f63_arg2, f63_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_5AEC3D591F4359E", function ( f64_arg0, f64_arg1, f64_arg2, f64_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f64_arg0, f64_arg2 ) then
			return function ( f65_arg0, f65_arg1, f65_arg2, f65_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f65_arg1, self, f65_arg0, f65_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, f65_arg0, f65_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f65_arg2, f65_arg0 ) --[[ @ 0]]
				PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_C557F1B0FF34983", function ( f66_arg0, f66_arg1, f66_arg2, f66_arg3 )
		if not CoD.CraftUtility.IsClipboardEmpty( f66_arg2 ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( f66_arg0, f66_arg2 ) then
			return function ( f67_arg0, f67_arg1, f67_arg2, f67_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f67_arg1, self, f67_arg0, f67_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_InsertLayer( self, f67_arg0, f67_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f67_arg2, f67_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_6345431B325139E6", function ( f68_arg0, f68_arg1, f68_arg2, f68_arg3 )
		if CoD.CraftUtility.Emblem_IsLayerGrouped( f68_arg0, f68_arg2 ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f68_arg2 ) then
			return function ( f69_arg0, f69_arg1, f69_arg2, f69_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f69_arg1, self, f69_arg0, f69_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreSelectedGroup( self, f69_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_OpenSaveGroupPopup( self, f69_arg0, f69_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f69_arg2, f69_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_64389B00AC580011", function ( f70_arg0, f70_arg1, f70_arg2, f70_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f70_arg0, f70_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f70_arg0, f70_arg2 ) then
			return function ( f71_arg0, f71_arg1, f71_arg2, f71_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f71_arg1, self, f71_arg0, f71_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, f71_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, f71_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, f71_arg2 ) --[[ @ 0]]
				OpenOverlay( self, "EmblemChooseIcon", f71_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f71_arg2, f71_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_1343441CAE04FDED", function ( f72_arg0, f72_arg1, f72_arg2, f72_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f72_arg0, f72_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f72_arg0, f72_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f72_arg0, f72_arg2 ) then
			return function ( f73_arg0, f73_arg1, f73_arg2, f73_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f73_arg1, self, f73_arg0, f73_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, f73_arg2, f73_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f73_arg2, f73_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_36EA1EDF54B8F820", function ( f74_arg0, f74_arg1, f74_arg2, f74_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f74_arg0, f74_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f74_arg0, f74_arg2 ) and CoD.CraftUtility.Emblem_IsLayerGrouped( f74_arg0, f74_arg2 ) then
			return function ( f75_arg0, f75_arg1, f75_arg2, f75_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f75_arg1, self, f75_arg0, f75_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, f75_arg2, f75_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f75_arg2, f75_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_7E26022B0886ED3", function ( f76_arg0, f76_arg1, f76_arg2, f76_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f76_arg0, f76_arg2 ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( f76_arg2 ) then
			return function ( f77_arg0, f77_arg1, f77_arg2, f77_arg3 )
				CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, f77_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f77_arg1, self, f77_arg0, f77_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, f77_arg0, f77_arg2 ) --[[ @ 0]]
				OpenOverlay( self, "EmblemChooseIcon", f77_arg2, nil ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( layerGrid ) --[[ @ 0]]
	self.layerGrid = layerGrid --[[ @ 0]]
	
	ChangeLayerArrows = nil --[[ @ 0]]
	
	ChangeLayerArrows = CoD.ChangeLayerArrows.new( f1_local1, f1_arg0, 0.5, 0.5, -125, 125, 0.5, 0.5, 277.5, 322.5 ) --[[ @ 0]]
	ChangeLayerArrows:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ChangeLayerArrows ) --[[ @ 0]]
	self.ChangeLayerArrows = ChangeLayerArrows --[[ @ 0]]
	
	layerCarousel = LUI.UIList.new( f1_local1, f1_arg0, 2, 200, nil, false, true, false, false ) --[[ @ 0]]
	layerCarousel:mergeStateConditions( {
		{
			stateName = "EditMode_Selected",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 ) and not CoD.CraftUtility.IsLayerEmpty( self, element, f1_arg0 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 ) and CoD.CraftUtility.IsLayerEmpty( self, element, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	local emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.editorMode"], function ( f80_arg0 )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f80_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "layerIndex", true, function ( model )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "iconID", true, function ( model )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.groupsUsed"], function ( f83_arg0 )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f83_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.layersUsed"], function ( f84_arg0 )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f84_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:setLeftRight( 0, 0, 148.5, 3655.5 ) --[[ @ 0]]
	layerCarousel:setTopBottom( 0, 0, 757.5, 929.5 ) --[[ @ 0]]
	layerCarousel:setWidgetType( CoD.EmblemLayerContainer ) --[[ @ 0]]
	layerCarousel:setHorizontalCount( 16 ) --[[ @ 0]]
	layerCarousel:setFirstElementXOffset( 725 ) --[[ @ 0]]
	layerCarousel:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	layerCarousel:setDataSource( "EmblemLayerList" ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.editorMode"], function ( f85_arg0, f85_arg1 )
		CoD.Menu.UpdateButtonShownState( f85_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "layerIndex", true, function ( model, f86_arg1 )
		CoD.Menu.UpdateButtonShownState( f86_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "iconID", true, function ( model, f87_arg1 )
		CoD.Menu.UpdateButtonShownState( f87_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.groupsUsed"], function ( f88_arg0, f88_arg1 )
		CoD.Menu.UpdateButtonShownState( f88_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.layersUsed"], function ( f89_arg0, f89_arg1 )
		CoD.Menu.UpdateButtonShownState( f89_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:appendEventHandler( "input_source_changed", function ( f90_arg0, f90_arg1 )
		f90_arg1.menu = f90_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f90_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	clipboard = layerCarousel --[[ @ 0]]
	emblemDrawWidget = layerCarousel.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemDrawWidget( clipboard, emblemHiddenPulseLayerPC.LastInput, function ( f91_arg0, f91_arg1 )
		CoD.Menu.UpdateButtonShownState( f91_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f92_local0 = nil --[[ @ 0]]
		CoD.CraftUtility.EmblemEditor_LayerGainFocus( f1_local1, self, element, f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "layermofn", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "BrowseControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "EditControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "clipboard", f1_arg0 ) --[[ @ 0]]
		PlayClipOnElement( self, {
			elementName = "emblemHiddenPulseLayer",
			clipName = "DefaultClip"
		}, f1_arg0 ) --[[ @ 0]]
		return f92_local0
	end ) --[[ @ 0]]
	layerCarousel:registerEventHandler( "gain_focus", function ( element, event )
		local f93_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f93_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f93_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		return f93_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerCarousel, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( model ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( nil ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( layerCarousel ) --[[ @ 0]]
	self.layerCarousel = layerCarousel --[[ @ 0]]
	
	emblemDrawWidget = CoD.EmblemDrawWidgetNew.new( f1_local1, f1_arg0, 0.5, 0.5, -270, 270, 0, 0, 167, 707 ) --[[ @ 0]]
	emblemDrawWidget:mergeStateConditions( {
		{
			stateName = "EditMode",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] )
			end
		}
	} ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "isLoot", true, function ( model )
		f1_local1:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "isLoot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "available", true, function ( model )
		f1_local1:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "available"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayerPC = emblemDrawWidget --[[ @ 0]]
	clipboard = emblemDrawWidget.subscribeToModel --[[ @ 0]]
	local emblemHiddenPulseLayer = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	clipboard( emblemHiddenPulseLayerPC, emblemHiddenPulseLayer["Emblem.EmblemProperties.editorMode"], function ( f99_arg0 )
		f1_local1:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f99_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( emblemDrawWidget ) --[[ @ 0]]
	self.emblemDrawWidget = emblemDrawWidget --[[ @ 0]]
	
	clipboard = CoD.EmblemIconClipboard.new( f1_local1, f1_arg0, 0.5, 0.5, -549.5, -297.5, 0, 0, 168, 443 ) --[[ @ 0]]
	clipboard:mergeStateConditions( {
		{
			stateName = "PasteState",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblem_CanPastFromClipboard( element, f1_arg0 )
			end
		},
		{
			stateName = "AllGroupsUsed",
			condition = function ( menu, element, event )
				local f101_local0 --[[ @ 0]]
				if not IsGroupSlotAvailable( f1_arg0 ) then
					f101_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_3EBDFD4FFDC7DA3"] ) --[[ @ 0]]
					if f101_local0 then
						f101_local0 = CoD.CraftUtility.IsClipboardEmblemGrouped( f1_arg0 ) --[[ @ 0]]
					end
				else
					f101_local0 = false --[[ @ 0]]
				end
				return f101_local0
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	emblemHiddenPulseLayer = clipboard --[[ @ 0]]
	emblemHiddenPulseLayerPC = clipboard.subscribeToModel --[[ @ 0]]
	local layerProperties = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, layerProperties["Emblem.EmblemProperties.editorMode"], function ( f103_arg0 )
		f1_local1:updateElementState( clipboard, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f103_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emblemHiddenPulseLayer = clipboard --[[ @ 0]]
	emblemHiddenPulseLayerPC = clipboard.subscribeToModel --[[ @ 0]]
	layerProperties = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, layerProperties["Emblem.EmblemProperties.groupsUsed"], function ( f104_arg0 )
		f1_local1:updateElementState( clipboard, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f104_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	clipboard:subscribeToGlobalModel( f1_arg0, "CraftClipboard", nil, function ( model )
		clipboard:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( clipboard ) --[[ @ 0]]
	self.clipboard = clipboard --[[ @ 0]]
	
	emblemHiddenPulseLayerPC = nil --[[ @ 0]]
	
	emblemHiddenPulseLayerPC = CoD.EmblemPulseLayerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -270, 270, 0, 0, 168, 708 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( emblemHiddenPulseLayerPC ) --[[ @ 0]]
	self.emblemHiddenPulseLayerPC = emblemHiddenPulseLayerPC --[[ @ 0]]
	
	emblemHiddenPulseLayer = CoD.EmblemPulseLayerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -270, 270, 0, 0, 168, 708 ) --[[ @ 0]]
	self:addElement( emblemHiddenPulseLayer ) --[[ @ 0]]
	self.emblemHiddenPulseLayer = emblemHiddenPulseLayer --[[ @ 0]]
	
	layerProperties = CoD.EmblemEditorLayerProperties.new( f1_local1, f1_arg0, 0.5, 0.5, -347.5, 347.5, 0, 0, 92, 160 ) --[[ @ 0]]
	layerProperties:mergeStateConditions( {
		{
			stateName = "KBMEditMode",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 ) and CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] )
			end
		},
		{
			stateName = "EditModeLayerProperties",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) and not IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layerProperties:appendEventHandler( "input_source_changed", function ( f108_arg0, f108_arg1 )
		f108_arg1.menu = f108_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( layerProperties, f108_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local layermofn = layerProperties --[[ @ 0]]
	local layermofnPC = layerProperties.subscribeToModel --[[ @ 0]]
	local BrowseControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofnPC( layermofn, BrowseControls.LastInput, function ( f109_arg0 )
		f1_local1:updateElementState( layerProperties, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f109_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layermofn = layerProperties --[[ @ 0]]
	layermofnPC = layerProperties.subscribeToModel --[[ @ 0]]
	BrowseControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofnPC( layermofn, BrowseControls["Emblem.EmblemProperties.editorMode"], function ( f110_arg0 )
		f1_local1:updateElementState( layerProperties, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f110_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerProperties:subscribeToGlobalModel( f1_arg0, "EmblemSelectedLayerProperties", nil, function ( model )
		layerProperties:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( layerProperties ) --[[ @ 0]]
	self.layerProperties = layerProperties --[[ @ 0]]
	
	layermofnPC = nil --[[ @ 0]]
	
	layermofnPC = CoD.layermofn.new( f1_local1, f1_arg0, 0.5, 0.5, -120, 120, 0, 0, 929.5, 974.5 ) --[[ @ 0]]
	layermofnPC:mergeStateConditions( {
		{
			stateName = "EmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layermofnPC, "layerIndex", true, function ( model )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layermofnPC, "iconID", true, function ( model )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BrowseControls = layermofnPC --[[ @ 0]]
	layermofn = layermofnPC.subscribeToModel --[[ @ 0]]
	local EditControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofn( BrowseControls, EditControls["Emblem.EmblemProperties.groupsUsed"], function ( f115_arg0 )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f115_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	BrowseControls = layermofnPC --[[ @ 0]]
	layermofn = layermofnPC.subscribeToModel --[[ @ 0]]
	EditControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofn( BrowseControls, EditControls["Emblem.EmblemProperties.layersUsed"], function ( f116_arg0 )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f116_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layermofnPC:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( layermofnPC ) --[[ @ 0]]
	self.layermofnPC = layermofnPC --[[ @ 0]]
	
	layermofn = CoD.layermofn.new( f1_local1, f1_arg0, 0.5, 0.5, -120, 120, 0, 0, 929.5, 974.5 ) --[[ @ 0]]
	layermofn:mergeStateConditions( {
		{
			stateName = "EmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layermofn:linkToElementModel( layermofn, "layerIndex", true, function ( model )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofn:linkToElementModel( layermofn, "iconID", true, function ( model )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EditControls = layermofn --[[ @ 0]]
	BrowseControls = layermofn.subscribeToModel --[[ @ 0]]
	local f1_local19 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BrowseControls( EditControls, f1_local19["Emblem.EmblemProperties.groupsUsed"], function ( f120_arg0 )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f120_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EditControls = layermofn --[[ @ 0]]
	BrowseControls = layermofn.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BrowseControls( EditControls, f1_local19["Emblem.EmblemProperties.layersUsed"], function ( f121_arg0 )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f121_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( layermofn ) --[[ @ 0]]
	self.layermofn = layermofn --[[ @ 0]]
	
	BrowseControls = CoD.PaintshopBrowseControlsFull.new( f1_local1, f1_arg0, 0.5, 0.5, 348, 768, 0, 0, 168, 708 ) --[[ @ 0]]
	BrowseControls:mergeStateConditions( {
		{
			stateName = "EditModeControlsState",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		},
		{
			stateName = "BrowseLayersLinked",
			condition = function ( menu, element, event )
				return BrowseModeLinkedLayer( self, f1_arg0, self.layerCarousel, menu )
			end
		},
		{
			stateName = "BrowseLayerGrouped",
			condition = function ( menu, element, event )
				return BrowseModeGroupedLayer( self, f1_arg0, self.layerCarousel, menu ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f1_arg0 )
			end
		},
		{
			stateName = "BrowseLayerGroupedMax",
			condition = function ( menu, element, event )
				return BrowseModeGroupedLayer( self, f1_arg0, self.layerCarousel, menu ) and not CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f1_arg0 )
			end
		},
		{
			stateName = "BrowseEmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	f1_local19 = BrowseControls --[[ @ 0]]
	EditControls = BrowseControls.subscribeToModel --[[ @ 0]]
	local actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( f1_local19, actionsListPC["Emblem.EmblemProperties.editorMode"], function ( f127_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f127_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local19 = BrowseControls --[[ @ 0]]
	EditControls = BrowseControls.subscribeToModel --[[ @ 0]]
	actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( f1_local19, actionsListPC["Emblem.EmblemProperties.linkedLayerCount"], function ( f128_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f128_arg0:get(),
			modelName = "Emblem.EmblemProperties.linkedLayerCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local19 = BrowseControls --[[ @ 0]]
	EditControls = BrowseControls.subscribeToModel --[[ @ 0]]
	actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( f1_local19, actionsListPC["Emblem.EmblemProperties.groupsUsed"], function ( f129_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f129_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	BrowseControls:linkToElementModel( BrowseControls, "layerIndex", true, function ( model )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BrowseControls:linkToElementModel( BrowseControls, "iconID", true, function ( model )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local19 = BrowseControls --[[ @ 0]]
	EditControls = BrowseControls.subscribeToModel --[[ @ 0]]
	actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( f1_local19, actionsListPC["Emblem.EmblemProperties.layersUsed"], function ( f132_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f132_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( BrowseControls ) --[[ @ 0]]
	self.BrowseControls = BrowseControls --[[ @ 0]]
	
	EditControls = CoD.PaintshopControlsFull.new( f1_local1, f1_arg0, 0.5, 0.5, 348, 768, 0, 0, 168, 708 ) --[[ @ 0]]
	EditControls:mergeStateConditions( {
		{
			stateName = "BrowseModeControlsState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] )
			end
		},
		{
			stateName = "FixedScale",
			condition = function ( menu, element, event )
				local f134_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f134_local0 then
					f134_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f134_local0 then
						if not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) then
							f134_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						else
							f134_local0 = false --[[ @ 0]]
						end
					end
				end
				return f134_local0
			end
		},
		{
			stateName = "FreeScale",
			condition = function ( menu, element, event )
				local f135_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) then
					f135_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f135_local0 then
						if not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) then
							f135_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						else
							f135_local0 = false --[[ @ 0]]
						end
					end
				else
					f135_local0 = false --[[ @ 0]]
				end
				return f135_local0
			end
		},
		{
			stateName = "StickerFixedScale",
			condition = function ( menu, element, event )
				local f136_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f136_local0 then
					f136_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f136_local0 then
						f136_local0 = CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						if f136_local0 then
							f136_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						end
					end
				end
				return f136_local0
			end
		},
		{
			stateName = "StickerFreeScale",
			condition = function ( menu, element, event )
				local f137_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) then
					f137_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f137_local0 then
						f137_local0 = CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						if f137_local0 then
							f137_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						end
					end
				else
					f137_local0 = false --[[ @ 0]]
				end
				return f137_local0
			end
		},
		{
			stateName = "FixedScaleOnly",
			condition = function ( menu, element, event )
				local f138_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f138_local0 then
					f138_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f138_local0 then
						f138_local0 = CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
					end
				end
				return f138_local0
			end
		}
	} ) --[[ @ 0]]
	actionsListPC = EditControls --[[ @ 0]]
	f1_local19 = EditControls.subscribeToModel --[[ @ 0]]
	local CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local19( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.editorMode"], function ( f139_arg0 )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f139_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	actionsListPC = EditControls --[[ @ 0]]
	f1_local19 = EditControls.subscribeToModel --[[ @ 0]]
	CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local19( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.scaleMode"], function ( f140_arg0 )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f140_arg0:get(),
			modelName = "Emblem.EmblemProperties.scaleMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EditControls:linkToElementModel( EditControls, "iconID", true, function ( model )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EditControls:linkToElementModel( EditControls, "isGrouped", true, function ( model )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( EditControls ) --[[ @ 0]]
	self.EditControls = EditControls --[[ @ 0]]
	
	f1_local19 = nil --[[ @ 0]]
	
	actionsListPC = LUI.UIList.new( f1_local1, f1_arg0, 0, 0, nil, false, false, false, false ) --[[ @ 0]]
	actionsListPC:setLeftRight( 0.5, 0.5, -842.5, -467.5 ) --[[ @ 0]]
	actionsListPC:setTopBottom( 0, 0, 92, 917 ) --[[ @ 0]]
	actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	actionsListPC:setWidgetType( CoD.CraftActionHeader ) --[[ @ 0]]
	actionsListPC:setVerticalCount( 15 ) --[[ @ 0]]
	actionsListPC:setSpacing( 0 ) --[[ @ 0]]
	actionsListPC:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	actionsListPC:setDataSource( "CraftActionsPC" ) --[[ @ 0]]
	actionsListPC:subscribeToGlobalModel( f1_arg0, "PerController", "Emblem.EmblemProperties.editorMode", function ( model )
		UpdateDataSource( self, actionsListPC, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( actionsListPC ) --[[ @ 0]]
	self.actionsListPC = actionsListPC --[[ @ 0]]
	
	CraftNavigationWidget = CoD.CraftNavigationWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -200, 200, 0, 0, 716, 766 ) --[[ @ 0]]
	self:addElement( CraftNavigationWidget ) --[[ @ 0]]
	self.CraftNavigationWidget = CraftNavigationWidget --[[ @ 0]]
	
	local EmblemEditorPCLegend = nil --[[ @ 0]]
	
	EmblemEditorPCLegend = CoD.EmblemEditorPCLegend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( EmblemEditorPCLegend ) --[[ @ 0]]
	self.EmblemEditorPCLegend = EmblemEditorPCLegend --[[ @ 0]]
	
	local EmblemEditorFrame = CoD.GenericMenuFrame.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	EmblemEditorFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle = function ()
		EmblemEditorFrame.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.CraftUtility.GetEmblemEditorTitle( f1_arg0 ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	EmblemEditorFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle() --[[ @ 0]]
	EmblemEditorFrame:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f145_local0 = model:get() --[[ @ 0]]
		if f145_local0 ~= nil then
			EmblemEditorFrame.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f145_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( EmblemEditorFrame ) --[[ @ 0]]
	self.EmblemEditorFrame = EmblemEditorFrame --[[ @ 0]]
	
	GroupFull:linkToElementModel( layerGrid, nil, false, function ( model )
		GroupFull:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( layerGrid, nil, false, function ( model )
		emblemHiddenPulseLayerPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex = function ( f148_arg0 )
		local f148_local0 = f148_arg0:get() --[[ @ 0]]
		if f148_local0 ~= nil then
			emblemHiddenPulseLayerPC.emblemHiddenPulseLayer:setupHiddenEmblemLayer( GetEmblemLayerAndGroupIndex( f1_arg0, f148_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( layerGrid, "layerAndGroupIndex", true, emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex ) --[[ @ 0]]
	emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath = function ()
		local f149_local0 = layerGrid:getModel() --[[ @ 0]]
		if f149_local0 then
			f149_local0 = layerGrid:getModel() --[[ @ 0]]
			f149_local0 = f149_local0.layerAndGroupIndex --[[ @ 0]]
		end
		if f149_local0 then
			emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex( f149_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( self, "iconID", true, emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath ) --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( layerCarousel, nil, false, function ( model )
		emblemHiddenPulseLayer:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex = function ( f151_arg0 )
		local f151_local0 = f151_arg0:get() --[[ @ 0]]
		if f151_local0 ~= nil then
			emblemHiddenPulseLayer.emblemHiddenPulseLayer:setupHiddenEmblemLayer( GetEmblemLayerAndGroupIndex( f1_arg0, f151_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( layerCarousel, "layerAndGroupIndex", true, emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex ) --[[ @ 0]]
	emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath = function ()
		local f152_local0 = layerCarousel:getModel() --[[ @ 0]]
		if f152_local0 then
			f152_local0 = layerCarousel:getModel() --[[ @ 0]]
			f152_local0 = f152_local0.layerAndGroupIndex --[[ @ 0]]
		end
		if f152_local0 then
			emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex( f152_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( self, "iconID", true, emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layerGrid, nil, false, function ( model )
		layermofnPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofnPC.layerMOfN.__layermofntext = function ( f154_arg0 )
		local f154_local0 = f154_arg0:get() --[[ @ 0]]
		if f154_local0 ~= nil then
			layermofnPC.layerMOfN:setText( LocalizeLayerMOfN( @"hash_32769909B839C4BC", f1_arg0, f154_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	layermofnPC:linkToElementModel( layerGrid, "layerNumberString", true, layermofnPC.layerMOfN.__layermofntext ) --[[ @ 0]]
	layermofnPC.layerMOfN.__layermofntext_FullPath = function ()
		local f155_local0 = layerGrid:getModel() --[[ @ 0]]
		if f155_local0 then
			f155_local0 = layerGrid:getModel() --[[ @ 0]]
			f155_local0 = f155_local0.layerNumberString --[[ @ 0]]
		end
		if f155_local0 then
			layermofnPC.layerMOfN.__layermofntext( f155_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f1_local24 = layermofnPC --[[ @ 0]]
	local f1_local25 = layermofnPC.subscribeToModel --[[ @ 0]]
	local f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.layersUsed"], layermofnPC.layerMOfN.__layermofntext_FullPath ) --[[ @ 0]]
	layermofn:linkToElementModel( layerCarousel, nil, false, function ( model )
		layermofn:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofn.layerMOfN.__layermofntext = function ( f157_arg0 )
		local f157_local0 = f157_arg0:get() --[[ @ 0]]
		if f157_local0 ~= nil then
			layermofn.layerMOfN:setText( LocalizeLayerMOfN( @"hash_32769909B839C4BC", f1_arg0, f157_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	layermofn:linkToElementModel( layerCarousel, "layerNumberString", true, layermofn.layerMOfN.__layermofntext ) --[[ @ 0]]
	layermofn.layerMOfN.__layermofntext_FullPath = function ()
		local f158_local0 = layerCarousel:getModel() --[[ @ 0]]
		if f158_local0 then
			f158_local0 = layerCarousel:getModel() --[[ @ 0]]
			f158_local0 = f158_local0.layerNumberString --[[ @ 0]]
		end
		if f158_local0 then
			layermofn.layerMOfN.__layermofntext( f158_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_local24 = layermofn --[[ @ 0]]
	f1_local25 = layermofn.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.layersUsed"], layermofn.layerMOfN.__layermofntext_FullPath ) --[[ @ 0]]
	BrowseControls:linkToElementModel( layerCarousel, nil, false, function ( model )
		BrowseControls:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EditControls:linkToElementModel( layerCarousel, nil, false, function ( model )
		EditControls:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local24 = EmblemEditorFrame --[[ @ 0]]
	f1_local25 = EmblemEditorFrame.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.editorMode"], EmblemEditorFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f162_arg0, f162_arg1 )
		f162_arg1.menu = f162_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( self, f162_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26.LastInput, function ( f163_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f163_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.editorMode"], function ( f164_arg0, f164_arg1 )
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f164_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "layerIndex", true, function ( model, f165_arg1 )
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f165_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "iconID", true, function ( model, f166_arg1 )
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f166_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.groupsUsed"], function ( f167_arg0, f167_arg1 )
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f167_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.layersUsed"], function ( f168_arg0, f168_arg1 )
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f168_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "isGrouped", true, function ( model, f169_arg1 )
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f169_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isLinked", true, function ( model, f170_arg1 )
		CoD.Menu.UpdateButtonShownState( f170_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f171_arg0, f171_arg1 )
		f171_arg1.menu = f171_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f171_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26.LastInput, function ( f172_arg0, f172_arg1 )
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f172_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local24 = self --[[ @ 0]]
	f1_local25 = self.subscribeToModel --[[ @ 0]]
	f1_local26 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local25( f1_local24, f1_local26["Emblem.EmblemProperties.isClipboardEmpty"], function ( f173_arg0, f173_arg1 )
		CoD.Menu.UpdateButtonShownState( f173_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f173_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f174_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f174_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f174_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		UpdateElementState( self, "layermofn", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "BrowseControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "EditControls", f1_arg0 ) --[[ @ 0]]
		if not f174_local0 then
			f174_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f174_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f175_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f175_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f175_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", true ) then
			MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.HUDUtility.PopAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
		else
			MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_ReturnFromOverlay( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.HUDUtility.PushAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
			UpdateElementState( self, "layermofn", f1_arg0 ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", f1_arg0 ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", f1_arg0 ) --[[ @ 0]]
			UpdateElementState( self, "layerCarousel", f1_arg0 ) --[[ @ 0]]
		end
		if not f175_local0 then
			f175_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f175_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, controller, self ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "-0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_LinkAllLayers( self, controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_249A252B20B48936"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_249A252B20B48936"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], "ui_contextual_2", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreSelectedGroup( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_OpenSaveGroupPopup( self, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Close" ) and IsMouseOrKeyboard( controller ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Open" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Open" ) and IsMouseOrKeyboard( controller ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Close" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_0", nil, "ui_contextual_2" ) --[[ @ 0]]
			return false
		elseif IsElementInState( self.EmblemEditorPCLegend, "Close" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_490E9019810E01CA", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Open" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_490E9019810E01CA", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleOutline( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "toggle_outline" ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_CutLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemIconColorPicker", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemChooseColor_ClearSelectedLayerMaterial( self, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_FlipIcon( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "flip_image" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, element, controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], "ESCAPE", function ( element, menu, controller, model )
		if IsPC() and IsElementInState( self.EmblemEditorPCLegend, "Open" ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Close" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			PlaySoundSetSound( self, "save_box" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			PlaySoundSetSound( self, "save_box" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_RevertAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_RefreshDatasource( self, self.layerCarousel ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "list_action" ) --[[ @ 0]]
			UpdateElementState( self, "layermofn", controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			UpdateButtonPromptState( menu, element, controller, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
			return true
		else
			GoBack( self, controller ) --[[ @ 0]]
			ForceNotifyControllerModel( controller, "Emblem.UpdateDataSource" ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		if IsPC() and IsElementInState( self.EmblemEditorPCLegend, "Open" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7AB744CDFD554F5F", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		else
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleScaleMode( self, element, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_InsertLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, self ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_contextual_3", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_InsertLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, self ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_contextual_3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
			UpdateElementState( self, "layermofn", controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			UpdateElementState( self, "layerCarousel", controller ) --[[ @ 0]]
			return true
		elseif not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_SetFocusOnEditSelectedLayerPC( self, self.emptyFocusable, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "EditControls", controller ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			OpenOverlay( self, "EmblemChooseIcon", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_7E84DC9704A3FB30", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_7E84DC9704A3FB30", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_7E84DC9704A3FB30", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and IsPC() then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) then
			CoD.CraftUtility.CraftEditor_OpenEditorOptions( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_FlipIcon( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "flip_image" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_2FA47140D97F89D", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_2FA47140D97F89D", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_loweropacity", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "-0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_loweropacity" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_raiseopacity", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_raiseopacity" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_prevtab", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_RotateLayer( -1 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_prevtab" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_nexttab", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_RotateLayer( 1 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_nexttab" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_open", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemIconColorPicker", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemChooseColor_ClearSelectedLayerMaterial( self, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_open" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_toggleoutline", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleOutline( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "toggle_outline" ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_toggleoutline" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		UploadStats( self, f1_arg0 ) --[[ @ 0]]
		CoD.HUDUtility.PopAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
		SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f213_arg2, f213_arg3, f213_arg4 )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	layerGrid.id = "layerGrid" --[[ @ 0]]
	if CoD.isPC then
		ChangeLayerArrows.id = "ChangeLayerArrows" --[[ @ 0]]
	end
	layerCarousel.id = "layerCarousel" --[[ @ 0]]
	if CoD.isPC then
		emblemDrawWidget.id = "emblemDrawWidget" --[[ @ 0]]
	end
	actionsListPC.id = "actionsListPC" --[[ @ 0]]
	if CoD.isPC then
		EmblemEditorPCLegend.id = "EmblemEditorPCLegend" --[[ @ 0]]
	end
	EmblemEditorFrame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		EmblemEditorFrame.id = "EmblemEditorFrame" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = layerCarousel --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local25 = self --[[ @ 0]]
	CoD.CraftUtility.SetupMouseScrollingEmblemScale( f1_local1, f1_arg0 ) --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.HUDUtility.PushAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
	CoD.CraftUtility.EmblemEditor_GainDefaultFocus( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	f1_local25 = layerGrid --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.ActivateListPCSelectionBehavior( f1_local25 ) --[[ @ 0]]
		CoD.GridAndListUtility.SetGridScrolling( f1_local1, f1_local25, f1_arg0 ) --[[ @ 0]]
		SetElementProperty( self.layerGrid, "__ignoreSelectionWidget", true ) --[[ @ 0]]
	end
	CoD.CraftUtility.EmblemEditor_SetupEditorCarouselBasedOnMode( f1_local1, layerCarousel, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.EmblemEditor.__resetProperties = function ( f214_arg0 )
	f214_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
	f214_arg0.BrowseControls:completeAnimation() --[[ @ 0]]
	f214_arg0.layerCarousel:completeAnimation() --[[ @ 0]]
	f214_arg0.layermofnPC:completeAnimation() --[[ @ 0]]
	f214_arg0.CraftNavigationWidget:completeAnimation() --[[ @ 0]]
	f214_arg0.clipboard:completeAnimation() --[[ @ 0]]
	f214_arg0.layerGrid:completeAnimation() --[[ @ 0]]
	f214_arg0.EditControls:completeAnimation() --[[ @ 0]]
	f214_arg0.layermofn:completeAnimation() --[[ @ 0]]
	f214_arg0.ChangeLayerArrows:completeAnimation() --[[ @ 0]]
	f214_arg0.GroupFull:completeAnimation() --[[ @ 0]]
	f214_arg0.emblemHiddenPulseLayerPC:completeAnimation() --[[ @ 0]]
	f214_arg0.emblemHiddenPulseLayer:completeAnimation() --[[ @ 0]]
	f214_arg0.actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.BrowseControls:setAlpha( 1 ) --[[ @ 0]]
	f214_arg0.layerCarousel:setAlpha( 1 ) --[[ @ 0]]
	f214_arg0.layermofnPC:setTopBottom( 0, 0, 929.5, 974.5 ) --[[ @ 0]]
	f214_arg0.layermofnPC:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.CraftNavigationWidget:setAlpha( 1 ) --[[ @ 0]]
	f214_arg0.clipboard:setLeftRight( 0.5, 0.5, -549.5, -297.5 ) --[[ @ 0]]
	f214_arg0.clipboard:setTopBottom( 0, 0, 168, 443 ) --[[ @ 0]]
	f214_arg0.layerGrid:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.EditControls:setAlpha( 1 ) --[[ @ 0]]
	f214_arg0.layermofn:setAlpha( 1 ) --[[ @ 0]]
	f214_arg0.ChangeLayerArrows:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.GroupFull:setTopBottom( 0.5, 0.5, 235, 275 ) --[[ @ 0]]
	f214_arg0.GroupFull:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.emblemHiddenPulseLayerPC:setAlpha( 0 ) --[[ @ 0]]
	f214_arg0.emblemHiddenPulseLayer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditor.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f215_arg0, f215_arg1 )
			f215_arg0:__resetProperties() --[[ @ 0]]
			f215_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f216_arg0, f216_arg1 )
			f216_arg0:__resetProperties() --[[ @ 0]]
			f216_arg0:setupElementClipCounter( 13 ) --[[ @ 0]]
			f216_arg0.GroupFull:completeAnimation() --[[ @ 0]]
			f216_arg0.GroupFull:setTopBottom( 0.5, 0.5, 235, 275 ) --[[ @ 0]]
			f216_arg0.GroupFull:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.GroupFull ) --[[ @ 0]]
			f216_arg0.layerGrid:completeAnimation() --[[ @ 0]]
			f216_arg0.layerGrid:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.layerGrid ) --[[ @ 0]]
			f216_arg0.ChangeLayerArrows:completeAnimation() --[[ @ 0]]
			f216_arg0.ChangeLayerArrows:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.ChangeLayerArrows ) --[[ @ 0]]
			f216_arg0.layerCarousel:completeAnimation() --[[ @ 0]]
			f216_arg0.layerCarousel:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.layerCarousel ) --[[ @ 0]]
			f216_arg0.clipboard:completeAnimation() --[[ @ 0]]
			f216_arg0.clipboard:setLeftRight( 0.5, 0.5, -842.5, -590.5 ) --[[ @ 0]]
			f216_arg0.clipboard:setTopBottom( 0, 0, 677, 917 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.clipboard ) --[[ @ 0]]
			f216_arg0.emblemHiddenPulseLayerPC:completeAnimation() --[[ @ 0]]
			f216_arg0.emblemHiddenPulseLayerPC:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.emblemHiddenPulseLayerPC ) --[[ @ 0]]
			f216_arg0.emblemHiddenPulseLayer:completeAnimation() --[[ @ 0]]
			f216_arg0.emblemHiddenPulseLayer:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.emblemHiddenPulseLayer ) --[[ @ 0]]
			f216_arg0.layermofnPC:completeAnimation() --[[ @ 0]]
			f216_arg0.layermofnPC:setTopBottom( 0, 0, 723.5, 768.5 ) --[[ @ 0]]
			f216_arg0.layermofnPC:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.layermofnPC ) --[[ @ 0]]
			f216_arg0.layermofn:completeAnimation() --[[ @ 0]]
			f216_arg0.layermofn:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.layermofn ) --[[ @ 0]]
			f216_arg0.BrowseControls:completeAnimation() --[[ @ 0]]
			f216_arg0.BrowseControls:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.BrowseControls ) --[[ @ 0]]
			f216_arg0.EditControls:completeAnimation() --[[ @ 0]]
			f216_arg0.EditControls:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.EditControls ) --[[ @ 0]]
			f216_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
			f216_arg0.actionsListPC:setAlpha( 1 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.actionsListPC ) --[[ @ 0]]
			f216_arg0.CraftNavigationWidget:completeAnimation() --[[ @ 0]]
			f216_arg0.CraftNavigationWidget:setAlpha( 0 ) --[[ @ 0]]
			f216_arg0.clipFinished( f216_arg0.CraftNavigationWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditor.__onClose = function ( f217_arg0 )
	f217_arg0.GroupFull:close() --[[ @ 0]]
	f217_arg0.emblemHiddenPulseLayerPC:close() --[[ @ 0]]
	f217_arg0.emblemHiddenPulseLayer:close() --[[ @ 0]]
	f217_arg0.layermofnPC:close() --[[ @ 0]]
	f217_arg0.layermofn:close() --[[ @ 0]]
	f217_arg0.BrowseControls:close() --[[ @ 0]]
	f217_arg0.EditControls:close() --[[ @ 0]]
	f217_arg0.emptyFocusable:close() --[[ @ 0]]
	f217_arg0.layerGrid:close() --[[ @ 0]]
	f217_arg0.ChangeLayerArrows:close() --[[ @ 0]]
	f217_arg0.layerCarousel:close() --[[ @ 0]]
	f217_arg0.emblemDrawWidget:close() --[[ @ 0]]
	f217_arg0.clipboard:close() --[[ @ 0]]
	f217_arg0.layerProperties:close() --[[ @ 0]]
	f217_arg0.actionsListPC:close() --[[ @ 0]]
	f217_arg0.CraftNavigationWidget:close() --[[ @ 0]]
	f217_arg0.EmblemEditorPCLegend:close() --[[ @ 0]]
	f217_arg0.EmblemEditorFrame:close() --[[ @ 0]]
end
 --[[ @ 0]]
