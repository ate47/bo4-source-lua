-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/backgroundframes/genericmenuframe" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/emblemdrawwidgetnew" ) --[[ @ 0]]
require( "x64:9827234958dd6bd" ) --[[ @ 0]]
require( "x64:703a3e3d8a297e8f" ) --[[ @ 0]]
require( "x64:7ece21f2f02e5733" ) --[[ @ 0]]
require( "x64:5543d2b49d2efc00" ) --[[ @ 0]]

CoD.EmblemEditorMaterialPicker = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.EmblemEditorMaterialPicker = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "EmblemEditorMaterialPicker", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.EmblemEditorMaterialPicker ) --[[ @ 0]]
	self.soundSet = "SelectColor" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 1, 3, 3, 0.5, 1.5, -540, -540 ) --[[ @ 0]]
	Background:setImage( RegisterImage( @"uie_t7_mp_menu_cac_version6_backdrop720p" ) ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local ScreenBkgd = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ScreenBkgd:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ScreenBkgd:setAlpha( 0.75 ) --[[ @ 0]]
	self:addElement( ScreenBkgd ) --[[ @ 0]]
	self.ScreenBkgd = ScreenBkgd --[[ @ 0]]
	
	local emblemDrawWidget0 = CoD.EmblemDrawWidgetNew.new( f1_local1, f1_arg0, 0.5, 0.5, -270, 270, 0, 0, 168, 708 ) --[[ @ 0]]
	self:addElement( emblemDrawWidget0 ) --[[ @ 0]]
	self.emblemDrawWidget0 = emblemDrawWidget0 --[[ @ 0]]
	
	local materialSwatch = CoD.EmblemEditorMaterialSwatch.new( f1_local1, f1_arg0, 0.5, 0.5, -457.5, 422.5, 0, 0, 731, 971 ) --[[ @ 0]]
	self:addElement( materialSwatch ) --[[ @ 0]]
	self.materialSwatch = materialSwatch --[[ @ 0]]
	
	local materialInfo = CoD.EmblemEditorMaterialInfo.new( f1_local1, f1_arg0, 0.5, 0.5, -270, 270, 0.5, 0.5, -449, -381 ) --[[ @ 0]]
	materialInfo:subscribeToGlobalModel( f1_arg0, "EmblemSelectedLayerProperties", nil, function ( model )
		materialInfo:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( materialInfo ) --[[ @ 0]]
	self.materialInfo = materialInfo --[[ @ 0]]
	
	local materialControls = CoD.EmblemEditorMaterialControls.new( f1_local1, f1_arg0, 0.5, 0.5, 348, 768, 0, 0, 168, 358 ) --[[ @ 0]]
	materialControls:mergeStateConditions( {
		{
			stateName = "FixedScale",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.materialScaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] )
			end
		},
		{
			stateName = "FreeScale",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.materialScaleMode", Enum[@"CustomizationScaleType"][@"hash_428641F0558446C7"] )
			end
		}
	} ) --[[ @ 0]]
	local actionsListPC = materialControls --[[ @ 0]]
	local f1_local9 = materialControls.subscribeToModel --[[ @ 0]]
	local EmblemEditorFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local9( actionsListPC, EmblemEditorFrame["Emblem.EmblemProperties.materialScaleMode"], function ( f5_arg0 )
		f1_local1:updateElementState( materialControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f5_arg0:get(),
			modelName = "Emblem.EmblemProperties.materialScaleMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( materialControls ) --[[ @ 0]]
	self.materialControls = materialControls --[[ @ 0]]
	
	f1_local9 = nil --[[ @ 0]]
	
	actionsListPC = LUI.UIList.new( f1_local1, f1_arg0, 0, 0, nil, false, false, false, false ) --[[ @ 0]]
	actionsListPC:setLeftRight( 0.5, 0.5, 390, 765 ) --[[ @ 0]]
	actionsListPC:setTopBottom( 0, 0, 150, 700 ) --[[ @ 0]]
	actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	actionsListPC:setWidgetType( CoD.CraftActionHeader ) --[[ @ 0]]
	actionsListPC:setVerticalCount( 10 ) --[[ @ 0]]
	actionsListPC:setSpacing( 0 ) --[[ @ 0]]
	actionsListPC:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	actionsListPC:setDataSource( "CraftMaterialActionsPC" ) --[[ @ 0]]
	self:addElement( actionsListPC ) --[[ @ 0]]
	self.actionsListPC = actionsListPC --[[ @ 0]]
	
	EmblemEditorFrame = CoD.GenericMenuFrame.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	EmblemEditorFrame.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_7E8932DB4373E47F" ) ) --[[ @ 0]]
	EmblemEditorFrame:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			EmblemEditorFrame.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( EmblemEditorFrame ) --[[ @ 0]]
	self.EmblemEditorFrame = EmblemEditorFrame --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				local f7_local0 --[[ @ 0]]
				if not IsGamepad( f1_arg0 ) then
					f7_local0 = IsPC() --[[ @ 0]]
				else
					f7_local0 = false --[[ @ 0]]
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f8_arg0, f8_arg1 )
		f8_arg1.menu = f8_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( self, f8_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	local f1_local12 = self.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13.LastInput, function ( f9_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f9_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if IsPC() then
			GoBack( self, controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		else
			CoD.CraftUtility.EmblemEditor_RevertLayerChanges( self, controller ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseMaterial_UpdateMaterialAngleByStep( self, element, -1, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseMaterial_UpdateMaterialAngleByStep( self, element, 1, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], nil, function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseMaterial_ToggleScaleMode( self, element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	if CoD.isPC then
		emblemDrawWidget0.id = "emblemDrawWidget0" --[[ @ 0]]
	end
	materialSwatch.id = "materialSwatch" --[[ @ 0]]
	actionsListPC.id = "actionsListPC" --[[ @ 0]]
	EmblemEditorFrame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		EmblemEditorFrame.id = "EmblemEditorFrame" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = materialSwatch --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local12 = self --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.CraftUtility.SetupMouseScrollingEmblemMaterialScale( f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.CraftUtility.SetupRightStickEmblemMaterialScale( f1_local1, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorMaterialPicker.__resetProperties = function ( f18_arg0 )
	f18_arg0.ScreenBkgd:completeAnimation() --[[ @ 0]]
	f18_arg0.Background:completeAnimation() --[[ @ 0]]
	f18_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
	f18_arg0.materialInfo:completeAnimation() --[[ @ 0]]
	f18_arg0.materialControls:completeAnimation() --[[ @ 0]]
	f18_arg0.ScreenBkgd:setAlpha( 0.75 ) --[[ @ 0]]
	f18_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.actionsListPC:setLeftRight( 0.5, 0.5, 390, 765 ) --[[ @ 0]]
	f18_arg0.actionsListPC:setTopBottom( 0, 0, 150, 700 ) --[[ @ 0]]
	f18_arg0.actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.materialInfo:setLeftRight( 0.5, 0.5, -270, 270 ) --[[ @ 0]]
	f18_arg0.materialInfo:setTopBottom( 0.5, 0.5, -449, -381 ) --[[ @ 0]]
	f18_arg0.materialControls:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditorMaterialPicker.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f19_arg0.Background:completeAnimation() --[[ @ 0]]
			f19_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Background ) --[[ @ 0]]
			f19_arg0.ScreenBkgd:completeAnimation() --[[ @ 0]]
			f19_arg0.ScreenBkgd:setAlpha( 0.75 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.ScreenBkgd ) --[[ @ 0]]
			f19_arg0.materialInfo:completeAnimation() --[[ @ 0]]
			f19_arg0.materialInfo:setLeftRight( 0.5, 0.5, -270, 270 ) --[[ @ 0]]
			f19_arg0.materialInfo:setTopBottom( 0.5, 0.5, -449, -381 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.materialInfo ) --[[ @ 0]]
			f19_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
			f19_arg0.actionsListPC:setLeftRight( 0.5, 0.5, 96, 471 ) --[[ @ 0]]
			f19_arg0.actionsListPC:setTopBottom( 0, 0, 193.5, 520.5 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.actionsListPC ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f20_arg0.materialInfo:completeAnimation() --[[ @ 0]]
			f20_arg0.materialInfo:setLeftRight( 0.5, 0.5, -721, -469 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.materialInfo ) --[[ @ 0]]
			f20_arg0.materialControls:completeAnimation() --[[ @ 0]]
			f20_arg0.materialControls:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.materialControls ) --[[ @ 0]]
			f20_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
			f20_arg0.actionsListPC:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.actionsListPC ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditorMaterialPicker.__onClose = function ( f21_arg0 )
	f21_arg0.emblemDrawWidget0:close() --[[ @ 0]]
	f21_arg0.materialSwatch:close() --[[ @ 0]]
	f21_arg0.materialInfo:close() --[[ @ 0]]
	f21_arg0.materialControls:close() --[[ @ 0]]
	f21_arg0.actionsListPC:close() --[[ @ 0]]
	f21_arg0.EmblemEditorFrame:close() --[[ @ 0]]
end
 --[[ @ 0]]
