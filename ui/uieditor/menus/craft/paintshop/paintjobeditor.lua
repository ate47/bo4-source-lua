-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/menus/craft/emblemeditor/emblemeditormaterialpicker" ) --[[ @ 0]]
require( "x64:72c761c2d0b39f9e" ) --[[ @ 0]]
require( "x64:2cc9e6a3e79912c1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/backgroundframes/genericmenuframe" ) --[[ @ 0]]
require( "x64:73a93d900ceb94aa" ) --[[ @ 0]]
require( "x64:7f402714dd006d0f" ) --[[ @ 0]]
require( "x64:4adab6b12122be" ) --[[ @ 0]]
require( "x64:536e77a9b049f485" ) --[[ @ 0]]
require( "x64:367f78c5fc3fabc3" ) --[[ @ 0]]
require( "x64:323d82441ecd8c0" ) --[[ @ 0]]
require( "x64:3ddfef783446f679" ) --[[ @ 0]]
require( "x64:41d53e3f47e4acc1" ) --[[ @ 0]]
require( "x64:4364e318b9b1d8f3" ) --[[ @ 0]]
require( "x64:10d0050378eaa77f" ) --[[ @ 0]]
require( "x64:1dc7282a18b413e0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]
require( "x64:5a13526379cc0c3" ) --[[ @ 0]]
require( "x64:5543d2b49d2efc00" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.PaintjobEditor = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.PaintjobEditor = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "PaintjobEditor", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.DirectorUtility.DisableLeaderChangeShutdown( f1_local1 ) --[[ @ 0]]
	DisableRestoreState( f1_local1 ) --[[ @ 0]]
	DisableAutoButtonCallback( f1_local1, self, f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg0, "DecalGroups.UpdateDataSource" ) --[[ @ 0]]
	self:setClass( CoD.PaintjobEditor ) --[[ @ 0]]
	self.soundSet = "CustomizationEditor" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local GroupFull = nil --[[ @ 0]]
	
	GroupFull = CoD.PaintshopButtonPrompt.new( f1_local1, f1_arg0, 0.5, 0.5, -180, 180, 0.5, 0.5, 280, 320 ) --[[ @ 0]]
	GroupFull:mergeStateConditions( {
		{
			stateName = "KM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 ) and CoD.CraftUtility.EmblemEditor_ShowGroupSlotsFull( self, f1_arg0, menu )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.CraftUtility.EmblemEditor_ShowGroupSlotsFull( self, f1_arg0, menu )
			end
		}
	} ) --[[ @ 0]]
	GroupFull:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( GroupFull, f4_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local layerGrid = GroupFull --[[ @ 0]]
	local f1_local4 = GroupFull.subscribeToModel --[[ @ 0]]
	local ChangeLayerArrows = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local4( layerGrid, ChangeLayerArrows.LastInput, function ( f5_arg0 )
		f1_local1:updateElementState( GroupFull, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f5_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GroupFull:setAlpha( 0 ) --[[ @ 0]]
	GroupFull.buttonPromptImage:setImage( RegisterImage( @"hash_51F10DEAAEFC50A4" ) ) --[[ @ 0]]
	GroupFull.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_35E24C3255091DF" ) ) --[[ @ 0]]
	self:addElement( GroupFull ) --[[ @ 0]]
	self.GroupFull = GroupFull --[[ @ 0]]
	
	f1_local4 = nil --[[ @ 0]]
	
	layerGrid = LUI.GridLayout.new( f1_local1, f1_arg0, false, 0, 0, 0, 0, nil, nil, true, false, false, false ) --[[ @ 0]]
	layerGrid:mergeStateConditions( {
		{
			stateName = "DefaultStateKBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layerGrid:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( layerGrid, f7_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	local emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC.LastInput, function ( f8_arg0 )
		f1_local1:updateElementState( layerGrid, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f8_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:setLeftRight( 0.5, 0.5, -860, -516 ) --[[ @ 0]]
	layerGrid:setTopBottom( 0, 0, 100, 960 ) --[[ @ 0]]
	layerGrid:setAlpha( 0 ) --[[ @ 0]]
	layerGrid:setWidgetType( CoD.EmblemLayerContainer ) --[[ @ 0]]
	layerGrid:setHorizontalCount( 2 ) --[[ @ 0]]
	layerGrid:setVerticalCount( 5 ) --[[ @ 0]]
	layerGrid:setSpacing( 0 ) --[[ @ 0]]
	layerGrid:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	layerGrid:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	layerGrid:setDataSource( "EmblemLayerList" ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "layerIndex", true, function ( model, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "iconID", true, function ( model, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.groupsUsed"], function ( f11_arg0, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.layersUsed"], function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.editorMode"], function ( f13_arg0, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:appendEventHandler( "input_source_changed", function ( f14_arg0, f14_arg1 )
		f14_arg1.menu = f14_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC.LastInput, function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel = layerGrid --[[ @ 0]]
	ChangeLayerArrows = layerGrid.subscribeToModel --[[ @ 0]]
	emblemHiddenPulseLayerPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ChangeLayerArrows( layerCarousel, emblemHiddenPulseLayerPC["Emblem.EmblemProperties.isClipboardEmpty"], function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerGrid:linkToElementModel( layerGrid, "isLinked", true, function ( model, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerGrid:registerEventHandler( "gain_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f18_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f18_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "GroupFull", controller ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayerPC",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsLayerEmpty( self, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_link", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_link" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_contextual_3", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_contextual_3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_remove", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_layertop", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "left" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_layertop" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_layerbottom", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "right" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_layerbottom" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_newlayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_newlayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_cutlayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_CutLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_cutlayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_copylayer", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_copylayer" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerGrid, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_group", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( element, controller ) then
			CoD.CraftUtility.EmblemEditor_LayerGainFocus( menu, self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, controller, element ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, element, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_group" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_972C68080927021", function ( f39_arg0, f39_arg1, f39_arg2, f39_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f39_arg0, f39_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f39_arg0, f39_arg2 ) and not CoD.CraftUtility.Emblems_IsLayerLinked( f39_arg0, f39_arg2 ) then
			return function ( f40_arg0, f40_arg1, f40_arg2, f40_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f40_arg1, self, f40_arg0, f40_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, f40_arg2, f40_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f40_arg2, f40_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_782789B43F936B78", function ( f41_arg0, f41_arg1, f41_arg2, f41_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f41_arg0, f41_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f41_arg0, f41_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f41_arg0, f41_arg2 ) then
			return function ( f42_arg0, f42_arg1, f42_arg2, f42_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f42_arg1, self, f42_arg0, f42_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, f42_arg2, f42_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f42_arg2, f42_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_E4FD6AD543818C0", function ( f43_arg0, f43_arg1, f43_arg2, f43_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f43_arg0, f43_arg2 ) then
			return function ( f44_arg0, f44_arg1, f44_arg2, f44_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f44_arg1, self, f44_arg0, f44_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_CutLayer( self, f44_arg0, f44_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f44_arg2, f44_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_5AEC3D591F4359E", function ( f45_arg0, f45_arg1, f45_arg2, f45_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f45_arg0, f45_arg2 ) then
			return function ( f46_arg0, f46_arg1, f46_arg2, f46_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f46_arg1, self, f46_arg0, f46_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, f46_arg0, f46_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f46_arg2, f46_arg0 ) --[[ @ 0]]
				PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_C557F1B0FF34983", function ( f47_arg0, f47_arg1, f47_arg2, f47_arg3 )
		if not CoD.CraftUtility.IsClipboardEmpty( f47_arg2 ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( f47_arg0, f47_arg2 ) then
			return function ( f48_arg0, f48_arg1, f48_arg2, f48_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f48_arg1, self, f48_arg0, f48_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_InsertLayer( self, f48_arg0, f48_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f48_arg2, f48_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_6345431B325139E6", function ( f49_arg0, f49_arg1, f49_arg2, f49_arg3 )
		if CoD.CraftUtility.Emblem_IsLayerGrouped( f49_arg0, f49_arg2 ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f49_arg2 ) then
			return function ( f50_arg0, f50_arg1, f50_arg2, f50_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f50_arg1, self, f50_arg0, f50_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreSelectedGroup( self, f50_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_OpenSaveGroupPopup( self, f50_arg0, f50_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f50_arg2, f50_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_64389B00AC580011", function ( f51_arg0, f51_arg1, f51_arg2, f51_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f51_arg0, f51_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f51_arg0, f51_arg2 ) then
			return function ( f52_arg0, f52_arg1, f52_arg2, f52_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f52_arg1, self, f52_arg0, f52_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, f52_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, f52_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, f52_arg2 ) --[[ @ 0]]
				OpenOverlay( self, "PaintshopChooseIcon", f52_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f52_arg2, f52_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_1343441CAE04FDED", function ( f53_arg0, f53_arg1, f53_arg2, f53_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f53_arg0, f53_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f53_arg0, f53_arg2 ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( f53_arg0, f53_arg2 ) then
			return function ( f54_arg0, f54_arg1, f54_arg2, f54_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f54_arg1, self, f54_arg0, f54_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, f54_arg2, f54_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f54_arg2, f54_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_36EA1EDF54B8F820", function ( f55_arg0, f55_arg1, f55_arg2, f55_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f55_arg0, f55_arg2 ) and CoD.CraftUtility.Emblems_IsLayerLinked( f55_arg0, f55_arg2 ) and CoD.CraftUtility.Emblem_IsLayerGrouped( f55_arg0, f55_arg2 ) then
			return function ( f56_arg0, f56_arg1, f56_arg2, f56_arg3 )
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f56_arg1, self, f56_arg0, f56_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, f56_arg2, f56_arg0 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, f56_arg2, f56_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	layerGrid:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_7E26022B0886ED3", function ( f57_arg0, f57_arg1, f57_arg2, f57_arg3 )
		if not CoD.CraftUtility.IsLayerEmpty( self, f57_arg0, f57_arg2 ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( f57_arg2 ) then
			return function ( f58_arg0, f58_arg1, f58_arg2, f58_arg3 )
				CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, f58_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_LayerGainFocus( f58_arg1, self, f58_arg0, f58_arg2 ) --[[ @ 0]]
				CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, f58_arg0, f58_arg2 ) --[[ @ 0]]
				OpenOverlay( self, "PaintshopChooseIcon", f58_arg2, nil ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( layerGrid ) --[[ @ 0]]
	self.layerGrid = layerGrid --[[ @ 0]]
	
	ChangeLayerArrows = nil --[[ @ 0]]
	
	ChangeLayerArrows = CoD.ChangeLayerArrows.new( f1_local1, f1_arg0, 0.5, 0.5, -125, 125, 0.5, 0.5, 227.5, 272.5 ) --[[ @ 0]]
	ChangeLayerArrows:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ChangeLayerArrows ) --[[ @ 0]]
	self.ChangeLayerArrows = ChangeLayerArrows --[[ @ 0]]
	
	layerCarousel = LUI.UIList.new( f1_local1, f1_arg0, 2, 200, nil, false, true, false, false ) --[[ @ 0]]
	layerCarousel:mergeStateConditions( {
		{
			stateName = "EditMode_Selected",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local emblemHiddenPulseLayer = layerCarousel --[[ @ 0]]
	emblemHiddenPulseLayerPC = layerCarousel.subscribeToModel --[[ @ 0]]
	local clipboard = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, clipboard["Emblem.EmblemProperties.editorMode"], function ( f60_arg0 )
		f1_local1:updateElementState( layerCarousel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f60_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:setLeftRight( 0, 0, 148.5, 3655.5 ) --[[ @ 0]]
	layerCarousel:setTopBottom( 0, 0, 757.5, 929.5 ) --[[ @ 0]]
	layerCarousel:setWidgetType( CoD.EmblemLayerContainer ) --[[ @ 0]]
	layerCarousel:setHorizontalCount( 16 ) --[[ @ 0]]
	layerCarousel:setFirstElementXOffset( 725 ) --[[ @ 0]]
	layerCarousel:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	layerCarousel:setDataSource( "EmblemLayerList" ) --[[ @ 0]]
	emblemHiddenPulseLayer = layerCarousel --[[ @ 0]]
	emblemHiddenPulseLayerPC = layerCarousel.subscribeToModel --[[ @ 0]]
	clipboard = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, clipboard["Emblem.EmblemProperties.editorMode"], function ( f61_arg0, f61_arg1 )
		CoD.Menu.UpdateButtonShownState( f61_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "layerIndex", true, function ( model, f62_arg1 )
		CoD.Menu.UpdateButtonShownState( f62_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layerCarousel:linkToElementModel( layerCarousel, "iconID", true, function ( model, f63_arg1 )
		CoD.Menu.UpdateButtonShownState( f63_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayer = layerCarousel --[[ @ 0]]
	emblemHiddenPulseLayerPC = layerCarousel.subscribeToModel --[[ @ 0]]
	clipboard = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, clipboard["Emblem.EmblemProperties.groupsUsed"], function ( f64_arg0, f64_arg1 )
		CoD.Menu.UpdateButtonShownState( f64_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emblemHiddenPulseLayer = layerCarousel --[[ @ 0]]
	emblemHiddenPulseLayerPC = layerCarousel.subscribeToModel --[[ @ 0]]
	clipboard = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, clipboard["Emblem.EmblemProperties.layersUsed"], function ( f65_arg0, f65_arg1 )
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:appendEventHandler( "input_source_changed", function ( f66_arg0, f66_arg1 )
		f66_arg1.menu = f66_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayer = layerCarousel --[[ @ 0]]
	emblemHiddenPulseLayerPC = layerCarousel.subscribeToModel --[[ @ 0]]
	clipboard = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC( emblemHiddenPulseLayer, clipboard.LastInput, function ( f67_arg0, f67_arg1 )
		CoD.Menu.UpdateButtonShownState( f67_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerCarousel:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f68_local0 = nil --[[ @ 0]]
		CoD.CraftUtility.EmblemEditor_LayerGainFocus( f1_local1, self, element, f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "layermofn", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "BrowseControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "EditControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "clipboard", f1_arg0 ) --[[ @ 0]]
		PlayClipOnElement( self, {
			elementName = "emblemHiddenPulseLayer",
			clipName = "DefaultClip"
		}, f1_arg0 ) --[[ @ 0]]
		return f68_local0
	end ) --[[ @ 0]]
	layerCarousel:registerEventHandler( "gain_focus", function ( element, event )
		local f69_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f69_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f69_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		return f69_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( layerCarousel, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( model ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( nil ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( layerCarousel ) --[[ @ 0]]
	self.layerCarousel = layerCarousel --[[ @ 0]]
	
	emblemHiddenPulseLayerPC = nil --[[ @ 0]]
	
	emblemHiddenPulseLayerPC = CoD.EmblemPulseLayerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -360, 360, 0, 0, 210, 646 ) --[[ @ 0]]
	emblemHiddenPulseLayerPC:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( emblemHiddenPulseLayerPC ) --[[ @ 0]]
	self.emblemHiddenPulseLayerPC = emblemHiddenPulseLayerPC --[[ @ 0]]
	
	emblemHiddenPulseLayer = CoD.EmblemPulseLayerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -360, 360, 0, 0, 210, 646 ) --[[ @ 0]]
	self:addElement( emblemHiddenPulseLayer ) --[[ @ 0]]
	self.emblemHiddenPulseLayer = emblemHiddenPulseLayer --[[ @ 0]]
	
	clipboard = CoD.EmblemIconClipboard.new( f1_local1, f1_arg0, 0.5, 0.5, -831, -579, 0, 0, 117, 392 ) --[[ @ 0]]
	clipboard:mergeStateConditions( {
		{
			stateName = "PasteState",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblem_CanPastFromClipboard( element, f1_arg0 ) and not CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		},
		{
			stateName = "AllGroupsUsed",
			condition = function ( menu, element, event )
				local f73_local0 --[[ @ 0]]
				if not IsGroupSlotAvailable( f1_arg0 ) then
					f73_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_3EBDFD4FFDC7DA3"] ) --[[ @ 0]]
					if f73_local0 then
						f73_local0 = CoD.CraftUtility.IsClipboardEmblemGrouped( f1_arg0 ) --[[ @ 0]]
						if f73_local0 then
							f73_local0 = not CoD.CraftUtility.IsEditMode( f1_arg0 ) --[[ @ 0]]
						end
					end
				else
					f73_local0 = false --[[ @ 0]]
				end
				return f73_local0
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local layermofn = clipboard --[[ @ 0]]
	local layermofnPC = clipboard.subscribeToModel --[[ @ 0]]
	local EditControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofnPC( layermofn, EditControls["Emblem.EmblemProperties.editorMode"], function ( f75_arg0 )
		f1_local1:updateElementState( clipboard, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f75_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layermofn = clipboard --[[ @ 0]]
	layermofnPC = clipboard.subscribeToModel --[[ @ 0]]
	EditControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofnPC( layermofn, EditControls["Emblem.EmblemProperties.groupsUsed"], function ( f76_arg0 )
		f1_local1:updateElementState( clipboard, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f76_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	clipboard:subscribeToGlobalModel( f1_arg0, "CraftClipboard", nil, function ( model )
		clipboard:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( clipboard ) --[[ @ 0]]
	self.clipboard = clipboard --[[ @ 0]]
	
	layermofnPC = nil --[[ @ 0]]
	
	layermofnPC = CoD.layermofn.new( f1_local1, f1_arg0, 0.5, 0.5, -120, 120, 0, 0, 929.5, 974.5 ) --[[ @ 0]]
	layermofnPC:mergeStateConditions( {
		{
			stateName = "EmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layermofnPC, "layerIndex", true, function ( model )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layermofnPC, "iconID", true, function ( model )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EditControls = layermofnPC --[[ @ 0]]
	layermofn = layermofnPC.subscribeToModel --[[ @ 0]]
	local BrowseControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofn( EditControls, BrowseControls["Emblem.EmblemProperties.groupsUsed"], function ( f81_arg0 )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f81_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EditControls = layermofnPC --[[ @ 0]]
	layermofn = layermofnPC.subscribeToModel --[[ @ 0]]
	BrowseControls = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	layermofn( EditControls, BrowseControls["Emblem.EmblemProperties.layersUsed"], function ( f82_arg0 )
		f1_local1:updateElementState( layermofnPC, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f82_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( layermofnPC ) --[[ @ 0]]
	self.layermofnPC = layermofnPC --[[ @ 0]]
	
	layermofn = CoD.layermofn.new( f1_local1, f1_arg0, 0.5, 0.5, -120, 120, 0, 0, 929.5, 974.5 ) --[[ @ 0]]
	layermofn:mergeStateConditions( {
		{
			stateName = "EmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	layermofn:linkToElementModel( layermofn, "layerIndex", true, function ( model )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofn:linkToElementModel( layermofn, "iconID", true, function ( model )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BrowseControls = layermofn --[[ @ 0]]
	EditControls = layermofn.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( BrowseControls, f1_local14["Emblem.EmblemProperties.groupsUsed"], function ( f86_arg0 )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f86_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	BrowseControls = layermofn --[[ @ 0]]
	EditControls = layermofn.subscribeToModel --[[ @ 0]]
	f1_local14 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	EditControls( BrowseControls, f1_local14["Emblem.EmblemProperties.layersUsed"], function ( f87_arg0 )
		f1_local1:updateElementState( layermofn, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f87_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( layermofn ) --[[ @ 0]]
	self.layermofn = layermofn --[[ @ 0]]
	
	EditControls = CoD.PaintshopControlsFull.new( f1_local1, f1_arg0, 0.5, 0.5, 444, 864, 0, 0, 117, 657 ) --[[ @ 0]]
	EditControls:mergeStateConditions( {
		{
			stateName = "BrowseModeControlsState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] )
			end
		},
		{
			stateName = "FixedScale",
			condition = function ( menu, element, event )
				local f89_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f89_local0 then
					f89_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f89_local0 then
						if not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) then
							f89_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						else
							f89_local0 = false --[[ @ 0]]
						end
					end
				end
				return f89_local0
			end
		},
		{
			stateName = "FreeScale",
			condition = function ( menu, element, event )
				local f90_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) then
					f90_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f90_local0 then
						if not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) then
							f90_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						else
							f90_local0 = false --[[ @ 0]]
						end
					end
				else
					f90_local0 = false --[[ @ 0]]
				end
				return f90_local0
			end
		},
		{
			stateName = "StickerFixedScale",
			condition = function ( menu, element, event )
				local f91_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f91_local0 then
					f91_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f91_local0 then
						f91_local0 = CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						if f91_local0 then
							f91_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						end
					end
				end
				return f91_local0
			end
		},
		{
			stateName = "StickerFreeScale",
			condition = function ( menu, element, event )
				local f92_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) then
					f92_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f92_local0 then
						f92_local0 = CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						if f92_local0 then
							f92_local0 = not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
						end
					end
				else
					f92_local0 = false --[[ @ 0]]
				end
				return f92_local0
			end
		},
		{
			stateName = "FixedScaleOnly",
			condition = function ( menu, element, event )
				local f93_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.scaleMode", Enum[@"CustomizationScaleType"][@"hash_7519A07F3DC9EF2D"] ) --[[ @ 0]]
				if f93_local0 then
					f93_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "Emblem.EmblemProperties.editorMode", Enum[@"CustomizationEditorMode"][@"hash_5E2FFAEFF67F59AD"] ) --[[ @ 0]]
					if f93_local0 then
						f93_local0 = CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, f1_arg0 ) --[[ @ 0]]
					end
				end
				return f93_local0
			end
		}
	} ) --[[ @ 0]]
	f1_local14 = EditControls --[[ @ 0]]
	BrowseControls = EditControls.subscribeToModel --[[ @ 0]]
	local actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BrowseControls( f1_local14, actionsListPC["Emblem.EmblemProperties.editorMode"], function ( f94_arg0 )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f94_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = EditControls --[[ @ 0]]
	BrowseControls = EditControls.subscribeToModel --[[ @ 0]]
	actionsListPC = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	BrowseControls( f1_local14, actionsListPC["Emblem.EmblemProperties.scaleMode"], function ( f95_arg0 )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f95_arg0:get(),
			modelName = "Emblem.EmblemProperties.scaleMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EditControls:linkToElementModel( EditControls, "iconID", true, function ( model )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EditControls:linkToElementModel( EditControls, "isGrouped", true, function ( model )
		f1_local1:updateElementState( EditControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( EditControls ) --[[ @ 0]]
	self.EditControls = EditControls --[[ @ 0]]
	
	BrowseControls = CoD.PaintshopBrowseControlsFull.new( f1_local1, f1_arg0, 0.5, 0.5, 444, 864, 0, 0, 117, 657 ) --[[ @ 0]]
	BrowseControls:mergeStateConditions( {
		{
			stateName = "EditModeControlsState",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEditMode( f1_arg0 )
			end
		},
		{
			stateName = "BrowseLayersLinked",
			condition = function ( menu, element, event )
				return BrowseModeLinkedLayer( self, f1_arg0, self.layerCarousel, menu )
			end
		},
		{
			stateName = "BrowseLayerGrouped",
			condition = function ( menu, element, event )
				return BrowseModeGroupedLayer( self, f1_arg0, self.layerCarousel, menu ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f1_arg0 )
			end
		},
		{
			stateName = "BrowseLayerGroupedMax",
			condition = function ( menu, element, event )
				return BrowseModeGroupedLayer( self, f1_arg0, self.layerCarousel, menu ) and not CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( f1_arg0 )
			end
		},
		{
			stateName = "BrowseEmptyLayer",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	actionsListPC = BrowseControls --[[ @ 0]]
	f1_local14 = BrowseControls.subscribeToModel --[[ @ 0]]
	local CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local14( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.editorMode"], function ( f103_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f103_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	actionsListPC = BrowseControls --[[ @ 0]]
	f1_local14 = BrowseControls.subscribeToModel --[[ @ 0]]
	CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local14( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.linkedLayerCount"], function ( f104_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f104_arg0:get(),
			modelName = "Emblem.EmblemProperties.linkedLayerCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	actionsListPC = BrowseControls --[[ @ 0]]
	f1_local14 = BrowseControls.subscribeToModel --[[ @ 0]]
	CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local14( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.groupsUsed"], function ( f105_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f105_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	BrowseControls:linkToElementModel( BrowseControls, "layerIndex", true, function ( model )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "layerIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BrowseControls:linkToElementModel( BrowseControls, "iconID", true, function ( model )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "iconID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	actionsListPC = BrowseControls --[[ @ 0]]
	f1_local14 = BrowseControls.subscribeToModel --[[ @ 0]]
	CraftNavigationWidget = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local14( actionsListPC, CraftNavigationWidget["Emblem.EmblemProperties.layersUsed"], function ( f108_arg0 )
		f1_local1:updateElementState( BrowseControls, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f108_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( BrowseControls ) --[[ @ 0]]
	self.BrowseControls = BrowseControls --[[ @ 0]]
	
	f1_local14 = nil --[[ @ 0]]
	
	actionsListPC = LUI.UIList.new( f1_local1, f1_arg0, 0, 0, nil, false, false, false, false ) --[[ @ 0]]
	actionsListPC:setLeftRight( 0.5, 0.5, 540, 915 ) --[[ @ 0]]
	actionsListPC:setTopBottom( 0, 0, 100, 925 ) --[[ @ 0]]
	actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	actionsListPC:setWidgetType( CoD.CraftActionHeader ) --[[ @ 0]]
	actionsListPC:setVerticalCount( 15 ) --[[ @ 0]]
	actionsListPC:setSpacing( 0 ) --[[ @ 0]]
	actionsListPC:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	actionsListPC:setDataSource( "CraftActionsPC" ) --[[ @ 0]]
	actionsListPC:subscribeToGlobalModel( f1_arg0, "PerController", "Emblem.EmblemProperties.editorMode", function ( model )
		UpdateDataSource( self, actionsListPC, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( actionsListPC ) --[[ @ 0]]
	self.actionsListPC = actionsListPC --[[ @ 0]]
	
	CraftNavigationWidget = CoD.CraftNavigationWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -200, 200, 0, 0, 716, 766 ) --[[ @ 0]]
	self:addElement( CraftNavigationWidget ) --[[ @ 0]]
	self.CraftNavigationWidget = CraftNavigationWidget --[[ @ 0]]
	
	local emptyFocusable = CoD.craftEmptyFocusable.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, -10, 1070 ) --[[ @ 0]]
	emptyFocusable:mergeStateConditions( {
		{
			stateName = "Unfocusable",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsBrowseMode( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local EmblemEditorPCLegend = emptyFocusable --[[ @ 0]]
	local DrawEmblemFocusable = emptyFocusable.subscribeToModel --[[ @ 0]]
	local PaintshopFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	DrawEmblemFocusable( EmblemEditorPCLegend, PaintshopFrame["Emblem.EmblemProperties.editorMode"], function ( f111_arg0 )
		f1_local1:updateElementState( emptyFocusable, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f111_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EmblemEditorPCLegend = emptyFocusable --[[ @ 0]]
	DrawEmblemFocusable = emptyFocusable.subscribeToModel --[[ @ 0]]
	PaintshopFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	DrawEmblemFocusable( EmblemEditorPCLegend, PaintshopFrame["Emblem.EmblemProperties.editorMode"], function ( f112_arg0, f112_arg1 )
		CoD.Menu.UpdateButtonShownState( f112_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f112_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f112_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f112_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:appendEventHandler( "input_source_changed", function ( f113_arg0, f113_arg1 )
		f113_arg1.menu = f113_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f113_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f113_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EmblemEditorPCLegend = emptyFocusable --[[ @ 0]]
	DrawEmblemFocusable = emptyFocusable.subscribeToModel --[[ @ 0]]
	PaintshopFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	DrawEmblemFocusable( EmblemEditorPCLegend, PaintshopFrame.LastInput, function ( f114_arg0, f114_arg1 )
		CoD.Menu.UpdateButtonShownState( f114_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f114_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "layerIndex", true, function ( model, f115_arg1 )
		CoD.Menu.UpdateButtonShownState( f115_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "iconID", true, function ( model, f116_arg1 )
		CoD.Menu.UpdateButtonShownState( f116_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	EmblemEditorPCLegend = emptyFocusable --[[ @ 0]]
	DrawEmblemFocusable = emptyFocusable.subscribeToModel --[[ @ 0]]
	PaintshopFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	DrawEmblemFocusable( EmblemEditorPCLegend, PaintshopFrame["Emblem.EmblemProperties.groupsUsed"], function ( f117_arg0, f117_arg1 )
		CoD.Menu.UpdateButtonShownState( f117_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EmblemEditorPCLegend = emptyFocusable --[[ @ 0]]
	DrawEmblemFocusable = emptyFocusable.subscribeToModel --[[ @ 0]]
	PaintshopFrame = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	DrawEmblemFocusable( EmblemEditorPCLegend, PaintshopFrame["Emblem.EmblemProperties.layersUsed"], function ( f118_arg0, f118_arg1 )
		CoD.Menu.UpdateButtonShownState( f118_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "isGrouped", true, function ( model, f119_arg1 )
		CoD.Menu.UpdateButtonShownState( f119_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f120_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f120_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f120_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		return f120_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "left" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f122_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f122_local0 ) and IsDpadButton( f122_local0 ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_MoveLayer( self, menu, controller, "right" ) --[[ @ 0]]
			PlaySoundSetSound( self, "layer_switch" ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f124_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f124_local0 ) and IsDpadButton( f124_local0 ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) and IsDpadButton( model ) and CoD.BaseUtility.IsDvarEnabled( "enable_material_picker" ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "EmblemEditorMaterialPicker", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerCarousel, controller ) and IsDpadButton( nil ) and CoD.BaseUtility.IsDvarEnabled( "enable_material_picker" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( emptyFocusable, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( model ) and IsDpadButton( model ) and CoD.BaseUtility.IsDvarEnabled( "enable_clip_mask" ) then
			CoD.CraftUtility.EmblemEditor_ClipLayer( self, self.layerCarousel, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f128_local0 = nil --[[ @ 0]]
		if CoD.CraftUtility.IsEditMode( controller ) and not IsRepeatButtonPress( f128_local0 ) and IsDpadButton( f128_local0 ) and CoD.BaseUtility.IsDvarEnabled( "enable_clip_mask" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	DrawEmblemFocusable = nil --[[ @ 0]]
	
	DrawEmblemFocusable = CoD.DrawEmblemFocusable.new( f1_local1, f1_arg0, 0.5, 0.5, -491.5, 511.5, 0.15, 0.55, 0, 0 ) --[[ @ 0]]
	self:addElement( DrawEmblemFocusable ) --[[ @ 0]]
	self.DrawEmblemFocusable = DrawEmblemFocusable --[[ @ 0]]
	
	EmblemEditorPCLegend = nil --[[ @ 0]]
	
	EmblemEditorPCLegend = CoD.EmblemEditorPCLegend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( EmblemEditorPCLegend ) --[[ @ 0]]
	self.EmblemEditorPCLegend = EmblemEditorPCLegend --[[ @ 0]]
	
	PaintshopFrame = CoD.GenericMenuFrame.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	PaintshopFrame.CommonHeader.BGSceneBlur:setAlpha( 1 ) --[[ @ 0]]
	PaintshopFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle = function ()
		PaintshopFrame.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.CraftUtility.GetPaintjobEditorTitle( f1_arg0 ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	PaintshopFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle() --[[ @ 0]]
	PaintshopFrame:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f130_local0 = model:get() --[[ @ 0]]
		if f130_local0 ~= nil then
			PaintshopFrame.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f130_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PaintshopFrame ) --[[ @ 0]]
	self.PaintshopFrame = PaintshopFrame --[[ @ 0]]
	
	local SafeAreaContainer = CoD.PaintjobEditorSafeAreaContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	SafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f131_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f131_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f131_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f131_local0 then
			f131_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f131_local0
	end ) --[[ @ 0]]
	self:addElement( SafeAreaContainer ) --[[ @ 0]]
	self.SafeAreaContainer = SafeAreaContainer --[[ @ 0]]
	
	GroupFull:linkToElementModel( layerGrid, nil, false, function ( model )
		GroupFull:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( layerGrid, nil, false, function ( model )
		emblemHiddenPulseLayerPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex = function ( f134_arg0 )
		local f134_local0 = f134_arg0:get() --[[ @ 0]]
		if f134_local0 ~= nil then
			emblemHiddenPulseLayerPC.emblemHiddenPulseLayer:setupHiddenEmblemLayer( GetEmblemLayerAndGroupIndex( f1_arg0, f134_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( layerGrid, "layerAndGroupIndex", true, emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex ) --[[ @ 0]]
	emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath = function ()
		local f135_local0 = layerGrid:getModel() --[[ @ 0]]
		if f135_local0 then
			f135_local0 = layerGrid:getModel() --[[ @ 0]]
			f135_local0 = f135_local0.layerAndGroupIndex --[[ @ 0]]
		end
		if f135_local0 then
			emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex( f135_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayerPC:linkToElementModel( self, "iconID", true, emblemHiddenPulseLayerPC.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath ) --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( layerCarousel, nil, false, function ( model )
		emblemHiddenPulseLayer:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex = function ( f137_arg0 )
		local f137_local0 = f137_arg0:get() --[[ @ 0]]
		if f137_local0 ~= nil then
			emblemHiddenPulseLayer.emblemHiddenPulseLayer:setupHiddenEmblemLayer( GetEmblemLayerAndGroupIndex( f1_arg0, f137_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( layerCarousel, "layerAndGroupIndex", true, emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex ) --[[ @ 0]]
	emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath = function ()
		local f138_local0 = layerCarousel:getModel() --[[ @ 0]]
		if f138_local0 then
			f138_local0 = layerCarousel:getModel() --[[ @ 0]]
			f138_local0 = f138_local0.layerAndGroupIndex --[[ @ 0]]
		end
		if f138_local0 then
			emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex( f138_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	emblemHiddenPulseLayer:linkToElementModel( self, "iconID", true, emblemHiddenPulseLayer.emblemHiddenPulseLayer.__EmblemHiddenLayerIndex_FullPath ) --[[ @ 0]]
	layermofnPC:linkToElementModel( layerGrid, nil, false, function ( model )
		layermofnPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofnPC.layerMOfN.__layermofntext = function ( f140_arg0 )
		local f140_local0 = f140_arg0:get() --[[ @ 0]]
		if f140_local0 ~= nil then
			layermofnPC.layerMOfN:setText( LocalizeLayerMOfN( @"hash_32769909B839C4BC", f1_arg0, f140_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	layermofnPC:linkToElementModel( layerGrid, "layerNumberString", true, layermofnPC.layerMOfN.__layermofntext ) --[[ @ 0]]
	layermofnPC.layerMOfN.__layermofntext_FullPath = function ()
		local f141_local0 = layerGrid:getModel() --[[ @ 0]]
		if f141_local0 then
			f141_local0 = layerGrid:getModel() --[[ @ 0]]
			f141_local0 = f141_local0.layerNumberString --[[ @ 0]]
		end
		if f141_local0 then
			layermofnPC.layerMOfN.__layermofntext( f141_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f1_local22 = layermofnPC --[[ @ 0]]
	local f1_local23 = layermofnPC.subscribeToModel --[[ @ 0]]
	local f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.layersUsed"], layermofnPC.layerMOfN.__layermofntext_FullPath ) --[[ @ 0]]
	layermofn:linkToElementModel( layerCarousel, nil, false, function ( model )
		layermofn:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	layermofn.layerMOfN.__layermofntext = function ( f143_arg0 )
		local f143_local0 = f143_arg0:get() --[[ @ 0]]
		if f143_local0 ~= nil then
			layermofn.layerMOfN:setText( LocalizeLayerMOfN( @"hash_32769909B839C4BC", f1_arg0, f143_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	layermofn:linkToElementModel( layerCarousel, "layerNumberString", true, layermofn.layerMOfN.__layermofntext ) --[[ @ 0]]
	layermofn.layerMOfN.__layermofntext_FullPath = function ()
		local f144_local0 = layerCarousel:getModel() --[[ @ 0]]
		if f144_local0 then
			f144_local0 = layerCarousel:getModel() --[[ @ 0]]
			f144_local0 = f144_local0.layerNumberString --[[ @ 0]]
		end
		if f144_local0 then
			layermofn.layerMOfN.__layermofntext( f144_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_local22 = layermofn --[[ @ 0]]
	f1_local23 = layermofn.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.layersUsed"], layermofn.layerMOfN.__layermofntext_FullPath ) --[[ @ 0]]
	EditControls:linkToElementModel( layerCarousel, nil, false, function ( model )
		EditControls:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BrowseControls:linkToElementModel( layerCarousel, nil, false, function ( model )
		BrowseControls:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local22 = PaintshopFrame --[[ @ 0]]
	f1_local23 = PaintshopFrame.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.editorMode"], PaintshopFrame.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f148_arg0, f148_arg1 )
		f148_arg1.menu = f148_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( self, f148_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24.LastInput, function ( f149_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f149_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.editorMode"], function ( f150_arg0, f150_arg1 )
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f150_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "layerIndex", true, function ( model, f151_arg1 )
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f151_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "iconID", true, function ( model, f152_arg1 )
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f152_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.groupsUsed"], function ( f153_arg0, f153_arg1 )
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f153_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.layersUsed"], function ( f154_arg0, f154_arg1 )
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f154_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "isGrouped", true, function ( model, f155_arg1 )
		CoD.Menu.UpdateButtonShownState( f155_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f155_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f155_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f155_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f155_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isLinked", true, function ( model, f156_arg1 )
		CoD.Menu.UpdateButtonShownState( f156_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f157_arg0, f157_arg1 )
		f157_arg1.menu = f157_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f157_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f157_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f157_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f157_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f157_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24.LastInput, function ( f158_arg0, f158_arg1 )
		CoD.Menu.UpdateButtonShownState( f158_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f158_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f158_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f158_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f158_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["Emblem.EmblemProperties.isClipboardEmpty"], function ( f159_arg0, f159_arg1 )
		CoD.Menu.UpdateButtonShownState( f159_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f160_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f160_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f160_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		UpdateElementState( self, "layermofn", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "BrowseControls", f1_arg0 ) --[[ @ 0]]
		UpdateElementState( self, "EditControls", f1_arg0 ) --[[ @ 0]]
		if not f160_local0 then
			f160_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f160_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f161_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f161_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f161_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", true ) then
			MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.HUDUtility.PopAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
		else
			MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_ReturnFromOverlay( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.HUDUtility.PushAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
		end
		if not f161_local0 then
			f161_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f161_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_LinkUnlinkActiveLayer( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "-0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_LinkAllLayers( self, controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_249A252B20B48936"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( self.layerCarousel, controller ) and not IsRepeatButtonPress( model ) then
			CoD.CraftUtility.EmblemEditor_GroupUngroupLayers( self, controller, element ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and CoD.CraftUtility.Emblems_IsLayerLinked( self.layerCarousel, controller ) and not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_249A252B20B48936"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_249A252B20B48936"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleOutline( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "toggle_outline" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_CutLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintjobIconColorPicker", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemChooseColor_ClearSelectedLayerMaterial( self, element, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreSelectedLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerAndGroupCountWithReplace( self, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, {
				_sessionMode = menu._sessionMode,
				_storageClientBuffer = menu._storageClientBuffer
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_FlipIcon( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "flip_image" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_CopyLayerToClipboard( self, element, controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "scale" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], "ESCAPE", function ( element, menu, controller, model )
		if IsPC() and IsElementInState( self.EmblemEditorPCLegend, "Open" ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Close" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			PlaySoundSetSound( self, "save_box" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			PlaySoundSetSound( self, "save_box" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_RevertAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_RefreshDatasource( self, self.layerCarousel ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "list_action" ) --[[ @ 0]]
			UpdateElementState( self, "layermofn", controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			return true
		else
			GoBack( self, controller ) --[[ @ 0]]
			ForceNotifyControllerModel( controller, "Emblem.UpdateDataSource" ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		if IsPC() and IsElementInState( self.EmblemEditorPCLegend, "Open" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsEmblemEmpty( controller ) and CoD.CraftUtility.Emblems_HasChanges( self, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7AB744CDFD554F5F", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		else
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], "ui_contextual_3", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleScaleMode( self, element, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.CraftUtility.EmblemEditor_InsertLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerData( self, controller, element ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, "ui_contextual_3" ) --[[ @ 0]]
			return false
		elseif CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsClipboardEmpty( controller ) and CoD.CraftUtility.Emblem_CanPastFromClipboard( element, controller ) and CoD.CraftUtility.Clipboard_HasEnoughLayersToPaste( self, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, "ui_contextual_3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
			UpdateElementState( self, "layermofn", controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "clipboard", controller ) --[[ @ 0]]
			return true
		elseif not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.CraftUtility.EmblemEditor_EditSelectedLayer( self, element, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			UpdateElementState( self, "BrowseControls", controller ) --[[ @ 0]]
			UpdateElementState( self, "EditControls", controller ) --[[ @ 0]]
			PlayClipOnElement( self, {
				elementName = "emblemHiddenPulseLayer",
				clipName = "DefaultClip"
			}, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			OpenOverlay( self, "PaintshopChooseIcon", controller, {
				_sessionMode = menu._sessionMode,
				_storageClientBuffer = menu._storageClientBuffer
			} ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_7E84DC9704A3FB30", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_132F41E996619F54", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_7E84DC9704A3FB30", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( model ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreAllChanges( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_InsertDecalPressed( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintshopChooseIcon", controller, {
				_sessionMode = menu._sessionMode,
				_storageClientBuffer = menu._storageClientBuffer
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerCarousel, controller ) and IsDpadButton( nil ) and CoD.CraftUtility.Emblem_IsAnyLayerEmpty( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and IsPC() then
			CoD.CraftUtility.EmblemEditor_OpenSavePopup( self, element, controller, menu, "true" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) then
			CoD.CraftUtility.CraftEditor_OpenEditorOptions( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_FlipIcon( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "flip_image" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_2FA47140D97F89D", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsBrowseMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_2FA47140D97F89D", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif CoD.CraftUtility.IsEditMode( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], "ui_contextual_2", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsBrowseMode( controller ) and CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( controller ) then
			CoD.CraftUtility.EmblemEditor_StoreSelectedGroup( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_OpenSaveGroupPopup( self, element, controller ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Close" ) and IsMouseOrKeyboard( controller ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Open" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Open" ) and IsMouseOrKeyboard( controller ) then
			SetElementState( self, self.EmblemEditorPCLegend, controller, "Close" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsBrowseMode( controller ) and CoD.CraftUtility.Emblem_IsLayerGrouped( self.layerCarousel, controller ) and CoD.CraftUtility.EmblemEditor_CustomDecalGroupsSlotsRemaining( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_0", nil, "ui_contextual_2" ) --[[ @ 0]]
			return false
		elseif IsElementInState( self.EmblemEditorPCLegend, "Close" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_490E9019810E01CA", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.EmblemEditorPCLegend, "Open" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_490E9019810E01CA", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_loweropacity", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "-0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_loweropacity" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_raiseopacity", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemChooseColor_UpdateBothColorOpacity( self, element, "0.01", controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "opacity" ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_raiseopacity" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_prevtab", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_RotateLayer( -1 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_prevtab" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_nexttab", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_RotateLayer( 1 ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EditLayerListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_UpdateLayerDataWithListActive( self, controller, self.layerGrid ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_nexttab" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_open", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_SaveLayer( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemEditor_EndEdit( self, element, controller ) --[[ @ 0]]
			OpenOverlay( self, "PaintjobIconColorPicker", controller, nil ) --[[ @ 0]]
			CoD.CraftUtility.EmblemChooseColor_ClearSelectedLayerMaterial( self, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.IsLayerEmpty( self, self.layerGrid, controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) and not CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_open" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_toggleoutline", function ( element, menu, controller, model )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.CraftUtility.EmblemEditor_ToggleOutline( self, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "toggle_outline" ) --[[ @ 0]]
			PlaySoundAlias( "uin_paint_image_flip_toggle" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CraftUtility.IsEditMode( controller ) and not CoD.CraftUtility.Emblems_IsLayerASticker( self.layerGrid, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_toggleoutline" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		UploadStats( self, f1_arg0 ) --[[ @ 0]]
		CoD.HUDUtility.PopAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
		CoD.WeaponOptionsUtility.ResetWeaponOptions( f1_local1, f1_arg0 ) --[[ @ 0]]
		CoD.WeaponOptionsUtility.UpdateWeaponOptionLists( element, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f199_arg2, f199_arg3, f199_arg4 )
		if CoD.CraftUtility.IsEditMode( controller ) then
			CoD.CraftUtility.EmblemEditor_HandleBackInEditMode( self, element, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	layerGrid.id = "layerGrid" --[[ @ 0]]
	if CoD.isPC then
		ChangeLayerArrows.id = "ChangeLayerArrows" --[[ @ 0]]
	end
	layerCarousel.id = "layerCarousel" --[[ @ 0]]
	actionsListPC.id = "actionsListPC" --[[ @ 0]]
	emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	if CoD.isPC then
		DrawEmblemFocusable.id = "DrawEmblemFocusable" --[[ @ 0]]
	end
	if CoD.isPC then
		EmblemEditorPCLegend.id = "EmblemEditorPCLegend" --[[ @ 0]]
	end
	PaintshopFrame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		PaintshopFrame.id = "PaintshopFrame" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = layerCarousel --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local23 = self --[[ @ 0]]
	CoD.CraftUtility.SetupMouseScrollingEmblemScale( f1_local1, f1_arg0 ) --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.HUDUtility.PushAllowButtonRepeats( self, f1_arg0 ) --[[ @ 0]]
	CoD.CraftUtility.EmblemEditor_GainDefaultFocus( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	f1_local23 = layerGrid --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.ActivateListPCSelectionBehavior( f1_local23 ) --[[ @ 0]]
		CoD.GridAndListUtility.SetGridScrolling( f1_local1, f1_local23, f1_arg0 ) --[[ @ 0]]
		SetElementProperty( self.layerGrid, "__ignoreSelectionWidget", true ) --[[ @ 0]]
	end
	CoD.CraftUtility.EmblemEditor_SetupEditorCarouselBasedOnMode( f1_local1, layerCarousel, f1_arg0 ) --[[ @ 0]]
	SetIgnorePlaySoundSetSound( emptyFocusable, true ) --[[ @ 0]]
	f1_local23 = DrawEmblemFocusable --[[ @ 0]]
	if IsPC() then
		DisableKeyboardNavigationByElement( f1_local23 ) --[[ @ 0]]
		SetIgnorePlaySoundSetSound( f1_local23, true ) --[[ @ 0]]
		CoD.PCUtility.CraftLockFocusOnDrag( f1_local23, f1_arg0, f1_local1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.PaintjobEditor.__resetProperties = function ( f200_arg0 )
	f200_arg0.layerGrid:completeAnimation() --[[ @ 0]]
	f200_arg0.layermofnPC:completeAnimation() --[[ @ 0]]
	f200_arg0.emblemHiddenPulseLayerPC:completeAnimation() --[[ @ 0]]
	f200_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
	f200_arg0.BrowseControls:completeAnimation() --[[ @ 0]]
	f200_arg0.EditControls:completeAnimation() --[[ @ 0]]
	f200_arg0.layerCarousel:completeAnimation() --[[ @ 0]]
	f200_arg0.CraftNavigationWidget:completeAnimation() --[[ @ 0]]
	f200_arg0.clipboard:completeAnimation() --[[ @ 0]]
	f200_arg0.layermofn:completeAnimation() --[[ @ 0]]
	f200_arg0.ChangeLayerArrows:completeAnimation() --[[ @ 0]]
	f200_arg0.GroupFull:completeAnimation() --[[ @ 0]]
	f200_arg0.emblemHiddenPulseLayer:completeAnimation() --[[ @ 0]]
	f200_arg0.layerGrid:setLeftRight( 0.5, 0.5, -860, -516 ) --[[ @ 0]]
	f200_arg0.layerGrid:setAlpha( 0 ) --[[ @ 0]]
	f200_arg0.layermofnPC:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.emblemHiddenPulseLayerPC:setAlpha( 0 ) --[[ @ 0]]
	f200_arg0.actionsListPC:setLeftRight( 0.5, 0.5, 540, 915 ) --[[ @ 0]]
	f200_arg0.actionsListPC:setAlpha( 0 ) --[[ @ 0]]
	f200_arg0.BrowseControls:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.EditControls:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.layerCarousel:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.CraftNavigationWidget:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.clipboard:setLeftRight( 0.5, 0.5, -831, -579 ) --[[ @ 0]]
	f200_arg0.clipboard:setTopBottom( 0, 0, 117, 392 ) --[[ @ 0]]
	f200_arg0.layermofn:setAlpha( 1 ) --[[ @ 0]]
	f200_arg0.ChangeLayerArrows:setTopBottom( 0.5, 0.5, 227.5, 272.5 ) --[[ @ 0]]
	f200_arg0.ChangeLayerArrows:setAlpha( 0 ) --[[ @ 0]]
	f200_arg0.GroupFull:setAlpha( 0 ) --[[ @ 0]]
	f200_arg0.emblemHiddenPulseLayer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PaintjobEditor.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f201_arg0, f201_arg1 )
			f201_arg0:__resetProperties() --[[ @ 0]]
			f201_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f201_arg0.layerGrid:completeAnimation() --[[ @ 0]]
			f201_arg0.layerGrid:setLeftRight( 0.5, 0.5, -860, -516 ) --[[ @ 0]]
			f201_arg0.layerGrid:setAlpha( 0 ) --[[ @ 0]]
			f201_arg0.clipFinished( f201_arg0.layerGrid ) --[[ @ 0]]
			f201_arg0.emblemHiddenPulseLayerPC:beginAnimation( 210 ) --[[ @ 0]]
			f201_arg0.emblemHiddenPulseLayerPC:setAlpha( 0 ) --[[ @ 0]]
			f201_arg0.emblemHiddenPulseLayerPC:registerEventHandler( "interrupted_keyframe", f201_arg0.clipInterrupted ) --[[ @ 0]]
			f201_arg0.emblemHiddenPulseLayerPC:registerEventHandler( "transition_complete_keyframe", f201_arg0.clipFinished ) --[[ @ 0]]
			f201_arg0.layermofnPC:completeAnimation() --[[ @ 0]]
			f201_arg0.layermofnPC:setAlpha( 0 ) --[[ @ 0]]
			f201_arg0.clipFinished( f201_arg0.layermofnPC ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f202_arg0, f202_arg1 )
			f202_arg0:__resetProperties() --[[ @ 0]]
			f202_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f202_arg0.GroupFull:completeAnimation() --[[ @ 0]]
			f202_arg0.GroupFull:setAlpha( 1 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.GroupFull ) --[[ @ 0]]
			f202_arg0.layerGrid:completeAnimation() --[[ @ 0]]
			f202_arg0.layerGrid:setLeftRight( 0.5, 0.5, 516, 860 ) --[[ @ 0]]
			f202_arg0.layerGrid:setAlpha( 1 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.layerGrid ) --[[ @ 0]]
			f202_arg0.ChangeLayerArrows:completeAnimation() --[[ @ 0]]
			f202_arg0.ChangeLayerArrows:setTopBottom( 0.5, 0.5, 227.5, 272.5 ) --[[ @ 0]]
			f202_arg0.ChangeLayerArrows:setAlpha( 1 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.ChangeLayerArrows ) --[[ @ 0]]
			f202_arg0.layerCarousel:completeAnimation() --[[ @ 0]]
			f202_arg0.layerCarousel:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.layerCarousel ) --[[ @ 0]]
			f202_arg0.emblemHiddenPulseLayerPC:completeAnimation() --[[ @ 0]]
			f202_arg0.emblemHiddenPulseLayerPC:setAlpha( 1 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.emblemHiddenPulseLayerPC ) --[[ @ 0]]
			f202_arg0.emblemHiddenPulseLayer:completeAnimation() --[[ @ 0]]
			f202_arg0.emblemHiddenPulseLayer:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.emblemHiddenPulseLayer ) --[[ @ 0]]
			f202_arg0.clipboard:completeAnimation() --[[ @ 0]]
			f202_arg0.clipboard:setLeftRight( 0.5, 0.5, -915, -663 ) --[[ @ 0]]
			f202_arg0.clipboard:setTopBottom( 0, 0, 730, 970 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.clipboard ) --[[ @ 0]]
			f202_arg0.layermofn:completeAnimation() --[[ @ 0]]
			f202_arg0.layermofn:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.layermofn ) --[[ @ 0]]
			f202_arg0.EditControls:completeAnimation() --[[ @ 0]]
			f202_arg0.EditControls:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.EditControls ) --[[ @ 0]]
			f202_arg0.BrowseControls:completeAnimation() --[[ @ 0]]
			f202_arg0.BrowseControls:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.BrowseControls ) --[[ @ 0]]
			f202_arg0.actionsListPC:completeAnimation() --[[ @ 0]]
			f202_arg0.actionsListPC:setLeftRight( 0.5, 0.5, -915, -540 ) --[[ @ 0]]
			f202_arg0.actionsListPC:setAlpha( 1 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.actionsListPC ) --[[ @ 0]]
			f202_arg0.CraftNavigationWidget:completeAnimation() --[[ @ 0]]
			f202_arg0.CraftNavigationWidget:setAlpha( 0 ) --[[ @ 0]]
			f202_arg0.clipFinished( f202_arg0.CraftNavigationWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PaintjobEditor.__onClose = function ( f203_arg0 )
	f203_arg0.GroupFull:close() --[[ @ 0]]
	f203_arg0.emblemHiddenPulseLayerPC:close() --[[ @ 0]]
	f203_arg0.emblemHiddenPulseLayer:close() --[[ @ 0]]
	f203_arg0.layermofnPC:close() --[[ @ 0]]
	f203_arg0.layermofn:close() --[[ @ 0]]
	f203_arg0.EditControls:close() --[[ @ 0]]
	f203_arg0.BrowseControls:close() --[[ @ 0]]
	f203_arg0.layerGrid:close() --[[ @ 0]]
	f203_arg0.ChangeLayerArrows:close() --[[ @ 0]]
	f203_arg0.layerCarousel:close() --[[ @ 0]]
	f203_arg0.clipboard:close() --[[ @ 0]]
	f203_arg0.actionsListPC:close() --[[ @ 0]]
	f203_arg0.CraftNavigationWidget:close() --[[ @ 0]]
	f203_arg0.emptyFocusable:close() --[[ @ 0]]
	f203_arg0.DrawEmblemFocusable:close() --[[ @ 0]]
	f203_arg0.EmblemEditorPCLegend:close() --[[ @ 0]]
	f203_arg0.PaintshopFrame:close() --[[ @ 0]]
	f203_arg0.SafeAreaContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
