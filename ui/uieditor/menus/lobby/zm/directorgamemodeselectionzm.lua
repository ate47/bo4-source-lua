-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:6ade951b2d8c4d9a" ) --[[ @ 0]]
require( "x64:7f6ae994925ce8e1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "x64:7662addde48b6aa5" ) --[[ @ 0]]

CoD.DirectorGamemodeSelectionZM = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.DirectorGamemodeSelectionZM = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "DirectorGamemodeSelectionZM", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.CreateGlobalModel( "ZMLobbyExclusions.focusedPlaylistID" ) --[[ @ 0]]
	self:setClass( CoD.DirectorGamemodeSelectionZM ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SceneBlur:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local BackgroundImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BackgroundImage:setAlpha( 0.85 ) --[[ @ 0]]
	BackgroundImage:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BackgroundImage ) --[[ @ 0]]
	self.BackgroundImage = BackgroundImage --[[ @ 0]]
	
	local BGEnhancement = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BGEnhancement:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BGEnhancement:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( BGEnhancement ) --[[ @ 0]]
	self.BGEnhancement = BGEnhancement --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local TiledPlusGrid = LUI.UIImage.new( 0.5, 0.5, -1095, 960, 0, 0, 0, 1080 ) --[[ @ 0]]
	TiledPlusGrid:setAlpha( 0.05 ) --[[ @ 0]]
	TiledPlusGrid:setImage( RegisterImage( @"uie_ui_hud_vehicle_hellstorm_repeat_plusgrid" ) ) --[[ @ 0]]
	TiledPlusGrid:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	TiledPlusGrid:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledPlusGrid:setupNineSliceShader( 220, 220 ) --[[ @ 0]]
	self:addElement( TiledPlusGrid ) --[[ @ 0]]
	self.TiledPlusGrid = TiledPlusGrid --[[ @ 0]]
	
	local DirectorGamemodeSelectionZMInternal = CoD.DirectorGamemodeSelectionZMInternal.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( DirectorGamemodeSelectionZMInternal ) --[[ @ 0]]
	self.DirectorGamemodeSelectionZMInternal = DirectorGamemodeSelectionZMInternal --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local DirectorHeaderTabSafeArea = CoD.DirectorHeaderTabSafeArea.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 1080 ) --[[ @ 0]]
	DirectorHeaderTabSafeArea.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"menu/zombies_modes" ) ) --[[ @ 0]]
	DirectorHeaderTabSafeArea.Tabs.customClasssList:setDataSource( "DirectorPlaylistGameTypeList" ) --[[ @ 0]]
	DirectorHeaderTabSafeArea:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			DirectorHeaderTabSafeArea.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DirectorHeaderTabSafeArea:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorHeaderTabSafeArea ) --[[ @ 0]]
	self.DirectorHeaderTabSafeArea = DirectorHeaderTabSafeArea --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Featured",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.FeaturedInfo()
			end
		},
		{
			stateName = "Classic",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.ClassicInfo()
			end
		},
		{
			stateName = "ZombieRush",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.ZombieRushInfo()
			end
		},
		{
			stateName = "TCM",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.TCMInfo()
			end
		},
		{
			stateName = "Trials",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.TrialsInfo()
			end
		},
		{
			stateName = "Tutorial",
			condition = function ( menu, element, event )
				return CoD.ZombieUtility.TutorialInfo()
			end
		}
	} ) --[[ @ 0]]
	local f1_local10 = self --[[ @ 0]]
	local f1_local11 = self.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["ZMLobbyExclusions.ZMPlaylistTab"], function ( f11_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f11_arg0:get(),
			modelName = "ZMLobbyExclusions.ZMPlaylistTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["ZMLobbyExclusions.ZMPlaylistTab"], function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f13_arg0, f13_arg1 )
		f13_arg1.menu = f13_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f13_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12.LastInput, function ( f14_arg0, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_start"], nil, function ( element, menu, controller, model )
		if CoD.ZombieUtility.TrialsInfo() and IsGamepad( controller ) then
			OpenOverlay( self, "DirectorZMTrialsInfo", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ZombieUtility.TrialsInfo() and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"hash_4AB419DD8BD872BA", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.DirectorUtility.UpdateChosenPlaylist( f1_arg0 ) --[[ @ 0]]
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DirectorGamemodeSelectionZMInternal.id = "DirectorGamemodeSelectionZMInternal" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	DirectorHeaderTabSafeArea.id = "DirectorHeaderTabSafeArea" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = DirectorGamemodeSelectionZMInternal --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local11 = self --[[ @ 0]]
	CoD.ZombieUtility.SetFocusedPlaylistIDToLobbyPlaylistID( f1_arg0 ) --[[ @ 0]]
	CoD.ZombieUtility.SubscribeToZMPlaylistInfoModels( self, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.DirectorGamemodeSelectionZM.__onClose = function ( f20_arg0 )
	f20_arg0.DirectorGamemodeSelectionZMInternal:close() --[[ @ 0]]
	f20_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f20_arg0.DirectorHeaderTabSafeArea:close() --[[ @ 0]]
end
 --[[ @ 0]]
