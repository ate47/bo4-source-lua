-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/common/common_tabbar_center" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "x64:2d13d1dd926408a1" ) --[[ @ 0]]
require( "x64:6d6084d285dc1ae8" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]

CoD.DirectorFindGameWZ = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.DirectorFindGameWZ = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "DirectorFindGameWZ", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.DirectorUtility.SetupDirectorFiltersCards( f1_local1, f1_arg0, self ) --[[ @ 0]]
	self:setClass( CoD.DirectorFindGameWZ ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local TEMPBlackBGOverlay = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	TEMPBlackBGOverlay:setRGB( 0, 0, 0 ) --[[ @ 0]]
	TEMPBlackBGOverlay:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	TEMPBlackBGOverlay:setShaderVector( 0, 0.01, 0.5, 0, 0 ) --[[ @ 0]]
	self:addElement( TEMPBlackBGOverlay ) --[[ @ 0]]
	self.TEMPBlackBGOverlay = TEMPBlackBGOverlay --[[ @ 0]]
	
	local SelectedPlaylistInfo = CoD.DirectorFindGamePlaylistInfoMP.new( f1_local1, f1_arg0, 0.5, 0.5, 324, 864, 0.5, 0.5, -256, 256 ) --[[ @ 0]]
	SelectedPlaylistInfo.DoubleXPIcons.PlaylistInfo.warningText3:setAlpha( 0 ) --[[ @ 0]]
	SelectedPlaylistInfo.DoubleXPIcons.PlaylistInfo.warningText:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SelectedPlaylistInfo ) --[[ @ 0]]
	self.SelectedPlaylistInfo = SelectedPlaylistInfo --[[ @ 0]]
	
	local OptionsList = LUI.UIList.new( f1_local1, f1_arg0, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	OptionsList:setLeftRight( 0.5, 0.5, -864, 292 ) --[[ @ 0]]
	OptionsList:setTopBottom( 0.5, 0.5, -522, 522 ) --[[ @ 0]]
	OptionsList:setWidgetType( CoD.DirectorPlaylistOption ) --[[ @ 0]]
	OptionsList:setHorizontalCount( 3 ) --[[ @ 0]]
	OptionsList:setVerticalCount( 4 ) --[[ @ 0]]
	OptionsList:setSpacing( 20 ) --[[ @ 0]]
	OptionsList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionsList:linkToElementModel( OptionsList, "locked", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OptionsList:registerEventHandler( "gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f3_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f3_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( OptionsList, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.DirectorUtility.PartyExceedsPlaylistMax( element ) then
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.DirectorUtility.PartyExceedsPlaylistMax( element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_confirm" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( OptionsList ) --[[ @ 0]]
	self.OptionsList = OptionsList --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local CACHeader = CoD.CommonHeader.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CACHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_538A4FBEBCE1E6BE" ) ) --[[ @ 0]]
	CACHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CACHeader:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			CACHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CACHeader:registerEventHandler( "menu_loaded", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f8_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f8_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f8_local0 then
			f8_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( CACHeader ) --[[ @ 0]]
	self.CACHeader = CACHeader --[[ @ 0]]
	
	local BackingGrayMediumLeft = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 42 ) --[[ @ 0]]
	BackingGrayMediumLeft:registerEventHandler( "menu_loaded", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f9_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f9_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f9_local0 then
			f9_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	self:addElement( BackingGrayMediumLeft ) --[[ @ 0]]
	self.BackingGrayMediumLeft = BackingGrayMediumLeft --[[ @ 0]]
	
	local FETabBar = CoD.Common_Tabbar_Center.new( f1_local1, f1_arg0, 0, 0, -262, 2412, 0.5, 0.5, -473, -406 ) --[[ @ 0]]
	FETabBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.DirectorUtility.MultiplePlaylistTabsAvailable( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	FETabBar:appendEventHandler( "grid_updated", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( FETabBar, f11_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FETabBar:appendEventHandler( "input_source_changed", function ( f12_arg0, f12_arg1 )
		f12_arg1.menu = f12_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( FETabBar, f12_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local9 = FETabBar --[[ @ 0]]
	local GridLayout = FETabBar.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	GridLayout( f1_local9, f1_local11.LastInput, function ( f13_arg0 )
		f1_local1:updateElementState( FETabBar, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f13_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FETabBar.Tabs.grid:setHorizontalCount( 8 ) --[[ @ 0]]
	FETabBar.Tabs.grid:setDataSource( "DirectorFilters" ) --[[ @ 0]]
	FETabBar:registerEventHandler( "menu_loaded", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f14_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f14_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f14_local0 then
			f14_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f14_local0
	end ) --[[ @ 0]]
	FETabBar:registerEventHandler( "list_active_changed", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		CoD.FreeCursorUtility.GiveFocusToElementsDefaultFocus( f1_local1, f1_local1, f1_arg0 ) --[[ @ 0]]
		return f15_local0
	end ) --[[ @ 0]]
	self:addElement( FETabBar ) --[[ @ 0]]
	self.FETabBar = FETabBar --[[ @ 0]]
	
	GridLayout = LUI.GridLayout.new( f1_local1, f1_arg0, false, 0, 0, 2, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	GridLayout:setLeftRight( 0, 0, 2541.5, 2541.5 ) --[[ @ 0]]
	GridLayout:setTopBottom( 0, 0, -294, -294 ) --[[ @ 0]]
	GridLayout:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	self:addElement( GridLayout ) --[[ @ 0]]
	self.GridLayout = GridLayout --[[ @ 0]]
	
	SelectedPlaylistInfo:linkToElementModel( OptionsList, nil, false, function ( model )
		SelectedPlaylistInfo:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OptionsList:linkToElementModel( FETabBar.Tabs.grid, "dataSource", true, function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			OptionsList:setDataSource( f17_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OptionsList.id = "OptionsList" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	FETabBar.id = "FETabBar" --[[ @ 0]]
	GridLayout.id = "GridLayout" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = OptionsList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local9 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromPropertyModel( f1_arg0, self, self ) --[[ @ 0]]
	SetElementProperty( OptionsList, "ignoreSavedActive", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.DirectorFindGameWZ.__onClose = function ( f21_arg0 )
	f21_arg0.SelectedPlaylistInfo:close() --[[ @ 0]]
	f21_arg0.OptionsList:close() --[[ @ 0]]
	f21_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f21_arg0.CACHeader:close() --[[ @ 0]]
	f21_arg0.BackingGrayMediumLeft:close() --[[ @ 0]]
	f21_arg0.FETabBar:close() --[[ @ 0]]
	f21_arg0.GridLayout:close() --[[ @ 0]]
end
 --[[ @ 0]]
