-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/seperationline" ) --[[ @ 0]]
require( "x64:3434c5365d00b7a" ) --[[ @ 0]]
require( "x64:76ecfe9d4da6fd92" ) --[[ @ 0]]
require( "x64:3d06bd1567f9ef0f" ) --[[ @ 0]]
require( "x64:5a915d4808a49d02" ) --[[ @ 0]]
require( "x64:10e092a33d3fffe9" ) --[[ @ 0]]
require( "x64:306e788f5c76df54" ) --[[ @ 0]]
require( "x64:10d099e39c15388d" ) --[[ @ 0]]
require( "x64:71850ed39b9104e4" ) --[[ @ 0]]

CoD.PC_StartMenu_Options_New = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.PC_StartMenu_Options_New = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "PC_StartMenu_Options_New", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.PCOptionsUtility.SetupDirtyOptionModel( f1_arg0 ) --[[ @ 0]]
	CoD.PCUtility.InitCurrentCategoryModel( f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "PlayerSettingsUpdate" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "CurrentOptionTab" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelEnumIfNotSet( f1_arg0, "controllerLayoutState", CoD.OptionsUtility.ControllerPreviewStates.CONTROLLER_STICKS ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "PC.VRAMBar", 0 ) --[[ @ 0]]
	self:setClass( CoD.PC_StartMenu_Options_New ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Blur:setRGB( 0.08, 0.08, 0.08 ) --[[ @ 0]]
	Blur:setAlpha( 0.7 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:setRGB( 0.04, 0.04, 0.04 ) --[[ @ 0]]
	Background:setAlpha( 0.95 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local NavHeaderBG = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 98 ) --[[ @ 0]]
	NavHeaderBG:setRGB( 0, 0, 0 ) --[[ @ 0]]
	NavHeaderBG:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( NavHeaderBG ) --[[ @ 0]]
	self.NavHeaderBG = NavHeaderBG --[[ @ 0]]
	
	local VRAMBar = CoD.StartMenu_Options_PC_GraphicsOptions_VRAMBar.new( f1_local1, f1_arg0, 0.5, 0.5, 205, 880, 0.5, 0.5, -349, -279 ) --[[ @ 0]]
	VRAMBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.PCOptionsUtility.IsGraphicsOptions( f1_arg0 )
			end
		},
		{
			stateName = "Overflow",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsVRAMOverflown( f1_arg0 )
			end
		},
		{
			stateName = "OverRecommended",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsVRAMOverRecommended( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local TabContent = VRAMBar --[[ @ 0]]
	local VoiceBar = VRAMBar.subscribeToModel --[[ @ 0]]
	local SeparationLine2 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	VoiceBar( TabContent, SeparationLine2.CurrentOptionTab, function ( f5_arg0 )
		f1_local1:updateElementState( VRAMBar, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f5_arg0:get(),
			modelName = "CurrentOptionTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabContent = VRAMBar --[[ @ 0]]
	VoiceBar = VRAMBar.subscribeToModel --[[ @ 0]]
	SeparationLine2 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	VoiceBar( TabContent, SeparationLine2["PC.VRAMBar"], function ( f6_arg0 )
		f1_local1:updateElementState( VRAMBar, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f6_arg0:get(),
			modelName = "PC.VRAMBar"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( VRAMBar ) --[[ @ 0]]
	self.VRAMBar = VRAMBar --[[ @ 0]]
	
	VoiceBar = CoD.StartMenu_Options_PC_Voice_VoiceBar.new( f1_local1, f1_arg0, 0.5, 0.5, 205, 880, 0.5, 0.5, -349, -279 ) --[[ @ 0]]
	VoiceBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.PCOptionsUtility.IsAudioOptions( f1_arg0 )
			end
		},
		{
			stateName = "Overflow",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsVoiceOverflown( f1_arg0 )
			end
		},
		{
			stateName = "OverRecommended",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	SeparationLine2 = VoiceBar --[[ @ 0]]
	TabContent = VoiceBar.subscribeToModel --[[ @ 0]]
	local SeparationLine1 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	TabContent( SeparationLine2, SeparationLine1.CurrentOptionTab, function ( f10_arg0 )
		f1_local1:updateElementState( VoiceBar, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f10_arg0:get(),
			modelName = "CurrentOptionTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SeparationLine2 = VoiceBar --[[ @ 0]]
	TabContent = VoiceBar.subscribeToModel --[[ @ 0]]
	SeparationLine1 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	TabContent( SeparationLine2, SeparationLine1["SpeakingEnergy.displayText"], function ( f11_arg0 )
		f1_local1:updateElementState( VoiceBar, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f11_arg0:get(),
			modelName = "SpeakingEnergy.displayText"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( VoiceBar ) --[[ @ 0]]
	self.VoiceBar = VoiceBar --[[ @ 0]]
	
	TabContent = CoD.PC_StartMenu_Options_TabContent.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -360, 409 ) --[[ @ 0]]
	TabContent:mergeStateConditions( {
		{
			stateName = "InGamepadTab",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsGamepadOptions( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	TabContent:appendEventHandler( "record_curr_focused_elem_id", function ( f13_arg0, f13_arg1 )
		f13_arg1.menu = f13_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( TabContent, f13_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SeparationLine1 = TabContent --[[ @ 0]]
	SeparationLine2 = TabContent.subscribeToModel --[[ @ 0]]
	local FTEDesc = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	SeparationLine2( SeparationLine1, FTEDesc.CurrentOptionTab, function ( f14_arg0 )
		f1_local1:updateElementState( TabContent, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f14_arg0:get(),
			modelName = "CurrentOptionTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( TabContent ) --[[ @ 0]]
	self.TabContent = TabContent --[[ @ 0]]
	
	SeparationLine2 = CoD.SeperationLine.new( f1_local1, f1_arg0, 0, 1, 10, -10, 0.5, 0.5, 408, 409 ) --[[ @ 0]]
	SeparationLine2:setAlpha( 0.75 ) --[[ @ 0]]
	self:addElement( SeparationLine2 ) --[[ @ 0]]
	self.SeparationLine2 = SeparationLine2 --[[ @ 0]]
	
	SeparationLine1 = CoD.SeperationLine.new( f1_local1, f1_arg0, 0, 1, 10, -10, 0.5, 0.5, -360, -359 ) --[[ @ 0]]
	SeparationLine1:setAlpha( 0.75 ) --[[ @ 0]]
	self:addElement( SeparationLine1 ) --[[ @ 0]]
	self.SeparationLine1 = SeparationLine1 --[[ @ 0]]
	
	FTEDesc = CoD.PC_StartMenu_Options_FTEDesc.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 1, 1, -438, 0 ) --[[ @ 0]]
	self:addElement( FTEDesc ) --[[ @ 0]]
	self.FTEDesc = FTEDesc --[[ @ 0]]
	
	local KeybindMessage = CoD.PC_StartMenu_Options_KeybindMessage.new( f1_local1, f1_arg0, -0.01, 1.01, 0, 0, 1, 1, -132, -52 ) --[[ @ 0]]
	self:addElement( KeybindMessage ) --[[ @ 0]]
	self.KeybindMessage = KeybindMessage --[[ @ 0]]
	
	local ControllerLayout = CoD.StartMenu_Options_ControllerLayout.new( f1_local1, f1_arg0, 0.5, 0.5, 113, 863, 0.5, 0.5, -294, 206 ) --[[ @ 0]]
	ControllerLayout:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.PCOptionsUtility.IsGamepadOptions( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local FooterBlocker = ControllerLayout --[[ @ 0]]
	local FooterContainerFrontendRight = ControllerLayout.subscribeToModel --[[ @ 0]]
	local UnbindMiddleMouseMessage = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	FooterContainerFrontendRight( FooterBlocker, UnbindMiddleMouseMessage.CurrentOptionTab, function ( f16_arg0 )
		f1_local1:updateElementState( ControllerLayout, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f16_arg0:get(),
			modelName = "CurrentOptionTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ControllerLayout:setScale( 0.9, 0.9 ) --[[ @ 0]]
	self:addElement( ControllerLayout ) --[[ @ 0]]
	self.ControllerLayout = ControllerLayout --[[ @ 0]]
	
	FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	FooterBlocker = LUI.UIImage.new( -0.1, 1.1, 0, 0, 1, 1, -128, -3 ) --[[ @ 0]]
	FooterBlocker:setRGB( 0.07, 0.06, 0.06 ) --[[ @ 0]]
	FooterBlocker:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( FooterBlocker ) --[[ @ 0]]
	self.FooterBlocker = FooterBlocker --[[ @ 0]]
	
	UnbindMiddleMouseMessage = CoD.PCStartMenuOptionsUnbindKeybindMessage.new( f1_local1, f1_arg0, 0.5, 0.5, 203, 329, 0.5, 0.5, -330, -306 ) --[[ @ 0]]
	UnbindMiddleMouseMessage:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.PCOptionsUtility.IsKeybindsOptions( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	UnbindMiddleMouseMessage:appendEventHandler( "input_source_changed", function ( f18_arg0, f18_arg1 )
		f18_arg1.menu = f18_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( UnbindMiddleMouseMessage, f18_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local TopBar = UnbindMiddleMouseMessage --[[ @ 0]]
	local CommonHeader = UnbindMiddleMouseMessage.subscribeToModel --[[ @ 0]]
	local OptionsTabs = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	CommonHeader( TopBar, OptionsTabs.LastInput, function ( f19_arg0 )
		f1_local1:updateElementState( UnbindMiddleMouseMessage, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f19_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TopBar = UnbindMiddleMouseMessage --[[ @ 0]]
	CommonHeader = UnbindMiddleMouseMessage.subscribeToModel --[[ @ 0]]
	OptionsTabs = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	CommonHeader( TopBar, OptionsTabs.CurrentOptionTab, function ( f20_arg0 )
		f1_local1:updateElementState( UnbindMiddleMouseMessage, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f20_arg0:get(),
			modelName = "CurrentOptionTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( UnbindMiddleMouseMessage ) --[[ @ 0]]
	self.UnbindMiddleMouseMessage = UnbindMiddleMouseMessage --[[ @ 0]]
	
	CommonHeader = CoD.CommonHeader.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader.BGSceneBlur:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_11762CBFBF851D22" ) ) --[[ @ 0]]
	CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f21_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	TopBar = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	OptionsTabs = CoD.PC_StartMenu_OptionsTabs.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 98 ) --[[ @ 0]]
	self:addElement( OptionsTabs ) --[[ @ 0]]
	self.OptionsTabs = OptionsTabs --[[ @ 0]]
	
	TabContent:linkToElementModel( OptionsTabs.OptionsTabList, "categoriesDataSource", true, function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			TabContent.SideButtons:setDataSource( f22_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TabContent:linkToElementModel( OptionsTabs.OptionsTabList, "listDataSource", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			TabContent.OptionsList.ScrollList.ScrollView.View:setDataSource( f23_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f1_local19 = self --[[ @ 0]]
	local f1_local20 = self.subscribeToModel --[[ @ 0]]
	local f1_local21 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local20( f1_local19, f1_local21.CurrentOptionTab, function ( f24_arg0, f24_arg1 )
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local19 = self --[[ @ 0]]
	f1_local20 = self.subscribeToModel --[[ @ 0]]
	f1_local21 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local20( f1_local19, f1_local21["SpeakingEnergy.isRecording"], function ( f25_arg0, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local19 = self --[[ @ 0]]
	f1_local20 = self.subscribeToModel --[[ @ 0]]
	f1_local21 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local20( f1_local19, f1_local21["PC.OptionsDirty"], function ( f26_arg0, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "close_all_ingame_menus", function ( self, event )
		local f27_local0 = nil --[[ @ 0]]
		CoD.PCUtility.ShortcutMenuGoBack( f1_local1, f1_arg0 ) --[[ @ 0]]
		CoD.PCOptionsUtility.StopLoopBackCalibrationRecordingIfRecording( f1_arg0 ) --[[ @ 0]]
		if not f27_local0 then
			f27_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f27_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], "ESCAPE", function ( element, menu, controller, model )
		if CoD.PCOptionsUtility.IsAudioOptions( controller ) and CoD.PCOptionsUtility.IsRecordingLoopBack( controller ) then
			CoD.PCOptionsUtility.StopLoopBackCalibrationRecordingIfRecording( controller ) --[[ @ 0]]
			return true
		else
			CoD.PCOptionsUtility.CheckForPendingChanges( self, controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, "ESCAPE" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_contextual_2", function ( element, menu, controller, model )
		CoD.PCOptionsUtility.ResetOptionsValue( self, controller, element ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_62ED1CE9B3CDBA91", nil, "ui_contextual_2" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.PCOptionsUtility.IsGraphicsOptions( controller ) and CoD.PCOptionsUtility.AreOptionsDirty( controller ) then
			CoD.PCOptionsUtility.ApplyOptionsValue( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_67D14DF1D6CBE990", nil, "ui_contextual_1" ) --[[ @ 0]]
		if CoD.PCOptionsUtility.IsGraphicsOptions( controller ) and CoD.PCOptionsUtility.AreOptionsDirty( controller ) then
			return true
		else
			return false
		end
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], nil, function ( element, menu, controller, model )
		if CoD.PCOptionsUtility.IsKeybindsOptions( controller ) then
			CoD.PCWidgetUtility.OpenPreviewKeybindsPopup( self, controller, "PC_StartMenu_Options_new" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.PCOptionsUtility.IsKeybindsOptions( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_3A1720478353F60", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f36_arg2, f36_arg3, f36_arg4 )
		UpdateElementState( self, "OptionsTabs", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f37_arg0, f37_arg1, f37_arg2, f37_arg3 )
		local f37_local0 = self --[[ @ 0]]
		CoD.PCWidgetUtility.OnSettingsMenuOpen( self, f37_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "goBack", function ( element, controller )
		CoD.PCWidgetUtility.OnSettingsMenuClose( self, controller ) --[[ @ 0]]
		CoD.PCOptionsUtility.StopLoopBackCalibrationRecordingIfRecording( controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "GlobalModel", "HardwareSettingsUpdate", function ( model )
		local f39_local0 = self --[[ @ 0]]
		CoD.PCOptionsUtility.SyncAllOptionModels( f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "PC.BattlenetGlobal.IsVoiceAllowed", function ( model )
		local f40_local0 = self --[[ @ 0]]
		CoD.PCOptionsUtility.SyncVoiceModel( f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "CurrentOptionTab", function ( model )
		local f41_local0 = self --[[ @ 0]]
		if CoD.PCOptionsUtility.IsGraphicsOptions( f1_arg0 ) then
			CloseContextualMenu( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.PCOptionsUtility.InitializeVRAMBar( f1_arg0, self.VRAMBar, model ) --[[ @ 0]]
			CoD.PCOptionsUtility.StopLoopBackCalibrationRecordingIfRecording( f1_arg0 ) --[[ @ 0]]
		elseif not CoD.PCOptionsUtility.IsAudioOptions( f1_arg0 ) then
			CloseContextualMenu( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.PCOptionsUtility.StopLoopBackCalibrationRecordingIfRecording( f1_arg0 ) --[[ @ 0]]
		elseif CoD.PCOptionsUtility.IsAudioOptions( f1_arg0 ) then
			CloseContextualMenu( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.PCOptionsUtility.InitializeVoiceBar( f1_arg0, self.VoiceBar ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "PC.BattlenetGlobal.IsVoiceInitialized", function ( model )
		local f42_local0 = self --[[ @ 0]]
		CoD.PCOptionsUtility.SyncAudioDeviceModel( f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	VRAMBar.id = "VRAMBar" --[[ @ 0]]
	VoiceBar.id = "VoiceBar" --[[ @ 0]]
	TabContent.id = "TabContent" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	OptionsTabs.id = "OptionsTabs" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local20 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.PCOptionsUtility.PrepareGamepadVisual( f1_arg0, self.TabContent ) --[[ @ 0]]
	CoD.PCWidgetUtility.SetupSettingsMenuCache( f1_arg0, f1_local1 ) --[[ @ 0]]
	CoD.PCUtility.SetupSettingsApplyButtonPrompt( f1_local1, f1_arg0, self ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( OptionsTabs ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_New.__resetProperties = function ( f44_arg0 )
	f44_arg0.FTEDesc:completeAnimation() --[[ @ 0]]
	f44_arg0.TabContent:completeAnimation() --[[ @ 0]]
	f44_arg0.VRAMBar:completeAnimation() --[[ @ 0]]
	f44_arg0.NavHeaderBG:completeAnimation() --[[ @ 0]]
	f44_arg0.FooterBlocker:completeAnimation() --[[ @ 0]]
	f44_arg0.FTEDesc:setTopBottom( 1, 1, -438, 0 ) --[[ @ 0]]
	f44_arg0.FTEDesc:setAlpha( 1 ) --[[ @ 0]]
	f44_arg0.TabContent:setLeftRight( 0.5, 0.5, -960, 960 ) --[[ @ 0]]
	f44_arg0.TabContent:setTopBottom( 0.5, 0.5, -360, 409 ) --[[ @ 0]]
	f44_arg0.TabContent.SideButtons:setAlpha( 1 ) --[[ @ 0]]
	f44_arg0.TabContent.OptionsList.ScrollList.VScrollbar:setAlpha( 1 ) --[[ @ 0]]
	f44_arg0.VRAMBar:setTopBottom( 0.5, 0.5, -349, -279 ) --[[ @ 0]]
	f44_arg0.VRAMBar:setAlpha( 1 ) --[[ @ 0]]
	f44_arg0.NavHeaderBG:setTopBottom( 0, 0, 0, 98 ) --[[ @ 0]]
	f44_arg0.FooterBlocker:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_New.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f45_arg0.VRAMBar:completeAnimation() --[[ @ 0]]
			f45_arg0.VRAMBar:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.VRAMBar ) --[[ @ 0]]
			f45_arg0.TabContent:completeAnimation() --[[ @ 0]]
			f45_arg0.TabContent.SideButtons:completeAnimation() --[[ @ 0]]
			f45_arg0.TabContent.OptionsList.ScrollList.VScrollbar:completeAnimation() --[[ @ 0]]
			f45_arg0.TabContent.SideButtons:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.TabContent.OptionsList.ScrollList.VScrollbar:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.TabContent ) --[[ @ 0]]
			f45_arg0.FTEDesc:completeAnimation() --[[ @ 0]]
			f45_arg0.FTEDesc:setTopBottom( 1, 1, -438, 0 ) --[[ @ 0]]
			f45_arg0.FTEDesc:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.FTEDesc ) --[[ @ 0]]
		end
	},
	AfterFTE = {
		DefaultClip = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f46_arg0.VRAMBar:completeAnimation() --[[ @ 0]]
			f46_arg0.VRAMBar:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.VRAMBar ) --[[ @ 0]]
			f46_arg0.TabContent:completeAnimation() --[[ @ 0]]
			f46_arg0.TabContent.SideButtons:completeAnimation() --[[ @ 0]]
			f46_arg0.TabContent.OptionsList.ScrollList.VScrollbar:completeAnimation() --[[ @ 0]]
			f46_arg0.TabContent.SideButtons:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.TabContent.OptionsList.ScrollList.VScrollbar:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.TabContent ) --[[ @ 0]]
			f46_arg0.FTEDesc:completeAnimation() --[[ @ 0]]
			f46_arg0.FTEDesc:setTopBottom( 1, 1, -438, 0 ) --[[ @ 0]]
			f46_arg0.FTEDesc:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.FTEDesc ) --[[ @ 0]]
		end,
		NavFocused = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f47_local0 = function ( f48_arg0 )
				f47_arg0.NavHeaderBG:beginAnimation( 200 ) --[[ @ 0]]
				f47_arg0.NavHeaderBG:setTopBottom( 0, 0, 0, 148 ) --[[ @ 0]]
				f47_arg0.NavHeaderBG:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.NavHeaderBG:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.NavHeaderBG:completeAnimation() --[[ @ 0]]
			f47_arg0.NavHeaderBG:setTopBottom( 0, 0, 0, 98 ) --[[ @ 0]]
			f47_local0( f47_arg0.NavHeaderBG ) --[[ @ 0]]
			local f47_local1 = function ( f49_arg0 )
				f47_arg0.VRAMBar:beginAnimation( 200 ) --[[ @ 0]]
				f47_arg0.VRAMBar:setTopBottom( 0, 0, 148, 218 ) --[[ @ 0]]
				f47_arg0.VRAMBar:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.VRAMBar:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.VRAMBar:completeAnimation() --[[ @ 0]]
			f47_arg0.VRAMBar:setTopBottom( 0, 0, 98, 168 ) --[[ @ 0]]
			f47_arg0.VRAMBar:setAlpha( 0 ) --[[ @ 0]]
			f47_local1( f47_arg0.VRAMBar ) --[[ @ 0]]
			local f47_local2 = function ( f50_arg0 )
				f47_arg0.TabContent:beginAnimation( 200 ) --[[ @ 0]]
				f47_arg0.TabContent:setTopBottom( 0, 0, 230, 982 ) --[[ @ 0]]
				f47_arg0.TabContent:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.TabContent:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.TabContent:completeAnimation() --[[ @ 0]]
			f47_arg0.TabContent:setLeftRight( 0, 0, 0, 1920 ) --[[ @ 0]]
			f47_arg0.TabContent:setTopBottom( 0, 0, 180, 982 ) --[[ @ 0]]
			f47_local2( f47_arg0.TabContent ) --[[ @ 0]]
			f47_arg0.FTEDesc:completeAnimation() --[[ @ 0]]
			f47_arg0.FTEDesc:setTopBottom( 1, 1, -438, 0 ) --[[ @ 0]]
			f47_arg0.FTEDesc:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.FTEDesc ) --[[ @ 0]]
		end
	},
	FadedOut = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f51_arg0.TabContent:completeAnimation() --[[ @ 0]]
			f51_arg0.TabContent.SideButtons:completeAnimation() --[[ @ 0]]
			f51_arg0.TabContent.OptionsList.ScrollList.VScrollbar:completeAnimation() --[[ @ 0]]
			f51_arg0.TabContent.SideButtons:setAlpha( 0.3 ) --[[ @ 0]]
			f51_arg0.TabContent.OptionsList.ScrollList.VScrollbar:setAlpha( 0.3 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.TabContent ) --[[ @ 0]]
			f51_arg0.FooterBlocker:completeAnimation() --[[ @ 0]]
			f51_arg0.FooterBlocker:setAlpha( 0.7 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.FooterBlocker ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PC_StartMenu_Options_New.__onClose = function ( f52_arg0 )
	f52_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f52_arg0.TabContent:close() --[[ @ 0]]
	f52_arg0.VRAMBar:close() --[[ @ 0]]
	f52_arg0.VoiceBar:close() --[[ @ 0]]
	f52_arg0.SeparationLine2:close() --[[ @ 0]]
	f52_arg0.SeparationLine1:close() --[[ @ 0]]
	f52_arg0.FTEDesc:close() --[[ @ 0]]
	f52_arg0.KeybindMessage:close() --[[ @ 0]]
	f52_arg0.ControllerLayout:close() --[[ @ 0]]
	f52_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f52_arg0.UnbindMiddleMouseMessage:close() --[[ @ 0]]
	f52_arg0.CommonHeader:close() --[[ @ 0]]
	f52_arg0.TopBar:close() --[[ @ 0]]
	f52_arg0.OptionsTabs:close() --[[ @ 0]]
end
 --[[ @ 0]]
