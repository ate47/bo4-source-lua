-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/cac/cac_background_slide_panel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/itemnamedescunlocktext" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "x64:5f36454e4aa0e1bb" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.ZMEquipmentSelect = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ZMEquipmentSelect = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ZMEquipmentSelect", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.ZMEquipmentSelect ) --[[ @ 0]]
	self.soundSet = "ZCAC" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local BackgroundSlidePanel = CoD.cac_background_slide_panel.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0.5, 0.5, 132, 754 ) --[[ @ 0]]
	BackgroundSlidePanel:setZoom( 70 ) --[[ @ 0]]
	self:addElement( BackgroundSlidePanel ) --[[ @ 0]]
	self.BackgroundSlidePanel = BackgroundSlidePanel --[[ @ 0]]
	
	local RestrictedText = CoD.RestrictedItemWarningText.new( f1_local1, f1_arg0, 0.5, 0.5, -247, 247, 0.5, 0.5, 70, 100 ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	local itemList = LUI.UIList.new( f1_local1, f1_arg0, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	itemList:setLeftRight( 0.5, 0.5, -469, 469 ) --[[ @ 0]]
	itemList:setTopBottom( 0.5, 0.5, 195, 307 ) --[[ @ 0]]
	itemList:setWidgetType( CoD.ZMItemGridButtonSmall ) --[[ @ 0]]
	itemList:setHorizontalCount( 6 ) --[[ @ 0]]
	itemList:setSpacing( 10 ) --[[ @ 0]]
	itemList:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	itemList:setDataSource( "Unlockables" ) --[[ @ 0]]
	itemList:linkToElementModel( itemList, "globalItemIndex", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	itemList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponModel( f1_local1, element, f1_arg0 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	itemList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.CACUtility.SetActiveListItemToEquippedItem( f1_local1, f1_arg0, element ) --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponModel( f1_local1, element, f1_arg0 ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	itemList:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( itemList, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() and CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		elseif not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.CACUtility.EquipWeapon( self, element, menu, controller, false ) --[[ @ 0]]
			UpdateSelfElementState( menu, self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_confirm" ) --[[ @ 0]]
			return false
		elseif not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_itemList = function ( f8_arg0, f8_arg1, f8_arg2, f8_arg3 )
		local f8_local0 = itemList --[[ @ 0]]
		CoD.CACUtility.SetActiveListItemToEquippedItem( f8_arg2, f8_arg1, f8_local0 ) --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponModel( f8_arg2, f8_local0, f8_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_itemList ) --[[ @ 0]]
	self:addElement( itemList ) --[[ @ 0]]
	self.itemList = itemList --[[ @ 0]]
	
	local ItemInfo = CoD.ItemNameDescUnlockText.new( f1_local1, f1_arg0, 0.5, 0.5, -753, -253, 0.5, 0.5, -48, 59 ) --[[ @ 0]]
	ItemInfo:mergeStateConditions( {
		{
			stateName = "Zombie",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( ItemInfo ) --[[ @ 0]]
	self.ItemInfo = ItemInfo --[[ @ 0]]
	
	local CACHeader = CoD.CommonHeader.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CACHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.CACUtility.GetHeaderNameForLoadoutSlot( self, @"hash_15C60F77B9332E5B" ) ) ) --[[ @ 0]]
	CACHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CACHeader:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			CACHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CACHeader:linkToElementModel( self, nil, false, function ( model )
		CACHeader:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CACHeader:registerEventHandler( "menu_loaded", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f12_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f12_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f12_local0 then
			f12_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f12_local0
	end ) --[[ @ 0]]
	self:addElement( CACHeader ) --[[ @ 0]]
	self.CACHeader = CACHeader --[[ @ 0]]
	
	local BackingGrayMediumLeft = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 42 ) --[[ @ 0]]
	BackingGrayMediumLeft:registerEventHandler( "menu_loaded", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f13_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f13_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f13_local0 then
			f13_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f13_local0
	end ) --[[ @ 0]]
	self:addElement( BackingGrayMediumLeft ) --[[ @ 0]]
	self.BackingGrayMediumLeft = BackingGrayMediumLeft --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f14_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f14_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f14_local0 then
			f14_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f14_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 67, 672 ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	RestrictedText:linkToElementModel( itemList, nil, false, function ( model )
		RestrictedText:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemInfo:linkToElementModel( itemList, nil, false, function ( model )
		ItemInfo:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.CACUtility.ClearClassWeaponModel( f1_local1, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	itemList.id = "itemList" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = itemList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_itemList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local10 = self --[[ @ 0]]
	if not CoD.BaseUtility.IsMenuSessionModeEqualTo( f1_local1, Enum[@"eModes"][@"hash_73723205FAE52C4A"] ) then
		CoD.CACUtility.UpdateWeaponModel( f1_local1, self, f1_arg0 ) --[[ @ 0]]
		CoD.BaseUtility.SetModelFromPropertyModel( f1_arg0, self, self ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ZMEquipmentSelect.__onClose = function ( f21_arg0 )
	f21_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f21_arg0.RestrictedText:close() --[[ @ 0]]
	f21_arg0.ItemInfo:close() --[[ @ 0]]
	f21_arg0.BackgroundSlidePanel:close() --[[ @ 0]]
	f21_arg0.itemList:close() --[[ @ 0]]
	f21_arg0.CACHeader:close() --[[ @ 0]]
	f21_arg0.BackingGrayMediumLeft:close() --[[ @ 0]]
	f21_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f21_arg0.XCamMouseControl:close() --[[ @ 0]]
end
 --[[ @ 0]]
