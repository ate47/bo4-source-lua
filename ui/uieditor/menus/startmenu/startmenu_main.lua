-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/backgroundframes/menuframeingame" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsbackground" ) --[[ @ 0]]
require( "x64:36374709588b8a15" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorquitbuttoncontainer" ) --[[ @ 0]]
require( "x64:7b710bc406e458bd" ) --[[ @ 0]]

CoD.StartMenu_Main = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.StartMenu_Main = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "StartMenu_Main", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.StartMenuUtility.InitDataForStartMenu( self, f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg0, "hudItems.hasStartedWZMatch", false ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg0, "PositionDraft.stage", 0 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Main ) --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SceneBlur:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local Background = CoD.StartMenuOptionsBackground.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local BGEnhancement = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BGEnhancement:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BGEnhancement:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( BGEnhancement ) --[[ @ 0]]
	self.BGEnhancement = BGEnhancement --[[ @ 0]]
	
	local TopBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0.5, 86.5 ) --[[ @ 0]]
	TopBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	TopBacking:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( TopBacking ) --[[ @ 0]]
	self.TopBacking = TopBacking --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local TabFrame = LUI.UIFrame.new( f1_local1, f1_arg0, 0, 0, false ) --[[ @ 0]]
	TabFrame:setLeftRight( 0.5, 0.5, -960, 960 ) --[[ @ 0]]
	TabFrame:setTopBottom( 0.5, 0.5, -390, 390 ) --[[ @ 0]]
	self:addElement( TabFrame ) --[[ @ 0]]
	self.TabFrame = TabFrame --[[ @ 0]]
	
	local MenuFrameIngame = CoD.MenuFrameIngame.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( MenuFrameIngame ) --[[ @ 0]]
	self.MenuFrameIngame = MenuFrameIngame --[[ @ 0]]
	
	local TiledPlusGrid = LUI.UIImage.new( 0, 0, -135, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	TiledPlusGrid:setAlpha( 0.05 ) --[[ @ 0]]
	TiledPlusGrid:setImage( RegisterImage( @"uie_ui_hud_vehicle_hellstorm_repeat_plusgrid" ) ) --[[ @ 0]]
	TiledPlusGrid:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	TiledPlusGrid:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledPlusGrid:setupNineSliceShader( 220, 220 ) --[[ @ 0]]
	self:addElement( TiledPlusGrid ) --[[ @ 0]]
	self.TiledPlusGrid = TiledPlusGrid --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, -21, 43 ) --[[ @ 0]]
	Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Box:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local DividerSolidBot = LUI.UIImage.new( 0, 1.01, -11, -11, 0, 0, 41, 45 ) --[[ @ 0]]
	DividerSolidBot:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	DividerSolidBot:setAlpha( 0 ) --[[ @ 0]]
	DividerSolidBot:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	DividerSolidBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	DividerSolidBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DividerSolidBot:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( DividerSolidBot ) --[[ @ 0]]
	self.DividerSolidBot = DividerSolidBot --[[ @ 0]]
	
	local SafeAreaContainer = CoD.StartMenu_SafeAreaContainer.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SafeAreaContainer.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_704DC58203AB2DE0" ) ) --[[ @ 0]]
	self:addElement( SafeAreaContainer ) --[[ @ 0]]
	self.SafeAreaContainer = SafeAreaContainer --[[ @ 0]]
	
	local DirectorQuitButtonContainer = nil --[[ @ 0]]
	
	DirectorQuitButtonContainer = CoD.DirectorQuitButtonContainer.new( f1_local1, f1_arg0, 0.5, 0.5, 768, 968, 0, 0, 11, 47 ) --[[ @ 0]]
	DirectorQuitButtonContainer:setAlpha( 0 ) --[[ @ 0]]
	DirectorQuitButtonContainer:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( DirectorQuitButtonContainer, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		if IsPC() then
			OpenPCQuit( self, menu, self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( DirectorQuitButtonContainer ) --[[ @ 0]]
	self.DirectorQuitButtonContainer = DirectorQuitButtonContainer --[[ @ 0]]
	
	local PCKoreaContentDescriptorsContainer = nil --[[ @ 0]]
	
	PCKoreaContentDescriptorsContainer = CoD.PC_Korea_ContentDescriptors_Container.new( f1_local1, f1_arg0, 0.5, 0.5, 737, 926, 0, 0, 110, 446 ) --[[ @ 0]]
	PCKoreaContentDescriptorsContainer:mergeStateConditions( {
		{
			stateName = "Is15PlusFrontend",
			condition = function ( menu, element, event )
				local f5_local0 = IsPC() --[[ @ 0]]
				if f5_local0 then
					f5_local0 = InFrontend() --[[ @ 0]]
					if f5_local0 then
						f5_local0 = CoD.PCKoreaUtility.IsInKorea() --[[ @ 0]]
						if f5_local0 then
							f5_local0 = IsGameTypeCombatTraining() --[[ @ 0]]
						end
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "Is15Plus",
			condition = function ( menu, element, event )
				local f6_local0 = IsPC() --[[ @ 0]]
				if f6_local0 then
					f6_local0 = CoD.PCKoreaUtility.IsInKorea() --[[ @ 0]]
					if f6_local0 then
						f6_local0 = IsGameTypeCombatTraining() --[[ @ 0]]
					end
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	self:addElement( PCKoreaContentDescriptorsContainer ) --[[ @ 0]]
	self.PCKoreaContentDescriptorsContainer = PCKoreaContentDescriptorsContainer --[[ @ 0]]
	
	TabFrame:linkToElementModel( SafeAreaContainer.TabBar.Tabs.grid, "tabWidget", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			TabFrame:changeFrameWidget( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "IsFrontEnd",
			condition = function ( menu, element, event )
				return InFrontend()
			end
		},
		{
			stateName = "Zombies",
			condition = function ( menu, element, event )
				return IsZombies()
			end
		},
		{
			stateName = "Campaign",
			condition = function ( menu, element, event )
				return IsCampaign()
			end
		},
		{
			stateName = "WZ",
			condition = function ( menu, element, event )
				return IsInGame() and IsWarzone()
			end
		},
		{
			stateName = "Ingame",
			condition = function ( menu, element, event )
				return IsInGame()
			end
		}
	} ) --[[ @ 0]]
	local f1_local15 = self --[[ @ 0]]
	local f1_local16 = self.subscribeToModel --[[ @ 0]]
	local f1_local17 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["lobbyRoot.lobbyNav"], function ( f13_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f13_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["lobbyRoot.lobbyNav"], function ( f14_arg0, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["lobbyRoot.lobbyMainMode"], function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.LastInput, function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["PositionDraft.stage"], function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "on_session_start", function ( f19_arg0, f19_arg1 )
		f19_arg1.menu = f19_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "on_session_end", function ( f20_arg0, f20_arg1 )
		f20_arg1.menu = f20_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["hudItems.hasStartedWZMatch"], function ( f21_arg0, f21_arg1 )
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f22_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f22_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f22_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		PlaySoundSetSound( self, "menu_enter" ) --[[ @ 0]]
		FileshareGetSlots( self, self, f1_arg0 ) --[[ @ 0]]
		SetHeadingKickerTextToGameMode() --[[ @ 0]]
		if not f22_local0 then
			f22_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f22_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "close_all_ingame_menus", function ( self, event )
		local f23_local0 = nil --[[ @ 0]]
		StartMenuGoBack( f1_local1, f1_arg0 ) --[[ @ 0]]
		if not f23_local0 then
			f23_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f23_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "open_migration_menu", function ( self, event )
		local f24_local0 = nil --[[ @ 0]]
		StartMenuGoBack( f1_local1, f1_arg0 ) --[[ @ 0]]
		if not f24_local0 then
			f24_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f24_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f25_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f25_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f25_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsPC() and IsWarzone() and IsInGame() then
			CoD.WZUtility.ClosePCSplitterWidget( self, f1_local1, f1_arg0 ) --[[ @ 0]]
		end
		if not f25_local0 then
			f25_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f25_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if InFrontend() then
			CoD.BaseUtility.SwitchModeOnMenu( controller ) --[[ @ 0]]
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			CoD.StartMenuUtility.CleanUpBarracksTab( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			CoD.LobbyUtility.SetMenuControllerRestriction( self, controller, 0 ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsDemoPlaying() then
			CoD.BaseUtility.SwitchModeOnMenu( controller ) --[[ @ 0]]
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsDemoPlaying() then
			CoD.BaseUtility.SwitchModeOnMenu( controller ) --[[ @ 0]]
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsDemoPlaying() then
			CoD.DemoUtility.RunPauseCommandIfNotPlayerPause( controller ) --[[ @ 0]]
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		elseif IsDemoPlaying() and not IsPC() then
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if InFrontend() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_23996BAAC73C3F6D", nil, nil ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif IsDemoPlaying() and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.WZUtility.NextWeapon( controller ) --[[ @ 0]]
			return true
		elseif IsInGame() and not IsLobbyNetworkModeLAN() and not IsDemoPlaying() and not IsPC() and not IsGameTypeCombatTraining() then
			OpenOverlay( self, "Social_Main", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif IsInGame() and not IsLobbyNetworkModeLAN() and not IsDemoPlaying() and not IsPC() and not IsGameTypeCombatTraining() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_478E0BA47CFB4A8", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "weapnext", function ( element, menu, controller, model )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.WZUtility.NextWeapon( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "weapnext" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "weapprev", function ( element, menu, controller, model )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.WZUtility.PrevWeapon( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "weapprev" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "weapswitchprimary", function ( element, menu, controller, model )
		if IsPC() and IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.WZUtility.SwitchToWeaponInSlot( controller, 0 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "weapswitchprimary" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "weapswitchsecondary", function ( element, menu, controller, model )
		if IsPC() and IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.WZUtility.SwitchToWeaponInSlot( controller, 1 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and IsWarzone() and IsInGame() and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "weapswitchsecondary" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "F1", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) and CoD.DirectorUtility.IsMainMode( controller, Enum[@"LobbyMainMode"][@"hash_37E41449995CD57E"] ) and not InFrontend() and AlwaysFalse() then
			CoD.StartMenuUtility.ShowClassSelectSlideout( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) and CoD.DirectorUtility.IsMainMode( controller, Enum[@"LobbyMainMode"][@"hash_37E41449995CD57E"] ) and not InFrontend() and AlwaysFalse() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, "F1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"], nil, function ( element, menu, controller, model )
		if IsPC() and IsGamepad( controller ) then
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		else
			RefreshLobbyRoom( menu, controller ) --[[ @ 0]]
			StartMenuGoBack( menu, controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.StartMenuUtility.CanChangeWZStatsFilter( menu, self.TabFrame, controller ) then
			CoD.PlayerStatsUtility.UpdateWZStatsFilter( controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_stats_switch" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.StartMenuUtility.CanChangeWZStatsFilter( menu, self.TabFrame, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsPC() and CoD.PCUtility.CanShowLeaveGameButton( menu, controller ) then
			QuitPCGame_MP( self, controller, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCUtility.CanShowLeaveGameButton( menu, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_contextual_2" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsPC() and CoD.PCUtility.CanShowStartWarzoneButton( menu, controller ) then
			CoD.WZUtility.StartWarzone( controller ) --[[ @ 0]]
			SetControllerModelValue( controller, "hudItems.hasStartedWZMatch", true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCUtility.CanShowStartWarzoneButton( menu, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "factions.isCoDCaster", function ( model )
		local f49_local0 = self --[[ @ 0]]
		UpdateStartMenuTabsDatasource( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TabFrame.id = "TabFrame" --[[ @ 0]]
	MenuFrameIngame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		MenuFrameIngame.id = "MenuFrameIngame" --[[ @ 0]]
	end
	SafeAreaContainer.id = "SafeAreaContainer" --[[ @ 0]]
	if CoD.isPC then
		DirectorQuitButtonContainer.id = "DirectorQuitButtonContainer" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = TabFrame --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local16 = self --[[ @ 0]]
	if IsInGame() and IsMultiplayer() then
		CoD.StartMenuUtility.AddClassSelectSlideout( f1_local1, f1_arg0 ) --[[ @ 0]]
	end
	SizeToSafeArea( TabFrame, f1_arg0 ) --[[ @ 0]]
	f1_local16 = SafeAreaContainer --[[ @ 0]]
	if not IsPC() then
		SizeToSafeArea( f1_local16, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Main.__resetProperties = function ( f50_arg0 )
	f50_arg0.TabFrame:completeAnimation() --[[ @ 0]]
	f50_arg0.Background:completeAnimation() --[[ @ 0]]
	f50_arg0.BGEnhancement:completeAnimation() --[[ @ 0]]
	f50_arg0.TiledPlusGrid:completeAnimation() --[[ @ 0]]
	f50_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f50_arg0.DirectorQuitButtonContainer:completeAnimation() --[[ @ 0]]
	f50_arg0.DividerSolidBot:completeAnimation() --[[ @ 0]]
	f50_arg0.Box:completeAnimation() --[[ @ 0]]
	f50_arg0.SafeAreaContainer:completeAnimation() --[[ @ 0]]
	f50_arg0.TopBacking:completeAnimation() --[[ @ 0]]
	f50_arg0.TabFrame:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
	f50_arg0.BGEnhancement:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f50_arg0.BGEnhancement:setAlpha( 0.2 ) --[[ @ 0]]
	f50_arg0.TiledPlusGrid:setAlpha( 0.05 ) --[[ @ 0]]
	f50_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	f50_arg0.DirectorQuitButtonContainer:setAlpha( 0 ) --[[ @ 0]]
	f50_arg0.DividerSolidBot:setTopBottom( 0, 0, 41, 45 ) --[[ @ 0]]
	f50_arg0.DividerSolidBot:setAlpha( 0 ) --[[ @ 0]]
	f50_arg0.Box:setTopBottom( 0, 0, -21, 43 ) --[[ @ 0]]
	f50_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
	f50_arg0.SafeAreaContainer.CommonIdentityWidgetStreamlined:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.TopBacking:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Main.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f51_local0 = function ( f52_arg0 )
				local f52_local0 = function ( f53_arg0 )
					f53_arg0:beginAnimation( 150 ) --[[ @ 0]]
					f53_arg0:setAlpha( 1 ) --[[ @ 0]]
					f53_arg0:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f51_arg0.TabFrame:beginAnimation( 150 ) --[[ @ 0]]
				f51_arg0.TabFrame:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.TabFrame:registerEventHandler( "transition_complete_keyframe", f52_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.TabFrame:completeAnimation() --[[ @ 0]]
			f51_arg0.TabFrame:setAlpha( 0 ) --[[ @ 0]]
			f51_local0( f51_arg0.TabFrame ) --[[ @ 0]]
		end
	},
	IsFrontEnd = {
		DefaultClip = function ( f54_arg0, f54_arg1 )
			f54_arg0:__resetProperties() --[[ @ 0]]
			f54_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f54_arg0.Background:completeAnimation() --[[ @ 0]]
			f54_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.Background ) --[[ @ 0]]
		end
	},
	Zombies = {
		DefaultClip = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f55_arg0.Background:completeAnimation() --[[ @ 0]]
			f55_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.Background ) --[[ @ 0]]
			f55_arg0.BGEnhancement:completeAnimation() --[[ @ 0]]
			f55_arg0.BGEnhancement:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.BGEnhancement ) --[[ @ 0]]
			f55_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f55_arg0.NoiseTiledBacking:setAlpha( 0.6 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f55_arg0.TiledPlusGrid:completeAnimation() --[[ @ 0]]
			f55_arg0.TiledPlusGrid:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.TiledPlusGrid ) --[[ @ 0]]
			f55_arg0.DirectorQuitButtonContainer:completeAnimation() --[[ @ 0]]
			f55_arg0.DirectorQuitButtonContainer:setAlpha( 1 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.DirectorQuitButtonContainer ) --[[ @ 0]]
		end
	},
	Campaign = {
		DefaultClip = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	WZ = {
		DefaultClip = function ( f57_arg0, f57_arg1 )
			f57_arg0:__resetProperties() --[[ @ 0]]
			f57_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f57_arg0.BGEnhancement:completeAnimation() --[[ @ 0]]
			f57_arg0.BGEnhancement:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f57_arg0.BGEnhancement:setAlpha( 0.94 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.BGEnhancement ) --[[ @ 0]]
			f57_arg0.TiledPlusGrid:completeAnimation() --[[ @ 0]]
			f57_arg0.TiledPlusGrid:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.TiledPlusGrid ) --[[ @ 0]]
			f57_arg0.Box:completeAnimation() --[[ @ 0]]
			f57_arg0.Box:setTopBottom( 0, 0, -17, 47 ) --[[ @ 0]]
			f57_arg0.Box:setAlpha( 0.8 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.Box ) --[[ @ 0]]
			f57_arg0.DividerSolidBot:completeAnimation() --[[ @ 0]]
			f57_arg0.DividerSolidBot:setTopBottom( 0, 0, 45, 49 ) --[[ @ 0]]
			f57_arg0.DividerSolidBot:setAlpha( 0.76 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.DividerSolidBot ) --[[ @ 0]]
			f57_arg0.SafeAreaContainer:completeAnimation() --[[ @ 0]]
			f57_arg0.SafeAreaContainer.CommonIdentityWidgetStreamlined:completeAnimation() --[[ @ 0]]
			f57_arg0.SafeAreaContainer.CommonIdentityWidgetStreamlined:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.SafeAreaContainer ) --[[ @ 0]]
			f57_arg0.DirectorQuitButtonContainer:completeAnimation() --[[ @ 0]]
			f57_arg0.DirectorQuitButtonContainer:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.DirectorQuitButtonContainer ) --[[ @ 0]]
		end
	},
	Ingame = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f58_arg0.BGEnhancement:completeAnimation() --[[ @ 0]]
			f58_arg0.BGEnhancement:setRGB( 0.63, 0.24, 0.24 ) --[[ @ 0]]
			f58_arg0.BGEnhancement:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.BGEnhancement ) --[[ @ 0]]
			f58_arg0.TopBacking:completeAnimation() --[[ @ 0]]
			f58_arg0.TopBacking:setAlpha( 0.8 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.TopBacking ) --[[ @ 0]]
			f58_arg0.SafeAreaContainer:completeAnimation() --[[ @ 0]]
			f58_arg0.SafeAreaContainer.CommonIdentityWidgetStreamlined:completeAnimation() --[[ @ 0]]
			f58_arg0.SafeAreaContainer.CommonIdentityWidgetStreamlined:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.SafeAreaContainer ) --[[ @ 0]]
			f58_arg0.DirectorQuitButtonContainer:completeAnimation() --[[ @ 0]]
			f58_arg0.DirectorQuitButtonContainer:setAlpha( 1 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.DirectorQuitButtonContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Main.__onClose = function ( f59_arg0 )
	f59_arg0.TabFrame:close() --[[ @ 0]]
	f59_arg0.Background:close() --[[ @ 0]]
	f59_arg0.MenuFrameIngame:close() --[[ @ 0]]
	f59_arg0.SafeAreaContainer:close() --[[ @ 0]]
	f59_arg0.DirectorQuitButtonContainer:close() --[[ @ 0]]
	f59_arg0.PCKoreaContentDescriptorsContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
