-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
require( "ui/uieditor/widgets/backgroundframes/menuframeingame" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commondetailpanel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/gamesettings/gamesettings_optionsbutton" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsbackground" ) --[[ @ 0]]

CoD.StartMenu_Options_CoDAccount_CTA = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.StartMenu_Options_CoDAccount_CTA = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "StartMenu_Options_CoDAccount_CTA", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.StartMenu_Options_CoDAccount_CTA ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local background = CoD.StartMenuOptionsBackground.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( background ) --[[ @ 0]]
	self.background = background --[[ @ 0]]
	
	local CommonDetailPanel = CoD.CommonDetailPanel.new( f1_local1, f1_arg0, 0.5, 0.5, -400, 400, 0.5, 0.5, -190, 190 ) --[[ @ 0]]
	self:addElement( CommonDetailPanel ) --[[ @ 0]]
	self.CommonDetailPanel = CommonDetailPanel --[[ @ 0]]
	
	local MenuFrameIngame = CoD.MenuFrameIngame.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 1, 1, -1080, 0 ) --[[ @ 0]]
	self:addElement( MenuFrameIngame ) --[[ @ 0]]
	self.MenuFrameIngame = MenuFrameIngame --[[ @ 0]]
	
	local accountOptionsList = LUI.UIList.new( f1_local1, f1_arg0, 12, 0, nil, false, false, false, false ) --[[ @ 0]]
	accountOptionsList:setLeftRight( 0.5, 0.5, -380, 380 ) --[[ @ 0]]
	accountOptionsList:setTopBottom( 0.5, 0.5, -36, 168 ) --[[ @ 0]]
	accountOptionsList:setWidgetType( CoD.GameSettings_OptionsButton ) --[[ @ 0]]
	accountOptionsList:setVerticalCount( 3 ) --[[ @ 0]]
	accountOptionsList:setSpacing( 12 ) --[[ @ 0]]
	accountOptionsList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	accountOptionsList:setDataSource( "CODAccountRegisterOptions" ) --[[ @ 0]]
	accountOptionsList:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( accountOptionsList, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "MOUSE1" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( accountOptionsList ) --[[ @ 0]]
	self.accountOptionsList = accountOptionsList --[[ @ 0]]
	
	local Desc = LUI.UIText.new( 0.5, 0.5, -380, 380, 0.5, 0.5, -132, -111 ) --[[ @ 0]]
	Desc:setRGB( 0.96, 0.93, 0.84 ) --[[ @ 0]]
	Desc:setAlpha( 0.3 ) --[[ @ 0]]
	Desc:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6FFAD8F01669B007" ) ) --[[ @ 0]]
	Desc:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Desc:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) ) --[[ @ 0]]
	Desc:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) ) --[[ @ 0]]
	self:addElement( Desc ) --[[ @ 0]]
	self.Desc = Desc --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0.5, 0.5, -380, 380, 0.5, 0.5, -178, -133 ) --[[ @ 0]]
	Title:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Title:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_62141D0923911BB7" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setLetterSpacing( 6 ) --[[ @ 0]]
	Title:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local Header = CoD.CommonHeader.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	Header.BGSceneBlur:setAlpha( 0 ) --[[ @ 0]]
	Header.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_630BC41F2404F851" ) ) --[[ @ 0]]
	Header.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	Header:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Header.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Header:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( Header ) --[[ @ 0]]
	self.Header = Header --[[ @ 0]]
	
	local BackingGrayMediumLeft = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	self:addElement( BackingGrayMediumLeft ) --[[ @ 0]]
	self.BackingGrayMediumLeft = BackingGrayMediumLeft --[[ @ 0]]
	
	local SkipButton = nil --[[ @ 0]]
	
	SkipButton = CoD.GameSettings_OptionsButton.new( f1_local1, f1_arg0, 0, 0, 1220, 1360, 0, 0, 851, 911 ) --[[ @ 0]]
	SkipButton.OptionText:setText( LocalizeToUpperString( @"hash_3663FC1AF7C5AECF" ) ) --[[ @ 0]]
	SkipButton:linkToElementModel( self, "image", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			SkipButton.Icon:setImage( RegisterImage( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	SkipButton:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( SkipButton, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		CoD.LobbyUtility.OpenFTUEGameIntroductionOverlay( controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( SkipButton ) --[[ @ 0]]
	self.SkipButton = SkipButton --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "SignInRequired",
			condition = function ( menu, element, event )
				return PropertyIsTrue( self, "_signInRequired" )
			end
		}
	} ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f12_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f12_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f12_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		CoD.CoDAccountUtility.UpdateOnCTAOccludedChange( f1_local1, f1_arg0, event ) --[[ @ 0]]
		if not f12_local0 then
			f12_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f12_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if not IsSelfInState( self, "SignInRequired" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsSelfInState( self, "SignInRequired" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	MenuFrameIngame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		MenuFrameIngame.id = "MenuFrameIngame" --[[ @ 0]]
	end
	accountOptionsList.id = "accountOptionsList" --[[ @ 0]]
	if CoD.isPC then
		SkipButton.id = "SkipButton" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = accountOptionsList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local11 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	UpdateSelfState( self, f1_arg0 ) --[[ @ 0]]
	UpdateAllMenuButtonPrompts( f1_local1, f1_arg0 ) --[[ @ 0]]
	f1_local11 = SkipButton --[[ @ 0]]
	if CoD.CoDAccountUtility.HideSkipButton( self ) then
		ReplaceElementWithFake( self, "SkipButton" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Options_CoDAccount_CTA.__onClose = function ( f15_arg0 )
	f15_arg0.background:close() --[[ @ 0]]
	f15_arg0.CommonDetailPanel:close() --[[ @ 0]]
	f15_arg0.MenuFrameIngame:close() --[[ @ 0]]
	f15_arg0.accountOptionsList:close() --[[ @ 0]]
	f15_arg0.Header:close() --[[ @ 0]]
	f15_arg0.BackingGrayMediumLeft:close() --[[ @ 0]]
	f15_arg0.SkipButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
