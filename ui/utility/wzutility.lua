-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
CoD.WZUtility = {} --[[ @ 0]]
CoD.WZUtility.TeamPlayerColor = {
	"WarzoneTeammate1",
	"WarzoneTeammate2",
	"WarzoneTeammate3",
	"WarzoneTeammate4",
	"WarzoneTeammate5"
} --[[ @ 0]]
CoD.WZUtility.PlayerStatusIcon = {
	[Enum[@"hash_14A07561A78E340B"][@"hash_38D80055B4F13E0F"]] = @"blacktransparent",
	[Enum[@"hash_14A07561A78E340B"][@"hash_358F9A363F8FBB07"]] = @"ui_icon_disconnect",
	[Enum[@"hash_14A07561A78E340B"][@"hash_59E50BB255808BF"]] = @"blacktransparent",
	[Enum[@"hash_14A07561A78E340B"][@"hash_7751743BBF671EDC"]] = @"blacktransparent",
	[Enum[@"hash_14A07561A78E340B"][@"hash_9BD8FECA6158847"]] = @"ui_icon_bleedout",
	[Enum[@"hash_14A07561A78E340B"][@"hash_3C233F1FA9F35C02"]] = @"ui_icon_dead"
} --[[ @ 0]]
CoD.WZUtility.PlayerStatusClientScriptState = {
	[Enum[@"hash_14A07561A78E340B"][@"hash_9BD8FECA6158847"]] = @"last_stand",
	[Enum[@"hash_14A07561A78E340B"][@"hash_3C233F1FA9F35C02"]] = @"dead"
} --[[ @ 0]]
CoD.WZUtility.InventoryItem = {
	INVENTORY_ITEM_NONE = 32767
} --[[ @ 0]]
CoD.WZUtility.InventorySize = {
	ITEM_WORLD_PLAYER_INVENTORY_SIZE = 5,
	ITEM_WORLD_PLAYER_INVENTORY_SIZE_BACKPACK = 10
} --[[ @ 0]]
CoD.WZUtility.DeathZoneState = {
	ZONE_ONLINE = 0,
	ZONE_WARNING = 1,
	ZONE_OFFLINE = 2,
	ZONE_HIDDEN = 4
} --[[ @ 0]]
CoD.WZUtility.CollapseTimerState = LuaEnum.createEnum( "OFF", "WARNING", "COLLAPSING" ) --[[ @ 0]]
CoD.WZUtility.ItemAvailableAction = LuaEnum.createEnum( "NONE", "EQUIP", "ATTACH", "SWAP", "CONSUME", "DISCARD", "REPAIR" ) --[[ @ 0]]
CoD.WZUtility.InventoryNag = {
	NAG_NOT_SEEN = 0,
	NAG_VISIBLE = 1,
	NAG_DISMISSED = 2
} --[[ @ 0]]
CoD.WZUtility.ArmorFlipbookFrames = 10 --[[ @ 0]]
CoD.WZUtility.SeaLevelAltitude = 984 --[[ @ 0]]
CoD.WZUtility.ObjectiveStates = {
	IN_PROGRESS = 0,
	COMPLETED = 1,
	FAILED = 2
} --[[ @ 0]]
CoD.WZUtility.QuestItemUpdateTypes = {
	CHARACTER_UNLOCK_UPDATE_STATE = 0,
	CHARACTER_UNLOCK_UPDATE_ALREADY_COMPLETED = 1
} --[[ @ 0]]
CoD.WZUtility.ArmorAssetList = {
	@"armor_item_large",
	@"armor_item_medium",
	@"armor_item_small"
} --[[ @ 0]]
CoD.WZUtility.DisableZoomIn = {} --[[ @ 0]]
CoD.WZUtility.DisableZoomOut = {} --[[ @ 0]]
CoD.WZUtility.WZPersonalizeGroupNames = {
	{
		index = 1,
		weapon_category = "weapon_assault",
		name = @"hash_7FE1B0B2003A6CC1",
		itemGroup = Enum[@"itemGroup_t"][@"hash_64A0897271FB09AD"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 2,
		weapon_category = "weapon_smg",
		name = @"hash_35A1E94F52AC6DAB",
		itemGroup = Enum[@"itemGroup_t"][@"hash_6BCE06767A091BE7"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 3,
		weapon_category = "weapon_tactical",
		name = @"hash_1FB38D2633FBBEC7",
		itemGroup = Enum[@"itemGroup_t"][@"hash_23DA6A4276EF1CEF"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 4,
		weapon_category = "weapon_lmg",
		name = @"hash_6DB6F169E46CD4E4",
		itemGroup = Enum[@"itemGroup_t"][@"hash_651D9B7706B5A416"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 5,
		weapon_category = "weapon_sniper",
		name = @"hash_2EF865AD574F5FAD",
		itemGroup = Enum[@"itemGroup_t"][@"hash_D9E14963CFC3D79"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 6,
		weapon_category = "weapon_cqb",
		name = @"hash_72584C59DF32630E",
		itemGroup = Enum[@"itemGroup_t"][@"hash_74BF8976C721AFFC"],
		loadoutType = "primary",
		minUnlockableCount = 0
	},
	{
		index = 7,
		weapon_category = "weapon_pistol",
		name = @"hash_31F931942007CAB9",
		itemGroup = Enum[@"itemGroup_t"][@"hash_11585BBF779B0319"],
		loadoutType = "secondary",
		minUnlockableCount = 0
	},
	{
		index = 8,
		weapon_category = "weapon_launcher",
		name = @"hash_3FB45C2314396720",
		itemGroup = Enum[@"itemGroup_t"][@"hash_766FF8D48F8D137F"],
		loadoutType = "secondary",
		minUnlockableCount = 0
	},
	{
		index = 9,
		weapon_category = "weapon_knife",
		name = @"hash_28180FA72D55F45B",
		itemGroup = Enum[@"itemGroup_t"][@"hash_208C158486CCADDB"],
		loadoutType = "secondary",
		minUnlockableCount = 3
	},
	{
		index = 10,
		weapon_category = "weapon_special",
		name = @"hash_63A21A8AF3E42CDD",
		itemGroup = Enum[@"itemGroup_t"][@"hash_16F7EF424C78D2F9"],
		loadoutType = "secondary",
		minUnlockableCount = 0
	}
} --[[ @ 0]]
local f0_local0 = CoD.WZUtility --[[ @ 0]]
local f0_local1 = {
	@"ar_accurate_t8",
	@"ar_damage_t8",
	@"ar_fastfire_t8",
	@"ar_galil_t8",
	@"ar_modular_t8",
	@"ar_peacekeeper_t8",
	@"ar_standard_t8",
	@"ar_stealth_t8",
	@"ar_an94_t8",
	@"ar_doublebarrel_t8",
	@"smg_accurate_t8",
	@"smg_capacity_t8",
	@"smg_fastburst_t8",
	@"smg_fastfire_t8",
	@"smg_handling_t8",
	@"hash_66E6C9C83987136B",
	@"smg_standard_t8",
	@"smg_folding_t8",
	@"smg_vmp_t8",
	@"smg_minigun_t8",
	@"tr_longburst_t8",
	@"tr_midburst_t8",
	@"tr_powersemi_t8",
	@"tr_leveraction_t8",
	@"tr_flechette_t8",
	@"tr_damageburst_t8",
	@"lmg_heavy_t8",
	@"lmg_spray_t8",
	@"lmg_standard_t8",
	@"lmg_double_t8",
	@"lmg_stealth_t8",
	@"sniper_fastrechamber_t8",
	@"sniper_locus_t8",
	@"sniper_powerbolt_t8",
	@"sniper_powersemi_t8",
	@"sniper_quickscope_t8",
	@"sniper_mini14_t8",
	@"sniper_damagesemi_t8",
	@"shotgun_pump_t8",
	@"shotgun_semiauto_t8",
	@"shotgun_fullauto_t8",
	@"shotgun_precision_t8",
	@"pistol_burst_t8",
	@"pistol_fullauto_t8",
	@"pistol_revolver_t8",
	@"pistol_standard_t8",
	@"launcher_standard_t8",
	@"melee_club_t8",
	@"melee_coinbag_t8",
	@"melee_cutlass_t8"
} --[[ @ 0]]
local f0_local2 = @"melee_demohammer_t8" --[[ @ 0]]
local f0_local3 = @"melee_secretsanta_t8" --[[ @ 0]]
local f0_local4 = @"melee_slaybell_t8" --[[ @ 0]]
local f0_local5 = @"melee_zombiearm_t8" --[[ @ 0]]
local f0_local6 = @"melee_stopsign_t8" --[[ @ 0]]
local f0_local7 = @"melee_actionfigure_t8" --[[ @ 0]]
local f0_local8 = @"melee_amuletfist_t8" --[[ @ 0]]
local f0_local9 = @"special_crossbow_t8" --[[ @ 0]]
f0_local1[33] = f0_local2 --[[ @ 0]]
f0_local1[34] = f0_local3 --[[ @ 0]]
f0_local1[35] = f0_local4 --[[ @ 0]]
f0_local1[36] = f0_local5 --[[ @ 0]]
f0_local1[37] = f0_local6 --[[ @ 0]]
f0_local1[38] = f0_local7 --[[ @ 0]]
f0_local1[39] = f0_local8 --[[ @ 0]]
f0_local1[40] = f0_local9 --[[ @ 0]]
f0_local0.WZPersonalizeWeaponNames = f0_local1 --[[ @ 0]]
CoD.WZUtility.WZDLC1WeaponNames = {
	@"ar_standard_t8",
	@"smg_fastburst_t8",
	@"pistol_fullauto_t8"
} --[[ @ 0]]
CoD.WZUtility.GetWZLevel = function ( f1_arg0 )
	if tonumber( CoD.PrestigeUtility.GetMaxRankByMode( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) ) + 1 <= tonumber( f1_arg0 ) then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_54008CE61FE52DCD" )
	else
		return tostring( f1_arg0 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetInventoryIsOpen = function ( f2_arg0, f2_arg1 )
	local f2_local0 = DataSources.WarzoneInventory.getModel( f2_arg0 ) --[[ @ 0]]
	f2_local0.isOpen:set( f2_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryNotify = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3, f3_arg4, f3_arg5 )
	local f3_local0 = {} --[[ @ 0]]
	local f3_local1 = f3_arg1:getModel() --[[ @ 0]]
	f3_local0.id = f3_local1.id:get() --[[ @ 0]]
	f3_local1 = DataSources.WarzoneInventory.getModel( f3_arg0 ) --[[ @ 0]]
	f3_local0.selectedIndex = f3_local1.selectedIndex:get() --[[ @ 0]]
	f3_local0.extraArg = f3_arg3 --[[ @ 0]]
	f3_local0.extraArg2 = f3_arg4 --[[ @ 0]]
	SendCustomClientScriptNotifyForAdjustedClient( f3_arg0, f3_arg2, f3_local0 ) --[[ @ 0]]
	if CoD.isPC then
		f3_local1 = f3_arg1:getMenu() --[[ @ 0]]
		if f3_local1 then
			if not f3_arg5 or not f3_local1.__firstTooltipUpdateDoneWZ then
				CoD.WZUtility.UpdateWZInventoryTooltipOnElementWithTimerPC( f3_arg0, f3_arg1, f3_arg5 ) --[[ @ 0]]
			end
			f3_local1.__firstTooltipUpdateDoneWZ = true --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryPickUpNotifyInternal = function ( f4_arg0, f4_arg1, f4_arg2 )
	if f4_arg1 and not CoD.SafeGetModelValue( f4_arg1, "isDummy" ) and not CoD.SafeGetModelValue( f4_arg1, "collapsed" ) then
		local f4_local0 = DataSources.WarzoneInventory.getModel( f4_arg0 ) --[[ @ 0]]
		local f4_local1 = f4_local0.selectedIndex:get() --[[ @ 0]]
		local f4_local2 = CoD.SafeGetModelValue( f4_local0, "item" .. f4_local1 .. ".id" ) --[[ @ 0]]
		if f4_arg1.claimsInventorySlot and f4_arg1.claimsInventorySlot:get() ~= 0 and f4_local2 ~= nil and f4_local2 ~= CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
			local f4_local3 = f4_local0.firstFreeSlot:get() --[[ @ 0]]
			if f4_local3 ~= -1 then
				f4_local1 = f4_local3 --[[ @ 0]]
			else
				SendCustomClientScriptNotifyForAdjustedClient( f4_arg0, "inventory_drop", {
					id = f4_local2,
					selectedIndex = f4_local1
				} ) --[[ @ 0]]
			end
		end
		local f4_local3 = "multi_item_pickup" --[[ @ 0]]
		if f4_arg2 then
			f4_local3 = "multi_item_pickup_stowed_weapon" --[[ @ 0]]
		end
		SendCustomClientScriptNotifyForAdjustedClient( f4_arg0, f4_local3, {
			id = f4_arg1.id:get(),
			selectedIndex = f4_local1
		} ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryPickUpNotify = function ( f5_arg0, f5_arg1 )
	local f5_local0 = f5_arg1:getModel() --[[ @ 0]]
	if f5_local0 then
		CoD.WZUtility.SendInventoryPickUpNotifyInternal( f5_arg0, f5_local0, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryPickUpStowedWeaponNotify = function ( f6_arg0, f6_arg1 )
	local f6_local0 = f6_arg1:getModel() --[[ @ 0]]
	if f6_local0 then
		CoD.WZUtility.SendInventoryPickUpNotifyInternal( f6_arg0, f6_local0, true ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryAttachmentPickUpNotify = function ( f7_arg0 )
	SendCustomClientScriptNotifyForAdjustedClient( f7_arg0, "attachment_pickup" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.LastPickUpFirstFrameNumber = -1 --[[ @ 0]]
CoD.WZUtility.SendInventoryPickUpFirstNotify = function ( f8_arg0, f8_arg1 )
	local f8_local0 = Engine[@"hash_4C60FB88F484616D"]() --[[ @ 0]]
	if f8_local0 == CoD.WZUtility.LastPickUpFirstFrameNumber then
		return 
	end
	CoD.WZUtility.LastPickUpFirstFrameNumber = f8_local0 --[[ @ 0]]
	local f8_local1 = f8_arg1:getModel() --[[ @ 0]]
	if f8_local1 == nil or f8_local1.id:get() == CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
		local f8_local2 = DataSources.MultiItemPickup.getModel( f8_arg0 ) --[[ @ 0]]
		local f8_local3 = f8_local2.count:get() --[[ @ 0]]
		for f8_local4 = 1 --[[ @ 0]], f8_local3, 1 do
			f8_local1 = Engine[@"GetModel"]( f8_local2, "item" .. f8_local4 - 1 ) --[[ @ 0]]
			local f8_local7 = CoD.SafeGetModelValue( f8_local1, "id" ) --[[ @ 0]]
			if f8_local7 ~= nil and f8_local7 ~= CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
				CoD.WZUtility.SendInventoryPickUpNotifyInternal( f8_arg0, f8_local1, false ) --[[ @ 0]]
			end
		end
	else
		CoD.WZUtility.SendInventoryPickUpNotifyInternal( f8_arg0, f8_local1, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.CloseMultiItemPickup = function ( f9_arg0 )
	if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f9_arg0, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) then
		Engine[@"SendMenuResponse"]( f9_arg0, @"hash_4ADD67F1A6BDEA11", @"hash_482D72060AD826CB", 0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.InitWZLoadingFractionUpdate = function ( f10_arg0, f10_arg1 )
	local f10_local0 = DataSources.LoadingScreenTeamInfo.getModel( f10_arg1 ) --[[ @ 0]]
	f10_local0 = f10_local0.wzLoadedFraction --[[ @ 0]]
	local f10_local1 = function ( f11_arg0, f11_arg1 )
		f10_local0:set( 0.7 * f11_arg0 + 0.3 * f11_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f10_local2 = DataSources.LoadingScreenTeamInfo.getModel( 0 ) --[[ @ 0]]
	f10_local2 = f10_local2.loadedFraction --[[ @ 0]]
	local f10_local3 = DataSources.HUDItems.getModel( f10_arg1 ) --[[ @ 0]]
	f10_local3 = f10_local3.streamerLoadFraction --[[ @ 0]]
	f10_arg0:subscribeToGlobalModel( f10_arg1, "LoadingScreenTeamInfo", "loadedFraction", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			f10_local1( f12_local0, f10_local3:get() ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f10_arg0:subscribeToGlobalModel( f10_arg1, "HUDItems", "streamerLoadFraction", function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			f10_local1( f10_local2:get(), f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryEquipNotify = function ( f14_arg0, f14_arg1, f14_arg2, f14_arg3 )
	CoD.WZUtility.SendInventoryNotify( f14_arg0, f14_arg1, "inventory_equip", f14_arg3 ) --[[ @ 0]]
	local f14_local0 = CoD.SafeGetModelValue( f14_arg1:getModel(), "availableAction" ) --[[ @ 0]]
	if f14_local0 == CoD.WZUtility.ItemAvailableAction.REPAIR or f14_local0 == CoD.WZUtility.ItemAvailableAction.CONSUME and CoD.SafeGetModelValue( f14_arg1:getModel(), "type" ) ~= "killstreak" then
		Engine[@"hash_27CD221DF1911DD1"]( f14_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end
	if f14_arg3 then
		CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f14_arg2, f14_arg0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryEquipOnWeaponNotify = function ( f15_arg0, f15_arg1, f15_arg2, f15_arg3, f15_arg4 )
	CoD.WZUtility.SendInventoryNotify( f15_arg0, f15_arg1, "inventory_equip", f15_arg3, f15_arg4 ) --[[ @ 0]]
	if f15_arg3 then
		CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f15_arg2, f15_arg0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDetachNotify = function ( f16_arg0, f16_arg1 )
	CoD.WZUtility.SendInventoryNotify( f16_arg0, f16_arg1, "inventory_detach" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.NotifyCannotEquipInventory = function ( f17_arg0, f17_arg1 )
	local f17_local0 = f17_arg1:getModel() --[[ @ 0]]
	if f17_local0.equipped:get() == 1 then
		f17_local0 = DataSources.WarzoneInventory.getModel( f17_arg0 ) --[[ @ 0]]
		f17_local0 = f17_local0.cannotEquipItem --[[ @ 0]]
		local f17_local1 = f17_local0 --[[ @ 0]]
		f17_local0 = f17_local0.set --[[ @ 0]]
		local f17_local2 = Engine[@"hash_4F9F1239CFD921FE"] --[[ @ 0]]
		local f17_local3 = @"hash_51EEFCC82368987C" --[[ @ 0]]
		local f17_local4 = f17_arg1:getModel() --[[ @ 0]]
		f17_local0( f17_local1, f17_local2( f17_local3, f17_local4.name:get() ) ) --[[ @ 0]]
	else
		f17_local0 = DataSources.WarzoneInventory.getModel( f17_arg0 ) --[[ @ 0]]
		f17_local0 = f17_local0.cannotEquipItem --[[ @ 0]]
		local f17_local1 = f17_local0 --[[ @ 0]]
		f17_local0 = f17_local0.set --[[ @ 0]]
		local f17_local2 = Engine[@"hash_4F9F1239CFD921FE"] --[[ @ 0]]
		local f17_local3 = @"hash_3E559771BCA0AB2C" --[[ @ 0]]
		local f17_local4 = f17_arg1:getModel() --[[ @ 0]]
		f17_local0( f17_local1, f17_local2( f17_local3, f17_local4.name:get() ) ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDropNotify = function ( f18_arg0, f18_arg1 )
	CoD.WZUtility.SendInventoryNotify( f18_arg0, f18_arg1, "inventory_drop" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryPartialDropNotify = function ( f19_arg0, f19_arg1 )
	local f19_local0 = DataSources.WarzoneSplitInventory.getModel( f19_arg0 ) --[[ @ 0]]
	CoD.WZUtility.SendInventoryNotify( f19_arg0, f19_arg1, "inventory_drop", f19_local0.current:get() ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDropCurrentWeaponNotify = function ( f20_arg0 )
	SendCustomClientScriptNotifyForAdjustedClient( f20_arg0, "inventory_drop_current_weapon" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify = function ( f21_arg0 )
	SendCustomClientScriptNotifyForAdjustedClient( f21_arg0, "inventory_drop_current_weapon_and_detach" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDropWeaponInSlotNotify = function ( f22_arg0, f22_arg1 )
	SendCustomClientScriptNotifyForAdjustedClient( f22_arg0, "inventory_drop_weapon_in_slot", {
		slotId = f22_arg1
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryDropWeaponInSlotAndDetachNotify = function ( f23_arg0, f23_arg1 )
	SendCustomClientScriptNotifyForAdjustedClient( f23_arg0, "inventory_drop_weapon_in_slot_and_detach", {
		slotId = f23_arg1
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryItemFocusNotify = function ( f24_arg0, f24_arg1 )
	CoD.WZUtility.SendInventoryNotify( f24_arg0, f24_arg1, "inventory_item_focus", nil, nil, true ) --[[ @ 0]]
	Engine[@"hash_27CD221DF1911DD1"]( f24_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryItemFocusNoneNotify = function ( f25_arg0 )
	SendCustomClientScriptNotifyForAdjustedClient( f25_arg0, "inventory_item_focus", {
		id = CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryConsumeNotify = function ( f26_arg0, f26_arg1 )
	CoD.WZUtility.SendInventoryNotify( f26_arg0, f26_arg1, "inventory_consume" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.AddPickupNotificationWatcher = function ( f27_arg0, f27_arg1, f27_arg2 )
	local f27_local0 = {} --[[ @ 0]]
	local f27_local1 = function ()
		f27_arg2:setText( f27_local0[1] ) --[[ @ 0]]
		f27_arg1:playClip( "PickUp" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f27_arg1:appendEventHandler( "clip_over", function ( f29_arg0, f29_arg1 )
		table.remove( f27_local0, 1 ) --[[ @ 0]]
		if #f27_local0 > 0 then
			f27_local1() --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f27_arg1:subscribeToGlobalModel( f27_arg0, "WarzoneInventory", "pickedUpItem", function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= @"hash_0" then
			table.insert( f27_local0, Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4E719EE2BA38EDE4", f30_local0 ) ) --[[ @ 0]]
			if #f27_local0 == 1 then
				f27_local1() --[[ @ 0]]
			end
		end
	end, true ) --[[ @ 0]]
	f27_arg1:subscribeToGlobalModel( f27_arg0, "WarzoneInventory", "droppedItem", function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= "" then
			table.insert( f27_local0, Engine[@"hash_4F9F1239CFD921FE"]( @"hash_23B502214D1BD811", f31_local0 ) ) --[[ @ 0]]
			if #f27_local0 == 1 then
				f27_local1() --[[ @ 0]]
			end
		end
	end, true ) --[[ @ 0]]
	f27_arg1:subscribeToGlobalModel( f27_arg0, "WarzoneInventory", "cannotEquipItem", function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= @"hash_0" then
			table.insert( f27_local0, f32_local0 ) --[[ @ 0]]
			if #f27_local0 == 1 then
				f27_local1() --[[ @ 0]]
			end
		end
	end, true ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetUpPassCustomFunctionToChildElement = function ( f33_arg0, f33_arg1, f33_arg2 )
	if f33_arg0 == f33_arg1 then
		error( "PassCustomFunctionToChildElement cannot be called on self" ) --[[ @ 0]]
	end
	f33_arg0[f33_arg2] = function ()
		if f33_arg1[f33_arg2] ~= nil then
			f33_arg1[f33_arg2]() --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetUpPlayClipOnCustomFunction = function ( f35_arg0, f35_arg1, f35_arg2, f35_arg3 )
	f35_arg0[f35_arg3] = function ()
		PlayClip( f35_arg0, f35_arg1, f35_arg2 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.HackUpdateListDataSourceAfterDelay = function ( f37_arg0, f37_arg1, f37_arg2, f37_arg3, f37_arg4 )
	f37_arg0:addElement( LUI.UITimer.newElementTimer( f37_arg4, true, function ( f38_arg0 )
		CoD.GridAndListUtility.UpdateDataSource( f37_arg0, f37_arg1, f37_arg2, f37_arg3 ) --[[ @ 0]]
	end ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SelectNextFreeItemSlot = function ( f39_arg0, f39_arg1 )
	local f39_local0 = f39_arg0.activeWidget --[[ @ 0]]
	if f39_local0 then
		local f39_local1 = f39_local0:getNextItem( true ) --[[ @ 0]]
		while f39_local1 and f39_local1 ~= f39_local0 do
			local f39_local2 = f39_local1:getModel() --[[ @ 0]]
			if f39_local2.id:get() == CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
				f39_local1:setAsActiveItem() --[[ @ 0]]
				break
			end
			f39_local1 = f39_local1:getNextItem( true ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.SplitterWidgetElement = nil --[[ @ 0]]
CoD.WZUtility.CurrentSplitItemElement = nil --[[ @ 0]]
CoD.WZUtility.SetPCSplitterWidgetElement = function ( f40_arg0, f40_arg1, f40_arg2, f40_arg3 )
	CoD.WZUtility.SplitterWidgetElement = f40_arg3 --[[ @ 0]]
	if not CoD.WZUtility.SplitterWidgetElement.__updateSafeAreaRegistered then
		f40_arg0:appendEventHandler( "update_safe_area", function ( f41_arg0, f41_arg1 )
			if CoD.WZUtility.SplitterWidgetElement and CoD.WZUtility.CurrentSplitItemElement then
				CoD.WZUtility.AlignPCSplitterWidgetOnElement( f40_arg2, CoD.WZUtility.CurrentSplitItemElement ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		CoD.WZUtility.SplitterWidgetElement.__updateSafeAreaRegistered = true --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.OpenPCSplitterWidgetForElement = function ( f42_arg0, f42_arg1, f42_arg2, f42_arg3 )
	local f42_local0 = CoD.WZUtility.SplitterWidgetElement --[[ @ 0]]
	CoD.WZUtility.CurrentSplitItemElement = f42_arg3 --[[ @ 0]]
	CoD.WZUtility.SetupSplitCount( f42_arg2, f42_arg3 ) --[[ @ 0]]
	MenuHidesFreeCursor( f42_arg1, f42_arg2 ) --[[ @ 0]]
	SetElementState( f42_arg0, f42_local0, f42_arg2, "Open" ) --[[ @ 0]]
	SetLoseFocusToSelf( f42_arg3, f42_arg2 ) --[[ @ 0]]
	SetFocusToSelf( f42_local0, f42_arg2 ) --[[ @ 0]]
	CoD.WZUtility.AlignPCSplitterWidgetOnElement( f42_arg2, f42_arg3, f42_local0 ) --[[ @ 0]]
	CoD.FreeCursorUtility.ForceCloseDetailedView( f42_arg1, f42_arg2 ) --[[ @ 0]]
	local f42_local1 = Engine[@"CurrentGameTime"]() --[[ @ 0]]
	f42_arg1:setInputOverrideElement( f42_local0, function ( f43_arg0, f43_arg1, f43_arg2, f43_arg3, f43_arg4 )
		if Engine[@"CurrentGameTime"]() == f42_local1 then
			return true
		elseif f43_arg3 == "ui_navup" or f43_arg4 == Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] or f43_arg3 == "ui_navright" or f43_arg4 == Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] then
			CoD.WZUtility.IncrementSplitCount( f43_arg2 ) --[[ @ 0]]
			return true
		elseif f43_arg3 == "ui_navdown" or f43_arg4 == Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] or f43_arg3 == "ui_navleft" or f43_arg4 == Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] then
			CoD.WZUtility.DecrementSplitCount( f43_arg2 ) --[[ @ 0]]
			return true
		elseif f43_arg3 == "ESCAPE" or f43_arg4 == Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] then
			CoD.WZUtility.ClosePCSplitterWidget( f42_local0, f43_arg1, f43_arg2 ) --[[ @ 0]]
			return true
		else
			CoD.WZUtility.ClosePCSplitterWidget( f42_local0, f43_arg1, f43_arg2 ) --[[ @ 0]]
			return false
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.AlignPCSplitterWidgetOnElement = function ( f44_arg0, f44_arg1 )
	local f44_local0 = CoD.WZUtility.SplitterWidgetElement --[[ @ 0]]
	local f44_local1, f44_local2, f44_local3, f44_local4 = f44_local0:getLocalRect() --[[ @ 0]]
	local f44_local5, f44_local6, f44_local7, f44_local8 = f44_local0:getGlobalLeftRightTopBottom() --[[ @ 0]]
	local f44_local9 = f44_local1 - f44_local5 --[[ @ 0]]
	local f44_local10 = f44_local2 - f44_local7 --[[ @ 0]]
	local f44_local11, f44_local12, f44_local13, f44_local14 = f44_arg1:getGlobalLeftRightTopBottom() --[[ @ 0]]
	local f44_local15 = f44_local6 - f44_local5 --[[ @ 0]]
	local f44_local16 = f44_local11 - (f44_local15 - f44_local12 - f44_local11) * 0.5 + f44_local9 --[[ @ 0]]
	local f44_local17 = f44_local16 + f44_local15 --[[ @ 0]]
	local f44_local18 = f44_local8 - f44_local7 --[[ @ 0]]
	local f44_local19 = f44_local13 + (f44_local14 - f44_local13) * 0.5 + f44_local10 --[[ @ 0]]
	local f44_local20 = f44_local19 + f44_local18 --[[ @ 0]]
	local f44_local21, f44_local22 = Engine[@"hash_61A28BE9919661FA"]( f44_arg0 ) --[[ @ 0]]
	local f44_local23 = f44_local22 - 60 --[[ @ 0]]
	if f44_local23 < f44_local20 then
		local f44_local24 = f44_local20 - f44_local23 --[[ @ 0]]
		f44_local19 = f44_local19 - f44_local24 --[[ @ 0]]
		f44_local20 = f44_local20 - f44_local24 --[[ @ 0]]
	end
	f44_local0:setLeftRight( 0, 0, f44_local16, f44_local17 ) --[[ @ 0]]
	f44_local0:setTopBottom( 0, 0, f44_local19, f44_local20 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.ApplyPCSplitterWidget = function ( f45_arg0, f45_arg1, f45_arg2 )
	CoD.WZUtility.SendInventoryPartialDropNotify( f45_arg2, CoD.WZUtility.CurrentSplitItemElement ) --[[ @ 0]]
	CoD.WZUtility.ClosePCSplitterWidget( f45_arg0, f45_arg1, f45_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.ClosePCSplitterWidget = function ( f46_arg0, f46_arg1, f46_arg2 )
	local f46_local0 = CoD.WZUtility.SplitterWidgetElement --[[ @ 0]]
	if not f46_local0 or f46_local0.currentState ~= "Open" then
		return 
	end
	local f46_local1 = CoD.WZUtility.CurrentSplitItemElement --[[ @ 0]]
	SetLoseFocusToSelf( f46_local0, f46_arg2 ) --[[ @ 0]]
	SetFocusToSelf( f46_local1, f46_arg2 ) --[[ @ 0]]
	SetElementState( f46_arg0, f46_local0, f46_arg2, "DefaultState" ) --[[ @ 0]]
	MenuUnhideFreeCursor( f46_arg1, f46_arg2 ) --[[ @ 0]]
	CoD.FreeCursorUtility.ToggleDetailedViewPC( f46_arg1, f46_arg2, true ) --[[ @ 0]]
	if f46_local1.gridInfoTable then
		CoD.WZUtility.HackUpdateListDataSourceAfterDelay( f46_local1.gridInfoTable.parentGrid, true, false, true, "500" ) --[[ @ 0]]
	end
	f46_arg1:setInputOverrideElement( nil ) --[[ @ 0]]
	CoD.WZUtility.CurrentSplitItemElement = nil --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetupSplitCount = function ( f47_arg0, f47_arg1 )
	local f47_local0 = DataSources.WarzoneSplitInventory.setupNewMax --[[ @ 0]]
	local f47_local1 = f47_arg0 --[[ @ 0]]
	local f47_local2 = f47_arg1:getModel() --[[ @ 0]]
	f47_local0( f47_local1, f47_local2.stackCount:get() or 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.IncrementSplitCount = function ( f48_arg0 )
	DataSources.WarzoneSplitInventory.increment( f48_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.DecrementSplitCount = function ( f49_arg0 )
	DataSources.WarzoneSplitInventory.decrement( f49_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetupQuickInventoryAutoClose = function ( f50_arg0, f50_arg1, f50_arg2 )
	local f50_local0 = Engine[@"GetModelForController"]( f50_arg1 ) --[[ @ 0]]
	f50_local0 = f50_local0["hudItems.inventory.open"] --[[ @ 0]]
	f50_arg0:subscribeToModel( f50_local0, function ( model )
		local f51_local0 = model:get() --[[ @ 0]]
		if f51_local0 and not f50_arg0.__quickEquipAutoCloseTimer then
			f50_arg0.__quickEquipAutoCloseTimer = LUI.UITimer.newElementTimer( f50_arg2, true, function ()
				f50_arg0.__quickEquipAutoCloseTimer:close() --[[ @ 0]]
				f50_arg0.__quickEquipAutoCloseTimer = nil --[[ @ 0]]
				CoD.WZUtility.CloseQuickAccessInventory( f50_arg0, f50_arg1 ) --[[ @ 0]]
			end ) --[[ @ 0]]
			f50_arg0:addElement( f50_arg0.__quickEquipAutoCloseTimer ) --[[ @ 0]]
		elseif not f51_local0 and f50_arg0.__quickEquipAutoCloseTimer then
			f50_arg0.__quickEquipAutoCloseTimer:close() --[[ @ 0]]
			f50_arg0.__quickEquipAutoCloseTimer = nil --[[ @ 0]]
		end
	end, false ) --[[ @ 0]]
	local f50_local1 = f50_arg0 --[[ @ 0]]
	local f50_local2 = f50_arg0.subscribeToModel --[[ @ 0]]
	local f50_local3 = Engine[@"GetModelForController"]( f50_arg1 ) --[[ @ 0]]
	f50_local2( f50_local1, f50_local3.ButtonBits[Enum[@"LUIButton"][@"hash_4C083113BC81F23F"]].progress, function ( f53_arg0 )
		if f50_local0:get() and f50_arg0.__quickEquipAutoCloseTimer then
			local f53_local0 = f53_arg0:get() --[[ @ 0]]
			if f53_local0 and f53_local0 > 0 then
				CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f50_arg0, f50_arg1 ) --[[ @ 0]]
			end
		end
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.ResetQuickInventoryAutoCloseTimer = function ( f54_arg0, f54_arg1 )
	if f54_arg0.__quickEquipAutoCloseTimer then
		f54_arg0.__quickEquipAutoCloseTimer:reset() --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.StartWarzone = function ( f55_arg0 )
	Engine[@"ExecNow"]( f55_arg0, "startwzmatch" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.IsPaintCansMaxed = function ( f56_arg0 )
	local f56_local0 = Engine[@"StorageGetBuffer"]( f56_arg0, Enum[@"StorageFileType"][@"hash_1AB0E693244221BC"] ) --[[ @ 0]]
	if f56_local0 and f56_local0.PlayerStatsList.ITEMS_PAINT_CANS_COLLECTED.StatValue:get() >= 150 then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsInventoryOpen = function ( f57_arg0 )
	return CoD.SafeGetModelValue( DataSources.WarzoneInventory.getModel( f57_arg0 ), "isOpen" )
end
 --[[ @ 0]]
CoD.WZUtility.IsQuickInventoryOpen = function ( f58_arg0 )
	return CoD.ModelUtility.IsModelValueTrue( f58_arg0, "hudItems.inventory.open" )
end
 --[[ @ 0]]
CoD.WZUtility.IsInLastStand = function ( f59_arg0, f59_arg1 )
	return CoD.ModelUtility.IsModelValueGreaterThan( f59_arg0, f59_arg1 .. ".progress", 0 ) or CoD.ModelUtility.IsModelValueEqualTo( f59_arg0, f59_arg1 .. ".beingRevived", 1 )
end
 --[[ @ 0]]
CoD.WZUtility.HasBackpack = function ( f60_arg0 )
	return CoD.SafeGetModelValue( DataSources.WarzoneInventory.getModel( f60_arg0 ), "count" ) == CoD.WZUtility.InventorySize.ITEM_WORLD_PLAYER_INVENTORY_SIZE_BACKPACK
end
 --[[ @ 0]]
CoD.WZUtility.InventoryFull = function ( f61_arg0 )
	local f61_local0 = DataSources.WarzoneInventory.getModel( f61_arg0 ) --[[ @ 0]]
	local f61_local1 = CoD.SafeGetModelValue( f61_local0, "count" ) --[[ @ 0]]
	local f61_local2 = CoD.SafeGetModelValue( f61_local0, "filledSlots" ) --[[ @ 0]]
	local f61_local3 = 0 --[[ @ 0]]
	if f61_local0.shard0 and f61_local0.shard0.stackCount then
		local f61_local4 = f61_local0.shard0.stackCount:get() --[[ @ 0]]
		if f61_local4 and f61_local4 > 0 then
			f61_local3 = 1 --[[ @ 0]]
		end
	end
	return f61_local1 <= f61_local2 - f61_local3
end
 --[[ @ 0]]
CoD.WZUtility.IsActivePickupItem = function ( f62_arg0, f62_arg1 )
	local f62_local0 = DataSources.HUDItems.getModel( f62_arg0 ) --[[ @ 0]]
	if f62_local0.showPickupHint:get() then
		f62_local0 = DataSources.HUDItems.getModel( f62_arg0 ) --[[ @ 0]]
		f62_local0 = f62_local0.weapon3dHintState:get() or 0 --[[ @ 0]]
		if CoD.BitUtility.IsBitSet( f62_local0, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) or CoD.BitUtility.IsBitSet( f62_local0, CoD.HUDUtility.Weapon3DHintStateFlags.IGNORES_INVENTORY ) or CoD.BitUtility.IsBitSet( f62_local0, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) then
			return false
		end
		local f62_local1 = DataSources.HUDItems.getModel( f62_arg0 ) --[[ @ 0]]
		f62_local1 = f62_local1.weapon3dForcedHintItem:get() or -1 --[[ @ 0]]
		if f62_local1 == -1 then
			local f62_local2 = DataSources.WarzoneInventory.getModel( f62_arg0 ) --[[ @ 0]]
			f62_local1 = f62_local2.firstFreeSlot:get() or -1 --[[ @ 0]]
			if f62_local1 == -1 then
				f62_local2 = DataSources.WarzoneInventory.getModel( f62_arg0 ) --[[ @ 0]]
				f62_local1 = f62_local2.selectedIndex:get() or 0 --[[ @ 0]]
			end
		end
		local f62_local2 = DataSources.WarzoneInventory.getModel( f62_arg0 ) --[[ @ 0]]
		f62_local2 = f62_local2["item" .. f62_local1] --[[ @ 0]]
		if f62_local2 and f62_local2 == f62_arg1:getModel() then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.ShouldHideTeamWidget = function ( f63_arg0 )
	local f63_local0 --[[ @ 0]]
	if Engine[@"IsVisibilityBitSet"]( f63_arg0, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) then
		f63_local0 = Engine[@"IsVisibilityBitSet"]( f63_arg0, Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"] ) --[[ @ 0]]
		if not f63_local0 then
			f63_local0 = Engine[@"IsVisibilityBitSet"]( f63_arg0, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) --[[ @ 0]]
			if not f63_local0 then
				f63_local0 = Engine[@"IsVisibilityBitSet"]( f63_arg0, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) --[[ @ 0]]
			end
		end
	else
		f63_local0 = true --[[ @ 0]]
	end
	return f63_local0
end
 --[[ @ 0]]
CoD.WZUtility.IsCurrentCharacterDefault = function ( f64_arg0 )
	local f64_local0 = Engine[@"hash_70B678B832BC9DC0"]( Engine[@"CurrentSessionMode"](), CoD.PlayerRoleUtility.GetSelectedCharacterIndex( f64_arg0 ) ) --[[ @ 0]]
	if f64_local0[@"hash_7C9366DE09ED7379"] == 1 then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.ShowDefaultCharacterInfo = function ( f65_arg0 )
	local f65_local0 = Engine[@"GetModelForController"]( f65_arg0 ) --[[ @ 0]]
	local f65_local1 = f65_local0.PositionDraft --[[ @ 0]]
	if f65_local1 then
		f65_local1 = f65_local0.PositionDraft.focusedCharacterIndex --[[ @ 0]]
	end
	local f65_local2 = f65_local1 and f65_local1:get() --[[ @ 0]]
	if f65_local2 and f65_local2 ~= 0 then
		local f65_local3 = DataSources.WZDefaultCharacterInfo.getModel( f65_arg0 ) --[[ @ 0]]
		f65_local3 = f65_local3.characterIndex --[[ @ 0]]
		return f65_local2 == (f65_local3 and f65_local3:get())
	else
		return CoD.WZUtility.IsCurrentCharacterDefault( f65_arg0 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.ShouldHidePlatoonReviveNumber = function ( f66_arg0 )
	local f66_local0 = DataSources.HUDItems.getModel( f66_arg0 ) --[[ @ 0]]
	f66_local0 = f66_local0.lastStand.revivingClientNum:get() --[[ @ 0]]
	return CoD.WZUtility.IsOnFriendlyPlatoon( f66_arg0, f66_local0 ) and not CoD.WZUtility.IsOnControllersTeam( f66_arg0, f66_local0 )
end
 --[[ @ 0]]
CoD.WZUtility.ShouldHideCharacterPersonalizationText = function ( f67_arg0, f67_arg1 )
	if IsGameTrial() then
		return true
	elseif CoD.SafeGetModelValue( f67_arg0:getModel(), "hasCustomization" ) then
		return false
	else
		return true
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsOnControllersTeam = function ( f68_arg0, f68_arg1 )
	local f68_local0 = Engine[@"GetClientNum"]( f68_arg0 ) --[[ @ 0]]
	local f68_local1 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f68_arg1 ), "team" ) --[[ @ 0]]
	local f68_local2 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f68_local0 ), "team" ) --[[ @ 0]]
	return f68_local2 and f68_local1 and f68_local1 == f68_local2
end
 --[[ @ 0]]
CoD.WZUtility.IsPerClientOnFriendlyPlatoonOnly = function ( f69_arg0, f69_arg1 )
	local f69_local0 = Engine[@"GetModelForController"]( f69_arg1 ) --[[ @ 0]]
	local f69_local1 = CoD.SafeGetModelValue( f69_arg0:getModel(), "platoonNumber" ) --[[ @ 0]]
	local f69_local2 = CoD.SafeGetModelValue( f69_local0.clientModel:get(), "platoonNumber" ) --[[ @ 0]]
	local f69_local3 = CoD.SafeGetModelValue( f69_arg0:getModel(), "team" ) --[[ @ 0]]
	local f69_local4 = DataSources.Factions.getModel( f69_arg1 ) --[[ @ 0]]
	local f69_local5 --[[ @ 0]]
	if f69_local1 ~= f69_local2 or f69_local3 == f69_local4.actualTeam:get() then
		f69_local5 = false --[[ @ 0]]
	else
		f69_local5 = true --[[ @ 0]]
	end
	return f69_local5
end
 --[[ @ 0]]
CoD.WZUtility.IsOnFriendlyPlatoon = function ( f70_arg0, f70_arg1 )
	local f70_local0 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f70_arg1 ), "platoonNumber" ) --[[ @ 0]]
	if f70_local0 == nil then
		return false
	end
	local f70_local1 = Engine[@"GetModelForController"]( f70_arg0 ) --[[ @ 0]]
	local f70_local2 --[[ @ 0]]
	if IsGametypeSettingsValue( "platoonCount", 0 ) or f70_local0 ~= CoD.SafeGetModelValue( f70_local1.clientModel:get(), "platoonNumber" ) then
		f70_local2 = false --[[ @ 0]]
	else
		f70_local2 = true --[[ @ 0]]
	end
	return f70_local2
end
 --[[ @ 0]]
CoD.WZUtility.TeammateIndexClientNum = function ( f71_arg0, f71_arg1 )
	local f71_local0 = f71_arg1 --[[ @ 0]]
	if CoD.WZUtility.IsOnControllersTeam( f71_arg0, f71_local0 ) then
		local f71_local1 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f71_local0 ), "teammateIndex" ) --[[ @ 0]]
		if not f71_local1 then
			return 0
		else
			return f71_local1
		end
	else
		return -1
	end
end
 --[[ @ 0]]
CoD.WZUtility.TeamPlayerColorNameForTeammateIndex = function ( f72_arg0, f72_arg1 )
	return CoD.ColorUtility.GetColorBlindColorNameForPlayer( f72_arg0, CoD.WZUtility.TeamPlayerColor[f72_arg1 % #CoD.WZUtility.TeamPlayerColor + 1] or "White" )
end
 --[[ @ 0]]
CoD.WZUtility.TeamPlayerColorNameForClientNum = function ( f73_arg0, f73_arg1 )
	local f73_local0 = f73_arg1 --[[ @ 0]]
	local f73_local1 = CoD.WZUtility.TeammateIndexClientNum( f73_arg0, f73_local0 ) --[[ @ 0]]
	if f73_local1 ~= -1 then
		return CoD.ColorUtility.GetColorBlindColorNameForPlayer( f73_arg0, CoD.WZUtility.TeamPlayerColor[f73_local1 % #CoD.WZUtility.TeamPlayerColor + 1] or "White" )
	elseif CoD.WZUtility.IsOnFriendlyPlatoon( f73_arg0, f73_local0 ) then
		return CoD.ColorUtility.GetColorBlindColorNameForPlayer( f73_arg0, "White" )
	else
		return CoD.ColorUtility.GetColorBlindColorNameForPlayer( f73_arg0, "EnemyOrange" )
	end
end
 --[[ @ 0]]
CoD.WZUtility.ShownPlayerIndexForClientNum = function ( f74_arg0, f74_arg1 )
	local f74_local0 = CoD.WZUtility.TeammateIndexClientNum( f74_arg0, f74_arg1 ) --[[ @ 0]]
	if f74_local0 == -1 then
		return ""
	else
		return "" .. f74_local0 + 1
	end
end
 --[[ @ 0]]
CoD.WZUtility.TeamPlayerColorForClientNum = function ( f75_arg0, f75_arg1 )
	return CoD.ColorUtility.ConvertTableToRGB( ColorSet[CoD.WZUtility.TeamPlayerColorNameForClientNum( f75_arg0, f75_arg1 )] )
end
 --[[ @ 0]]
CoD.WZUtility.TeamPlayerColorForTeammateIndex = function ( f76_arg0, f76_arg1 )
	return CoD.ColorUtility.ConvertTableToRGB( ColorSet[CoD.WZUtility.TeamPlayerColorNameForTeammateIndex( f76_arg0, f76_arg1 )] )
end
 --[[ @ 0]]
CoD.WZUtility.GetTeamPlayerStatusImage = function ( f77_arg0 )
	return CoD.WZUtility.PlayerStatusIcon[tonumber( f77_arg0 )]
end
 --[[ @ 0]]
CoD.WZUtility.GetInventoryEquipText = function ( f78_arg0 )
	if f78_arg0 == "killstreak" then
		return @"hash_A56BF6A96B02984"
	else
		return @"hash_738B775D97E72F0C"
	end
end
 --[[ @ 0]]
CoD.WZUtility.PlayerStatusClientScriptNotify = function ( f79_arg0, f79_arg1, f79_arg2 )
	local f79_local0 = Engine[@"GetLocalClientNum"]( f79_arg0 ) --[[ @ 0]]
	local f79_local1 = f79_arg1:getModel() --[[ @ 0]]
	f79_local1 = f79_local1.clientNum:get() --[[ @ 0]]
	if f79_local1 ~= nil then
		Engine[@"SendClientScriptNotify"]( f79_arg0, "teammate_state_change", {
			clientNum = f79_local1,
			localClientNum = f79_local0,
			state = CoD.WZUtility.PlayerStatusClientScriptState[f79_arg2:get()] or @"hash_0"
		} ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.RarityToColorTable = {
	None = ColorSet.T8__SLATE,
	Common = ColorSet.T8__SLATE,
	Rare = ColorSet.BlackMarketRare,
	Epic = ColorSet.BlackMarketEpic,
	Legendary = ColorSet.BlackMarketLegendary
} --[[ @ 0]]
CoD.WZUtility.WarzoneRarityToColor = function ( f80_arg0 )
	local f80_local0 = CoD.WZUtility.RarityToColorTable[f80_arg0] --[[ @ 0]]
	if not f80_local0 then
		f80_local0 = CoD.WZUtility.RarityToColorTable.None --[[ @ 0]]
	end
	return f80_local0.r, f80_local0.g, f80_local0.b
end
 --[[ @ 0]]
CoD.WZUtility.TowerIndexToName = function ( f81_arg0 )
	local f81_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f81_local0 = f81_local0.hudItems.deathZones --[[ @ 0]]
	local f81_local1 = f81_local0 and f81_local0[f81_arg0] --[[ @ 0]]
	if f81_local1 then
		local f81_local2 = f81_local1.displayName --[[ @ 0]]
		local f81_local3 = f81_local1.displayName:get() --[[ @ 0]]
	end
	return f81_local2 and f81_local3 or @"hash_0"
end
 --[[ @ 0]]
CoD.WZUtility.GetMultiItemReplaceText = function ( f82_arg0, f82_arg1 )
	local f82_local0 = DataSources.MultiItemPickup.getModel( f82_arg0 ) --[[ @ 0]]
	f82_local0 = f82_local0.currentSelection:get() --[[ @ 0]]
	local f82_local1 = f82_local0 and f82_local0.claimsInventorySlot:get() == 1 --[[ @ 0]]
	local f82_local2 = DataSources.WarzoneInventory.getModel( f82_arg0 ) --[[ @ 0]]
	if f82_arg1 == @"hash_0" or not f82_local1 or f82_local2.firstFreeSlot:get() ~= -1 then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1C46907584E75127" )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2FBCE5B447E66701", f82_arg1 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmorFlipbookFrame = function ( f83_arg0, f83_arg1, f83_arg2, f83_arg3, f83_arg4, f83_arg5 )
	local f83_local0 = f83_arg0 --[[ @ 0]]
	local f83_local1 = f83_arg0.armorMax --[[ @ 0]]
	if f83_local1 then
		f83_local1 = f83_local0 and f83_arg0.armorMax:get() --[[ @ 0]]
	end
	if f83_local1 and f83_local1 > 0 then
		return math.floor( CoD.WZUtility.ArmorFlipbookFrames * (1 - f83_arg2 / f83_local1) ), 0, 0, 0
	else
		return 0, 0, 0, 0
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmorFlipbookIconForArmorTier = function ( f84_arg0 )
	local f84_local0 = f84_arg0 --[[ @ 0]]
	if not CoD.WZUtility.ArmorTierToFlipbookImage then
		CoD.WZUtility.ArmorTierToFlipbookImage = {} --[[ @ 0]]
		for f84_local4, f84_local5 in ipairs( CoD.WZUtility.ArmorAssetList ) --[[ @ 0]] do
			local f84_local6 = Engine[@"hash_2E00B2F29271C60B"]( f84_local5 ) --[[ @ 0]]
			if f84_local6 and f84_local6[@"hash_6F1FF9105E9136C8"] ~= nil then
				CoD.WZUtility.ArmorTierToFlipbookImage[f84_local6[@"hash_6F1FF9105E9136C8"]] = f84_local6[@"hash_5BFF4CC56C2092F0"] --[[ @ 0]]
			end
		end
	end
	return CoD.WZUtility.ArmorTierToFlipbookImage[f84_local0] or @"blacktransparent"
end
 --[[ @ 0]]
CoD.WZUtility.GetArmorShardPips = function ( f85_arg0, f85_arg1, f85_arg2, f85_arg3 )
	local f85_local0 = f85_arg0 --[[ @ 0]]
	if not CoD.WZUtility.ArmorTierToShardCount then
		CoD.WZUtility.ArmorTierToShardCount = {} --[[ @ 0]]
		for f85_local4, f85_local5 in ipairs( CoD.WZUtility.ArmorAssetList ) --[[ @ 0]] do
			local f85_local6 = Engine[@"hash_2E00B2F29271C60B"]( f85_local5 ) --[[ @ 0]]
			if f85_local6 and f85_local6[@"hash_6F1FF9105E9136C8"] ~= nil then
				CoD.WZUtility.ArmorTierToShardCount[f85_local6[@"hash_6F1FF9105E9136C8"]] = f85_local6[@"hash_145A32413B3B9AFD"] --[[ @ 0]]
			end
		end
	end
	return math.max( CoD.WZUtility.ArmorTierToShardCount[f85_local0] or 0, 1 ), 1, 0, 0
end
 --[[ @ 0]]
CoD.WZUtility.AdjustDistanceFromDeathCircle = function ( f86_arg0, f86_arg1, f86_arg2 )
	local f86_local0 = f86_arg2 --[[ @ 0]]
	if f86_arg2 == 1 then
		return f86_arg1
	else
		return f86_arg2 * f86_arg0
	end
end
 --[[ @ 0]]
CoD.WZUtility.PrependUpsellIconIfNeed = function ( f87_arg0, f87_arg1 )
	if f87_arg0.purchasable and f87_arg0.purchasable:get() then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_31001FF6B558E68C", Engine[@"hash_4F9F1239CFD921FE"]( f87_arg1 ) )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( f87_arg1 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.TrialSpecificTierSkip = function ( f88_arg0 )
	if IsGameTrial() then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_64E334203F8258AC" )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( f88_arg0 )
	end
end
 --[[ @ 0]]
DataSources.PlayerListWZ = {
	prepare = function ( f89_arg0, f89_arg1, f89_arg2 )
		f89_arg1.clients = {} --[[ @ 0]]
		local f89_local0 = Engine[@"GetModelForController"]( f89_arg0 ) --[[ @ 0]]
		local f89_local1 = Engine[@"GetPredictedClientNum"]( f89_arg0 ) --[[ @ 0]]
		local f89_local2 = Engine[@"GetTeamID"]( f89_arg0, f89_local1 ) --[[ @ 0]]
		local f89_local3 = Engine[@"hash_F9C4C8A66F9CB02"]( f89_arg0 ) --[[ @ 0]]
		local f89_local4 = 0 --[[ @ 0]]
		for f89_local10, f89_local11 in pairs( f89_local3 ) --[[ @ 0]] do
			if f89_local2 == f89_local11 then
				local f89_local8 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f89_local10 ), "teammateIndex" ) --[[ @ 0]]
				if f89_local1 ~= Engine[@"GetClientNum"]( f89_arg0 ) then
					if not f89_local8 then
						f89_local8 = f89_local4 --[[ @ 0]]
						local f89_local9 = Engine[@"hash_E4D2F32833CFA6C"]( f89_local10 ) --[[ @ 0]]
						f89_local9.teammateIndex:set( f89_local8 ) --[[ @ 0]]
					end
					f89_local4 = f89_local8 + 1 --[[ @ 0]]
				end
				if f89_local8 ~= nil then
					table.insert( f89_arg1.clients, f89_local10 ) --[[ @ 0]]
				end
			end
		end
		table.sort( f89_arg1.clients ) --[[ @ 0]]
		for f89_local10, f89_local11 in ipairs( f89_arg1.clients ) --[[ @ 0]] do
			local f89_local8 = Engine[@"hash_E4D2F32833CFA6C"]( f89_local11 ) --[[ @ 0]]
			local f89_local9 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f89_local11 ), "teammateIndex" ) --[[ @ 0]]
			if not f89_local8.idNumber2 then
				local f89_local12 = f89_local8:create( "idNumber2" ) --[[ @ 0]]
				f89_local12:set( f89_local9 ) --[[ @ 0]]
				f89_local12 = f89_local8:create( "inGamePlayerStatus" ) --[[ @ 0]]
				f89_local12:set( Enum[@"hash_14A07561A78E340B"][@"hash_358F9A363F8FBB07"] ) --[[ @ 0]]
				f89_local12 = f89_local8:create( "isMarkerIconPlaced" ) --[[ @ 0]]
				f89_local12:set( false ) --[[ @ 0]]
				f89_local12 = f89_local8:create( "isSpectreRisingTarget" ) --[[ @ 0]]
				f89_local12:set( false ) --[[ @ 0]]
			end
		end
		if not f89_arg1.clientChangedTeamSubscription then
			f89_local6 = f89_arg1 --[[ @ 0]]
			f89_local5 = f89_arg1.subscribeToModel --[[ @ 0]]
			f89_local7 = Engine[@"GetModelForController"]( f89_arg0 ) --[[ @ 0]]
			f89_arg1.clientChangedTeamSubscription = f89_local5( f89_local6, f89_local7:create( "Clients.clientChangedTeam" ), function ()
				f89_arg1:updateDataSource( true, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f89_local6 = f89_arg1 --[[ @ 0]]
			f89_local5 = f89_arg1.subscribeToModel --[[ @ 0]]
			f89_local7 = Engine[@"GetModelForController"]( f89_arg0 ) --[[ @ 0]]
			f89_local5( f89_local6, f89_local7.deadSpectator.playerIndex, function ()
				f89_arg1:updateDataSource( true, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
	end,
	getCount = function ( f92_arg0 )
		return #f92_arg0.clients
	end,
	getItem = function ( f93_arg0, f93_arg1, f93_arg2 )
		if f93_arg1.clients[f93_arg2] ~= nil then
			return Engine[@"hash_E4D2F32833CFA6C"]( f93_arg1.clients[f93_arg2] )
		else
			return Engine[@"hash_E4D2F32833CFA6C"]( -1 )
		end
	end
} --[[ @ 0]]
DataSources.WZTeamScoreboard = {
	prepare = function ( f94_arg0, f94_arg1, f94_arg2 )
		f94_arg1.clients = {} --[[ @ 0]]
		local f94_local0 = Engine[@"GetModelForController"]( f94_arg0 ) --[[ @ 0]]
		local f94_local1 = Engine[@"GetClientNum"]( f94_arg0 ) --[[ @ 0]]
		local f94_local2 = Engine[@"GetTeamID"]( f94_arg0, f94_local1 ) --[[ @ 0]]
		local f94_local3 = Engine[@"hash_F9C4C8A66F9CB02"]( f94_arg0 ) --[[ @ 0]]
		local f94_local4 = 0 --[[ @ 0]]
		for f94_local10, f94_local11 in pairs( f94_local3 ) --[[ @ 0]] do
			if f94_local2 == f94_local11 then
				local f94_local8 = CoD.SafeGetModelValue( Engine[@"hash_E4D2F32833CFA6C"]( f94_local10 ), "teammateIndex" ) --[[ @ 0]]
				if f94_local1 ~= Engine[@"GetClientNum"]( f94_arg0 ) then
					if not f94_local8 then
						f94_local8 = f94_local4 --[[ @ 0]]
						local f94_local9 = Engine[@"hash_E4D2F32833CFA6C"]( f94_local10 ) --[[ @ 0]]
						f94_local9.teammateIndex:set( f94_local8 ) --[[ @ 0]]
					end
					f94_local4 = f94_local8 + 1 --[[ @ 0]]
				end
				if f94_local8 ~= nil then
					table.insert( f94_arg1.clients, f94_local10 ) --[[ @ 0]]
				end
			end
		end
		table.sort( f94_arg1.clients ) --[[ @ 0]]
		if not f94_arg1.clientChangedTeamSubscription then
			f94_local6 = f94_arg1 --[[ @ 0]]
			f94_local5 = f94_arg1.subscribeToModel --[[ @ 0]]
			f94_local7 = Engine[@"GetModelForController"]( f94_arg0 ) --[[ @ 0]]
			f94_arg1.clientChangedTeamSubscription = f94_local5( f94_local6, f94_local7:create( "Clients.clientChangedTeam" ), function ()
				f94_arg1:updateDataSource( true, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
	end,
	getCount = function ( f96_arg0 )
		return #f96_arg0.clients
	end,
	getItem = function ( f97_arg0, f97_arg1, f97_arg2 )
		if f97_arg1.clients[f97_arg2] ~= nil then
			return Engine[@"hash_E4D2F32833CFA6C"]( f97_arg1.clients[f97_arg2] )
		else
			return Engine[@"hash_E4D2F32833CFA6C"]( -1 )
		end
	end
} --[[ @ 0]]
DataSources.NearbyFloorStates = {
	prepare = function ( f98_arg0, f98_arg1, f98_arg2 )
		local f98_local0 = Engine[@"GetModelForController"]( f98_arg0 ) --[[ @ 0]]
		f98_local0 = f98_local0.hudItems.deathZones --[[ @ 0]]
		if not f98_arg1._hasSubscriptions then
			f98_arg1._hasSubscriptions = true --[[ @ 0]]
			f98_arg1:subscribeToModel( f98_local0.towerIndex, function ()
				f98_arg1:updateDataSource( true, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f98_arg1:subscribeToModel( f98_local0.floorIndex, function ()
				f98_arg1:updateDataSource( true, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
		local f98_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f98_local1 = f98_local1.hudItems:create( "deathZones" ) --[[ @ 0]]
		f98_arg1.fakeZoneModel = f98_local1:create( "-1" ) --[[ @ 0]]
		local f98_local2 = f98_arg1.fakeZoneModel:create( "state" ) --[[ @ 0]]
		f98_local2:set( CoD.WZUtility.DeathZoneState.ZONE_HIDDEN ) --[[ @ 0]]
		f98_local2 = f98_arg1.fakeZoneModel:create( "floorIndex" ) --[[ @ 0]]
		f98_local2:set( -1 ) --[[ @ 0]]
		f98_arg1._floorsAbove = math.floor( (f98_arg1.vCount - 1) / 2 ) --[[ @ 0]]
		f98_arg1._floorsBelow = f98_arg1.vCount - 1 - f98_arg1._floorsAbove --[[ @ 0]]
		f98_arg1._currentTower = f98_local0.towerIndex:get() --[[ @ 0]]
		f98_arg1._currentFloor = f98_local0.floorIndex:get() --[[ @ 0]]
		f98_local2 = f98_local1[f98_arg1._currentTower] --[[ @ 0]]
		if f98_local2 and f98_arg1._updateFloorsAboveAndBelow then
			local f98_local3 = f98_local2.numFloors:get() --[[ @ 0]]
			local f98_local4 = f98_local0:create( "floorsAbove" ) --[[ @ 0]]
			f98_local4:set( math.max( 0, f98_arg1._currentFloor - f98_arg1._floorsAbove - 1 ) ) --[[ @ 0]]
			f98_local4 = f98_local0:create( "floorsBelow" ) --[[ @ 0]]
			f98_local4:set( math.max( 0, f98_local3 - f98_arg1._currentFloor - f98_arg1._floorsBelow ) ) --[[ @ 0]]
		end
	end,
	getCount = function ( f101_arg0 )
		return f101_arg0.vCount
	end,
	getItem = function ( f102_arg0, f102_arg1, f102_arg2 )
		local f102_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f102_local0 = f102_local0.hudItems.deathZones --[[ @ 0]]
		local f102_local1 = Engine[@"GetModelForController"]( f102_arg0 ) --[[ @ 0]]
		f102_local1 = f102_local1.hudItems.deathZones --[[ @ 0]]
		if f102_arg1._currentTower ~= 0 and f102_arg1._currentFloor ~= 0 then
			local f102_local2 = f102_arg1._currentFloor + f102_arg2 - f102_arg1._floorsAbove - 1 --[[ @ 0]]
			local f102_local3 = f102_local0[f102_arg1._currentTower] --[[ @ 0]]
			if f102_local3 and (f102_local3.linkAdjacentFloors:get() == 1 or f102_arg2 == f102_arg1._floorsAbove + 1) and f102_local3[f102_local2] then
				return f102_local3[f102_local2]
			end
		end
		return f102_arg1.fakeZoneModel
	end
} --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "FloorSelection", "hudItems.floorSelection", function ( f103_arg0, f103_arg1 )
	if not f103_arg0.count then
		f103_arg0:create( "open" ) --[[ @ 0]]
		local f103_local0 = f103_arg0:create( "count" ) --[[ @ 0]]
		f103_local0:set( 0 ) --[[ @ 0]]
	end
end, false, {
	prepare = function ( f104_arg0, f104_arg1, f104_arg2 )
		if not f104_arg1._rootModel then
			f104_arg1._rootModel = DataSources.FloorSelection.getModel( f104_arg0 ) --[[ @ 0]]
			f104_arg1:subscribeToModel( f104_arg1._rootModel.count, function ()
				f104_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
	end,
	getCount = function ( f106_arg0 )
		return f106_arg0._rootModel.count:get()
	end,
	getItem = function ( f107_arg0, f107_arg1, f107_arg2 )
		local f107_local0 = f107_arg1._rootModel["item" .. f107_arg2 - 1] --[[ @ 0]]
		if f107_local0 ~= nil and f107_arg2 == 1 and f107_local0.name and f107_local0.name:get() == @"hash_0" then
			f107_local0.name:set( @"hash_7E6F23365C1E074F" ) --[[ @ 0]]
		end
		return f107_local0
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "Elevator", "hudItems.elevator", function ( f108_arg0, f108_arg1 )
	if not f108_arg0.count then
		local f108_local0 = f108_arg0:create( "count" ) --[[ @ 0]]
		f108_local0:set( 0 ) --[[ @ 0]]
	end
end, false, {
	prepare = function ( f109_arg0, f109_arg1, f109_arg2 )
		if not f109_arg1._rootModel then
			f109_arg1._rootModel = DataSources.Elevator.getModel( f109_arg0 ) --[[ @ 0]]
			f109_arg1:subscribeToModel( f109_arg1._rootModel.count, function ()
				f109_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
	end,
	getCount = function ( f111_arg0 )
		return f111_arg0._rootModel.count:get()
	end,
	getItem = function ( f112_arg0, f112_arg1, f112_arg2 )
		return f112_arg1._rootModel["item" .. f112_arg2 - 1]
	end
} ) --[[ @ 0]]
CoD.WZUtility.AmmoTypesToDisplayNames = {} --[[ @ 0]]
DataSources.WZAmmoPool = {
	prepare = function ( f113_arg0, f113_arg1, f113_arg2 )
		f113_arg1.ammoTypes = {} --[[ @ 0]]
		local f113_local0 = Engine[@"GetModelForController"]( f113_arg0 ) --[[ @ 0]]
		local f113_local1 = f113_local0:create( "hudItems.inventory.pickedUpAmmoTypes" ) --[[ @ 0]]
		if not f113_local1._empty then
			local f113_local2 = f113_local1:create( "_empty" ) --[[ @ 0]]
			local f113_local3 = f113_local2:create( "rarity" ) --[[ @ 0]]
			f113_local3:set( "None" ) --[[ @ 0]]
			f113_local3 = f113_local2:create( "id" ) --[[ @ 0]]
			f113_local3:set( CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) --[[ @ 0]]
			f113_local3 = f113_local2:create( "name" ) --[[ @ 0]]
			f113_local3:set( @"hash_0" ) --[[ @ 0]]
			f113_local3 = f113_local2:create( "stackCount" ) --[[ @ 0]]
			f113_local3:set( 0 ) --[[ @ 0]]
			f113_local3 = f113_local2:create( "icon" ) --[[ @ 0]]
			f113_local3:set( @"blacktransparent" ) --[[ @ 0]]
		end
		if (CoD.SafeGetModelValue( f113_local1, "count" ) or 0) > 0 then
			local f113_local2 = Engine[@"hash_5DABA94B203D6A38"]( f113_arg0 ) --[[ @ 0]]
			for f113_local3 = 1 --[[ @ 0]], f113_local1.count:get(), 1 do
				local f113_local6 = f113_local1[f113_local3] --[[ @ 0]]
				local f113_local7 = f113_local6:create( "rarity" ) --[[ @ 0]]
				f113_local7:set( "None" ) --[[ @ 0]]
				f113_local7 = f113_local2[f113_local6.assetName:get()] --[[ @ 0]]
				if f113_local7 ~= nil then
					local f113_local8 = f113_local6:create( "stackCount" ) --[[ @ 0]]
					f113_local8:set( f113_local7[@"count"] ) --[[ @ 0]]
				else
					local f113_local8 = f113_local6:create( "stackCount" ) --[[ @ 0]]
					f113_local8:set( 0 ) --[[ @ 0]]
				end
				table.insert( f113_arg1.ammoTypes, f113_local6 ) --[[ @ 0]]
			end
		end
		while #f113_arg1.ammoTypes < f113_arg1.hCount do
			table.insert( f113_arg1.ammoTypes, f113_local1._empty ) --[[ @ 0]]
		end
		DataSourceHelpers.SubscribeOnceToUpdateDataSourceSkipFocus( f113_arg1, f113_local1, "_pickedUpAmmoTypeCountSubscription" ) --[[ @ 0]]
		local f113_local2 = DataSourceHelpers.SubscribeOnceToUpdateDataSourceSkipFocus --[[ @ 0]]
		local f113_local3 = f113_arg1 --[[ @ 0]]
		local f113_local4 = DataSources.CurrentWeapon.getModel( f113_arg0 ) --[[ @ 0]]
		f113_local2( f113_local3, f113_local4.weaponReloadState, "_reloadStateSubscription" ) --[[ @ 0]]
	end,
	getCount = function ( f114_arg0 )
		return f114_arg0.ammoTypes and #f114_arg0.ammoTypes or 0
	end,
	getItem = function ( f115_arg0, f115_arg1, f115_arg2 )
		return f115_arg1.ammoTypes[f115_arg2]
	end
} --[[ @ 0]]
DataSources.WZArmorItem = {
	prepare = function ( f116_arg0, f116_arg1, f116_arg2 )
		f116_arg1.armorItem = {} --[[ @ 0]]
		local f116_local0 = Engine[@"GetModelForController"]( f116_arg0 ) --[[ @ 0]]
		local f116_local1 = f116_local0:create( "hudItems.inventory" ) --[[ @ 0]]
		local f116_local2 = f116_local1:create( "filledSlots" ) --[[ @ 0]]
		local f116_local3 = f116_local1:create( "hasArmor" ) --[[ @ 0]]
		f116_local3:set( false ) --[[ @ 0]]
		if not f116_arg1._hasSubscription then
			f116_arg1._hasSubscription = true --[[ @ 0]]
			f116_arg1:subscribeToModel( f116_local2, function ()
				f116_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
		if f116_local2:get() > 0 then
			for f116_local3 = 1 --[[ @ 0]], f116_local1.count:get(), 1 do
				local f116_local6 = f116_local1["item" .. f116_local3 - 1] --[[ @ 0]]
				if f116_local6.type:get() == "armor" then
					table.insert( f116_arg1.armorItem, f116_local6 ) --[[ @ 0]]
				end
			end
		end
		f116_local1.hasArmor:set( #f116_arg1.armorItem > 0 ) --[[ @ 0]]
	end,
	getCount = function ( f118_arg0 )
		return f118_arg0.armorItem and #f118_arg0.armorItem or 0
	end,
	getItem = function ( f119_arg0, f119_arg1, f119_arg2 )
		return f119_arg1.armorItem[f119_arg2]
	end
} --[[ @ 0]]
DataSources.HorizontalCompassPips = {
	prepare = function ( f120_arg0, f120_arg1, f120_arg2 )
		local f120_local0 = Engine[@"GetModelForController"]( f120_arg0 ) --[[ @ 0]]
		f120_local0 = f120_local0:create( "DataSources.HorizontalCompassPips" ) --[[ @ 0]]
		f120_arg1.horizontalCompassPips = {} --[[ @ 0]]
		local f120_local1 = 20 --[[ @ 0]]
		local f120_local2 = 95 --[[ @ 0]]
		local f120_local3 = 2 --[[ @ 0]]
		local f120_local4 = 45 / (1 + f120_local3) --[[ @ 0]]
		local f120_local5 = {
			@"hash_394D216E7E52BE0E",
			@"hash_53F0AC03EEA3DB64",
			@"hash_194CA4D87F9A0D1C",
			@"hash_2F3C39F2EC7F38DA",
			@"hash_394D216E7E52BE0E",
			@"hash_53F0AC03EEA3DB64"
		} --[[ @ 0]]
		local f120_local6 = {
			@"hash_71DD096AE31E233",
			@"hash_4EBC7401C462CB11",
			@"hash_387488A61EAA0973",
			@"hash_56982C0C4CDC4751",
			@"hash_71DD096AE31E233",
			@"hash_4EBC7401C462CB11"
		} --[[ @ 0]]
		local f120_local7 = 270 --[[ @ 0]]
		local f120_local8 = function ( f121_arg0, f121_arg1 )
			local f121_local0 = f120_local0:create( #f120_arg1.horizontalCompassPips + 1 ) --[[ @ 0]]
			local f121_local1 = f121_local0:create( "text" ) --[[ @ 0]]
			f121_local1:set( f121_arg0 ) --[[ @ 0]]
			f121_local1 = f121_local0:create( "degrees" ) --[[ @ 0]]
			f121_local1:set( f120_local7 ) --[[ @ 0]]
			f121_local1 = f121_local0:create( "alpha" ) --[[ @ 0]]
			f121_local1:set( 0 ) --[[ @ 0]]
			table.insert( f120_arg1.horizontalCompassPips, {
				model = f121_local0,
				widget = f121_arg1,
				degrees = f120_local7
			} ) --[[ @ 0]]
			f120_local7 = (f120_local7 + f120_local4) % 360 --[[ @ 0]]
		end
		 --[[ @ 0]]
		for f120_local16, f120_local17 in ipairs( f120_local5 ) --[[ @ 0]] do
			f120_local8( Engine[@"hash_4F9F1239CFD921FE"]( f120_local17 ), CoD.WZCompassCardinal ) --[[ @ 0]]
			for f120_local13 = 1 --[[ @ 0]], f120_local3, 1 do
				local f120_local12 = f120_local13 --[[ @ 0]]
				f120_local8( f120_local7, CoD.WZCompassMinor ) --[[ @ 0]]
			end
			f120_local8( Engine[@"hash_4F9F1239CFD921FE"]( f120_local6[f120_local16] ), CoD.WZCompassIntercardinal ) --[[ @ 0]]
			for f120_local13 = 1 --[[ @ 0]], f120_local3, 1 do
				local f120_local12 = f120_local13 --[[ @ 0]]
				f120_local8( f120_local7, CoD.WZCompassMinor ) --[[ @ 0]]
			end
		end
		if not f120_arg1._hasYawSubscription then
			f120_arg1._hasYawSubscription = true --[[ @ 0]]
			f120_arg1:addElement( LUI.UITimer.newElementTimer( 0, true, function ()
				local f122_local0 = f120_arg1 --[[ @ 0]]
				local f122_local1 = f122_local0 --[[ @ 0]]
				f122_local0 = f122_local0.subscribeToModel --[[ @ 0]]
				local f122_local2 = Engine[@"GetModelForController"]( f120_arg0 ) --[[ @ 0]]
				f122_local0( f122_local1, f122_local2.hudItems.yaw, function ( f123_arg0 )
					local f123_local0 = (f123_arg0:get() + 360) % 360 --[[ @ 0]]
					local f123_local1 = f123_local0 / 540 + 0.17 --[[ @ 0]]
					if not f120_arg1._startLeftPx then
						local f123_local2, f123_local3, f123_local4, f123_local5 = f120_arg1.itemStencil:getLocalLeftRight() --[[ @ 0]]
						f120_arg1._startLeftPx = f123_local4 - 0.5 * CoD.WZCompassCardinal.__defaultWidth --[[ @ 0]]
						f120_arg1._startRightPx = f123_local5 - 0.5 * CoD.WZCompassCardinal.__defaultWidth --[[ @ 0]]
					end
					f120_arg1.itemStencil:setLeftRight( f123_local1, f123_local1, f120_arg1._startLeftPx, f120_arg1._startRightPx ) --[[ @ 0]]
					for f123_local5, f123_local7 in ipairs( f120_arg1.horizontalCompassPips ) --[[ @ 0]] do
						local f123_local8 = (math.abs( 360 - f123_local0 - f123_local7.degrees ) + 360) % 360 --[[ @ 0]]
						local f123_local6 = math.min( 1, math.max( 0, (f120_local2 - math.min( f123_local8, math.abs( f123_local8 - 360 ) )) / f120_local1 ) ) --[[ @ 0]]
						if math.abs( (#f120_arg1.horizontalCompassPips - f123_local5) / (#f120_arg1.horizontalCompassPips - 1) - f123_local1 ) > 0.27 then
							f123_local6 = 0 --[[ @ 0]]
						end
						f123_local7.model.alpha:set( f123_local6 ) --[[ @ 0]]
					end
				end, true ) --[[ @ 0]]
			end ) ) --[[ @ 0]]
		end
	end,
	getCount = function ( f124_arg0 )
		return #f124_arg0.horizontalCompassPips
	end,
	getItem = function ( f125_arg0, f125_arg1, f125_arg2 )
		return f125_arg1.horizontalCompassPips[f125_arg2].model
	end,
	getWidgetTypeForItem = function ( f126_arg0, f126_arg1, f126_arg2 )
		return f126_arg0.horizontalCompassPips[f126_arg2].widget
	end
} --[[ @ 0]]
CoD.WZUtility.NoUnlockableItemsAbleToPersonalize = function ( f127_arg0 )
	for f127_local3, f127_local4 in pairs( f127_arg0 ) --[[ @ 0]] do
		if CoD.WZUtility.ArrayContains( CoD.WZUtility.WZPersonalizeWeaponNames, f127_local4.nameHash ) then
			return false
		end
	end
	return true
end
 --[[ @ 0]]
DataSources.WZPersonalizeWeaponGroups = ListHelper_SetupDataSource( "WZPersonalizeWeaponGroups", function ( f128_arg0 )
	local f128_local0 = {} --[[ @ 0]]
	local f128_local1 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	for f128_local5, f128_local6 in ipairs( CoD.WZUtility.WZPersonalizeGroupNames ) --[[ @ 0]] do
		local f128_local7 = CoD.CACUtility.GetUnlockableItemsForItemGroup( f128_arg0, f128_local1, f128_local6.weapon_category, true ) --[[ @ 0]]
		if f128_local6.minUnlockableCount < #f128_local7 and not CoD.CACUtility.AllUnlockableItemsBanned( f128_local7 ) and not CoD.WZUtility.NoUnlockableItemsAbleToPersonalize( f128_local7 ) then
			table.insert( f128_local0, {
				models = {
					name = f128_local6.name
				},
				properties = {
					loadoutType = f128_local6.loadoutType,
					category = f128_local6.weapon_category,
					itemGroup = f128_local6.itemGroup
				}
			} ) --[[ @ 0]]
		end
	end
	return f128_local0
end, true ) --[[ @ 0]]
CoD.WZUtility[@"hash_E6C072866FEDB9F"] = function ()
	if not Engine[@"SessionModeIsMode"]( Enum[@"hash_51DD23D27A61F09A"][@"hash_19A232F8674583A3"] ) then
		return false
	else
		local f129_local0 = Engine[@"hash_63ACB99DBAD24D55"]( Engine[@"hash_17B3B2B73B53EB34"]() ) --[[ @ 0]]
		return f129_local0.isSpectreRising == true
	end
end
 --[[ @ 0]]
CoD.WZUtility.CreateCharacterCategoryDataSource = function ( f130_arg0, f130_arg1 )
	local f130_local0 = "WZCharacters_" .. CoD.ModeToModeString( f130_arg1 ) --[[ @ 0]]
	DataSources[f130_local0] = DataSourceHelpers.ListSetup( f130_local0, function ( f131_arg0, f131_arg1 )
		local f131_local0 = {} --[[ @ 0]]
		local f131_local1 = CoD.PlayerRoleUtility.GetSelectedCharacterIndex( f131_arg0 ) --[[ @ 0]]
		f131_arg1.persistSelectedIndex = true --[[ @ 0]]
		local f131_local2 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
		local f131_local3 = CoD.PlayerRoleUtility.GetHeroList( f131_local2 ) --[[ @ 0]]
		local f131_local4 = Engine[@"hash_2343E1D78ABC6BF1"]() --[[ @ 0]]
		local f131_local5 = DataSources.CharacterBreadcrumbs.recreateCharacterBreadcrumbModelsIfNeeded( f131_arg0, f131_local2 ) --[[ @ 0]]
		local f131_local6 = true --[[ @ 0]]
		for f131_local27, f131_local28 in ipairs( f131_local3 ) --[[ @ 0]] do
			local f131_local29 = f131_local28.bodyIndex --[[ @ 0]]
			local f131_local30 = Engine[@"hash_70B678B832BC9DC0"]( f131_local2, f131_local29 ) --[[ @ 0]]
			if f131_local30[@"hash_6E69216C2DA7060A"] == f130_arg1 and f131_local30[@"hash_7C9366DE09ED7379"] ~= 1 and (not f131_local28[@"hash_4810366D1F05BBBD"] or CoD.BaseUtility.IsDvarEnabled( f131_local28[@"hash_4810366D1F05BBBD"] )) then
				local f131_local10 = CoD.PlayerRoleUtility.IsRoleBMUnavailable( f131_arg0, f131_local2, f131_local29 ) --[[ @ 0]]
				if f131_local28.assetName == @"hash_2E611C081F273DE3" then
					f131_local10 = false --[[ @ 0]]
				end
				if not f131_local10 then
					local f131_local11 = CoD.PlayerRoleUtility.IsRoleBMLocked( f131_arg0, f131_local2, f131_local29 ) --[[ @ 0]]
					local f131_local12 = f131_local11 --[[ @ 0]]
					local f131_local13 --[[ @ 0]]
					if f131_local30[@"hash_9173E55822A88B5"] == 1 or not CoD.PlayerRoleUtility.IsRoleUnlocked( f131_arg0, f131_local2, f131_local29 ) then
						if f131_local30[@"hash_4C98250D6799E088"] == 1 then
							f131_local13 = not f131_local4 --[[ @ 0]]
						else
							f131_local13 = f131_local12 or true --[[ @ 0]]
						end
					else
						f131_local13 = false --[[ @ 0]]
					end
					local f131_local14 = @"hash_2C79EA24AB1A2BA" --[[ @ 0]]
					if f131_local30[@"hash_5D48E06E94FE4AFA"] ~= 1 then
						if not Engine[@"hash_41641CC988E0FD5F"]( f131_local2, f131_local29 ) and f131_local30[@"hash_2661FF2D93C3A98A"] then
							f131_local14 = f131_local30[@"hash_2661FF2D93C3A98A"] --[[ @ 0]]
						elseif f131_local13 and f131_local30[@"hash_74D69D715905BD4"] then
							f131_local14 = f131_local30[@"hash_74D69D715905BD4"] --[[ @ 0]]
						end
					end
					if Dvar[@"hash_5F037DBD87F8EA84"]:exists() and (IsDurango() or IsPC()) and (f131_local28.assetName == @"hash_253C65B5254C2343" or f131_local28.assetName == @"hash_691B38344E00A93" or f131_local28.assetName == @"hash_4D5EDAD18BF7D543" or f131_local28.assetName == @"hash_2D020F0DF0ECB942") then
						f131_local14 = f131_local30[@"hash_2661FF2D93C3A98A"] --[[ @ 0]]
					end
					if not f131_local13 and f130_arg1 == Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] and IsBooleanDvarSet( @"hash_4A5FD7D94CFC9DFD" ) then
						local f131_local15 = CoD.PlayerRoleUtility.GetCachedHeroCustomization( f131_local2, f131_local29 ) --[[ @ 0]]
						local f131_local16 = nil --[[ @ 0]]
						for f131_local23, f131_local24 in ipairs( f131_local15.outfits ) --[[ @ 0]] do
							for f131_local20, f131_local21 in ipairs( f131_local24.presets ) --[[ @ 0]] do
								if CoD.BlackMarketTableUtility[@"hash_733358695872A441"][f131_local21.lootId] then
									f131_local16 = CoD.BlackMarketTableUtility.LootInfoLookup( f131_arg0, f131_local21.lootId ) --[[ @ 0]]
									break
								end
							end
							if f131_local16 ~= nil then
								
							end
						end
						if f131_local16 then
							if f131_local16.isLoot and not f131_local16.owned and f131_local16.available then
								f131_local14 = f131_local30[@"hash_5FDA925CA4CC9404"] or f131_local14 --[[ @ 0]]
							elseif not f131_local16.owned then
								f131_local14 = f131_local30[@"hash_29B85DE1CC11BAD"] or f131_local14 --[[ @ 0]]
							else
								local f131_local15 = false --[[ @ 0]]
								if f131_local30[@"hash_5562938AF86028A0"] ~= nil and not Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) then
									if f131_local30[@"hash_4C98250D6799E088"] == 1 then
										f131_local15 = not f131_local4 --[[ @ 0]]
									else
										f131_local15 = true --[[ @ 0]]
									end
								end
								local f131_local16 = false --[[ @ 0]]
								if f131_local6 then
									f131_local16 = true --[[ @ 0]]
									f131_local6 = false --[[ @ 0]]
								end
								local f131_local17 = false --[[ @ 0]]
								if f131_local28.assetName == @"hash_2E611C081F273DE3" or f131_local28.assetName == @"hash_585374560A87B1E7" then
									local f131_local18 --[[ @ 0]]
									if f131_local30[@"hash_5562938AF86028A0"] ~= nil then
										f131_local18 = Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) --[[ @ 0]]
									else
										f131_local18 = false --[[ @ 0]]
									end
									if f131_local18 or not f131_local11 then
										f131_local13 = false --[[ @ 0]]
										f131_local15 = false --[[ @ 0]]
										f131_local11 = false --[[ @ 0]]
										f131_local14 = @"hash_2C79EA24AB1A2BA" --[[ @ 0]]
									else
										f131_local17 = true --[[ @ 0]]
									end
								end
								local f131_local19 = CoD.PlayerRoleUtility.HasCustomization( f131_arg0, CoD.PlayerRoleUtility.GetCachedHeroCustomization( f131_local2, f131_local29 ) ) --[[ @ 0]]
								if not f131_local17 then
									local f131_local23 = {} --[[ @ 0]]
									local f131_local24 = {
										name = f131_local28.displayName
									} --[[ @ 0]]
									local f131_local25 = f131_local28[@"hash_10CB98543E7EC137"] --[[ @ 0]]
									if not f131_local25 then
										f131_local25 = @"hash_0" --[[ @ 0]]
									end
									f131_local24.fullName = f131_local25 --[[ @ 0]]
									f131_local24.icon = f131_local28.positionDraftIcon --[[ @ 0]]
									f131_local24.characterIndex = f131_local29 --[[ @ 0]]
									f131_local24.disabled = f131_local13 --[[ @ 0]]
									f131_local24.isBMLocked = f131_local11 --[[ @ 0]]
									f131_local24.jobTitle = CoD.PlayerRoleUtility.GetCharacterTraitTitle( f131_local2, f131_local29 ) --[[ @ 0]]
									f131_local24.tooltipArchetype = f131_arg1.tooltipArchetype --[[ @ 0]]
									f131_local24.characterInT4 = f131_local30[@"hash_4BF1CCE3018DC22F"] == 1 --[[ @ 0]]
									f131_local24.characterInT5 = f131_local30[@"hash_4BF1CBE3018DC07C"] == 1 --[[ @ 0]]
									f131_local24.characterInT6 = f131_local30[@"hash_4BF1CEE3018DC595"] == 1 --[[ @ 0]]
									f131_local24.characterInT7 = f131_local30[@"hash_4BF1CDE3018DC3E2"] == 1 --[[ @ 0]]
									f131_local24.characterInT8 = f131_local30[@"hash_4BF1D0E3018DC8FB"] == 1 --[[ @ 0]]
									f131_local24.isSelected = f131_local1 == f131_local29 --[[ @ 0]]
									f131_local24.customizationMode = f130_arg1 --[[ @ 0]]
									f131_local24.isDefaultCharacter = f131_local30[@"hash_7C9366DE09ED7379"] == 1 --[[ @ 0]]
									f131_local24.availabilityText = f131_local14 --[[ @ 0]]
									f131_local24.purchasable = f131_local15 --[[ @ 0]]
									f131_local24.breadcrumb = f131_local5[CoD.BreadcrumbUtility.CharacterBreadcrumbModelPrefixTable[f131_local2] .. f131_local29] --[[ @ 0]]
									f131_local24.isEchelonUnlock = f131_local30[@"hash_308E63886F9B0BAB"] == 1 --[[ @ 0]]
									f131_local24.hasCustomization = f131_local19 --[[ @ 0]]
									f131_local24.previewEnabled = f130_arg1 == Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] --[[ @ 0]]
									f131_local23.models = f131_local24 --[[ @ 0]]
									f131_local23.properties = {
										characterIndex = f131_local29,
										character = f131_local28,
										sortIndex = f131_local30[@"hash_D909934375BE707"],
										selectIndex = f131_local16,
										purchasable = f131_local15
									} --[[ @ 0]]
									table.insert( f131_local0, f131_local23 ) --[[ @ 0]]
								end
							end
						else
							local f131_local15 = false --[[ @ 0]]
							if f131_local30[@"hash_5562938AF86028A0"] ~= nil and not Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) then
								if f131_local30[@"hash_4C98250D6799E088"] == 1 then
									f131_local15 = not f131_local4 --[[ @ 0]]
								else
									f131_local15 = true --[[ @ 0]]
								end
							end
							local f131_local16 = false --[[ @ 0]]
							if f131_local6 then
								f131_local16 = true --[[ @ 0]]
								f131_local6 = false --[[ @ 0]]
							end
							local f131_local17 = false --[[ @ 0]]
							if f131_local28.assetName == @"hash_2E611C081F273DE3" or f131_local28.assetName == @"hash_585374560A87B1E7" then
								local f131_local18 --[[ @ 0]]
								if f131_local30[@"hash_5562938AF86028A0"] ~= nil then
									f131_local18 = Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) --[[ @ 0]]
								else
									f131_local18 = false --[[ @ 0]]
								end
								if f131_local18 or not f131_local11 then
									f131_local13 = false --[[ @ 0]]
									f131_local15 = false --[[ @ 0]]
									f131_local11 = false --[[ @ 0]]
									f131_local14 = @"hash_2C79EA24AB1A2BA" --[[ @ 0]]
								else
									f131_local17 = true --[[ @ 0]]
								end
							end
							local f131_local19 = CoD.PlayerRoleUtility.HasCustomization( f131_arg0, CoD.PlayerRoleUtility.GetCachedHeroCustomization( f131_local2, f131_local29 ) ) --[[ @ 0]]
							if not f131_local17 then
								local f131_local23 = {} --[[ @ 0]]
								local f131_local24 = {
									name = f131_local28.displayName
								} --[[ @ 0]]
								local f131_local25 = f131_local28[@"hash_10CB98543E7EC137"] --[[ @ 0]]
								if not f131_local25 then
									f131_local25 = @"hash_0" --[[ @ 0]]
								end
								f131_local24.fullName = f131_local25 --[[ @ 0]]
								f131_local24.icon = f131_local28.positionDraftIcon --[[ @ 0]]
								f131_local24.characterIndex = f131_local29 --[[ @ 0]]
								f131_local24.disabled = f131_local13 --[[ @ 0]]
								f131_local24.isBMLocked = f131_local11 --[[ @ 0]]
								f131_local24.jobTitle = CoD.PlayerRoleUtility.GetCharacterTraitTitle( f131_local2, f131_local29 ) --[[ @ 0]]
								f131_local24.tooltipArchetype = f131_arg1.tooltipArchetype --[[ @ 0]]
								f131_local24.characterInT4 = f131_local30[@"hash_4BF1CCE3018DC22F"] == 1 --[[ @ 0]]
								f131_local24.characterInT5 = f131_local30[@"hash_4BF1CBE3018DC07C"] == 1 --[[ @ 0]]
								f131_local24.characterInT6 = f131_local30[@"hash_4BF1CEE3018DC595"] == 1 --[[ @ 0]]
								f131_local24.characterInT7 = f131_local30[@"hash_4BF1CDE3018DC3E2"] == 1 --[[ @ 0]]
								f131_local24.characterInT8 = f131_local30[@"hash_4BF1D0E3018DC8FB"] == 1 --[[ @ 0]]
								f131_local24.isSelected = f131_local1 == f131_local29 --[[ @ 0]]
								f131_local24.customizationMode = f130_arg1 --[[ @ 0]]
								f131_local24.isDefaultCharacter = f131_local30[@"hash_7C9366DE09ED7379"] == 1 --[[ @ 0]]
								f131_local24.availabilityText = f131_local14 --[[ @ 0]]
								f131_local24.purchasable = f131_local15 --[[ @ 0]]
								f131_local24.breadcrumb = f131_local5[CoD.BreadcrumbUtility.CharacterBreadcrumbModelPrefixTable[f131_local2] .. f131_local29] --[[ @ 0]]
								f131_local24.isEchelonUnlock = f131_local30[@"hash_308E63886F9B0BAB"] == 1 --[[ @ 0]]
								f131_local24.hasCustomization = f131_local19 --[[ @ 0]]
								f131_local24.previewEnabled = f130_arg1 == Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] --[[ @ 0]]
								f131_local23.models = f131_local24 --[[ @ 0]]
								f131_local23.properties = {
									characterIndex = f131_local29,
									character = f131_local28,
									sortIndex = f131_local30[@"hash_D909934375BE707"],
									selectIndex = f131_local16,
									purchasable = f131_local15
								} --[[ @ 0]]
								table.insert( f131_local0, f131_local23 ) --[[ @ 0]]
							end
						end
					end
					local f131_local15 = false --[[ @ 0]]
					if f131_local30[@"hash_5562938AF86028A0"] ~= nil and not Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) then
						if f131_local30[@"hash_4C98250D6799E088"] == 1 then
							f131_local15 = not f131_local4 --[[ @ 0]]
						else
							f131_local15 = true --[[ @ 0]]
						end
					end
					local f131_local16 = false --[[ @ 0]]
					if f131_local6 then
						f131_local16 = true --[[ @ 0]]
						f131_local6 = false --[[ @ 0]]
					end
					local f131_local17 = false --[[ @ 0]]
					if f131_local28.assetName == @"hash_2E611C081F273DE3" or f131_local28.assetName == @"hash_585374560A87B1E7" then
						local f131_local18 --[[ @ 0]]
						if f131_local30[@"hash_5562938AF86028A0"] ~= nil then
							f131_local18 = Engine[@"HasEntitlement"]( f131_arg0, f131_local30[@"hash_5562938AF86028A0"] ) --[[ @ 0]]
						else
							f131_local18 = false --[[ @ 0]]
						end
						if f131_local18 or not f131_local11 then
							f131_local13 = false --[[ @ 0]]
							f131_local15 = false --[[ @ 0]]
							f131_local11 = false --[[ @ 0]]
							f131_local14 = @"hash_2C79EA24AB1A2BA" --[[ @ 0]]
						else
							f131_local17 = true --[[ @ 0]]
						end
					end
					local f131_local19 = CoD.PlayerRoleUtility.HasCustomization( f131_arg0, CoD.PlayerRoleUtility.GetCachedHeroCustomization( f131_local2, f131_local29 ) ) --[[ @ 0]]
					if not f131_local17 then
						local f131_local23 = {} --[[ @ 0]]
						local f131_local24 = {
							name = f131_local28.displayName
						} --[[ @ 0]]
						local f131_local25 = f131_local28[@"hash_10CB98543E7EC137"] --[[ @ 0]]
						if not f131_local25 then
							f131_local25 = @"hash_0" --[[ @ 0]]
						end
						f131_local24.fullName = f131_local25 --[[ @ 0]]
						f131_local24.icon = f131_local28.positionDraftIcon --[[ @ 0]]
						f131_local24.characterIndex = f131_local29 --[[ @ 0]]
						f131_local24.disabled = f131_local13 --[[ @ 0]]
						f131_local24.isBMLocked = f131_local11 --[[ @ 0]]
						f131_local24.jobTitle = CoD.PlayerRoleUtility.GetCharacterTraitTitle( f131_local2, f131_local29 ) --[[ @ 0]]
						f131_local24.tooltipArchetype = f131_arg1.tooltipArchetype --[[ @ 0]]
						f131_local24.characterInT4 = f131_local30[@"hash_4BF1CCE3018DC22F"] == 1 --[[ @ 0]]
						f131_local24.characterInT5 = f131_local30[@"hash_4BF1CBE3018DC07C"] == 1 --[[ @ 0]]
						f131_local24.characterInT6 = f131_local30[@"hash_4BF1CEE3018DC595"] == 1 --[[ @ 0]]
						f131_local24.characterInT7 = f131_local30[@"hash_4BF1CDE3018DC3E2"] == 1 --[[ @ 0]]
						f131_local24.characterInT8 = f131_local30[@"hash_4BF1D0E3018DC8FB"] == 1 --[[ @ 0]]
						f131_local24.isSelected = f131_local1 == f131_local29 --[[ @ 0]]
						f131_local24.customizationMode = f130_arg1 --[[ @ 0]]
						f131_local24.isDefaultCharacter = f131_local30[@"hash_7C9366DE09ED7379"] == 1 --[[ @ 0]]
						f131_local24.availabilityText = f131_local14 --[[ @ 0]]
						f131_local24.purchasable = f131_local15 --[[ @ 0]]
						f131_local24.breadcrumb = f131_local5[CoD.BreadcrumbUtility.CharacterBreadcrumbModelPrefixTable[f131_local2] .. f131_local29] --[[ @ 0]]
						f131_local24.isEchelonUnlock = f131_local30[@"hash_308E63886F9B0BAB"] == 1 --[[ @ 0]]
						f131_local24.hasCustomization = f131_local19 --[[ @ 0]]
						f131_local24.previewEnabled = f130_arg1 == Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] --[[ @ 0]]
						f131_local23.models = f131_local24 --[[ @ 0]]
						f131_local23.properties = {
							characterIndex = f131_local29,
							character = f131_local28,
							sortIndex = f131_local30[@"hash_D909934375BE707"],
							selectIndex = f131_local16,
							purchasable = f131_local15
						} --[[ @ 0]]
						table.insert( f131_local0, f131_local23 ) --[[ @ 0]]
					end
				end
			end
		end
		table.sort( f131_local0, function ( f132_arg0, f132_arg1 )
			if f132_arg0.properties.purchasable ~= f132_arg1.properties.purchasable then
				if not f132_arg0.models.disabled then
					return f132_arg1.properties.purchasable
				else
					return f132_arg0.properties.purchasable
				end
			elseif f132_arg0.models.disabled ~= f132_arg1.models.disabled then
				return f132_arg1.models.disabled
			else
				return f132_arg0.properties.sortIndex < f132_arg1.properties.sortIndex
			end
		end ) --[[ @ 0]]
		return f131_local0
	end ) --[[ @ 0]]
	return f130_local0
end
 --[[ @ 0]]
DataSources.WZCharacterCategories = DataSourceHelpers.ListSetup( "WZCharacterCategories", function ( f133_arg0, f133_arg1 )
	local f133_local0 = "CoD.CharacterSelection_StandardFrameWidget" --[[ @ 0]]
	local f133_local1 = "CoD.WZPersonalizeCharacter_StandardFrameWidget" --[[ @ 0]]
	local f133_local2 = CoD.PlayerRoleUtility.GetSelectedCharacterIndex( f133_arg0 ) --[[ @ 0]]
	local f133_local3 = nil --[[ @ 0]]
	local f133_local4 = Engine[@"hash_70B678B832BC9DC0"]( Engine[@"CurrentSessionMode"](), f133_local2 ) --[[ @ 0]]
	if f133_local4 then
		f133_local3 = f133_local4[@"hash_6E69216C2DA7060A"] --[[ @ 0]]
	end
	local f133_local5 = DataSources.CharacterBreadcrumbs.recreateCharacterBreadcrumbModelsIfNeeded( f133_arg0, Engine[@"CurrentSessionMode"]() ) --[[ @ 0]]
	local f133_local6 = {
		{
			mode = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"],
			name = @"hash_7A2DD20750465431",
			frameWidget = "CoD.CharacterSelection_CustomCharacterFrameWidget",
			personalizeFrameWidget = "CoD.WZPersonalizeCharacter_CustomCharacterFrameWidget"
		},
		{
			mode = Enum[@"eModes"][@"hash_73723205FAE52C4A"],
			name = @"hash_5B06081B8B4567F2"
		},
		{
			mode = Enum[@"eModes"][@"hash_383EBA96F36BC4E5"],
			name = @"hash_555D96CC762EABDD"
		}
	} --[[ @ 0]]
	local f133_local7 = {} --[[ @ 0]]
	for f133_local12, f133_local13 in ipairs( f133_local6 ) --[[ @ 0]] do
		local f133_local14 = CoD.ModeToModeString( f133_local13.mode ) --[[ @ 0]]
		local f133_local15 = table.insert --[[ @ 0]]
		local f133_local16 = f133_local7 --[[ @ 0]]
		local f133_local17 = {} --[[ @ 0]]
		local f133_local18 = {
			name = f133_local13.name
		} --[[ @ 0]]
		local f133_local11 = f133_local13.frameWidget --[[ @ 0]]
		if not f133_local11 then
			f133_local11 = f133_local0 --[[ @ 0]]
		end
		f133_local18.frameWidget = f133_local11 --[[ @ 0]]
		f133_local11 = f133_local13.personalizeFrameWidget --[[ @ 0]]
		if not f133_local11 then
			f133_local11 = f133_local1 --[[ @ 0]]
		end
		f133_local18.personalizeFrameWidget = f133_local11 --[[ @ 0]]
		f133_local18.characterDatasource = CoD.WZUtility.CreateCharacterCategoryDataSource( f133_arg0, f133_local13.mode ) --[[ @ 0]]
		f133_local18.playRevealClip = false --[[ @ 0]]
		f133_local18.mode = f133_local13.mode --[[ @ 0]]
		f133_local18.breadcrumb = f133_local5["wz_specialist_" .. f133_local14] --[[ @ 0]]
		f133_local17.models = f133_local18 --[[ @ 0]]
		f133_local17.properties = {
			selectIndex = f133_local3 == f133_local13.mode
		} --[[ @ 0]]
		f133_local15( f133_local16, f133_local17 ) --[[ @ 0]]
	end
	return f133_local7
end ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WZDefaultCharacterInfo", "WZDefaultCharacterInfo", function ( f134_arg0, f134_arg1 )
	local f134_local0 = {} --[[ @ 0]]
	local f134_local1 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	local f134_local2 = CoD.PlayerRoleUtility.GetHeroList( f134_local1 ) --[[ @ 0]]
	local f134_local3 = Engine[@"hash_3FC41172469DB251"]( f134_arg1 ) --[[ @ 0]]
	local f134_local4 = f134_local3[@"hash_6A8BD5071BCB463C"]:get() --[[ @ 0]]
	local f134_local5 = DataSources.CharacterBreadcrumbs.recreateCharacterBreadcrumbModelsIfNeeded( f134_arg1, f134_local1 ) --[[ @ 0]]
	for f134_local9, f134_local10 in ipairs( f134_local2 ) --[[ @ 0]] do
		local f134_local11 = f134_local10.bodyIndex --[[ @ 0]]
		local f134_local12 = Engine[@"hash_70B678B832BC9DC0"]( f134_local1, f134_local11 ) --[[ @ 0]]
		if f134_local12[@"hash_7C9366DE09ED7379"] == 1 then
			if f134_local11 == f134_local4 then
				break
			end
			table.insert( f134_local0, f134_local11 ) --[[ @ 0]]
		end
		if f134_local11 == f134_local4 then
			f134_local4 = nil --[[ @ 0]]
		end
	end
	f134_local6 = f134_local4 --[[ @ 0]]
	if not f134_local6 then
		f134_local6 = f134_local0[math.random( #f134_local0 )] --[[ @ 0]]
		f134_local3[@"hash_6A8BD5071BCB463C"]:set( f134_local6 ) --[[ @ 0]]
	end
	f134_local7 = Engine[@"GetGamertagForController"]( f134_arg1 ) --[[ @ 0]]
	f134_local8 = CoD.PlayerRoleUtility.GetSelectedCharacterIndex( f134_arg1 ) --[[ @ 0]]
	f134_local9 = CoD.PlayerRoleUtility.GetCachedHeroInfo( f134_local1, f134_local6 ) --[[ @ 0]]
	f134_local10 = f134_arg0:create( "name" ) --[[ @ 0]]
	f134_local10:set( f134_local7 ) --[[ @ 0]]
	f134_local10 = f134_arg0:create( "fullName" ) --[[ @ 0]]
	f134_local10:set( f134_local7 ) --[[ @ 0]]
	f134_local10 = f134_arg0:create( "characterIndex" ) --[[ @ 0]]
	f134_local10:set( f134_local6 ) --[[ @ 0]]
	f134_local10 = f134_arg0:create( "icon" ) --[[ @ 0]]
	local f134_local11 = f134_local10 --[[ @ 0]]
	f134_local10 = f134_local10.set --[[ @ 0]]
	local f134_local12 --[[ @ 0]]
	if f134_local9 then
		f134_local12 = f134_local9[@"hash_1ABF9CD0B63BCB25"] --[[ @ 0]]
		if not f134_local12 then
		
		else
			f134_local10( f134_local11, f134_local12 ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "jobTitle" ) --[[ @ 0]]
			f134_local10:set( @"hash_40A469D89653A7B0" ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "disabled" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "characterInT4" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "characterInT5" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "characterInT6" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "characterInT7" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "characterInT8" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "customizationMode" ) --[[ @ 0]]
			f134_local10:set( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "isDefaultCharacter" ) --[[ @ 0]]
			f134_local10:set( true ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "availabilityText" ) --[[ @ 0]]
			f134_local10:set( @"hash_2C79EA24AB1A2BA" ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "isEchelonUnlock" ) --[[ @ 0]]
			f134_local10:set( false ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "hasCustomization" ) --[[ @ 0]]
			f134_local10:set( true ) --[[ @ 0]]
			f134_local10 = f134_arg0:create( "breadcrumb" ) --[[ @ 0]]
			f134_local10:set( f134_local5[CoD.BreadcrumbUtility.CharacterBreadcrumbModelPrefixTable[f134_local1] .. f134_local6] ) --[[ @ 0]]
		end
	end
	f134_local12 = @"blacktransparent" --[[ @ 0]]
end, false ) --[[ @ 0]]
DataSourceHelpers.GlobalDataSourceSetup( "WarzoneGlobal", "hudItems.warzone", function ( f135_arg0 )
	f135_arg0:create( "collapseTimerState" ) --[[ @ 0]]
	f135_arg0:create( "collapseProgress" ) --[[ @ 0]]
	f135_arg0:create( "reinsertionIndex" ) --[[ @ 0]]
	f135_arg0:create( "collapseCount" ) --[[ @ 0]]
	f135_arg0:create( "srProtoTimer" ) --[[ @ 0]]
end, false ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzonePerController", "hudItems.warzone", function ( f136_arg0, f136_arg1 )
	CoD.WZUtility.SetMapZoomModel( f136_arg1, f136_arg0:create( "mapZoom" ), 1 ) --[[ @ 0]]
	CoD.WZUtility.SetMapPanModel( f136_arg1, f136_arg0:create( "mapPan" ), 0, 0 ) --[[ @ 0]]
	local f136_local0 = f136_arg0:create( "markerPos" ) --[[ @ 0]]
	f136_local0:set( {
		x = 0.5,
		y = 0.5
	} ) --[[ @ 0]]
end, false ) --[[ @ 0]]
CoD.WZUtility.ZoomRange = {
	MAP_ZOOM_MIN = 1,
	MAP_ZOOM_MAX = 4
} --[[ @ 0]]
CoD.WZUtility.MaxWidgetScaleFactor = Engine[@"IsSplitscreen"]() and 1.1 or 2.18 --[[ @ 0]]
CoD.WZUtility.ScreenHeight = 1080 --[[ @ 0]]
CoD.WZUtility.ZoomMap = function ( f137_arg0, f137_arg1, f137_arg2 )
	if f137_arg1 then
		local f137_local0 = Engine[@"GetModelForController"]( f137_arg0 ) --[[ @ 0]]
		if not IsRepeatButtonPress( f137_local0["ButtonBits." .. Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"]] ) then
			CoD.WZUtility.DisableZoomIn[f137_arg0] = false --[[ @ 0]]
		end
	else
		local f137_local0 = Engine[@"GetModelForController"]( f137_arg0 ) --[[ @ 0]]
		if not IsRepeatButtonPress( f137_local0["ButtonBits." .. Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"]] ) then
			CoD.WZUtility.DisableZoomOut[f137_arg0] = false --[[ @ 0]]
		end
	end
	local f137_local0 = true --[[ @ 0]]
	if f137_arg1 then
		if CoD.WZUtility.DisableZoomIn[f137_arg0] then
			f137_local0 = false --[[ @ 0]]
		end
	elseif CoD.WZUtility.DisableZoomOut[f137_arg0] then
		f137_local0 = false --[[ @ 0]]
	end
	if f137_local0 then
		local f137_local1 = Engine[@"GetModelForController"]( f137_arg0 ) --[[ @ 0]]
		f137_local1 = f137_local1.hudItems.warzone --[[ @ 0]]
		if not f137_arg1 or not 1.02 then
			local f137_local2 = 0.98 --[[ @ 0]]
		end
		local f137_local2 --[[ @ 0]]
		if CoD.isPC then
			if f137_arg1 then
				local f137_local3 = 1.08 --[[ @ 0]]
			end
			f137_local2 = f137_local3 or 0.92 --[[ @ 0]]
		end
		local f137_local4 = f137_local1.mapZoom:get() --[[ @ 0]]
		if f137_local4 >= CoD.WZUtility.MaxWidgetScaleFactor then
			f137_local2 = f137_local2 * f137_local2 --[[ @ 0]]
		end
		CoD.WZUtility.SetNewZoomInternal( f137_arg0, f137_local1, LUI.clamp( f137_local4 * f137_local2, CoD.WZUtility.ZoomRange.MAP_ZOOM_MIN, CoD.WZUtility.ZoomRange.MAP_ZOOM_MAX ), f137_arg1, f137_arg2 ) --[[ @ 0]]
	end
	if IsGamepad( f137_arg0 ) then
		Engine[@"BlockGameFromKeyEvent"]() --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetNewZoomInternal = function ( f138_arg0, f138_arg1, f138_arg2, f138_arg3, f138_arg4 )
	local f138_local0 = f138_arg1.mapZoom:get() --[[ @ 0]]
	if f138_arg2 <= CoD.WZUtility.ZoomRange.MAP_ZOOM_MAX then
		CoD.WZUtility.SetMapZoomModel( f138_arg0, f138_arg1.mapZoom, f138_arg2 ) --[[ @ 0]]
		local f138_local1, f138_local2 = nil --[[ @ 0]]
		if IsMouseOrKeyboard( f138_arg0 ) then
			local f138_local3, f138_local4, f138_local5, f138_local6 = Engine[@"hash_3695399A0E06EC35"]( f138_arg0, f138_arg4 ) --[[ @ 0]]
			local f138_local7 = DataSources.FreeCursor.getModel( f138_arg0 ) --[[ @ 0]]
			local f138_local7, f138_local8 = f138_local7.position:get() --[[ @ 0]]
			f138_local2 = f138_local8 --[[ @ 0]]
			f138_local1 = (f138_local7 - f138_local3) / (f138_local5 - f138_local3) --[[ @ 0]]
			f138_local2 = (f138_local2 - f138_local4) / (f138_local6 - f138_local4) --[[ @ 0]]
		else
			f138_local1, f138_local2 = f138_arg1.markerPos:get() --[[ @ 0]]
		end
		local f138_local3, f138_local4 = f138_arg1.mapPan:get() --[[ @ 0]]
		local f138_local5 = 1 / f138_local0 --[[ @ 0]]
		local f138_local6 = 1 / f138_arg2 --[[ @ 0]]
		local f138_local7 = f138_local6 - f138_local5 --[[ @ 0]]
		local f138_local8 = -(f138_local1 * f138_local7) --[[ @ 0]]
		local f138_local9 = -(f138_local2 * f138_local7) --[[ @ 0]]
		f138_local8 = f138_local8 + f138_local3 --[[ @ 0]]
		f138_local9 = f138_local9 + f138_local4 --[[ @ 0]]
		local f138_local10 = 1 - f138_local6 --[[ @ 0]]
		local f138_local11 = LUI.clamp( f138_local8, 0, f138_local10 ) --[[ @ 0]]
		local f138_local12 = LUI.clamp( f138_local9, 0, f138_local10 ) --[[ @ 0]]
		CoD.WZUtility.SetMapPanModel( f138_arg0, f138_arg1.mapPan, f138_local11, f138_local12 ) --[[ @ 0]]
		f138_arg1.markerPos:set( {
			x = f138_local1 - (f138_local11 - f138_local8) / f138_local6,
			y = f138_local2 - (f138_local12 - f138_local9) / f138_local6
		} ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.CenterCursorOnPlayer = function ( f139_arg0, f139_arg1 )
	local f139_local0 = Engine[@"hash_4E1D6BCF7D3131C5"]( f139_arg0 ) --[[ @ 0]]
	local f139_local1, f139_local2 = CoD.HUDUtility.TransformWorldPosToCompassRelativePosition( f139_arg0, f139_local0.x, f139_local0.y ) --[[ @ 0]]
	local f139_local3 = Engine[@"GetModelForController"]( f139_arg0 ) --[[ @ 0]]
	f139_local3 = f139_local3.hudItems.warzone --[[ @ 0]]
	local f139_local4 = f139_local3.mapZoom:get() --[[ @ 0]]
	CoD.WZUtility.SetNewZoomInternal( f139_arg0, f139_local3, 1, f139_arg1 ) --[[ @ 0]]
	f139_local3.markerPos:set( {
		x = f139_local1,
		y = f139_local2
	} ) --[[ @ 0]]
	CoD.WZUtility.SetNewZoomInternal( f139_arg0, f139_local3, f139_local4, f139_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InventoryIconsToStream = {} --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneInventory", "hudItems.inventory", function ( f140_arg0, f140_arg1 )
	if not f140_arg0.count then
		local f140_local0 = f140_arg0:create( "count" ) --[[ @ 0]]
		f140_local0:set( 0 ) --[[ @ 0]]
	end
	if not f140_arg0.selectedIndex then
		local f140_local0 = f140_arg0:create( "selectedIndex" ) --[[ @ 0]]
		f140_local0:set( 0 ) --[[ @ 0]]
	end
	local f140_local0 = f140_arg0:create( "selectedItemName" ) --[[ @ 0]]
	f140_local0:set( "" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "quickConsumeIndex" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "quickConsumeNetworkId" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "pickedUpItem" ) --[[ @ 0]]
	f140_local0:set( @"hash_0" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "droppedItem" ) --[[ @ 0]]
	f140_local0:set( @"hash_0" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "consumedItem" ) --[[ @ 0]]
	f140_local0:set( @"hash_0" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "cannotEquipItem" ) --[[ @ 0]]
	f140_local0:set( "" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "hasArmor" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "pickedUpWeapon" ) --[[ @ 0]]
	f140_local0:set( @"hash_0" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "droppedWeapon" ) --[[ @ 0]]
	f140_local0:set( @"hash_0" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "canUseQuickInventory" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "canNavigateLeft" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "canNavigateRight" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "canTransferFromStash" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "availableGearCount" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "availableHealthCount" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "availableAttachmentCount" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "availableEquipmentCount" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "availableConsumableCount" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "currentWeaponIndex" ) --[[ @ 0]]
	f140_local0:set( 0 ) --[[ @ 0]]
	f140_arg0:create( "currentWeapon" ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "showAttachments" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "isOpen" ) --[[ @ 0]]
	f140_local0:set( false ) --[[ @ 0]]
	f140_local0 = f140_arg0:create( "inventoryNag" ) --[[ @ 0]]
	local f140_local1 = f140_local0 --[[ @ 0]]
	f140_local0 = f140_local0.set --[[ @ 0]]
	local f140_local2 = f140_arg0.inventoryNag:get() --[[ @ 0]]
	if not f140_local2 then
		f140_local2 = CoD.WZUtility.InventoryNag.NAG_NOT_SEEN --[[ @ 0]]
	end
	f140_local0( f140_local1, f140_local2 ) --[[ @ 0]]
	if not DataSources.WarzoneInventory.currentWeaponSubscriptions then
		DataSources.WarzoneInventory.currentWeaponSubscriptions = {} --[[ @ 0]]
	end
	if not DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1] then
		DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1] = LUI.UIElement.new() --[[ @ 0]]
		DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1].currentForcedImage = nil --[[ @ 0]]
		DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1]:subscribeToModel( f140_arg0.currentWeapon, function ( model )
			if model:get() then
				if DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1].currentForcedImage then
					Engine[@"hash_40E76D1EBA02208C"]( DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1].currentForcedImage ) --[[ @ 0]]
				end
				local f141_local0 = CoD.WZUtility.GetPreviewImageLarge( model:get() ) --[[ @ 0]]
				if f141_local0 then
					f141_local0 = Engine[@"hash_1BF99001028052B9"]( f141_local0 ) --[[ @ 0]]
				end
				if f141_local0 ~= nil and f141_local0 ~= @"hash_0" then
					Engine[@"hash_8A31148EE1BE3B1"]( f141_local0 ) --[[ @ 0]]
					DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1].currentForcedImage = f141_local0 --[[ @ 0]]
				end
			end
		end ) --[[ @ 0]]
		DataSources.WarzoneInventory.currentWeaponSubscriptions[f140_arg1]:subscribeToModel( f140_arg0.pickedUpItem, function ( model )
			if model:get() and model:get() ~= @"hash_0" then
				local f142_local0 = DataSources.WarzoneInventory.getModel( f140_arg1 ) --[[ @ 0]]
				if f142_local0.inventoryNag:get() == CoD.WZUtility.InventoryNag.NAG_NOT_SEEN then
					f142_local0.inventoryNag:set( CoD.WZUtility.InventoryNag.NAG_VISIBLE ) --[[ @ 0]]
				end
			end
		end ) --[[ @ 0]]
	end
	if not f140_arg0.resourceCount then
		f140_local0 = f140_arg0:create( "resourceCount" ) --[[ @ 0]]
		f140_local0:set( 0 ) --[[ @ 0]]
	end
	if not f140_arg0.shardCount then
		f140_local0 = f140_arg0:create( "shardCount" ) --[[ @ 0]]
		f140_local0:set( 0 ) --[[ @ 0]]
	end
	f140_arg0:create( "firstFreeSlot" ) --[[ @ 0]]
end, false, {
	prepare = function ( f143_arg0, f143_arg1, f143_arg2 )
		f143_arg1._items = {} --[[ @ 0]]
		if not f143_arg1._rootModel then
			f143_arg1._rootModel = DataSources.WarzoneInventory.getModel( f143_arg0 ) --[[ @ 0]]
			f143_arg1:subscribeToModel( f143_arg1._rootModel.count, function ()
				f143_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f143_arg1:subscribeToModel( f143_arg1._rootModel.filledSlots, function ()
				f143_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f143_arg1._globalItemSubscriptions = {} --[[ @ 0]]
			f143_arg1._itemSubscriptions = {} --[[ @ 0]]
		end
		local f143_local0 = {
			equipment = 0,
			armor = 0,
			health = 0,
			attachment = 0
		} --[[ @ 0]]
		local f143_local1 = {} --[[ @ 0]]
		local f143_local2 = false --[[ @ 0]]
		local f143_local3 = 0 --[[ @ 0]]
		local f143_local4 = false --[[ @ 0]]
		local f143_local5 = f143_arg1._rootModel.count:get() or 0 --[[ @ 0]]
		for f143_local6 = 0 --[[ @ 0]], CoD.WZUtility.InventorySize.ITEM_WORLD_PLAYER_INVENTORY_SIZE_BACKPACK - 1, 1 do
			local f143_local9 = f143_arg1._rootModel["item" .. f143_local6] --[[ @ 0]]
			if not f143_arg1._globalItemSubscriptions[f143_local6] then
				f143_arg1._globalItemSubscriptions[f143_local6] = true --[[ @ 0]]
				f143_arg1:subscribeToModel( f143_local9:create( "quickEquip" ), function ()
					f143_arg1:updateDataSource( false, true ) --[[ @ 0]]
				end, false ) --[[ @ 0]]
			end
			if not f143_arg1.filter or f143_arg1.filter( f143_local9 ) then
				if not f143_arg1._itemSubscriptions[f143_local6] then
					f143_arg1._itemSubscriptions[f143_local6] = true --[[ @ 0]]
					f143_arg1:subscribeToModel( f143_local9:create( "assetName" ), function ( model )
						local f147_local0 = {
							damage = 0,
							range = 0,
							fireRate = 0,
							accuracy = 0,
							valid = false
						} --[[ @ 0]]
						local f147_local1 = model and model:get() --[[ @ 0]]
						if f147_local1 ~= nil then
							local f147_local2 = CoD.CACUtility.GetUnlockableItemInfoByAssetHash( f147_local1, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
							if f147_local2 ~= nil and f147_local2.attributesTable then
								f147_local0 = {
									damage = f147_local2.attributesTable.damage,
									range = f147_local2.attributesTable.range,
									fireRate = f147_local2.attributesTable.fireRate,
									accuracy = f147_local2.attributesTable.accuracy,
									valid = true
								} --[[ @ 0]]
							end
						end
						local f147_local2 = f143_local9:create( "attributes" ) --[[ @ 0]]
						for f147_local6, f147_local7 in pairs( f147_local0 ) --[[ @ 0]] do
							local f147_local8 = f147_local2:create( f147_local6 ) --[[ @ 0]]
							f147_local8:set( f147_local7 ) --[[ @ 0]]
						end
					end, true ) --[[ @ 0]]
					f143_arg1:subscribeToModel( f143_local9:create( "equipped" ), function ()
						f143_arg1:updateDataSource( false, true ) --[[ @ 0]]
						CoD.WZUtility.UpdateSelectedItemName( f143_arg1.menu, f143_arg0 ) --[[ @ 0]]
					end, false ) --[[ @ 0]]
					f143_arg1:subscribeToModel( f143_local9:create( "notAvailable" ), function ()
						f143_arg1:updateDataSource( false, true ) --[[ @ 0]]
						CoD.WZUtility.UpdateSelectedItemName( f143_arg1.menu, f143_arg0 ) --[[ @ 0]]
					end, false ) --[[ @ 0]]
				end
				if f143_local9.backpackSlot and f143_local9.backpackSlot:get() == 1 and not f143_local4 then
					f143_local4 = true --[[ @ 0]]
					local f143_local10 = f143_local9:create( "firstBackpackItem" ) --[[ @ 0]]
					f143_local10:set( true ) --[[ @ 0]]
				else
					local f143_local10 = f143_local9:create( "firstBackpackItem" ) --[[ @ 0]]
					f143_local10:set( false ) --[[ @ 0]]
				end
				local f143_local10 = f143_local9.icon --[[ @ 0]]
				if f143_local10 then
					f143_local10 = f143_local9.icon:get() --[[ @ 0]]
				end
				CoD.BaseUtility.AddForcedImageToTable( f143_local10, f143_local1 ) --[[ @ 0]]
				table.insert( f143_arg1._items, f143_local9 ) --[[ @ 0]]
			end
			local f143_local10 = CoD.SafeGetModelValue( f143_local9, "type" ) --[[ @ 0]]
			if f143_local10 then
				if f143_local0[f143_local10] ~= nil then
					if f143_local10 ~= "attachment" or CoD.SafeGetModelValue( f143_local9, "availableAction" ) ~= CoD.WZUtility.ItemAvailableAction.NONE then
						f143_local0[f143_local10] = f143_local0[f143_local10] + 1 --[[ @ 0]]
						f143_local2 = true --[[ @ 0]]
					end
				elseif f143_local10 == "generic" and CoD.SafeGetModelValue( f143_local9, "availableAction" ) == CoD.WZUtility.ItemAvailableAction.CONSUME then
					f143_local2 = true --[[ @ 0]]
					f143_local3 = f143_local3 + 1 --[[ @ 0]]
				end
			end
		end
		CoD.WZUtility.InventoryIconsToStream = CoD.BaseUtility.ForceStreamHelper( CoD.WZUtility.InventoryIconsToStream, f143_local1 ) --[[ @ 0]]
		f143_arg1._rootModel.availableGearCount:set( f143_local0.armor ) --[[ @ 0]]
		f143_arg1._rootModel.availableHealthCount:set( f143_local0.health ) --[[ @ 0]]
		f143_arg1._rootModel.availableAttachmentCount:set( f143_local0.attachment ) --[[ @ 0]]
		f143_arg1._rootModel.availableEquipmentCount:set( f143_local0.equipment ) --[[ @ 0]]
		f143_arg1._rootModel.availableConsumableCount:set( f143_local3 ) --[[ @ 0]]
	end,
	getCount = function ( f150_arg0 )
		return f150_arg0._items and #f150_arg0._items or 0
	end,
	getItem = function ( f151_arg0, f151_arg1, f151_arg2 )
		return f151_arg1._items[f151_arg2]
	end,
	getSpacerAfterColumn = function ( f152_arg0, f152_arg1, f152_arg2 )
		if f152_arg0._firstBackPackSpacerDistance then
			local f152_local0 = f152_arg0._items[f152_arg1 + 1] --[[ @ 0]]
			if f152_local0 and f152_local0.firstBackpackItem:get() then
				return f152_arg0._firstBackPackSpacerDistance
			end
		end
		return 0
	end
} ) --[[ @ 0]]
CoD.WZUtility.SetupItemObjectives = function ( f153_arg0, f153_arg1, f153_arg2 )
	local f153_local0 = f153_arg1:getModel() --[[ @ 0]]
	local f153_local1 = f153_local0 and f153_local0.unlockableItemRef --[[ @ 0]]
	if f153_arg1.objectiveCompletedSubscription then
		f153_arg1:removeSubscription( f153_arg1.objectiveCompletedSubscription ) --[[ @ 0]]
		f153_arg1.objectiveCompletedSubscription = nil --[[ @ 0]]
	end
	if f153_local1 and f153_local1:get() ~= @"hash_0" then
		local f153_local2 = Engine[@"hash_68FF94BB44442412"]( f153_local1:get(), Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
		local f153_local3 = Engine[@"GetModelForController"]( f153_arg0 ) --[[ @ 0]]
		f153_local3 = f153_local3.questInfo --[[ @ 0]]
		local f153_local4 = f153_local3 and f153_local3[f153_local2] --[[ @ 0]]
		if not f153_local4 then
			return 
		end
		f153_arg1.objectiveCompletedSubscription = f153_arg1:subscribeToModel( f153_local4:create( "completed" ), function ( model )
			f153_arg2:updateElementState( f153_arg1, {
				name = "model_validation",
				menu = f153_arg2,
				controller = f153_arg0,
				modelValue = model:get(),
				modelName = "completed"
			} ) --[[ @ 0]]
		end, true ) --[[ @ 0]]
		if f153_arg1.WarzoneInventoryUnlockMissionObjective then
			f153_arg1.WarzoneInventoryUnlockMissionObjective:setModel( f153_local4, f153_arg0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.UpdateUnlockQuestState = function ( f155_arg0, f155_arg1 )
	local f155_local0 = CoD.GetScriptNotifyData( f155_arg1 ) --[[ @ 0]]
	local f155_local1 = f155_local0[1] --[[ @ 0]]
	local f155_local2 = f155_local0[2] --[[ @ 0]]
	local f155_local3 = Engine[@"GetModelForController"]( f155_arg0 ) --[[ @ 0]]
	f155_local3 = f155_local3:create( "questInfo" ) --[[ @ 0]]
	local f155_local4 = f155_local3 and f155_local3:create( f155_local2 ) --[[ @ 0]]
	if not f155_local4 then
		return 
	end
	local f155_local5 = 1 --[[ @ 0]]
	for f155_local6 = 3 --[[ @ 0]], #f155_local0, 1 do
		local f155_local9 = f155_local4["objective" .. f155_local6 - 2] --[[ @ 0]]
		if not f155_local9 then
			f155_local9 = f155_local4:create( "objective" .. f155_local6 - 2 ) --[[ @ 0]]
			f155_local9:create( "state" ) --[[ @ 0]]
		end
		local f155_local10 = f155_local9 and f155_local9.state --[[ @ 0]]
		if f155_local10 then
			f155_local10:set( f155_local0[f155_local6] ) --[[ @ 0]]
			if f155_local0[f155_local6] ~= CoD.WZUtility.ObjectiveStates.COMPLETED then
				f155_local5 = 0 --[[ @ 0]]
			end
		end
	end
	if f155_local1 == CoD.WZUtility.QuestItemUpdateTypes.CHARACTER_UNLOCK_UPDATE_ALREADY_COMPLETED then
		f155_local6 = f155_local4:create( "completed" ) --[[ @ 0]]
		f155_local6:set( 2 ) --[[ @ 0]]
	else
		local f155_local6 = f155_local4:create( "completed" ) --[[ @ 0]]
		if f155_local6:get() ~= 2 then
			f155_local6 = f155_local4:create( "completed" ) --[[ @ 0]]
			f155_local6:set( f155_local5 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsQuestItem = function ( f156_arg0, f156_arg1 )
	local f156_local0 = f156_arg0:getModel() --[[ @ 0]]
	if not f156_local0 then
		return false
	elseif f156_local0.type and f156_local0.type:get() == "quest" then
		return true
	elseif f156_local0.unlockableItemRef and f156_local0.unlockableItemRef:get() ~= @"hash_0" then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.WasQuestItemCompletedPreviously = function ( f157_arg0, f157_arg1 )
	local f157_local0 = f157_arg0:getModel() --[[ @ 0]]
	if not f157_local0 then
		return false
	elseif not f157_local0.unlockableItemRef or f157_local0.unlockableItemRef:get() == @"hash_0" then
		return false
	else
		local f157_local1 = Engine[@"hash_68FF94BB44442412"]( f157_local0.unlockableItemRef:get(), Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
		if f157_local1 == 0 then
			return false
		else
			local f157_local2 = Engine[@"GetModelForController"]( f157_arg1 ) --[[ @ 0]]
			f157_local2 = f157_local2:create( "questInfo" ) --[[ @ 0]]
			local f157_local3 = f157_local2 and f157_local2[f157_local1] --[[ @ 0]]
			local f157_local4 = f157_local3 and f157_local3.completed --[[ @ 0]]
			if not f157_local4 then
				return false
			else
				return f157_local4:get() == 2
			end
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.HackCheckWZNeedsCursorMovement = function ( f158_arg0, f158_arg1 )
	if CoD.isPC and f158_arg1 and f158_arg1.GameEndScoreWZ and f158_arg1.GameEndScoreWZ.currentState ~= "DefaultState" then
		SetAllowCursorMovement( f158_arg1, true ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetDisplayNameFromRef = function ( f159_arg0, f159_arg1 )
	if not f159_arg0 then
		f159_arg0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	end
	if not f159_arg1 or f159_arg1 == "" then
		return @"hash_0"
	end
	local f159_local0 = f159_arg1 --[[ @ 0]]
	if type( f159_local0 ) ~= "xhash" then
		f159_local0 = Engine[@"hash_1C53F8D38DF9042B"]( f159_local0 ) --[[ @ 0]]
	end
	local f159_local1 = CoD.CACUtility.GetUnlockableItemInfo( Engine[@"hash_68FF94BB44442412"]( f159_local0, f159_arg0 ), f159_arg0 ) --[[ @ 0]]
	return f159_local1.displayName
end
 --[[ @ 0]]
CoD.WZUtility.GetPreviewImageLargeFromRef = function ( f160_arg0, f160_arg1 )
	if not f160_arg0 then
		f160_arg0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	end
	if not f160_arg1 then
		return 
	end
	local f160_local0 = f160_arg1 --[[ @ 0]]
	if type( f160_local0 ) ~= "xhash" then
		f160_local0 = Engine[@"hash_1C53F8D38DF9042B"]( f160_local0 ) --[[ @ 0]]
	end
	local f160_local1 = CoD.CACUtility.GetUnlockableItemInfo( Engine[@"hash_68FF94BB44442412"]( f160_local0, f160_arg0 ), f160_arg0 ) --[[ @ 0]]
	return f160_local1.previewImageLarge
end
 --[[ @ 0]]
CoD.WZUtility.GetUnlockMissionString = function ( f161_arg0 )
	local f161_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	local f161_local1 = CoD.CACUtility.GetUnlockableItemInfo( Engine[@"hash_68FF94BB44442412"]( f161_arg0, f161_local0 ), f161_local0 ) --[[ @ 0]]
	if not f161_local1 then
		return @"hash_2C79EA24AB1A2BA"
	elseif f161_local1.itemGroup == "hero" then
		if f161_local1[@"hash_6C190A0450674B42"] == 1 and IsBooleanDvarSet( @"hash_4A5FD7D94CFC9DFD" ) then
			return @"hash_61CEFA3478BFC48F"
		else
			return @"hash_3A1B2CAFC0534BF5"
		end
	else
		return @"hash_440CC7EC370B2641"
	end
end
 --[[ @ 0]]
CoD.WZUtility.ClearInventoryNag = function ( f162_arg0 )
	local f162_local0 = DataSources.WarzoneInventory.getModel( f162_arg0 ) --[[ @ 0]]
	if f162_local0.inventoryNag ~= nil then
		f162_local0.inventoryNag:set( CoD.WZUtility.InventoryNag.NAG_DISMISSED ) --[[ @ 0]]
	else
		local f162_local1 = f162_local0:create( "inventoryNag" ) --[[ @ 0]]
		f162_local1:set( CoD.WZUtility.InventoryNag.NAG_DISMISSED ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.ShouldShowInventoryNag = function ( f163_arg0 )
	local f163_local0 = DataSources.WarzoneInventory.getModel( f163_arg0 ) --[[ @ 0]]
	f163_local0 = f163_local0.inventoryNag --[[ @ 0]]
	return f163_local0 and f163_local0:get() == CoD.WZUtility.InventoryNag.NAG_VISIBLE
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneInventoryGlobal", "hudItems.inventory", function ( f164_arg0, f164_arg1 )
	if not f164_arg0.equipment then
		f164_arg0:create( "health" ) --[[ @ 0]]
		f164_arg0:create( "gear" ) --[[ @ 0]]
		f164_arg0:create( "storage" ) --[[ @ 0]]
		f164_arg0:create( "equipment" ) --[[ @ 0]]
	end
	if not f164_arg0.equipment.slotName then
		local f164_local0 = f164_arg0.health:create( "slotName" ) --[[ @ 0]]
		f164_local0:set( @"hash_148AA8EED3118F2E" ) --[[ @ 0]]
		f164_local0 = f164_arg0.gear:create( "slotName" ) --[[ @ 0]]
		f164_local0:set( @"hash_33613CD7780DA54B" ) --[[ @ 0]]
		f164_local0 = f164_arg0.storage:create( "slotName" ) --[[ @ 0]]
		f164_local0:set( @"hash_4928F118849EE2B9" ) --[[ @ 0]]
		f164_local0 = f164_arg0.equipment:create( "slotName" ) --[[ @ 0]]
		f164_local0:set( @"hash_205A545FA74A9110" ) --[[ @ 0]]
	end
	f164_arg0:create( "initialize" ) --[[ @ 0]]
end, false ) --[[ @ 0]]
CoD.WZUtility.IsDualWeaponUIDisabled = function ()
	local f165_local0 = IsBooleanDvarSet( @"hash_76BE0F6B780186B6" ) --[[ @ 0]]
	if not f165_local0 then
		f165_local0 = not CoD.isPC --[[ @ 0]]
	end
	return f165_local0
end
 --[[ @ 0]]
CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled = function ()
	local f166_local0 = IsBooleanDvarSet( @"hash_74BCABB49DE7CBD1" ) --[[ @ 0]]
	if not f166_local0 then
		f166_local0 = not CoD.isPC --[[ @ 0]]
	end
	return f166_local0
end
 --[[ @ 0]]
CoD.WZUtility.PrepareAttachmentsForWeaponId = function ( f167_arg0, f167_arg1, f167_arg2 )
	local f167_local0 = {
		@"hash_77A5BA2B401E21F",
		@"hash_55CD233DFC9B82A2",
		@"hash_4D4083C0F1E954E5",
		@"hash_A7D7820F10FF00C",
		@"hash_7FFFBEF52142B4AE",
		@"hash_516C441601DA8BEC"
	} --[[ @ 0]]
	f167_arg1._items = {} --[[ @ 0]]
	if not f167_arg1._rootModel then
		f167_arg1._rootModel = DataSources.WarzoneInventory.getModel( f167_arg0 ) --[[ @ 0]]
		if CoD.WZUtility.IsDualWeaponUIDisabled() then
			f167_arg1:subscribeToModel( f167_arg1._rootModel.currentWeaponIndex, function ()
				f167_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
		f167_arg1._itemSubscriptions = {} --[[ @ 0]]
	end
	if f167_arg2 == 0 and CoD.WZUtility.IsDualWeaponUIDisabled() then
		f167_arg2 = f167_arg1._rootModel.currentWeaponIndex:get() --[[ @ 0]]
	end
	local f167_local1 = f167_arg1._rootModel.attachmentCount:get() --[[ @ 0]]
	local f167_local2 = f167_arg2 * f167_local1 --[[ @ 0]]
	for f167_local3 = f167_local2 --[[ @ 0]], f167_local2 + (f167_local1 or 1) - 1, 1 do
		local f167_local6 = f167_arg1._rootModel["attachment" .. f167_local3] --[[ @ 0]]
		if not f167_local6.slotName then
			local f167_local7 = f167_local6:create( "slotName" ) --[[ @ 0]]
			f167_local7:set( f167_local0[f167_local3 - f167_local2 + 1] ) --[[ @ 0]]
		end
		table.insert( f167_arg1._items, f167_local6 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneAttachments", "hudItems.inventory", function ( f169_arg0, f169_arg1 )
	
end, false, {
	prepare = function ( f170_arg0, f170_arg1, f170_arg2 )
		CoD.WZUtility.PrepareAttachmentsForWeaponId( f170_arg0, f170_arg1, 0 ) --[[ @ 0]]
	end,
	getCount = function ( f171_arg0 )
		return f171_arg0._items and #f171_arg0._items or 0
	end,
	getItem = function ( f172_arg0, f172_arg1, f172_arg2 )
		return f172_arg1._items[f172_arg2]
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneStowedAttachments", "hudItems.inventory", function ( f173_arg0, f173_arg1 )
	
end, false, {
	prepare = function ( f174_arg0, f174_arg1, f174_arg2 )
		CoD.WZUtility.PrepareAttachmentsForWeaponId( f174_arg0, f174_arg1, 1 ) --[[ @ 0]]
	end,
	getCount = function ( f175_arg0 )
		return f175_arg0._items and #f175_arg0._items or 0
	end,
	getItem = function ( f176_arg0, f176_arg1, f176_arg2 )
		return f176_arg1._items[f176_arg2]
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneResources", "hudItems.inventory", function ( f177_arg0, f177_arg1 )
	
end, false, {
	prepare = function ( f178_arg0, f178_arg1, f178_arg2 )
		f178_arg1._items = {} --[[ @ 0]]
		if not f178_arg1._rootModel then
			f178_arg1._rootModel = DataSources.WarzoneInventory.getModel( f178_arg0 ) --[[ @ 0]]
			f178_arg1:subscribeToModel( f178_arg1._rootModel.resourceCount, function ()
				f178_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f178_arg1._itemSubscriptions = {} --[[ @ 0]]
		end
		for f178_local0 = 0 --[[ @ 0]], (f178_arg1._rootModel.resourceCount:get() or 1) - 1, 1 do
			table.insert( f178_arg1._items, f178_arg1._rootModel["resource" .. f178_local0] ) --[[ @ 0]]
		end
	end,
	getCount = function ( f180_arg0 )
		return f180_arg0._items and #f180_arg0._items or 0
	end,
	getItem = function ( f181_arg0, f181_arg1, f181_arg2 )
		return f181_arg1._items[f181_arg2]
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneShards", "hudItems.inventory", function ( f182_arg0, f182_arg1 )
	
end, false, {
	prepare = function ( f183_arg0, f183_arg1, f183_arg2 )
		f183_arg1._items = {} --[[ @ 0]]
		if not f183_arg1._rootModel then
			f183_arg1._rootModel = DataSources.WarzoneInventory.getModel( f183_arg0 ) --[[ @ 0]]
			f183_arg1:subscribeToModel( f183_arg1._rootModel.shardCount, function ()
				f183_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f183_arg1:subscribeToModel( f183_arg1._rootModel.filledSlots, function ()
				f183_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f183_arg1._itemSubscriptions = {} --[[ @ 0]]
		end
		for f183_local0 = 0 --[[ @ 0]], (f183_arg1._rootModel.shardCount:get() or 1) - 1, 1 do
			local f183_local3 = f183_arg1._rootModel["shard" .. f183_local0] --[[ @ 0]]
			if not f183_arg1.filter or f183_arg1.filter( f183_local3 ) then
				table.insert( f183_arg1._items, f183_local3 ) --[[ @ 0]]
			end
		end
	end,
	getCount = function ( f186_arg0 )
		return f186_arg0._items and #f186_arg0._items or 0
	end,
	getItem = function ( f187_arg0, f187_arg1, f187_arg2 )
		return f187_arg1._items[f187_arg2]
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneConsumed", "hudItems.inventory.consumed", function ( f188_arg0, f188_arg1 )
	f188_arg0:create( "count" ) --[[ @ 0]]
end, false, {
	prepare = function ( f189_arg0, f189_arg1, f189_arg2 )
		f189_arg1._items = {} --[[ @ 0]]
		if not f189_arg1._rootModel then
			f189_arg1._rootModel = DataSources.WarzoneConsumed.getModel( f189_arg0 ) --[[ @ 0]]
			f189_arg1:subscribeToModel( f189_arg1._rootModel.count, function ()
				f189_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
		local f189_local0 = 0 --[[ @ 0]]
		local f189_local1 = f189_arg1._rootModel.count:get() or 1 --[[ @ 0]]
		local f189_local2 = f189_local1 - 1 --[[ @ 0]]
		if f189_arg1.firstHalf then
			f189_local2 = math.ceil( f189_local1 / 2 ) - 1 --[[ @ 0]]
		elseif f189_arg1.secondHalf then
			f189_local0 = math.ceil( f189_local1 / 2 ) --[[ @ 0]]
		end
		for f189_local3 = f189_local0 --[[ @ 0]], f189_local2, 1 do
			table.insert( f189_arg1._items, f189_arg1._rootModel["item" .. f189_local3] ) --[[ @ 0]]
		end
	end,
	getCount = function ( f191_arg0 )
		return f191_arg0._items and #f191_arg0._items or 0
	end,
	getItem = function ( f192_arg0, f192_arg1, f192_arg2 )
		return f192_arg1._items[f192_arg2]
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneSplitInventory", "hudItems.warzone.splitInventory", function ( f193_arg0 )
	local f193_local0 = f193_arg0:create( "max" ) --[[ @ 0]]
	f193_local0:set( 0 ) --[[ @ 0]]
	f193_local0 = f193_arg0:create( "current" ) --[[ @ 0]]
	f193_local0:set( 0 ) --[[ @ 0]]
	f193_local0 = f193_arg0:create( "canIncrement" ) --[[ @ 0]]
	f193_local0:set( false ) --[[ @ 0]]
	f193_local0 = f193_arg0:create( "canDecrement" ) --[[ @ 0]]
	f193_local0:set( false ) --[[ @ 0]]
end, false, {
	updateIncrementDecrement = function ( f194_arg0 )
		local f194_local0 = DataSources.WarzoneSplitInventory.getModel( f194_arg0 ) --[[ @ 0]]
		f194_local0.canIncrement:set( f194_local0.current:get() < f194_local0.max:get() ) --[[ @ 0]]
		f194_local0.canDecrement:set( f194_local0.current:get() > 1 ) --[[ @ 0]]
	end,
	setupNewMax = function ( f195_arg0, f195_arg1 )
		local f195_local0 = DataSources.WarzoneSplitInventory.getModel( f195_arg0 ) --[[ @ 0]]
		f195_local0.max:set( f195_arg1 ) --[[ @ 0]]
		f195_local0.current:set( math.floor( f195_arg1 / 2 ) ) --[[ @ 0]]
		DataSources.WarzoneSplitInventory.updateIncrementDecrement( f195_arg0 ) --[[ @ 0]]
	end,
	getStepSize = function ( f196_arg0 )
		local f196_local0 = DataSources.WarzoneSplitInventory.getModel( f196_arg0 ) --[[ @ 0]]
		local f196_local1 = f196_local0.max:get() --[[ @ 0]]
		if f196_local1 <= 10 then
			return 1
		elseif f196_local1 <= 50 then
			return 5
		elseif f196_local1 <= 100 then
			return 10
		else
			return 25
		end
	end,
	increment = function ( f197_arg0 )
		local f197_local0 = DataSources.WarzoneSplitInventory.getModel( f197_arg0 ) --[[ @ 0]]
		f197_local0.current:set( math.min( f197_local0.current:get() + DataSources.WarzoneSplitInventory.getStepSize( f197_arg0 ), f197_local0.max:get() ) ) --[[ @ 0]]
		DataSources.WarzoneSplitInventory.updateIncrementDecrement( f197_arg0 ) --[[ @ 0]]
	end,
	decrement = function ( f198_arg0 )
		local f198_local0 = DataSources.WarzoneSplitInventory.getModel( f198_arg0 ) --[[ @ 0]]
		f198_local0.current:set( math.max( f198_local0.current:get() - DataSources.WarzoneSplitInventory.getStepSize( f198_arg0 ), 1 ) ) --[[ @ 0]]
		DataSources.WarzoneSplitInventory.updateIncrementDecrement( f198_arg0 ) --[[ @ 0]]
	end
} ) --[[ @ 0]]
DataSources.WarzoneMapGridHorizontal = ListHelper_SetupDataSource( "WarzoneMapGridHorizontal", function ( f199_arg0 )
	local f199_local0 = {} --[[ @ 0]]
	for f199_local4, f199_local5 in ipairs( {
		"A",
		"B",
		"C",
		"D",
		"E",
		"F",
		"G",
		"H"
	} ) --[[ @ 0]] do
		table.insert( f199_local0, {
			models = {
				text = f199_local5
			}
		} ) --[[ @ 0]]
	end
	return f199_local0
end ) --[[ @ 0]]
DataSources.WarzoneMapGridVertical = ListHelper_SetupDataSource( "WarzoneMapGridVertical", function ( f200_arg0 )
	local f200_local0 = {} --[[ @ 0]]
	for f200_local4, f200_local5 in ipairs( {
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8"
	} ) --[[ @ 0]] do
		table.insert( f200_local0, {
			models = {
				text = f200_local5
			}
		} ) --[[ @ 0]]
	end
	return f200_local0
end ) --[[ @ 0]]
CoD.WZUtility.SetMapZoomModel = function ( f201_arg0, f201_arg1, f201_arg2 )
	Engine[@"hash_6DFE30B5C2E65604"]( f201_arg0, f201_arg2 ) --[[ @ 0]]
	f201_arg1:set( f201_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetMapPanModel = function ( f202_arg0, f202_arg1, f202_arg2, f202_arg3 )
	Engine[@"hash_2D51C8FE679C9A35"]( f202_arg0, f202_arg2, f202_arg3 ) --[[ @ 0]]
	f202_arg1:set( {
		x = f202_arg2,
		y = f202_arg3
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InitColumnHeadingsForScaleAndPan = function ( f203_arg0, f203_arg1, f203_arg2 )
	local f203_local0 = Engine[@"GetModelForController"]( f203_arg0 ) --[[ @ 0]]
	f203_local0 = f203_local0.hudItems.warzone --[[ @ 0]]
	local f203_local1, f203_local2, f203_local3, f203_local4 = f203_arg2:getLocalLeftRight() --[[ @ 0]]
	f203_arg1:subscribeToModel( f203_local0.mapPan, function ( model )
		local f204_local0, f204_local1 = model:get() --[[ @ 0]]
		local f204_local2 = f203_local0.mapZoom:get() --[[ @ 0]]
		f203_arg2:setLeftRight( -f204_local0 * f204_local2, (1 - f204_local0) * f204_local2, 0, 0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f203_arg1:subscribeToModel( f203_local0.mapZoom, function ( model )
		local f205_local0, f205_local1 = f203_local0.mapPan:get() --[[ @ 0]]
		local f205_local2 = model:get() --[[ @ 0]]
		f203_arg2:setLeftRight( -f205_local0 * f205_local2, (1 - f205_local0) * f205_local2, 0, 0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	local f203_local5 = f203_arg1 --[[ @ 0]]
	local f203_local6 = f203_arg1.subscribeToModel --[[ @ 0]]
	local f203_local7 = Engine[@"GetModelForController"]( f203_arg0 ) --[[ @ 0]]
	f203_local6( f203_local5, f203_local7["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]], function ( f206_arg0 )
		if Engine[@"IsVisibilityBitSet"]( f203_arg0, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) then
			CoD.WZUtility.DisableZoomIn[f203_arg0] = false --[[ @ 0]]
			CoD.WZUtility.DisableZoomOut[f203_arg0] = false --[[ @ 0]]
			if CoD.ModelUtility.AreButtonModelValueBitsSet( f203_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], Enum[@"LUIButtonFlags"][@"hash_5253A6F6CAAAE464"] ) then
				CoD.WZUtility.DisableZoomIn[f203_arg0] = true --[[ @ 0]]
			end
			if CoD.ModelUtility.AreButtonModelValueBitsSet( f203_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], Enum[@"LUIButtonFlags"][@"hash_5253A6F6CAAAE464"] ) then
				CoD.WZUtility.DisableZoomOut[f203_arg0] = true --[[ @ 0]]
			end
		end
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InitWidgetForMouseDrag = function ( f207_arg0, f207_arg1, f207_arg2 )
	local f207_local0 = {
		x = nil,
		y = nil
	} --[[ @ 0]]
	local f207_local1 = function ( f208_arg0, f208_arg1, f208_arg2, f208_arg3 )
		local f208_local0 = f207_local0 --[[ @ 0]]
		local f208_local1 = f207_local0 --[[ @ 0]]
		local f208_local2 = f208_arg1.x --[[ @ 0]]
		f208_local1.y = f208_arg1.y --[[ @ 0]]
		f208_local0.x = f208_local2 --[[ @ 0]]
		f208_arg3:CaptureMouseAndLockFocus( f208_arg2, f208_arg0 ) --[[ @ 0]]
		f208_arg0.__lockedFocus = true --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f207_local2 = function ( f209_arg0, f209_arg1, f209_arg2, f209_arg3 )
		local f209_local0 = f207_local0 --[[ @ 0]]
		local f209_local1 = f207_local0 --[[ @ 0]]
		local f209_local2 = nil --[[ @ 0]]
		f209_local1.y = nil --[[ @ 0]]
		f209_local0.x = f209_local2 --[[ @ 0]]
		f209_arg3:CaptureMouseAndLockFocus( f209_arg2, nil ) --[[ @ 0]]
		f209_arg0.lockedFocus = false --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f207_local3 = function ( f210_arg0, f210_arg1, f210_arg2 )
		if f207_local0.x ~= nil then
			local f210_local0 = Engine[@"GetModelForController"]( f210_arg2 ) --[[ @ 0]]
			f210_local0 = f210_local0.hudItems.warzone --[[ @ 0]]
			local f210_local1 = f210_local0.markerPos --[[ @ 0]]
			local f210_local2 = f207_local0.x - f210_arg1.x --[[ @ 0]]
			local f210_local3 = f207_local0.y - f210_arg1.y --[[ @ 0]]
			local f210_local4 = 0 * math.abs( f210_local2 ) / f210_local0.mapZoom:get() --[[ @ 0]]
			local f210_local5 = 0 * math.abs( f210_local3 ) / f210_local0.mapZoom:get() --[[ @ 0]]
			local f210_local6 = 1 - 1 / f210_local0.mapZoom:get() --[[ @ 0]]
			local f210_local7, f210_local8 = f210_local0.mapPan:get() --[[ @ 0]]
			local f210_local9 = 0 --[[ @ 0]]
			local f210_local10 = 0 --[[ @ 0]]
			if f210_local2 > 0 then
				f210_local9 = f210_local7 + f210_local4 --[[ @ 0]]
			else
				f210_local9 = f210_local7 - f210_local4 --[[ @ 0]]
			end
			if f210_local3 > 0 then
				f210_local10 = f210_local8 + f210_local5 --[[ @ 0]]
			else
				f210_local10 = f210_local8 - f210_local5 --[[ @ 0]]
			end
			CoD.WZUtility.SetMapPanModel( f210_arg2, f210_local0.mapPan, LUI.clamp( f210_local9, 0, f210_local6 ), LUI.clamp( f210_local10, 0, f210_local6 ) ) --[[ @ 0]]
			local f210_local11, f210_local12, f210_local13, f210_local14 = Engine[@"hash_3695399A0E06EC35"]( f210_arg2, f210_arg0.ScoreboardGameStatusMap ) --[[ @ 0]]
			local f210_local15, f210_local16 = f210_local1:get() --[[ @ 0]]
			f210_local1:set( {
				x = LUI.clamp( f210_local15 + f210_local2 / (f210_local11 + f210_local13) / 2, 0.02, 0.98 ),
				y = LUI.clamp( f210_local16 + f210_local3 / (f210_local12 + f210_local14) / 2, 0.02, 0.98 )
			} ) --[[ @ 0]]
			local f210_local17 = f207_local0 --[[ @ 0]]
			local f210_local18 = f207_local0 --[[ @ 0]]
			local f210_local19 = f210_arg1.x --[[ @ 0]]
			f210_local18.y = f210_arg1.y --[[ @ 0]]
			f210_local17.x = f210_local19 --[[ @ 0]]
			f210_local17 = f207_local0 --[[ @ 0]]
			f210_local18 = f207_local0 --[[ @ 0]]
			f210_local19 = f210_arg1.x --[[ @ 0]]
			f210_local18.y = f210_arg1.y --[[ @ 0]]
			f210_local17.x = f210_local19 --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f207_local4 = function ( f211_arg0, f211_arg1, f211_arg2 )
		if f211_arg0.__lockedFocus then
			f211_arg2:CaptureMouseAndLockFocus( f211_arg1, nil ) --[[ @ 0]]
			f211_arg0.__lockedFocus = false --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f207_local5 = function ( f212_arg0 )
		if f212_arg0.__lockedFocus then
			f212_arg0.__lockedFocus = false --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f207_arg0:setHandleMouse( true ) --[[ @ 0]]
	f207_arg0:registerEventHandler( "rightmousedown", function ( element, event )
		f207_local1( element, event, f207_arg1, f207_arg2 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f207_arg0:registerEventHandler( "rightmouseup", function ( element, event )
		f207_local2( element, event, f207_arg1, f207_arg2 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f207_arg0:registerEventHandler( "rightmousedrag", function ( element, event )
		f207_local3( element, event, f207_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f207_arg0:registerEventHandler( "lose_focus", function ( element, event )
		f207_local4( element, f207_arg1, f207_arg2 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f207_arg0:registerEventHandler( "mouse_capture_lost", function ( element, event )
		f207_local5( element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f207_arg0.__onBorderClose = function ( f218_arg0, f218_arg1, f218_arg2 )
		if f218_arg0.__lockedFocus then
			f218_arg2:CaptureMouseAndLockFocus( f218_arg1, nil ) --[[ @ 0]]
			f218_arg0.__lockedFocus = false --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( f207_arg0, "close", f207_arg0.__onBorderClose ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InitWidgetForScaleAndPan = function ( f219_arg0, f219_arg1 )
	local f219_local0 = Engine[@"GetModelForController"]( f219_arg0 ) --[[ @ 0]]
	f219_local0 = f219_local0.hudItems.warzone --[[ @ 0]]
	local f219_local1, f219_local2, f219_local3, f219_local4 = f219_arg1:getLocalTopBottom() --[[ @ 0]]
	local f219_local5 = f219_local4 - f219_local3 - 70 --[[ @ 0]]
	f219_arg1._alteredPosition = false --[[ @ 0]]
	f219_arg1._currentTopPx = f219_local3 --[[ @ 0]]
	f219_arg1._currentBottomPx = f219_local4 --[[ @ 0]]
	local f219_local6 = function ( f220_arg0, f220_arg1, f220_arg2 )
		local f220_local0 = f219_local5 * f220_arg2 - CoD.WZUtility.ScreenHeight --[[ @ 0]]
		if f220_local0 > 0 then
			local f220_local1 = 0 --[[ @ 0]]
			if f220_arg1 * f220_arg2 < 0.5 then
				f220_local1 = f220_local0 * 0.5 --[[ @ 0]]
			elseif f220_arg2 - 0.5 < f220_arg1 * f220_arg2 then
				f220_local1 = -f220_local0 * 0.5 --[[ @ 0]]
			else
				f220_local1 = f220_local0 * 0.5 - f220_local0 * (f220_arg1 * f220_arg2 - 0.5) / (f220_arg2 - 1) --[[ @ 0]]
			end
			f219_arg1._currentTopPx = f219_local3 + f220_local1 --[[ @ 0]]
			f219_arg1._currentBottomPx = f219_local4 + f220_local1 --[[ @ 0]]
			f219_arg1:setTopBottom( f219_local1, f219_local2, f219_arg1._currentTopPx, f219_arg1._currentBottomPx ) --[[ @ 0]]
			f219_arg1._alteredPosition = true --[[ @ 0]]
		elseif f219_arg1._alteredPosition then
			f219_arg1:setTopBottom( f219_local1, f219_local2, f219_local3, f219_local4 ) --[[ @ 0]]
			f219_arg1._currentTopPx = f219_local3 --[[ @ 0]]
			f219_arg1._currentBottomPx = f219_local4 --[[ @ 0]]
			f219_arg1._alteredPosition = false --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f219_arg1:subscribeToModel( f219_local0.markerPos, function ( model )
		local f221_local0 = math.min( f219_local0.mapZoom:get(), CoD.WZUtility.MaxWidgetScaleFactor ) --[[ @ 0]]
		local f221_local1, f221_local2 = model:get() --[[ @ 0]]
		f219_local6( f221_local1, f221_local2, f221_local0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f219_arg1:subscribeToModel( f219_local0.mapZoom, function ( model )
		local f222_local0 = math.min( model:get(), CoD.WZUtility.MaxWidgetScaleFactor ) --[[ @ 0]]
		f219_arg1:setScale( f222_local0, f222_local0 ) --[[ @ 0]]
		local f222_local1, f222_local2 = f219_local0.markerPos:get() --[[ @ 0]]
		f219_local6( f222_local1, f222_local2, f222_local0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InitRowHeadingsForScaleAndPan = function ( f223_arg0, f223_arg1, f223_arg2 )
	local f223_local0 = Engine[@"GetModelForController"]( f223_arg0 ) --[[ @ 0]]
	f223_local0 = f223_local0.hudItems.warzone --[[ @ 0]]
	local f223_local1, f223_local2, f223_local3, f223_local4 = f223_arg2:getLocalTopBottom() --[[ @ 0]]
	f223_arg1:subscribeToModel( f223_local0.mapPan, function ( model )
		local f224_local0, f224_local1 = model:get() --[[ @ 0]]
		local f224_local2 = f223_local0.mapZoom:get() --[[ @ 0]]
		f223_arg2:setTopBottom( -f224_local1 * f224_local2, (1 - f224_local1) * f224_local2, 0, 0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f223_arg1:subscribeToModel( f223_local0.mapZoom, function ( model )
		local f225_local0, f225_local1 = f223_local0.mapPan:get() --[[ @ 0]]
		local f225_local2 = model:get() --[[ @ 0]]
		f223_arg2:setTopBottom( -f225_local1 * f225_local2, (1 - f225_local1) * f225_local2, 0, 0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.Normalize = function ( f226_arg0 )
	local f226_local0 = math.sqrt( f226_arg0.x * f226_arg0.x + f226_arg0.y * f226_arg0.y ) --[[ @ 0]]
	f226_arg0.x = f226_arg0.x / f226_local0 --[[ @ 0]]
	f226_arg0.y = f226_arg0.y / f226_local0 --[[ @ 0]]
	return f226_arg0
end
 --[[ @ 0]]
CoD.WZUtility.InitPlayerMarker = function ( f227_arg0, f227_arg1, f227_arg2, f227_arg3 )
	local f227_local0 = DataSources.RightStick.getModel( f227_arg3 ) --[[ @ 0]]
	local f227_local1 = 0.01 --[[ @ 0]]
	local f227_local2, f227_local3, f227_local4, f227_local5 = f227_arg1:getLocalLeftRight() --[[ @ 0]]
	local f227_local6 = f227_local5 - f227_local4 --[[ @ 0]]
	local f227_local7 = f227_local4 --[[ @ 0]]
	local f227_local8, f227_local9, f227_local10, f227_local11 = f227_arg1:getLocalTopBottom() --[[ @ 0]]
	local f227_local12 = f227_local11 - f227_local10 --[[ @ 0]]
	local f227_local13 = f227_local10 --[[ @ 0]]
	local f227_local14, f227_local15, f227_local16, f227_local17 = f227_arg2:getLocalLeftRight() --[[ @ 0]]
	local f227_local18 = f227_local16 - f227_local6 * 0.5 --[[ @ 0]]
	local f227_local19 = f227_local17 - f227_local6 * 0.5 - f227_local18 --[[ @ 0]]
	local f227_local20, f227_local21, f227_local22, f227_local23 = f227_arg2:getLocalTopBottom() --[[ @ 0]]
	local f227_local24 = f227_local22 - f227_local12 --[[ @ 0]]
	local f227_local25 = f227_local23 - f227_local12 - f227_local24 --[[ @ 0]]
	local f227_local26 = Engine[@"GetModelForController"]( f227_arg3 ) --[[ @ 0]]
	f227_local26 = f227_local26.hudItems.warzone --[[ @ 0]]
	local f227_local27 = f227_local26.markerPos --[[ @ 0]]
	f227_local27:set( {
		x = 0.5,
		y = 0.5
	} ) --[[ @ 0]]
	f227_arg1:addElement( LUI.UITimer.newElementTimer( 0, false, function ()
		if IsSelfInState( f227_arg1, "Visible" ) then
			local f228_local0 = f227_local0.X:get() --[[ @ 0]]
			local f228_local1 = f227_local0.Y:get() --[[ @ 0]]
			if f228_local0 ~= 0 or f228_local1 ~= 0 then
				local f228_local2, f228_local3 = f227_local27:get() --[[ @ 0]]
				local f228_local4 = f228_local2 + f228_local0 * f227_local1 --[[ @ 0]]
				local f228_local5 = f228_local3 - f228_local1 * f227_local1 --[[ @ 0]]
				local f228_local6 = f228_local4 - f228_local2 --[[ @ 0]]
				local f228_local7 = f228_local5 - f228_local3 --[[ @ 0]]
				local f228_local8 = 1 / f227_local26.mapZoom:get() --[[ @ 0]]
				local f228_local9 = f228_local4 - 0.5 --[[ @ 0]]
				local f228_local10 = (f228_local5 - 0.5) * -1 --[[ @ 0]]
				local f228_local11 = f228_local9 * f228_local9 --[[ @ 0]]
				local f228_local12 = f228_local10 * f228_local10 --[[ @ 0]]
				local f228_local13 = {
					x = f228_local0,
					y = f228_local1
				} --[[ @ 0]]
				local f228_local14 = {
					x = f228_local9,
					y = f228_local10
				} --[[ @ 0]]
				f228_local13 = CoD.WZUtility.Normalize( f228_local13 ) --[[ @ 0]]
				f228_local14 = CoD.WZUtility.Normalize( f228_local14 ) --[[ @ 0]]
				local f228_local15 = f228_local13.x * f228_local14.x --[[ @ 0]]
				local f228_local16 = f228_local13.y * f228_local14.y --[[ @ 0]]
				local f228_local17 = 0.8 --[[ @ 0]]
				local f228_local18 = 0.2 * f228_local8 * 0.05 --[[ @ 0]]
				local f228_local19 = f228_local17 --[[ @ 0]]
				local f228_local20 = f228_local18 --[[ @ 0]]
				local f228_local21, f228_local22 = f227_local26.mapPan:get() --[[ @ 0]]
				local f228_local23 = 1 - 1 / f227_local26.mapZoom:get() --[[ @ 0]]
				local f228_local24 --[[ @ 0]]
				if (f228_local0 >= 0 or f228_local21 <= 0) and (f228_local0 <= 0 or f228_local21 >= f228_local23) then
					f228_local24 = false --[[ @ 0]]
				else
					f228_local24 = true --[[ @ 0]]
				end
				local f228_local25 --[[ @ 0]]
				if (-f228_local1 >= 0 or f228_local22 <= 0) and (-f228_local1 <= 0 or f228_local22 >= f228_local23) then
					f228_local25 = false --[[ @ 0]]
				else
					f228_local25 = true --[[ @ 0]]
				end
				local f228_local26 = 0.16 --[[ @ 0]]
				if f228_local24 then
					if f228_local15 > 0 then
						local f228_local27 = LUI.clamp( f228_local11 / f228_local26, 0, 1 ) * f228_local15 --[[ @ 0]]
						f228_local17 = f228_local17 - 0.7 * f228_local27 --[[ @ 0]]
						f228_local18 = f228_local18 + f228_local18 * 0.8 * f228_local27 --[[ @ 0]]
					else
						f228_local18 = f228_local18 * 0.8 --[[ @ 0]]
					end
				end
				if f228_local25 then
					if f228_local16 > 0 then
						local f228_local27 = LUI.clamp( f228_local12 / f228_local26, 0, 1 ) * f228_local16 --[[ @ 0]]
						f228_local19 = f228_local19 - 0.7 * f228_local27 --[[ @ 0]]
						f228_local20 = f228_local20 + f228_local20 * 0.8 * f228_local27 --[[ @ 0]]
					else
						f228_local20 = f228_local20 * 0.8 --[[ @ 0]]
					end
				end
				f228_local4 = f228_local2 + f228_local6 * f228_local17 --[[ @ 0]]
				f228_local5 = f228_local3 + f228_local7 * f228_local19 --[[ @ 0]]
				f228_local21 = f228_local21 + f228_local0 * f228_local18 --[[ @ 0]]
				f228_local22 = f228_local22 - f228_local1 * f228_local20 --[[ @ 0]]
				f227_local27:set( {
					x = LUI.clamp( f228_local4, 0.02, 0.98 ),
					y = LUI.clamp( f228_local5, 0.02, 0.98 )
				} ) --[[ @ 0]]
				CoD.WZUtility.SetMapPanModel( f227_arg3, f227_local26.mapPan, LUI.clamp( f228_local21, 0, f228_local23 ), LUI.clamp( f228_local22, 0, f228_local23 ) ) --[[ @ 0]]
			end
		end
	end ) ) --[[ @ 0]]
	f227_arg1:subscribeToModel( f227_local27, function ()
		local f229_local0, f229_local1 = f227_local27:get() --[[ @ 0]]
		f227_local7 = f227_local18 + f229_local0 * f227_local19 --[[ @ 0]]
		f227_local13 = f227_local24 + f229_local1 * f227_local25 --[[ @ 0]]
		f227_arg1:setLeftRight( f227_local2, f227_local3, f227_local7, f227_local7 + f227_local6 ) --[[ @ 0]]
		f227_arg1:setTopBottom( f227_local8, f227_local9, f227_local13, f227_local13 + f227_local12 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f227_arg1:subscribeToGlobalModel( f227_arg3, "PerController", "scriptNotify", function ( model )
		local f230_local0 = f227_arg0 --[[ @ 0]]
		local f230_local1 = CoD.GetScriptNotifyData( model ) --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"teammate_waypoint_placed" ) then
			local f230_local2 = f230_local1[1] --[[ @ 0]]
			local f230_local3, f230_local4 = CoD.HUDUtility.TransformCompassRelativePositionToWorldPos( f227_arg3, f230_local1[2] / 999, f230_local1[3] / 999 ) --[[ @ 0]]
			Engine[@"SendClientScriptNotify"]( f227_arg3, "teammate_waypoint_placed", {
				clientNum = f230_local2,
				localClientNum = Engine[@"GetLocalClientNum"]( f227_arg3 ),
				xCoord = f230_local3,
				yCoord = f230_local4
			} ) --[[ @ 0]]
			local f230_local5 = Engine[@"hash_E4D2F32833CFA6C"]( f230_local2 ) --[[ @ 0]]
			local f230_local6 = f230_local5:create( "isMarkerIconPlaced" ) --[[ @ 0]]
			f230_local6:set( true ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsParamModelEqualToHashString( model, @"teammate_waypoint_removed" ) then
			local f230_local2 = f230_local1[1] --[[ @ 0]]
			Engine[@"SendClientScriptNotify"]( f227_arg3, "teammate_waypoint_removed", {
				clientNum = f230_local2,
				localClientNum = Engine[@"GetLocalClientNum"]( f227_arg3 )
			} ) --[[ @ 0]]
			local f230_local4 = Engine[@"hash_E4D2F32833CFA6C"]( f230_local2 ) --[[ @ 0]]
			local f230_local7 = f230_local4:create( "isMarkerIconPlaced" ) --[[ @ 0]]
			f230_local7:set( false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.CheckAndSetInputBlocker = function ( f231_arg0, f231_arg1, f231_arg2, f231_arg3 )
	if f231_arg0._ignoreInputTimer then
		return false
	else
		f231_arg0._ignoreInputTimer = LUI.UITimer.newElementTimer( f231_arg1, true, function ()
			f231_arg0._ignoreInputTimer = nil --[[ @ 0]]
			f231_arg2:set( f231_arg3 ) --[[ @ 0]]
		end ) --[[ @ 0]]
		f231_arg0:addElement( f231_arg0._ignoreInputTimer ) --[[ @ 0]]
		return true
	end
end
 --[[ @ 0]]
CoD.WZUtility.WaypointStatus = LuaEnum.createEnum( "ALLOW_PLACEMENT", "ALLOW_DELETION", "POST_PLACEMENT_DELAY", "POST_DELETION_DELAY" ) --[[ @ 0]]
CoD.WZUtility.PlaceMarker = function ( f233_arg0, f233_arg1, f233_arg2 )
	local f233_local0 = Engine[@"GetModelForController"]( f233_arg0 ) --[[ @ 0]]
	f233_local0 = f233_local0.hudItems.waypointStatus --[[ @ 0]]
	if not CoD.WZUtility.CheckAndSetInputBlocker( f233_arg1, 200, f233_local0, CoD.WZUtility.WaypointStatus.ALLOW_DELETION ) then
		return 
	end
	local f233_local1, f233_local2, f233_local3, f233_local4 = f233_arg1:getLocalLeftRight() --[[ @ 0]]
	local f233_local5, f233_local6, f233_local7, f233_local8 = f233_arg1:getLocalTopBottom() --[[ @ 0]]
	local f233_local9, f233_local10, f233_local11, f233_local12 = f233_arg2:getLocalLeftRight() --[[ @ 0]]
	local f233_local13, f233_local14, f233_local15, f233_local16 = f233_arg2:getLocalTopBottom() --[[ @ 0]]
	local f233_local17, f233_local18 = nil --[[ @ 0]]
	local f233_local19 = Engine[@"GetModelForController"]( f233_arg0 ) --[[ @ 0]]
	f233_local19 = f233_local19.hudItems.warzone --[[ @ 0]]
	local f233_local20 = f233_local19.mapZoom:get() --[[ @ 0]]
	local f233_local21, f233_local22 = f233_local19.mapPan:get() --[[ @ 0]]
	if IsMouseOrKeyboard( f233_arg0 ) then
		local f233_local23 = 0 --[[ @ 0]]
		local f233_local24 = 1 --[[ @ 0]]
		f233_local11, f233_local15, f233_local12, f233_local16 = Engine[@"hash_3695399A0E06EC35"]( f233_arg0, f233_arg2 ) --[[ @ 0]]
		local f233_local25 = DataSources.FreeCursor.getModel( f233_arg0 ) --[[ @ 0]]
		local f233_local25, f233_local26 = f233_local25.position:get() --[[ @ 0]]
		f233_local18 = f233_local26 --[[ @ 0]]
		f233_local17 = (f233_local25 - f233_local11) / (f233_local12 - f233_local11) --[[ @ 0]]
		f233_local18 = (f233_local18 - f233_local15) / (f233_local16 - f233_local15) --[[ @ 0]]
		if f233_local24 < f233_local17 or f233_local17 < f233_local23 or f233_local24 < f233_local18 or f233_local18 < f233_local23 then
			return 
		end
	else
		f233_local17 = (0.5 * (f233_local3 + f233_local4) - f233_local11) / (f233_local12 - f233_local11) --[[ @ 0]]
		f233_local18 = (f233_local8 - f233_local15) / (f233_local16 - f233_local15) --[[ @ 0]]
	end
	Engine[@"SendMenuResponse"]( f233_arg0, "WaypointPlaced", "placed", math.floor( (f233_local17 / f233_local20 + f233_local21) * 999 ) * 1000 + math.floor( (f233_local18 / f233_local20 + f233_local22) * 999 ) ) --[[ @ 0]]
	f233_local0:set( CoD.WZUtility.WaypointStatus.POST_PLACEMENT_DELAY ) --[[ @ 0]]
	Engine[@"playsound"]( "uin_warzone_waypoint_place" ) --[[ @ 0]]
	if IsGamepad( f233_arg0 ) then
		Engine[@"BlockGameFromKeyEvent"]() --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.RemoveMarker = function ( f234_arg0, f234_arg1 )
	local f234_local0 = Engine[@"GetModelForController"]( f234_arg0 ) --[[ @ 0]]
	f234_local0 = f234_local0.hudItems.waypointStatus --[[ @ 0]]
	if not CoD.WZUtility.CheckAndSetInputBlocker( f234_arg1, 200, f234_local0, CoD.WZUtility.WaypointStatus.ALLOW_PLACEMENT ) then
		return 
	end
	Engine[@"SendMenuResponse"]( f234_arg0, "WaypointPlaced", "removed", 0 ) --[[ @ 0]]
	f234_local0:set( CoD.WZUtility.WaypointStatus.POST_DELETION_DELAY ) --[[ @ 0]]
	Engine[@"playsound"]( "uin_warzone_waypoint_rmv" ) --[[ @ 0]]
	if IsGamepad( f234_arg0 ) then
		Engine[@"BlockGameFromKeyEvent"]() --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.NextWeapon = function ( f235_arg0 )
	Engine[@"exec"]( f235_arg0, "weapnext" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.PrevWeapon = function ( f236_arg0 )
	if CoD.isPC then
		Engine[@"exec"]( f236_arg0, "weapprev" ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SwitchToWeaponInSlot = function ( f237_arg0, f237_arg1 )
	Engine[@"hash_3592B553D11380E7"]( f237_arg0, f237_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SwitchToNextWeapon = function ( f238_arg0 )
	local f238_local0 = DataSources.WarzoneInventory.getModel( f238_arg0 ) --[[ @ 0]]
	local f238_local1 = f238_local0.currentWeaponIndex:get() --[[ @ 0]]
	if f238_local1 then
		local f238_local2 = Engine[@"hash_3592B553D11380E7"] --[[ @ 0]]
		local f238_local3 = f238_arg0 --[[ @ 0]]
		local f238_local4 --[[ @ 0]]
		if f238_local1 == 0 then
			f238_local4 = 1 --[[ @ 0]]
			if not f238_local4 then
			
			else
				f238_local2( f238_local3, f238_local4 ) --[[ @ 0]]
			end
		end
		f238_local4 = 0 --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetElementModelToCurrentWeaponModel = function ( f239_arg0, f239_arg1 )
	local f239_local0 = DataSources.WarzoneInventory.getModel( f239_arg0 ) --[[ @ 0]]
	local f239_local1 = f239_local0.currentWeaponIndex:get() --[[ @ 0]]
	if f239_local1 then
		local f239_local2 = f239_local0["weapon" .. f239_local1] --[[ @ 0]]
		if f239_local2 then
			f239_arg1:setModel( f239_local2, f239_arg0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetElementModelToElementWeaponModel = function ( f240_arg0, f240_arg1, f240_arg2 )
	local f240_local0 = DataSources.WarzoneInventory.getModel( f240_arg0 ) --[[ @ 0]]
	local f240_local1 = f240_arg2.weaponId --[[ @ 0]]
	if f240_local1 then
		local f240_local2 = f240_local0["weapon" .. f240_local1] --[[ @ 0]]
		if f240_local2 then
			f240_arg1:setModel( f240_local2, f240_arg0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetElementModelValueToCurrentWeaponModel = function ( f241_arg0, f241_arg1, f241_arg2 )
	local f241_local0 = DataSources.WarzoneInventory.getModel( f241_arg0 ) --[[ @ 0]]
	local f241_local1 = f241_local0.currentWeaponIndex:get() --[[ @ 0]]
	if f241_local1 then
		local f241_local2 = f241_local0["weapon" .. f241_local1] --[[ @ 0]]
		if f241_local2 and f241_arg1:getModel() then
			local f241_local3 = f241_arg1:getModel() --[[ @ 0]]
			if not f241_local3[f241_arg2] then
				f241_local3 = f241_arg1:getModel() --[[ @ 0]]
				f241_local3:create( f241_arg2 ) --[[ @ 0]]
			end
			f241_local3 = f241_arg1:getModel() --[[ @ 0]]
			f241_local3[f241_arg2]:set( f241_local2 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.HasNextWeapon = function ( f242_arg0 )
	local f242_local0 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f242_arg0 ), "heldWeapons.1.equippedWeaponReference" ) --[[ @ 0]]
	return f242_local0 and f242_local0 ~= @"hash_0"
end
 --[[ @ 0]]
CoD.WZUtility.ShouldShowWeaponAndAttachments = function ( f243_arg0 )
	local f243_local0 = CoD.SafeGetModelValue( f243_arg0:getModel(), "currentWeapon" ) --[[ @ 0]]
	if not f243_local0 then
		return false
	else
		return CoD.CACUtility.GetPreviewImageLarge( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"], CoD.CACUtility.GetUnlockableItemInfo( f243_local0, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) ) ~= RegisterImage( @"blacktransparent" )
	end
end
 --[[ @ 0]]
CoD.WZUtility.CurrentlyIsDriverOrGunner = function ( f244_arg0 )
	if Engine[@"IsPlayerInVehicle"]( f244_arg0 ) then
		local f244_local0 = Engine[@"GetModelForController"]( f244_arg0 ) --[[ @ 0]]
		f244_local0 = f244_local0.vehicle --[[ @ 0]]
		local f244_local1 = f244_local0 and f244_local0.seatOccupantClientNum --[[ @ 0]]
		if f244_local1 then
			local f244_local2 = Engine[@"GetClientNum"]( f244_arg0 ) --[[ @ 0]]
			for f244_local3 = 0 --[[ @ 0]], 4, 1 do
				local f244_local6 = f244_local1[f244_local3] --[[ @ 0]]
				if f244_local6 and f244_local6:get() == f244_local2 then
					return true
				end
			end
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.IsQuickEquipListFirstItemVisible = function ( f245_arg0 )
	if f245_arg0.layoutItems and f245_arg0.layoutItems[1] then
		for f245_local3, f245_local4 in pairs( f245_arg0.layoutItems[1] ) --[[ @ 0]] do
			if f245_local4.gridInfoTable.zeroBasedIndex == 0 then
				return true
			end
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.IsQuickEquipListLastItemVisible = function ( f246_arg0 )
	local f246_local0 = f246_arg0:getDataSource() --[[ @ 0]]
	local f246_local1 = f246_local0.getCount( f246_arg0 ) --[[ @ 0]]
	if f246_arg0.layoutItems and f246_arg0.layoutItems[1] then
		for f246_local5, f246_local6 in pairs( f246_arg0.layoutItems[1] ) --[[ @ 0]] do
			if f246_local6.gridInfoTable.zeroBasedIndex == f246_local1 - 1 then
				return true
			end
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.IsSpectatingEnemy = function ( f247_arg0 )
	return CoD.TeamUtility.GetTeamIDForController( f247_arg0 ) ~= CoD.TeamUtility.GetPredictedTeamID( f247_arg0 )
end
 --[[ @ 0]]
CoD.WZUtility.IsControllerDeadAndNotRespawning = function ( f248_arg0 )
	if not IsVisibilityBitSet( f248_arg0, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) then
		return false
	else
		return CoD.WZUtility.IsSpectatingEnemy( f248_arg0 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetPreviewImageLarge = function ( f249_arg0 )
	return CoD.CACUtility.GetPreviewImageLarge( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"], CoD.CACUtility.GetUnlockableItemInfo( f249_arg0, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) )
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponNameString = function ( f250_arg0, f250_arg1 )
	local f250_local0 = CoD.CACUtility.GetUnlockableItemInfo( f250_arg1, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
	if not f250_local0 then
		return ""
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( f250_local0.displayName )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponNameColor = function ( f251_arg0, f251_arg1 )
	if not CoD.CACUtility.GetUnlockableItemInfo( f251_arg1, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) then
		return CoD.ColorUtility.ExplodeColor( ColorSet.T8__OFF__WHITE )
	else
		local f251_local0 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f251_arg0 ), "hudItems.inventory.currentWeapon.isOperator" ) or 0 --[[ @ 0]]
		local f251_local1 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f251_arg0 ), "hudItems.inventory.currentWeapon.isTactical" ) or 0 --[[ @ 0]]
		if f251_local0 ~= 0 then
			return CoD.ColorUtility.ExplodeColor( ColorSet.OperatorWeaponText )
		elseif f251_local1 ~= 0 then
			return CoD.ColorUtility.ExplodeColor( ColorSet.TacticalWeaponText )
		else
			return CoD.ColorUtility.ExplodeColor( ColorSet.T8__OFF__WHITE )
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponAmmoString = function ( f252_arg0, f252_arg1 )
	local f252_local0 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f252_arg0 ), "hudItems.inventory.currentWeapon.ammoType" ) --[[ @ 0]]
	if not f252_local0 or f252_local0 == @"hash_0" then
		return ""
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_702B266B4344E94C", f252_local0 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponNameAndAmmoString = function ( f253_arg0, f253_arg1 )
	local f253_local0 = CoD.CACUtility.GetUnlockableItemInfo( f253_arg1, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] ) --[[ @ 0]]
	if not f253_local0 then
		return ""
	else
		local f253_local1 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f253_arg0 ), "hudItems.inventory.currentWeapon.ammoType" ) --[[ @ 0]]
		if not f253_local1 or f253_local1 == @"hash_0" then
			return Engine[@"hash_4F9F1239CFD921FE"]( f253_local0.displayName )
		else
			return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_31DD58AA20274399", f253_local0.displayName, f253_local1 )
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.AddAmmoString = function ( f254_arg0, f254_arg1, f254_arg2 )
	local f254_local0 = f254_arg1.weaponId --[[ @ 0]]
	if f254_local0 then
		local f254_local1 = DataSources.WarzoneInventory.getModel( f254_arg0 ) --[[ @ 0]]
		local f254_local2 = "weapon" --[[ @ 0]]
		f254_local1 = f254_local1["weapon" .. f254_local0].ammoType --[[ @ 0]]
		if f254_local1 then
			f254_local2 = f254_local1:get() --[[ @ 0]]
			if f254_local2 and f254_local2 ~= @"hash_0" then
				return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_31DD58AA20274399", f254_arg2, f254_local2 )
			end
		end
	end
	return Engine[@"hash_4F9F1239CFD921FE"]( f254_arg2 )
end
 --[[ @ 0]]
CoD.WZUtility.GetFreeFallAltitudeRatio = function ( f255_arg0, f255_arg1 )
	local f255_local0 = DataSources.HUDItems.getModel( f255_arg0 ) --[[ @ 0]]
	local f255_local1 = f255_local0 --[[ @ 0]]
	local f255_local2 = f255_local0.freeFallStartAltitude --[[ @ 0]]
	if f255_local2 then
		f255_local2 = f255_local1 and f255_local0.freeFallStartAltitude:get() --[[ @ 0]]
	end
	if f255_local2 and f255_local2 > 0 then
		return 1 - math.max( math.min( (f255_arg1 - CoD.WZUtility.SeaLevelAltitude) / (f255_local2 - CoD.WZUtility.SeaLevelAltitude), 1 ), 0 )
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetGroundUnderPlayerAltitudeRatio = function ( f256_arg0, f256_arg1, f256_arg2, f256_arg3, f256_arg4 )
	local f256_local0 = DataSources.HUDItems.getModel( f256_arg0 ) --[[ @ 0]]
	local f256_local1 = f256_local0 --[[ @ 0]]
	local f256_local2 = f256_local0.freeFallStartAltitude --[[ @ 0]]
	if f256_local2 then
		f256_local2 = f256_local1 and f256_local0.freeFallStartAltitude:get() --[[ @ 0]]
	end
	if f256_local2 and f256_local2 > 0 then
		return 1 - math.max( math.min( (f256_arg1 - CoD.WZUtility.SeaLevelAltitude) / (f256_local2 - CoD.WZUtility.SeaLevelAltitude), 1 ), 0 ), 1, 0, 0
	else
		return 0, 1, 0, 0
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsQuickInventoryMenuDisabledInCycle = function ( f257_arg0, f257_arg1 )
	return f257_arg1._disableInCycle
end
 --[[ @ 0]]
CoD.WZUtility.AddQuickAccessInventoryWidget = function ( f258_arg0, f258_arg1, f258_arg2, f258_arg3, f258_arg4 )
	if not f258_arg0._quickAccessInventory then
		f258_arg0._quickAccessInventory = {} --[[ @ 0]]
		f258_arg0._quickAccessInventory.widgets = {} --[[ @ 0]]
	end
	f258_arg0._quickAccessInventory.widgets[f258_arg3] = f258_arg2 --[[ @ 0]]
	f258_arg2._disableInCycle = f258_arg4 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.OpenQuickAccessInventory = function ( f259_arg0, f259_arg1 )
	SetControllerModelValue( f259_arg1, "hudItems.inventory.open", true ) --[[ @ 0]]
	Engine[@"playsound"]( "uin_wz_menu_equip_open", f259_arg1 ) --[[ @ 0]]
	CoD.WZUtility.UpdateDpadLeftRightAvailability( f259_arg0, f259_arg1 ) --[[ @ 0]]
	local f259_local0 = CoD.OptionsUtility.IsProfileIntValue( f259_arg1, "warzoneCycleItems", 1 ) --[[ @ 0]]
	if f259_arg0._quickAccessInventory.widgets then
		if f259_arg0._quickAccessInventory._selectedList and (not f259_local0 or f259_local0 and not f259_arg0._quickAccessInventory._selectedList._disableInCycle) and f259_arg0._quickAccessInventory._selectedList:processEvent( {
			name = "gain_focus",
			controller = f259_arg1
		} ) then
			CoD.WZUtility.UpdateSelectedItemName( f259_arg0, f259_arg1 ) --[[ @ 0]]
			return 
		end
		for f259_local6, f259_local7 in LUI.IterateTableBySortedKeys( f259_arg0._quickAccessInventory.widgets ) --[[ @ 0]] do
			local f259_local5 --[[ @ 0]]
			if f259_local0 then
				local f259_local4 = f259_local0 --[[ @ 0]]
				f259_local5 = not f259_local7._disableInCycle --[[ @ 0]]
			else
				f259_local5 = f259_local4 and true --[[ @ 0]]
			end
			if f259_local5 and f259_local7:processEvent( {
				name = "gain_focus",
				controller = f259_arg1
			} ) then
				f259_arg0._quickAccessInventory._selectedList = f259_local7 --[[ @ 0]]
				CoD.WZUtility.UpdateSelectedItemName( f259_arg0, f259_arg1 ) --[[ @ 0]]
				return 
			end
			f259_local7:processEvent( {
				name = "lose_focus",
				controller = f259_arg1
			} ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.CloseQuickAccessInventory = function ( f260_arg0, f260_arg1 )
	SetControllerModelValue( f260_arg1, "hudItems.inventory.open", false ) --[[ @ 0]]
	Engine[@"playsound"]( "uin_wz_menu_equip_close", f260_arg1 ) --[[ @ 0]]
	Engine[@"hash_27CD221DF1911DD1"]( f260_arg1 ) --[[ @ 0]]
	if f260_arg0._quickAccessInventory and f260_arg0._quickAccessInventory._selectedList then
		f260_arg0._quickAccessInventory._selectedList:processEvent( {
			name = "lose_focus",
			controller = f260_arg1
		} ) --[[ @ 0]]
		CoD.HUDUtility.GiveFocusToMenu( f260_arg0, f260_arg1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.CycleHealthQuickAccessInventory = function ( f261_arg0, f261_arg1, f261_arg2 )
	if not IsRepeatButtonPress( f261_arg2 ) then
		SendCustomClientScriptNotifyForAdjustedClient( f261_arg1, "cycle_health" ) --[[ @ 0]]
	end
	CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f261_arg0, f261_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.CycleEquipmentQuickAccessInventory = function ( f262_arg0, f262_arg1, f262_arg2 )
	if not IsRepeatButtonPress( f262_arg2 ) then
		SendCustomClientScriptNotifyForAdjustedClient( f262_arg1, "cycle_equipment" ) --[[ @ 0]]
	end
	CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f262_arg0, f262_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.UpdateDpadLeftRightAvailability = function ( f263_arg0, f263_arg1 )
	local f263_local0 = false --[[ @ 0]]
	local f263_local1 = false --[[ @ 0]]
	local f263_local2 = CoD.OptionsUtility.IsProfileIntValue( f263_arg1, "warzoneCycleItems", 1 ) --[[ @ 0]]
	local f263_local3 = f263_arg0 --[[ @ 0]]
	local f263_local4 = f263_arg0._quickAccessInventory --[[ @ 0]]
	if f263_local4 then
		f263_local4 = f263_arg0._quickAccessInventory._selectedList --[[ @ 0]]
		if f263_local4 then
			f263_local4 = f263_local3 and f263_arg0._quickAccessInventory._selectedList._quickAccessList --[[ @ 0]]
		end
	end
	if f263_local4 then
		local f263_local5 = f263_local4.activeWidget --[[ @ 0]]
		if f263_local5 then
			f263_local5 = f263_local4.activeWidget.gridInfoTable.zeroBasedIndex --[[ @ 0]]
		end
		if f263_local5 ~= nil then
			if f263_local5 + 1 < f263_local4.itemCount then
				f263_local1 = true --[[ @ 0]]
			end
			if f263_local5 >= 1 then
				f263_local0 = true --[[ @ 0]]
			end
		end
		if not f263_local0 then
			local f263_local6 = LuaUtils.FindItemInArray( f263_arg0._quickAccessInventory.widgets, f263_arg0._quickAccessInventory._selectedList ) --[[ @ 0]]
			for f263_local7 = f263_local6 - 1 --[[ @ 0]], -f263_local6, -1 do
				local f263_local10 = f263_local7 --[[ @ 0]]
				if f263_local10 <= 0 then
					f263_local10 = #f263_arg0._quickAccessInventory.widgets + f263_local10 --[[ @ 0]]
				end
				if f263_arg0._quickAccessInventory.widgets[f263_local10] and f263_arg0._quickAccessInventory.widgets[f263_local10]._quickAccessList.itemCount > 0 and (not f263_local2 or f263_local2 and not f263_arg0._quickAccessInventory.widgets[f263_local10]._disableInCycle) then
					f263_local0 = true --[[ @ 0]]
					break
				end
			end
		end
		if not f263_local1 then
			local f263_local6 = LuaUtils.FindItemInArray( f263_arg0._quickAccessInventory.widgets, f263_arg0._quickAccessInventory._selectedList ) --[[ @ 0]]
			for f263_local7 = f263_local6 + 1 --[[ @ 0]], #f263_arg0._quickAccessInventory.widgets + f263_local6, 1 do
				local f263_local10 = f263_local7 --[[ @ 0]]
				if #f263_arg0._quickAccessInventory.widgets < f263_local10 then
					f263_local10 = f263_local10 - #f263_arg0._quickAccessInventory.widgets --[[ @ 0]]
				end
				if f263_arg0._quickAccessInventory.widgets[f263_local7] and f263_arg0._quickAccessInventory.widgets[f263_local7]._quickAccessList.itemCount > 0 and (not f263_local2 or f263_local2 and not f263_arg0._quickAccessInventory.widgets[f263_local7]._disableInCycle) then
					f263_local1 = true --[[ @ 0]]
					break
				end
			end
		end
	end
	local f263_local5 = DataSources.WarzoneInventory.getModel( f263_arg1 ) --[[ @ 0]]
	f263_local5.canNavigateLeft:set( f263_local0 ) --[[ @ 0]]
	f263_local5.canNavigateRight:set( f263_local1 ) --[[ @ 0]]
	CoD.WZUtility.UpdateSelectedItemName( f263_arg0, f263_arg1 ) --[[ @ 0]]
	Engine[@"hash_27CD221DF1911DD1"]( f263_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.UpdateSelectedItemName = function ( f264_arg0, f264_arg1 )
	local f264_local0 = DataSources.WarzoneInventory.getModel( f264_arg1 ) --[[ @ 0]]
	if f264_arg0._quickAccessInventory and f264_arg0._quickAccessInventory._selectedList then
		local f264_local1 = f264_arg0._quickAccessInventory._selectedList._quickAccessList --[[ @ 0]]
		local f264_local2 = "" --[[ @ 0]]
		if f264_local1 and f264_local1.activeWidget then
			local f264_local3 = f264_local1.activeWidget:getModel() --[[ @ 0]]
			if f264_local3 then
				f264_local2 = Engine[@"ToUpper"]( Engine[@"hash_4F9F1239CFD921FE"]( f264_local3.name:get() ) ) --[[ @ 0]]
			end
		end
		f264_local0.selectedItemName:set( f264_local2 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.LocalizeSelectedInventoryIntoString = function ( f265_arg0, f265_arg1 )
	local f265_local0 = Engine[@"GetModelForController"]( f265_arg0 ) --[[ @ 0]]
	return Engine[@"hash_4F9F1239CFD921FE"]( f265_arg1, f265_local0["hudItems.inventory.selectedItemName"]:get() )
end
 --[[ @ 0]]
CoD.WZUtility.AddQuickInventoryNavigation = function ( f266_arg0, f266_arg1, f266_arg2, f266_arg3 )
	local f266_local0 = LUI.GridLayout.NavigationFlags.CHANGE_FOCUS --[[ @ 0]]
	f266_arg1._quickAccessList = f266_arg3 --[[ @ 0]]
	CoD.Menu.AddButtonCallbackFunction( f266_arg0, f266_arg3, f266_arg2, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], "ui_navleft", function ( element, menu, controller, f267_arg3 )
		local f267_local0 = CoD.OptionsUtility.IsProfileIntValue( controller, "warzoneCycleItems", 1 ) --[[ @ 0]]
		if not f266_arg3.m_disableNavigation then
			if not (not f266_arg3.dpadDisabled or not IsDpadButton( f267_arg3 )) or f266_arg3:navigateItemLeft( f266_local0 ) then
				CoD.WZUtility.UpdateDpadLeftRightAvailability( menu, controller ) --[[ @ 0]]
				return true
			end
			local f267_local1 = LuaUtils.FindItemInArray( menu._quickAccessInventory.widgets, f266_arg3:getParent() ) --[[ @ 0]]
			if f267_local1 ~= nil then
				for f267_local2 = 1 --[[ @ 0]], #menu._quickAccessInventory.widgets - 1, 1 do
					local f267_local5 = f267_local1 - f267_local2 --[[ @ 0]]
					if f267_local5 <= 0 then
						f267_local5 = f267_local5 + #menu._quickAccessInventory.widgets --[[ @ 0]]
					end
					local f267_local6 --[[ @ 0]]
					if f267_local0 then
						local f267_local7 = f267_local0 --[[ @ 0]]
						f267_local6 = not menu._quickAccessInventory.widgets[f267_local5]._disableInCycle --[[ @ 0]]
					else
						f267_local6 = f267_local7 and true --[[ @ 0]]
					end
					if menu._quickAccessInventory.widgets[f267_local5] and f267_local6 then
						local f267_local8 = menu._quickAccessInventory.widgets[f267_local5].InventoryEquipmentLarge --[[ @ 0]]
						if f267_local8 then
							f267_local8:setActiveItem( f267_local8:getLastSelectableItem(), 0 ) --[[ @ 0]]
						end
						if menu._quickAccessInventory.widgets[f267_local5]:processEvent( {
							name = "gain_focus",
							controller = controller
						} ) then
							menu._quickAccessInventory._selectedList = menu._quickAccessInventory.widgets[f267_local5] --[[ @ 0]]
							CoD.WZUtility.UpdateDpadLeftRightAvailability( menu, controller ) --[[ @ 0]]
							return true
						end
					end
				end
			end
		end
	end ) --[[ @ 0]]
	CoD.Menu.AddButtonCallbackFunction( f266_arg0, f266_arg3, f266_arg2, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], "ui_navright", function ( element, menu, controller, f268_arg3 )
		local f268_local0 = CoD.OptionsUtility.IsProfileIntValue( controller, "warzoneCycleItems", 1 ) --[[ @ 0]]
		if not f266_arg3.m_disableNavigation then
			if not (not f266_arg3.dpadDisabled or not IsDpadButton( f268_arg3 )) or f266_arg3:navigateItemRight( f266_local0 ) then
				CoD.WZUtility.UpdateDpadLeftRightAvailability( menu, controller ) --[[ @ 0]]
				return true
			end
			local f268_local1 = LuaUtils.FindItemInArray( menu._quickAccessInventory.widgets, f266_arg3:getParent() ) --[[ @ 0]]
			if f268_local1 ~= nil then
				for f268_local2 = 1 --[[ @ 0]], #menu._quickAccessInventory.widgets - 1, 1 do
					local f268_local5 = f268_local1 + f268_local2 --[[ @ 0]]
					if #menu._quickAccessInventory.widgets < f268_local5 then
						f268_local5 = f268_local5 - #menu._quickAccessInventory.widgets --[[ @ 0]]
					end
					if #menu._quickAccessInventory.widgets < f268_local5 then
						f268_local5 = f268_local5 - #menu._quickAccessInventory.widgets --[[ @ 0]]
					end
					local f268_local6 --[[ @ 0]]
					if f268_local0 then
						local f268_local7 = f268_local0 --[[ @ 0]]
						f268_local6 = not menu._quickAccessInventory.widgets[f268_local5]._disableInCycle --[[ @ 0]]
					else
						f268_local6 = f268_local7 and true --[[ @ 0]]
					end
					if menu._quickAccessInventory.widgets[f268_local5] and f268_local6 then
						local f268_local8 = menu._quickAccessInventory.widgets[f268_local5].InventoryEquipmentLarge --[[ @ 0]]
						if f268_local8 then
							f268_local8:setActiveItem( f268_local8:getFirstSelectableItem(), 0 ) --[[ @ 0]]
						end
						if menu._quickAccessInventory.widgets[f268_local5]:processEvent( {
							name = "gain_focus",
							controller = controller
						} ) then
							menu._quickAccessInventory._selectedList = menu._quickAccessInventory.widgets[f268_local5] --[[ @ 0]]
							CoD.WZUtility.UpdateDpadLeftRightAvailability( menu, controller ) --[[ @ 0]]
							return true
						end
					end
				end
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetupLastStandClientModelUpdate = function ( f269_arg0, f269_arg1, f269_arg2 )
	local f269_local0 = f269_arg1:getModel() --[[ @ 0]]
	local f269_local1 = Engine[@"hash_E4D2F32833CFA6C"]( f269_local0.clientNum:get() ) --[[ @ 0]]
	local f269_local2 = f269_local1:create( "lastStand" ) --[[ @ 0]]
	f269_local2 = f269_local2:create( f269_arg2 ) --[[ @ 0]]
	f269_local2 = f269_local2:create( "health" ) --[[ @ 0]]
	if f269_local2 then
		local f269_local3 = f269_arg1 --[[ @ 0]]
		local f269_local4 = f269_arg1.subscribeToModel --[[ @ 0]]
		local f269_local5 = f269_arg1:getModel() --[[ @ 0]]
		f269_local4( f269_local3, f269_local5.health, function ( f270_arg0 )
			local f270_local0 = f270_arg0:get() --[[ @ 0]]
			if f270_local0 then
				f269_local2:set( f270_local0 ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	local f269_local4 = f269_local1:create( "lastStand" ) --[[ @ 0]]
	f269_local4 = f269_local4:create( f269_arg2 ) --[[ @ 0]]
	f269_local4 = f269_local4:create( "reviveProgress" ) --[[ @ 0]]
	if f269_local4 then
		local f269_local5 = f269_arg1 --[[ @ 0]]
		local f269_local3 = f269_arg1.subscribeToModel --[[ @ 0]]
		local f269_local6 = f269_arg1:getModel() --[[ @ 0]]
		f269_local3( f269_local5, f269_local6.reviveProgress, function ( f271_arg0 )
			local f271_local0 = f271_arg0:get() --[[ @ 0]]
			if f271_local0 then
				f269_local4:set( f271_local0 ) --[[ @ 0]]
				CoD.BaseUtility.SmoothLinearInterpolateClientTime( f269_arg2, "selfRevive", f269_local4, f271_local0 ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetupLastStandBleedoutBar = function ( f272_arg0, f272_arg1, f272_arg2 )
	if f272_arg1.BleedoutBar then
		local f272_local0 = f272_arg1:getModel() --[[ @ 0]]
		f272_local0 = f272_local0:create( "lastStand" ) --[[ @ 0]]
		f272_local0 = f272_local0:create( f272_arg2 ) --[[ @ 0]]
		f272_local0:create( "health" ) --[[ @ 0]]
		f272_arg1.BleedoutBar:setModel( f272_local0, f272_arg2 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetupReviveProgressBar = function ( f273_arg0, f273_arg1, f273_arg2 )
	if f273_arg2.progressBar then
		local f273_local0 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f273_arg1 ) ) --[[ @ 0]]
		local f273_local1 = f273_local0:create( "lastStand" ) --[[ @ 0]]
		f273_local1 = f273_local1:create( f273_arg1 ) --[[ @ 0]]
		f273_local1 = f273_local1:create( "reviveProgress" ) --[[ @ 0]]
		if f273_local1 then
			f273_arg2:subscribeToModel( f273_local1, function ( model )
				local f274_local0 = model:get() --[[ @ 0]]
				if f274_local0 then
					f273_arg2.progressBar:setShaderVector( 0, CoD.GetVectorComponentFromString( f274_local0, 1 ), CoD.GetVectorComponentFromString( f274_local0, 2 ), CoD.GetVectorComponentFromString( f274_local0, 3 ), CoD.GetVectorComponentFromString( f274_local0, 4 ) ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetupBleedoutProgressBar = function ( f275_arg0, f275_arg1, f275_arg2 )
	if f275_arg2.progressBar then
		local f275_local0 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f275_arg1 ) ) --[[ @ 0]]
		local f275_local1 = f275_local0:create( "lastStand" ) --[[ @ 0]]
		f275_local1 = f275_local1:create( f275_arg1 ) --[[ @ 0]]
		f275_local1 = f275_local1:create( "health" ) --[[ @ 0]]
		if f275_local1 then
			f275_arg2:subscribeToModel( f275_local1, function ( model )
				local f276_local0 = model:get() --[[ @ 0]]
				if f276_local0 then
					f275_arg2.progressBar:setShaderVector( 0, CoD.GetVectorComponentFromString( f276_local0, 1 ), CoD.GetVectorComponentFromString( f276_local0, 2 ), CoD.GetVectorComponentFromString( f276_local0, 3 ), CoD.GetVectorComponentFromString( f276_local0, 4 ) ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.ShouldPlayValueUpdate = function ( f277_arg0, f277_arg1 )
	local f277_local0 = f277_arg1:getModel() --[[ @ 0]]
	if not f277_local0 or not f277_local0.value or not f277_local0.value:get() then
		return false
	else
		local f277_local1 = f277_local0.value:get() --[[ @ 0]]
		f277_local1 = f277_local1:get() --[[ @ 0]]
		if f277_arg1.lastValue and f277_arg1.lastValue == f277_local1 then
			return false
		else
			f277_arg1.lastValue = f277_local1 --[[ @ 0]]
			return true
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.IndicatorToModels = {
	kills = {
		getModel = function ( f278_arg0 )
			local f278_local0 = {} --[[ @ 0]]
			local f278_local1 = DataSources.HUDItems.getModel( f278_arg0 ) --[[ @ 0]]
			f278_local0[1] = f278_local1.playerKills --[[ @ 0]]
			return f278_local0
		end,
		type = "hudGameStat"
	},
	cleanups = {
		getModel = function ( f279_arg0 )
			local f279_local0 = {} --[[ @ 0]]
			local f279_local1 = DataSources.HUDItems.getModel( f279_arg0 ) --[[ @ 0]]
			f279_local0[1] = f279_local1.playerCleanUps --[[ @ 0]]
			return f279_local0
		end,
		type = "hudGameStat"
	},
	playersalive = {
		getModel = function ( f280_arg0 )
			local f280_local0 = {} --[[ @ 0]]
			local f280_local1 = DataSources.HUDItems.getModel( f280_arg0 ) --[[ @ 0]]
			f280_local1 = f280_local1.alivePlayerCount --[[ @ 0]]
			local f280_local2 = DataSources.HUDItems.getModel( f280_arg0 ) --[[ @ 0]]
			f280_local2 = f280_local2.alivePlayerCountEnemy --[[ @ 0]]
			f280_local0[1] = f280_local1 --[[ @ 0]]
			f280_local0[2] = f280_local2 --[[ @ 0]]
			return f280_local0
		end,
		type = "gameInformation"
	},
	playersspectating = {
		getModel = function ( f281_arg0 )
			local f281_local0 = Engine[@"GetClientNum"]( f281_arg0 ) --[[ @ 0]]
			local f281_local1 = {} --[[ @ 0]]
			local f281_local2 = Engine[@"hash_E4D2F32833CFA6C"]( f281_local0 ) --[[ @ 0]]
			f281_local1[1] = f281_local2.spectatorCount --[[ @ 0]]
			return f281_local1
		end,
		type = "gameInformation"
	},
	cash = {
		getModel = function ( f282_arg0 )
			local f282_local0 = {} --[[ @ 0]]
			local f282_local1 = Engine[@"GetModelForController"]( f282_arg0 ) --[[ @ 0]]
			f282_local1 = f282_local1.gameScore.playerScore --[[ @ 0]]
			local f282_local2 = Engine[@"GetModelForController"]( f282_arg0 ) --[[ @ 0]]
			f282_local2 = f282_local2.gameScore.enemyScore --[[ @ 0]]
			f282_local0[1] = f282_local1 --[[ @ 0]]
			f282_local0[2] = f282_local2 --[[ @ 0]]
			return f282_local0
		end,
		type = "wzDeposit"
	},
	livesremaining = {
		getModel = function ( f283_arg0 )
			local f283_local0 = {} --[[ @ 0]]
			local f283_local1 = DataSources.HUDItems.getModel( f283_arg0 ) --[[ @ 0]]
			f283_local0[1] = f283_local1.playerLivesRemaining --[[ @ 0]]
			return f283_local0
		end,
		type = "hudGameStat"
	}
} --[[ @ 0]]
CoD.WZUtility.SetupGameStatusIndicatorSub = function ( f284_arg0, f284_arg1, f284_arg2, f284_arg3 )
	local f284_local0 = f284_arg0:getModel() --[[ @ 0]]
	if not f284_local0 or not f284_local0[f284_arg3] or type( f284_local0[f284_arg3]:get() ) ~= "userdata" then
		return 
	elseif f284_arg2["_" .. f284_arg3 .. "Subscription"] then
		f284_arg2:removeSubscription( f284_arg2["_" .. f284_arg3 .. "Subscription"] ) --[[ @ 0]]
	end
	f284_arg2["_" .. f284_arg3 .. "Subscription"] = f284_arg2:subscribeToModel( f284_local0[f284_arg3]:get(), function ( model )
		local f285_local0 = model:get() --[[ @ 0]]
		if f285_local0 ~= nil then
			f284_arg2:setText( f285_local0 ) --[[ @ 0]]
		end
	end, true ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetupGameStatusIndicatorSubscriptions = function ( f286_arg0, f286_arg1, f286_arg2, f286_arg3, f286_arg4 )
	CoD.WZUtility.SetupGameStatusIndicatorSub( f286_arg0, f286_arg1, f286_arg2, "value1" ) --[[ @ 0]]
	CoD.WZUtility.SetupGameStatusIndicatorSub( f286_arg0, f286_arg1, f286_arg3, "value1" ) --[[ @ 0]]
	CoD.WZUtility.SetupGameStatusIndicatorSub( f286_arg0, f286_arg1, f286_arg4, "value2" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.GameStatusIndicatorShouldShowRedX = function ( f287_arg0, f287_arg1 )
	if f287_arg0.indicatorKey == "livesremaining" and f287_arg0.prematchEnded == true and CoD.WZUtility.AnyReinsertionsRemaining( f287_arg1 ) == false then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorList", "WarzoneGameStatusIndicatorList", function ( f288_arg0, f288_arg1 )
	local f288_local0 = Engine[@"hash_2E00B2F29271C60B"]( @"hash_48C4EED4107C50C9" ) --[[ @ 0]]
	if not f288_local0 then
		return 
	end
	for f288_local7, f288_local8 in pairs( CoD.WZUtility.IndicatorToModels ) --[[ @ 0]] do
		if f288_local7 ~= "cash" or f288_local7 == "cash" and IsBooleanDvarSet( @"hash_7074ED0F04816B75" ) then
			local f288_local4 = f288_arg0.key --[[ @ 0]]
			if not f288_local4 then
				f288_local4 = f288_arg0:create( f288_local7 ) --[[ @ 0]]
				local f288_local5 = f288_local8.getModel( f288_arg1 ) --[[ @ 0]]
				local f288_local6 = f288_local4:create( "value1" ) --[[ @ 0]]
				f288_local6:set( f288_local5[1] ) --[[ @ 0]]
				f288_local6 = f288_local4:create( "value2" ) --[[ @ 0]]
				f288_local6:set( f288_local5[2] ) --[[ @ 0]]
				f288_local6 = f288_local4:create( "indicatorId" ) --[[ @ 0]]
				f288_local6:set( f288_local7 ) --[[ @ 0]]
			end
			if not f288_local4.icon then
				local f288_local5 = Engine[@"hash_1C53F8D38DF9042B"]( "icon" .. f288_local7 ) --[[ @ 0]]
				local f288_local6 = f288_local4:create( "icon" ) --[[ @ 0]]
				f288_local6:set( f288_local0[f288_local5] and f288_local0[f288_local5] or @"ui_icon_dead" ) --[[ @ 0]]
			end
			if not f288_local4.type then
				local f288_local5 = f288_local4:create( "type" ) --[[ @ 0]]
				f288_local5:set( f288_local8.type ) --[[ @ 0]]
			end
		end
	end
end, false ) --[[ @ 0]]
DataSources.WarzoneGameStatusIndicatorList.CommonPrepare = function ( f289_arg0, f289_arg1, f289_arg2, f289_arg3 )
	if not f289_arg1._rootModel then
		f289_arg1._rootModel = DataSources.WarzoneGameStatusIndicatorList.getModel( f289_arg0 ) --[[ @ 0]]
	end
	local f289_local0 = Engine[@"hash_2E00B2F29271C60B"]( @"hash_48C4EED4107C50C9" ) --[[ @ 0]]
	if not f289_local0 then
		return 
	end
	f289_arg1._items = {} --[[ @ 0]]
	f289_arg1._lastModelType = nil --[[ @ 0]]
	if not f289_local0[f289_arg3] then
		return 
	elseif not f289_arg1.playersSettingsSubscription then
		local f289_local1 = f289_arg1 --[[ @ 0]]
		local f289_local2 = f289_arg1.subscribeToModel --[[ @ 0]]
		local f289_local3 = Engine[@"GetModelForController"]( f289_arg0 ) --[[ @ 0]]
		f289_arg1.playersSettingsSubscription = f289_local2( f289_local1, f289_local3.PlayerSettingsUpdate, function ( f290_arg0 )
			f289_arg1:updateDataSource( false, true ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end
	if not f289_arg1.scriptNotifySubscription and not f289_arg1.prematchEnded then
		f289_arg1.prematchEnded = false --[[ @ 0]]
		f289_arg1.scriptNotifySubscription = f289_arg1:subscribeToGlobalModel( f289_arg0, "PerController", "scriptNotify", function ( model )
			if model:get() == @"prematch_timer_ended" then
				f289_arg1.prematchEnded = true --[[ @ 0]]
				f289_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	for f289_local2 = 1 --[[ @ 0]], #f289_local0[f289_arg3], 1 do
		local f289_local4 = f289_local0[f289_arg3][f289_local2][@"indicator"] --[[ @ 0]]
		if (f289_local4 ~= "cash" or f289_local4 == "cash" and IsBooleanDvarSet( @"hash_7074ED0F04816B75" )) and (not f289_arg2 or f289_arg2( f289_arg1._rootModel[f289_local4] )) then
			local f289_local5 = nil --[[ @ 0]]
			if f289_local4 == "playersspectating" then
				if f289_arg1._rootModel[f289_local4] and f289_arg1._rootModel[f289_local4].value1 and f289_arg1._rootModel[f289_local4].value1:get() then
					if not f289_arg1.playersSpectatingSubscription then
						f289_arg1.playersSpectatingSubscription = f289_arg1:subscribeToModel( f289_arg1._rootModel[f289_local4].value1:get(), function ( model )
							f289_arg1:updateDataSource( false, true ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
					end
					local f289_local6 = f289_arg1._rootModel[f289_local4].value1:get() --[[ @ 0]]
					if f289_local6:get() > 0 then
						f289_local5 = true --[[ @ 0]]
					end
				end
			elseif f289_local4 == "cleanups" then
				if not CoD.GameEndScoreUtility.IsSoloTeamGame() and not CoD.BaseUtility.IsDvarEnabled( "hideCleanups" ) then
					f289_local5 = true --[[ @ 0]]
				end
			elseif f289_local4 == "livesremaining" then
				if IsGametypeSettingsValue( "wzEnableWaveRespawn", 1 ) and not CoD.HUDUtility.IsGameTypeEqualToString( "warzone_pandemic_quad" ) then
					f289_local5 = true --[[ @ 0]]
				elseif CoD.BaseUtility.IsDvarEnabled( "alwaysShowLivesRemaining" ) then
					f289_local5 = true --[[ @ 0]]
				end
			elseif f289_local4 == "kills" then
				if not CoD.BaseUtility.IsDvarEnabled( "hideKills" ) then
					f289_local5 = true --[[ @ 0]]
				end
			else
				f289_local5 = true --[[ @ 0]]
			end
			if f289_local5 then
				if f289_local4 == "cleanups" then
					f289_local5 = not CoD.WZUtility.IsWarzoneUIHidden( f289_arg0, "wzHideCleanupsUI", "warzoneHideCleanups" ) --[[ @ 0]]
				elseif f289_local4 == "kills" then
					f289_local5 = not CoD.WZUtility.IsWarzoneUIHidden( f289_arg0, "wzHideKillsUI", "warzoneHideKills" ) --[[ @ 0]]
				elseif f289_local4 == "playersalive" then
					if f289_arg1.prematchEnded then
						f289_local5 = not CoD.WZUtility.IsWarzoneUIHidden( f289_arg0, "wzHidePlayersAliveUI", "warzoneHidePlayersAlive" ) --[[ @ 0]]
					else
						f289_local5 = true --[[ @ 0]]
					end
				elseif f289_local4 == "playersspectating" then
					f289_local5 = not CoD.WZUtility.IsWarzoneUIHidden( f289_arg0, "wzHideSpectatorsUI", "warzoneHideSpectators" ) --[[ @ 0]]
				end
			end
			if f289_local5 then
				local f289_local6 = 0 --[[ @ 0]]
				if not f289_arg1._lastModelType then
					f289_arg1._lastModelType = f289_arg1._rootModel[f289_local4].type:get() --[[ @ 0]]
				elseif f289_arg1._lastModelType ~= f289_arg1._rootModel[f289_local4].type:get() then
					f289_arg1._items[#f289_arg1._items].properties.vSpacing = 10 --[[ @ 0]]
					f289_arg1._lastModelType = f289_arg1._rootModel[f289_local4].type:get() --[[ @ 0]]
				end
				table.insert( f289_arg1._items, {
					model = f289_arg1._rootModel[f289_local4],
					properties = {
						vSpacing = f289_local6,
						indicatorKey = f289_local4,
						prematchEnded = f289_arg1.prematchEnded
					}
				} ) --[[ @ 0]]
			end
		end
	end
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListEndGameLeft", "WarzoneGameStatusIndicatorList", function ( f293_arg0, f293_arg1 )
	
end, false, {
	prepare = function ( f294_arg0, f294_arg1, f294_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f294_arg0, f294_arg1, f294_arg2, "endgame_left" ) --[[ @ 0]]
	end,
	getCount = function ( f295_arg0 )
		return f295_arg0._items and #f295_arg0._items or 0
	end,
	getItem = function ( f296_arg0, f296_arg1, f296_arg2 )
		return f296_arg1._items[f296_arg2].model
	end,
	getSpacerAfterColumn = function ( f297_arg0, f297_arg1, f297_arg2 )
		local f297_local0 = f297_arg0._items --[[ @ 0]]
		if f297_local0[f297_arg1] then
			return f297_local0[f297_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f298_arg0, f298_arg1 )
		local f298_local0 = f298_arg0._items --[[ @ 0]]
		if f298_local0 and f298_local0[f298_arg1] then
			return f298_local0[f298_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListEndGameRight", "WarzoneGameStatusIndicatorList", function ( f299_arg0, f299_arg1 )
	
end, false, {
	prepare = function ( f300_arg0, f300_arg1, f300_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f300_arg0, f300_arg1, f300_arg2, "endgame_right" ) --[[ @ 0]]
	end,
	getCount = function ( f301_arg0 )
		return f301_arg0._items and #f301_arg0._items or 0
	end,
	getItem = function ( f302_arg0, f302_arg1, f302_arg2 )
		return f302_arg1._items[f302_arg2].model
	end,
	getSpacerAfterColumn = function ( f303_arg0, f303_arg1, f303_arg2 )
		local f303_local0 = f303_arg0._items --[[ @ 0]]
		if f303_local0[f303_arg1] then
			return f303_local0[f303_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f304_arg0, f304_arg1 )
		local f304_local0 = f304_arg0._items --[[ @ 0]]
		if f304_local0 and f304_local0[f304_arg1] then
			return f304_local0[f304_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListInventoryLeft", "WarzoneGameStatusIndicatorList", function ( f305_arg0, f305_arg1 )
	
end, false, {
	prepare = function ( f306_arg0, f306_arg1, f306_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f306_arg0, f306_arg1, f306_arg2, "inventory_left" ) --[[ @ 0]]
	end,
	getCount = function ( f307_arg0 )
		return f307_arg0._items and #f307_arg0._items or 0
	end,
	getItem = function ( f308_arg0, f308_arg1, f308_arg2 )
		return f308_arg1._items[f308_arg2].model
	end,
	getSpacerAfterColumn = function ( f309_arg0, f309_arg1, f309_arg2 )
		local f309_local0 = f309_arg0._items --[[ @ 0]]
		if f309_local0[f309_arg1] then
			return f309_local0[f309_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f310_arg0, f310_arg1 )
		local f310_local0 = f310_arg0._items --[[ @ 0]]
		if f310_local0 and f310_local0[f310_arg1] then
			return f310_local0[f310_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListInventoryRight", "WarzoneGameStatusIndicatorList", function ( f311_arg0, f311_arg1 )
	
end, false, {
	prepare = function ( f312_arg0, f312_arg1, f312_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f312_arg0, f312_arg1, f312_arg2, "inventory_right" ) --[[ @ 0]]
	end,
	getCount = function ( f313_arg0 )
		return f313_arg0._items and #f313_arg0._items or 0
	end,
	getItem = function ( f314_arg0, f314_arg1, f314_arg2 )
		return f314_arg1._items[f314_arg2].model
	end,
	getSpacerAfterColumn = function ( f315_arg0, f315_arg1, f315_arg2 )
		local f315_local0 = f315_arg0._items --[[ @ 0]]
		if f315_local0[f315_arg1] then
			return f315_local0[f315_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f316_arg0, f316_arg1 )
		local f316_local0 = f316_arg0._items --[[ @ 0]]
		if f316_local0 and f316_local0[f316_arg1] then
			return f316_local0[f316_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListHUDLeft", "WarzoneGameStatusIndicatorList", function ( f317_arg0, f317_arg1 )
	
end, false, {
	prepare = function ( f318_arg0, f318_arg1, f318_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f318_arg0, f318_arg1, f318_arg2, "ingame_left" ) --[[ @ 0]]
	end,
	getCount = function ( f319_arg0 )
		return f319_arg0._items and #f319_arg0._items or 0
	end,
	getItem = function ( f320_arg0, f320_arg1, f320_arg2 )
		return f320_arg1._items[f320_arg2].model
	end,
	getSpacerAfterColumn = function ( f321_arg0, f321_arg1, f321_arg2 )
		local f321_local0 = f321_arg0._items --[[ @ 0]]
		if f321_local0[f321_arg1] then
			return f321_local0[f321_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f322_arg0, f322_arg1 )
		local f322_local0 = f322_arg0._items --[[ @ 0]]
		if f322_local0 and f322_local0[f322_arg1] then
			return f322_local0[f322_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WarzoneGameStatusIndicatorListHUDRight", "WarzoneGameStatusIndicatorList", function ( f323_arg0, f323_arg1 )
	
end, false, {
	prepare = function ( f324_arg0, f324_arg1, f324_arg2 )
		DataSources.WarzoneGameStatusIndicatorList.CommonPrepare( f324_arg0, f324_arg1, f324_arg2, "ingame_right" ) --[[ @ 0]]
	end,
	getCount = function ( f325_arg0 )
		return f325_arg0._items and #f325_arg0._items or 0
	end,
	getItem = function ( f326_arg0, f326_arg1, f326_arg2 )
		return f326_arg1._items[f326_arg2].model
	end,
	getSpacerAfterColumn = function ( f327_arg0, f327_arg1, f327_arg2 )
		local f327_local0 = f327_arg0._items --[[ @ 0]]
		if f327_local0[f327_arg1] then
			return f327_local0[f327_arg1].properties.vSpacing or 0
		else
			return 0
		end
	end,
	getCustomPropertiesForItem = function ( f328_arg0, f328_arg1 )
		local f328_local0 = f328_arg0._items --[[ @ 0]]
		if f328_local0 and f328_local0[f328_arg1] then
			return f328_local0[f328_arg1].properties
		else
			
		end
	end
} ) --[[ @ 0]]
CoD.WZUtility.CharacterInfoShowState = LuaEnum.createEnum( "HIDE", "SHOW" ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WZCharacterInfo", "WZCharacterInfo", function ( f329_arg0, f329_arg1 )
	f329_arg0:create( "infoModel" ) --[[ @ 0]]
	f329_arg0:create( "showInfoState" ) --[[ @ 0]]
end, false ) --[[ @ 0]]
CoD.WZUtility.SetElementModelToControllerModelValue = function ( f330_arg0, f330_arg1, f330_arg2 )
	local f330_local0 = Engine[@"GetModelForController"]( f330_arg1 ) --[[ @ 0]]
	f330_local0 = f330_local0[f330_arg2] --[[ @ 0]]
	if not f330_local0 then
		return 
	else
		local f330_local1 = f330_local0:get() --[[ @ 0]]
		if not f330_local1 or type( f330_local1 ) ~= "userdata" then
			return 
		else
			f330_arg0:setModel( f330_local1, f330_arg1 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.UpdateWZInventoryTooltipOnElementWithTimerPC = function ( f331_arg0, f331_arg1 )
	local f331_local0 = f331_arg1:getMenu() --[[ @ 0]]
	if f331_local0 then
		if f331_local0.__updateWZTooltipTimerPC then
			f331_local0.__updateWZTooltipTimerPC:close() --[[ @ 0]]
			f331_local0.__updateWZTooltipTimerPC = nil --[[ @ 0]]
		end
		f331_local0.__updateWZTooltipTimerPC = LUI.UITimer.newElementTimer( 200, true, function ()
			f331_local0.__updateWZTooltipTimerPC = nil --[[ @ 0]]
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f331_arg0, f331_arg1 ) --[[ @ 0]]
			CoD.FreeCursorUtility.UpdateSetupContext( f331_arg1, f331_arg0 ) --[[ @ 0]]
		end ) --[[ @ 0]]
		f331_local0:addElement( f331_local0.__updateWZTooltipTimerPC ) --[[ @ 0]]
		CoD.Menu.UpdateAllButtonPrompts( f331_local0, f331_arg0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC = function ( f333_arg0, f333_arg1 )
	if not CoD.isPC then
		return 
	end
	local f333_local0 = f333_arg1:getModel() --[[ @ 0]]
	if f333_local0 then
		if f333_local0.description then
			local f333_local1 = Engine[@"GetModelValue"]( f333_local0.description ) --[[ @ 0]]
			if f333_local1 ~= @"hash_0" then
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f333_local0, "detailedDescription" ), Engine[@"Localize"]( f333_local1 ) ) --[[ @ 0]]
			else
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f333_local0, "detailedDescription" ), "" ) --[[ @ 0]]
			end
		end
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f333_local0, "tooltipArchetype" ), CoD.FreeCursorUtility.TooltipArchetypes.FEATURE_TITLE ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.UpdateMultiItemPickupInventoryVisibilityPC = function ( f334_arg0, f334_arg1, f334_arg2, f334_arg3 )
	if f334_arg3 and f334_arg3:get() == Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] then
		CoD.ScoreboardUtility.ShowInventory( f334_arg2 ) --[[ @ 0]]
		f334_arg0._multipickupActivated = true --[[ @ 0]]
	else
		if Engine[@"IsVisibilityBitSet"]( f334_arg2, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and CoD.ModelUtility.IsModelValueEqualToEnum( f334_arg2, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_INVENTORY ) and f334_arg0._multipickupActivated then
			CoD.ScoreboardUtility.HideInventory( nil, f334_arg2 ) --[[ @ 0]]
		end
		f334_arg0._multipickupActivated = nil --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.ScoreboardVisibilitySetAndPC = function ( f335_arg0 )
	if not IsMouseOrKeyboard( f335_arg0 ) then
		return false
	end
	local f335_local0 = CoD.WZUtility.IsInventoryOpen( f335_arg0 ) --[[ @ 0]]
	if f335_local0 then
		f335_local0 = IsVisibilityBitSet( f335_arg0, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) --[[ @ 0]]
		if not f335_local0 then
			f335_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f335_arg0, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
		end
	end
	return f335_local0
end
 --[[ @ 0]]
CoD.WZUtility.IsPcInventoryOpen = function ( f336_arg0 )
	return CoD.isPC and CoD.WZUtility.IsInventoryOpen( f336_arg0 )
end
 --[[ @ 0]]
CoD.WZUtility.AllowWZOffline = function ()
	return true
end
 --[[ @ 0]]
CoD.WZUtility.IsPCSplitterOpen = function ( f338_arg0 )
	local f338_local0 = CoD.WZUtility.SplitterWidgetElement --[[ @ 0]]
	if f338_local0 then
		return IsElementInState( f338_local0, "Open" )
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmorStashCountString = function ( f339_arg0, f339_arg1 )
	local f339_local0 --[[ @ 0]]
	if f339_arg1 then
		f339_local0 = LocalizeIntoStringIfNotEmpty( @"hash_2674D175D3480E09", f339_arg1 ) --[[ @ 0]]
		if not f339_local0 then
		
		else
			return f339_local0
		end
	end
	f339_local0 = "" --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetupAnimateArmorShardSlotWhenUnavailable = function ( f340_arg0, f340_arg1 )
	local f340_local0 = f340_arg0 --[[ @ 0]]
	local f340_local1 = f340_arg0.subscribeToModel --[[ @ 0]]
	local f340_local2 = Engine[@"GetModelForController"]( f340_arg1 ) --[[ @ 0]]
	f340_local1( f340_local0, f340_local2["hudItems.inventory"].create( f340_local2["hudItems.inventory"], "armorShardNotAvailable" ), function ( f341_arg0, f341_arg1 )
		PlayClip( f340_arg0, "Empty", f340_arg1 ) --[[ @ 0]]
		PlaySoundAlias( "uin_unavailable_charging" ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.InventoryItemDisplaysPickup = function ( f342_arg0, f342_arg1 )
	local f342_local0 = IsMouseOrKeyboard( f342_arg1 ) --[[ @ 0]]
	if f342_local0 then
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f342_arg0, f342_arg1, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f342_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f342_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f342_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.EQUIPS ) then
			f342_local0 = not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f342_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.SWAPS ) --[[ @ 0]]
		else
			f342_local0 = false --[[ @ 0]]
		end
	end
	return f342_local0
end
 --[[ @ 0]]
CoD.WZUtility.InventoryItemDisplaysEquip = function ( f343_arg0, f343_arg1 )
	local f343_local0 = IsMouseOrKeyboard( f343_arg1 ) --[[ @ 0]]
	if f343_local0 then
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f343_arg0, f343_arg1, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f343_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f343_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) then
			f343_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEnumBitSet( f343_arg1, "HUDItems", "weapon3dHintState", CoD.HUDUtility.Weapon3DHintStateFlags.EQUIPS ) --[[ @ 0]]
		else
			f343_local0 = false --[[ @ 0]]
		end
	end
	return f343_local0
end
 --[[ @ 0]]
CoD.WZUtility.IsFillSquadAvailable = function ( f344_arg0 )
	local f344_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f344_local0 = f344_local0.lobbyRoot --[[ @ 0]]
	local f344_local1 = f344_local0.playlistId:get() --[[ @ 0]]
	if not f344_local1 then
		return false
	else
		local f344_local2 = Engine[@"hash_6B2BAD8AD577224E"]( f344_local1 ) --[[ @ 0]]
		local f344_local3 = f344_local0.lobbyList.playerCount:get() --[[ @ 0]]
		return f344_local2 and f344_local3 and f344_local3 < f344_local2
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetLoadoutStorageBuffer = function ( f345_arg0 )
	local f345_local0 = Enum[@"StorageFileType"][@"hash_57036247812689DA"] --[[ @ 0]]
	if not IsLocal() then
		if IsCustomLobby() then
			f345_local0 = Enum[@"StorageFileType"][@"hash_538AE20E1AEFD6F0"] --[[ @ 0]]
		else
			f345_local0 = Enum[@"StorageFileType"][@"hash_DF87425733853AE"] --[[ @ 0]]
		end
	end
	return Engine[@"StorageGetBuffer"]( f345_arg0, f345_local0 )
end
 --[[ @ 0]]
CoD.WZUtility.GetVariantSlot = function ( f346_arg0, f346_arg1, f346_arg2 )
	local f346_local0 = CoD.WZUtility.GetLoadoutStorageBuffer( f346_arg0 ) --[[ @ 0]]
	local f346_local1, f346_local2 = nil --[[ @ 0]]
	local f346_local3 = f346_local0.variant --[[ @ 0]]
	for f346_local4 = 0 --[[ @ 0]], #f346_local3 - 1, 1 do
		local f346_local7 = f346_local3[f346_local4] --[[ @ 0]]
		local f346_local8 = f346_local7.itemIndex:get() --[[ @ 0]]
		if not f346_local2 and f346_local8 == CoD.CACUtility.EmptyItemIndex then
			f346_local2 = f346_local7 --[[ @ 0]]
		end
		if f346_local8 == f346_arg1 then
			f346_local1 = f346_local7 --[[ @ 0]]
			break
		end
	end
	if not f346_local1 and f346_arg2 then
		f346_local1 = f346_local2 --[[ @ 0]]
		f346_local1.itemIndex:set( f346_arg1 ) --[[ @ 0]]
		f346_local1.paintjobSlot:set( Enum[@"CustomizationPaintjobInvalidID"][@"hash_660CAA8D66ED63A5"] ) --[[ @ 0]]
	end
	if not f346_local1 then
		return nil
	else
		return f346_local1
	end
end
 --[[ @ 0]]
CoD.WZUtility.ReconcileVariantSlot = function ( f347_arg0, f347_arg1 )
	local f347_local0 = CoD.WZUtility.GetVariantSlot( f347_arg0, f347_arg1, false ) --[[ @ 0]]
	if f347_local0 then
		local f347_local1 = f347_local0.camoIndex:get() --[[ @ 0]]
		local f347_local2 = Engine[@"TableLookup"]( CoD.CACUtility.CamoOptionsTable, Enum[@"hash_25DD5CC8AEA7314B"][@"hash_3AA94CABDA68EB21"], Enum[@"hash_25DD5CC8AEA7314B"][@"hash_6B79D07B3744EA1A"], "camo", Enum[@"hash_25DD5CC8AEA7314B"][@"hash_6A6342D60A0D5AAE"], f347_local1 ) --[[ @ 0]]
		if f347_local2 and not CoD.CACUtility.MasteryCamos[f347_local2] then
			local f347_local3 = CoD.CACUtility.AdjustCamoIfSignatureCamo( f347_arg0, f347_local1 ) --[[ @ 0]]
			if f347_local3 ~= f347_local1 then
				f347_local0.camoIndex:set( f347_local3 ) --[[ @ 0]]
			end
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponModelSlot = function ( f348_arg0, f348_arg1, f348_arg2 )
	local f348_local0 = f348_arg0 and CoD.WZUtility.GetVariantSlot( f348_arg1, f348_arg0, false ) --[[ @ 0]]
	if not f348_arg2 then
		f348_arg2 = 0 --[[ @ 0]]
	end
	if f348_local0 then
		return f348_local0.weaponModelSlot and f348_local0.weaponModelSlot:get() or f348_arg2
	else
		return f348_arg2
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWeaponOptionsTableForIndex = function ( f349_arg0, f349_arg1, f349_arg2 )
	if not f349_arg1 then
		return CoD.WeaponOptionsUtility.CreateWeaponOptionsTable()
	end
	local f349_local0 = CoD.WZUtility.GetVariantSlot( f349_arg0, f349_arg1, false ) --[[ @ 0]]
	local f349_local1 = 0 --[[ @ 0]]
	local f349_local2 = 0 --[[ @ 0]]
	local f349_local3 = 0 --[[ @ 0]]
	local f349_local4 = 0 --[[ @ 0]]
	local f349_local5 = 0 --[[ @ 0]]
	if f349_local0 then
		f349_local1 = f349_local0.camoIndex:get() --[[ @ 0]]
		f349_local2 = f349_local0.reticleIndex:get() --[[ @ 0]]
		f349_local4 = f349_local0.weaponModelSlot:get() --[[ @ 0]]
		f349_local5 = f349_local0.charmIndex:get() --[[ @ 0]]
	end
	if f349_arg2 then
		f349_local4 = f349_arg2 --[[ @ 0]]
	end
	Engine[@"ClearPaintjobLayerData"]() --[[ @ 0]]
	return CoD.WeaponOptionsUtility.CreateWeaponOptionsTable( f349_local1, f349_local2, f349_local3, f349_local4, nil, f349_local5 )
end
 --[[ @ 0]]
CoD.WZUtility.SetSignatureWeapon = function ( f350_arg0, f350_arg1, f350_arg2 )
	local f350_local0 = f350_arg0:getModel( f350_arg1, "itemIndex" ) --[[ @ 0]]
	local f350_local1 = f350_arg0:getModel( f350_arg1, "weaponModelSlotIndex" ) --[[ @ 0]]
	local f350_local2 = f350_local0 and f350_local0:get() --[[ @ 0]]
	local f350_local3 = f350_local2 and CoD.WZUtility.GetVariantSlot( f350_arg1, f350_local2, true ) --[[ @ 0]]
	if f350_local1 and f350_local3 then
		local f350_local4 = f350_local1:get() --[[ @ 0]]
		local f350_local5 = false --[[ @ 0]]
		local f350_local6 = f350_local3.weaponModelSlot:get() --[[ @ 0]]
		if f350_arg0.mastercraftWeaponModelSlots and #f350_arg0.mastercraftWeaponModelSlots > 0 then
			for f350_local10, f350_local11 in ipairs( f350_arg0.mastercraftWeaponModelSlots ) --[[ @ 0]] do
				if f350_local6 == f350_local11 then
					f350_local5 = true --[[ @ 0]]
					break
				end
			end
		end
		if f350_arg0.equipSound and f350_arg0.equipSound ~= @"hash_0" then
			Engine[@"hash_498954175CA6A32C"]( f350_arg0.equipSound ) --[[ @ 0]]
		end
		f350_local3.weaponModelSlot:set( f350_local4 ) --[[ @ 0]]
		if CoD.SafeGetModelValue( f350_arg0:getModel(), "isMastercraft" ) then
			f350_local3.camoIndex:set( CoD.SafeGetModelValue( f350_arg0:getModel(), "weaponOptionSubIndex" ) ) --[[ @ 0]]
		elseif f350_local5 then
			f350_local3.camoIndex:set( CoD.CACUtility.EmptyItemIndex ) --[[ @ 0]]
		end
		local f350_local7 = f350_arg0:getModel( f350_arg1, "unlockableItemModel" ) --[[ @ 0]]
		if f350_local7 and f350_local7:get() then
			local f350_local8 = f350_local7:get() --[[ @ 0]]
			if f350_local8.weaponModelSlot then
				f350_local8 = f350_local7:get() --[[ @ 0]]
				f350_local8.weaponModelSlot:set( f350_local4 ) --[[ @ 0]]
			end
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.ArrayContains = function ( f351_arg0, f351_arg1 )
	for f351_local0 = 1 --[[ @ 0]], #f351_arg0, 1 do
		if f351_arg0[f351_local0] == f351_arg1 then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.GetPersonalizeItemsForItemGroup = function ( f352_arg0, f352_arg1, f352_arg2 )
	local f352_local0 = CoD.CACUtility.GetUnlockableItemsForItemGroup( f352_arg0, Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"], f352_arg2 ) --[[ @ 0]]
	local f352_local1 = {} --[[ @ 0]]
	for f352_local5, f352_local6 in ipairs( f352_local0 ) --[[ @ 0]] do
		if CoD.WZUtility.ArrayContains( CoD.WZUtility.WZPersonalizeWeaponNames, f352_local6.nameHash ) then
			table.insert( f352_local1, f352_local6 ) --[[ @ 0]]
		end
	end
	return f352_local1
end
 --[[ @ 0]]
CoD.WZUtility.GetEquippedSignatureWeaponImage = function ( f353_arg0, f353_arg1, f353_arg2 )
	if f353_arg0.useVariantSlot and f353_arg0.useVariantSlot:get() > 0 then
		return f353_arg0.image:get()
	else
		local f353_local0 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
		local f353_local1 = f353_arg2 --[[ @ 0]]
		local f353_local2 = Enum[@"hash_6EB546760F890D2"][@"hash_6569E84652131CD7"] --[[ @ 0]]
		if f353_local1 > CoD.CACUtility.EmptyItemIndex then
			local f353_local3 = Engine[@"GetItemImage"]( f353_local1, f353_local2, f353_local0 ) --[[ @ 0]]
			local f353_local4 = Engine[@"hash_7B98952F69D937F9"]( f353_local1, f353_local2, f353_local0 ) --[[ @ 0]]
			if f353_local4 then
				local f353_local5 = CoD.WZUtility.GetWeaponModelSlot( f353_local1, f353_arg1 ) --[[ @ 0]]
				if f353_local5 > 0 then
					local f353_local6 = Engine[@"hash_79F0BB7D52A7A978"]( f353_local4 ) --[[ @ 0]]
					local f353_local7 = f353_local6[f353_local5 + 1] --[[ @ 0]]
					if f353_local7 then
						f353_local3 = f353_local7[@"hash_45F42DCC540250D3"] or f353_local3 --[[ @ 0]]
					end
				end
			end
			return RegisterImage( f353_local3 )
		else
			
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetEquippedSignatureWeaponName = function ( f354_arg0, f354_arg1, f354_arg2 )
	if f354_arg0.useVariantSlot and f354_arg0.useVariantSlot:get() > 0 then
		return f354_arg0.displayName:get()
	else
		local f354_local0 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
		local f354_local1 = f354_arg2 --[[ @ 0]]
		local f354_local2 = Enum[@"hash_6EB546760F890D2"][@"hash_6569E84652131CD7"] --[[ @ 0]]
		if f354_local1 > CoD.CACUtility.EmptyItemIndex then
			local f354_local3 = Engine[@"hash_4F9F1239CFD921FE"]( Engine[@"GetItemName"]( f354_local1, f354_local2, f354_local0 ) ) --[[ @ 0]]
			local f354_local4 = Engine[@"hash_7B98952F69D937F9"]( f354_local1, f354_local2, f354_local0 ) --[[ @ 0]]
			if f354_local4 then
				local f354_local5 = CoD.WZUtility.GetWeaponModelSlot( f354_local1, f354_arg1 ) --[[ @ 0]]
				if f354_local5 > 0 then
					local f354_local6 = Engine[@"hash_79F0BB7D52A7A978"]( f354_local4 ) --[[ @ 0]]
					local f354_local7 = f354_local6[f354_local5 + 1] --[[ @ 0]]
					if f354_local7 then
						if f354_local7[@"hash_5C2AA73D9F82E9C2"] and f354_local7[@"hash_62861D919C8A4186"] then
							if f354_local7[@"hash_455F116BF695C8F6"] then
								f354_local3 = Engine[@"hash_4F9F1239CFD921FE"]( f354_local7[@"hash_455F116BF695C8F6"] ) or f354_local3 --[[ @ 0]]
							end
						else
							f354_local3 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_341954FC612B5845", f354_local3 ) --[[ @ 0]]
						end
					end
				end
			end
			return f354_local3
		else
			
		end
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetCollapseIndexAndCountString = function ( f355_arg0 )
	local f355_local0 = f355_arg0 --[[ @ 0]]
	local f355_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_758EB3330F8F2A25", f355_local0 + 1, f355_local1.hudItems.warzone.collapseCount:get() )
end
 --[[ @ 0]]
CoD.WZUtility.AnyReinsertionsRemaining = function ( f356_arg0 )
	local f356_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f356_local0 = f356_local0.hudItems.warzone --[[ @ 0]]
	local f356_local1 = f356_local0.reinsertionIndex:get() --[[ @ 0]]
	local f356_local2 = f356_local0.collapseCount:get() --[[ @ 0]]
	local f356_local3 = true --[[ @ 0]]
	if Engine[@"GetGametypeSetting"]( @"wzenablewaverespawn" ) == 1 then
		local f356_local4 = CoD.SafeGetModelValue( Engine[@"GetModelForController"]( f356_arg0 ), "hudItems.playerCanRedeploy" ) --[[ @ 0]]
		if not f356_local4 or f356_local4 <= 0 then
			f356_local3 = false --[[ @ 0]]
		end
	end
	local f356_local4 --[[ @ 0]]
	if f356_local1 < f356_local2 then
		f356_local4 = f356_local3 --[[ @ 0]]
	else
		f356_local4 = false --[[ @ 0]]
	end
	return f356_local4
end
 --[[ @ 0]]
CoD.WZUtility.UpdatePersonalizeWeaponModel = function ( f357_arg0, f357_arg1, f357_arg2 )
	local f357_local0 = CoD.BaseUtility.GetMenuSessionMode( f357_arg2 ) --[[ @ 0]]
	local f357_local1 = f357_arg2.__loadoutType --[[ @ 0]]
	local f357_local2 = @"hash_0" --[[ @ 0]]
	local f357_local3 = f357_arg0:getModel() --[[ @ 0]]
	local f357_local4 = nil --[[ @ 0]]
	if f357_local3 and f357_local3.itemIndex then
		f357_local4 = f357_local3.itemIndex:get() --[[ @ 0]]
		f357_local2 = Engine[@"hash_7B98952F69D937F9"]( f357_local4, Enum[@"hash_6EB546760F890D2"][@"hash_6569E84652131CD7"], f357_local0 ) --[[ @ 0]]
	end
	CoD.WZUtility.ReconcileVariantSlot( f357_arg1, f357_local4 ) --[[ @ 0]]
	local f357_local5 = CoD.ZMLoadoutUtility.GetArmoryAttachmentStringForElement( f357_arg0, f357_arg1, f357_local0 ) --[[ @ 0]]
	local f357_local6 = CoD.WZUtility.GetWeaponOptionsTableForIndex( f357_arg1, f357_local4 ) --[[ @ 0]]
	local f357_local7 = CoD.WZUtility.GetVariantSlot( f357_arg1, f357_local4, false ) --[[ @ 0]]
	if f357_local7 then
		f357_local6.robStage = CoD.WeaponOptionsUtility.GetRobStageForCamoIndex( f357_local7.camoIndex:get() ) --[[ @ 0]]
	end
	f357_local6 = CoD.WeaponOptionsUtility.GetWeaponOptionsStringFromTable( f357_local6 ) --[[ @ 0]]
	if f357_local1 and f357_local2 then
		local f357_local8 = Engine[@"SendClientScriptNotify"] --[[ @ 0]]
		local f357_local9 = f357_arg1 --[[ @ 0]]
		local f357_local10 = "CustomClass_update" .. CoD.GetLocalClientAdjustedNum( f357_arg1 ) --[[ @ 0]]
		local f357_local11 = {
			base_weapon_slot = f357_local1,
			weapon = f357_local2,
			attachments = f357_local5,
			camera = "select01"
		} --[[ @ 0]]
		if f357_local4 then
			local f357_local12 = f357_local6 --[[ @ 0]]
		end
		f357_local11.options = f357_local12 or CoD.CACUtility.EmptyWeaponOptions() --[[ @ 0]]
		f357_local11.is_item_unlocked = true --[[ @ 0]]
		f357_local11.is_item_tokenlocked = true --[[ @ 0]]
		f357_local8( f357_local9, f357_local10, f357_local11 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetWeaponOptionForVariant = function ( f358_arg0, f358_arg1, f358_arg2, f358_arg3 )
	local f358_local0 = CoD.BaseUtility.GetMenuSessionMode( f358_arg3 ) --[[ @ 0]]
	local f358_local1 = f358_arg3._model --[[ @ 0]]
	if f358_local1 then
		f358_local1 = f358_arg3._model.itemIndex:get() --[[ @ 0]]
	end
	local f358_local2 = CoD.WZUtility.GetVariantSlot( f358_arg2, f358_local1, true ) --[[ @ 0]]
	if not f358_local2 then
		return 
	end
	local f358_local3 = f358_arg1:getModel( f358_arg2, "weaponOptionTypeName" ) --[[ @ 0]]
	local f358_local4 = f358_arg1:getModel( f358_arg2, "weaponOptionSubIndex" ) --[[ @ 0]]
	local f358_local5 = f358_arg1:getModel( f358_arg2, "weaponOptionType" ) --[[ @ 0]]
	if f358_local3 and f358_local4 and f358_local5 then
		local f358_local6 = f358_local3:get() --[[ @ 0]]
		local f358_local7 = f358_local4:get() --[[ @ 0]]
		local f358_local8 = f358_local5:get() --[[ @ 0]]
		if f358_local8 == Enum[@"eWeaponOptionGroup"][@"hash_543A5BEA0FB2891E"] then
			local f358_local9 = f358_arg1:getModel( f358_arg2, "paintjobSlot" ) --[[ @ 0]]
			f358_local2.paintjobSlot:set( f358_local9:get() ) --[[ @ 0]]
		elseif f358_local8 == Enum[@"eWeaponOptionGroup"][@"hash_16C9BD564F3BA48B"] then
			f358_local2.reticleIndex:set( f358_local7 ) --[[ @ 0]]
		elseif f358_local8 == Enum[@"eWeaponOptionGroup"][@"hash_7393666961B28A15"] then
			f358_local2.camoIndex:set( f358_local7 ) --[[ @ 0]]
		end
		local f358_local9 = CoD.WZUtility.GetWeaponModelSlot( f358_local1, f358_arg2 ) --[[ @ 0]]
		if f358_local9 > 0 then
			local f358_local10 = Engine[@"hash_79F0BB7D52A7A978"]( Engine[@"hash_7B98952F69D937F9"]( f358_local1, Enum[@"hash_6EB546760F890D2"][@"hash_6569E84652131CD7"], f358_local0 ) ) --[[ @ 0]]
			if f358_local10[f358_local9 + 1] and not f358_local10[f358_local9 + 1][@"hash_5C2AA73D9F82E9C2"] then
				f358_local2.weaponModelSlot:set( CoD.CACUtility.EmptyItemIndex ) --[[ @ 0]]
				f358_arg3._model.weaponModelSlot:set( CoD.CACUtility.EmptyItemIndex ) --[[ @ 0]]
			end
		end
	end
	CoD.WeaponOptionsUtility.UpdateWeaponOptionLists( f358_arg1, f358_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.SetSignatureWeaponThemeForVariant = function ( f359_arg0, f359_arg1, f359_arg2, f359_arg3 )
	local f359_local0 = CoD.BaseUtility.GetMenuSessionMode( f359_arg3 ) --[[ @ 0]]
	local f359_local1 = f359_arg3._model --[[ @ 0]]
	if f359_local1 then
		f359_local1 = f359_arg3._model.itemIndex:get() --[[ @ 0]]
	end
	local f359_local2 = CoD.WZUtility.GetVariantSlot( f359_arg2, f359_local1, true ) --[[ @ 0]]
	if not f359_local2 or not f359_local2.weaponModelSlot or not f359_local2.camoIndex then
		return 
	end
	local f359_local3 = f359_arg1:getModel( f359_arg2, "signatureWeaponModelSlot" ) --[[ @ 0]]
	local f359_local4 = f359_arg1:getModel( f359_arg2, "weaponOptionSubIndex" ) --[[ @ 0]]
	if f359_local3 then
		local f359_local5 = f359_local3:get() --[[ @ 0]]
		local f359_local6 = CoD.CACUtility.EmptyItemIndex --[[ @ 0]]
		if f359_local4 and f359_local4:get() then
			f359_local6 = f359_local4:get() --[[ @ 0]]
		end
		f359_local2.weaponModelSlot:set( f359_local5 ) --[[ @ 0]]
		f359_local2.camoIndex:set( f359_local6 ) --[[ @ 0]]
	end
	CoD.WeaponOptionsUtility.UpdateWeaponOptionLists( f359_arg1, f359_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.ClearWeaponOptionForVariant = function ( f360_arg0, f360_arg1, f360_arg2, f360_arg3 )
	local f360_local0 = CoD.BaseUtility.GetMenuSessionMode( f360_arg3 ) --[[ @ 0]]
	local f360_local1 = f360_arg3._model --[[ @ 0]]
	if f360_local1 then
		f360_local1 = f360_arg3._model.itemIndex:get() --[[ @ 0]]
	end
	local f360_local2 = CoD.WZUtility.GetVariantSlot( f360_arg2, f360_local1, true ) --[[ @ 0]]
	if not f360_local2 then
		return 
	end
	local f360_local3 = f360_arg1:getModel( f360_arg2, "weaponOptionType" ) --[[ @ 0]]
	local f360_local4 --[[ @ 0]]
	if f360_local3 then
		f360_local4 = f360_local3:get() --[[ @ 0]]
		if not f360_local4 then
		
		else
			if f360_local4 == Enum[@"eWeaponOptionGroup"][@"hash_7393666961B28A15"] then
				f360_local2.camoIndex:set( CoD.CACUtility.EmptyItemIndex ) --[[ @ 0]]
			elseif f360_local4 == Enum[@"eWeaponOptionGroup"][@"hash_16C9BD564F3BA48B"] then
				f360_local2.reticleIndex:set( CoD.CACUtility.EmptyItemIndex ) --[[ @ 0]]
			elseif f360_local4 == Enum[@"eWeaponOptionGroup"][@"hash_543A5BEA0FB2891E"] then
				f360_local2.paintjobSlot:set( Enum[@"CustomizationPaintjobInvalidID"][@"hash_660CAA8D66ED63A5"] ) --[[ @ 0]]
			end
			CoD.WeaponOptionsUtility.UpdateWeaponOptionLists( f360_arg1, f360_arg2 ) --[[ @ 0]]
		end
	end
	f360_local4 = Enum[@"eWeaponOptionGroup"][@"hash_5FC7C36E20E72CE4"] --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.IsWeaponOptionEquipped = function ( f361_arg0, f361_arg1, f361_arg2, f361_arg3 )
	local f361_local0 = f361_arg0._model --[[ @ 0]]
	if f361_local0 then
		f361_local0 = f361_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f361_local1 = CoD.WZUtility.GetVariantSlot( f361_arg2, f361_local0, false ) --[[ @ 0]]
	local f361_local2 = f361_arg1:getModel() --[[ @ 0]]
	if f361_local2 and f361_local1 and f361_local1[f361_arg3] then
		local f361_local3 = f361_local1[f361_arg3]:get() --[[ @ 0]]
		local f361_local4 = f361_local2.weaponOptionSubIndex:get() --[[ @ 0]]
		if f361_local2.weaponOptionType:get() == Enum[@"eWeaponOptionGroup"][@"hash_543A5BEA0FB2891E"] and f361_local2.paintjobSlot then
			local f361_local5 = f361_local2.paintjobSlot:get() --[[ @ 0]]
			if f361_local5 ~= Enum[@"CustomizationPaintjobInvalidID"][@"hash_660CAA8D66ED63A5"] then
				return f361_local5 == f361_local3
			end
		end
		return f361_local4 == f361_local3
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmoryCharmItemFromWeapon = function ( f362_arg0, f362_arg1 )
	local f362_local0 = CoD.WZUtility.GetVariantSlot( f362_arg0, f362_arg1, true ) --[[ @ 0]]
	if f362_local0 and f362_local0.charmIndex then
		return f362_local0.charmIndex:get()
	else
		return CoD.CACUtility.EmptyItemIndex
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetArmoryCharmItem = function ( f363_arg0, f363_arg1, f363_arg2 )
	local f363_local0 = f363_arg0._model --[[ @ 0]]
	if f363_local0 then
		f363_local0 = f363_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f363_local1 = CoD.WZUtility.GetVariantSlot( f363_arg1, f363_local0, true ) --[[ @ 0]]
	if not f363_local1 then
		return 
	elseif f363_local1.charmIndex then
		f363_local1.charmIndex:set( f363_arg2 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmoryCharmItem = function ( f364_arg0, f364_arg1 )
	local f364_local0 = f364_arg0._model --[[ @ 0]]
	if f364_local0 then
		f364_local0 = f364_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	return CoD.WZUtility.GetArmoryCharmItemFromWeapon( f364_arg1, f364_local0 )
end
 --[[ @ 0]]
CoD.WZUtility.IsArmoryWeaponCharmEquipped = function ( f365_arg0, f365_arg1, f365_arg2 )
	local f365_local0 = CoD.SafeGetModelValue( f365_arg1:getModel(), "itemIndex" ) --[[ @ 0]]
	local f365_local1 = f365_arg0._model --[[ @ 0]]
	if f365_local1 then
		f365_local1 = f365_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f365_local2 = CoD.WZUtility.GetVariantSlot( f365_arg2, f365_local1, true ) --[[ @ 0]]
	if not f365_local2 or not f365_local0 then
		return false
	elseif f365_local2.charmIndex then
		return f365_local2.charmIndex:get() == f365_local0
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetArmoryDeathFx = function ( f366_arg0, f366_arg1, f366_arg2 )
	local f366_local0 = f366_arg0._model --[[ @ 0]]
	if f366_local0 then
		f366_local0 = f366_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f366_local1 = CoD.WZUtility.GetVariantSlot( f366_arg1, f366_local0, true ) --[[ @ 0]]
	if not f366_local1 then
		return 
	elseif f366_local1.deathFxIndex then
		f366_local1.deathFxIndex:set( f366_arg2 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetArmoryDeathFx = function ( f367_arg0, f367_arg1 )
	local f367_local0 = f367_arg0._model --[[ @ 0]]
	if f367_local0 then
		f367_local0 = f367_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f367_local1 = CoD.WZUtility.GetVariantSlot( f367_arg1, f367_local0, true ) --[[ @ 0]]
	if f367_local1 and f367_local1.deathFxIndex then
		return f367_local1.deathFxIndex:get()
	else
		return CoD.CACUtility.EmptyItemIndex
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsArmoryWeaponDeathFxEquipped = function ( f368_arg0, f368_arg1, f368_arg2 )
	local f368_local0 = CoD.SafeGetModelValue( f368_arg1:getModel(), "itemIndex" ) --[[ @ 0]]
	local f368_local1 = f368_arg0._model --[[ @ 0]]
	if f368_local1 then
		f368_local1 = f368_arg0._model.itemIndex:get() --[[ @ 0]]
	end
	local f368_local2 = CoD.WZUtility.GetVariantSlot( f368_arg2, f368_local1, true ) --[[ @ 0]]
	if not f368_local2 or not f368_local0 then
		return false
	elseif f368_local2.deathFxIndex then
		return f368_local2.deathFxIndex:get() == f368_local0
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.PlayWZTrialVideo = function ( f369_arg0, f369_arg1 )
	if not IsGameTrial() or not IsBooleanDvarSet( @"hash_31C389A5A38BA7C" ) then
		return 
	end
	local f369_local0 = Engine[@"StorageGetBuffer"]( f369_arg1, Enum[@"StorageFileType"][@"hash_7D1A0F784B3C95A0"] ) --[[ @ 0]]
	if not f369_local0 then
		return 
	end
	local f369_local1 = Engine[@"GetModelForController"]( f369_arg1 ) --[[ @ 0]]
	f369_local1 = f369_local1:create( "attemptedShowWZTrialVideo", true ) --[[ @ 0]]
	if f369_local1:get() == nil then
		f369_local1:set( false ) --[[ @ 0]]
	end
	local f369_local2 = f369_local0.extraBools[2] --[[ @ 0]]
	if f369_local2:get() == 0 then
		f369_local2:set( 1 ) --[[ @ 0]]
		Engine[@"StorageWrite"]( f369_arg1, Enum[@"StorageFileType"][@"hash_7D1A0F784B3C95A0"] ) --[[ @ 0]]
		f369_local1:set( true ) --[[ @ 0]]
		return 
	elseif f369_local1:get() then
		return 
	end
	f369_local2 = f369_local0.extraBools[3] --[[ @ 0]]
	if f369_local2:get() ~= 0 then
		return 
	end
	f369_local2:set( 1 ) --[[ @ 0]]
	Engine[@"StorageWrite"]( f369_arg1, Enum[@"StorageFileType"][@"hash_7D1A0F784B3C95A0"] ) --[[ @ 0]]
	CoD.WZUtility.PlayWZTrialVideoInternal( f369_arg0, f369_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.PlayWZTrialVideoInternal = function ( f370_arg0, f370_arg1 )
	local f370_local0 = DataSources.VoDViewer.getModel( f370_arg1 ) --[[ @ 0]]
	f370_local0.stream:set( CoD.VideoStreamingUtility.GetMoviePlayerParams( Enum[@"hash_6C47FC1BD2E5CCEE"][@"hash_390B07394D69C5F4"], "core_frontend_wz_trial_trailer", false, false ) ) --[[ @ 0]]
	DelayOpenOverlay( f370_arg0, "VoDViewer", f370_arg1, {
		fullscreen = true
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.CreateMOTDWZTrialCard = function ( f371_arg0, f371_arg1 )
	if not IsBooleanDvarSet( @"hash_31C389A5A38BA7C" ) then
		return 
	else
		table.insert( f371_arg0, {
			models = {
				locked = false,
				name = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4BB3EB781613CA2C" ),
				iconBackground = @"ui_icon_crm_featured_thanks",
				iconBackgroundFocus = @"ui_icon_crm_featured_thanks",
				descriptionText = @"hash_71B03F3DADFD429C",
				action = function ( f372_arg0, f372_arg1, f372_arg2, f372_arg3, f372_arg4 )
					CoD.WZUtility.PlayWZTrialVideoInternal( f372_arg4, f372_arg2 ) --[[ @ 0]]
				end,
				showForAllClients = true,
				hasDoubleXP = false,
				hasDoubleWeaponXP = false
			}
		} ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SelectWeaponAndOpenCustomization = function ( f373_arg0, f373_arg1, f373_arg2, f373_arg3 )
	if f373_arg0.WeaponListWidget and f373_arg0.WeaponListWidget.weaponList then
		local f373_local0 = f373_arg0.WeaponListWidget --[[ @ 0]]
		CoD.CraftUtility.SetupPaintjobPersonalization( f373_local0, f373_arg1, f373_arg3 ) --[[ @ 0]]
		CoD.CACUtility.OpenWeaponPersonalizationOverlay( f373_local0, f373_arg0, f373_arg3, f373_arg1, f373_arg2, "primary" ) --[[ @ 0]]
		PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetWZInventoryUnlockDescription = function ( f374_arg0, f374_arg1, f374_arg2, f374_arg3 )
	local f374_local0 = CoD.SafeGetModelValue( f374_arg1, "objective" .. f374_arg2 .. ".unlockProgress" ) --[[ @ 0]]
	if f374_local0 and f374_local0 >= 0 then
		return Engine[@"hash_4F9F1239CFD921FE"]( f374_arg3, f374_local0 )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( f374_arg3 )
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsPersonalizationLockedForWeapon = function ( f375_arg0, f375_arg1, f375_arg2 )
	local f375_local0 = f375_arg1:getModel( f375_arg2, "refHash" ) --[[ @ 0]]
	local f375_local1 = f375_local0 and f375_local0:get() --[[ @ 0]]
	if f375_local1 and not CoD.WZUtility.ArrayContains( CoD.WZUtility.WZDLC1WeaponNames, f375_local1 ) then
		local f375_local2 = CoD.BlackMarketTableUtility.LootInfoLookup( f375_arg2, f375_local1 ) --[[ @ 0]]
		if f375_local2.isLoot then
			return not f375_local2.owned
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.HasWeaponAttachments = function ( f376_arg0, f376_arg1 )
	local f376_local0 = DataSources.WarzoneInventory.getModel( f376_arg0 ) --[[ @ 0]]
	local f376_local1 = "weapon" --[[ @ 0]]
	return f376_local0["weapon" .. f376_arg1].supportsAttachments:get() == 1
end
 --[[ @ 0]]
CoD.WZUtility.HasAttachments = function ( f377_arg0, f377_arg1 )
	local f377_local0 = DataSources.WarzoneInventory.getModel( f377_arg0 ) --[[ @ 0]]
	local f377_local1 = "weapon" --[[ @ 0]]
	return f377_local0["weapon" .. f377_arg1].hasAttachments:get() == 1
end
 --[[ @ 0]]
CoD.WZUtility.GetDecoratedStringForRank = function ( f378_arg0, f378_arg1, f378_arg2 )
	local f378_local0 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
	if IsGameModeParagonCapable( f378_local0 ) and Engine[@"GetPrestigeCap"]( f378_local0 ) <= f378_arg2 then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_35927EF63E459082", Engine[@"GetParagonRankDisplayLevel"]( f378_arg1 ) )
	elseif CoD.PrestigeUtility.GetMaxRankByMode( f378_local0 ) <= f378_arg0 then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_54008CE61FE52DCD" )
	else
		return tostring( Engine[@"GetRankDisplayLevel"]( f378_arg0, f378_local0 ) )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetRankColorForPLevel = function ( f379_arg0, f379_arg1 )
	local f379_local0 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
	if IsGameModeParagonCapable( f379_local0 ) and Engine[@"GetPrestigeCap"]( f379_local0 ) <= f379_arg1 then
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.PlayerParagonOrange )
	else
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.T8__OFF__GRAY )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetRankStringForRankString = function ( f380_arg0 )
	return f380_arg0
end
 --[[ @ 0]]
CoD.WZUtility.GetOverheadRankColorForPLevelByXUID = function ( f381_arg0, f381_arg1 )
	local f381_local0 = f381_arg1 --[[ @ 0]]
	local f381_local1 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
	if IsGameModeParagonCapable( f381_local1 ) and Engine[@"GetPrestigeCap"]( f381_local1 ) <= CoD.PrestigeUtility.GetCurrentPLevel( f381_arg0 ) then
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.PlayerParagonOrange )
	else
		return CoD.ColorUtility.ConvertTableToRGB( Engine[@"hash_60041DC2CF4139D7"]( f381_local0 ) and ColorSet.PlayerYellow or ColorSet.T8__OFF__GRAY )
	end
end
 --[[ @ 0]]
CoD.WZUtility.GetDecoratedStringForRankByXUID = function ( f382_arg0, f382_arg1 )
	local f382_local0 = Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] --[[ @ 0]]
	local f382_local1 = f382_arg1 --[[ @ 0]]
	local f382_local2 = CoD.PrestigeUtility.GetCurrentPLevel( f382_arg0 ) --[[ @ 0]]
	local f382_local3 = Engine[@"hash_419FAC7D9E55031E"]( f382_local1, f382_local0 ) --[[ @ 0]]
	return CoD.WZUtility.GetDecoratedStringForRank( f382_local3.rank or 0, f382_local3.paragonRank or 0, f382_local2 )
end
 --[[ @ 0]]
CoD.WZUtility.SetWeaponHeaderTexts = function ( f383_arg0, f383_arg1 )
	local f383_local0 = f383_arg0.weaponId or 0 --[[ @ 0]]
	f383_arg1.HeaderWeapon:setText( Engine[@"hash_4F9F1239CFD921FE"]( "WZ/WEAPON_WITH_ID", tostring( f383_local0 + 1 ) ) ) --[[ @ 0]]
	f383_arg1.HeaderWeaponEquipped:setText( Engine[@"hash_4F9F1239CFD921FE"]( "WZ/WEAPON_EQUIPED", tostring( f383_local0 + 1 ) ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.IsWarzoneUIHidden = function ( f384_arg0, f384_arg1, f384_arg2 )
	if not CoD.HUDUtility.IsWarzone() then
		return false
	elseif Engine[@"GetGametypeSetting"]( f384_arg1 ) == 1 then
		return true
	end
	local f384_local0 = Engine[@"GetProfileVarInt"]( f384_arg0, f384_arg2 ) --[[ @ 0]]
	local f384_local1 = Engine[@"GetGametypeSetting"]( "maxTeamPlayers" ) --[[ @ 0]]
	if f384_local0 ~= nil then
		if f384_local0 == Enum[@"hash_2893D841C87EFCD2"][@"hash_A9F1990B36EA121"] then
			return false
		elseif f384_local0 == Enum[@"hash_2893D841C87EFCD2"][@"hash_2AF5BF04553FFD4A"] then
			return f384_local1 > 1
		elseif f384_local0 == Enum[@"hash_2893D841C87EFCD2"][@"hash_29E6666B7E57403C"] then
			return f384_local1 == 1
		elseif f384_local0 == Enum[@"hash_2893D841C87EFCD2"][@"hash_323FFDB34E10B9C8"] then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.WZUtility.IsWarzoneMapDisabled = function ( f385_arg0, f385_arg1 )
	if not CoD.HUDUtility.IsWarzone() then
		return false
	elseif Engine[@"GetGametypeSetting"]( "wzDisableMapUI" ) == 1 then
		return true
	elseif not IsInPrematchPeriod( f385_arg0 ) and Engine[@"GetGametypeSetting"]( "wzDisableMatchMapUI" ) == 1 then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetQuickConsumeFilter = function ( f386_arg0, f386_arg1, f386_arg2 )
	local f386_local0 = f386_arg2 --[[ @ 0]]
	local f386_local1 = f386_arg2.subscribeToModel --[[ @ 0]]
	local f386_local2 = Engine[@"GetModelForController"]( f386_arg1 ) --[[ @ 0]]
	f386_local1( f386_local0, f386_local2["hudItems.inventory.quickConsumeNetworkId"], function ( f387_arg0 )
		f386_arg2:setFilter( function ( f388_arg0 )
			local f388_local0 = f387_arg0:get() --[[ @ 0]]
			local f388_local1 --[[ @ 0]]
			if f388_arg0.id:get() ~= f388_local0 or f388_local0 == 0 or f388_local0 == CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
				f388_local1 = false --[[ @ 0]]
			else
				f388_local1 = true --[[ @ 0]]
			end
			return f388_local1
		end ) --[[ @ 0]]
		UpdateDataSource( f386_arg0, f386_arg2, f386_arg1 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.ShowQuickInventoryPC = function ( f389_arg0 )
	local f389_local0 = Engine[@"GetModelForController"]( f389_arg0 ) --[[ @ 0]]
	f389_local0 = f389_local0["hudItems.inventory.quickConsumeNetworkId"].get( f389_local0["hudItems.inventory.quickConsumeNetworkId"] ) --[[ @ 0]]
	local f389_local1 --[[ @ 0]]
	if f389_local0 == 0 or f389_local0 == CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE then
		f389_local1 = false --[[ @ 0]]
	else
		f389_local1 = true --[[ @ 0]]
	end
	return f389_local1
end
 --[[ @ 0]]
CoD.WZUtility.SendInventoryEquipCurrentConsumable = function ( f390_arg0, f390_arg1 )
	local f390_local0 = SendCustomClientScriptNotifyForAdjustedClient --[[ @ 0]]
	local f390_local1 = f390_arg0 --[[ @ 0]]
	local f390_local2 = "inventory_equip_quick_consumable" --[[ @ 0]]
	local f390_local3 = {} --[[ @ 0]]
	local f390_local4 = f390_arg1:getModel() --[[ @ 0]]
	f390_local3.id = f390_local4.id:get() --[[ @ 0]]
	f390_local0( f390_local1, f390_local2, f390_local3 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.WZAARConvertChallengeProgressForBar = function ( f391_arg0, f391_arg1, f391_arg2, f391_arg3 )
	local f391_local0 = f391_arg1 --[[ @ 0]]
	local f391_local1 = f391_local0:create( "challengeProgress" ) --[[ @ 0]]
	local f391_local2 = f391_local1:create( "earnedXpProgress" ) --[[ @ 0]]
	local f391_local3 = f391_local2 --[[ @ 0]]
	f391_local2 = f391_local2.set --[[ @ 0]]
	local f391_local4 = f391_local0.statPercent --[[ @ 0]]
	if f391_local4 then
		f391_local4 = f391_local0.statPercent:get() --[[ @ 0]]
	end
	f391_local2( f391_local3, f391_local4 ) --[[ @ 0]]
	f391_local2 = f391_local1:create( "previousXpProgress" ) --[[ @ 0]]
	f391_local3 = f391_local2 --[[ @ 0]]
	f391_local2 = f391_local2.set --[[ @ 0]]
	f391_local4 = f391_local0.prevStatPercent --[[ @ 0]]
	if f391_local4 then
		f391_local4 = f391_local0.prevStatPercent:get() --[[ @ 0]]
	end
	f391_local2( f391_local3, f391_local4 ) --[[ @ 0]]
	f391_arg3:setModel( f391_local1, f391_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.WZAARDelayThenAnimateProgress = function ( f392_arg0, f392_arg1, f392_arg2, f392_arg3 )
	if not f392_arg0:getModel() then
		return 
	end
	local f392_local0 = f392_arg0:getModel() --[[ @ 0]]
	local f392_local1 = f392_local0.numInGameEntries --[[ @ 0]]
	if f392_local1 then
		f392_local1 = f392_local0.numInGameEntries:get() --[[ @ 0]]
	end
	local f392_local2 = "uin_draft_bar_fill_1shot" --[[ @ 0]]
	local f392_local3 = function ()
		local f393_local0 = f392_local0.earnedXpProgress and f392_local0.earnedXpProgress:get() or 0 --[[ @ 0]]
		CoD.SoundUtility.PlaySoundOnceForController( f392_arg1, f392_local2 ) --[[ @ 0]]
		f392_arg2.Meter:beginAnimation( f392_arg3, Enum[@"hash_1F50FFF429AB1890"][@"hash_15193EA7825DC097"] ) --[[ @ 0]]
		f392_arg2.MeterAdd:beginAnimation( f392_arg3 ) --[[ @ 0]]
		f392_arg2.MeterGlow:beginAnimation( f392_arg3 ) --[[ @ 0]]
		f392_arg2.Meter:setShaderVector( 0, f393_local0, 0, 0, 0 ) --[[ @ 0]]
		f392_arg2.MeterAdd:setShaderVector( 0, f393_local0, 0, 0, 0 ) --[[ @ 0]]
		f392_arg2.MeterGlow:setShaderVector( 0, f393_local0, 0, 0, 0 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f392_local4 = f392_local0.previousXpProgress and f392_local0.previousXpProgress:get() or 0 --[[ @ 0]]
	if (f392_local0.earnedXpProgress and f392_local0.earnedXpProgress:get() or 0) < f392_local4 then
		f392_local4 = 0 --[[ @ 0]]
	end
	f392_arg2.Meter:setShaderVector( 0, f392_local4, 0, 0, 0 ) --[[ @ 0]]
	f392_arg2.MeterAdd:setShaderVector( 0, f392_local4, 0, 0, 0 ) --[[ @ 0]]
	f392_arg2.MeterGlow:setShaderVector( 0, f392_local4, 0, 0, 0 ) --[[ @ 0]]
	local f392_local5 = f392_arg0._progressDelay --[[ @ 0]]
	if not f392_local5 then
		f392_local5 = (f392_local1 + 1) * 200 --[[ @ 0]]
	end
	f392_arg0._progAnimTimer = LUI.UITimer.newElementTimer( f392_local5, true, f392_local3 ) --[[ @ 0]]
	f392_arg0:addElement( f392_arg0._progAnimTimer ) --[[ @ 0]]
	f392_arg0._progAnimEndTimer = LUI.UITimer.newElementTimer( f392_local5 + f392_arg3, true, function ()
		CoD.SoundUtility.StopPlayOnceSoundForController( f392_arg1, f392_local2 ) --[[ @ 0]]
		local f394_local0 = Engine[@"GetModelForController"]( f392_arg1 ) --[[ @ 0]]
		f394_local0.seenWZInGameAAR:set( true ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f392_arg0:addElement( f392_arg0._progAnimEndTimer ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZUtility.WZAARDelayThenAnimateTotalMerits = function ( f395_arg0, f395_arg1, f395_arg2, f395_arg3 )
	if not f395_arg0:getModel() then
		return 
	else
		local f395_local0 = f395_arg0:getModel() --[[ @ 0]]
		local f395_local1 = f395_local0.numInGameEntries:get() --[[ @ 0]]
		local f395_local2 = f395_local0.totalMerit:get() --[[ @ 0]]
		local f395_local3 = 0 --[[ @ 0]]
		local f395_local4 = function ()
			f395_arg0._meritAnimTimer = LUI.UITimer.newElementTimer( 10, false, function ( f397_arg0 )
				f395_local3 = f395_local3 + f397_arg0.timeElapsed --[[ @ 0]]
				local f397_local0 = f395_local3 / f395_arg3 --[[ @ 0]]
				if f395_arg3 <= f395_local3 then
					f395_arg2:setText( tostring( f395_local2 ) ) --[[ @ 0]]
					f395_arg0._meritAnimTimer:close() --[[ @ 0]]
				else
					f395_arg2:setText( tostring( math.floor( f397_local0 * f395_local2 ) ) ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
			f395_arg0:addElement( f395_arg0._meritAnimTimer ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		f395_arg2:setText( "0" ) --[[ @ 0]]
		f395_arg0._meritTotalDelayTimer = LUI.UITimer.newElementTimer( (f395_local1 + 1) * 200, true, f395_local4 ) --[[ @ 0]]
		f395_arg0:addElement( f395_arg0._meritTotalDelayTimer ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.DelayThenShowInGameReport = function ( f398_arg0, f398_arg1 )
	local f398_local0 = Engine[@"GetModelForController"]( f398_arg1 ) --[[ @ 0]]
	if not IsOnlineGame() or not IsBooleanDvarSet( "ui_showWZAAR" ) or CoD.BaseUtility.IsSelfInState( f398_arg0, "Elimination" ) or CoD.HUDUtility.IsWZCustomGame( f398_arg1 ) or f398_local0.hudItems.warzone.aarViewed:get() then
		return 
	else
		f398_arg0._IGRShowTimer = LUI.UITimer.newElementTimer( 1500, true, function ()
			f398_local0.hudItems.warzone.aarVisible:set( true ) --[[ @ 0]]
			f398_local0.hudItems.warzone.aarViewed:set( true ) --[[ @ 0]]
		end ) --[[ @ 0]]
		f398_arg0:addElement( f398_arg0._IGRShowTimer ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.SetupWaveEndTimer = function ( f400_arg0, f400_arg1 )
	local f400_local0 = CoD.SafeGetModelValue( Engine[@"GetGlobalModel"](), "hudItems.waveRespawnTime" ) --[[ @ 0]]
	if f400_local0 then
		f400_arg1:setupEndTimer( Engine[@"hash_3B14120A96E4C52D"]( f400_arg0 ) + f400_local0 * 1000 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.WZUtility.IsGameTypeEqualToBigTeam = function ()
	local f401_local0 = Dvar[@"g_gametype"]:get() --[[ @ 0]]
	local f401_local1 --[[ @ 0]]
	if f401_local0 == nil or f401_local0 ~= "warzone_bigteam_quad" and f401_local0 ~= "warzone_bigteam_dbno_quad" then
		f401_local1 = false --[[ @ 0]]
	else
		f401_local1 = true --[[ @ 0]]
	end
	return f401_local1
end
 --[[ @ 0]]
