-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
CoD.SubtitleUtility = {} --[[ @ 0]]
CoD.SubtitleUtility.NumLines = 7 --[[ @ 0]]
CoD.SubtitleUtility.UpdateSubtitle = function ( f1_arg0 )
	local f1_local0 = 0 --[[ @ 0]]
	local f1_local1 = f1_arg0.subtitlesModel.currentIndex --[[ @ 0]]
	local f1_local2 = f1_local1:get() --[[ @ 0]]
	local f1_local3 = nil --[[ @ 0]]
	if f1_local2 then
		local f1_local4, f1_local5, f1_local6, f1_local7 = f1_arg0.lines[f1_local2].element.SubtitleEntry:getLocalRect() --[[ @ 0]]
		f1_local3 = f1_local5 - f1_local7 --[[ @ 0]]
	end
	for f1_local4 = 0 --[[ @ 0]], f1_arg0.maxElementIndex, 1 do
		if f1_arg0.lines[f1_local4].active then
			f1_arg0.lines[f1_local4].position = f1_arg0.lines[f1_local4].position + 1 --[[ @ 0]]
			f1_arg0.lines[f1_local4].element:moveSubtitleEntry( f1_arg0.lines[f1_local4].position, f1_local3 ) --[[ @ 0]]
			f1_local0 = f1_local0 + 1 --[[ @ 0]]
		end
	end
	if f1_arg0.maxElementIndex < f1_local0 then
		f1_arg0.lines[f1_local2].element:forceHideSubtitleEntry() --[[ @ 0]]
	end
	local f1_local4 = f1_arg0.controller --[[ @ 0]]
	if not Engine[@"IsVisibilityBitSet"]( f1_local4, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) then
		if CoD.IsShoutcaster( f1_local4 ) and not CoD.ShoutcasterProfileVarBool( f1_local4, "shoutcaster_ds_killfeed" ) then
			
		else
			f1_arg0.lines[f1_local2].element:showSubtitleEntry( f1_local2 ) --[[ @ 0]]
			f1_arg0.lines[f1_local2].active = true --[[ @ 0]]
		end
	end
	f1_local1:set( (f1_local2 + 1) % (f1_arg0.maxElementIndex + 1) ) --[[ @ 0]]
	return true
end
 --[[ @ 0]]
CoD.SubtitleUtility.SubtitleNotificationComplete = function ( f2_arg0, f2_arg1 )
	f2_arg0.lines[f2_arg1.id].active = false --[[ @ 0]]
	f2_arg0.lines[f2_arg1.id].position = 0 --[[ @ 0]]
	return true
end
 --[[ @ 0]]
CoD.SubtitleUtility.Init = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3 )
	f3_arg0.controller = f3_arg1 --[[ @ 0]]
	local f3_local0 = DataSources.HUDItems.getModel( f3_arg1 ) --[[ @ 0]]
	f3_local0 = f3_local0:create( f3_arg2 ) --[[ @ 0]]
	local f3_local1 = f3_local0:create( "currentIndex" ) --[[ @ 0]]
	f3_local1:set( 0 ) --[[ @ 0]]
	f3_arg0.currentIndex = 0 --[[ @ 0]]
	f3_arg0.maxElementIndex = f3_arg3 or CoD.SubtitleUtility.NumLines - 1 --[[ @ 0]]
	assert( f3_arg0.maxElementIndex < CoD.SubtitleUtility.NumLines ) --[[ @ 0]]
	f3_arg0.subtitlesModel = f3_local0 --[[ @ 0]]
	f3_arg0.lines = {} --[[ @ 0]]
	for f3_local1 = 0 --[[ @ 0]], f3_arg0.maxElementIndex, 1 do
		f3_arg0.lines[f3_local1] = {} --[[ @ 0]]
		f3_arg0.lines[f3_local1].active = false --[[ @ 0]]
		f3_arg0.lines[f3_local1].name = "SubtitleEntry" .. f3_local1 --[[ @ 0]]
		f3_arg0.lines[f3_local1].element = f3_arg0[f3_arg0.lines[f3_local1].name] --[[ @ 0]]
		f3_arg0.lines[f3_local1].position = 0 --[[ @ 0]]
	end
	f3_arg0:registerEventHandler( "subtitle_notification_complete", CoD.SubtitleUtility.SubtitleNotificationComplete ) --[[ @ 0]]
	f3_arg0:subscribeToModel( f3_local0, function ( model )
		CoD.SubtitleUtility.UpdateSubtitle( f3_arg0 ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.CompleteAllAnimations = function ( f5_arg0 )
	f5_arg0.SubtitleEntry:completeAnimation() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.ShowSubtitleEntry = function ( f6_arg0, f6_arg1 )
	f6_arg0.id = f6_arg1 --[[ @ 0]]
	f6_arg0:completeAllAnimations() --[[ @ 0]]
	local f6_local0, f6_local1 = f6_arg0:getLocalSize() --[[ @ 0]]
	f6_arg0:setTopBottom( false, true, -f6_local1, 0 ) --[[ @ 0]]
	f6_arg0.SubtitleEntry:playClip( "FadeIn" ) --[[ @ 0]]
	local f6_local2 = LUI.UITimer.new --[[ @ 0]]
	local f6_local3 = f6_arg0:getModel() --[[ @ 0]]
	f6_arg0.timer = f6_local2( f6_local3.duration:get(), "hide_subtitle_entry", true, f6_arg0 ) --[[ @ 0]]
	f6_arg0:addElement( f6_arg0.timer ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.MoveSubtitleEntry = function ( f7_arg0, f7_arg1, f7_arg2 )
	f7_arg0:completeAllAnimations() --[[ @ 0]]
	local f7_local0, f7_local1, f7_local2, f7_local3 = f7_arg0.SubtitleEntry:getLocalRect() --[[ @ 0]]
	if not f7_arg2 then
		f7_arg2 = f7_local1 - f7_local3 --[[ @ 0]]
	end
	local f7_local4 = f7_arg2 * f7_arg1 --[[ @ 0]]
	f7_arg0:beginAnimation( "move_subtitle_event", 100 ) --[[ @ 0]]
	f7_arg0:setTopBottom( false, true, f7_local1 + f7_local4, f7_local3 + f7_local4 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.HideSubtitleEntry = function ( f8_arg0 )
	f8_arg0:completeAllAnimations() --[[ @ 0]]
	if f8_arg0.forcedToHide then
		f8_arg0.SubtitleEntry:playClip( "Hide" ) --[[ @ 0]]
	else
		f8_arg0.SubtitleEntry:playClip( "FadeOut" ) --[[ @ 0]]
	end
	f8_arg0:dispatchEventToParent( {
		name = "subtitle_notification_complete",
		id = f8_arg0.id
	} ) --[[ @ 0]]
	f8_arg0.forcedToHide = false --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.ForceHideSubtitleEntry = function ( f9_arg0 )
	f9_arg0.forcedToHide = true --[[ @ 0]]
	f9_arg0.timer:processNow() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.EntryInit = function ( f10_arg0, f10_arg1, f10_arg2 )
	f10_arg0.id = -1 --[[ @ 0]]
	f10_arg0.forcedToHide = false --[[ @ 0]]
	f10_arg0.alignment = f10_arg2 --[[ @ 0]]
	f10_arg0:registerEventHandler( "hide_subtitle_entry", CoD.SubtitleUtility.HideSubtitleEntry ) --[[ @ 0]]
	f10_arg0.completeAllAnimations = CoD.SubtitleUtility.CompleteAllAnimations --[[ @ 0]]
	f10_arg0.showSubtitleEntry = CoD.SubtitleUtility.ShowSubtitleEntry --[[ @ 0]]
	f10_arg0.moveSubtitleEntry = CoD.SubtitleUtility.MoveSubtitleEntry --[[ @ 0]]
	f10_arg0.hideSubtitleEntry = CoD.SubtitleUtility.HideSubtitleEntry --[[ @ 0]]
	f10_arg0.forceHideSubtitleEntry = CoD.SubtitleUtility.ForceHideSubtitleEntry --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SubtitleUtility.ClearSubtitleModels = function ( f11_arg0 )
	local f11_local0 = DataSources.HUDItems.getModel( f11_arg0 ) --[[ @ 0]]
	f11_local0 = f11_local0.subtitles --[[ @ 0]]
	if not f11_local0 then
		return 
	end
	for f11_local1 = 0 --[[ @ 0]], CoD.SubtitleUtility.NumLines - 1, 1 do
		local f11_local4 = f11_local0["line" .. f11_local1] --[[ @ 0]]
		if f11_local4 and f11_local4.text then
			f11_local4.text:set( "" ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
