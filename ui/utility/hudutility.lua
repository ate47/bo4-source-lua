-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
CoD.HUDUtility = {} --[[ @ 0]]
CoD.HUDUtility.MaxObjectiveFlagOverrides = 5 --[[ @ 0]]
CoD.HUDUtility.SUPPLY_DROP_CRATE_STATE_NONE = 0 --[[ @ 0]]
CoD.HUDUtility.SUPPLY_DROP_CRATE_STATE_CAPTURE = 1 --[[ @ 0]]
CoD.HUDUtility.SUPPLY_DROP_CRATE_STATE_HACK = 2 --[[ @ 0]]
CoD.HUDUtility.SUPPLY_DROP_CRATE_STATE_DISARM = 3 --[[ @ 0]]
CoD.HUDUtility.BATTERY_STATE_HOME = 0 --[[ @ 0]]
CoD.HUDUtility.BATTERY_STATE_DELIVERED = 1 --[[ @ 0]]
CoD.HUDUtility.BATTERY_STATE_CARRIED = 2 --[[ @ 0]]
CoD.HUDUtility.BATTERY_STATE_AWAY = 3 --[[ @ 0]]
CoD.HUDUtility.BATTERY_STATE_ATTACKED = 4 --[[ @ 0]]
CoD.HUDUtility.GagdetHintIndex = LuaEnum.createEnum( "GADGET_HINT_INDEX_NONE", "GADGET_HINT_INDEX_BATTLESHIELD", "GADGET_HINT_INDEX_RADIATION_FIELD", "GADGET_HINT_INDEX_IR_STROBE_THROW", "GADGET_HINT_INDEX_SENTRY_TURRET_DEPLOY", "GADGET_HINT_INDEX_HAWK", "GADGET_HINT_INDEX_BLADE", "GADGET_HINT_INDEX_BLADE_PROJECTILE", "GADGET_HINT_INDEX_RADIATION_FIELD_PRESS", "GADGET_HINT_INDEX_BATTLESHIELD_PRESS", "GADGET_HINT_INDEX_BATTLESHIELD_TOGGLE" ) --[[ @ 0]]
CoD.HUDUtility.SpecialistWeaponHints = {
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_NONE] = @"hash_0",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD] = @"hash_5A4B259D73C66D4A",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD_PRESS] = @"hash_898E3EB1FCC7D86",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD_TOGGLE] = @"hash_689E067F1A8B2F83",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_RADIATION_FIELD] = @"hash_6B9271B74C9E78D1",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_RADIATION_FIELD_PRESS] = @"hash_6EDF1A87591E1A19",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_IR_STROBE_THROW] = @"hash_1AC2D0906A020021",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_SENTRY_TURRET_DEPLOY] = @"mp/sentry_deploy",
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_HAWK] = @"hash_1DDD779F341E9E3F"
} --[[ @ 0]]
CoD.HUDUtility.SpecialistWeaponHintsLower = {
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BLADE] = {
		@"hash_6D5F40862A6547E9",
		@"hash_671A522E7769CFCA"
	},
	[CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BLADE_PROJECTILE] = {
		@"hash_D491CB6B92E42D7"
	}
} --[[ @ 0]]
CoD.HUDUtility.MinimapMode = {
	MODE_FIXED = 0,
	MODE_ROTATING = 1
} --[[ @ 0]]
CoD.HUDUtility.GameStatusMode = {
	MODE_SHOW_SCORES = 0,
	MODE_SHOW_MAP = 1,
	MODE_SHOW_INVENTORY = 2
} --[[ @ 0]]
CoD.HUDUtility.MAX_WOUNDS = 4 --[[ @ 0]]
CoD.HUDUtility.PositionDraftSelfPosition = 1 --[[ @ 0]]
CoD.HUDUtility.GetCachedObjective = function ( f1_arg0 )
	if f1_arg0 == nil then
		return nil
	elseif nil == CoD.HUDUtility.ObjectivesTable then
		CoD.HUDUtility.ObjectivesTable = {} --[[ @ 0]]
	end
	if CoD.HUDUtility.ObjectivesTable[f1_arg0] ~= nil then
		return CoD.HUDUtility.ObjectivesTable[f1_arg0]
	end
	local f1_local0 = Engine[@"GetObjectiveInfo"]( f1_arg0 ) --[[ @ 0]]
	CoD.HUDUtility.ObjectivesTable[f1_arg0] = f1_local0 --[[ @ 0]]
	return f1_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetObjectiveAndUpdateCache = function ( f2_arg0 )
	if f2_arg0 ~= nil then
		CoD.HUDUtility.ObjectivesTable[f2_arg0] = nil --[[ @ 0]]
	end
	return CoD.HUDUtility.GetCachedObjective( f2_arg0 )
end
 --[[ @ 0]]
CoD.HUDUtility.ObjectiveHasAnyTextFlagOverrides = function ( f3_arg0 )
	for f3_local0 = 1 --[[ @ 0]], CoD.HUDUtility.MaxObjectiveFlagOverrides, 1 do
		local f3_local3 = @"hash_248B9564BD522390" .. f3_local0 --[[ @ 0]]
		if f3_arg0[f3_local3] or f3_arg0[f3_local3 .. "Friendly"] or f3_arg0[f3_local3 .. "Enemy"] then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.ObjectiveHasAnyImageFlagOverrides = function ( f4_arg0 )
	for f4_local0 = 1 --[[ @ 0]], CoD.HUDUtility.MaxObjectiveFlagOverrides, 1 do
		if f4_arg0[@"hash_23485B4C6E6D7631" .. f4_local0] then
			return true
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldSwapObjectiveTeams = function ( f5_arg0, f5_arg1, f5_arg2 )
	return f5_arg1[@"hash_60B9EF849E6E166" .. Engine[@"GetObjectiveGamemodeFlags"]( f5_arg0, f5_arg2 )] == 1
end
 --[[ @ 0]]
CoD.HUDUtility.GetObjectiveColor = function ( f6_arg0, f6_arg1, f6_arg2, f6_arg3 )
	local f6_local0 = "White" --[[ @ 0]]
	local f6_local1 = Engine[@"GetObjectiveTeam"]( f6_arg0, f6_arg2 ) --[[ @ 0]]
	local f6_local2 = Engine[@"GetTeamID"]( f6_arg0, Engine[@"GetPredictedClientNum"]( f6_arg0 ) ) --[[ @ 0]]
	local f6_local3 = Engine[@"ObjectiveIsTeamUsing"]( f6_arg0, f6_arg2, f6_local2 ) --[[ @ 0]]
	local f6_local4 = Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f6_arg0, f6_arg2, f6_local2 ) --[[ @ 0]]
	local f6_local5 --[[ @ 0]]
	if f6_local1 ~= Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] and f6_local1 ~= Enum[@"team_t"][@"hash_697263B3C1ABADF7"] then
		f6_local5 = false --[[ @ 0]]
	else
		f6_local5 = true --[[ @ 0]]
	end
	local f6_local6 = f6_local1 == f6_local2 --[[ @ 0]]
	local f6_local7 = Engine[@"GetObjectiveGamemodeFlags"]( f6_arg0, f6_arg2 ) --[[ @ 0]]
	local f6_local8 = f6_arg1[@"hash_95F9D317A2A29F2"] == 1 --[[ @ 0]]
	local f6_local9 = f6_arg1[@"hash_10D4E971D1595D8"] == 1 --[[ @ 0]]
	local f6_local10 = f6_arg1[@"hash_4D169798AE315F87"] == 1 --[[ @ 0]]
	local f6_local11 = f6_arg1[@"hash_3A9F33959ED866DA"] == 1 --[[ @ 0]]
	local f6_local12 = f6_arg1[@"hash_47618987067BD185"] == 1 --[[ @ 0]]
	if f6_arg3 and f6_arg1[@"hash_15783D4CCECA51AF"] == 1 then
		f6_local8 = f6_arg1[@"hash_2494C4BE1D7C3187"] == 1 --[[ @ 0]]
		f6_local9 = f6_arg1[@"hash_3EF11E154A54D0FF"] == 1 --[[ @ 0]]
		f6_local10 = f6_arg1[@"hash_130BC092997D59F8"] == 1 --[[ @ 0]]
		f6_local11 = f6_arg1[@"hash_BB039ADE0A4204F"] == 1 --[[ @ 0]]
		f6_local12 = f6_arg1[@"hash_56C28A4687B3549E"] == 1 --[[ @ 0]]
	end
	if f6_local6 and f6_local8 then
		f6_local0 = CoD.TeamUtility.GetColorSetNameFriendlyColor( f6_arg0, CoD.HUDUtility.WaypointGetTeam( f6_arg0, f6_arg2 ) ) --[[ @ 0]]
	elseif not f6_local5 and f6_local8 then
		f6_local0 = CoD.TeamUtility.GetColorSetNameEnemyColor( f6_arg0, CoD.HUDUtility.WaypointGetTeam( f6_arg0, f6_arg2 ) ) --[[ @ 0]]
	elseif not (not f6_arg3 or f6_arg1[@"hash_2AABD602E3377AE"] ~= 1) or f6_arg1[@"hash_6AA62D0A685E1935"] == 1 then
		f6_local0 = CoD.WZUtility.TeamPlayerColorNameForClientNum( f6_arg0, Engine[@"hash_4C43D7E71B1CA70B"]( f6_arg0, f6_arg2 ) ) --[[ @ 0]]
	end
	if f6_local3 and f6_local4 and f6_local9 then
		f6_local0 = "White" --[[ @ 0]]
	end
	if not f6_local3 and not f6_local4 and f6_local12 then
		f6_local0 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f6_arg0, "PlayerYellow" ) --[[ @ 0]]
	end
	if f6_local7 == 0 and f6_local11 then
		f6_local0 = "White" --[[ @ 0]]
	end
	if f6_local3 and f6_local4 and f6_local10 then
		f6_local0 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f6_arg0, "EnemyOrange" ) --[[ @ 0]]
	end
	return f6_local0
end
 --[[ @ 0]]
CoD.HUDUtility.ObjectiveUpdated = function ( f7_arg0, f7_arg1, f7_arg2, f7_arg3, f7_arg4, f7_arg5, f7_arg6 )
	local f7_local0 = f7_arg2.waypoint_image or @"blacktransparent" --[[ @ 0]]
	local f7_local1 = f7_arg2[@"hash_35E9D3AC02630A17"] or @"blacktransparent" --[[ @ 0]]
	local f7_local2 = f7_arg2[@"hash_35E9D4AC02630BCA"] or @"blacktransparent" --[[ @ 0]]
	local f7_local3 = f7_arg2.waypoint_text or "" --[[ @ 0]]
	local f7_local4 = f7_arg2[@"hash_2E3FD1464311AFA1"] or @"blacktransparent" --[[ @ 0]]
	local f7_local5 = Engine[@"GetObjectiveTeam"]( f7_arg1, f7_arg6 ) --[[ @ 0]]
	local f7_local6 = Engine[@"GetPredictedClientNum"]( f7_arg1 ) --[[ @ 0]]
	local f7_local7 = Engine[@"GetTeamID"]( f7_arg1, f7_local6 ) --[[ @ 0]]
	local f7_local8 = Engine[@"ObjectiveIsPlayerUsing"]( f7_arg1, f7_arg6, f7_local6 ) --[[ @ 0]]
	local f7_local9 = Engine[@"ObjectiveIsTeamUsing"]( f7_arg1, f7_arg6, f7_local7 ) --[[ @ 0]]
	local f7_local10 = Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f7_arg1, f7_arg6, f7_local7 ) --[[ @ 0]]
	local f7_local11 --[[ @ 0]]
	if f7_local5 ~= Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] and f7_local5 ~= Enum[@"team_t"][@"hash_697263B3C1ABADF7"] then
		f7_local11 = false --[[ @ 0]]
	else
		f7_local11 = true --[[ @ 0]]
	end
	local f7_local12 = f7_local5 == f7_local7 --[[ @ 0]]
	local f7_local13 = Engine[@"GetObjectiveGamemodeFlags"]( f7_arg1, f7_arg6 ) --[[ @ 0]]
	local f7_local14 = f7_arg3:create( "gamemodeFlags" ) --[[ @ 0]]
	f7_local14:set( f7_local13 ) --[[ @ 0]]
	if not f7_local11 and (not (f7_local13 ~= 1 or f7_arg2[@"hash_2CA076E59350E6D5"] ~= 1) or f7_local13 == 2 and f7_arg2[@"hash_2CA073E59350E1BC"] == 1) then
		f7_local12 = not f7_local12 --[[ @ 0]]
	end
	if f7_local11 then
		f7_local3 = f7_arg2[@"hash_3670E71E3702DEF9"] or f7_local3 --[[ @ 0]]
		f7_local0 = f7_arg2[@"hash_2B1425CEED5941DF"] or f7_local0 --[[ @ 0]]
		f7_local4 = f7_arg2[@"hash_61F7C7371625DBE8"] or f7_local4 --[[ @ 0]]
		if f7_local9 and f7_local10 then
			f7_local3 = f7_arg2[@"hash_41D181A50A73ED6"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_61C5D52A12A311B4"] or f7_local0 --[[ @ 0]]
		elseif f7_local8 then
			f7_local3 = f7_arg2[@"hash_1E93A7E28DB7698C"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_652FD46B862849F6"] or f7_local0 --[[ @ 0]]
		elseif f7_local9 then
			f7_local3 = f7_arg2[@"hash_45AA6420570D06B2"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_1C7E0DB39FC83714"] or f7_local0 --[[ @ 0]]
		elseif f7_local10 then
			f7_local3 = f7_arg2[@"hash_49516156EA8DDC19"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_1ED0B2C5D2C15BBF"] or f7_local0 --[[ @ 0]]
		end
	elseif f7_local12 then
		f7_local3 = f7_arg2[@"hash_4FBF2480290A211A"] or f7_local3 --[[ @ 0]]
		f7_local0 = f7_arg2[@"hash_1927B79ED954A278"] or f7_local0 --[[ @ 0]]
		f7_local4 = f7_arg2[@"hash_A464F3B561F16A7"] or f7_local4 --[[ @ 0]]
		if f7_local9 and f7_local10 then
			f7_local3 = f7_arg2[@"hash_1D99BB37B7E02B14"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_6C4D4A470DABF402"] or f7_local0 --[[ @ 0]]
		elseif f7_local8 then
			f7_local3 = f7_arg2[@"hash_720FA9AFC3AFA6CA"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_14E19935A50A81B4"] or f7_local0 --[[ @ 0]]
		elseif f7_local9 then
			f7_local3 = f7_arg2[@"hash_6BBDA2989D794088"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_3EC91C9B076572E2"] or f7_local0 --[[ @ 0]]
		elseif f7_local10 then
			f7_local3 = f7_arg2[@"hash_16C9ADBC59924111"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_2FFC88A480A0B08F"] or f7_local0 --[[ @ 0]]
		end
	else
		f7_local3 = f7_arg2[@"hash_31421179D8B525CB"] or f7_local3 --[[ @ 0]]
		f7_local0 = f7_arg2[@"hash_42542DACDD0BA59D"] or f7_local0 --[[ @ 0]]
		f7_local4 = f7_arg2[@"hash_2207CD530AA845F4"] or f7_local4 --[[ @ 0]]
		if f7_local9 and f7_local10 then
			f7_local3 = f7_arg2[@"hash_7C78FB07AA3581C5"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_6FCCEF8F202DDD0F"] or f7_local0 --[[ @ 0]]
		elseif f7_local8 then
			f7_local3 = f7_arg2[@"hash_C8F1836F8323A77"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_43AA40A85083C1E5"] or f7_local0 --[[ @ 0]]
		elseif f7_local9 then
			f7_local3 = f7_arg2[@"hash_749BAAE25FDFCF19"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_21E8B60EB296076F"] or f7_local0 --[[ @ 0]]
		elseif f7_local10 then
			f7_local3 = f7_arg2[@"hash_32EBB71B0AB9BE32"] or f7_local3 --[[ @ 0]]
			f7_local0 = f7_arg2[@"hash_53E01DEEF259DCAC"] or f7_local0 --[[ @ 0]]
		end
	end
	if CoD.HUDUtility.ObjectiveHasAnyTextFlagOverrides( f7_arg2 ) then
		f7_local14 = @"hash_248B9564BD522390" .. f7_local13 --[[ @ 0]]
		f7_local3 = f7_arg2[f7_local14] or f7_local3 --[[ @ 0]]
		if f7_local12 then
			f7_local3 = f7_arg2[f7_local14 .. "Friendly"] or f7_local3 --[[ @ 0]]
		elseif not f7_local11 then
			f7_local3 = f7_arg2[f7_local14 .. "Enemy"] or f7_local3 --[[ @ 0]]
		end
	end
	if f7_arg2[@"hash_A8F7A3EDE89CCD7"] and CoD.CodCasterUtility.CodCasterIsInAerialCam( f7_arg1 ) then
		f7_local3 = @"hash_0" --[[ @ 0]]
	end
	if CoD.HUDUtility.ObjectiveHasAnyImageFlagOverrides( f7_arg2 ) then
		f7_local0 = f7_arg2[@"hash_23485B4C6E6D7631" .. f7_local13] or f7_local0 --[[ @ 0]]
	end
	f7_local14 = CoD.HUDUtility.GetObjectiveColor( f7_arg1, f7_arg2, f7_arg6, false ) --[[ @ 0]]
	f7_arg3.icon:set( f7_local0 ) --[[ @ 0]]
	f7_arg3.waypointBacking01:set( f7_local1 ) --[[ @ 0]]
	f7_arg3.waypointBacking02:set( f7_local2 ) --[[ @ 0]]
	f7_arg3.text:set( f7_local3 ) --[[ @ 0]]
	f7_arg3.objectiveWidgetIcon:set( f7_local4 ) --[[ @ 0]]
	f7_arg3.color:set( f7_local14 ) --[[ @ 0]]
	local f7_local15 = f7_arg4[f7_arg6] --[[ @ 0]]
	if f7_local15 then
		CoD.HUDUtility.WaypointUpdateIconAndText( f7_local15, f7_arg1, f7_local13 ) --[[ @ 0]]
	end
	local f7_local16 = DataSources.HUDItems.getModel( f7_arg1 ) --[[ @ 0]]
	f7_local16 = f7_local16.heldObjectiveId --[[ @ 0]]
	if f7_arg3.entNum:get() == Engine[@"GetClientNum"]( f7_arg1 ) then
		if not f7_local16:set( f7_arg6 ) then
			f7_local16:forceNotifySubscriptions() --[[ @ 0]]
		end
	elseif f7_local16:get() == f7_arg6 then
		f7_local16:set( -1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.InitWaypointHandlers = function ( f8_arg0, f8_arg1, f8_arg2, f8_arg3, f8_arg4 )
	local f8_local0 = f8_arg1[f8_arg3] --[[ @ 0]]
	local f8_local1 --[[ @ 0]]
	if f8_arg4 ~= "" then
		f8_local1 = LUI.getTableFromPath( f8_arg4, f8_arg1 ) --[[ @ 0]]
		if not f8_local1 then
		
		else
			f8_arg1.objectiveData = {} --[[ @ 0]]
			if CoD.HUDUtility.ObjectivesTable == nil then
				CoD.HUDUtility.ObjectivesTable = {} --[[ @ 0]]
			end
			local f8_local2 = Engine[@"GetModelForController"]( f8_arg2 ) --[[ @ 0]]
			if not f8_arg1.__hasColorBlindUpdate then
				f8_arg1:subscribeToModel( f8_local2.profile.colorBlindMode, function ( model )
					for f9_local4, f9_local5 in pairs( f8_arg1.objectiveData ) --[[ @ 0]] do
						local f9_local6 = CoD.HUDUtility.GetCachedObjective( Engine[@"GetObjectiveName"]( f8_arg2, f9_local4 ) ) --[[ @ 0]]
						if f9_local6 ~= nil then
							local f9_local3 = Engine[@"GetModel"]( f8_local2, "objective" .. f9_local4 ) --[[ @ 0]]
							if f9_local3 and f9_local3.color then
								f9_local3.color:set( CoD.HUDUtility.GetObjectiveColor( f8_arg2, f9_local6, f9_local4, false ) ) --[[ @ 0]]
							end
						end
					end
				end, false ) --[[ @ 0]]
				f8_arg1.__hasColorBlindUpdate = true --[[ @ 0]]
			end
			local f8_local3 = function ( f10_arg0, f10_arg1 )
				local f10_local0 = Engine[@"GetObjectiveName"]( f10_arg0, f10_arg1 ) --[[ @ 0]]
				local f10_local1 = CoD.HUDUtility.GetCachedObjective( f10_local0 ) --[[ @ 0]]
				if f10_local1 == nil then
					return 
				elseif not f8_arg1.objectiveData[f10_arg1] then
					f8_arg1.objectiveData[f10_arg1] = {
						state = Enum[@"objectiveState_t"][@"hash_73D8C0161CB729FB"],
						hasBaseSubscriptions = false
					} --[[ @ 0]]
				end
				local f10_local2 = function ( f11_arg0 )
					local f11_local0 --[[ @ 0]]
					if f11_arg0 ~= Enum[@"objectiveState_t"][@"hash_754563D60375E060"] and f11_arg0 ~= Enum[@"objectiveState_t"][@"hash_259FDE7D12BCC045"] then
						f11_local0 = false --[[ @ 0]]
					else
						f11_local0 = true --[[ @ 0]]
					end
					return f11_local0
				end
				 --[[ @ 0]]
				local f10_local3 = function ( f12_arg0 )
					return f12_arg0 == Enum[@"objectiveState_t"][@"hash_10DF225299252F5E"]
				end
				 --[[ @ 0]]
				local f10_local4 = f8_arg1.objectiveData[f10_arg1] --[[ @ 0]]
				local f10_local5 = Engine[@"GetObjectiveState"]( f10_arg0, f10_arg1 ) --[[ @ 0]]
				f10_local4.state = f10_local5 --[[ @ 0]]
				local f10_local6 = function ( f13_arg0 )
					if f13_arg0 ~= "None" and f13_arg0 ~= "" then
						return CoD[f13_arg0]
					else
						return nil
					end
				end
				 --[[ @ 0]]
				f10_local6 = f10_local6( f10_local1[@"hash_407F0119E3154625"] ) --[[ @ 0]]
				if not f10_local6 then
					return 
				end
				local f10_local7 = Engine[@"GetModel"]( f8_local2, "objective" .. f10_arg1 ) --[[ @ 0]]
				local f10_local8 = nil --[[ @ 0]]
				if f10_local7 then
					f10_local7:set( f10_local0 ) --[[ @ 0]]
					f10_local8 = f10_local7.state --[[ @ 0]]
					f10_local7:create( "clamped" ) --[[ @ 0]]
					f10_local7:create( "isOffscreen" ) --[[ @ 0]]
					f10_local7:create( "direction" ) --[[ @ 0]]
					local f10_local9 = f10_local7:create( "text" ) --[[ @ 0]]
					f10_local9:set( @"hash_0" ) --[[ @ 0]]
					f10_local7:create( "distanceText" ) --[[ @ 0]]
					f10_local7:create( "progress" ) --[[ @ 0]]
					f10_local7:create( "icon" ) --[[ @ 0]]
					f10_local7:create( "waypointBacking01" ) --[[ @ 0]]
					f10_local7:create( "waypointBacking02" ) --[[ @ 0]]
					f10_local7:create( "objectiveWidgetIcon" ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "id" ) --[[ @ 0]]
					f10_local9:set( f10_local0 ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "objId" ) --[[ @ 0]]
					if not f10_local9:set( f10_arg1 ) then
						f10_local7.objId:forceNotifySubscriptions() --[[ @ 0]]
					end
					f10_local7:create( "color" ) --[[ @ 0]]
					f10_local7:create( "team" ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "isFarAway" ) --[[ @ 0]]
					f10_local9:set( false ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "isShoutCasterAerialCam" ) --[[ @ 0]]
					f10_local9:set( false ) --[[ @ 0]]
					f10_local7:create( "clientUseMask" ) --[[ @ 0]]
					f10_local7:create( "teamMask" ) --[[ @ 0]]
					f10_local7:create( "gamemodeFlags" ) --[[ @ 0]]
					f10_local7:create( "waypointUpdate" ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "showWithAmmoState" ) --[[ @ 0]]
					f10_local9:set( 0 ) --[[ @ 0]]
					f10_local9 = f10_local7:create( "hasLowAmmoState" ) --[[ @ 0]]
					f10_local9:set( f10_local1.has_low_ammo_state or false ) --[[ @ 0]]
					if f10_local1[@"hash_7758ECC3699C3FDC"] == 1 then
						f10_local9 = f10_local7:create( "radialTimer" ) --[[ @ 0]]
						if f10_local1[@"hash_546D19887AADFEB7"] == 1 then
							local f10_local10 = f10_local9 --[[ @ 0]]
							local f10_local11 = f10_local9.set --[[ @ 0]]
							local f10_local12 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
							f10_local11( f10_local10, f10_local12.bombTimer.bomb1 ) --[[ @ 0]]
						else
							local f10_local10 = f10_local9 --[[ @ 0]]
							local f10_local11 = f10_local9.set --[[ @ 0]]
							local f10_local12 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
							f10_local11( f10_local10, f10_local12.bombTimer.bomb0 ) --[[ @ 0]]
						end
					end
					if not f10_local4.hasBaseSubscriptions then
						f10_local4.hasBaseSubscriptions = true --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.team, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.clientUseMask, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.updateTime, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7:create( "forceUpdate" ), function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.entNum, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.isFarAway, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f8_arg1:subscribeToModel( f10_local7.isShoutCasterAerialCam, function ( model )
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, CoD.HUDUtility.GetCachedObjective( f10_local7:get() ), f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
					end
				end
				CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f10_arg0, f10_local1, f10_local7, f8_local0, f8_local1, f10_arg1 ) --[[ @ 0]]
				if (f10_local2( f10_local5 ) or f10_local3( f10_local5 )) and f10_local6 then
					if true == Dvar[@"hash_1650576ADE369039"]:get() then
						local f10_local9 = 0 --[[ @ 0]]
						local f10_local11 = f8_local0:getFirstChild() --[[ @ 0]]
						while f10_local11 ~= nil do
							f10_local9 = f10_local9 + 1 --[[ @ 0]]
							f10_local11 = f10_local11:getNextSibling() --[[ @ 0]]
						end
						DebugPrint( "Waypoint " .. f10_arg1 .. ": " .. f10_local9 .. " waypoints active" ) --[[ @ 0]]
					end
					local f10_local9 = f8_local0[f10_arg1] --[[ @ 0]]
					if f10_local9 ~= nil and f10_local9.objectiveWidget ~= f10_local1[@"hash_407F0119E3154625"] then
						f10_local8:set( Enum[@"objectiveState_t"][@"hash_10DF225299252F5E"] ) --[[ @ 0]]
						f10_local9 = nil --[[ @ 0]]
					end
					if f10_local9 == nil then
						Engine[@"hash_56E447857BE70BC1"]( "Create Waypoint" ) --[[ @ 0]]
						f10_local9 = f10_local6.new( f8_arg1, f10_arg0, 0, 0, 0, f10_local6.__defaultWidth, 0, 0, 0, f10_local6.__defaultHeight ) --[[ @ 0]]
						f10_local9.objectiveWidget = f10_local1[@"hash_407F0119E3154625"] --[[ @ 0]]
						f10_local9.objective = f10_local1 --[[ @ 0]]
						CoD.HUDUtility.SetupWaypoint( f10_local9, f10_arg0, f10_arg1 ) --[[ @ 0]]
						f10_local9:setModel( f10_local7, f10_arg0 ) --[[ @ 0]]
						f8_local0:addElement( f10_local9 ) --[[ @ 0]]
						f8_arg1:sendInitializationEvents( f10_arg0, f10_local9 ) --[[ @ 0]]
						f8_local0[f10_arg1] = f10_local9 --[[ @ 0]]
						Engine[@"hash_66E2713AD003565"]() --[[ @ 0]]
						f10_local9:subscribeToModel( f10_local8, function ( model )
							if not f10_local2( Engine[@"GetModelValue"]( model ) ) then
								f10_local9:close() --[[ @ 0]]
								f8_local0[f10_arg1] = nil --[[ @ 0]]
								Engine[@"ForceNotifyModelSubscriptions"]( model ) --[[ @ 0]]
							end
						end ) --[[ @ 0]]
						if f8_local0[f10_arg1] == nil then
							return 
						end
						local f10_local11 = function ()
							local f22_local0 = Engine[@"GetTeamID"]( f10_arg0, Engine[@"GetPredictedClientNum"]( f10_arg0 ) ) --[[ @ 0]]
							CoD.HUDUtility.WaypointUpdateSnapToCenter( f10_local9, f10_arg0, Engine[@"ObjectiveIsTeamUsing"]( f10_arg0, f10_local9.objId, f22_local0 ), Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f10_arg0, f10_local9.objId, f22_local0 ) ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f10_local9:subscribeToModel( f10_local7.clientUseMask, function ( model )
							CoD.HUDUtility.WaypointUpdate( f10_local9, f10_arg0 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f10_local9:subscribeToModel( f10_local7.team, function ( model )
							CoD.HUDUtility.WaypointUpdate( f10_local9, f10_arg0 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						f10_local9:subscribeToModel( f10_local7.waypointUpdate, function ( model )
							CoD.HUDUtility.WaypointUpdate( f10_local9, f10_arg0 ) --[[ @ 0]]
						end, false ) --[[ @ 0]]
						if f10_local1.has_low_ammo_state then
							f10_local9:subscribeToGlobalModel( f10_arg0, "CurrentWeapon", "totalAmmoLow", function ( model )
								CoD.HUDUtility.WaypointUpdate( f10_local9, f10_arg0 ) --[[ @ 0]]
							end, true ) --[[ @ 0]]
						end
						CoD.HUDUtility.WaypointUpdate( f10_local9, f10_arg0 ) --[[ @ 0]]
						if f10_local1[@"hash_44AC803636BB2F2"] == 1 then
							f10_local9:linkToElementModel( f10_local9, "isOffscreen", true, function ( model )
								f10_local11( model ) --[[ @ 0]]
							end, true ) --[[ @ 0]]
						end
						f10_local9:subscribeToModel( f8_local2.deadSpectator.playerIndex, f10_local11, false ) --[[ @ 0]]
						f10_local9:subscribeToModel( f8_local2.interactivePrompt.activeObjectiveID, f10_local11, false ) --[[ @ 0]]
						f10_local11() --[[ @ 0]]
						CoD.HUDUtility.WaypointUpdateIconAndText( f10_local9, f10_arg0, Engine[@"GetObjectiveGamemodeFlags"]( f10_arg0, f10_local9.objId ) ) --[[ @ 0]]
						f8_arg1:sendInitializationEvents( f10_arg0, f10_local9 ) --[[ @ 0]]
					else
						f10_local9.objective = f10_local1 --[[ @ 0]]
						CoD.HUDUtility.SetupWaypoint( f10_local9, f10_arg0, f10_arg1 ) --[[ @ 0]]
					end
				end
				return true
			end
			 --[[ @ 0]]
			f8_arg1:subscribeToModel( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f8_arg2 ), "newObjective" ), function ( model )
				f8_local3( f8_arg2, Engine[@"GetModelValue"]( model ) ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			if LUI.DEV then
				f8_arg1:subscribeToModel( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f8_arg2 ), "objectives.forceUpdate" ), function ( model )
					for f29_local5, f29_local6 in pairs( f8_arg1.objectiveData ) --[[ @ 0]] do
						local f29_local7 = Engine[@"GetObjectiveName"]( f8_arg2, f29_local5 ) --[[ @ 0]]
						if f29_local7 ~= nil then
							local f29_local3 = CoD.HUDUtility.GetObjectiveAndUpdateCache( f29_local7 ) --[[ @ 0]]
							if f8_local0[f29_local5] then
								f8_local0[f29_local5].objective = f29_local3 --[[ @ 0]]
								CoD.HUDUtility.SetupWaypoint( f8_local0[f29_local5], f8_arg2, f29_local5 ) --[[ @ 0]]
								CoD.HUDUtility.WaypointUpdate( f8_local0[f29_local5], f8_arg2 ) --[[ @ 0]]
							end
							local f29_local4 = Engine[@"GetModelForController"]( f8_arg2 ) --[[ @ 0]]
							f29_local4 = f29_local4["objective" .. f29_local5] --[[ @ 0]]
							CoD.HUDUtility.ObjectiveUpdated( f8_arg1, f8_arg2, f29_local3, f29_local4, f8_local0, f8_local1, f29_local5 ) --[[ @ 0]]
							f29_local4.id:forceNotifySubscriptions() --[[ @ 0]]
							if f8_local0[f29_local5] then
								f8_arg0:sendInitializationEvents( f8_arg2, f8_local0[f29_local5] ) --[[ @ 0]]
							end
							if f8_local1 and f8_local1[f29_local5] then
								f8_arg0:sendInitializationEvents( f8_arg2, f8_local1[f29_local5] ) --[[ @ 0]]
							end
						end
					end
				end ) --[[ @ 0]]
			end
			Engine[@"hash_D01519E8C5001FA"]( f8_arg2 ) --[[ @ 0]]
		end
	end
	f8_local1 = nil --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateBallModels = function ( f30_arg0, f30_arg1 )
	local f30_local0 = Engine[@"GetObjectiveTeam"]( f30_arg0, f30_arg1 ) --[[ @ 0]]
	local f30_local1 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f30_arg0 ), "ballGametype" ) --[[ @ 0]]
	local f30_local2 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_23822BF6666B7F1C" ) --[[ @ 0]]
	if f30_local0 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] or f30_local0 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		f30_local2 = Engine[@"GetGamertagForClient"]( f30_arg0, Engine[@"GetObjectiveEntity"]( f30_arg0, f30_arg1 ) ) --[[ @ 0]]
	elseif Engine[@"GetModelValue"]( Engine[@"CreateModel"]( f30_local1, "ballAway" ) ) == 1 then
		f30_local2 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5C376BAE65A55609" ) --[[ @ 0]]
	end
	Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f30_local1, "ballStatusText" ), f30_local2 ) --[[ @ 0]]
	if CoD.IsShoutcaster( f30_arg0 ) then
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f30_local1, "ballHeldByFriendly" ), f30_local0 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f30_local1, "ballHeldByEnemy" ), f30_local0 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] ) --[[ @ 0]]
	else
		local f30_local3 = CoD.TeamUtility.GetTeamID( f30_arg0 ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f30_local1, "ballHeldByFriendly" ), f30_local0 == f30_local3 ) --[[ @ 0]]
		local f30_local4 = Engine[@"SetModelValue"] --[[ @ 0]]
		local f30_local5 = Engine[@"CreateModel"]( f30_local1, "ballHeldByEnemy" ) --[[ @ 0]]
		local f30_local6 --[[ @ 0]]
		if f30_local0 == f30_local3 or f30_local0 == Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
			f30_local6 = false --[[ @ 0]]
		else
			f30_local6 = true --[[ @ 0]]
		end
		f30_local4( f30_local5, f30_local6 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsWaypointOwnedByMyTeam = function ( f31_arg0, f31_arg1 )
	if f31_arg0.objId and Engine[@"GetTeamID"]( f31_arg1, Engine[@"GetPredictedClientNum"]( f31_arg1 ) ) == Engine[@"GetObjectiveTeam"]( f31_arg1, f31_arg0.objId ) then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsPlayerUsingWaypoint = function ( f32_arg0, f32_arg1, f32_arg2, f32_arg3 )
	if Engine[@"IsPlayerInVehicle"]( f32_arg1 ) == true then
		return false
	elseif Engine[@"IsPlayerRemoteControlling"]( f32_arg1 ) == true then
		return false
	elseif Engine[@"IsPlayerWeaponViewOnlyLinked"]( f32_arg1 ) == true then
		return false
	end
	local f32_local0 = Engine[@"GetPredictedClientNum"]( f32_arg1 ) --[[ @ 0]]
	local f32_local1 = f32_arg3 and f32_arg2 and f32_arg0.objective[@"hash_5060C69F351270D2"] == 1 --[[ @ 0]]
	if CoD.HUDUtility.IsWaypointOwnedByMyTeam( f32_arg0, f32_arg1 ) then
		if f32_arg0.objective[@"hash_7F547E434D3D166A"] ~= 1 and not f32_local1 then
			return false
		end
	elseif f32_arg0.objective[@"hash_110288E76F797F20"] ~= 1 and not f32_local1 then
		return false
	end
	return Engine[@"ObjectiveIsPlayerUsing"]( f32_arg1, f32_arg0.objId, f32_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.SetupWaypoint = function ( f33_arg0, f33_arg1, f33_arg2 )
	if f33_arg2 then
		local f33_local0 = f33_arg0.objective --[[ @ 0]]
		local f33_local1 = Engine[@"GetObjectiveEntity"]( f33_arg1, f33_arg2 ) --[[ @ 0]]
		f33_arg0.objId = f33_arg2 --[[ @ 0]]
		f33_arg0.anyGameModeFlagSpecificText = CoD.HUDUtility.ObjectiveHasAnyTextFlagOverrides( f33_local0 ) --[[ @ 0]]
		f33_arg0:setupWaypointContainer( f33_arg0.objId ) --[[ @ 0]]
		f33_arg0:setEntityContainerClamp( f33_local0.waypoint_clamp == true ) --[[ @ 0]]
		if f33_local0[@"hash_4FC9D3C025110D8D"] == 1 and Engine[@"GetGametypeSetting"]( @"enemycarriervisible" ) == 2 then
			f33_arg0.ping = true --[[ @ 0]]
		end
		local f33_local2 = Engine[@"SetObjectiveIgnoreEntity"] --[[ @ 0]]
		local f33_local3 = f33_arg1 --[[ @ 0]]
		local f33_local4 = f33_arg2 --[[ @ 0]]
		local f33_local5 = Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"] --[[ @ 0]]
		local f33_local6 = f33_arg0.ping --[[ @ 0]]
		if not f33_local6 then
			f33_local6 = false --[[ @ 0]]
		end
		f33_local2( f33_local3, f33_local4, f33_local5, f33_local6 ) --[[ @ 0]]
		f33_local2 = f33_local0.waypoint_x_offset --[[ @ 0]]
		if not f33_local2 then
			f33_local2 = 0 --[[ @ 0]]
		end
		f33_arg0.xOffset = f33_local2 --[[ @ 0]]
		f33_local2 = f33_local0.waypoint_y_offset --[[ @ 0]]
		if not f33_local2 then
			f33_local2 = 0 --[[ @ 0]]
		end
		f33_arg0.yOffset = f33_local2 --[[ @ 0]]
		f33_local2 = f33_local0.waypoint_z_offset --[[ @ 0]]
		if not f33_local2 then
			f33_local2 = 0 --[[ @ 0]]
		end
		f33_arg0.zOffset = f33_local2 --[[ @ 0]]
		if f33_local0.id == "warzone" then
			f33_arg0.progressMeterContested:setShaderVector( 4, 3, 0.07, 0, 0 ) --[[ @ 0]]
			f33_arg0.progressMeter:setShaderVector( 4, 3, 0.07, 0, 0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetButtonPromptText = function ( f34_arg0, f34_arg1 )
	local f34_local0 = GetObjectiveXHashProperty( @"hash_1BB6EE6EB270DC8", f34_arg0 ) --[[ @ 0]]
	local f34_local1 --[[ @ 0]]
	if f34_arg1 ~= 0 then
		f34_local1 = GetObjectiveXHashProperty( @"hash_1F05079AB07DE82A" .. f34_arg1, f34_arg0 ) --[[ @ 0]]
		if not f34_local1 then
		
		else
			if f34_local1 and f34_local1 ~= "" then
				f34_local0 = f34_local1 or f34_local0 --[[ @ 0]]
			end
			return f34_local0
		end
	end
	f34_local1 = nil --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UseHintTextForActiveButtonPromptText = function ( f35_arg0, f35_arg1 )
	local f35_local0 = Engine[@"GetModelForController"]( f35_arg1 ) --[[ @ 0]]
	local f35_local1 = function ( f36_arg0, f36_arg1 )
		local f36_local0 = CoD.HUDUtility.GetButtonPromptText( f35_arg0.objective.id, f36_arg1 ) --[[ @ 0]]
		if f36_local0 and f35_arg0.objId == f36_arg0 then
			local f36_local1 = Engine[@"GetModel"]( f35_local0, "hudItems" ) --[[ @ 0]]
			if CoD.WaypointUtility.ShouldHideWaypoint( f35_arg0, f35_arg1 ) then
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f36_local1, "showCursorHint" ), false ) --[[ @ 0]]
			else
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f36_local1, "showCursorHint" ), true ) --[[ @ 0]]
				local f36_local2 = Engine[@"KeyBinding"]( f35_arg1, "+activate" ) --[[ @ 0]]
				if f36_local2 then
					f36_local0 = Engine[@"Localize"]( f36_local0, f36_local2 ) --[[ @ 0]]
				end
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f36_local1, "cursorHintText" ), f36_local0 ) --[[ @ 0]]
				Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f36_local1, "cursorHintImage" ), "blacktransparent" ) --[[ @ 0]]
			end
		end
	end
	 --[[ @ 0]]
	local f35_local2 = f35_arg0 --[[ @ 0]]
	local f35_local3 = f35_arg0.subscribeToModel --[[ @ 0]]
	local f35_local4 = f35_local0:create( "interactivePrompt" ) --[[ @ 0]]
	f35_local3( f35_local2, f35_local4:create( "activeObjectiveID" ), function ( f37_arg0 )
		local f37_local0 = f35_arg0:getModel() --[[ @ 0]]
		if f37_local0 then
			f35_local1( f37_arg0:get(), f37_local0.gamemodeFlags:get() ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f35_arg0:linkToElementModel( f35_arg0, "gamemodeFlags", true, function ( model )
		f35_local1( f35_local0.interactivePrompt.activeObjectiveID:get(), model:get() ) --[[ @ 0]]
	end, true ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( f35_arg0, "setState", function ( element, controller, f39_arg2 )
		local f39_local0 = f35_arg0:getModel() --[[ @ 0]]
		if f39_local0 then
			f35_local1( f35_local0.interactivePrompt.activeObjectiveID:get(), f39_local0.gamemodeFlags:get() ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.Weapon3DHintStateFlags = {
	EQUIPS = 0,
	SWAPS = 1,
	INVENTORY_FULL = 2,
	STACKS = 3,
	IGNORES_INVENTORY = 4,
	ALSO_ALLOW_PICKUP = 5,
	AMMO_FULL = 6,
	MAX_PAINT_CANS = 7,
	ALSO_ALLOW_PICKUP_EQUIP = 8,
	ALSO_ALLOW_WEAPON_ATTACHMENT_SWAP = 9,
	ALSO_ALLOW_SWAP = 10
} --[[ @ 0]]
CoD.HUDUtility.Disable3DWeaponHintButton = function ( f40_arg0 )
	if IsDemoPlaying() then
		return true
	elseif IsWarzone() then
		local f40_local0 = DataSources.HUDItems.getModel( f40_arg0 ) --[[ @ 0]]
		f40_local0 = f40_local0.weapon3dHintState:get() or 0 --[[ @ 0]]
		local f40_local1 = CoD.BitUtility.IsBitSet( f40_local0, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) --[[ @ 0]]
		if not f40_local1 then
			f40_local1 = CoD.BitUtility.IsBitSet( f40_local0, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) --[[ @ 0]]
			if not f40_local1 then
				f40_local1 = CoD.BitUtility.IsBitSet( f40_local0, CoD.HUDUtility.Weapon3DHintStateFlags.MAX_PAINT_CANS ) --[[ @ 0]]
			end
		end
		return f40_local1
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.Disable3DWeaponHintButtonWithSwap = function ( f41_arg0 )
	if IsDemoPlaying() then
		return true
	elseif IsWarzone() then
		local f41_local0 = DataSources.HUDItems.getModel( f41_arg0 ) --[[ @ 0]]
		f41_local0 = f41_local0.weapon3dHintState:get() or 0 --[[ @ 0]]
		if CoD.BitUtility.IsBitSet( f41_local0, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) or CoD.BitUtility.IsBitSet( f41_local0, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) or CoD.BitUtility.IsBitSet( f41_local0, CoD.HUDUtility.Weapon3DHintStateFlags.MAX_PAINT_CANS ) then
			return CoD.BitUtility.IsBitSet( f41_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_SWAP )
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.Hide3DWeaponHintButton = function ( f42_arg0 )
	if IsDemoPlaying() then
		return true
	elseif IsWarzone() then
		local f42_local0 = DataSources.HUDItems.getModel( f42_arg0 ) --[[ @ 0]]
		return CoD.BitUtility.IsBitSet( f42_local0.weapon3dHintState:get() or 0, CoD.HUDUtility.Weapon3DHintStateFlags.IGNORES_INVENTORY )
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.AllowThirdPersonSpectating = function ( f43_arg0 )
	if IsArenaMode() then
		return false
	elseif IsGametypeSettingsValue( "disableThirdPersonSpectating", 1 ) then
		return false
	elseif IsSplitscreenAndInGame( f43_arg0 ) then
		return false
	else
		return true
	end
end
 --[[ @ 0]]
CoD.HUDUtility.Get3DWeaponHintPickupHintText = function ( f44_arg0, f44_arg1 )
	local f44_local0 = @"hash_0" --[[ @ 0]]
	if IsWarzone() then
		local f44_local1 = DataSources.HUDItems.getModel( f44_arg0 ) --[[ @ 0]]
		f44_local1 = f44_local1.weapon3dHintState:get() or 0 --[[ @ 0]]
		if CoD.BitUtility.IsBitSet( f44_local1, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) then
			f44_local0 = @"hash_5073B147964ED740" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f44_local1, CoD.HUDUtility.Weapon3DHintStateFlags.MAX_PAINT_CANS ) then
			f44_local0 = @"hash_14173C4EEADD4DD9" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f44_local1, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) then
			f44_local0 = @"hash_5A0039CF9CCD3E36" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f44_local1, CoD.HUDUtility.Weapon3DHintStateFlags.EQUIPS ) then
			f44_local0 = @"hash_738B775D97E72F0C" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f44_local1, CoD.HUDUtility.Weapon3DHintStateFlags.SWAPS ) then
			f44_local0 = @"hash_25F8C30A0958A7B" --[[ @ 0]]
		else
			f44_local0 = @"hash_1339E923E692AD5E" --[[ @ 0]]
		end
	end
	return f44_local0
end
 --[[ @ 0]]
CoD.HUDUtility.Get3DWeaponHintPickupHintTextWithPickUpOptions = function ( f45_arg0, f45_arg1 )
	local f45_local0 = @"hash_0" --[[ @ 0]]
	if IsWarzone() then
		local f45_local1 = DataSources.HUDItems.getModel( f45_arg0 ) --[[ @ 0]]
		local f45_local2 = f45_local1.weapon3dHintState:get() or 0 --[[ @ 0]]
		if CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) then
			f45_local0 = @"hash_5073B147964ED740" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.MAX_PAINT_CANS ) then
			f45_local0 = @"hash_14173C4EEADD4DD9" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) then
			f45_local0 = @"hash_5A0039CF9CCD3E36" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.EQUIPS ) then
			if not IsBooleanDvarSet( "tabbedMultiItemPickup" ) and f45_local1.heroHoldProgress:get() > 0 and not CoD.WZUtility.InventoryFull( f45_arg0 ) and CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP ) then
				f45_local0 = @"hash_1339E923E692AD5E" --[[ @ 0]]
			else
				f45_local0 = @"hash_738B775D97E72F0C" --[[ @ 0]]
			end
		elseif CoD.BitUtility.IsBitSet( f45_local2, CoD.HUDUtility.Weapon3DHintStateFlags.SWAPS ) then
			f45_local0 = @"hash_25F8C30A0958A7B" --[[ @ 0]]
		else
			f45_local0 = @"hash_1339E923E692AD5E" --[[ @ 0]]
		end
	end
	return f45_local0
end
 --[[ @ 0]]
CoD.HUDUtility.Get3DWeaponHintAlsoPickupHintTextWithPickUpOptions = function ( f46_arg0, f46_arg1 )
	local f46_local0 = @"hash_0" --[[ @ 0]]
	if IsWarzone() then
		local f46_local1 = DataSources.HUDItems.getModel( f46_arg0 ) --[[ @ 0]]
		local f46_local2 = f46_local1.weapon3dHintState:get() or 0 --[[ @ 0]]
		if CoD.BitUtility.IsBitSet( f46_local2, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP_EQUIP ) then
			f46_local0 = @"hash_71137C693ACA6BA7" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f46_local2, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_WEAPON_ATTACHMENT_SWAP ) then
			f46_local0 = @"hash_4928DC6C23119D85" --[[ @ 0]]
		elseif CoD.BitUtility.IsBitSet( f46_local2, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_SWAP ) then
			f46_local0 = @"hash_25F8C30A0958A7B" --[[ @ 0]]
		else
			f46_local0 = @"hash_1339E923E692AD5E" --[[ @ 0]]
		end
	end
	return f46_local0
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateFocusStashModel = function ( f47_arg0, f47_arg1, f47_arg2 )
	local f47_local0 = DataSources.FreeCursor.getModel( f47_arg1 ) --[[ @ 0]]
	f47_local0.contextualInfo.isStashFocused:set( f47_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupWeaponHintPickupHintTextKBM = function ( f48_arg0, f48_arg1, f48_arg2 )
	if IsWarzone() then
		local f48_local0 = function ()
			local f49_local0 = @"hash_0" --[[ @ 0]]
			local f49_local1 = DataSources.HUDItems.getModel( f48_arg2 ) --[[ @ 0]]
			f49_local1 = f49_local1.weapon3dHintState:get() or 0 --[[ @ 0]]
			local f49_local2 = DataSources.FreeCursor.getModel( f48_arg2 ) --[[ @ 0]]
			local f49_local3 = f49_local2.contextualInfo.isStashFocused --[[ @ 0]]
			if not f49_local3 or f49_local3:get() == false then
				f49_local0 = @"hash_0" --[[ @ 0]]
			elseif CoD.BitUtility.IsBitSet( f49_local1, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) then
				f49_local0 = @"hash_5073B147964ED740" --[[ @ 0]]
			elseif CoD.BitUtility.IsBitSet( f49_local1, CoD.HUDUtility.Weapon3DHintStateFlags.MAX_PAINT_CANS ) then
				f49_local0 = @"hash_14173C4EEADD4DD9" --[[ @ 0]]
			elseif CoD.BitUtility.IsBitSet( f49_local1, CoD.HUDUtility.Weapon3DHintStateFlags.AMMO_FULL ) then
				f49_local0 = @"hash_5A0039CF9CCD3E36" --[[ @ 0]]
			else
				f49_local0 = @"hash_0" --[[ @ 0]]
			end
			f49_local2.contextualInfo.pickupHintWarzone:set( f49_local0 ) --[[ @ 0]]
			f49_local2.contextualInfo.updated:forceNotifySubscriptions() --[[ @ 0]]
		end
		 --[[ @ 0]]
		f48_arg0:subscribeToGlobalModel( f48_arg2, "HUDItems", "weapon3dHintState", f48_local0 ) --[[ @ 0]]
		f48_arg0:subscribeToGlobalModel( f48_arg2, "FreeCursor", "contextualInfo.isStashFocused", f48_local0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShowTriangleFullInventoryPickupPrompt = function ( f50_arg0 )
	if IsDemoPlaying() then
		return false
	elseif not IsWarzone() or not CoD.WZUtility.InventoryFull( f50_arg0 ) then
		return false
	else
		local f50_local0 = DataSources.HUDItems.getModel( f50_arg0 ) --[[ @ 0]]
		return CoD.BitUtility.IsBitSet( f50_local0.weapon3dHintState:get() or 0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_SWAP )
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShowTriangleAttachmentPickupPrompt = function ( f51_arg0 )
	if IsDemoPlaying() then
		return false
	elseif not IsWarzone() then
		return false
	end
	local f51_local0 = DataSources.HUDItems.getModel( f51_arg0 ) --[[ @ 0]]
	f51_local0 = f51_local0.weapon3dHintState:get() or 0 --[[ @ 0]]
	if CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_WEAPON_ATTACHMENT_SWAP ) then
		return true
	elseif CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_SWAP ) then
		return true
	elseif CoD.WZUtility.InventoryFull( f51_arg0 ) and not CoD.HUDUtility.ShowTriangleFullInventoryPickupPrompt( f51_arg0 ) then
		return false
	elseif not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP ) and not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP_EQUIP ) and not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_WEAPON_ATTACHMENT_SWAP ) and not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_SWAP ) then
		return false
	elseif CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.EQUIPS ) or CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.SWAPS ) or CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP_EQUIP ) then
		local f51_local1 --[[ @ 0]]
		if not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP ) then
			f51_local1 = CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.ALSO_ALLOW_PICKUP_EQUIP ) --[[ @ 0]]
			if f51_local1 then
			
			else
				return f51_local1
			end
		end
		f51_local1 = not CoD.BitUtility.IsBitSet( f51_local0, CoD.HUDUtility.Weapon3DHintStateFlags.INVENTORY_FULL ) --[[ @ 0]]
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.PickupPromptOpacity = function ( f52_arg0, f52_arg1 )
	if not IsBooleanDvarSet( "tabbedMultiItemPickup" ) and CoD.HUDUtility.ShowTriangleAttachmentPickupPrompt( f52_arg0 ) and not CoD.WZUtility.InventoryFull( f52_arg0 ) then
		local f52_local0 = DataSources.HUDItems.getModel( f52_arg0 ) --[[ @ 0]]
		if f52_local0.heroHoldProgress:get() > 0 then
			return 0.01
		end
	end
	return 1
end
 --[[ @ 0]]
CoD.HUDUtility.WAYPOINT_CTF_PULSE_BEGIN_ALPHA = 0.8 --[[ @ 0]]
CoD.HUDUtility.WAYPOINT_CTF_PULSE_END_ALPHA = 0.3 --[[ @ 0]]
CoD.HUDUtility.WaypointSetCompassObjectiveIcon = function ( f53_arg0, f53_arg1, f53_arg2, f53_arg3, f53_arg4, f53_arg5 )
	if f53_arg3 or f53_arg4 then
		if f53_arg5 then
			if f53_arg3 then
				Engine[@"SetObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg3, f53_arg5.r, f53_arg5.g, f53_arg5.b ) --[[ @ 0]]
				Engine[@"SetObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_arg3, f53_arg5.r, f53_arg5.g, f53_arg5.b ) --[[ @ 0]]
			end
			if f53_arg4 then
				Engine[@"hash_3DADAACD4057DBDB"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg4, f53_arg5.r, f53_arg5.g, f53_arg5.b ) --[[ @ 0]]
				Engine[@"hash_3DADAACD4057DBDB"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_arg4, f53_arg5.r, f53_arg5.g, f53_arg5.b ) --[[ @ 0]]
			end
		else
			if f53_arg3 then
				Engine[@"SetObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg3 ) --[[ @ 0]]
				Engine[@"SetObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_arg3 ) --[[ @ 0]]
			end
			if f53_arg4 then
				Engine[@"hash_3DADAACD4057DBDB"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg4 ) --[[ @ 0]]
				Engine[@"hash_3DADAACD4057DBDB"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_arg4 ) --[[ @ 0]]
			end
		end
		Engine[@"SetObjectiveRotateWithEntity"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg0.objective[@"hash_68172B233C10D79B"] == 1 ) --[[ @ 0]]
		Engine[@"SetObjectiveRotateWithEntity"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_arg0.objective[@"hash_68172B233C10D79B"] == 1 ) --[[ @ 0]]
		Engine[@"SetObjectiveIconPulse"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_arg0.objective[@"pulse"] == 1 ) --[[ @ 0]]
		local f53_local0 = f53_arg0.objective[@"hash_65141E79748AB619"] == 1 --[[ @ 0]]
		Engine[@"hash_1D40DC95325722DF"]( f53_arg1, f53_arg0.objId, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], f53_local0 ) --[[ @ 0]]
		Engine[@"hash_1D40DC95325722DF"]( f53_arg1, f53_arg0.objId, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], f53_local0 ) --[[ @ 0]]
	else
		Engine[@"ClearObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"] ) --[[ @ 0]]
		Engine[@"ClearObjectiveIcon"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"] ) --[[ @ 0]]
		Engine[@"hash_8275F3C972C0D3A"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"] ) --[[ @ 0]]
		Engine[@"hash_8275F3C972C0D3A"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"] ) --[[ @ 0]]
		Engine[@"SetObjectiveIconPulse"]( f53_arg1, f53_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], false ) --[[ @ 0]]
		Engine[@"hash_1D40DC95325722DF"]( f53_arg1, f53_arg0.objId, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"], false ) --[[ @ 0]]
		Engine[@"hash_1D40DC95325722DF"]( f53_arg1, f53_arg0.objId, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"], false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointClearCompassObjectiveIcon = function ( f54_arg0, f54_arg1, f54_arg2 )
	Engine[@"ClearObjectiveIcon"]( f54_arg1, f54_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_6A56794A2EF6C30C"] ) --[[ @ 0]]
	Engine[@"ClearObjectiveIcon"]( f54_arg1, f54_arg2, Enum[@"hash_2DFCD209FB0D27AF"][@"hash_72FB5107C3D22A8A"] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointGetTeam = function ( f55_arg0, f55_arg1 )
	return Engine[@"GetObjectiveTeam"]( f55_arg0, f55_arg1 )
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_FlagA = function ( f56_arg0, f56_arg1 )
	CoD.HUDUtility.WaypointUpdate_Flag( f56_arg0, f56_arg1, "a" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_FlagB = function ( f57_arg0, f57_arg1 )
	CoD.HUDUtility.WaypointUpdate_Flag( f57_arg0, f57_arg1, "b" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Flag = function ( f58_arg0, f58_arg1, f58_arg2 )
	local f58_local0 = Engine[@"GetModelForController"]( f58_arg1 ) --[[ @ 0]]
	local f58_local1 = Engine[@"GetObjectiveTeam"]( f58_arg1, f58_arg0.objId ) --[[ @ 0]]
	local f58_local2 = CoD.TeamUtility.GetTeamFactionColor( f58_local1 ) --[[ @ 0]]
	local f58_local3 = Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f58_arg1, f58_arg0.objId, f58_local1 ) --[[ @ 0]]
	if Engine[@"GetObjectiveGamemodeFlags"]( f58_arg1, f58_arg0.objId ) == 1 then
		if f58_local3 then
			local f58_local4 = Engine[@"GetObjectiveEntity"]( f58_arg1, f58_arg0.objId ) --[[ @ 0]]
			local f58_local5 = f58_local0:create( "hudItems.codcaster.Objective" .. f58_arg2 .. ".text" ) --[[ @ 0]]
			f58_local5:set( GetClientName( f58_arg1, f58_local4 ) ) --[[ @ 0]]
		else
			local f58_local4 = f58_local0:create( "hudItems.codcaster.Objective" .. f58_arg2 .. ".text" ) --[[ @ 0]]
			f58_local4:set( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_FDA3B7A577429C1" ) ) --[[ @ 0]]
		end
	else
		local f58_local4 = f58_local0:create( "hudItems.codcaster.Objective" .. f58_arg2 .. ".text" ) --[[ @ 0]]
		f58_local4:set( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4B3059214D90E5E2" ) ) --[[ @ 0]]
	end
	local f58_local4 = f58_local0:create( "hudItems.codcaster.Objective" .. f58_arg2 .. ".color" ) --[[ @ 0]]
	f58_local4:set( f58_local2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Ball_Ball = function ( f59_arg0, f59_arg1 )
	local f59_local0 = f59_arg0.objId --[[ @ 0]]
	local f59_local1 = Engine[@"GetObjectiveTeam"]( f59_arg1, f59_local0 ) --[[ @ 0]]
	local f59_local2 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f59_arg1 ), "ballGametype" ) --[[ @ 0]]
	local f59_local3 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_23822BF6666B7F1C" ) --[[ @ 0]]
	if f59_local1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] or f59_local1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		f59_local3 = Engine[@"GetGamertagForClient"]( f59_arg1, Engine[@"GetObjectiveEntity"]( f59_arg1, f59_local0 ) ) --[[ @ 0]]
	elseif Engine[@"GetModelValue"]( Engine[@"CreateModel"]( f59_local2, "ballAway" ) ) == 1 then
		f59_local3 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5C376BAE65A55609" ) --[[ @ 0]]
	end
	Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f59_local2, "ballStatusText" ), f59_local3 ) --[[ @ 0]]
	if CoD.IsShoutcaster( f59_arg1 ) then
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f59_local2, "ballHeldByFriendly" ), f59_local1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f59_local2, "ballHeldByEnemy" ), f59_local1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] ) --[[ @ 0]]
	else
		local f59_local4 = CoD.TeamUtility.GetTeamID( f59_arg1 ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f59_local2, "ballHeldByFriendly" ), f59_local1 == f59_local4 ) --[[ @ 0]]
		local f59_local5 = Engine[@"SetModelValue"] --[[ @ 0]]
		local f59_local6 = Engine[@"CreateModel"]( f59_local2, "ballHeldByEnemy" ) --[[ @ 0]]
		local f59_local7 --[[ @ 0]]
		if f59_local1 == f59_local4 or f59_local1 == Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
			f59_local7 = false --[[ @ 0]]
		else
			f59_local7 = true --[[ @ 0]]
		end
		f59_local5( f59_local6, f59_local7 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Control0 = function ( f60_arg0, f60_arg1 )
	CoD.HUDUtility.WaypointUpdate_Control( f60_arg0, f60_arg1, "A", "0" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Control1 = function ( f61_arg0, f61_arg1 )
	CoD.HUDUtility.WaypointUpdate_Control( f61_arg0, f61_arg1, "B", "1" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_EscortRobot = function ( f62_arg0, f62_arg1 )
	local f62_local0 = Engine[@"GetModelForController"]( f62_arg1 ) --[[ @ 0]]
	local f62_local1 = Engine[@"GetObjectiveTeam"]( f62_arg1, f62_arg0.objId ) --[[ @ 0]]
	local f62_local2 = f62_local0:create( "CalloutWheel.escort_robot.team" ) --[[ @ 0]]
	f62_local2:set( f62_local1 ) --[[ @ 0]]
	f62_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	local f62_local3 = f62_local2.Escort:create( "robotObjective" ) --[[ @ 0]]
	f62_local3:set( f62_arg0:getModel() ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Control = function ( f63_arg0, f63_arg1, f63_arg2, f63_arg3 )
	local f63_local0 = Engine[@"GetModelForController"]( f63_arg1 ) --[[ @ 0]]
	local f63_local1 = Engine[@"GetObjectiveTeam"]( f63_arg1, f63_arg0.objId ) --[[ @ 0]]
	local f63_local2 = CoD.TeamUtility.GetTeamFactionColor( f63_local1 ) --[[ @ 0]]
	local f63_local3 = CoD.CodCasterUtility.GetAttackingTeamColor( f63_local1 ) --[[ @ 0]]
	local f63_local4 = Engine[@"GetObjectiveProgress"]( f63_arg1, f63_arg0.objId ) --[[ @ 0]]
	local f63_local5 = f63_local0:create( "hudItems.codcaster.Objective" .. f63_arg2 .. ".color" ) --[[ @ 0]]
	f63_local5:set( f63_local2 ) --[[ @ 0]]
	f63_local5 = f63_local0:create( "hudItems.codcaster.Objective" .. f63_arg2 .. ".progress" ) --[[ @ 0]]
	f63_local5:set( f63_local4 ) --[[ @ 0]]
	f63_local5 = f63_local0:create( "HUDItems.codcaster.attackTeamColor" ) --[[ @ 0]]
	f63_local5:set( f63_local3 ) --[[ @ 0]]
	f63_local5 = f63_local0:create( "CalloutWheel.control_" .. f63_arg3 .. ".team" ) --[[ @ 0]]
	f63_local5:set( f63_local1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Hardpoint = function ( f64_arg0, f64_arg1 )
	local f64_local0 = Engine[@"GetModelForController"]( f64_arg1 ) --[[ @ 0]]
	local f64_local1 = Engine[@"GetObjectiveTeam"]( f64_arg1, f64_arg0.objId ) --[[ @ 0]]
	local f64_local2 = Engine[@"ObjectiveIsTeamUsing"]( f64_arg1, f64_arg0.objId, f64_local1 ) and Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f64_arg1, f64_arg0.objId, f64_local1 ) --[[ @ 0]]
	local f64_local3 = nil --[[ @ 0]]
	if f64_local1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] or f64_local1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		f64_local3 = CoD.TeamUtility.GetTeamFactionColor( f64_local1 ) --[[ @ 0]]
	else
		f64_local3 = "255 255 255" --[[ @ 0]]
	end
	local f64_local4 = f64_local0:create( "hudItems.codcaster.hardpointVisibility" ) --[[ @ 0]]
	f64_local4:set( 100 ) --[[ @ 0]]
	if f64_local2 then
		f64_local4 = f64_local0:create( "HUDItems.codcaster.ObjectiveA.color" ) --[[ @ 0]]
		f64_local4:set( CoD.TeamUtility.GetTeamFactionColor( Enum[@"team_t"][@"hash_42A34B055ADD98AB"] ) ) --[[ @ 0]]
		f64_local4 = f64_local0:create( "HUDItems.codcaster.ObjectiveB.color" ) --[[ @ 0]]
		f64_local4:set( CoD.TeamUtility.GetTeamFactionColor( Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] ) ) --[[ @ 0]]
	else
		f64_local4 = f64_local0:create( "HUDItems.codcaster.ObjectiveA.color" ) --[[ @ 0]]
		f64_local4:set( f64_local3 ) --[[ @ 0]]
		f64_local4 = f64_local0:create( "HUDItems.codcaster.ObjectiveB.color" ) --[[ @ 0]]
		f64_local4:set( f64_local3 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_Bomb = function ( f65_arg0, f65_arg1 )
	local f65_local0 = Engine[@"GetModelForController"]( f65_arg1 ) --[[ @ 0]]
	local f65_local1 = Engine[@"GetObjectiveEntity"]( f65_arg1, f65_arg0.objId ) --[[ @ 0]]
	local f65_local2 = f65_local0:create( "hudItems.SDBombClient" ) --[[ @ 0]]
	f65_local2:set( f65_local1 or -1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_A = function ( f66_arg0, f66_arg1 )
	CoD.HUDUtility.WaypointUpdate_SD( f66_arg0, f66_arg1, "a" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_B = function ( f67_arg0, f67_arg1 )
	CoD.HUDUtility.WaypointUpdate_SD( f67_arg0, f67_arg1, "b" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD = function ( f68_arg0, f68_arg1, f68_arg2 )
	local f68_local0 = Engine[@"GetModelForController"]( f68_arg1 ) --[[ @ 0]]
	local f68_local1 = Engine[@"GetObjectiveEntity"]( f68_arg1, f68_arg0.objId ) --[[ @ 0]]
	local f68_local2 = Engine[@"GetObjectiveTeam"]( f68_arg1, f68_arg0.objId ) --[[ @ 0]]
	local f68_local3 = CoD.TeamUtility.GetTeamFactionColor( f68_local2 ) --[[ @ 0]]
	local f68_local4 = CoD.CodCasterUtility.GetAttackingTeamColor( f68_local2 ) --[[ @ 0]]
	local f68_local5 = Engine[@"GetObjectiveProgress"]( f68_arg1, f68_arg0.objId ) --[[ @ 0]]
	if Engine[@"GetObjectiveGamemodeFlags"]( f68_arg1, f68_arg0.objId ) == 0 then
		local f68_local6 = f68_local0:create( "hudItems.codcaster.Bomb" .. f68_arg2 ) --[[ @ 0]]
		f68_local6:set( 0 ) --[[ @ 0]]
	end
	local f68_local6 = f68_local0:create( "hudItems.codcaster.Objective" .. f68_arg2 .. ".color" ) --[[ @ 0]]
	f68_local6:set( f68_local3 ) --[[ @ 0]]
	f68_local6 = f68_local0:create( "hudItems.codcaster.Objective" .. f68_arg2 .. ".progress" ) --[[ @ 0]]
	f68_local6:set( f68_local5 ) --[[ @ 0]]
	f68_local6 = f68_local0:create( "HUDItems.codcaster.attackTeamColor" ) --[[ @ 0]]
	f68_local6:set( f68_local4 ) --[[ @ 0]]
	f68_local6 = f68_local0:create( "CalloutWheel.sd_" .. f68_arg2 .. ".team" ) --[[ @ 0]]
	f68_local6:set( f68_local2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_Defuse_A = function ( f69_arg0, f69_arg1 )
	CoD.HUDUtility.WaypointUpdate_SD_Defuse( f69_arg0, f69_arg1, "A" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_Defuse_B = function ( f70_arg0, f70_arg1 )
	CoD.HUDUtility.WaypointUpdate_SD_Defuse( f70_arg0, f70_arg1, "B" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_SD_Defuse = function ( f71_arg0, f71_arg1, f71_arg2 )
	local f71_local0 = Engine[@"GetModelForController"]( f71_arg1 ) --[[ @ 0]]
	Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"CreateModel"]( f71_local0, "SearchAndDestroy" ), "defending" ), CoD.HUDUtility.IsWaypointOwnedByMyTeam( f71_arg0, f71_arg1 ) ) --[[ @ 0]]
	local f71_local1 = Engine[@"GetObjectiveTeam"]( f71_arg1, f71_arg0.objId ) --[[ @ 0]]
	local f71_local2 = CoD.TeamUtility.GetTeamFactionColor( f71_local1 ) --[[ @ 0]]
	local f71_local3 = CoD.CodCasterUtility.GetAttackingTeamColor( f71_local1 ) --[[ @ 0]]
	local f71_local4 = Engine[@"GetObjectiveProgress"]( f71_arg1, f71_arg0.objId ) --[[ @ 0]]
	local f71_local5 = f71_local0:create( "hudItems.codcaster.Objective" .. f71_arg2 .. ".color" ) --[[ @ 0]]
	f71_local5:set( f71_local2 ) --[[ @ 0]]
	f71_local5 = f71_local0:create( "hudItems.codcaster.Bomb" .. f71_arg2 ) --[[ @ 0]]
	f71_local5:set( 1 ) --[[ @ 0]]
	f71_local5 = f71_local0:create( "hudItems.codcaster.Objective" .. f71_arg2 .. ".progress" ) --[[ @ 0]]
	f71_local5:set( f71_local4 ) --[[ @ 0]]
	f71_local5 = f71_local0:create( "HUDItems.codcaster.attackTeamColor" ) --[[ @ 0]]
	f71_local5:set( f71_local3 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_CP_GM_Carry_Object = function ( f72_arg0, f72_arg1 )
	local f72_local0 = DataSources.CPGamePlayBundleData.getModel( f72_arg1 ) --[[ @ 0]]
	if f72_local0.briefcaseClient then
		f72_local0.briefcaseClient:set( Engine[@"GetObjectiveEntity"]( f72_arg1, f72_arg0.objId ) or -1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Warzone = function ( f73_arg0, f73_arg1 )
	local f73_local0 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.war.currentZoneProgress" ) --[[ @ 0]]
	f73_local0:set( Engine[@"GetObjectiveProgress"]( f73_arg1, f73_arg0.objId ) ) --[[ @ 0]]
	local f73_local1 = Engine[@"GetObjectiveTeam"]( f73_arg1, f73_arg0.objId ) --[[ @ 0]]
	local f73_local2 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.war.objectiveHeldByAttackingTeam" ) --[[ @ 0]]
	local f73_local3 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.war.objectiveHeldByDefendingTeam" ) --[[ @ 0]]
	f73_local2:set( Engine[@"ObjectiveIsTeamUsing"]( f73_arg1, f73_arg0.objId, f73_local1 ) ) --[[ @ 0]]
	f73_local3:set( Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f73_arg1, f73_arg0.objId, f73_local1 ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Dom_A = function ( f74_arg0, f74_arg1 )
	CoD.HUDUtility.WaypointUpdate_Dom( f74_arg0, f74_arg1, "a" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Dom_B = function ( f75_arg0, f75_arg1 )
	CoD.HUDUtility.WaypointUpdate_Dom( f75_arg0, f75_arg1, "b" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Dom_C = function ( f76_arg0, f76_arg1 )
	CoD.HUDUtility.WaypointUpdate_Dom( f76_arg0, f76_arg1, "c" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate_Dom = function ( f77_arg0, f77_arg1, f77_arg2 )
	local f77_local0 = Engine[@"GetModelForController"]( f77_arg1 ) --[[ @ 0]]
	local f77_local1 = Engine[@"GetObjectiveTeam"]( f77_arg1, f77_arg0.objId ) --[[ @ 0]]
	local f77_local2 = nil --[[ @ 0]]
	if f77_local1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] or f77_local1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		f77_local2 = CoD.TeamUtility.GetTeamFactionColor( f77_local1 ) --[[ @ 0]]
	else
		f77_local2 = "255 255 255" --[[ @ 0]]
	end
	local f77_local3 = f77_local0:create( "hudItems.codcaster.Objective" .. f77_arg2 .. ".color" ) --[[ @ 0]]
	f77_local3:set( f77_local2 ) --[[ @ 0]]
	f77_local3 = f77_local0:create( "CalloutWheel.dom_" .. f77_arg2 .. ".team" ) --[[ @ 0]]
	f77_local3:set( f77_local1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointObjectiveSpecificUpdates = {
	[@"hash_38D49D6C96840472"] = CoD.HUDUtility.WaypointUpdate_FlagA,
	[@"hash_68893CBFACF91D4B"] = CoD.HUDUtility.WaypointUpdate_FlagB,
	[@"hash_7E8EE48622DE2D00"] = CoD.HUDUtility.WaypointUpdate_Ball_Ball,
	[@"control_0"] = CoD.HUDUtility.WaypointUpdate_Control0,
	[@"control_1"] = CoD.HUDUtility.WaypointUpdate_Control1,
	[@"hardpoint"] = CoD.HUDUtility.WaypointUpdate_Hardpoint,
	[@"sd_a"] = CoD.HUDUtility.WaypointUpdate_SD_A,
	[@"sd_b"] = CoD.HUDUtility.WaypointUpdate_SD_B,
	[@"sd_bomb"] = CoD.HUDUtility.WaypointUpdate_SD_Bomb,
	[@"hash_6C8E9217EFF83A31"] = CoD.HUDUtility.WaypointUpdate_SD_Defuse_A,
	[@"hash_6C8E8F17EFF83518"] = CoD.HUDUtility.WaypointUpdate_SD_Defuse_B,
	[@"hash_3F362A660ECF07FF"] = CoD.HUDUtility.WaypointUpdate_CP_GM_Carry_Object,
	[@"hash_14ADDDB8A9448B02"] = CoD.HUDUtility.WaypointUpdate_CP_GM_Carry_Object,
	[@"hash_757E90B1451515A7"] = CoD.HUDUtility.WaypointUpdate_Warzone,
	[@"dom_a"] = CoD.HUDUtility.WaypointUpdate_Dom_A,
	[@"dom_b"] = CoD.HUDUtility.WaypointUpdate_Dom_B,
	[@"dom_c"] = CoD.HUDUtility.WaypointUpdate_Dom_C,
	[@"escort_robot"] = CoD.HUDUtility.WaypointUpdate_EscortRobot
} --[[ @ 0]]
CoD.HUDUtility.WaypointListObjectiveTypes = {
	[@"control_0"] = true,
	[@"control_1"] = true,
	[@"hash_46EA7F29FE9AD753"] = true,
	[@"hardpoint"] = true,
	[@"dom_a"] = true,
	[@"dom_b"] = true,
	[@"dom_c"] = true,
	[@"hash_792DC9B45AD579F4"] = true,
	[@"hash_792DCCB45AD57F0D"] = true
} --[[ @ 0]]
CoD.HUDUtility.SDDemObjectiveTypes = {
	[@"hash_792DC9B45AD579F4"] = "a",
	[@"hash_792DCCB45AD57F0D"] = "b"
} --[[ @ 0]]
CoD.HUDUtility.WaypointUpdateIconAndText = function ( f78_arg0, f78_arg1, f78_arg2 )
	local f78_local0 = f78_arg0.objective[@"hash_1AA8267261655DF1"] --[[ @ 0]]
	if f78_arg2 ~= 0 then
		f78_local0 = f78_arg0.objective[@"hash_2FD91F76A1196EAB" .. f78_arg2] or f78_local0 --[[ @ 0]]
	end
	if CoD.WaypointUtility.ShouldHideMinimapIcon( f78_arg0, f78_arg1 ) then
		CoD.HUDUtility.WaypointClearCompassObjectiveIcon( f78_arg0, f78_arg1, f78_arg0.objId ) --[[ @ 0]]
	else
		local f78_local1 = f78_arg0:getModel() --[[ @ 0]]
		if f78_local1 and f78_local1.color then
			local f78_local2 = f78_local1.color:get() --[[ @ 0]]
			if f78_arg0.objective[@"hash_15783D4CCECA51AF"] then
				f78_local2 = CoD.HUDUtility.GetObjectiveColor( f78_arg1, f78_arg0.objective, f78_arg0.objId, true ) --[[ @ 0]]
			end
			CoD.HUDUtility.WaypointSetCompassObjectiveIcon( f78_arg0, f78_arg1, f78_arg0.objId, f78_local0, f78_arg0.objective[@"hash_1AAC4A8770847600"], ColorSet[f78_local2] ) --[[ @ 0]]
		end
	end
	local f78_local1 = CoD.HUDUtility.WaypointObjectiveSpecificUpdates[f78_arg0.objective.id] --[[ @ 0]]
	if f78_local1 then
		f78_local1( f78_arg0, f78_arg1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldSnapInteractableWaypointToCenter = function ( f79_arg0, f79_arg1, f79_arg2, f79_arg3 )
	if f79_arg0.objective[@"hash_A8F7A3EDE89CCD7"] and CoD.CodCasterUtility.CodCasterIsInAerialCam( f79_arg1 ) then
		return false
	elseif f79_arg0.objective[@"hash_2F12F05DDE5E8E84"] == 1 then
		return true
	elseif CoD.HUDUtility.IsPlayerUsingWaypoint( f79_arg0, f79_arg1, f79_arg2, f79_arg3 ) then
		return true
	elseif f79_arg0.objective[@"hash_3DFD6C844E98BE2F"] == 1 and not CoD.WaypointUtility.IsObjectiveRequirementLabelHidden( f79_arg0, f79_arg1 ) then
		return true
	elseif f79_arg0.objective[@"hash_44AC803636BB2F2"] == 1 then
		local f79_local0 = f79_arg0:getModel( f79_arg1, "isOffscreen" ) --[[ @ 0]]
		if f79_local0 and f79_local0:get() then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdateSnapToCenter = function ( f80_arg0, f80_arg1, f80_arg2, f80_arg3 )
	local f80_local0 = CoD.HUDUtility.ShouldSnapInteractableWaypointToCenter( f80_arg0, f80_arg1, f80_arg2, f80_arg3 ) --[[ @ 0]]
	f80_arg0._halfWidth = CoD.FreeCursorUtility.GetWidthByLocalLeftRight( f80_arg0 ) / 2 --[[ @ 0]]
	f80_arg0._halfHeight = CoD.FreeCursorUtility.GetHeightByLocalTopBottom( f80_arg0 ) / 2 --[[ @ 0]]
	if f80_arg0.snappedToCenter == f80_local0 then
		return 
	elseif f80_local0 == true then
		local f80_local1 = f80_arg0.objective[@"hash_4D4027E5576AB79E"] or 0 --[[ @ 0]]
		local f80_local2 = f80_arg0.objective[@"hash_4D4028E5576AB951"] or 0 --[[ @ 0]]
		if f80_arg0.snappedToCenter ~= nil then
			f80_arg0:beginAnimation( "snap_in", 250, true, true ) --[[ @ 0]]
		end
		f80_arg0:setEntityContainerStopUpdating( true ) --[[ @ 0]]
		f80_arg0:setLeftRight( 0.5, 0.5, -f80_arg0._halfWidth + f80_local1, f80_arg0._halfWidth + f80_local1 ) --[[ @ 0]]
		if f80_arg0.objective[@"hash_7AAF205AA281C88A"] == 1 then
			f80_arg0:setTopBottom( 0.5, 0.5, 128 + f80_local2, 128 + f80_arg0._halfHeight * 2 + f80_local2 ) --[[ @ 0]]
		else
			local f80_local3, f80_local4, f80_local5, f80_local6 = Engine[@"GetUserSafeAreaForController"]( f80_arg1, true ) --[[ @ 0]]
			f80_arg0:setTopBottom( 0.5, 0.5, 276 + f80_local4 + f80_local2, 276 + f80_local4 + f80_arg0._halfHeight * 2 + f80_local2 ) --[[ @ 0]]
		end
	else
		if f80_arg0.snappedToCenter ~= nil then
			f80_arg0:beginAnimation( "snap_out", 250, true, true ) --[[ @ 0]]
		end
		f80_arg0:setEntityContainerStopUpdating( false ) --[[ @ 0]]
		f80_arg0:setLeftRight( 0.5, 0.5, -f80_arg0._halfWidth, f80_arg0._halfWidth ) --[[ @ 0]]
		f80_arg0:setTopBottom( 0.5, 0.5, -f80_arg0._halfHeight, f80_arg0._halfHeight ) --[[ @ 0]]
	end
	f80_arg0.snappedToCenter = f80_local0 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetWaypointElementToFadeAlpha = function ( f81_arg0, f81_arg1 )
	if not f81_arg0._waypointFadeElements then
		f81_arg0._waypointFadeElements = {} --[[ @ 0]]
	end
	table.insert( f81_arg0._waypointFadeElements, f81_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupWaypointContainerParent = function ( f82_arg0 )
	f82_arg0:setupWaypointContainerParent() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.WaypointUpdate = function ( f83_arg0, f83_arg1 )
	local f83_local0 = f83_arg0.objId --[[ @ 0]]
	local f83_local1 = f83_arg0.ping --[[ @ 0]]
	local f83_local2 = Engine[@"GetObjectiveEntity"]( f83_arg1, f83_local0 ) --[[ @ 0]]
	local f83_local3 = Engine[@"GetTeamID"]( f83_arg1, Engine[@"GetPredictedClientNum"]( f83_arg1 ) ) --[[ @ 0]]
	local f83_local4 = Engine[@"ObjectiveIsTeamUsing"]( f83_arg1, f83_local0, f83_local3 ) --[[ @ 0]]
	local f83_local5 = Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f83_arg1, f83_local0, f83_local3 ) --[[ @ 0]]
	CoD.HUDUtility.WaypointUpdateSnapToCenter( f83_arg0, f83_arg1, f83_local4, f83_local5 ) --[[ @ 0]]
	if f83_arg0.objective.has_low_ammo_state then
		if CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f83_arg1, "CurrentWeapon", "totalAmmoLow" ) then
			f83_arg0:setEntityContainerClamp( f83_arg0.objective[@"hash_5728686596E4E083"] == 1 ) --[[ @ 0]]
		else
			f83_arg0:setEntityContainerClamp( f83_arg0.objective.waypoint_clamp ) --[[ @ 0]]
		end
	end
	local f83_local6 = f83_arg0.zOffset --[[ @ 0]]
	if (f83_local4 or f83_local5) and f83_arg0.objective[@"hash_2CA1B2992BC02684"] ~= 0 then
		f83_local6 = f83_local6 + f83_arg0.objective[@"hash_2CA1B2992BC02684"] --[[ @ 0]]
	end
	if f83_local2 and not f83_local1 then
		f83_arg0:setupWaypointContainer( f83_local0, f83_arg0.xOffset, f83_arg0.yOffset, f83_local6 ) --[[ @ 0]]
	else
		local f83_local7, f83_local8, f83_local9 = Engine[@"GetObjectivePosition"]( f83_arg1, f83_local0 ) --[[ @ 0]]
		f83_arg0:setupWaypointContainer( f83_local0, f83_local7 + f83_arg0.xOffset, f83_local8 + f83_arg0.yOffset, f83_local9 + f83_local6 ) --[[ @ 0]]
	end
	if f83_local1 and f83_local2 then
		f83_arg0:clearEntityMidpoint( true ) --[[ @ 0]]
		local f83_local7 = Engine[@"GetGametypeSetting"]( @"objectivepingtime" ) * 1000 --[[ @ 0]]
		local f83_local8 = function ( f84_arg0 )
			f84_arg0:setAlpha( CoD.HUDUtility.WAYPOINT_CTF_PULSE_BEGIN_ALPHA ) --[[ @ 0]]
			f84_arg0:beginAnimation( f83_local7, Enum[@"hash_1F50FFF429AB1890"][@"hash_3253268AF0FBB0E8"] ) --[[ @ 0]]
			f84_arg0:setAlpha( CoD.HUDUtility.WAYPOINT_CTF_PULSE_END_ALPHA ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		for f83_local12, f83_local13 in ipairs( f83_arg0._waypointFadeElements ) --[[ @ 0]] do
			f83_local8( f83_local13 ) --[[ @ 0]]
		end
		if f83_local7 > 0 then
			for f83_local12, f83_local13 in ipairs( f83_arg0._waypointFadeElements ) --[[ @ 0]] do
				f83_local13:registerEventHandler( "transition_complete_keyframe", function ( element, event )
					if event.interrupted then
						element:setAlpha( 1 ) --[[ @ 0]]
					else
						f83_local8( element ) --[[ @ 0]]
					end
				end ) --[[ @ 0]]
			end
		end
		f83_arg0.pinging = true --[[ @ 0]]
	elseif f83_arg0.pinging == true then
		for f83_local10, f83_local11 in ipairs( f83_arg0._waypointFadeElements ) --[[ @ 0]] do
			f83_local11:registerEventHandler( "transition_complete_keyframe", f83_arg0.clipFinished ) --[[ @ 0]]
		end
		f83_arg0:clearEntityMidpoint( false ) --[[ @ 0]]
		f83_arg0:completeAnimation() --[[ @ 0]]
		f83_arg0:setAlpha( 1 ) --[[ @ 0]]
		f83_arg0.pinging = nil --[[ @ 0]]
	end
	f83_arg0:setEntityContainerScale( f83_arg0.objective[@"hash_733FD2E0B6B927C6"] == 1 ) --[[ @ 0]]
	if f83_arg0.objective[@"hash_60C590BF263AF815"] == 1 and f83_arg0.WaypointArrowContainer then
		f83_arg0.WaypointArrowContainer:setup3dPointer( f83_local0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsObjectivePropertyValueEqualTo = function ( f86_arg0, f86_arg1, f86_arg2 )
	if f86_arg0:getModel() then
		local f86_local0 = CoD.HUDUtility.GetCachedObjective --[[ @ 0]]
		local f86_local1 = f86_arg0:getModel() --[[ @ 0]]
		f86_local0 = f86_local0( f86_local1:get() ) --[[ @ 0]]
		return f86_local0 and f86_local0[f86_arg1] == f86_arg2
	else
		
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo = function ( f87_arg0, f87_arg1, f87_arg2 )
	if f87_arg0:getModel() then
		local f87_local0 = CoD.HUDUtility.GetCachedObjective --[[ @ 0]]
		local f87_local1 = f87_arg0:getModel() --[[ @ 0]]
		f87_local0 = f87_local0( f87_local1:get() ) --[[ @ 0]]
		return f87_local0 and f87_local0[f87_arg1] == f87_arg2
	else
		
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetObjectivePropertyValue = function ( f88_arg0, f88_arg1 )
	if f88_arg0 then
		local f88_local0 = CoD.HUDUtility.GetCachedObjective( f88_arg0:get() ) --[[ @ 0]]
		return f88_local0 and f88_local0[f88_arg1]
	else
		
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetModifiedColorName = function ( f89_arg0, f89_arg1, f89_arg2, f89_arg3 )
	if f89_arg2 then
		return f89_arg1 .. "_Bright"
	elseif f89_arg3 then
		return f89_arg1 .. "_Muted"
	else
		return f89_arg1
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorByObjIdInternal = function ( f90_arg0, f90_arg1, f90_arg2, f90_arg3 )
	local f90_local0 = CoD.HUDUtility.WaypointGetTeam( f90_arg0, f90_arg1 ) --[[ @ 0]]
	local f90_local1 = CoD.TeamUtility.GetTeamID( f90_arg0 ) --[[ @ 0]]
	local f90_local2 = CoD.perController[f90_arg0].objMeterPrevTeams and CoD.perController[f90_arg0].objMeterPrevTeams[f90_arg1] or Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] --[[ @ 0]]
	local f90_local3 = Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] --[[ @ 0]]
	local f90_local4 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f90_arg0, "WaypointNeutral" ) --[[ @ 0]]
	local f90_local5, f90_local6, f90_local7 = CoD.WaypointUtility.ConvertToColorInternal( CoD.HUDUtility.GetModifiedColorName( f90_arg0, f90_local4, f90_arg2, f90_arg3 ), f90_local4 ) --[[ @ 0]]
	if f90_local0 == Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
		local f90_local8 = Engine[@"ObjectiveIsTeamUsing"]( f90_arg0, f90_arg1, f90_local1 ) --[[ @ 0]]
		local f90_local9 = Engine[@"ObjectiveIsAnyOtherTeamUsing"]( f90_arg0, f90_arg1, f90_local1 ) --[[ @ 0]]
		if f90_local8 and f90_local9 then
			f90_local3 = f90_local2 --[[ @ 0]]
		elseif f90_local8 then
			f90_local3 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
		elseif f90_local9 then
			f90_local3 = Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] --[[ @ 0]]
		else
			f90_local3 = f90_local2 --[[ @ 0]]
		end
	elseif f90_local1 == f90_local0 then
		f90_local3 = Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] --[[ @ 0]]
	else
		f90_local3 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
	end
	if not CoD.perController[f90_arg0].objMeterPrevTeams then
		CoD.perController[f90_arg0].objMeterPrevTeams = {} --[[ @ 0]]
	end
	CoD.perController[f90_arg0].objMeterPrevTeams[f90_arg1] = f90_local3 --[[ @ 0]]
	if f90_local3 ~= Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
		if CoD.IsShoutcaster( f90_arg0 ) then
			local f90_local8 = f90_local3 --[[ @ 0]]
			if f90_local1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
				if f90_local3 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
					local f90_local10 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
				end
				f90_local8 = f90_local10 or Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] --[[ @ 0]]
			end
			local f90_local9 = CoD.HUDUtility.GetShoutcasterHudTeamColor( f90_arg0, f90_local8, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
			local f90_local11 = f90_local9.r --[[ @ 0]]
			local f90_local12 = f90_local9.g --[[ @ 0]]
			f90_local7 = f90_local9.b --[[ @ 0]]
			f90_local6 = f90_local12 --[[ @ 0]]
			f90_local5 = f90_local11 --[[ @ 0]]
		else
			if f90_local3 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
				f90_local4 = "FriendlyBlue" --[[ @ 0]]
			else
				f90_local4 = "EnemyOrange" --[[ @ 0]]
			end
			f90_local4 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f90_arg0, f90_local4 ) --[[ @ 0]]
			f90_local5, f90_local6, f90_local7 = CoD.WaypointUtility.ConvertToColorInternal( CoD.HUDUtility.GetModifiedColorName( f90_arg0, f90_local4, f90_arg2, f90_arg3 ), f90_local4 ) --[[ @ 0]]
		end
	end
	return f90_local5, f90_local6, f90_local7
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyBrightColorByObjId = function ( f91_arg0, f91_arg1 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByObjIdInternal( f91_arg0, f91_arg1, true, false )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyMutedColorByObjId = function ( f92_arg0, f92_arg1 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByObjIdInternal( f92_arg0, f92_arg1, false, true )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorByObjId = function ( f93_arg0, f93_arg1 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByObjIdInternal( f93_arg0, f93_arg1, false, false )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorByFlagsInternal = function ( f94_arg0, f94_arg1, f94_arg2, f94_arg3, f94_arg4 )
	local f94_local0 = CoD.TeamUtility.GetTeamID( f94_arg1 ) --[[ @ 0]]
	local f94_local1 = CoD.HUDUtility.GetObjectivePropertyValue( f94_arg0, @"hash_70011952FE919E43" .. f94_arg2 ) --[[ @ 0]]
	local f94_local2 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f94_arg1, "WaypointNeutral" ) --[[ @ 0]]
	local f94_local3, f94_local4, f94_local5 = CoD.WaypointUtility.ConvertToColorInternal( CoD.HUDUtility.GetModifiedColorName( f94_arg1, f94_local2, f94_arg3, f94_arg4 ), f94_local2 ) --[[ @ 0]]
	if f94_arg2 > 0 then
		if CoD.IsShoutcaster( f94_arg1 ) then
			local f94_local6 = CoD.HUDUtility.GetShoutcasterHudTeamColor( f94_arg1, f94_local1, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
			local f94_local7 = f94_local6.r --[[ @ 0]]
			local f94_local8 = f94_local6.g --[[ @ 0]]
			f94_local5 = f94_local6.b --[[ @ 0]]
			f94_local4 = f94_local8 --[[ @ 0]]
			f94_local3 = f94_local7 --[[ @ 0]]
		else
			local f94_local6 = CoD.TeamUtility.GetOppositeTeamAxisAllies( f94_local0 ) --[[ @ 0]]
			if f94_local6 ~= f94_local0 then
				if f94_local1 == f94_local0 then
					f94_local2 = "FriendlyBlue" --[[ @ 0]]
				elseif f94_local1 == f94_local6 then
					f94_local2 = "EnemyOrange" --[[ @ 0]]
				else
					f94_local2 = "PlayerYellow" --[[ @ 0]]
				end
			elseif f94_local0 == f94_local1 then
				f94_local2 = "FriendlyBlue" --[[ @ 0]]
			else
				f94_local2 = "EnemyOrange" --[[ @ 0]]
			end
			f94_local2 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f94_arg1, f94_local2 ) --[[ @ 0]]
			f94_local3, f94_local4, f94_local5 = CoD.WaypointUtility.ConvertToColorInternal( CoD.HUDUtility.GetModifiedColorName( f94_arg1, f94_local2, f94_arg3, f94_arg4 ), f94_local2 ) --[[ @ 0]]
		end
	end
	return f94_local3, f94_local4, f94_local5
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyBrightColorByFlags = function ( f95_arg0, f95_arg1, f95_arg2 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByFlagsInternal( f95_arg0, f95_arg1, f95_arg2, true, false )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyMutedColorByFlags = function ( f96_arg0, f96_arg1, f96_arg2 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByFlagsInternal( f96_arg0, f96_arg1, f96_arg2, false, true )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorByFlags = function ( f97_arg0, f97_arg1, f97_arg2 )
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByFlagsInternal( f97_arg0, f97_arg1, f97_arg2, false, false )
end
 --[[ @ 0]]
CoD.HUDUtility.VisibleIfInDemoPlayback = function ()
	local f98_local0 --[[ @ 0]]
	if Engine[@"hash_2A55C3ACD0D2BCF0"]() then
		f98_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "demo.cameraMode", Enum[@"demoCameraMode"][@"hash_7448CED16817146D"] ) --[[ @ 0]]
	else
		f98_local0 = true --[[ @ 0]]
	end
	return f98_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetOverheadHealthbarAlpha = function ( f99_arg0, f99_arg1 )
	local f99_local0 = CoD.SafeGetModelValue( f99_arg0:getModel(), "clientNum" ) --[[ @ 0]]
	local f99_local1 = Engine[@"GetPrimaryController"]() --[[ @ 0]]
	local f99_local2 = DataSources.GameplayFeedbackSettings.getModel( f99_local1 ) --[[ @ 0]]
	if CoD.IsShoutcaster( f99_local1 ) then
		return CoD.CodCasterUtility.ShouldShowOverheadInfo( f99_arg0, f99_local1, "shoutcaster_ds_overhead_health" ) and 1 or 0
	elseif IsVisibilityBitSet( f99_local1, Enum[@"UIVisibilityBit"][@"hash_669C28E2FCA82769"] ) then
		return 0
	elseif not CoD.isPC or not f99_local0 or f99_local0 < 0 or f99_local0 >= LuaDefine.MAX_CLIENTS then
		return f99_arg1
	elseif Engine[@"GetTeamID"]( f99_local1, f99_local0 ) == CoD.TeamUtility.GetTeamID( f99_local1 ) then
		f99_arg1 = CoD.SafeGetModelValue( f99_local2, "healthBarAllyAlpha" ) --[[ @ 0]]
	else
		f99_arg1 = CoD.SafeGetModelValue( f99_local2, "healthBarEnemyAlpha" ) --[[ @ 0]]
	end
	return f99_arg1
end
 --[[ @ 0]]
CoD.HUDUtility.GetAbilityHoldToActivateAlpha = function ( f100_arg0, f100_arg1, f100_arg2 )
	if not CoD.isPC then
		return f100_arg2
	else
		local f100_local0 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f100_arg0 ), "hudItems.abilityHoldToActivate" ) --[[ @ 0]]
		if (f100_local0 and Engine[@"GetModelValue"]( f100_local0 )) == 0 or CoD.SafeGetModelValue( DataSources.GameplayFeedbackSettings.getModel( f100_arg0 ), "hideRadiationHold" ) then
			return 0
		else
			return f100_arg2
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ConvertProgressToRadiationNeedleRotation = function ( f101_arg0, f101_arg1, f101_arg2 )
	return -(f101_arg1 * f101_arg2 - f101_arg1 / 2)
end
 --[[ @ 0]]
CoD.HUDUtility.MeterClockFraction = function ( f102_arg0, f102_arg1, f102_arg2, f102_arg3, f102_arg4, f102_arg5, f102_arg6 )
	local f102_local0 = f102_arg3 --[[ @ 0]]
	local f102_local1 = (f102_arg1 - f102_arg0) * f102_local0 + f102_arg0 --[[ @ 0]]
	DebugPrint( "" .. f102_local0 .. ", " .. f102_local1 ) --[[ @ 0]]
	return f102_local1, 0, f102_arg2, 0
end
 --[[ @ 0]]
CoD.HUDUtility.InitOverheadNames = function ( f103_arg0, f103_arg1, f103_arg2 )
	local f103_local0 = f103_arg0[f103_arg2] --[[ @ 0]]
	if f103_local0 then
		f103_local0:setupOverheadNameContainer() --[[ @ 0]]
		local f103_local1 = CoD.CPMPZMWZ( CoD.OverheadName_CP, CoD.OverheadName_MP, CoD.OverheadName_ZM, CoD.OverheadName_WZ ) --[[ @ 0]]
		if f103_local1 then
			for f103_local2 = 0 --[[ @ 0]], LuaDefine.MAX_CLIENTS - 1, 1 do
				local f103_local5 = Engine[@"hash_E4D2F32833CFA6C"]( f103_local2 ) --[[ @ 0]]
				local f103_local6 = f103_local5:create( "abilityCallout.shouldClamp" ) --[[ @ 0]]
				f103_local6:set( false ) --[[ @ 0]]
				f103_local6 = f103_local5:create( "abilityCallout.clamped" ) --[[ @ 0]]
				f103_local6:set( false ) --[[ @ 0]]
				f103_local5:create( "abilityCallout.direction" ) --[[ @ 0]]
				local f103_local7 = f103_local1.new( f103_arg0, f103_arg1, 0, 0, 0, f103_local1.__defaultWidth, 0, 0, 0, f103_local1.__defaultHeight ) --[[ @ 0]]
				f103_local7:setupOverheadName( f103_local2 ) --[[ @ 0]]
				f103_local0:addElement( f103_local7 ) --[[ @ 0]]
				f103_arg0:sendInitializationEvents( f103_arg1, f103_local7 ) --[[ @ 0]]
			end
		end
		local f103_local2 = CoD.CPMPZM( CoD.ActorOverheadName_CP, nil, CoD.ActorOverheadName_ZM ) --[[ @ 0]]
		if f103_local2 then
			local f103_local3 = Engine[@"GetModelForController"]( f103_arg1 ) --[[ @ 0]]
			f103_local3 = f103_local3:create( "ActorOverheadNames" ) --[[ @ 0]]
			local f103_local4 = nil --[[ @ 0]]
			local f103_local8 = -1 --[[ @ 0]]
			repeat
				f103_local8 = f103_local8 + 1 --[[ @ 0]]
				local f103_local5 = f103_local3:create( f103_local8 ) --[[ @ 0]]
				local f103_local6 = f103_local5:create( "displayName" ) --[[ @ 0]]
				f103_local6:set( "" ) --[[ @ 0]]
				f103_local6 = f103_local5:create( "team" ) --[[ @ 0]]
				f103_local6:set( Enum[@"team_t"][@"hash_697263B3C1ABADF7"] ) --[[ @ 0]]
				f103_local4 = f103_local2.new( f103_arg0, f103_arg1, 0, 0, 0, f103_local2.__defaultWidth, 0, 0, 0, f103_local2.__defaultHeight ) --[[ @ 0]]
				f103_local0:addElement( f103_local4 ) --[[ @ 0]]
				f103_local4:setModel( f103_local5, f103_arg1 ) --[[ @ 0]]
				f103_arg0:sendInitializationEvents( f103_arg1, f103_local4 ) --[[ @ 0]]
			until not f103_local4:setupActorOverheadName( f103_local8 )
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.InitOverheadNamesDraft = function ( f104_arg0, f104_arg1, f104_arg2 )
	local f104_local0 = f104_arg0[f104_arg2] --[[ @ 0]]
	if f104_local0 then
		f104_local0:setupOverheadNameContainer() --[[ @ 0]]
		local f104_local1 = CoD.PositionDraft_Client --[[ @ 0]]
		if f104_local1 then
			local f104_local2 = IsGametypeTeambased() --[[ @ 0]]
			local f104_local3 = nil --[[ @ 0]]
			if not f104_local2 then
				f104_local3 = CoD.HUDUtility.PositionDraftSelfPosition + 1 --[[ @ 0]]
			elseif CoD.isPublicOnlineGame() then
				local f104_local4 = Engine[@"hash_63ACB99DBAD24D55"]( Engine[@"hash_17B3B2B73B53EB34"]() ) --[[ @ 0]]
				f104_local3 = f104_local4.maxPlayers / 2 --[[ @ 0]]
			else
				f104_local3 = Engine[@"hash_229B25E8DA873863"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"], Enum[@"LobbyType"][@"hash_20A1647599284110"] ) --[[ @ 0]]
			end
			for f104_local5 = 0 --[[ @ 0]], f104_local3 - 1, 1 do
				if f104_local2 or f104_local5 == CoD.HUDUtility.PositionDraftSelfPosition then
					local f104_local7 = f104_local1.new( f104_arg0, f104_arg1, 0, 0, 0, f104_local1.__defaultWidth, 0, 0, 0, f104_local1.__defaultHeight ) --[[ @ 0]]
					f104_local7:subscribeToGlobalModel( f104_arg1, "PositionDraftClients", f104_local5 + 1, function ( model )
						f104_local7:setModel( model, f104_arg1 ) --[[ @ 0]]
					end ) --[[ @ 0]]
					f104_local7:setupOverheadNameDraft( f104_local5 ) --[[ @ 0]]
					f104_local0:addElement( f104_local7 ) --[[ @ 0]]
					f104_arg0:sendInitializationEvents( f104_arg1, f104_local7 ) --[[ @ 0]]
				end
			end
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.OverheadNameTeamIsSelfPlayerTeam = function ( f106_arg0, f106_arg1 )
	local f106_local0 = f106_arg0:getModel( f106_arg1, "team" ) --[[ @ 0]]
	return (f106_local0 and f106_local0:get()) == CoD.TeamUtility.GetTeamIDForController( f106_arg1 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId = function ( f107_arg0, f107_arg1, f107_arg2, f107_arg3 )
	local f107_local0 = DataSources.Factions.getModel( f107_arg0 ) --[[ @ 0]]
	f107_local0 = f107_local0.actualTeam:get() --[[ @ 0]]
	local f107_local1 = nil --[[ @ 0]]
	if f107_arg1 == f107_local0 then
		f107_local1 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f107_arg0, f107_arg2 ) --[[ @ 0]]
	else
		f107_local1 = CoD.ColorUtility.GetColorBlindColorNameForPlayer( f107_arg0, f107_arg3 ) --[[ @ 0]]
	end
	return f107_local1
end
 --[[ @ 0]]
CoD.HUDUtility.GetShoutcasterHudTeamColor = function ( f108_arg0, f108_arg1, f108_arg2, f108_arg3 )
	local f108_local0 = nil --[[ @ 0]]
	if CoD.TeamUtility.ShouldUseCustomTeamIdentity( f108_arg0 ) then
		f108_local0 = CoD.ColorUtility.GetColorFromFormattedColorString( CoD.GetCodCasterTeamColor( f108_arg0, f108_arg1 ) ) --[[ @ 0]]
	elseif f108_arg1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
		f108_local0 = ColorSet[f108_arg2] --[[ @ 0]]
	else
		f108_local0 = ColorSet[f108_arg3] --[[ @ 0]]
	end
	return f108_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyColorByTeamId = function ( f109_arg0, f109_arg1 )
	local f109_local0 = nil --[[ @ 0]]
	if CoD.IsShoutcaster( f109_arg0 ) then
		f109_local0 = CoD.HUDUtility.GetShoutcasterHudTeamColor( f109_arg0, f109_arg1, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
	else
		f109_local0 = ColorSet[CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f109_arg0, f109_arg1, "FriendlyBlue", "EnemyOrange" )] --[[ @ 0]]
	end
	return f109_local0.r, f109_local0.g, f109_local0.b
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyBaseColor = function ( f110_arg0, f110_arg1 )
	local f110_local0 = CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f110_arg0, f110_arg1, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
	return CoD.WaypointUtility.ConvertToColorInternal( f110_local0 .. "_Base", f110_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyMutedColor = function ( f111_arg0, f111_arg1 )
	local f111_local0 = CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f111_arg0, f111_arg1, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
	return CoD.WaypointUtility.ConvertToColorInternal( f111_local0 .. "_Muted", f111_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyBrightColor = function ( f112_arg0, f112_arg1 )
	local f112_local0 = CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f112_arg0, f112_arg1, "FriendlyBlue", "EnemyOrange" ) --[[ @ 0]]
	return CoD.WaypointUtility.ConvertToColorInternal( f112_local0 .. "_Bright", f112_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetOverheadNameColorByTeamId = function ( f113_arg0, f113_arg1 )
	if CoD.isWarzone then
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.White )
	else
		return CoD.HUDUtility.GetFriendlyOrEnemyColorByTeamId( f113_arg0, f113_arg1 )
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyHealthBarColorByTeamId = function ( f114_arg0, f114_arg1 )
	local f114_local0 = nil --[[ @ 0]]
	if CoD.IsShoutcaster( f114_arg0 ) then
		f114_local0 = CoD.HUDUtility.GetShoutcasterHudTeamColor( f114_arg0, f114_arg1, "FriendlyHealthBar", "EnemyOrange" ) --[[ @ 0]]
	else
		f114_local0 = ColorSet[CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f114_arg0, f114_arg1, "FriendlyHealthBar", "EnemyOrange" )] --[[ @ 0]]
	end
	return f114_local0.r, f114_local0.g, f114_local0.b
end
 --[[ @ 0]]
CoD.HUDUtility.GetFriendlyOrEnemyHealthBarPulseColorByTeamId = function ( f115_arg0, f115_arg1 )
	local f115_local0 = ColorSet[CoD.HUDUtility.GetFriendlyOrEnemyColorNameByTeamId( f115_arg0, f115_arg1, "EnemyOrange", "FriendlyHealthBar" )] --[[ @ 0]]
	return f115_local0.r, f115_local0.g, f115_local0.b
end
 --[[ @ 0]]
CoD.HUDUtility.GetPlayerNameColorByClientNum = function ( f116_arg0, f116_arg1 )
	if IsZombies() then
		local f116_local0 = Enum[@"ColorVisionDeficiencies"][@"hash_4D44A16999E1790A"] --[[ @ 0]]
		local f116_local1 = Engine[@"GetPlayerCommonGamerProfile"]( f116_arg0 ) --[[ @ 0]]
		if f116_local1 ~= nil and f116_local1[@"hash_1F7EA50ADC77CDD0"] ~= nil then
			f116_local0 = f116_local1[@"hash_1F7EA50ADC77CDD0"]:get() --[[ @ 0]]
		end
		if f116_local0 == Enum[@"ColorVisionDeficiencies"][@"hash_4D44A16999E1790A"] then
			local f116_local2 = nil --[[ @ 0]]
			if f116_arg1 == 0 then
				local f116_local3 = {} --[[ @ 0]]
				f116_local2 = Dvar[@"hash_66BEE54AB204EDA4"]:get() --[[ @ 0]]
			elseif f116_arg1 == 1 then
				local f116_local3 = {} --[[ @ 0]]
				f116_local2 = Dvar[@"hash_66BEE64AB204EF57"]:get() --[[ @ 0]]
			elseif f116_arg1 == 2 then
				local f116_local3 = {} --[[ @ 0]]
				f116_local2 = Dvar[@"hash_66BEE74AB204F10A"]:get() --[[ @ 0]]
			elseif f116_arg1 == 3 then
				local f116_local3 = {} --[[ @ 0]]
				f116_local2 = Dvar[@"hash_66BEE84AB204F2BD"]:get() --[[ @ 0]]
			end
			return f116_local2[1], f116_local2[2], f116_local2[3]
		end
	end
	return CoD.HUDUtility.GetFriendlyOrEnemyColorByTeamId( f116_arg0, Engine[@"GetTeamID"]( f116_arg0, f116_arg1 ) )
end
 --[[ @ 0]]
CoD.HUDUtility.GetPlayerHealthBarColorByClientNum = function ( f117_arg0, f117_arg1 )
	if IsZombies() then
		local f117_local0 = Enum[@"ColorVisionDeficiencies"][@"hash_4D44A16999E1790A"] --[[ @ 0]]
		local f117_local1 = Engine[@"GetPlayerCommonGamerProfile"]( f117_arg0 ) --[[ @ 0]]
		if f117_local1 ~= nil and f117_local1[@"hash_1F7EA50ADC77CDD0"] ~= nil then
			f117_local0 = f117_local1[@"hash_1F7EA50ADC77CDD0"]:get() --[[ @ 0]]
		end
		if f117_local0 == Enum[@"ColorVisionDeficiencies"][@"hash_4D44A16999E1790A"] then
			local f117_local2 = nil --[[ @ 0]]
			if f117_arg1 == 0 then
				local f117_local3 = {} --[[ @ 0]]
				f117_local2 = Dvar[@"hash_66BEE54AB204EDA4"]:get() --[[ @ 0]]
			elseif f117_arg1 == 1 then
				local f117_local3 = {} --[[ @ 0]]
				f117_local2 = Dvar[@"hash_66BEE64AB204EF57"]:get() --[[ @ 0]]
			elseif f117_arg1 == 2 then
				local f117_local3 = {} --[[ @ 0]]
				f117_local2 = Dvar[@"hash_66BEE74AB204F10A"]:get() --[[ @ 0]]
			elseif f117_arg1 == 3 then
				local f117_local3 = {} --[[ @ 0]]
				f117_local2 = Dvar[@"hash_66BEE84AB204F2BD"]:get() --[[ @ 0]]
			end
			return f117_local2[1], f117_local2[2], f117_local2[3]
		end
	end
	return CoD.HUDUtility.GetFriendlyOrEnemyHealthBarColorByTeamId( f117_arg0, Engine[@"GetTeamID"]( f117_arg0, f117_arg1 ) )
end
 --[[ @ 0]]
CoD.HUDUtility.InitObituaryCallout = function ( f118_arg0, f118_arg1 )
	local f118_local0 = f118_arg0 --[[ @ 0]]
	f118_local0.playNotification = function ( f119_arg0, f119_arg1 )
		local f119_local0 = Engine[@"GetModelForController"]( f118_arg1 ) --[[ @ 0]]
		local f119_local1 = f119_local0:create( "obituaryCallout" ) --[[ @ 0]]
		local f119_local2 = f119_local1:create( "clientNum" ) --[[ @ 0]]
		f119_local2:set( f119_arg1.clientNum ) --[[ @ 0]]
		f119_local2 = f119_local1:create( "mod" ) --[[ @ 0]]
		f119_local2:set( f119_arg1.mod ) --[[ @ 0]]
		f119_local2 = f119_local1:create( "damageDealt" ) --[[ @ 0]]
		f119_local2:set( f119_arg1.damageDealt ) --[[ @ 0]]
		f119_local2 = f119_local1:create( "style" ) --[[ @ 0]]
		if not f119_local2:set( f119_arg1.style ) then
			Engine[@"ForceNotifyModelSubscriptions"]( f119_local1.style ) --[[ @ 0]]
		end
		local f119_local3 = f119_local1:create( "xuid" ) --[[ @ 0]]
		f119_local3:set( f119_arg1.xuid ) --[[ @ 0]]
		f119_local3 = f119_local1:create( "rank" ) --[[ @ 0]]
		f119_local3:set( f119_arg1.rank ) --[[ @ 0]]
		f119_local3 = f119_local1:create( "rankIcon" ) --[[ @ 0]]
		f119_local3:set( f119_arg1.rankIcon ) --[[ @ 0]]
		f119_arg0.currentNotification = f119_arg1 --[[ @ 0]]
		f119_arg0:setModel( f119_local1, f118_arg1 ) --[[ @ 0]]
		f118_arg0:playClip( "Show" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f118_local0.appendNotification = function ( f120_arg0, f120_arg1 )
		if f120_arg1 == nil then
			return 
		elseif f120_arg0.currentNotification ~= nil then
			local f120_local0 = f120_arg0.nextNotification --[[ @ 0]]
			if f120_local0 == nil then
				f120_arg0.nextNotification = f120_arg1 --[[ @ 0]]
			end
			while f120_local0 and f120_local0.next ~= nil do
				f120_local0 = f120_local0.next --[[ @ 0]]
			end
			f120_local0.next = f120_arg1 --[[ @ 0]]
		else
			f120_arg0:playNotification( f120_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f118_local0:subscribeToGlobalModel( f118_arg1, "PerController", "scriptNotify", function ( model )
		if CoD.ModelUtility.IsParamModelEqualToString( model, @"player_spawned" ) then
			f118_local0.nextNotification = nil --[[ @ 0]]
			f118_arg0:playClip( "DefaultClip" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f118_local0.getModelValueTable = function ( f122_arg0, f122_arg1 )
		local f122_local0 = nil --[[ @ 0]]
		if f122_arg1.damageDealt then
			f122_local0 = {
				clientNum = f122_arg1.clientNum:get(),
				mod = f122_arg1.mod:get(),
				damageDealt = f122_arg1.damageDealt:get(),
				style = f122_arg1.style:get(),
				xuid = f122_arg1.xuid:get(),
				rank = f122_arg1.rank:get(),
				rankIcon = f122_arg1.rankIcon:get()
			} --[[ @ 0]]
		else
			f122_local0 = {
				clientNum = f122_arg1.clientNum:get(),
				mod = f122_arg1.mod:get(),
				style = f122_arg1.style:get(),
				xuid = f122_arg1.xuid:get(),
				rank = f122_arg1.rank:get(),
				rankIcon = f122_arg1.rankIcon:get()
			} --[[ @ 0]]
		end
		return f122_local0
	end
	 --[[ @ 0]]
	f118_local0.currentNotification = nil --[[ @ 0]]
	f118_local0.nextNotification = nil --[[ @ 0]]
	local f118_local1 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f118_arg1 ), "playerKilledCallout" ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f118_local1, false ) --[[ @ 0]]
	if not CoD.isCampaign then
		f118_local0:subscribeToModel( f118_local1, function ( model )
			if Engine[@"GetModelValue"]( model ) == true then
				f118_local0:appendNotification( f118_local0:getModelValueTable( Engine[@"GetModel"]( Engine[@"GetModelForController"]( f118_arg1 ), "playerObituary" ) ) ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	f118_arg0:registerEventHandler( "clip_over", function ( element, event )
		f118_local0.currentNotification = nil --[[ @ 0]]
		if f118_local0.nextNotification ~= nil then
			f118_local0:playNotification( f118_local0.nextNotification ) --[[ @ 0]]
			f118_local0.nextNotification = f118_local0.nextNotification.next --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.GetModIconforClient = function ( f125_arg0, f125_arg1 )
	local f125_local0 = nil --[[ @ 0]]
	if f125_arg1 == Enum[@"hash_752177B239BFECC1"][@"mod_head_shot"] then
		f125_local0 = CoD.HUDUtility.GetModIcon( f125_arg1, @"hash_78DAF2B58F8C7979" ) --[[ @ 0]]
	else
		f125_local0 = CoD.HUDUtility.GetModIcon( Enum[@"hash_752177B239BFECC1"][@"mod_unknown"], @"hash_78DAF2B58F8C7979" ) --[[ @ 0]]
	end
	local f125_local1 = Engine[@"GetModelValue"]( Engine[@"GetModel"]( Engine[@"GetModel"]( Engine[@"GetModelForController"]( f125_arg0 ), "playerObituary" ), "weaponIcon" ) ) --[[ @ 0]]
	if Engine[@"GetLuaCodeVersion"]() < 39 then
		if f125_local1 and f125_local1 ~= "" then
			f125_local0 = f125_local1 --[[ @ 0]]
		end
	elseif Engine[@"hash_4238317564B9D47B"]( f125_local1 ) then
		f125_local0 = f125_local1 --[[ @ 0]]
	end
	return f125_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetModIcon = function ( f126_arg0, f126_arg1 )
	local f126_local0 = f126_arg1 --[[ @ 0]]
	local f126_local1 = CoD.HUDUtility.GetModInfo( f126_arg0 ) --[[ @ 0]]
	if f126_local1 then
		f126_local0 = f126_local1[@"hash_5BFF4CC56C2092F0"] --[[ @ 0]]
	end
	return f126_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetModInfo = function ( f127_arg0 )
	local f127_local0 = CoD.HUDUtility.GetMeansOfDeathTable() --[[ @ 0]]
	return f127_local0 and f127_local0[f127_arg0]
end
 --[[ @ 0]]
CoD.HUDUtility.GetMeansOfDeathTable = function ()
	if not CoD.HUDUtility.MeansOfDeathTable then
		local f128_local0 = {} --[[ @ 0]]
		local f128_local1 = Engine[@"hash_7A7E3CD65E63086F"]( @"hash_790E99B72AB53006" ) --[[ @ 0]]
		if f128_local1 then
			for f128_local5, f128_local6 in ipairs( f128_local1 ) --[[ @ 0]] do
				f128_local0[Enum[@"hash_752177B239BFECC1"][Engine[@"hash_1C53F8D38DF9042B"]( f128_local6[@"mod"] )]] = f128_local6 --[[ @ 0]]
			end
		end
		CoD.HUDUtility.MeansOfDeathTable = f128_local0 --[[ @ 0]]
	end
	return CoD.HUDUtility.MeansOfDeathTable
end
 --[[ @ 0]]
CoD.HUDUtility.IsMovieShowing = function ( f129_arg0 )
	return Engine[@"IsCinematicStarted"]()
end
 --[[ @ 0]]
CoD.HUDUtility.InitLoadingMovie = function ( f130_arg0 )
	if CoD.HUDUtility.IsMovieShowing( f130_arg0 ) then
		return 
	end
	local f130_local0 = Engine[@"GetCurrentMap"]() --[[ @ 0]]
	if LUI.DEV and not Dvar[@"hash_404C70893D7EA01B"]:get() and not IsSimulateCT() then
		return 
	elseif CoD.isZombie then
		if Engine[@"hash_2A55C3ACD0D2BCF0"]() or Engine[@"IsSplitscreen"]() or CoD.HUDUtility.IsGameTypeEqualToString( "ztutorial" ) then
			return 
		elseif Engine[@"hash_144FC97037CE42ED"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"], Engine[@"hash_3C3DF042E7492B66"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"] ), Enum[@"hash_6575E471C039DBD6"][@"hash_1092BC25E18D296F"] ) <= 1 then
			local f130_local1 = CoD.BaseUtility.GetMapValue( f130_local0, "introMovie" ) --[[ @ 0]]
			if f130_local1 ~= nil and not Engine[@"IsCinematicPlaying"]() then
				Engine[@"StartLoadingCinematic"]( f130_local1 ) --[[ @ 0]]
			end
			return 
		end
	else
		if Dvar[@"art_review"]:get() == "1" and not IsSimulateCT() then
			return 
		end
		local f130_local2 = CoD.BaseUtility.GetMapValue( f130_local0, "introMovie" ) --[[ @ 0]]
		local f130_local1 = false --[[ @ 0]]
		if not CoD.isMultiplayer then
			local f130_local3 = CoD.isWarzone --[[ @ 0]]
		end
		local f130_local4 = false --[[ @ 0]]
		local f130_local5 = CoD.isMultiplayer --[[ @ 0]]
		local f130_local6 = false --[[ @ 0]]
		if CoD.isMultiplayer then
			local f130_local7 = not Engine[@"IsSplitscreen"]() --[[ @ 0]]
		end
		if Engine[@"hash_217B32C04C4BE462"]( Engine[@"hash_3C3DF042E7492B66"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"] ) ) == Enum[@"LobbyMode"][@"hash_3B3A1BBF18C0B176"] or IsSimulateCT() then
			local f130_local8 = Dvar[@"g_gametype"]:get() --[[ @ 0]]
			local f130_local9 = f130_local2 --[[ @ 0]]
			f130_local2, f130_local6 = CoD.CTUtility.GetLoadingMovie( f130_arg0, f130_local8, Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] ) --[[ @ 0]]
			if not f130_local2 then
				f130_local2 = f130_local9 --[[ @ 0]]
			else
				f130_local1 = false --[[ @ 0]]
				local f130_local3 = false --[[ @ 0]]
				f130_local5 = false --[[ @ 0]]
				local f130_local7 = false --[[ @ 0]]
			end
		end
		if f130_local2 ~= nil and not Engine[@"IsCinematicPlaying"]() then
			if f130_local6 then
				CoD.CTUtility.SetSeenMovie( f130_arg0, "woods_intro" ) --[[ @ 0]]
				local f130_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
				local f130_local9 = f130_local8:create( "isIntroTutorialMovie" ) --[[ @ 0]]
				f130_local9:set( true ) --[[ @ 0]]
			end
			local f130_local8 --[[ @ 0]]
			if f130_local2 ~= "wz_open_skyscrapers_loadingmovie" and f130_local2 ~= "wz_open_skyscrapers_alt_loadingmovie" then
				f130_local8 = false --[[ @ 0]]
			else
				f130_local8 = true --[[ @ 0]]
			end
			if CoD.isPC and f130_local8 and CoD.PCKoreaUtility.ShowKorea15Plus() then
				return 
			end
			Engine[@"StartLoadingCinematic"]( f130_local2, f130_local1, f130_local3, f130_local4, f130_local5, f130_local7 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.InitLoadingImageOrMovie = function ( f131_arg0, f131_arg1 )
	local f131_local0 = Engine[@"GetCurrentMap"]() --[[ @ 0]]
	local f131_local1 = MapNameToMapLoadingImage( f131_arg1, f131_local0 ) --[[ @ 0]]
	CoD.HUDUtility.InitLoadingMovie( f131_arg1 ) --[[ @ 0]]
	if CoD.HUDUtility.IsMovieShowing( f131_arg1 ) then
		Engine[@"SetDvar"]( "ui_useloadingmovie", 1 ) --[[ @ 0]]
		if CoD.BaseUtility.GetMapValue( f131_local0, @"hash_DB9057B4131C76B" ) == 1 then
			local f131_local2 = "$white" --[[ @ 0]]
		end
		f131_local1 = f131_local2 or "black" --[[ @ 0]]
		HUD_DelayLoadMenus() --[[ @ 0]]
	else
		Engine[@"SetDvar"]( "ui_useloadingmovie", 0 ) --[[ @ 0]]
		if f131_local1 == nil or f131_local1 == @"hash_0" then
			f131_local1 = @"$black" --[[ @ 0]]
		end
	end
	f131_arg0:setImage( RegisterImage( f131_local1 ) ) --[[ @ 0]]
	f131_arg0:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f131_arg0:addElement( LUI.UITimer.newElementTimer( 16, false, function ()
		if f131_arg0.ismp4 and not Engine[@"IsCinematicMp4"]() then
			f131_arg0:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f131_arg0:setImage( LUI.UIImage.GetCachedMaterial( "ui_normal" ) ) --[[ @ 0]]
			f131_arg0.ismp4 = nil --[[ @ 0]]
		elseif f131_arg0.ismp4 == nil and Engine[@"IsCinematicPlaying"]() then
			f131_arg0:setupCurrentMoviePlayback() --[[ @ 0]]
			f131_arg0.ismp4 = false --[[ @ 0]]
		end
	end ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.StartPlay = function ( f133_arg0, f133_arg1 )
	if not Engine[@"hash_EB086150763B954"]() then
		Engine[@"Stop3DCinematic"]() --[[ @ 0]]
	end
	if Engine[@"hash_10EA2BE00F49480D"]( Enum[@"LobbyType"][@"hash_692676CF5B6FCD43"] ) then
		Engine[@"hash_CF412AB395C7CE"]( true ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.CachedDidYouKnowString = nil --[[ @ 0]]
CoD.HUDUtility.GetDidYouKnowString = function ( f134_arg0 )
	local f134_local0 = @"hash_0" --[[ @ 0]]
	if Engine[@"CurrentSessionMode"]() == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return ""
	elseif CoD.HUDUtility.CachedDidYouKnowString ~= nil then
		return CoD.HUDUtility.CachedDidYouKnowString
	end
	local f134_local1 = Engine[@"hash_2E00B2F29271C60B"]( IsMouseOrKeyboard( f134_arg0 ) and @"pcdidyouknow" or @"didyouknow" ) --[[ @ 0]]
	local f134_local2 = {} --[[ @ 0]]
	if CoD.isPC then
		table.insert( f134_local2, @"hash_15B46DA0C12D84AC" ) --[[ @ 0]]
	end
	if Engine[@"GameModeIsMode"]( Enum[@"eGameModes"][@"hash_3EF1485A96433A7"] ) == true then
		table.insert( f134_local2, @"theater" ) --[[ @ 0]]
	elseif CoD.isZombie == true then
		table.insert( f134_local2, @"zombies" ) --[[ @ 0]]
	elseif CoD.isWarzone then
		table.insert( f134_local2, @"hash_757E90B1451515A7" ) --[[ @ 0]]
		if Engine[@"GetCurrentMap"]() == "wz_escape" then
			table.insert( f134_local2, @"hash_51016C5A9D98F148" ) --[[ @ 0]]
		else
			table.insert( f134_local2, @"hash_23708CCE8BE0EDA7" ) --[[ @ 0]]
		end
		if CoD.HUDUtility.IsGameTypeEqualToString( "warzone_hot_pursuit" ) then
			table.insert( f134_local2, @"hash_5EE90511FD901B40" ) --[[ @ 0]]
		elseif CoD.HUDUtility.IsGameTypeWzAmbush() then
			table.insert( f134_local2, @"hash_6D86EE985C93E1B" ) --[[ @ 0]]
		elseif CoD.HUDUtility.IsGameTypeWzSpectre() then
			table.insert( f134_local2, @"hash_43296DC50458C5D3" ) --[[ @ 0]]
		elseif CoD.HUDUtility.IsGameTypeWzGroundWar() then
			table.insert( f134_local2, @"hash_258DDFB8E08B1832" ) --[[ @ 0]]
		end
		if CoD.HUDUtility.IsGameTypeWzRedeploy() then
			table.insert( f134_local2, @"hash_3433E6E576BEB82B" ) --[[ @ 0]]
		end
	else
		if CoD.isMultiplayer then
			table.insert( f134_local2, @"hash_3F6A03A9D0A1840B" ) --[[ @ 0]]
		end
		table.insert( f134_local2, @"general" ) --[[ @ 0]]
		table.insert( f134_local2, Engine[@"hash_1C53F8D38DF9042B"]( Engine[@"hash_169811927938FCD7"]() ) ) --[[ @ 0]]
		if Engine[@"GameModeIsMode"]( Enum[@"eGameModes"][@"hash_158ECA70A244C08F"] ) == true then
			table.insert( f134_local2, @"hash_27D9D67ACD831310" ) --[[ @ 0]]
		elseif Engine[@"GameModeIsMode"]( Enum[@"eGameModes"][@"hash_795910ACF90F64AD"] ) == true then
			table.insert( f134_local2, @"hash_74B72165F60F5B60" ) --[[ @ 0]]
		end
	end
	if #f134_local2 > 0 then
		local f134_local3 = {} --[[ @ 0]]
		local f134_local4 = {} --[[ @ 0]]
		local f134_local5 = {} --[[ @ 0]]
		local f134_local6 = 0 --[[ @ 0]]
		local f134_local7 = 0 --[[ @ 0]]
		for f134_local12, f134_local13 in ipairs( f134_local2 ) --[[ @ 0]] do
			local f134_local14 = f134_local1[f134_local13 .. "Count"] --[[ @ 0]]
			local f134_local11 = f134_local1[f134_local13 .. "Weight"] --[[ @ 0]]
			if f134_local14 and f134_local14 > 0 then
				f134_local6 = f134_local6 + f134_local14 --[[ @ 0]]
				if f134_local11 == nil then
					f134_local11 = 1 --[[ @ 0]]
				end
				f134_local7 = f134_local7 + f134_local11 --[[ @ 0]]
				f134_local3[#f134_local3 + 1] = f134_local14 --[[ @ 0]]
				f134_local4[#f134_local4 + 1] = f134_local11 --[[ @ 0]]
				f134_local5[#f134_local5 + 1] = f134_local13 --[[ @ 0]]
			end
		end
		if f134_local6 > 0 then
			f134_local8 = 0 --[[ @ 0]]
			f134_local9 = "" --[[ @ 0]]
			for f134_local14, f134_local11 in ipairs( f134_local5 ) --[[ @ 0]] do
				for f134_local15 = 1 --[[ @ 0]], f134_local1[f134_local11 .. "Count"], 1 do
					f134_local9 = f134_local11 --[[ @ 0]]
					if f134_local15 < 10 then
						f134_local9 = f134_local9 .. "0" --[[ @ 0]]
					end
					f134_local9 = f134_local9 .. f134_local15 --[[ @ 0]]
					if f134_local1[f134_local9] == @"hash_4CAE12A542DB4611" or CoD.HUDUtility.IsDidYouKnowAssetValid( f134_local9, f134_local1 ) == false then
						f134_local8 = f134_local8 + 1 --[[ @ 0]]
					end
				end
			end
			if f134_local8 == f134_local6 then
				return ""
			end
			f134_local10 = math.random( f134_local7 ) --[[ @ 0]]
			f134_local12 = 0 --[[ @ 0]]
			f134_local13 = 1 --[[ @ 0]]
			for f134_local14 = 1 --[[ @ 0]], #f134_local4, 1 do
				f134_local12 = f134_local4[f134_local14] + f134_local12 --[[ @ 0]]
				if f134_local10 < f134_local12 then
					f134_local13 = f134_local14 --[[ @ 0]]
					break
				end
			end
			f134_local14 = true --[[ @ 0]]
			f134_local11 = math.random( f134_local3[f134_local13] ) --[[ @ 0]]
			local f134_local15 = 0 --[[ @ 0]]
			while f134_local14 and f134_local15 < f134_local3[f134_local13] do
				local f134_local16 = f134_local5[f134_local13] --[[ @ 0]]
				if f134_local11 < 10 then
					f134_local16 = f134_local16 .. "0" --[[ @ 0]]
				end
				f134_local16 = f134_local16 .. f134_local11 --[[ @ 0]]
				if f134_local1[f134_local16] ~= @"hash_4CAE12A542DB4611" then
					f134_local14 = false --[[ @ 0]]
				end
				f134_local14 = CoD.HUDUtility.IsDidYouKnowAssetValid( f134_local16, f134_local1 ) == false --[[ @ 0]]
				f134_local15 = f134_local15 + 1 --[[ @ 0]]
				f134_local11 = f134_local11 + 1 --[[ @ 0]]
				if f134_local3[f134_local13] < f134_local11 then
					f134_local11 = 1 --[[ @ 0]]
				end
			end
		end
	end
	if f134_local0 == nil or f134_local0 == @"hash_4CAE12A542DB4611" then
		return ""
	end
	CoD.HUDUtility.CachedDidYouKnowString = Engine[@"hash_4F9F1239CFD921FE"]( f134_local0 ) --[[ @ 0]]
	return CoD.HUDUtility.CachedDidYouKnowString
end
 --[[ @ 0]]
CoD.HUDUtility.InitLoadingScreenPlayerListSize = function ( f135_arg0 )
	if not f135_arg0._initializing then
		f135_arg0._initializing = true --[[ @ 0]]
		local f135_local0 = DataSources.LoadingScreenPlayerListTeam1.getCount( f135_arg0 ) --[[ @ 0]]
		local f135_local1 = 4 --[[ @ 0]]
		if f135_local0 > 8 and f135_local0 < 11 then
			f135_local1 = 5 --[[ @ 0]]
		elseif f135_local0 > 10 then
			f135_local1 = 6 --[[ @ 0]]
		end
		if f135_local0 < 4 then
			f135_local1 = f135_local0 --[[ @ 0]]
		end
		local f135_local2 = 160 * f135_local1 + 2 * (f135_local1 - 1) --[[ @ 0]]
		local f135_local3 = 640 - f135_local2 / 2 --[[ @ 0]]
		f135_arg0:setLeftRight( true, false, f135_local3, f135_local3 + f135_local2 ) --[[ @ 0]]
		f135_arg0._initializing = nil --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.HandleWarZoneIcon = function ( f136_arg0, f136_arg1 )
	local f136_local0 = DataSources.WarData.getModel( f136_arg1 ) --[[ @ 0]]
	local f136_local1 = f136_local0:create( "currentZoneIcon" ) --[[ @ 0]]
	f136_local1:set( "$blacktransparent" ) --[[ @ 0]]
	local f136_local2 = f136_local0:create( "currentZoneTier" ) --[[ @ 0]]
	f136_local2:set( 0 ) --[[ @ 0]]
	local f136_local3 = f136_local0:create( "currentZoneIconFlashing" ) --[[ @ 0]]
	f136_local3:set( false ) --[[ @ 0]]
	local f136_local4 = function ()
		local f137_local0 = Engine[@"CurrentGameTime"]() / 1000 - f136_local0.currentZoneStartTime:get() --[[ @ 0]]
		local f137_local1 = f136_local0.currentZone:get() --[[ @ 0]]
		local f137_local2 = nil --[[ @ 0]]
		local f137_local3 = false --[[ @ 0]]
		if not DataSources.WarData.WarInfo then
			DataSources.WarData.Initialize( f136_arg1 ) --[[ @ 0]]
		end
		if DataSources.WarData.WarInfo.zoneInfo[f137_local1] == nil then
			f136_local1:set( "$blacktransparent" ) --[[ @ 0]]
			f136_local3:set( false ) --[[ @ 0]]
		else
			for f137_local10, f137_local11 in ipairs( DataSources.WarData.WarInfo.zoneInfo[f137_local1].tiers ) --[[ @ 0]] do
				if f137_local11.time == 0 or f137_local0 < f137_local11.time then
					f136_local1:set( DataSources.WarData.WarInfo.tierInfo[f137_local10].icon ) --[[ @ 0]]
					f136_local2:set( f137_local10 ) --[[ @ 0]]
					local f137_local7 = f136_local3 --[[ @ 0]]
					local f137_local8 = f137_local7 --[[ @ 0]]
					f137_local7 = f137_local7.set --[[ @ 0]]
					local f137_local9 --[[ @ 0]]
					if f137_local11.time <= 0 or f137_local11.time - f137_local0 >= 10 then
					
					else
						f137_local9 = true --[[ @ 0]]
					end
					f137_local9 = false --[[ @ 0]]
				end
			end
		end
	end
	 --[[ @ 0]]
	f136_arg0:addElement( LUI.UITimer.newElementTimer( 500, false, function ()
		f136_local4() --[[ @ 0]]
	end ) ) --[[ @ 0]]
	f136_arg0:subscribeToModel( f136_local0.currentZoneStartTime, f136_local4, true ) --[[ @ 0]]
	f136_arg0:subscribeToModel( f136_local0.currentZoneStartTime, f136_local4, true ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.FullscreenViewportStart = function ( f139_arg0, f139_arg1 )
	f139_arg0:setScale( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.FullscreenViewportStop = function ( f140_arg0, f140_arg1 )
	if f140_arg0.scale ~= nil then
		f140_arg0:setScale( f140_arg0.scale ) --[[ @ 0]]
	else
		f140_arg0:setScale( 1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ApplySplitscreenScale = function ( f141_arg0, f141_arg1 )
	f141_arg0.scale = 1 --[[ @ 0]]
	if Engine[@"IsInGame"]() and 1 < Engine[@"SplitscreenNum"]() then
		f141_arg0.scale = f141_arg1 --[[ @ 0]]
		f141_arg0:setScale( f141_arg1 ) --[[ @ 0]]
	end
	f141_arg0:registerEventHandler( "fullscreen_viewport_start", CoD.HUDUtility.FullscreenViewportStart ) --[[ @ 0]]
	f141_arg0:registerEventHandler( "fullscreen_viewport_stop", CoD.HUDUtility.FullscreenViewportStop ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IsFogOfWarEnabled = function ( f142_arg0 )
	local f142_local0 --[[ @ 0]]
	if Engine[@"GetGametypeSetting"]( @"hash_5DE81C0DEB6C0397" ) ~= 1 then
		f142_local0 = IsDvarValueEqualTo( "ui_fogOfWar", true ) --[[ @ 0]]
	else
		f142_local0 = true --[[ @ 0]]
	end
	return f142_local0
end
 --[[ @ 0]]
CoD.HUDUtility.IsRotatingMinimapEnabled = function ( f143_arg0 )
	local f143_local0 --[[ @ 0]]
	if Engine[@"GetProfileVarInt"]( f143_arg0, "minimapMode" ) ~= CoD.HUDUtility.MinimapMode.MODE_ROTATING then
		f143_local0 = not CoD.isWarzone --[[ @ 0]]
	else
		f143_local0 = true --[[ @ 0]]
	end
	return f143_local0
end
 --[[ @ 0]]
CoD.HUDUtility.IsAnyGameType = function ( f144_arg0, ... )
	local f144_local0 = Dvar[@"g_gametype"]:get() --[[ @ 0]]
	for f144_local4, f144_local5 in ipairs( {
		n = select( "#", ... ),
		...
	} ) --[[ @ 0]] do
		if f144_local5 == f144_local0 then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.SetUIActive = function ( f145_arg0, f145_arg1 )
	Engine[@"SetUIActive"]( f145_arg0, f145_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ClearHealthBarDelayTimer = function ( f146_arg0 )
	if f146_arg0.__healthBarAnimDelay then
		f146_arg0.__healthBarAnimDelay:close() --[[ @ 0]]
		f146_arg0.__healthBarAnimDelay = nil --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ClearHealthBarLossPulseTimers = function ( f147_arg0 )
	if f147_arg0.__healthBarLossAnimTimers then
		for f147_local3, f147_local4 in ipairs( LUI.ShallowCopy( f147_arg0.__healthBarLossAnimTimers ) ) --[[ @ 0]] do
			f147_local4:close() --[[ @ 0]]
		end
		f147_arg0.__healthBarLossAnimTimers = {} --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ImmediatelyPlayHealthBarLossPulseTimers = function ( f148_arg0 )
	if f148_arg0.__healthBarLossAnimTimers then
		for f148_local3, f148_local4 in ipairs( LUI.ShallowCopy( f148_arg0.__healthBarLossAnimTimers ) ) --[[ @ 0]] do
			f148_local4:processNow() --[[ @ 0]]
		end
		f148_arg0.__healthBarLossAnimTimers = {} --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.UpdatePlayerHealthBar = function ( f149_arg0, f149_arg1, f149_arg2 )
	return function ()
		local f150_local0 = function ( f151_arg0, f151_arg1, f151_arg2 )
			local f151_local0 = LUI.getTableFromPath( f151_arg0, f149_arg0 ) --[[ @ 0]]
			if f151_local0 then
				f151_local0:setShaderVector( 1, f151_arg1, f151_arg2, 0, 0 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		local f150_local1 = math.max( CoD.SafeGetModelValue( f149_arg0:getModel(), "health.healthValue" ) or 0, CoD.SafeGetModelValue( f149_arg0:getModel(), "health.maxHealth" ) or 0, CoD.SafeGetModelValue( f149_arg0:getModel(), "health.maxHealthRegen" ) or 0 ) --[[ @ 0]]
		if f150_local1 > 0 then
			local f150_local2 = CoD.HealthUtility.GetSpawnHealthPerBar( nil, f150_local1 ) --[[ @ 0]]
			f150_local0( "HealthBar.HealthBackground", f150_local2, 1 ) --[[ @ 0]]
			f150_local0( "HealthBar.HealthFill", f150_local2, 1 ) --[[ @ 0]]
			f150_local0( "HealthBar.LowHealthFill", f150_local2, 1 ) --[[ @ 0]]
			f150_local0( "HealthBar.CleanseBar", f150_local2, 1 ) --[[ @ 0]]
			f150_local0( "HealthBar.CleanseBarBG", f150_local2, 1 ) --[[ @ 0]]
			f150_local0( "HealthBar.Backer", f150_local2, 1 ) --[[ @ 0]]
		else
			f150_local0( "HealthBar.HealthBackground", 0, 0, 0, 0 ) --[[ @ 0]]
			f150_local0( "HealthBar.HealthFill", 0, 0, 0, 0 ) --[[ @ 0]]
			f150_local0( "HealthBar.LowHealthFill", 0, 0, 0, 0 ) --[[ @ 0]]
			f150_local0( "HealthBar.CleanseBar", 0, 0, 0, 0 ) --[[ @ 0]]
			f150_local0( "HealthBar.CleanseBarBG", 0, 0, 0, 0 ) --[[ @ 0]]
			f150_local0( "HealthBar.Backer", 0, 0, 0, 0 ) --[[ @ 0]]
		end
	end
	
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateHealthValue = function ( f152_arg0, f152_arg1, f152_arg2 )
	return function ( f153_arg0, f153_arg1, f153_arg2, f153_arg3 )
		local f153_local0 = f153_arg0:get() or 0 --[[ @ 0]]
		local f153_local1 = f153_arg1:get() or 0 --[[ @ 0]]
		local f153_local2 = math.max( f153_local0, f153_local1, f153_arg2:get() or 0 ) --[[ @ 0]]
		if CoD.isZombie then
			f153_local1 = f153_local2 --[[ @ 0]]
		end
		if not f152_arg0.__healthBarLossAnimTimers then
			f152_arg0.__healthBarLossAnimTimers = {} --[[ @ 0]]
		end
		CoD.HUDUtility.ClearHealthBarDelayTimer( f152_arg0 ) --[[ @ 0]]
		local f153_local3 --[[ @ 0]]
		if f153_local0 ~= 0 then
			f153_local3 = f153_arg3:get() --[[ @ 0]]
			if not f153_local3 then
				f153_local3 = f152_arg0.isOverheadName --[[ @ 0]]
				if f153_local3 then
					f153_local3 = not f152_arg0:isOverheadNameRendering() --[[ @ 0]]
				end
			end
		else
			f153_local3 = true --[[ @ 0]]
		end
		if f153_local3 then
			CoD.HUDUtility.ClearHealthBarLossPulseTimers( f152_arg0 ) --[[ @ 0]]
		end
		local f153_local4 = false --[[ @ 0]]
		if f152_arg0.__lastHealth and not f153_local3 then
			local f153_local5 = f152_arg0.__lastHealth - f153_local0 --[[ @ 0]]
			if f153_local5 <= 0 then
				CoD.HUDUtility.ClearHealthBarLossPulseTimers( f152_arg0 ) --[[ @ 0]]
			else
				CoD.HUDUtility.ImmediatelyPlayHealthBarLossPulseTimers( f152_arg0 ) --[[ @ 0]]
				local f153_local6 = Dvar[@"hash_26B4CD2F5C8ADDBC"]:get() --[[ @ 0]]
				local f153_local7 = LUI.clamp( (f152_arg0.__lastHealth - f153_local1) / f153_local5, 0, 1 ) --[[ @ 0]]
				local f153_local8 = 1 - f153_local7 --[[ @ 0]]
				local f153_local9 = f153_local6 * f153_local7 --[[ @ 0]]
				f152_arg0.HealthBar.CleanseBar:beginAnimation( f153_local9, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
				if f153_local8 <= 0 or f153_local8 >= 1 then
					f153_local4 = false --[[ @ 0]]
				else
					f153_local4 = true --[[ @ 0]]
				end
				if f153_local4 then
					f152_arg0.__healthBarAnimDelay = LUI.UITimer.newElementTimer( f153_local9, true, function ()
						f152_arg0.HealthBar.HealthFill:beginAnimation( f153_local6 * f153_local8, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
						f152_arg0.HealthBar.HealthFill:setShaderVector( 2, 0, f153_local0 / f153_local2, 0, 1 ) --[[ @ 0]]
						if f152_arg0.HealthBar.LowHealthFill then
							f152_arg0.HealthBar.LowHealthFill:beginAnimation( f153_local6 * f153_local8, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
							f152_arg0.HealthBar.LowHealthFill:setShaderVector( 2, 0, f153_local0 / f153_local2, 0, 1 ) --[[ @ 0]]
						end
					end ) --[[ @ 0]]
					f152_arg0:addElement( f152_arg0.__healthBarAnimDelay ) --[[ @ 0]]
				else
					f152_arg0.HealthBar.HealthFill:beginAnimation( f153_local6, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
					if f152_arg0.HealthBar.LowHealthFill then
						f152_arg0.HealthBar.LowHealthFill:beginAnimation( f153_local6, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
					end
				end
				if f152_arg0.HealthBar.__playHealthBarLossPulse then
					local f153_local10 = CoD.HealthUtility.GetSpawnHealthPerBar( nil, f153_local2 ) --[[ @ 0]]
					local f153_local11 = 1 / f153_local10 --[[ @ 0]]
					local f153_local12 = Dvar[@"cg_healthperbar"]:get() --[[ @ 0]]
					local f153_local13 = math.ceil( f153_local0 / f153_local12 ) --[[ @ 0]]
					for f153_local14 = math.ceil( f152_arg0.__lastHealth / f153_local12 ) - 1 --[[ @ 0]], f153_local13, -1 do
						local f153_local17 = f153_local14 --[[ @ 0]]
						local f153_local18 = LUI.UITimer.newElementTimer( f153_local6 * (1 - (f153_local17 * f153_local12 - f153_local0) / (f152_arg0.__lastHealth - f153_local0)), true, function ()
							f152_arg0.HealthBar.__playHealthBarLossPulse( f153_local10, f153_local17 * f153_local11, (f153_local17 + 1) * f153_local11 ) --[[ @ 0]]
						end ) --[[ @ 0]]
						local f153_local19 = f153_local18.close --[[ @ 0]]
						f153_local18.close = function ()
							table.remove( f152_arg0.__healthBarLossAnimTimers, 1 ) --[[ @ 0]]
							f153_local19( f153_local18 ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						table.insert( f152_arg0.__healthBarLossAnimTimers, f153_local18 ) --[[ @ 0]]
						f152_arg0:addElement( f153_local18 ) --[[ @ 0]]
					end
				end
			end
		end
		if f153_local2 == 0 then
			f152_arg0.HealthBar.HealthFill:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
			if f152_arg0.HealthBar.LowHealthFill then
				f152_arg0.HealthBar.LowHealthFill:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
			end
		elseif f153_local1 < f153_local0 or f153_local4 then
			f152_arg0.HealthBar.HealthFill:setShaderVector( 2, 0, f153_local1 / f153_local2, 0, 1 ) --[[ @ 0]]
			if f152_arg0.HealthBar.LowHealthFill then
				f152_arg0.HealthBar.LowHealthFill:setShaderVector( 2, 0, f153_local1 / f153_local2, 0, 1 ) --[[ @ 0]]
			end
		else
			f152_arg0.HealthBar.HealthFill:setShaderVector( 2, 0, f153_local0 / f153_local2, 0, 1 ) --[[ @ 0]]
			if f152_arg0.HealthBar.LowHealthFill then
				f152_arg0.HealthBar.LowHealthFill:setShaderVector( 2, 0, f153_local0 / f153_local2, 0, 1 ) --[[ @ 0]]
			end
		end
		local f153_local5 = 1 - (f153_local2 - f153_local1) / f153_local2 --[[ @ 0]]
		f152_arg0.HealthBar.CleanseBarBG:setShaderVector( 2, f153_local5, 1, 0, 1 ) --[[ @ 0]]
		if f153_local0 < f153_local1 then
			f152_arg0.HealthBar.CleanseBar:setShaderVector( 2, f153_local5, f153_local5, 0, 1 ) --[[ @ 0]]
		else
			f152_arg0.HealthBar.CleanseBar:setShaderVector( 2, f153_local5, 1 - (f153_local2 - f153_local0) / f153_local2, 0, 1 ) --[[ @ 0]]
		end
		f152_arg0.__lastLastHealth = f152_arg0.__lastHealth --[[ @ 0]]
		f152_arg0.__lastHealth = f153_local0 --[[ @ 0]]
	end
	
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateHealthWoundBar = function ( f157_arg0, f157_arg1, f157_arg2 )
	return function ( f158_arg0 )
		local f158_local0 = CoD.SafeGetModelValue( f157_arg0:getModel(), "health.healthValue" ) --[[ @ 0]]
		local f158_local1 = CoD.SafeGetModelValue( f157_arg0:getModel(), "health.maxHealth" ) --[[ @ 0]]
		local f158_local2 = CoD.SafeGetModelValue( f157_arg0:getModel(), "health.maxHealthRegen" ) --[[ @ 0]]
		if not f158_local2 or f158_local2 == 0 or not f158_local1 then
			f157_arg0.HealthBar.WoundBar:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
			f157_arg0.HealthBar.HealthBackground:setShaderVector( 2, 0, 1, 0, 1 ) --[[ @ 0]]
		else
			if f158_local2 < f158_local1 then
				if f157_arg0.__lastLastHealth and f157_arg0.__lastLastHealth < f158_local1 then
					f157_arg0.HealthBar.WoundBar:setShaderVector( 0, 1 - (f158_local1 - f157_arg0.__lastLastHealth) / f158_local1, 1, 0, 0 ) --[[ @ 0]]
				end
				f157_arg0.HealthBar.WoundBar:beginAnimation( Dvar[@"hash_26B4CD2F5C8ADDBC"]:get(), Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
			end
			local f158_local3 = 1 - (f158_local1 - f158_local2) / f158_local1 --[[ @ 0]]
			f157_arg0.HealthBar.WoundBar:setShaderVector( 0, f158_local3, 1, 0, 0 ) --[[ @ 0]]
			f157_arg0.HealthBar.HealthBackground:setShaderVector( 2, 0, f158_local3, 0, 1 ) --[[ @ 0]]
		end
		f157_arg0.__lastWoundHealth = f158_local0 --[[ @ 0]]
	end
	
end
 --[[ @ 0]]
CoD.HUDUtility.SetupHealthBarAnimCancel = function ( f159_arg0, f159_arg1, f159_arg2 )
	return function ( f160_arg0 )
		if f160_arg0:get() then
			f159_arg0.HealthBar.HealthFill:beginAnimation( 0 ) --[[ @ 0]]
			if f159_arg0.HealthBar.LowHealthFill then
				f159_arg0.HealthBar.LowHealthFill:beginAnimation( 0 ) --[[ @ 0]]
			end
			CoD.HUDUtility.ClearHealthBarLossPulseTimers( f159_arg0 ) --[[ @ 0]]
			CoD.HUDUtility.ClearHealthBarDelayTimer( f159_arg0 ) --[[ @ 0]]
			f160_arg0:set( false ) --[[ @ 0]]
		end
	end
	
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateClientHealth = function ( f161_arg0, f161_arg1 )
	f161_arg0:linkToElementModel( f161_arg0, "clientNum", true, function ( model )
		local f162_local0 = model:get() --[[ @ 0]]
		if f161_arg0.__selfClientOnly and f162_local0 ~= Engine[@"GetClientNum"]( f161_arg1 ) then
			return 
		elseif f162_local0 == nil or f162_local0 < 0 or f162_local0 >= LuaDefine.MAX_CLIENTS then
			return 
		end
		local f162_local1 = CoD.HUDUtility.UpdateHealthValue( f161_arg0, f161_arg1, f162_local0 ) --[[ @ 0]]
		local f162_local2 = CoD.HUDUtility.UpdatePlayerHealthBar( f161_arg0, f161_arg1, f162_local0 ) --[[ @ 0]]
		local f162_local3 = CoD.HUDUtility.UpdateHealthWoundBar( f161_arg0, f161_arg1, f162_local0 ) --[[ @ 0]]
		local f162_local4 = CoD.HUDUtility.SetupHealthBarAnimCancel( f161_arg0, f161_arg1, f162_local0 ) --[[ @ 0]]
		if f161_arg0.__clientHealthCustomSubscriptions then
			for f162_local8, f162_local9 in ipairs( f161_arg0.__clientHealthCustomSubscriptions ) --[[ @ 0]] do
				f161_arg0:removeSubscription( f162_local9 ) --[[ @ 0]]
			end
		end
		f161_arg0.__clientHealthCustomSubscriptions = {} --[[ @ 0]]
		local f162_local5 = Engine[@"hash_E4D2F32833CFA6C"]( f162_local0 ) --[[ @ 0]]
		f162_local5 = f162_local5:create( "health.healthValue" ) --[[ @ 0]]
		local f162_local6 = Engine[@"hash_E4D2F32833CFA6C"]( f162_local0 ) --[[ @ 0]]
		f162_local6 = f162_local6:create( "health.maxHealth" ) --[[ @ 0]]
		local f162_local7 = Engine[@"hash_E4D2F32833CFA6C"]( f162_local0 ) --[[ @ 0]]
		f162_local7 = f162_local7:create( "health.maxHealthRegen" ) --[[ @ 0]]
		local f162_local8 = Engine[@"hash_E4D2F32833CFA6C"]( f162_local0 ) --[[ @ 0]]
		f162_local8 = f162_local8:create( "characterIndex" ) --[[ @ 0]]
		local f162_local9 = Engine[@"hash_E4D2F32833CFA6C"]( f162_local0 ) --[[ @ 0]]
		f162_local9 = f162_local9:create( "cancelHealthBarAnim" ) --[[ @ 0]]
		table.insert( f161_arg0.__clientHealthCustomSubscriptions, f161_arg0:subscribeToModel( f162_local5, function ()
			if CoD.isWarzone then
				local f163_local0 = f162_local5:get() or 0 --[[ @ 0]]
				local f163_local1 = f162_local7:get() or 0 --[[ @ 0]]
				local f163_local2 --[[ @ 0]]
				if f163_local1 < 0 or f163_local1 >= f163_local0 then
					f163_local2 = false --[[ @ 0]]
				else
					f163_local2 = true --[[ @ 0]]
				end
				if f163_local2 or f161_arg0.__lastHealthBoosted then
					f162_local2() --[[ @ 0]]
				end
				f161_arg0.__lastHealthBoosted = f163_local2 --[[ @ 0]]
			end
			f162_local1( f162_local5, f162_local6, f162_local7, f162_local9 ) --[[ @ 0]]
		end, true ) ) --[[ @ 0]]
		table.insert( f161_arg0.__clientHealthCustomSubscriptions, f161_arg0:subscribeToModel( f162_local6, function ()
			f162_local1( f162_local5, f162_local6, f162_local7, f162_local9 ) --[[ @ 0]]
		end, true ) ) --[[ @ 0]]
		table.insert( f161_arg0.__clientHealthCustomSubscriptions, f161_arg0:subscribeToModel( f162_local7, function ()
			if CoD.isWarzone then
				local f165_local0 = f162_local5:get() or 0 --[[ @ 0]]
				local f165_local1 = f162_local7:get() or 0 --[[ @ 0]]
				local f165_local2 = f161_arg0 --[[ @ 0]]
				local f165_local3 --[[ @ 0]]
				if f165_local1 < 0 or f165_local1 >= f165_local0 then
					f165_local3 = false --[[ @ 0]]
				else
					f165_local3 = true --[[ @ 0]]
				end
				f165_local2.__lastHealthBoosted = f165_local3 --[[ @ 0]]
			end
			f162_local2() --[[ @ 0]]
			f162_local3( f162_local7 ) --[[ @ 0]]
			f162_local1( f162_local5, f162_local6, f162_local7, f162_local9 ) --[[ @ 0]]
		end, true ) ) --[[ @ 0]]
		table.insert( f161_arg0.__clientHealthCustomSubscriptions, f161_arg0:subscribeToModel( f162_local9, function ()
			f162_local4( f162_local9 ) --[[ @ 0]]
		end, true ) ) --[[ @ 0]]
		table.insert( f161_arg0.__clientHealthCustomSubscriptions, f161_arg0:subscribeToModel( f162_local8, function ( f167_arg0 )
			f162_local2() --[[ @ 0]]
			f162_local3( f162_local7 ) --[[ @ 0]]
			f162_local1( f162_local5, f162_local6, f162_local7, f162_local9 ) --[[ @ 0]]
		end, true ) ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateSelfClientHealth = function ( f168_arg0, f168_arg1 )
	f168_arg0.__selfClientOnly = true --[[ @ 0]]
	CoD.HUDUtility.UpdateClientHealth( f168_arg0, f168_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.CharacterPortraitStates = LuaEnum.createEnum( "CHARACTER_PORTRAIT_CRITICAL", "CHARACTER_PORTRAIT_NORMAL", "CHARACTER_PORTRAIT_WOUNDED", "CHARACTER_PORTRAIT_BUFFED", "CHARACTER_PORTRAIT_HEALING" ) --[[ @ 0]]
CoD.HUDUtility.GetCachedBloodSettings = function ()
	if not CoD.HUDUtility.CachedBloodSettings then
		local f169_local0 = @"blood_settings" --[[ @ 0]]
		if IsGametypeSettingsValue( "hardcoreMode", 1 ) then
			f169_local0 = @"hardcore_blood_settings" --[[ @ 0]]
		end
		CoD.HUDUtility.CachedBloodSettings = Engine[@"hash_2E00B2F29271C60B"]( f169_local0 ) --[[ @ 0]]
	end
	return CoD.HUDUtility.CachedBloodSettings
end
 --[[ @ 0]]
CoD.HUDUtility.IsPropHuntHealthCritical = function ( f170_arg0, f170_arg1 )
	local f170_local0 = f170_arg0:getModel() --[[ @ 0]]
	return (f170_local0["health.healthValue"]:get() or 0) <= (f170_local0["health.maxHealth"]:get() or 0) * 0
end
 --[[ @ 0]]
CoD.HUDUtility.IsCharacterInCriticalState = function ( f171_arg0, f171_arg1 )
	if CoD.HUDUtility.IsGameTypeEqualToString( "prop" ) then
		return CoD.HUDUtility.IsPropHuntHealthCritical( f171_arg0, f171_arg1 )
	else
		local f171_local0 = f171_arg0:getModel() --[[ @ 0]]
		local f171_local1 = CoD.HUDUtility.GetCachedBloodSettings() --[[ @ 0]]
		if f171_local0 and f171_local1 then
			return (f171_local0["health.healthValue"]:get() or 0) <= (f171_local1[@"hash_632A671F0178BB3F"] or 0)
		else
			return false
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsCharacterInWoundedStated = function ( f172_arg0, f172_arg1 )
	local f172_local0 = f172_arg0:getModel() --[[ @ 0]]
	if f172_local0 then
		return (f172_local0["health.maxHealthRegen"]:get() or 0) < (f172_local0["health.maxHealth"]:get() or 0)
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsCharacterInBuffedState = function ( f173_arg0, f173_arg1 )
	local f173_local0 = f173_arg0:getModel() --[[ @ 0]]
	if f173_local0 then
		return (f173_local0["health.maxHealth"]:get() or 0) < (f173_local0["health.maxHealthRegen"]:get() or 0)
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsCharacterInHealingState = function ( f174_arg0, f174_arg1 )
	local f174_local0 = DataSources.PlayerAbilities.getModel( f174_arg1 ) --[[ @ 0]]
	if f174_local0.playerGadget1 then
		return f174_local0.playerGadget1.state:get() == Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"]
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.DivideByPlayerMaxHealth = function ( f175_arg0, f175_arg1, f175_arg2, f175_arg3, f175_arg4, f175_arg5, f175_arg6 )
	if f175_arg0.health then
		local f175_local0 = f175_arg0.health.maxHealth --[[ @ 0]]
		local f175_local1 = f175_arg0.health.maxHealth:get() --[[ @ 0]]
	end
	local f175_local2 = f175_local0 and f175_local1 or 0 --[[ @ 0]]
	if f175_arg0.health then
		local f175_local3 = f175_arg0.health.maxHealthRegen --[[ @ 0]]
		local f175_local4 = f175_arg0.health.maxHealthRegen:get() --[[ @ 0]]
	end
	local f175_local5 = math.max( f175_local2, f175_local3 and f175_local4 or 0 ) --[[ @ 0]]
	if f175_local5 and f175_local5 ~= 0 then
		if f175_arg2 == 1 then
			f175_arg3 = f175_arg3 / f175_local5 --[[ @ 0]]
		elseif f175_arg2 == 2 then
			f175_arg4 = f175_arg4 / f175_local5 --[[ @ 0]]
		elseif f175_arg2 == 3 then
			f175_arg5 = f175_arg5 / f175_local5 --[[ @ 0]]
		elseif f175_arg2 == 4 then
			f175_arg6 = f175_arg6 / f175_local5 --[[ @ 0]]
		end
	end
	return f175_arg3, f175_arg4, f175_arg5, f175_arg6
end
 --[[ @ 0]]
CoD.HUDUtility.InitHealthBoostNotification = function ( f176_arg0, f176_arg1, f176_arg2, f176_arg3, f176_arg4 )
	local f176_local0 = f176_arg4.__defaultWidth --[[ @ 0]]
	local f176_local1 = f176_arg4.__defaultHeight --[[ @ 0]]
	f176_arg0:linkToElementModel( f176_arg0, "clientNum", true, function ( model )
		local f177_local0 = model:get() --[[ @ 0]]
		if f177_local0 < 0 or f177_local0 >= LuaDefine.MAX_CLIENTS then
			return 
		elseif f176_arg1.__healthBoostNotificationCustomSubscriptions then
			for f177_local4, f177_local5 in ipairs( f176_arg1.__healthBoostNotificationCustomSubscriptions ) --[[ @ 0]] do
				f176_arg1:removeSubscription( f177_local5 ) --[[ @ 0]]
			end
		end
		f176_arg1.__healthBoostNotificationCustomSubscriptions = {} --[[ @ 0]]
		f176_arg1.__lastMaxHealthRegen = 0 --[[ @ 0]]
		local f177_local1 = Engine[@"hash_E4D2F32833CFA6C"]( f177_local0 ) --[[ @ 0]]
		f177_local1 = f177_local1:create( "health.maxHealth" ) --[[ @ 0]]
		local f177_local2 = Engine[@"hash_E4D2F32833CFA6C"]( f177_local0 ) --[[ @ 0]]
		f177_local2 = f177_local2:create( "health.maxHealthRegen" ) --[[ @ 0]]
		local f177_local3 = function ()
			local f178_local0 = f177_local1:get() or 0 --[[ @ 0]]
			local f178_local1 = f177_local2:get() or 0 --[[ @ 0]]
			local f178_local2 = f178_local1 - f176_arg1.__lastMaxHealthRegen --[[ @ 0]]
			if f178_local0 < f178_local1 and f178_local2 > 0 then
				local f178_local3 = f176_arg4.new( f176_arg3, f176_arg2, 0, 0, 0, f176_local0, 0, 0, 0, f176_local1 ) --[[ @ 0]]
				if f178_local3.Text then
					f178_local3.Text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6A0F614541A9DE14", f178_local2 ) ) --[[ @ 0]]
				end
				f178_local3:registerEventHandler( "clip_over", function ( element, event )
					element:close() --[[ @ 0]]
				end ) --[[ @ 0]]
				f178_local3:playClip( "DefaultClip" ) --[[ @ 0]]
				f176_arg1:addElement( f178_local3 ) --[[ @ 0]]
				f176_arg3:sendInitializationEvents( f176_arg2, f178_local3 ) --[[ @ 0]]
			end
			f176_arg1.__lastMaxHealthRegen = f178_local1 --[[ @ 0]]
		end
		 --[[ @ 0]]
		if not Engine[@"IsVisibilityBitSet"]( f176_arg2, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) and Engine[@"GetClientNum"]( f176_arg2 ) == f177_local0 then
			table.insert( f176_arg1.__healthBoostNotificationCustomSubscriptions, f176_arg1:subscribeToModel( f177_local1, function ()
				f177_local3() --[[ @ 0]]
			end, true ) ) --[[ @ 0]]
			table.insert( f176_arg1.__healthBoostNotificationCustomSubscriptions, f176_arg1:subscribeToModel( f177_local2, function ()
				f177_local3() --[[ @ 0]]
			end, true ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupCharacterPortrait = function ( f182_arg0, f182_arg1 )
	f182_arg0:linkToElementModel( f182_arg0, "clientNum", true, function ( model )
		local f183_local0 = model:get() --[[ @ 0]]
		if f183_local0 < 0 or f183_local0 >= LuaDefine.MAX_CLIENTS then
			return 
		else
			f182_arg0:setModel( Engine[@"hash_E4D2F32833CFA6C"]( f183_local0 ), f182_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSources.CTFLevelInfo = {
	getModel = function ( f184_arg0 )
		local f184_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f184_local0 = f184_local0:create( "CTFLevelInfo" ) --[[ @ 0]]
		f184_local0:create( "flagCarrierAllies" ) --[[ @ 0]]
		f184_local0:create( "flagCarrierAxis" ) --[[ @ 0]]
		f184_local0:create( "flagStateAllies" ) --[[ @ 0]]
		f184_local0:create( "flagStateAxis" ) --[[ @ 0]]
		f184_local0:create( "bestTimeAllies" ) --[[ @ 0]]
		f184_local0:create( "bestTimeAxis" ) --[[ @ 0]]
		return f184_local0
	end
} --[[ @ 0]]
DataSources.CharacterSelection = {
	getModel = function ( f185_arg0 )
		local f185_local0 = Engine[@"GetModelForController"]( f185_arg0 ) --[[ @ 0]]
		return f185_local0:create( "CharacterSelection" )
	end
} --[[ @ 0]]
DataSources.WaypointObjectiveList = DataSourceHelpers.ListSetup( "WaypointObjectiveList", function ( f186_arg0 )
	local f186_local0 = {} --[[ @ 0]]
	local f186_local1 = function ( f187_arg0, f187_arg1 )
		return f187_arg0.properties.objId < f187_arg1.properties.objId
	end
	 --[[ @ 0]]
	if not CoD.perController[f186_arg0].waypointObjectiveList then
		CoD.perController[f186_arg0].waypointObjectiveList = {} --[[ @ 0]]
	end
	for f186_local5, f186_local6 in pairs( CoD.perController[f186_arg0].waypointObjectiveList ) --[[ @ 0]] do
		table.insert( f186_local0, {
			models = {
				objectiveModel = f186_local6
			},
			properties = {
				objective = CoD.HUDUtility.GetCachedObjective( Engine[@"GetObjectiveName"]( f186_arg0, f186_local5 ) ),
				objId = f186_local5
			}
		} ) --[[ @ 0]]
	end
	table.sort( f186_local0, f186_local1 ) --[[ @ 0]]
	return f186_local0
end, nil, nil, function ( f188_arg0, f188_arg1, f188_arg2 )
	if not f188_arg1.__waypointObjectiveListCustomSubscriptions then
		f188_arg1.__waypointObjectiveListCustomSubscriptions = true --[[ @ 0]]
		f188_arg1:subscribeToModel( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f188_arg0 ), "newObjective" ), function ( model )
			local f189_local0 = model:get() --[[ @ 0]]
			if CoD.HUDUtility.WaypointListObjectiveTypes[Engine[@"GetObjectiveName"]( f188_arg0, f189_local0 )] then
				local f189_local1 = CoD.perController[f188_arg0].waypointObjectiveList --[[ @ 0]]
				local f189_local2 = Engine[@"GetModelForController"]( f188_arg0 ) --[[ @ 0]]
				f189_local1[f189_local0] = f189_local2["objective" .. f189_local0] --[[ @ 0]]
				f188_arg1:updateDataSource( false, false ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
end ) --[[ @ 0]]
DataSources.WaypointObjectiveHardpoint = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	newObjectiveSubscriptions = {},
	prepare = function ( f190_arg0, f190_arg1, f190_arg2 )
		if not DataSources.WaypointObjectiveHardpoint.preparedForController then
			DataSources.WaypointObjectiveHardpoint.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.WaypointObjectiveHardpoint.subscriptions[f190_arg0] then
			DataSources.WaypointObjectiveHardpoint.subscriptions[f190_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.WaypointObjectiveHardpoint.subscriptions[f190_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.WaypointObjectiveHardpoint.preparedForController[f190_arg0] = true --[[ @ 0]]
		local f190_local0 = Engine[@"GetModelForController"]( f190_arg0 ) --[[ @ 0]]
		f190_local0 = f190_local0:create( "WaypointObjectiveHardpoint" ) --[[ @ 0]]
		f190_local0:create( "objectiveModel" ) --[[ @ 0]]
		if not CoD.perController[f190_arg0].waypointObjectiveList then
			CoD.perController[f190_arg0].waypointObjectiveList = {} --[[ @ 0]]
			if CoD.HUDUtility.WaypointListObjectiveTypes[Engine[@"GetObjectiveName"]( f190_arg0, 0 )] then
				local f190_local1 = f190_local0.objectiveModel --[[ @ 0]]
				local f190_local2 = f190_local1 --[[ @ 0]]
				f190_local1 = f190_local1.set --[[ @ 0]]
				local f190_local3 = Engine[@"GetModelForController"]( f190_arg0 ) --[[ @ 0]]
				f190_local1( f190_local2, f190_local3.objective0 ) --[[ @ 0]]
			end
		end
		for f190_local4, f190_local5 in pairs( CoD.perController[f190_arg0].waypointObjectiveList ) --[[ @ 0]] do
			f190_local0.objectiveModel:set( f190_local5 ) --[[ @ 0]]
			DataSources.WaypointObjectiveHardpoint.subscriptions[f190_arg0]:subscribeToModel( f190_local5.state, function ( model )
				if model:get() == Enum[@"objectiveState_t"][@"hash_754563D60375E060"] then
					f190_local0.objectiveModel:set( f190_local5 ) --[[ @ 0]]
					Engine[@"ForceNotifyModelSubscriptions"]( f190_local0 ) --[[ @ 0]]
				end
			end, false ) --[[ @ 0]]
		end
		if not DataSources.WaypointObjectiveHardpoint.newObjectiveSubscriptions[f190_arg0] then
			DataSources.WaypointObjectiveHardpoint.newObjectiveSubscriptions[f190_arg0] = LUI.UIElement.new() --[[ @ 0]]
			DataSources.WaypointObjectiveHardpoint.newObjectiveSubscriptions[f190_arg0]:subscribeToModel( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f190_arg0 ), "newObjective" ), function ( model )
				local f192_local0 = model:get() --[[ @ 0]]
				if CoD.HUDUtility.WaypointListObjectiveTypes[Engine[@"GetObjectiveName"]( f190_arg0, f192_local0 )] then
					local f192_local1 = CoD.perController[f190_arg0].waypointObjectiveList --[[ @ 0]]
					local f192_local2 = Engine[@"GetModelForController"]( f190_arg0 ) --[[ @ 0]]
					f192_local1[f192_local0] = f192_local2["objective" .. f192_local0] --[[ @ 0]]
					DataSources.WaypointObjectiveHardpoint.preparedForController[f190_arg0] = false --[[ @ 0]]
					DataSources.WaypointObjectiveHardpoint.prepare( f190_arg0 ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
	end,
	getModel = function ( f193_arg0 )
		if not DataSources.WaypointObjectiveHardpoint.preparedForController or not DataSources.WaypointObjectiveHardpoint.preparedForController[f193_arg0] then
			DataSources.WaypointObjectiveHardpoint.prepare( f193_arg0 ) --[[ @ 0]]
		end
		local f193_local0 = Engine[@"GetModelForController"]( f193_arg0 ) --[[ @ 0]]
		return f193_local0:create( "WaypointObjectiveHardpoint" )
	end
} --[[ @ 0]]
DataSources.WaypointObjectiveSDDem = {
	preparedForController = {},
	newObjectiveSubscriptions = {},
	waypointObjectiveModelA = nil,
	waypointObjectiveModelB = nil,
	prepare = function ( f194_arg0, f194_arg1, f194_arg2 )
		if not DataSources.WaypointObjectiveSDDem.preparedForController then
			DataSources.WaypointObjectiveSDDem.preparedForController = {} --[[ @ 0]]
		end
		DataSources.WaypointObjectiveSDDem.preparedForController[f194_arg0] = true --[[ @ 0]]
		local f194_local0 = Engine[@"GetModelForController"]( f194_arg0 ) --[[ @ 0]]
		f194_local0 = f194_local0:create( "WaypointObjectiveSDDem" ) --[[ @ 0]]
		local f194_local1 = DataSources.WaypointObjectiveSDDem.waypointObjectiveModelA --[[ @ 0]]
		local f194_local2 = DataSources.WaypointObjectiveSDDem.waypointObjectiveModelB --[[ @ 0]]
		if not f194_local1 then
			local f194_local3 = Engine[@"GetModelForController"]( f194_arg0 ) --[[ @ 0]]
			f194_local1 = f194_local3.objective0 --[[ @ 0]]
		end
		local f194_local3 = f194_local0:create( "waypointObjectiveA" ) --[[ @ 0]]
		f194_local3 = f194_local3:create( "objectiveModel" ) --[[ @ 0]]
		if f194_local3:set( f194_local1 ) then
			Engine[@"ForceNotifyModelSubscriptions"]( f194_local0.waypointObjectiveA ) --[[ @ 0]]
		end
		if not f194_local2 then
			f194_local3 = Engine[@"GetModelForController"]( f194_arg0 ) --[[ @ 0]]
			f194_local2 = f194_local3.objective0 --[[ @ 0]]
		end
		f194_local3 = f194_local0:create( "waypointObjectiveB" ) --[[ @ 0]]
		f194_local3 = f194_local3:create( "objectiveModel" ) --[[ @ 0]]
		if f194_local3:set( f194_local2 ) then
			Engine[@"ForceNotifyModelSubscriptions"]( f194_local0.waypointObjectiveB ) --[[ @ 0]]
		end
		if not DataSources.WaypointObjectiveSDDem.newObjectiveSubscriptions[f194_arg0] then
			DataSources.WaypointObjectiveSDDem.newObjectiveSubscriptions[f194_arg0] = LUI.UIElement.new() --[[ @ 0]]
			DataSources.WaypointObjectiveSDDem.newObjectiveSubscriptions[f194_arg0]:subscribeToModel( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f194_arg0 ), "newObjective" ), function ( model )
				local f195_local0 = model:get() --[[ @ 0]]
				local f195_local1 = Engine[@"GetObjectiveName"]( f194_arg0, f195_local0 ) --[[ @ 0]]
				if CoD.HUDUtility.SDDemObjectiveTypes[f195_local1] then
					local f195_local2 = Engine[@"GetModelForController"]( f194_arg0 ) --[[ @ 0]]
					f195_local2 = f195_local2["objective" .. f195_local0] --[[ @ 0]]
					if not f195_local2.objId then
						local f195_local3 = f195_local2:create( "objId" ) --[[ @ 0]]
						f195_local3:set( f195_local0 ) --[[ @ 0]]
					end
					if CoD.HUDUtility.SDDemObjectiveTypes[f195_local1] == "a" then
						DataSources.WaypointObjectiveSDDem.waypointObjectiveModelA = f195_local2 --[[ @ 0]]
					elseif CoD.HUDUtility.SDDemObjectiveTypes[f195_local1] == "b" then
						DataSources.WaypointObjectiveSDDem.waypointObjectiveModelB = f195_local2 --[[ @ 0]]
					end
					DataSources.WaypointObjectiveSDDem.preparedForController[f194_arg0] = false --[[ @ 0]]
					DataSources.WaypointObjectiveSDDem.prepare( f194_arg0 ) --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
	end,
	getModel = function ( f196_arg0 )
		if not DataSources.WaypointObjectiveSDDem.preparedForController or not DataSources.WaypointObjectiveSDDem.preparedForController[f196_arg0] then
			DataSources.WaypointObjectiveSDDem.prepare( f196_arg0 ) --[[ @ 0]]
		end
		local f196_local0 = Engine[@"GetModelForController"]( f196_arg0 ) --[[ @ 0]]
		return f196_local0:create( "WaypointObjectiveSDDem" )
	end
} --[[ @ 0]]
DataSources.BombTimer = {
	getModel = function ( f197_arg0 )
		local f197_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		return f197_local0:create( "bombTimer" )
	end
} --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "WeaponPickupAttachmentList", "hudItems.pickupAttachmentList", function ( f198_arg0, f198_arg1 )
	if not f198_arg0.count or not f198_arg0.count:get() then
		local f198_local0 = f198_arg0:create( "count" ) --[[ @ 0]]
		f198_local0:set( 0 ) --[[ @ 0]]
		for f198_local0 = 0 --[[ @ 0]], 5, 1 do
			local f198_local3 = f198_arg0:create( "attachment" .. f198_local0 ) --[[ @ 0]]
			f198_local3 = f198_local3:create( "image" ) --[[ @ 0]]
			if not f198_local3:get() then
				f198_local3:set( @"blacktransparent" ) --[[ @ 0]]
			end
		end
	end
end, false, {
	prepare = function ( f199_arg0, f199_arg1, f199_arg2 )
		if not f199_arg1._rootModel then
			f199_arg1._rootModel = DataSources.WeaponPickupAttachmentList.getModel( f199_arg0 ) --[[ @ 0]]
		end
	end,
	getCount = function ( f200_arg0 )
		return f200_arg0._rootModel.count:get()
	end,
	getItem = function ( f201_arg0, f201_arg1, f201_arg2 )
		return f201_arg1._rootModel["attachment" .. f201_arg2 - 1]
	end
} ) --[[ @ 0]]
CoD.HUDUtility.DivideByBombTimeLimit = function ( f202_arg0, f202_arg1, f202_arg2, f202_arg3, f202_arg4, f202_arg5 )
	local f202_local0 = 0 --[[ @ 0]]
	if IsCampaign() then
		local f202_local1 = DataSources.CPObjectiveTeams.getModel( f202_arg0 ) --[[ @ 0]]
		f202_local1 = f202_local1.myTeam --[[ @ 0]]
		if f202_local1 then
			f202_local1 = f202_local1:get() --[[ @ 0]]
		end
		local f202_local2 = f202_local1 and f202_local1.radialTimerMaxTime --[[ @ 0]]
		if f202_local2 then
			f202_local0 = (f202_local2:get() or 0) * 1000 --[[ @ 0]]
		end
	elseif IsMultiplayer() then
		local f202_local1 = Engine[@"GetCurrentGameType"]() --[[ @ 0]]
		if f202_local1 == "koth" then
			f202_local0 = Engine[@"GetGametypeSetting"]( @"autodestroytime" ) * 1000 --[[ @ 0]]
		elseif f202_local1 == "sd" then
			f202_local0 = Engine[@"GetGametypeSetting"]( @"bombtimer" ) * 1000 --[[ @ 0]]
		end
	end
	if f202_local0 == 0 then
		f202_local0 = 1 --[[ @ 0]]
	end
	if f202_arg1 == 1 then
		f202_arg2 = f202_arg2 / f202_local0 --[[ @ 0]]
	elseif f202_arg1 == 2 then
		f202_arg3 = f202_arg3 / f202_local0 --[[ @ 0]]
	elseif f202_arg1 == 3 then
		f202_arg4 = f202_arg4 / f202_local0 --[[ @ 0]]
	elseif f202_arg1 == 4 then
		f202_arg5 = f202_arg5 / f202_local0 --[[ @ 0]]
	end
	return f202_arg2, f202_arg3, f202_arg4, f202_arg5
end
 --[[ @ 0]]
DataSources.TeamRoundData = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f203_arg0, f203_arg1, f203_arg2 )
		if not DataSources.TeamRoundData.preparedForController then
			DataSources.TeamRoundData.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.TeamRoundData.subscriptions[f203_arg0] then
			DataSources.TeamRoundData.subscriptions[f203_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.TeamRoundData.subscriptions[f203_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.TeamRoundData.preparedForController[f203_arg0] = true --[[ @ 0]]
		local f203_local0 = CoD.TeamUtility.GetTeamID( f203_arg0 ) --[[ @ 0]]
		local f203_local1 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team1.roundsWon" ) --[[ @ 0]]
		local f203_local2 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team2.roundsWon" ) --[[ @ 0]]
		local f203_local3 = DataSources.Factions.getModel( f203_arg0 ) --[[ @ 0]]
		f203_local3 = f203_local3.actualTeam --[[ @ 0]]
		local f203_local4 = f203_local1:get() --[[ @ 0]]
		local f203_local5 = f203_local2:get() --[[ @ 0]]
		if f203_local0 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
			f203_local4 = f203_local2:get() --[[ @ 0]]
			f203_local5 = f203_local1:get() --[[ @ 0]]
		end
		local f203_local6 = Engine[@"GetGametypeSetting"]( @"roundwinlimit" ) --[[ @ 0]]
		if f203_local6 == 0 then
			f203_local6 = 1 --[[ @ 0]]
		end
		local f203_local7 = Engine[@"GetModelForController"]( f203_arg0 ) --[[ @ 0]]
		f203_local7 = f203_local7:create( "TeamRoundData" ) --[[ @ 0]]
		local f203_local8 = f203_local7:create( "playerTeamRoundsWon" ) --[[ @ 0]]
		f203_local8:set( f203_local4 ) --[[ @ 0]]
		f203_local8 = f203_local7:create( "enemyTeamRoundsWon" ) --[[ @ 0]]
		f203_local8:set( f203_local5 ) --[[ @ 0]]
		f203_local8 = f203_local7:create( "playerTeamRoundsWonPercent" ) --[[ @ 0]]
		f203_local8:set( f203_local4 / f203_local6 ) --[[ @ 0]]
		f203_local8 = f203_local7:create( "enemyTeamRoundsWonPercent" ) --[[ @ 0]]
		f203_local8:set( f203_local5 / f203_local6 ) --[[ @ 0]]
		DataSources.TeamRoundData.subscriptions[f203_arg0]:subscribeToModel( f203_local1, function ()
			DataSources.TeamRoundData.preparedForController[f203_arg0] = false --[[ @ 0]]
			DataSources.TeamRoundData.prepare( f203_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamRoundData.subscriptions[f203_arg0]:subscribeToModel( f203_local2, function ()
			DataSources.TeamRoundData.preparedForController[f203_arg0] = false --[[ @ 0]]
			DataSources.TeamRoundData.prepare( f203_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamRoundData.subscriptions[f203_arg0]:subscribeToModel( f203_local3, function ()
			DataSources.TeamRoundData.preparedForController[f203_arg0] = false --[[ @ 0]]
			DataSources.TeamRoundData.prepare( f203_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f207_arg0 )
		if not DataSources.TeamRoundData.preparedForController or not DataSources.TeamRoundData.preparedForController[f207_arg0] then
			DataSources.TeamRoundData.prepare( f207_arg0 ) --[[ @ 0]]
		end
		local f207_local0 = Engine[@"GetModelForController"]( f207_arg0 ) --[[ @ 0]]
		return f207_local0:create( "TeamRoundData" )
	end
} --[[ @ 0]]
DataSources.TeamLivesData = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f208_arg0, f208_arg1, f208_arg2 )
		if not DataSources.TeamLivesData.preparedForController then
			DataSources.TeamLivesData.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.TeamLivesData.subscriptions[f208_arg0] then
			DataSources.TeamLivesData.subscriptions[f208_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.TeamLivesData.subscriptions[f208_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.TeamLivesData.preparedForController[f208_arg0] = true --[[ @ 0]]
		local f208_local0 = CoD.CodCasterUtility.GetStandardOrCodCasterTeam( f208_arg0 ) --[[ @ 0]]
		local f208_local1 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team1.livesCount" ) --[[ @ 0]]
		local f208_local2 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team1.noRespawnsLeft" ) --[[ @ 0]]
		local f208_local3 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team2.livesCount" ) --[[ @ 0]]
		local f208_local4 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "hudItems.team2.noRespawnsLeft" ) --[[ @ 0]]
		local f208_local5 = DataSources.Factions.getModel( f208_arg0 ) --[[ @ 0]]
		f208_local5 = f208_local5.actualTeam --[[ @ 0]]
		local f208_local6 = f208_local1:get() --[[ @ 0]]
		local f208_local7 = f208_local2:get() ~= 0 --[[ @ 0]]
		local f208_local8 = f208_local3:get() --[[ @ 0]]
		local f208_local9 = f208_local4:get() ~= 0 --[[ @ 0]]
		local f208_local10 = Engine[@"GetGametypeSetting"]( @"teamnumlives" ) --[[ @ 0]]
		if f208_local10 == 0 then
			f208_local10 = 1 --[[ @ 0]]
		end
		local f208_local11 = Engine[@"GetModelForController"]( f208_arg0 ) --[[ @ 0]]
		f208_local11 = f208_local11:create( "TeamLivesData" ) --[[ @ 0]]
		local f208_local12 = Engine[@"CreateModel"]( f208_local11, "playerTeamLives" ) --[[ @ 0]]
		local f208_local13 = Engine[@"CreateModel"]( f208_local11, "playerTeamLivesPercent" ) --[[ @ 0]]
		local f208_local14 = Engine[@"CreateModel"]( f208_local11, "playerTeamNoRespawnsLeft" ) --[[ @ 0]]
		local f208_local15 = Engine[@"CreateModel"]( f208_local11, "enemyTeamLives" ) --[[ @ 0]]
		local f208_local16 = Engine[@"CreateModel"]( f208_local11, "enemyTeamLivesPercent" ) --[[ @ 0]]
		local f208_local17 = Engine[@"CreateModel"]( f208_local11, "enemyTeamNoRespawnsLeft" ) --[[ @ 0]]
		if f208_local0 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
			f208_local12:set( f208_local6 ) --[[ @ 0]]
			f208_local13:set( f208_local6 / f208_local10 ) --[[ @ 0]]
			f208_local14:set( f208_local7 ) --[[ @ 0]]
			f208_local15:set( f208_local8 ) --[[ @ 0]]
			f208_local16:set( f208_local8 / f208_local10 ) --[[ @ 0]]
			f208_local17:set( f208_local9 ) --[[ @ 0]]
		else
			f208_local12:set( f208_local8 ) --[[ @ 0]]
			f208_local13:set( f208_local8 / f208_local10 ) --[[ @ 0]]
			f208_local14:set( f208_local9 ) --[[ @ 0]]
			f208_local15:set( f208_local6 ) --[[ @ 0]]
			f208_local16:set( f208_local6 / f208_local10 ) --[[ @ 0]]
			f208_local17:set( f208_local7 ) --[[ @ 0]]
		end
		DataSources.TeamLivesData.subscriptions[f208_arg0]:subscribeToModel( f208_local1, function ()
			DataSources.TeamLivesData.preparedForController[f208_arg0] = false --[[ @ 0]]
			DataSources.TeamLivesData.prepare( f208_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamLivesData.subscriptions[f208_arg0]:subscribeToModel( f208_local3, function ()
			DataSources.TeamLivesData.preparedForController[f208_arg0] = false --[[ @ 0]]
			DataSources.TeamLivesData.prepare( f208_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamLivesData.subscriptions[f208_arg0]:subscribeToModel( f208_local5, function ()
			DataSources.TeamLivesData.preparedForController[f208_arg0] = false --[[ @ 0]]
			DataSources.TeamLivesData.prepare( f208_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamLivesData.subscriptions[f208_arg0]:subscribeToModel( f208_local2, function ()
			DataSources.TeamLivesData.preparedForController[f208_arg0] = false --[[ @ 0]]
			DataSources.TeamLivesData.prepare( f208_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		DataSources.TeamLivesData.subscriptions[f208_arg0]:subscribeToModel( f208_local4, function ()
			DataSources.TeamLivesData.preparedForController[f208_arg0] = false --[[ @ 0]]
			DataSources.TeamLivesData.prepare( f208_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f214_arg0 )
		if not DataSources.TeamLivesData.preparedForController or not DataSources.TeamLivesData.preparedForController[f214_arg0] then
			DataSources.TeamLivesData.prepare( f214_arg0 ) --[[ @ 0]]
		end
		local f214_local0 = Engine[@"GetModelForController"]( f214_arg0 ) --[[ @ 0]]
		return f214_local0:create( "TeamLivesData" )
	end
} --[[ @ 0]]
CoD.HUDUtility.GetRoundPipsDatasourceTable = function ( f215_arg0, f215_arg1 )
	local f215_local0 = Engine[@"GetGametypeSetting"]( @"roundwinlimit" ) --[[ @ 0]]
	local f215_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f215_local1 = f215_local1.hudItems.team1.roundsWon:get() --[[ @ 0]]
	if f215_arg0 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		local f215_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f215_local1 = f215_local2.hudItems.team2.roundsWon:get() --[[ @ 0]]
	end
	local f215_local2 = Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] --[[ @ 0]]
	local f215_local3 = Engine[@"GetModelForController"]( f215_arg1 ) --[[ @ 0]]
	if f215_local3.gameScore.winningTeam then
		f215_local3 = Engine[@"GetModelForController"]( f215_arg1 ) --[[ @ 0]]
		f215_local2 = f215_local3.gameScore.winningTeam:get() --[[ @ 0]]
	end
	f215_local3 = DataSources.Factions.getModel( f215_arg1 ) --[[ @ 0]]
	local f215_local4 --[[ @ 0]]
	if f215_arg0 == f215_local3.actualTeam:get() then
		f215_local4 = CoD.TeamUtility.GetColorSetFriendlyColor( f215_arg1, f215_arg0 ) --[[ @ 0]]
		if not f215_local4 then
		
		else
			local f215_local5 = {} --[[ @ 0]]
			for f215_local6 = 1 --[[ @ 0]], f215_local0, 1 do
				local f215_local9 = table.insert --[[ @ 0]]
				local f215_local10 = f215_local5 --[[ @ 0]]
				local f215_local11 = {} --[[ @ 0]]
				local f215_local12 = {
					isComplete = f215_local6 <= f215_local1
				} --[[ @ 0]]
				local f215_local13 --[[ @ 0]]
				if f215_local1 ~= f215_local6 or f215_local2 ~= f215_arg0 then
					f215_local13 = false --[[ @ 0]]
				else
					f215_local13 = true --[[ @ 0]]
				end
				f215_local12.justComplete = f215_local13 --[[ @ 0]]
				f215_local12.teamId = f215_arg0 --[[ @ 0]]
				f215_local12.teamColor = CoD.ColorUtility.ConvertColor( f215_local4.r, f215_local4.g, f215_local4.b ) --[[ @ 0]]
				f215_local11.models = f215_local12 --[[ @ 0]]
				f215_local9( f215_local10, f215_local11 ) --[[ @ 0]]
			end
			return f215_local5
		end
	end
	f215_local4 = CoD.TeamUtility.GetColorSetEnemyColor( f215_arg1, f215_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateTeamPipsDatasource = function ( f216_arg0, f216_arg1, f216_arg2 )
	if not f216_arg1.__customUpdateTeamPipsSubscriptions then
		f216_arg1.__customUpdateTeamPipsSubscriptions = true --[[ @ 0]]
		local f216_local0 = f216_arg1 --[[ @ 0]]
		local f216_local1 = f216_arg1.subscribeToModel --[[ @ 0]]
		local f216_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f216_local1( f216_local0, f216_local2.hudItems.team1.roundsWon, function ()
			f216_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		f216_local0 = f216_arg1 --[[ @ 0]]
		f216_local1 = f216_arg1.subscribeToModel --[[ @ 0]]
		f216_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f216_local1( f216_local0, f216_local2.hudItems.team2.roundsWon, function ()
			f216_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		f216_local0 = f216_arg1 --[[ @ 0]]
		f216_local1 = f216_arg1.subscribeToModel --[[ @ 0]]
		f216_local2 = DataSources.Factions.getModel( f216_arg0 ) --[[ @ 0]]
		f216_local1( f216_local0, f216_local2.actualTeam, function ( f219_arg0 )
			f216_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		f216_local1 = Engine[@"GetModelForController"]( f216_arg0 ) --[[ @ 0]]
		f216_local1 = f216_local1:create( "gameScore" ) --[[ @ 0]]
		f216_local1:create( "currentState" ) --[[ @ 0]]
		f216_local0 = f216_arg1 --[[ @ 0]]
		f216_local1 = f216_arg1.subscribeToModel --[[ @ 0]]
		f216_local2 = Engine[@"GetModelForController"]( f216_arg0 ) --[[ @ 0]]
		f216_local1( f216_local0, f216_local2.gameScore.currentState, function ()
			f216_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSources.PlayerTeamRoundPips = DataSourceHelpers.ListSetup( "PlayerTeamRoundPips", function ( f221_arg0 )
	local f221_local0 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
	if not IsCodCaster( f221_arg0 ) then
		local f221_local1 = DataSources.Factions.getModel( f221_arg0 ) --[[ @ 0]]
		f221_local1 = f221_local1.actualTeam:get() --[[ @ 0]]
		if f221_local1 then
			f221_local0 = f221_local1 --[[ @ 0]]
		end
	end
	return CoD.HUDUtility.GetRoundPipsDatasourceTable( f221_local0, f221_arg0 )
end, nil, nil, CoD.HUDUtility.UpdateTeamPipsDatasource ) --[[ @ 0]]
DataSources.EnemyTeamRoundPips = DataSourceHelpers.ListSetup( "EnemyTeamRoundPips", function ( f222_arg0 )
	local f222_local0 = Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] --[[ @ 0]]
	if not IsCodCaster( f222_arg0 ) then
		local f222_local1 = DataSources.Factions.getModel( f222_arg0 ) --[[ @ 0]]
		if f222_local0 == f222_local1.actualTeam:get() then
			f222_local0 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
		end
	end
	return CoD.HUDUtility.GetRoundPipsDatasourceTable( f222_local0, f222_arg0 )
end, nil, nil, CoD.HUDUtility.UpdateTeamPipsDatasource ) --[[ @ 0]]
CoD.HUDUtility.EnterClipDropState = function ( f223_arg0, f223_arg1 )
	if not f223_arg0.clipAmmoRequiredForBulletDrop then
		return false
	else
		local f223_local0 = DataSources.CurrentWeapon.getModel( f223_arg1 ) --[[ @ 0]]
		if f223_arg0.clipAmmoRequiredForBulletDrop < f223_local0.ammoInClip:get() then
			return false
		else
			f223_local0 = DataSources.CurrentWeapon.getModel( f223_arg1 ) --[[ @ 0]]
			if f223_local0.weaponReloadState:get() ~= Enum[@"hash_664D865FA8BC442C"][@"hash_264C9F4BBF9F8C1A"] then
				return false
			else
				return true
			end
		end
	end
end
 --[[ @ 0]]
DataSources.CurrentWeaponStockAmmo = DataSourceHelpers.ListSetup( "CurrentWeaponStockAmmo", function ( f224_arg0, f224_arg1 )
	local f224_local0 = {} --[[ @ 0]]
	local f224_local1 = DataSources.CurrentWeapon.getModel( f224_arg0 ) --[[ @ 0]]
	if not f224_arg1._maxPips then
		f224_arg1._maxPips = f224_arg1.hCount * f224_arg1.vCount --[[ @ 0]]
	end
	if f224_local1 and f224_local1.clipMaxAmmo and f224_local1.ammoStock then
		local f224_local2 = f224_local1.ammoStock:get() or 0 --[[ @ 0]]
		local f224_local3 = math.max( 1, f224_local1.clipMaxAmmo:get() or 1 ) --[[ @ 0]]
		local f224_local4 = math.ceil( f224_local2 / f224_local3 ) --[[ @ 0]]
		for f224_local5 = 1 --[[ @ 0]], math.min( f224_arg1._maxPips, f224_local4 ), 1 do
			local f224_local8 = 1 --[[ @ 0]]
			local f224_local9 = -1 --[[ @ 0]]
			if f224_local5 == f224_local4 then
				local f224_local10 = f224_local3 * (f224_local5 - 1) --[[ @ 0]]
				f224_local8 = (f224_local2 - f224_local10) / f224_local3 --[[ @ 0]]
				if f224_local4 <= f224_arg1._maxPips then
					f224_local9 = f224_local3 - f224_local2 - f224_local10 --[[ @ 0]]
				end
			end
			local f224_local10 = table.insert --[[ @ 0]]
			local f224_local11 = f224_local0 --[[ @ 0]]
			local f224_local12 = {} --[[ @ 0]]
			local f224_local13 = {} --[[ @ 0]]
			local f224_local14 --[[ @ 0]]
			if f224_local5 ~= f224_arg1._maxPips or f224_arg1._maxPips >= f224_local4 then
				f224_local14 = false --[[ @ 0]]
			else
				f224_local14 = true --[[ @ 0]]
			end
			f224_local13.hasExtra = f224_local14 --[[ @ 0]]
			f224_local13.percentage = f224_local8 --[[ @ 0]]
			f224_local12.models = f224_local13 --[[ @ 0]]
			f224_local12.properties = {
				clipAmmoRequiredForBulletDrop = f224_local9
			} --[[ @ 0]]
			f224_local10( f224_local11, f224_local12 ) --[[ @ 0]]
		end
	end
	return f224_local0
end, false ) --[[ @ 0]]
DataSources.CurrentWeaponSingleShotAmmo = DataSourceHelpers.ListSetup( "CurrentWeaponSingleShotAmmo", function ( f225_arg0, f225_arg1 )
	local f225_local0 = {} --[[ @ 0]]
	local f225_local1 = DataSources.CurrentWeapon.getModel( f225_arg0 ) --[[ @ 0]]
	if not f225_arg1._maxPips then
		f225_arg1._maxPips = f225_arg1.hCount * f225_arg1.vCount --[[ @ 0]]
		f225_arg1._maxHCount = f225_arg1.hCount --[[ @ 0]]
		f225_arg1._maxVCount = f225_arg1.vCount --[[ @ 0]]
	end
	if f225_local1 and f225_local1.ammoStock then
		local f225_local2 = f225_local1.ammoStock:get() or 0 --[[ @ 0]]
		local f225_local3 = f225_local2 --[[ @ 0]]
		f225_arg1.hCount = math.min( f225_arg1._maxHCount, math.ceil( f225_local2 / f225_arg1._maxVCount ) ) --[[ @ 0]]
		for f225_local4 = 1 --[[ @ 0]], f225_arg1.hCount * f225_arg1.vCount, 1 do
			local f225_local7 = math.ceil( f225_local4 / f225_arg1.vCount ) --[[ @ 0]]
			local f225_local8 = (f225_local4 - (f225_local7 - 1) * f225_arg1.vCount - 1) * f225_arg1.hCount + f225_local7 --[[ @ 0]]
			local f225_local9 = {} --[[ @ 0]]
			local f225_local10 = {} --[[ @ 0]]
			local f225_local11 --[[ @ 0]]
			if f225_local4 ~= f225_arg1._maxPips or f225_arg1._maxPips >= f225_local3 then
				f225_local11 = false --[[ @ 0]]
			else
				f225_local11 = true --[[ @ 0]]
			end
			f225_local10.hasExtra = f225_local11 --[[ @ 0]]
			f225_local10.hidden = f225_local3 < f225_local4 --[[ @ 0]]
			f225_local9.models = f225_local10 --[[ @ 0]]
			f225_local0[f225_local8] = f225_local9 --[[ @ 0]]
		end
	end
	return f225_local0
end, false ) --[[ @ 0]]
DataSources.PlayerTeamScoreBar = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f226_arg0, f226_arg1, f226_arg2 )
		if not DataSources.PlayerTeamScoreBar.preparedForController then
			DataSources.PlayerTeamScoreBar.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.PlayerTeamScoreBar.subscriptions[f226_arg0] then
			DataSources.PlayerTeamScoreBar.subscriptions[f226_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.PlayerTeamScoreBar.subscriptions[f226_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.PlayerTeamScoreBar.preparedForController[f226_arg0] = true --[[ @ 0]]
		local f226_local0 = Engine[@"GetModelForController"]( f226_arg0 ) --[[ @ 0]]
		local f226_local1 = f226_local0.gameScore.playerScore:get() --[[ @ 0]]
		local f226_local2 = Engine[@"GetGametypeSetting"]( @"scorelimit" ) --[[ @ 0]]
		local f226_local3 = 0 --[[ @ 0]]
		if f226_local2 > 0 then
			f226_local3 = f226_local1 / f226_local2 --[[ @ 0]]
		end
		local f226_local4 = Engine[@"GetModelForController"]( f226_arg0 ) --[[ @ 0]]
		f226_local4 = f226_local4:create( "PlayerTeamScoreBar" ) --[[ @ 0]]
		local f226_local5 = f226_local4:create( "scorePercent" ) --[[ @ 0]]
		f226_local5:set( f226_local3 ) --[[ @ 0]]
		DataSources.PlayerTeamScoreBar.subscriptions[f226_arg0]:subscribeToModel( f226_local0.gameScore.playerScore, function ()
			DataSources.PlayerTeamScoreBar.preparedForController[f226_arg0] = false --[[ @ 0]]
			DataSources.PlayerTeamScoreBar.prepare( f226_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f228_arg0 )
		if not DataSources.PlayerTeamScoreBar.preparedForController or not DataSources.PlayerTeamScoreBar.preparedForController[f228_arg0] then
			DataSources.PlayerTeamScoreBar.prepare( f228_arg0 ) --[[ @ 0]]
		end
		local f228_local0 = Engine[@"GetModelForController"]( f228_arg0 ) --[[ @ 0]]
		return f228_local0:create( "PlayerTeamScoreBar" )
	end
} --[[ @ 0]]
DataSources.EnemyTeamScoreBar = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f229_arg0, f229_arg1, f229_arg2 )
		if not DataSources.EnemyTeamScoreBar.preparedForController then
			DataSources.EnemyTeamScoreBar.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.EnemyTeamScoreBar.subscriptions[f229_arg0] then
			DataSources.EnemyTeamScoreBar.subscriptions[f229_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.EnemyTeamScoreBar.subscriptions[f229_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.EnemyTeamScoreBar.preparedForController[f229_arg0] = true --[[ @ 0]]
		local f229_local0 = Engine[@"GetModelForController"]( f229_arg0 ) --[[ @ 0]]
		local f229_local1 = f229_local0.gameScore.enemyScore:get() --[[ @ 0]]
		local f229_local2 = Engine[@"GetGametypeSetting"]( @"scorelimit" ) --[[ @ 0]]
		local f229_local3 = 0 --[[ @ 0]]
		if f229_local2 > 0 then
			f229_local3 = f229_local1 / f229_local2 --[[ @ 0]]
		end
		local f229_local4 = Engine[@"GetModelForController"]( f229_arg0 ) --[[ @ 0]]
		f229_local4 = f229_local4:create( "EnemyTeamScoreBar" ) --[[ @ 0]]
		local f229_local5 = f229_local4:create( "scorePercent" ) --[[ @ 0]]
		f229_local5:set( f229_local3 ) --[[ @ 0]]
		DataSources.EnemyTeamScoreBar.subscriptions[f229_arg0]:subscribeToModel( f229_local0.gameScore.enemyScore, function ()
			DataSources.EnemyTeamScoreBar.preparedForController[f229_arg0] = false --[[ @ 0]]
			DataSources.EnemyTeamScoreBar.prepare( f229_arg0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f231_arg0 )
		if not DataSources.EnemyTeamScoreBar.preparedForController or not DataSources.EnemyTeamScoreBar.preparedForController[f231_arg0] then
			DataSources.EnemyTeamScoreBar.prepare( f231_arg0 ) --[[ @ 0]]
		end
		local f231_local0 = Engine[@"GetModelForController"]( f231_arg0 ) --[[ @ 0]]
		return f231_local0:create( "EnemyTeamScoreBar" )
	end
} --[[ @ 0]]
CoD.HUDUtility.AdjustElementWidthByRoundsPlayed = function ( f232_arg0, f232_arg1 )
	local f232_local0 = Engine[@"GetGametypeSetting"]( @"roundlimit" ) --[[ @ 0]]
	if f232_local0 > 0 then
		if not f232_arg0.__widthByRoundsPlayedOriginalWidth then
			local f232_local1, f232_local2, f232_local3, f232_local4 = f232_arg0:getLocalLeftRight() --[[ @ 0]]
			f232_arg0.__widthByRoundsPlayedOriginalWidth = f232_local4 - f232_local3 --[[ @ 0]]
		end
		f232_arg0:setWidth( f232_arg0.__widthByRoundsPlayedOriginalWidth * math.min( Engine[@"GetRoundsPlayed"]( f232_arg1 ) + 1, f232_local0 ) / f232_local0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsFirstRound = function ( f233_arg0 )
	local f233_local0 = Engine[@"GetRoundsPlayed"]( f233_arg0 ) --[[ @ 0]]
	local f233_local1 --[[ @ 0]]
	if f233_local0 and f233_local0 ~= 0 then
		f233_local1 = false --[[ @ 0]]
	else
		f233_local1 = true --[[ @ 0]]
	end
	return f233_local1
end
 --[[ @ 0]]
CoD.HUDUtility.IsWZCustomGame = function ( f234_arg0 )
	local f234_local0 --[[ @ 0]]
	if Engine[@"CurrentSessionMode"]() == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
		f234_local0 = Engine[@"GameModeIsMode"]( Enum[@"eGameModes"][@"hash_15E90ACB801E4A3D"] ) --[[ @ 0]]
	else
		f234_local0 = false --[[ @ 0]]
	end
	return f234_local0
end
 --[[ @ 0]]
CoD.HUDUtility.AddTeamSize = function ( f235_arg0, f235_arg1, f235_arg2 )
	local f235_local0 = Engine[@"GetModelForController"]( f235_arg0 ) --[[ @ 0]]
	local f235_local1 = nil --[[ @ 0]]
	if f235_arg1 == 0 then
		f235_local1 = f235_local0:create( "PlayerTeamLastLivesData" ) --[[ @ 0]]
	else
		f235_local1 = f235_local0:create( "EnemyTeamLastLivesData" ) --[[ @ 0]]
	end
	local f235_local2 = f235_local1:create( "teamSize" ) --[[ @ 0]]
	local f235_local3 = f235_local2:get() --[[ @ 0]]
	local f235_local4 --[[ @ 0]]
	if not CoD.HUDUtility.IsGameTypeEqualToString( "control" ) then
		f235_local4 = not CoD.HUDUtility.IsGameTypeEqualToString( "svz" ) --[[ @ 0]]
	else
		f235_local4 = false --[[ @ 0]]
	end
	local f235_local5 --[[ @ 0]]
	if f235_local4 then
		f235_local5 = 0 --[[ @ 0]]
		if not f235_local5 then
		
		else
			return f235_local3 + f235_local5
		end
	end
	f235_local5 = f235_arg2 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.GetMaxOneInChamberLives = function ()
	return Engine[@"GetGametypeSetting"]( @"playernumlives" ) or 1
end
 --[[ @ 0]]
CoD.HUDUtility.GetMaxOneInChamberBullets = function ()
	return 3
end
 --[[ @ 0]]
CoD.HUDUtility.TooMuchAmmo = function ( f238_arg0, f238_arg1 )
	local f238_local0 = DataSources.CurrentWeapon.getModel( f238_arg0 ) --[[ @ 0]]
	return f238_arg1 < (f238_local0.ammoStock:get() or 0) + (f238_local0.ammoInClip:get() or 0)
end
 --[[ @ 0]]
CoD.HUDUtility.WeaponAmmoClipStockCombined = function ( f239_arg0, f239_arg1 )
	local f239_local0 = CoD.HUDUtility.GetMaxOneInChamberBullets() --[[ @ 0]]
	local f239_local1 = DataSources.CurrentWeapon.getModel( f239_arg0 ) --[[ @ 0]]
	return tostring( (f239_local1.ammoStock:get() or 0) + (f239_local1.ammoInClip:get() or 0) )
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateOICLifeDatasource = function ( f240_arg0, f240_arg1, f240_arg2 )
	if not f240_arg1.__customUpdateOICLifeDatasource then
		f240_arg1.__customUpdateOICLifeDatasource = true --[[ @ 0]]
		local f240_local0 = f240_arg1 --[[ @ 0]]
		local f240_local1 = f240_arg1.subscribeToModel --[[ @ 0]]
		local f240_local2 = DataSources.HUDItems.getModel( f240_arg0 ) --[[ @ 0]]
		f240_local1( f240_local0, f240_local2:create( "playerLivesCount" ), function ()
			f240_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSources.OneInTheChamberLifeList = DataSourceHelpers.ListSetup( "OneInTheChamberLifeList", function ( f242_arg0 )
	local f242_local0 = {} --[[ @ 0]]
	local f242_local1 = CoD.HUDUtility.GetMaxOneInChamberLives() --[[ @ 0]]
	local f242_local2 = DataSources.HUDItems.getModel( f242_arg0 ) --[[ @ 0]]
	f242_local2 = f242_local2:create( "playerLivesCount" ) --[[ @ 0]]
	f242_local2 = f242_local2:get() --[[ @ 0]]
	local f242_local3 = {
		models = {
			on = true
		}
	} --[[ @ 0]]
	local f242_local4 = {
		models = {
			on = false
		}
	} --[[ @ 0]]
	for f242_local5 = 1 --[[ @ 0]], f242_local2, 1 do
		local f242_local8 = f242_local5 --[[ @ 0]]
		table.insert( f242_local0, f242_local3 ) --[[ @ 0]]
	end
	local f242_local5 = math.max( 0, f242_local1 - f242_local2 ) --[[ @ 0]]
	for f242_local6 = 1 --[[ @ 0]], f242_local5, 1 do
		local f242_local9 = f242_local6 --[[ @ 0]]
		table.insert( f242_local0, f242_local4 ) --[[ @ 0]]
	end
	return f242_local0
end, nil, nil, CoD.HUDUtility.UpdateOICLifeDatasource ) --[[ @ 0]]
CoD.HUDUtility.UpdateOICBulletDatasource = function ( f243_arg0, f243_arg1, f243_arg2 )
	if not f243_arg1.__customUpdateOICBulletDatasource then
		f243_arg1.__customUpdateOICBulletDatasource = true --[[ @ 0]]
		local f243_local0 = DataSources.CurrentWeapon.getModel( f243_arg0 ) --[[ @ 0]]
		local f243_local1 = f243_local0.ammoStock:get() --[[ @ 0]]
		local f243_local2 = f243_local0.ammoInClip:get() --[[ @ 0]]
		f243_arg1:subscribeToModel( f243_local0, function ()
			f243_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		f243_arg1:subscribeToModel( f243_local0.ammoStock, function ()
			f243_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
		f243_arg1:subscribeToModel( f243_local0.ammoInClip, function ()
			f243_arg1:updateDataSource( false, false ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSources.OneInTheChamberBulletList = DataSourceHelpers.ListSetup( "OneInTheChamberBulletList", function ( f247_arg0 )
	local f247_local0 = {} --[[ @ 0]]
	local f247_local1 = CoD.HUDUtility.GetMaxOneInChamberBullets() --[[ @ 0]]
	local f247_local2 = DataSources.CurrentWeapon.getModel( f247_arg0 ) --[[ @ 0]]
	local f247_local3 = (f247_local2.ammoStock:get() or 0) + (f247_local2.ammoInClip:get() or 0) --[[ @ 0]]
	local f247_local4 = {
		models = {
			on = true
		}
	} --[[ @ 0]]
	local f247_local5 = {
		models = {
			on = false
		}
	} --[[ @ 0]]
	for f247_local6 = 1 --[[ @ 0]], f247_local3, 1 do
		local f247_local9 = f247_local6 --[[ @ 0]]
		table.insert( f247_local0, f247_local4 ) --[[ @ 0]]
	end
	local f247_local6 = math.max( 0, f247_local1 - f247_local3 ) --[[ @ 0]]
	for f247_local7 = 1 --[[ @ 0]], f247_local6, 1 do
		local f247_local10 = f247_local7 --[[ @ 0]]
		table.insert( f247_local0, f247_local5 ) --[[ @ 0]]
	end
	return f247_local0
end, nil, nil, CoD.HUDUtility.UpdateOICBulletDatasource ) --[[ @ 0]]
CoD.HUDUtility.WeaponAmmoToWipeProgress = function ( f248_arg0, f248_arg1, f248_arg2, f248_arg3, f248_arg4 )
	local f248_local0 = CoD.HUDUtility.GetMaxOneInChamberBullets() --[[ @ 0]]
	local f248_local1 = DataSources.CurrentWeapon.getModel( f248_arg0 ) --[[ @ 0]]
	local f248_local2 = f248_local1.ammoStock:get() --[[ @ 0]]
	local f248_local3 = f248_local1.ammoInClip:get() --[[ @ 0]]
	if not f248_local2 or not f248_local3 then
		return 0, 0, 0, 1
	else
		return 0, (f248_local2 + f248_local3) / f248_local0, 0, 1
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetLastLivesDataModelValues = function ( f249_arg0, f249_arg1 )
	local f249_local0 = 0 --[[ @ 0]]
	local f249_local1 = 0 --[[ @ 0]]
	local f249_local2 = false --[[ @ 0]]
	local f249_local3 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	if f249_arg1 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
		f249_local0 = f249_local3.hudItems.team1.livesCount:get() --[[ @ 0]]
		f249_local1 = f249_local3.scoreboard.team1.count:get() --[[ @ 0]]
		f249_local2 = f249_local3.hudItems.team1.noRespawnsLeft:get() ~= 0 --[[ @ 0]]
	elseif f249_arg1 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
		f249_local0 = f249_local3.hudItems.team2.livesCount:get() --[[ @ 0]]
		f249_local1 = f249_local3.scoreboard.team2.count:get() --[[ @ 0]]
		f249_local2 = f249_local3.hudItems.team2.noRespawnsLeft:get() ~= 0 --[[ @ 0]]
	end
	local f249_local4 = f249_arg0:create( "numPlayersAlive" ) --[[ @ 0]]
	f249_local4:set( f249_local0 ) --[[ @ 0]]
	f249_local4 = f249_arg0:create( "teamSize" ) --[[ @ 0]]
	f249_local4:set( f249_local1 ) --[[ @ 0]]
	f249_local4 = f249_arg0:create( "noRespawnsLeft" ) --[[ @ 0]]
	f249_local4:set( f249_local2 ) --[[ @ 0]]
	f249_local4 = f249_arg0:create( "team" ) --[[ @ 0]]
	f249_local4:set( f249_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetLastLivesDataSubscriptions = function ( f250_arg0, f250_arg1, f250_arg2 )
	local f250_local0 = DataSources[f250_arg1] --[[ @ 0]]
	if f250_local0 then
		local f250_local1 = function ()
			f250_local0.preparedForController[f250_arg0] = false --[[ @ 0]]
			f250_local0.prepare( f250_arg0 ) --[[ @ 0]]
		end
		 --[[ @ 0]]
		local f250_local2 = f250_local0.subscriptions[f250_arg0] --[[ @ 0]]
		local f250_local3 = f250_local2 --[[ @ 0]]
		f250_local2 = f250_local2.subscribeToModel --[[ @ 0]]
		local f250_local4 = DataSources.Factions.getModel( f250_arg0 ) --[[ @ 0]]
		f250_local2( f250_local3, f250_local4.actualTeam, f250_local1, false ) --[[ @ 0]]
		f250_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		if f250_arg2 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.hudItems.team1.livesCount, f250_local1, false ) --[[ @ 0]]
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.scoreboard.team1.count, f250_local1, false ) --[[ @ 0]]
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.hudItems.team1.noRespawnsLeft, f250_local1, false ) --[[ @ 0]]
		elseif f250_arg2 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.hudItems.team2.livesCount, f250_local1, false ) --[[ @ 0]]
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.scoreboard.team2.count, f250_local1, false ) --[[ @ 0]]
			f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local2.hudItems.team2.noRespawnsLeft, f250_local1, false ) --[[ @ 0]]
		end
		f250_local3 = Engine[@"GetModelForController"]( f250_arg0 ) --[[ @ 0]]
		f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local3.hudItems.colorBlindSensitiveFriendlyColor, f250_local1, false ) --[[ @ 0]]
		f250_local0.subscriptions[f250_arg0]:subscribeToModel( f250_local3.hudItems.colorBlindSensitiveEnemyColor, f250_local1, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSources.PlayerTeamLastLivesData = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f252_arg0, f252_arg1, f252_arg2 )
		if not DataSources.PlayerTeamLastLivesData.preparedForController then
			DataSources.PlayerTeamLastLivesData.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.PlayerTeamLastLivesData.subscriptions[f252_arg0] then
			DataSources.PlayerTeamLastLivesData.subscriptions[f252_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.PlayerTeamLastLivesData.subscriptions[f252_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.PlayerTeamLastLivesData.preparedForController[f252_arg0] = true --[[ @ 0]]
		local f252_local0 = CoD.CodCasterUtility.GetStandardOrCodCasterTeam( f252_arg0 ) --[[ @ 0]]
		local f252_local1 = Engine[@"GetModelForController"]( f252_arg0 ) --[[ @ 0]]
		local f252_local2 = Engine[@"GetModelForController"]( f252_arg0 ) --[[ @ 0]]
		f252_local2 = f252_local2:create( "PlayerTeamLastLivesData" ) --[[ @ 0]]
		local f252_local3 = f252_local2:create( "teamColor" ) --[[ @ 0]]
		local f252_local4 = f252_local3 --[[ @ 0]]
		f252_local3 = f252_local3.set --[[ @ 0]]
		local f252_local5 = Engine[@"GetModelForController"]( f252_arg0 ) --[[ @ 0]]
		f252_local3( f252_local4, f252_local5.hudItems.colorBlindSensitiveFriendlyColor:get() ) --[[ @ 0]]
		CoD.HUDUtility.SetLastLivesDataModelValues( f252_local2, f252_local0 ) --[[ @ 0]]
		CoD.HUDUtility.SetLastLivesDataSubscriptions( f252_arg0, "PlayerTeamLastLivesData", f252_local0 ) --[[ @ 0]]
	end,
	getModel = function ( f253_arg0 )
		if not DataSources.PlayerTeamLastLivesData.preparedForController or not DataSources.PlayerTeamLastLivesData.preparedForController[f253_arg0] then
			DataSources.PlayerTeamLastLivesData.prepare( f253_arg0 ) --[[ @ 0]]
		end
		local f253_local0 = Engine[@"GetModelForController"]( f253_arg0 ) --[[ @ 0]]
		return f253_local0:create( "PlayerTeamLastLivesData" )
	end
} --[[ @ 0]]
DataSources.EnemyTeamLastLivesData = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f254_arg0, f254_arg1, f254_arg2 )
		if not DataSources.EnemyTeamLastLivesData.preparedForController then
			DataSources.EnemyTeamLastLivesData.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.EnemyTeamLastLivesData.subscriptions[f254_arg0] then
			DataSources.EnemyTeamLastLivesData.subscriptions[f254_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.EnemyTeamLastLivesData.subscriptions[f254_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.EnemyTeamLastLivesData.preparedForController[f254_arg0] = true --[[ @ 0]]
		local f254_local0 = CoD.CodCasterUtility.GetStandardOrCodCasterTeam( f254_arg0 ) --[[ @ 0]]
		local f254_local1 = Enum[@"team_t"][@"hash_42A34B055ADD98AB"] --[[ @ 0]]
		if f254_local1 == f254_local0 then
			f254_local1 = Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] --[[ @ 0]]
		end
		local f254_local2 = Engine[@"GetModelForController"]( f254_arg0 ) --[[ @ 0]]
		local f254_local3 = Engine[@"GetModelForController"]( f254_arg0 ) --[[ @ 0]]
		f254_local3 = f254_local3:create( "EnemyTeamLastLivesData" ) --[[ @ 0]]
		local f254_local4 = f254_local3:create( "teamColor" ) --[[ @ 0]]
		local f254_local5 = f254_local4 --[[ @ 0]]
		f254_local4 = f254_local4.set --[[ @ 0]]
		local f254_local6 = Engine[@"GetModelForController"]( f254_arg0 ) --[[ @ 0]]
		f254_local4( f254_local5, f254_local6.hudItems.colorBlindSensitiveEnemyColor:get() ) --[[ @ 0]]
		CoD.HUDUtility.SetLastLivesDataModelValues( f254_local3, f254_local1 ) --[[ @ 0]]
		CoD.HUDUtility.SetLastLivesDataSubscriptions( f254_arg0, "EnemyTeamLastLivesData", f254_local1 ) --[[ @ 0]]
	end,
	getModel = function ( f255_arg0 )
		if not DataSources.EnemyTeamLastLivesData.preparedForController or not DataSources.EnemyTeamLastLivesData.preparedForController[f255_arg0] then
			DataSources.EnemyTeamLastLivesData.prepare( f255_arg0 ) --[[ @ 0]]
		end
		local f255_local0 = Engine[@"GetModelForController"]( f255_arg0 ) --[[ @ 0]]
		return f255_local0:create( "EnemyTeamLastLivesData" )
	end
} --[[ @ 0]]
CoD.HUDUtility.ShouldShowLivesAsList = function ( f256_arg0, f256_arg1 )
	local f256_local0 = f256_arg0:getModel() --[[ @ 0]]
	if f256_local0 then
		if CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) then
			local f256_local1 = f256_local0:create( "teamSize" ) --[[ @ 0]]
			f256_local1 = f256_local1:get() --[[ @ 0]]
			return f256_local1 and f256_local1 <= f256_arg1
		else
			local f256_local1 = f256_local0:create( "noRespawnsLeft" ) --[[ @ 0]]
			f256_local1 = f256_local1:get() --[[ @ 0]]
			return f256_local1 and f256_local1 == true
		end
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldHideScorestreaks = function ()
	local f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "gun" ) --[[ @ 0]]
	if not f257_local0 then
		f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "oic" ) --[[ @ 0]]
		if not f257_local0 then
			f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) --[[ @ 0]]
			if not f257_local0 then
				f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "prop" ) --[[ @ 0]]
				if not f257_local0 then
					f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "sas" ) --[[ @ 0]]
					if not f257_local0 then
						f257_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "svz" ) --[[ @ 0]]
					end
				end
			end
		end
	end
	return f257_local0
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldHideWeaponPickup = function ()
	local f258_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "oic" ) --[[ @ 0]]
	if not f258_local0 then
		f258_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) --[[ @ 0]]
	end
	return f258_local0
end
 --[[ @ 0]]
CoD.HUDUtility.HideSignatureItem = function ( f259_arg0 )
	local f259_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "bounty" ) --[[ @ 0]]
	if not f259_local0 then
		f259_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) --[[ @ 0]]
		if not f259_local0 then
			f259_local0 = CoD.HUDUtility.IsGameTypeBareBones() --[[ @ 0]]
		end
	end
	return f259_local0
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldShowTeamLives = function ( f260_arg0 )
	if (CoD.HUDUtility.IsGameTypeEqualToString( "sd" ) or CoD.HUDUtility.IsGameTypeEqualToString( "sd_hc" ) or CoD.HUDUtility.IsGameTypeEqualToString( "sd_cwl" ) or CoD.HUDUtility.IsGameTypeEqualToString( "bounty" )) and not IsGametypeSettingsValue( "playerNumLives", 0 ) then
		return true
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) then
		return true
	else
		return not IsGametypeSettingsValue( "teamNumLives", 0 )
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetSegmentCountForStockAmmo = function ( f261_arg0 )
	local f261_local0 = f261_arg0 --[[ @ 0]]
	if 8 < f261_local0 then
		f261_local0 = f261_local0 / 3 --[[ @ 0]]
	end
	return f261_local0
end
 --[[ @ 0]]
CoD.HUDUtility.GetCurrentAmmoPipWipeValue = function ( f262_arg0, f262_arg1, f262_arg2, f262_arg3, f262_arg4 )
	local f262_local0 = DataSources.CurrentWeapon.getModel( f262_arg0 ) --[[ @ 0]]
	local f262_local1 = 1 --[[ @ 0]]
	if f262_local0 and f262_local0.ammoInClip and f262_local0.clipMaxAmmo then
		f262_local1 = (f262_local0.ammoInClip:get() or 1) / (f262_local0.clipMaxAmmo:get() or 1) --[[ @ 0]]
	end
	return f262_local1, 0, 0, 0
end
 --[[ @ 0]]
CoD.HUDUtility.GetAmmoWipePercentageClipFull = function ( f263_arg0, f263_arg1, f263_arg2, f263_arg3, f263_arg4 )
	local f263_local0 = DataSources.CurrentWeapon.getModel( f263_arg0 ) --[[ @ 0]]
	if f263_local0 then
		local f263_local1 = CoD.SafeGetModelValue( f263_local0, "clipMaxAmmo" ) --[[ @ 0]]
		if f263_local1 then
			return f263_arg1 / f263_local1, f263_arg2, f263_arg3, f263_arg4
		end
	end
	return 0, f263_arg2, f263_arg3, f263_arg4
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldPulseNewAmmo = function ( f264_arg0 )
	local f264_local0 = f264_arg0.__savedPulseRef or 0 --[[ @ 0]]
	local f264_local1 = f264_arg0.__savedPulseAmmo or 0 --[[ @ 0]]
	f264_arg0.__savedPulseRef = CoD.SafeGetModelValue( f264_arg0:getModel(), "ref" ) or 0 --[[ @ 0]]
	f264_arg0.__savedPulseAmmo = CoD.SafeGetModelValue( f264_arg0:getModel(), "ammo" ) or 0 --[[ @ 0]]
	if f264_local0 == f264_arg0.__savedPulseRef and f264_local1 < f264_arg0.__savedPulseAmmo then
		return true
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.TakeMenuFocus = function ( f265_arg0, f265_arg1 )
	f265_arg0:registerEventHandler( "gain_focus", function ( element, event )
		f265_arg1:processEvent( event ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetDOTDamage = function ( f267_arg0, f267_arg1, f267_arg2 )
	local f267_local0 = CoD.GetScriptNotifyData( f267_arg1 ) --[[ @ 0]]
	local f267_local1 = f267_local0[1] --[[ @ 0]]
	if f267_arg2 and f267_arg2 ~= @"hash_0" then
		f267_arg0:setText( Engine[@"hash_4F9F1239CFD921FE"]( localizeIntoRef, f267_local1 ) ) --[[ @ 0]]
	else
		f267_arg0:setText( f267_local1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
DataSources.HealthWoundMeterList = DataSourceHelpers.ListSetup( "HealthWoundMeterList", function ( f268_arg0 )
	local f268_local0 = {} --[[ @ 0]]
	local f268_local1 = function ( f269_arg0, f269_arg1 )
		return f269_arg1.properties.endTime < f269_arg0.properties.endTime
	end
	 --[[ @ 0]]
	local f268_local2 = Engine[@"GetModelForController"]( f268_arg0 ) --[[ @ 0]]
	for f268_local3 = 0 --[[ @ 0]], CoD.HUDUtility.MAX_WOUNDS - 1, 1 do
		local f268_local6 = f268_local2.hudItems.health["wound" .. f268_local3] --[[ @ 0]]
		local f268_local7 = f268_local6 and f268_local6.isActive:get() --[[ @ 0]]
		if f268_local7 then
			table.insert( f268_local0, {
				models = {
					isActive = f268_local7,
					icon = f268_local6.icon:get(),
					woundIndex = f268_local3
				},
				properties = {
					endTime = f268_local6.endTime:get()
				}
			} ) --[[ @ 0]]
		end
	end
	table.sort( f268_local0, f268_local1 ) --[[ @ 0]]
	return f268_local0
end, nil, nil, function ( f270_arg0, f270_arg1, f270_arg2 )
	if not f270_arg1.__healthWoundMeterListCustomSubscriptions then
		f270_arg1.__healthWoundMeterListCustomSubscriptions = true --[[ @ 0]]
		local f270_local0 = Engine[@"GetModelForController"]( f270_arg0 ) --[[ @ 0]]
		for f270_local1 = 0 --[[ @ 0]], CoD.HUDUtility.MAX_WOUNDS - 1, 1 do
			local f270_local4 = f270_local0.hudItems.health["wound" .. f270_local1] --[[ @ 0]]
			f270_arg1:subscribeToModel( f270_local4.isActive, function ( model )
				f270_arg1:updateDataSource( false, false ) --[[ @ 0]]
			end ) --[[ @ 0]]
			f270_arg1:subscribeToModel( f270_local4.endTime, function ( model )
				f270_arg1:updateDataSource( false, false ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end
end ) --[[ @ 0]]
CoD.HUDUtility.UpdateWoundMeterSubscriptions = function ( f273_arg0, f273_arg1, f273_arg2, f273_arg3 )
	local f273_local0 = nil --[[ @ 0]]
	local f273_local1 = f273_arg0:getModel( f273_arg2, "woundIndex" ) --[[ @ 0]]
	f273_local0 = f273_local1 and f273_local1:get() --[[ @ 0]]
	if f273_local0 then
		if f273_arg1.__updateWoundMeterCustomSubscriptions then
			for f273_local5, f273_local6 in ipairs( f273_arg1.__updateWoundMeterCustomSubscriptions ) --[[ @ 0]] do
				f273_arg1:removeSubscription( f273_local6 ) --[[ @ 0]]
			end
		end
		f273_arg1.__updateWoundMeterCustomSubscriptions = {} --[[ @ 0]]
		table.insert( f273_arg1.__updateWoundMeterCustomSubscriptions, f273_arg1:subscribeToGlobalModel( f273_arg2, "HUDItems", "health.wound" .. f273_local0 .. ".decayProgress", function ( f274_arg0 )
			local f274_local0 = Engine[@"GetModelValue"]( f274_arg0 ) --[[ @ 0]]
			if f274_local0 then
				f273_arg1:setShaderVector( f273_arg3, CoD.GetVectorComponentFromString( f274_local0, 1 ), CoD.GetVectorComponentFromString( f274_local0, 2 ), CoD.GetVectorComponentFromString( f274_local0, 3 ), CoD.GetVectorComponentFromString( f274_local0, 4 ) ) --[[ @ 0]]
			end
		end ) ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.AddScoreboardBumperNavigation = function ( f275_arg0, f275_arg1, f275_arg2 )
	CoD.GridAndListUtility.AddBumperNavigationInternal( f275_arg0, f275_arg1, f275_arg2, function ()
		if ScoreboardVisible( f275_arg2 ) then
			BlockGameFromKeyEvent( f275_arg2 ) --[[ @ 0]]
		end
	end, function ()
		return ScoreboardVisible( f275_arg2 ) and not IsMouseOrKeyboard( f275_arg2 )
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IsItemOfLoadoutSlot = function ( f278_arg0, f278_arg1, f278_arg2 )
	return Engine[@"hash_7AEB126818B87808"]( CoD.SafeGetModelValue( f278_arg0:getModel(), "weapon" ) ) == f278_arg2
end
 --[[ @ 0]]
CoD.HUDUtility.GetObjectiveDescription = function ( f279_arg0, f279_arg1, f279_arg2 )
	local f279_local0 = tonumber( f279_arg2 ) --[[ @ 0]]
	if f279_local0 then
		local f279_local1 = CoD.HUDUtility.GetCachedObjective( Engine[@"GetObjectiveName"]( f279_arg0, f279_local0 ) ) --[[ @ 0]]
		if f279_local1 then
			local f279_local2 = Engine[@"GetObjectiveTeam"]( f279_arg0, f279_local0 ) --[[ @ 0]]
			local f279_local3 = Engine[@"GetTeamID"]( f279_arg0, Engine[@"GetPredictedClientNum"]( f279_arg0 ) ) --[[ @ 0]]
			local f279_local4 = DataSources.CPObjectiveTeams.getModel( f279_arg0 ) --[[ @ 0]]
			f279_local4 = f279_local4.myTeam --[[ @ 0]]
			if f279_local4 then
				f279_local4 = f279_local4:get() --[[ @ 0]]
			end
			if not f279_local4 or f279_local3 == Enum[@"team_t"][@"hash_697263B3C1ABADF7"] or f279_local2 == Enum[@"team_t"][@"hash_697263B3C1ABADF7"] or f279_local2 == Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
				return Engine[@"Localize"]( f279_local1.description or "" )
			elseif not (f279_arg1 ~= f279_local4 or f279_local2 ~= f279_local3) or f279_arg1 ~= f279_local4 and f279_local2 ~= f279_local3 then
				return Engine[@"Localize"]( f279_local1.friendly_description or "" )
			else
				return Engine[@"Localize"]( f279_local1.enemy_description or "" )
			end
		end
	end
	return ""
end
 --[[ @ 0]]
CoD.HUDUtility.GetObjectiveImage = function ( f280_arg0, f280_arg1, f280_arg2 )
	local f280_local0 = tonumber( f280_arg2 ) --[[ @ 0]]
	local f280_local1 = RegisterImage( @"blacktransparent" ) --[[ @ 0]]
	if f280_local0 then
		local f280_local2 = CoD.HUDUtility.GetCachedObjective( Engine[@"GetObjectiveName"]( f280_arg0, f280_local0 ) ) --[[ @ 0]]
		if f280_local2 and f280_local2.objective_image then
			f280_local1 = RegisterImage( f280_local2.objective_image ) --[[ @ 0]]
		end
	end
	return f280_local1
end
 --[[ @ 0]]
CoD.HUDUtility.GetShortObjectiveDescription = function ( f281_arg0, f281_arg1, f281_arg2 )
	local f281_local0 = tonumber( f281_arg2 ) --[[ @ 0]]
	if f281_local0 then
		local f281_local1 = CoD.HUDUtility.GetCachedObjective( Engine[@"GetObjectiveName"]( f281_arg0, f281_local0 ) ) --[[ @ 0]]
		if f281_local1 then
			local f281_local2 = Engine[@"GetObjectiveTeam"]( f281_arg0, f281_local0 ) --[[ @ 0]]
			local f281_local3 = Engine[@"GetTeamID"]( f281_arg0, Engine[@"GetPredictedClientNum"]( f281_arg0 ) ) --[[ @ 0]]
			local f281_local4 = DataSources.CPObjectiveTeams.getModel( f281_arg0 ) --[[ @ 0]]
			f281_local4 = f281_local4.myTeam --[[ @ 0]]
			if f281_local4 then
				f281_local4 = f281_local4:get() --[[ @ 0]]
			end
			if not f281_local4 or f281_local3 == Enum[@"team_t"][@"hash_697263B3C1ABADF7"] or f281_local2 == Enum[@"team_t"][@"hash_697263B3C1ABADF7"] or f281_local2 == Enum[@"team_t"][@"hash_BD65CBD25CCBEDC"] then
				return Engine[@"hash_4F9F1239CFD921FE"]( f281_local1[@"hash_482EE2196E11AF59"] or @"hash_0" )
			elseif not (f281_arg1 ~= f281_local4 or f281_local2 ~= f281_local3) or f281_arg1 ~= f281_local4 and f281_local2 ~= f281_local3 then
				return Engine[@"hash_4F9F1239CFD921FE"]( f281_local1[@"hash_7C677B684402F46"] or @"hash_0" )
			else
				return Engine[@"hash_4F9F1239CFD921FE"]( f281_local1[@"hash_300355896153E087"] or @"hash_0" )
			end
		end
	end
	return ""
end
 --[[ @ 0]]
CoD.HUDUtility.GadgetHasHoldPrompt = function ( f282_arg0, f282_arg1 )
	local f282_local0 = f282_arg0:getModel( f282_arg1, "id" ) --[[ @ 0]]
	local f282_local1 = f282_local0 and f282_local0:get() --[[ @ 0]]
	if f282_local1 then
		return Engine[@"hash_33C9ABFFE3E851D1"]( f282_local1 )
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ShouldPulseLowHealth = function ( f283_arg0, f283_arg1 )
	local f283_local0 = Engine[@"hash_3914912C5C194528"] --[[ @ 0]]
	local f283_local1 = DataSources.CurrentWeapon.getModel( f283_arg0 ) --[[ @ 0]]
	f283_local0 = f283_local0( f283_local1.equippedWeaponReference:get() or @"hash_0" ) --[[ @ 0]]
	f283_local1 = f283_arg1:getModel() --[[ @ 0]]
	return f283_local1.health.healthValue:get() <= f283_local0 * 100
end
 --[[ @ 0]]
DataSources.MedicCleanse = {
	prepared = false,
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f284_arg0, f284_arg1, f284_arg2 )
		if not DataSources.MedicCleanse.preparedForController then
			DataSources.MedicCleanse.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.MedicCleanse.subscriptions[f284_arg0] then
			DataSources.MedicCleanse.subscriptions[f284_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.MedicCleanse.subscriptions[f284_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.MedicCleanse.preparedForController[f284_arg0] = true --[[ @ 0]]
		local f284_local0 = Engine[@"GetModelForController"]( f284_arg0 ) --[[ @ 0]]
		f284_local0 = f284_local0:create( "MedicCleanse" ) --[[ @ 0]]
		local f284_local1 = f284_local0:create( "currentMedicCleanseCount" ) --[[ @ 0]]
		local f284_local2 = f284_local0:create( "previousMedicCleanseCount" ) --[[ @ 0]]
		local f284_local3 = DataSources.MedicCleanse.subscriptions[f284_arg0] --[[ @ 0]]
		local f284_local4 = f284_local3 --[[ @ 0]]
		f284_local3 = f284_local3.subscribeToModel --[[ @ 0]]
		local f284_local5 = DataSources.HUDItems.getModel( f284_arg0 ) --[[ @ 0]]
		f284_local3( f284_local4, f284_local5.medicCleanseCount, function ( f285_arg0 )
			local f285_local0 = f285_arg0:get() --[[ @ 0]]
			f284_local2:set( f284_local1:get() ) --[[ @ 0]]
			f284_local1:set( f285_local0 ) --[[ @ 0]]
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f286_arg0 )
		if not DataSources.MedicCleanse.preparedForController or not DataSources.MedicCleanse.preparedForController[f286_arg0] then
			DataSources.MedicCleanse.prepare( f286_arg0 ) --[[ @ 0]]
		end
		local f286_local0 = Engine[@"GetModelForController"]( f286_arg0 ) --[[ @ 0]]
		return f286_local0:create( "MedicCleanse" )
	end
} --[[ @ 0]]
CoD.HUDUtility.InitWeaponPowerDrainBar = function ( f287_arg0, f287_arg1, f287_arg2, f287_arg3, f287_arg4 )
	f287_arg1.__weaponInUse = false --[[ @ 0]]
	f287_arg1.__endClipPlayed = true --[[ @ 0]]
	local f287_local0 = function ()
		if f287_arg1.__endClipDelay then
			f287_arg1.__endClipDelay:close() --[[ @ 0]]
			f287_arg1.__endClipDelay = nil --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	if f287_arg4 then
		f287_arg1:linkToElementModel( f287_arg0, "id", true, function ( model )
			local f289_local0 = model:get() --[[ @ 0]]
			if f287_arg1.__lastWeaponId ~= f289_local0 then
				f287_arg0:setState( f287_arg2, "DefaultState" ) --[[ @ 0]]
				f287_arg1.__endClipPlayed = true --[[ @ 0]]
				f287_local0() --[[ @ 0]]
			end
			f287_arg1.__lastWeaponId = f289_local0 --[[ @ 0]]
		end ) --[[ @ 0]]
		local f287_local1 = f287_arg1 --[[ @ 0]]
		local f287_local2 = f287_arg1.subscribeToModel --[[ @ 0]]
		local f287_local3 = Engine[@"GetModelForController"]( f287_arg2 ) --[[ @ 0]]
		f287_local2( f287_local1, f287_local3.deadSpectator.playerIndex, function ( f290_arg0 )
			f287_arg0:setState( f287_arg2, "DefaultState" ) --[[ @ 0]]
			f287_arg1.__endClipPlayed = true --[[ @ 0]]
			f287_local0() --[[ @ 0]]
		end ) --[[ @ 0]]
	end
	local f287_local2 = function ()
		local f291_local0 = f287_arg0:getModel() --[[ @ 0]]
		if not f291_local0 then
			return false
		elseif f291_local0.state:get() ~= Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] then
			return false
		end
		local f291_local1 = f291_local0.id:get() --[[ @ 0]]
		local f291_local2 = DataSources.CurrentWeapon.getModel( f287_arg2 ) --[[ @ 0]]
		if f291_local2.viewmodelWeaponName:get() ~= f291_local1 then
			f291_local2 = DataSources.CurrentWeapon.getModel( f287_arg2 ) --[[ @ 0]]
			if f291_local2.altViewmodelWeaponName:get() ~= f291_local1 then
				f291_local2 = false --[[ @ 0]]
			end
		end
		f291_local2 = true --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f287_local1 = function ()
		local f292_local0 = f287_local2() --[[ @ 0]]
		if not f287_arg1.__weaponInUse and f292_local0 then
			f287_arg1.__endClipPlayed = false --[[ @ 0]]
			if f287_arg4 then
				f287_arg0:setState( f287_arg2, "Visible" ) --[[ @ 0]]
			end
		end
		f287_arg1.__weaponInUse = f292_local0 --[[ @ 0]]
		local f292_local1 = f287_arg0:getModel() --[[ @ 0]]
		if f292_local1 then
			f292_local1 = f287_arg0:getModel() --[[ @ 0]]
			f292_local1 = f292_local1.state:get() --[[ @ 0]]
		end
		if f287_arg1.__lastState ~= f292_local1 then
			local f292_local2 = f287_arg0:getModel( f287_arg2, "powerRatio" ) --[[ @ 0]]
			if f292_local2 then
				Engine[@"ForceNotifyModelSubscriptions"]( f292_local2 ) --[[ @ 0]]
			end
		end
		f287_arg1.__lastState = f292_local1 --[[ @ 0]]
	end
	 --[[ @ 0]]
	if f287_arg4 then
		f287_arg1:subscribeToGlobalModel( f287_arg2, "CurrentWeapon", "viewmodelWeaponName", function ( model )
			f287_local1() --[[ @ 0]]
		end ) --[[ @ 0]]
	end
	f287_arg1:linkToElementModel( f287_arg0, "state", true, function ( model )
		f287_local1() --[[ @ 0]]
	end ) --[[ @ 0]]
	f287_arg1:linkToElementModel( f287_arg0, "powerRatio", true, function ( model )
		local f295_local0 = model:get() or 0 --[[ @ 0]]
		if f287_arg1.__weaponInUse and f295_local0 > 0 then
			f287_arg1:setShaderVector( 0, 1, 1 - f295_local0, 0, 0 ) --[[ @ 0]]
		elseif not f287_arg1.__endClipPlayed then
			f287_arg1:beginAnimation( f287_arg3, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
			f287_arg1:setShaderVector( 0, 1, 1, 0, 0 ) --[[ @ 0]]
			if f287_arg4 then
				f287_local0() --[[ @ 0]]
				f287_arg1.__endClipDelay = LUI.UITimer.newElementTimer( f287_arg3, true, function ()
					f287_arg0:setState( f287_arg2, "DefaultState" ) --[[ @ 0]]
					f287_local0() --[[ @ 0]]
				end ) --[[ @ 0]]
				f287_arg1:addElement( f287_arg1.__endClipDelay ) --[[ @ 0]]
			end
			f287_arg1.__endClipPlayed = true --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UsingPlayerGadgetWithBar = function ( f297_arg0 )
	local f297_local0 = DataSources.PlayerAbilities.getModel( f297_arg0 ) --[[ @ 0]]
	local f297_local1 = DataSources.CurrentWeapon.getModel( f297_arg0 ) --[[ @ 0]]
	f297_local1 = f297_local1.viewmodelWeaponName:get() --[[ @ 0]]
	local f297_local2 = DataSources.CurrentWeapon.getModel( f297_arg0 ) --[[ @ 0]]
	f297_local2 = f297_local2.altViewmodelWeaponName:get() --[[ @ 0]]
	local f297_local3 = function ( f298_arg0 )
		local f298_local0 = f297_local0[f298_arg0] --[[ @ 0]]
		if f298_local0 then
			local f298_local1 --[[ @ 0]]
			if f298_local0.state:get() ~= Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] or f297_local1 ~= f298_local0.id:get() and f297_local2 ~= f298_local0.id:get() then
				f298_local1 = false --[[ @ 0]]
			else
				f298_local1 = true --[[ @ 0]]
			end
			return f298_local1
		else
			return false
		end
	end
	 --[[ @ 0]]
	local f297_local4 = f297_local3( "playerGadget2" ) --[[ @ 0]]
	if not f297_local4 then
		f297_local4 = f297_local3( "playerGadget3" ) --[[ @ 0]]
	end
	return f297_local4
end
 --[[ @ 0]]
CoD.HUDUtility.PlayerHasPerk = function ( f299_arg0, f299_arg1 )
	return Engine[@"hash_315470EBA42394ED"]( f299_arg0, f299_arg1 )
end
 --[[ @ 0]]
CoD.HUDUtility.AwarenessLevels = LuaEnum.createEnum( "AWARENESS_LEVEL_NONE", "AWARENESS_LEVEL_OUTER_BIT", "AWARENESS_LEVEL_MID_BIT", "AWARENESS_LEVEL_INNER_BIT" ) --[[ @ 0]]
CoD.HUDUtility.AwarenessNumSegments = 8 --[[ @ 0]]
CoD.HUDUtility.RotateAwarenessRingIfEnabled = function ( f300_arg0 )
	if Engine[@"hash_622EAAB59AA27E9B"]( "ui_awareness_rotate" ) ~= 0 then
		return f300_arg0
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetXFractionByModel = function ( f301_arg0, f301_arg1, f301_arg2 )
	local f301_local0 = Engine[@"GetModelValue"]( f301_arg2 ) --[[ @ 0]]
	if f301_local0 then
		if f301_local0 <= 0 then
			f301_arg0:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
			if f301_arg0.updateTimer then
				f301_arg0.updateTimer:close() --[[ @ 0]]
				f301_arg0.updateTimer = nil --[[ @ 0]]
			end
		else
			f301_arg0.curProgress = 0 --[[ @ 0]]
			f301_arg0.startTime = Engine[@"CurrentGameTime"]() --[[ @ 0]]
			f301_arg0.updateTimer = LUI.UITimer.newElementTimer( 16, false, function ()
				local f302_local0 = Engine[@"CurrentGameTime"]() --[[ @ 0]]
				f301_arg0.curProgress = f301_arg0.curProgress + f302_local0 - f301_arg0.startTime --[[ @ 0]]
				f301_arg0:setShaderVector( 0, f301_arg0.curProgress / f301_local0, 0, 0, 0 ) --[[ @ 0]]
				f301_arg0.startTime = f302_local0 --[[ @ 0]]
			end ) --[[ @ 0]]
			f301_arg0:addElement( f301_arg0.updateTimer ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.TransformWorldPosToCompassRelativePosition = function ( f303_arg0, f303_arg1, f303_arg2 )
	local f303_local0, f303_local1, f303_local2, f303_local3 = Engine[@"hash_1803048A0AE6E039"]( f303_arg0 ) --[[ @ 0]]
	local f303_local4, f303_local5 = Engine[@"hash_7D345FF764DC8504"]( f303_arg0 ) --[[ @ 0]]
	local f303_local6, f303_local7 = nil --[[ @ 0]]
	if math.abs( f303_local4 ) > 0 then
		f303_local7 = (f303_arg1 - f303_local0) / (f303_local2 - f303_local0) --[[ @ 0]]
		f303_local6 = (f303_arg2 - f303_local1) / (f303_local3 - f303_local1) --[[ @ 0]]
	elseif math.abs( f303_local5 ) > 0 then
		f303_local6 = (f303_arg1 - f303_local0) / (f303_local2 - f303_local0) --[[ @ 0]]
		f303_local7 = (f303_arg2 - f303_local1) / (f303_local3 - f303_local1) --[[ @ 0]]
	end
	return f303_local6, f303_local7
end
 --[[ @ 0]]
CoD.HUDUtility.TransformCompassRelativePositionToWorldPos = function ( f304_arg0, f304_arg1, f304_arg2 )
	local f304_local0, f304_local1, f304_local2, f304_local3 = Engine[@"hash_1803048A0AE6E039"]( f304_arg0 ) --[[ @ 0]]
	local f304_local4, f304_local5 = Engine[@"hash_7D345FF764DC8504"]( f304_arg0 ) --[[ @ 0]]
	local f304_local6, f304_local7 = nil --[[ @ 0]]
	if math.abs( f304_local4 ) > 0 then
		f304_local6 = f304_local2 * f304_arg2 + f304_local0 * (1 - f304_arg2) --[[ @ 0]]
		f304_local7 = f304_local3 * f304_arg1 + f304_local1 * (1 - f304_arg1) --[[ @ 0]]
	elseif math.abs( f304_local5 ) > 0 then
		f304_local6 = f304_local2 * f304_arg1 + f304_local0 * (1 - f304_arg1) --[[ @ 0]]
		f304_local7 = f304_local3 * f304_arg2 + f304_local1 * (1 - f304_arg2) --[[ @ 0]]
	end
	return f304_local6, f304_local7
end
 --[[ @ 0]]
CoD.HUDUtility.ThrustMeter_Colors = {
	{
		r = 1,
		g = 1,
		b = 1
	}
} --[[ @ 0]]
CoD.HUDUtility.ThrustMeter_Cutoffs = {
	0
} --[[ @ 0]]
CoD.HUDUtility.ThrustMeter_Color_Lerp = function ( f305_arg0, f305_arg1, f305_arg2, f305_arg3 )
	f305_arg3 = math.min( math.max( 0, f305_arg3 ), 1 ) --[[ @ 0]]
	f305_arg0:setRGB( f305_arg1.r * (1 - f305_arg3) + f305_arg2.r * f305_arg3, f305_arg1.g * (1 - f305_arg3) + f305_arg2.g * f305_arg3, f305_arg1.b * (1 - f305_arg3) + f305_arg2.b * f305_arg3 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ThrustMeter_ApplyColor = function ( f306_arg0, f306_arg1 )
	for f306_local0 = 1 --[[ @ 0]], #CoD.HUDUtility.ThrustMeter_Cutoffs - 1, 1 do
		if CoD.HUDUtility.ThrustMeter_Cutoffs[f306_local0] <= f306_arg1 and f306_arg1 <= CoD.HUDUtility.ThrustMeter_Cutoffs[f306_local0 + 1] then
			CoD.HUDUtility.ThrustMeter_Color_Lerp( f306_arg0, CoD.HUDUtility.ThrustMeter_Colors[f306_local0], CoD.HUDUtility.ThrustMeter_Colors[f306_local0 + 1], (f306_arg1 - CoD.HUDUtility.ThrustMeter_Cutoffs[f306_local0]) / (CoD.HUDUtility.ThrustMeter_Cutoffs[f306_local0 + 1] - CoD.HUDUtility.ThrustMeter_Cutoffs[f306_local0]) ) --[[ @ 0]]
			return 
		end
	end
	f306_arg0:setRGB( CoD.HUDUtility.ThrustMeter_Colors[#CoD.HUDUtility.ThrustMeter_Colors].r, CoD.HUDUtility.ThrustMeter_Colors[#CoD.HUDUtility.ThrustMeter_Colors].g, CoD.HUDUtility.ThrustMeter_Colors[#CoD.HUDUtility.ThrustMeter_Colors].b ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateThrustMeter = function ( f307_arg0, f307_arg1, f307_arg2, f307_arg3, f307_arg4 )
	local f307_local0 = Engine[@"GetModelValue"]( f307_arg4 ) --[[ @ 0]]
	if not f307_local0 then
		return 
	elseif f307_arg0._lastScalableWidth == -1 then
		f307_arg0:playClip( "IntroAnimation" ) --[[ @ 0]]
		f307_arg0._lastScalableWidth = 1 --[[ @ 0]]
	end
	if f307_arg0._lastScalableWidth == f307_local0 then
		return 
	end
	local f307_local1 = f307_arg0._lastScalableWidth + 0 < f307_local0 --[[ @ 0]]
	f307_arg0._lastScalableWidth = f307_local0 --[[ @ 0]]
	local f307_local2 = 0.48 + 0.04 * f307_local0 --[[ @ 0]]
	local f307_local3 = -25.3 + 52.3 * f307_local0 --[[ @ 0]]
	local f307_local4 = f307_local3 + 2 --[[ @ 0]]
	f307_arg1.fill:beginAnimation( "update_fill", 50, false, false ) --[[ @ 0]]
	CoD.HUDUtility.ThrustMeter_ApplyColor( f307_arg1.fill, f307_local0 ) --[[ @ 0]]
	f307_arg1.fill:setShaderVector( 0, f307_local2, 0, 0, 0 ) --[[ @ 0]]
	f307_arg1.dots:beginAnimation( "update_fill", 50, false, false ) --[[ @ 0]]
	f307_arg1.dots:setShaderVector( 0, 1 - f307_local2, 0, 0, 0 ) --[[ @ 0]]
	local f307_local5 = 50 --[[ @ 0]]
	if f307_local1 then
		f307_local5 = 50 --[[ @ 0]]
		f307_arg2.right1:playClip( "Fill" ) --[[ @ 0]]
	else
		f307_arg2.right1:playClip( "Drain" ) --[[ @ 0]]
	end
	f307_arg2.right1:beginAnimation( "right_chevron_thick", f307_local5, false, false ) --[[ @ 0]]
	f307_arg2.right1:setZRot( f307_local3 ) --[[ @ 0]]
	f307_arg2.right2:beginAnimation( "right_chevron_thin", f307_local5, false, false ) --[[ @ 0]]
	f307_arg2.right2:setZRot( f307_local4 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.MiniTurretPostLoad = function ( f308_arg0, f308_arg1 )
	f308_arg0.originalClipOver = f308_arg0.m_eventHandlers.clip_over --[[ @ 0]]
	f308_arg0:registerEventHandler( "clip_over", function ( element, event )
		if not element.nextClip and not IsInDefaultState( element ) then
			if IsElementInState( element, "EnemyKilled" ) then
				local f309_local0 = Engine[@"GetModelForController"]( f308_arg1 ) --[[ @ 0]]
				f309_local0 = f309_local0.miniTurretKillCount --[[ @ 0]]
				if f309_local0 and type( f309_local0:get() ) == "number" then
					SetControllerModelValueNumberDecrement( f308_arg1, "miniTurretKillCount", 0 ) --[[ @ 0]]
					if f309_local0:get() > 0 then
						element:playClip( "DefaultClip" ) --[[ @ 0]]
					else
						SetState( element, "DefaultState", f308_arg1 ) --[[ @ 0]]
					end
				end
			else
				SetState( element, "DefaultState", f308_arg1 ) --[[ @ 0]]
			end
		end
		element:originalClipOver( event ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.OnDamageFeedbackSetState = function ( f310_arg0, f310_arg1, f310_arg2 )
	if f310_arg2 == "DefaultState" then
		if f310_arg0.moveToDefaultTimer then
			f310_arg0.moveToDefaultTimer:close() --[[ @ 0]]
			f310_arg0.moveToDefaultTimer = nil --[[ @ 0]]
		end
	elseif f310_arg0.moveToDefaultTimer then
		f310_arg0.moveToDefaultTimer:reset() --[[ @ 0]]
	else
		f310_arg0.moveToDefaultTimer = LUI.UITimer.newElementTimer( 600, true, function ()
			local f311_local0 = f310_arg0:getModel( f310_arg1, "damageFeedbackState" ) --[[ @ 0]]
			if f311_local0 then
				Engine[@"SetModelValue"]( f311_local0, Enum[@"DamageFeedbackState"][@"hash_939E3F6C6998E83"] ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		f310_arg0:addElement( f310_arg0.moveToDefaultTimer ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetupPrematchCountdown = function ( f312_arg0, f312_arg1, f312_arg2, f312_arg3 )
	f312_arg0.PrematchCountdownNumbers.Numbers.Numbers:setupPrematchTimer( f312_arg2 ) --[[ @ 0]]
	if not f312_arg3 then
		f312_arg0.PrematchCountdownNumbers:setAlpha( 0 ) --[[ @ 0]]
		return 
	elseif f312_arg2 then
		local f312_local0 = f312_arg2 - Engine[@"CurrentGameTime"]() --[[ @ 0]]
		if f312_local0 > 5000 then
			f312_arg0:registerEventHandler( "faction_start", function ( element )
				element:playClip( "Start" ) --[[ @ 0]]
				return true
			end ) --[[ @ 0]]
			f312_arg0:addElement( LUI.UITimer.new( f312_local0 - 5000, "faction_start", true ) ) --[[ @ 0]]
		else
			f312_arg0:playClip( "Start" ) --[[ @ 0]]
		end
	end
	f312_arg0.PrematchCountdownNumbers:playClip( "Start" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.PrematchCountdownPostLoad = function ( f314_arg0, f314_arg1 )
	if not IsDoubleXP( f314_arg1 ) and not IsDoubleWeaponXP( f314_arg1 ) and not IsDoubleLootXP( f314_arg1 ) and not ShouldDisplayFactionIconAtPrematchCountdown( f314_arg0 ) then
		f314_arg0.FactionIcon:close() --[[ @ 0]]
		f314_arg0.FactionIcon0:close() --[[ @ 0]]
		f314_arg0.FactionName:close() --[[ @ 0]]
	end
	local f314_local0 = function ( f315_arg0, f315_arg1 )
		f315_arg0:playClip( "ShowObjectiveHint" ) --[[ @ 0]]
		f315_arg0:registerEventHandler( "clip_over", function ( element, event )
			local f316_local0 = Engine[@"GetRoundsPlayed"]( f314_arg1 ) --[[ @ 0]]
			local f316_local1 --[[ @ 0]]
			if f316_local0 ~= nil and f316_local0 ~= 0 then
				f316_local1 = false --[[ @ 0]]
			else
				f316_local1 = true --[[ @ 0]]
			end
			if f316_local1 and IsDoubleLootXP( f314_arg1 ) then
				element:playClip( "ShowDoubleLootIcon" ) --[[ @ 0]]
				element:registerEventHandler( "clip_over", function ( element, event )
					element:close() --[[ @ 0]]
				end ) --[[ @ 0]]
			else
				element:close() --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f314_arg0:subscribeToGlobalModel( f314_arg1, "PerController", "scriptNotify", function ( model )
		local f318_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
		if f318_local0 == @"show_gametype_objective_hint" then
			local f318_local1 = {
				controller = f314_arg1,
				name = f318_local0,
				data = CoD.GetScriptNotifyData( model )
			} --[[ @ 0]]
			local f318_local2 = Engine[@"hash_5EA74FA7EE46E195"]( Engine[@"GetCurrentGameType"]() ) --[[ @ 0]]
			local f318_local3 = f318_local2.objective_strings[f318_local1.data[1] + 1][@"hash_5056473EFC71F09F"] or "" --[[ @ 0]]
			f314_arg0:setAlpha( 1 ) --[[ @ 0]]
			f314_arg0.GameTypeHintText.MatchText:setText( Engine[@"Localize"]( f318_local3 ) ) --[[ @ 0]]
			f314_arg0.GameTypeIcon:setImage( RegisterImage( CoD.GetLoadingScreenGameTypeIconName() ) ) --[[ @ 0]]
			if f314_arg0.playFactionInfoAnimation and not HUD_IsFFA() then
				f314_arg0:playClip( "ShowOnlyFactionInfo" ) --[[ @ 0]]
				f314_arg0:registerEventHandler( "clip_over", f314_local0 ) --[[ @ 0]]
			else
				f314_local0( f314_arg0, f318_local1 ) --[[ @ 0]]
			end
		elseif f318_local0 == @"prematch_timer_ended" then
			local f318_local1 = {
				controller = f314_arg1,
				name = f318_local0,
				data = CoD.GetScriptNotifyData( model )
			} --[[ @ 0]]
			local f318_local2 --[[ @ 0]]
			if f318_local1.data == nil or f318_local1.data[1] ~= 1 then
				f318_local2 = false --[[ @ 0]]
			else
				f318_local2 = true --[[ @ 0]]
			end
			if f318_local2 then
				f314_arg0:playClip( "Stop" ) --[[ @ 0]]
				f314_arg0.PrematchCountdownNumbers:playClip( "Stop" ) --[[ @ 0]]
				f314_arg0:registerEventHandler( "clip_over", function ( element, event )
					element:setAlpha( 0 ) --[[ @ 0]]
					if IsDemoPlaying() then
						element:close() --[[ @ 0]]
					end
				end ) --[[ @ 0]]
			end
			Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f314_arg1 ), "isInPrematchPeriod" ), 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f314_arg0.onPlayerSpawned = function ( f320_arg0 )
		if not IsInPrematchPeriod( f314_arg1 ) then
			f320_arg0.playFactionInfoAnimation = true --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f314_arg0.setupCountdown = CoD.HUDUtility.SetupPrematchCountdown --[[ @ 0]]
	f314_arg0:setState( f314_arg1, "DefaultState" ) --[[ @ 0]]
	local f314_local1 = Engine[@"GetGametypeSetting"]( @"prematchperiod" ) * 1000 --[[ @ 0]]
	local f314_local2 = Engine[@"CurrentGameTime"]() --[[ @ 0]]
	local f314_local3 = 250 --[[ @ 0]]
	if f314_local2 < f314_local1 then
		f314_local3 = f314_local1 - f314_local2 --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( f314_arg0, "close", function ( element )
		local f321_local0 = element:getParent() --[[ @ 0]]
		f321_local0.PrematchCountdown = nil --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupPrematchCountdownMinimize = function ( f322_arg0, f322_arg1, f322_arg2, f322_arg3, f322_arg4 )
	f322_arg0.PrematchCountdownNumbers.Numbers.Numbers:setupPrematchTimer( f322_arg2 ) --[[ @ 0]]
	f322_arg0.PrematchCountdownNumbersSmall.Timer:setupPrematchTimer( f322_arg2 ) --[[ @ 0]]
	if not f322_arg3 then
		f322_arg0.PrematchCountdownNumbers:setAlpha( 0 ) --[[ @ 0]]
		return 
	elseif f322_arg2 then
		f322_arg0:registerEventHandler( "faction_start", function ( element )
			element:playClip( "Minimize" ) --[[ @ 0]]
			return true
		end ) --[[ @ 0]]
		f322_arg0:addElement( LUI.UITimer.new( f322_arg4, "faction_start", true ) ) --[[ @ 0]]
	end
	f322_arg0.PrematchCountdownNumbers:playClip( "Start" ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.PrematchCountdownMinimizePostLoad = function ( f324_arg0, f324_arg1 )
	local f324_local0 = function ( f325_arg0, f325_arg1 )
		f325_arg0:playClip( "ShowObjectiveHint" ) --[[ @ 0]]
		f325_arg0:registerEventHandler( "clip_over", function ( element, event )
			element:close() --[[ @ 0]]
		end ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f324_arg0:subscribeToGlobalModel( f324_arg1, "PerController", "scriptNotify", function ( model )
		local f327_local0 = model:get() --[[ @ 0]]
		if f327_local0 == @"create_prematch_timer" then
			f324_arg0.__startCounterTime = Engine[@"CurrentGameTime"]() + Engine[@"GetGametypeSetting"]( @"prematchperiod" ) * 1000 --[[ @ 0]]
			local f327_local1 = Engine[@"GetModelForController"]( f324_arg1 ) --[[ @ 0]]
			f327_local1 = f327_local1:create( "PositionDraft.stage" ) --[[ @ 0]]
			f327_local1:set( 6 ) --[[ @ 0]]
			f324_arg0.__messageTimer = LUI.UITimer.newElementTimer( 1000, false, function ()
				local f328_local0 = f324_arg0.__startCounterTime - Engine[@"CurrentGameTime"]() --[[ @ 0]]
				local f328_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
				f328_local1 = f328_local1:create( "PositionDraft.timeRemaining" ) --[[ @ 0]]
				f328_local1:set( math.ceil( f328_local0 / 1000 ) ) --[[ @ 0]]
			end ) --[[ @ 0]]
			f324_arg0:addElement( f324_arg0.__messageTimer ) --[[ @ 0]]
		elseif f327_local0 == @"show_gametype_objective_hint" then
			local f327_local2 = {
				controller = f324_arg1,
				name = f327_local0,
				data = CoD.GetScriptNotifyData( model )
			} --[[ @ 0]]
			local f327_local1 = Engine[@"hash_5EA74FA7EE46E195"]( Engine[@"GetCurrentGameType"]() ) --[[ @ 0]]
			local f327_local3 = f327_local1.objective_strings[f327_local2.data[1] + 1][@"hash_5056473EFC71F09F"] or "" --[[ @ 0]]
			f324_arg0:setAlpha( 1 ) --[[ @ 0]]
			f324_arg0.GameTypeHintText.MatchText:setText( Engine[@"Localize"]( f327_local3 ) ) --[[ @ 0]]
			f324_local0( f324_arg0, f327_local2 ) --[[ @ 0]]
		elseif f327_local0 == @"prematch_timer_ended" then
			local f327_local2 = {
				controller = f324_arg1,
				name = f327_local0,
				data = CoD.GetScriptNotifyData( model )
			} --[[ @ 0]]
			local f327_local1 = f327_local2.data --[[ @ 0]]
			if f327_local1 then
				f327_local1 = f327_local2.data[1] == 1 --[[ @ 0]]
			end
			if f327_local2.data[2] then
				f324_arg0:close() --[[ @ 0]]
				return 
			elseif f327_local1 then
				f324_arg0:playClip( "Stop" ) --[[ @ 0]]
				f324_arg0:registerEventHandler( "clip_over", function ( element, event )
					element:setAlpha( 0 ) --[[ @ 0]]
					if IsDemoPlaying() then
						element:close() --[[ @ 0]]
					end
				end ) --[[ @ 0]]
				if f324_arg0.__messageTimer then
					local f327_local3 = Engine[@"GetModelForController"]( f324_arg1 ) --[[ @ 0]]
					f327_local3 = f327_local3:create( "PositionDraft.stage" ) --[[ @ 0]]
					f327_local3:set( 0 ) --[[ @ 0]]
					f324_arg0.__messageTimer:close() --[[ @ 0]]
					f324_arg0.__messageTimer = nil --[[ @ 0]]
				end
			end
			local f327_local3 = Engine[@"GetModelForController"]( f324_arg1 ) --[[ @ 0]]
			local f327_local4 = f327_local3:create( "isInPrematchPeriod" ) --[[ @ 0]]
			f327_local4:set( 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f324_arg0.setupCountdown = CoD.HUDUtility.SetupPrematchCountdownMinimize --[[ @ 0]]
	f324_arg0:setState( f324_arg1, "DefaultState" ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( f324_arg0, "close", function ( element )
		local f330_local0 = element:getParent() --[[ @ 0]]
		f330_local0.PrematchCountdown = nil --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupHoldingPenNotification = function ( f331_arg0, f331_arg1, f331_arg2 )
	f331_arg0:registerEventHandler( "minimize_holding_pen", function ( element )
		element:playClip( "Minimize" ) --[[ @ 0]]
		return true
	end ) --[[ @ 0]]
	f331_arg0:addElement( LUI.UITimer.new( f331_arg2, "minimize_holding_pen", true ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.HoldingPenNotificationPostLoad = function ( f333_arg0, f333_arg1 )
	f333_arg0.PrematchCountdownNumbers.Numbers.Numbers:setText( "" ) --[[ @ 0]]
	f333_arg0.PrematchCountdownNumbersSmall.Timer:setText( "" ) --[[ @ 0]]
	f333_arg0:subscribeToGlobalModel( f333_arg1, "PerController", "scriptNotify", function ( model )
		local f334_local0 = model:get() --[[ @ 0]]
		if f334_local0 == @"create_prematch_timer" or f334_local0 == @"prematch_timer_ended" or f334_local0 == @"show_gametype_objective_hint" then
			f333_arg0:close() --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f333_arg0.setupHoldingPenNotification = CoD.HUDUtility.SetupHoldingPenNotification --[[ @ 0]]
	f333_arg0:setState( f333_arg1, "DefaultState" ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( f333_arg0, "close", function ( element )
		local f335_local0 = element:getParent() --[[ @ 0]]
		f335_local0.HoldingPenNotification = nil --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.AddToAbilityCalloutQueue = function ( f336_arg0, f336_arg1, f336_arg2 )
	if f336_arg2:get() == "ability_callout" then
		local f336_local0 = CoD.GetScriptNotifyData( f336_arg2 ) --[[ @ 0]]
		local f336_local1 = Engine[@"hash_405495B2277D7A9D"]( f336_local0[1] ) --[[ @ 0]]
		local f336_local2 = Engine[@"hash_57505E1D60F948DB"]( f336_local0[1] ) --[[ @ 0]]
		if f336_local1 ~= "" or f336_local2 ~= "" then
			CoD.QueueUtility.AddToTimedFnQueue( f336_arg0, CoD.QueueUtility.TimedFnQueuePriority.AbilityCallout, CoD.HUDUtility.SetAbilityCallout, {
				clipBased = true,
				notificationText = f336_local1,
				notificationIcon = f336_local2,
				clientNum = f336_local0[2]
			} ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetupAbilityCalloutQueue = function ( f337_arg0, f337_arg1, f337_arg2 )
	local f337_local0 = Engine[@"GetModelForController"]( f337_arg1 ) --[[ @ 0]]
	f337_arg0.menu = f337_arg2 --[[ @ 0]]
	f337_arg0.controller = f337_arg1 --[[ @ 0]]
	f337_arg0.widgetModels = {} --[[ @ 0]]
	for f337_local1 = 1 --[[ @ 0]], CoD.QueueUtility.TimedFnQueueMaxSize, 1 do
		table.insert( f337_arg0.widgetModels, Engine[@"CreateModel"]( f337_local0, "AbilityCallout" .. f337_local1 ) ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetAbilityCallout = function ( f338_arg0, f338_arg1, f338_arg2 )
	local f338_local0 = f338_arg0.widgetModels[f338_arg1] --[[ @ 0]]
	local f338_local1 = f338_local0:create( "abilityName" ) --[[ @ 0]]
	local f338_local2 = f338_local0:create( "abilityIcon" ) --[[ @ 0]]
	local f338_local3 = f338_local0:create( "clientNum" ) --[[ @ 0]]
	f338_local1:set( f338_arg2.notificationText ) --[[ @ 0]]
	f338_local2:set( f338_arg2.notificationIcon ) --[[ @ 0]]
	f338_local3:set( f338_arg2.clientNum ) --[[ @ 0]]
	local f338_local4 = CoD.AbilityCallout.new( f338_arg0.menu, f338_arg0.controller ) --[[ @ 0]]
	f338_local4:setModel( f338_local0, controller ) --[[ @ 0]]
	f338_arg0:addElement( f338_local4 ) --[[ @ 0]]
	f338_local4:playClip( "Activate" ) --[[ @ 0]]
	f338_local4:registerEventHandler( "clip_over", function ()
		CoD.QueueUtility.PumpTimedFnQueue( f338_arg0 ) --[[ @ 0]]
		f338_local4:close() --[[ @ 0]]
	end ) --[[ @ 0]]
	return f338_local4
end
 --[[ @ 0]]
CoD.HUDUtility.InitOverheadNameClampWatch = function ( f340_arg0, f340_arg1 )
	f340_arg0:linkToElementModel( f340_arg0, "abilityCallout.index", true, function ( model )
		local f341_local0 = Engine[@"hash_4FA75409B5FA0438"]( model:get() ) --[[ @ 0]]
		local f341_local1 = f341_local0 and f341_local0 ~= "" --[[ @ 0]]
		local f341_local2 = f340_arg0:getModel() --[[ @ 0]]
		f341_local2 = f341_local2:create( "abilityCallout.shouldClamp" ) --[[ @ 0]]
		f341_local2:set( f341_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ShowAbilityCalloutOverheadIcon = function ( f342_arg0, f342_arg1 )
	local f342_local0 = f342_arg0:getModel( f342_arg1, "index" ) --[[ @ 0]]
	if not f342_local0 then
		f342_local0 = f342_arg0:getModel( f342_arg1, "abilityCallout.index" ) --[[ @ 0]]
	end
	if f342_local0 then
		local f342_local1 = f342_local0:get() or 0 --[[ @ 0]]
		if f342_local1 ~= 0 then
			local f342_local2 = Engine[@"hash_4FA75409B5FA0438"]( f342_local1 ) --[[ @ 0]]
			return f342_local2 and f342_local2 ~= ""
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.GetAbilityCalloutOverheadIcon = function ( f343_arg0 )
	local f343_local0 = Engine[@"hash_4FA75409B5FA0438"]( f343_arg0 ) --[[ @ 0]]
	if not f343_local0 or f343_local0 == "" then
		return RegisterImage( @"blacktransparent" )
	else
		return f343_local0
	end
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateMessageTimer = function ( f344_arg0, f344_arg1 )
	local f344_local0 = f344_arg1:get() --[[ @ 0]]
	if f344_local0 >= 0 then
		f344_arg0:setText( f344_local0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetupReviveHud = function ( f345_arg0, f345_arg1, f345_arg2 )
	assert( f345_arg1 ) --[[ @ 0]]
	f345_arg1:setAlpha( 0 ) --[[ @ 0]]
	local f345_local0 = f345_arg0:getModel() --[[ @ 0]]
	f345_local0 = f345_local0:create( "clientName" ) --[[ @ 0]]
	f345_local0:set( "" ) --[[ @ 0]]
	f345_arg0:linkToElementModel( f345_arg0, "clientNum", true, function ( model )
		local f346_local0 = f345_arg0:getModel() --[[ @ 0]]
		f346_local0.clientName:set( GetClientNameAndClanTag( f345_arg2, model:get() or 0 ) ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f345_arg0:linkToElementModel( f345_arg0, "fadeTime", true, function ( model )
		if not Engine[@"IsVisibilityBitSet"]( f345_arg2, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) then
			local f347_local0 = (model:get() or 0) * 100 --[[ @ 0]]
			if f347_local0 == 0 then
				f345_arg1:setAlpha( 0 ) --[[ @ 0]]
			else
				f345_arg1:setAlpha( 1 ) --[[ @ 0]]
				f345_arg1:beginAnimation( f347_local0 ) --[[ @ 0]]
				f345_arg1:setAlpha( 0 ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSources.Consequences = {
	preparedForController = {},
	prepare = function ( f348_arg0 )
		if not DataSources.Consequences.preparedForController then
			DataSources.Consequences.preparedForController = {} --[[ @ 0]]
		end
		local f348_local0 = Engine[@"GetModelForController"]( f348_arg0 ) --[[ @ 0]]
		f348_local0 = f348_local0:create( "Consequences" ) --[[ @ 0]]
		f348_local0:create( "message" ) --[[ @ 0]]
		f348_local0:create( "detail" ) --[[ @ 0]]
		f348_local0:create( "image" ) --[[ @ 0]]
		f348_local0:create( "color" ) --[[ @ 0]]
		DataSources.Consequences.preparedForController[f348_arg0] = true --[[ @ 0]]
	end,
	getModel = function ( f349_arg0 )
		if not DataSources.Consequences.preparedForController or not DataSources.Consequences.preparedForController[f349_arg0] then
			DataSources.Consequences.prepare( f349_arg0 ) --[[ @ 0]]
		end
		local f349_local0 = Engine[@"GetModelForController"]( f349_arg0 ) --[[ @ 0]]
		return f349_local0:create( "Consequences" )
	end
} --[[ @ 0]]
CoD.HUDUtility.UpdateConsequenceModels = function ( f350_arg0, f350_arg1, f350_arg2, f350_arg3 )
	local f350_local0 = CoD.BaseUtility.GetMapValue( Engine[@"GetCurrentMapName"](), @"hash_76FC7A35E5798506" ) --[[ @ 0]]
	if f350_local0 then
		local f350_local1 = Engine[@"hash_7A7E3CD65E63086F"]( Engine[@"hash_1C53F8D38DF9042B"]( f350_local0 ) ) --[[ @ 0]]
		if f350_local1 then
			local f350_local2 = f350_local1[f350_arg3:get() + 1] --[[ @ 0]]
			if f350_local2 then
				local f350_local3 = DataSources.Consequences.getModel( f350_arg2 ) --[[ @ 0]]
				local f350_local4 = CoD.TeamUtility.GetTeam( f350_arg2 ) --[[ @ 0]]
				if f350_local4 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
					f350_local3.message:set( f350_local2[@"hash_649E5C6703DBB1E"] or "" ) --[[ @ 0]]
					f350_local3.detail:set( f350_local2[@"hash_224EA0F017CE531E"] or "" ) --[[ @ 0]]
					f350_local3.image:set( f350_local2[@"hash_5553E4FB59CCE764"] or "" ) --[[ @ 0]]
					f350_local3.color:set( f350_local2[@"hash_4C73D00CD9C9B1CE"] or "" ) --[[ @ 0]]
				elseif f350_local4 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
					f350_local3.message:set( f350_local2[@"hash_4CA7E27A0369F53"] or "" ) --[[ @ 0]]
					f350_local3.detail:set( f350_local2[@"hash_4E88D19F26C542E5"] or "" ) --[[ @ 0]]
					f350_local3.image:set( f350_local2[@"hash_162B0D276D1E7481"] or "" ) --[[ @ 0]]
					f350_local3.color:set( f350_local2[@"hash_15230C64036337BB"] or "" ) --[[ @ 0]]
				end
			end
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.LinkSetupEntityContainerToModel = function ( f351_arg0, f351_arg1, f351_arg2, f351_arg3, f351_arg4, f351_arg5, f351_arg6 )
	f351_arg0:setLeftRight( 0, 0, 0, 0 ) --[[ @ 0]]
	f351_arg0:setTopBottom( 0, 0, 0, 0 ) --[[ @ 0]]
	f351_arg0:setEntityContainerClamp( f351_arg2 ) --[[ @ 0]]
	f351_arg0:setEntityContainerScale( f351_arg3 ) --[[ @ 0]]
	f351_arg0:linkToElementModel( f351_arg0, f351_arg1, true, function ( model )
		local f352_local0 = model:get() --[[ @ 0]]
		if f352_local0 ~= nil then
			f351_arg0:setupEntityContainer( f352_local0, f351_arg4, f351_arg5, f351_arg6 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.InitLuiElemSelfModel = function ( f353_arg0, f353_arg1, f353_arg2 )
	local f353_local0 = f353_arg0:getModel() --[[ @ 0]]
	f353_local0 = f353_local0:create( f353_arg1 ) --[[ @ 0]]
	f353_local0:set( f353_arg2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupGrenadeWarningIndicators = function ( f354_arg0, f354_arg1 )
	local f354_local0 = DataSources.WorldSpaceIndicators.getModel( f354_arg1 ) --[[ @ 0]]
	local f354_local1 = 0 --[[ @ 0]]
	local f354_local2 = true --[[ @ 0]]
	while f354_local2 do
		local f354_local3 = f354_local0:create( "warningIndicator" .. f354_local1 ) --[[ @ 0]]
		f354_local3:create( "image" ) --[[ @ 0]]
		local f354_local4 = f354_local3:create( "direction" ) --[[ @ 0]]
		f354_local4:set( 0 ) --[[ @ 0]]
		f354_local4 = f354_local3:create( "clamped" ) --[[ @ 0]]
		f354_local4:set( false ) --[[ @ 0]]
		f354_local4 = f354_local3:create( "timeLeftPercent" ) --[[ @ 0]]
		f354_local4:set( 0.1 ) --[[ @ 0]]
		f354_local4 = CoD.grenadeWarning.new( f354_arg0, f354_arg1, 0, 0, 0, CoD.grenadeWarning.__defaultWidth, 0, 0, 0, CoD.grenadeWarning.__defaultHeight ) --[[ @ 0]]
		f354_local4.id = "grenadeWarning" .. f354_local1 --[[ @ 0]]
		f354_local4:setModel( f354_local3, f354_arg1 ) --[[ @ 0]]
		f354_local2 = f354_local4:setupGrenadeWarning( f354_local1 ) --[[ @ 0]]
		f354_arg0.fullscreenContainer:addElement( f354_local4 ) --[[ @ 0]]
		f354_arg0:sendInitializationEvents( f354_arg1, f354_local4 ) --[[ @ 0]]
		f354_local1 = f354_local1 + 1 --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetupArmbladeReticles = function ( f355_arg0, f355_arg1 )
	f355_arg0:subscribeToGlobalModel( f355_arg1, "PerController", "playerAbilities.playerGadget2.id", function ( model )
		if model and Engine[@"GetModelValue"]( model ) == @"hash_36FE71BB75A52D1" then
			if not f355_arg0.armbladeReticles then
				local f356_local0 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f355_arg1 ), "ArmbladeReticles" ) --[[ @ 0]]
				f355_arg0.armbladeReticles = {} --[[ @ 0]]
				local f356_local1 = true --[[ @ 0]]
				local f356_local2 = 0 --[[ @ 0]]
				while f356_local1 do
					local f356_local3 = CoD.RipperLockReticle.new( f355_arg0, f355_arg1, 0, 0, 0, CoD.RipperLockReticle.__defaultWidth, 0, 0, 0, CoD.RipperLockReticle.__defaultHeight ) --[[ @ 0]]
					local f356_local4 = Engine[@"CreateModel"]( f356_local0, #f355_arg0.armbladeReticles ) --[[ @ 0]]
					LUI.CreateModelsAndInitialize( f356_local4, {
						status = 0
					} ) --[[ @ 0]]
					f356_local3:setModel( f356_local4, f355_arg1 ) --[[ @ 0]]
					f355_arg0:sendInitializationEvents( f355_arg1, f356_local3 ) --[[ @ 0]]
					f356_local1 = f356_local3:setupArmBladeTarget( f355_arg1, #f355_arg0.armbladeReticles ) --[[ @ 0]]
					table.insert( f355_arg0.armbladeReticles, f356_local3 ) --[[ @ 0]]
					f355_arg0.fullscreenContainer:addElement( f356_local3 ) --[[ @ 0]]
				end
			end
		elseif f355_arg0.armbladeReticles then
			for f356_local3, f356_local4 in ipairs( f355_arg0.armbladeReticles ) --[[ @ 0]] do
				f356_local4:close() --[[ @ 0]]
			end
			f355_arg0.armbladeReticles = nil --[[ @ 0]]
			f356_local0 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f355_arg1 ), "ArmbladeReticles" ) --[[ @ 0]]
			if f356_local0 then
				Engine[@"UnsubscribeAndFreeModel"]( f356_local0 ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupWZArmbladeReticles = function ( f357_arg0, f357_arg1 )
	f357_arg0:subscribeToGlobalModel( f357_arg1, "PerController", "heldWeapons.0.equippedWeaponReference", function ( model )
		if model and Engine[@"GetModelValue"]( model ) == @"hash_324DD1BB71A5659" then
			if not f357_arg0.armbladeReticles then
				local f358_local0 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f357_arg1 ), "ArmbladeReticles" ) --[[ @ 0]]
				f357_arg0.armbladeReticles = {} --[[ @ 0]]
				local f358_local1 = true --[[ @ 0]]
				local f358_local2 = 0 --[[ @ 0]]
				while f358_local1 do
					local f358_local3 = CoD.RipperLockReticle.new( f357_arg0, f357_arg1, 0, 0, 0, CoD.RipperLockReticle.__defaultWidth, 0, 0, 0, CoD.RipperLockReticle.__defaultHeight ) --[[ @ 0]]
					local f358_local4 = Engine[@"CreateModel"]( f358_local0, #f357_arg0.armbladeReticles ) --[[ @ 0]]
					LUI.CreateModelsAndInitialize( f358_local4, {
						status = 0
					} ) --[[ @ 0]]
					f358_local3:setModel( f358_local4, f357_arg1 ) --[[ @ 0]]
					f357_arg0:sendInitializationEvents( f357_arg1, f358_local3 ) --[[ @ 0]]
					f358_local1 = f358_local3:setupArmBladeTarget( f357_arg1, #f357_arg0.armbladeReticles ) --[[ @ 0]]
					table.insert( f357_arg0.armbladeReticles, f358_local3 ) --[[ @ 0]]
					f357_arg0.fullscreenContainer:addElement( f358_local3 ) --[[ @ 0]]
				end
			end
		elseif f357_arg0.armbladeReticles then
			for f358_local3, f358_local4 in ipairs( f357_arg0.armbladeReticles ) --[[ @ 0]] do
				f358_local4:close() --[[ @ 0]]
			end
			f357_arg0.armbladeReticles = nil --[[ @ 0]]
			f358_local0 = Engine[@"GetModel"]( Engine[@"GetModelForController"]( f357_arg1 ), "ArmbladeReticles" ) --[[ @ 0]]
			if f358_local0 then
				Engine[@"UnsubscribeAndFreeModel"]( f358_local0 ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.GetPredictedClientNameAndClanTag = function ( f359_arg0, f359_arg1 )
	local f359_local0 = Engine[@"GetPredictedClientNum"]( f359_arg0 ) --[[ @ 0]]
	return GetClientClantag( f359_arg0, f359_local0 ) .. GetClientName( f359_arg0, f359_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetClientNameAndClanTagForClientNum = function ( f360_arg0, f360_arg1 )
	local f360_local0 = f360_arg1 --[[ @ 0]]
	return GetClientClantag( f360_arg0, f360_local0 ) .. GetClientName( f360_arg0, f360_local0 )
end
 --[[ @ 0]]
CoD.HUDUtility.GetScriptBundleStringField = function ( f361_arg0, f361_arg1, f361_arg2 )
	local f361_local0 = Engine[@"hash_2E00B2F29271C60B"]( f361_arg2 ) --[[ @ 0]]
	if not f361_local0 then
		return @"hash_0"
	else
		return f361_local0[f361_arg1]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetScriptBundleField = function ( f362_arg0, f362_arg1, f362_arg2 )
	return CoD.HUDUtility.GetScriptBundleStringField( f362_arg0, f362_arg1, f362_arg2 )
end
 --[[ @ 0]]
CoD.HUDUtility.GiveFocus = function ( f363_arg0, f363_arg1 )
	if f363_arg0._readyForCustomFocus == false then
		return false
	elseif f363_arg0._customGainFocusWidgets then
		for f363_local3, f363_local4 in ipairs( f363_arg0._customGainFocusWidgets ) --[[ @ 0]] do
			if CoD.HUDUtility.GiveFocus( f363_local4, f363_arg1 ) then
				return true
			end
		end
		return false
	elseif f363_arg0._readyForCustomFocus then
		return f363_arg0:processEvent( {
			name = "gain_focus",
			controller = f363_arg1
		} )
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GiveFocusToMenu = function ( f364_arg0, f364_arg1 )
	CoD.HUDUtility.GiveFocus( f364_arg0, f364_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.AddCustomGainFocusWidget = function ( f365_arg0, f365_arg1 )
	if not f365_arg0._customGainFocusWidgets then
		f365_arg0._customGainFocusWidgets = {} --[[ @ 0]]
	end
	if f365_arg1._readyForCustomFocus == nil then
		f365_arg1._readyForCustomFocus = true --[[ @ 0]]
	end
	table.insert( f365_arg0._customGainFocusWidgets, f365_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ClearCustomGainFocusWidgets = function ( f366_arg0 )
	f366_arg0._customGainFocusWidgets = {} --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.PushAllowButtonRepeats = function ( f367_arg0, f367_arg1 )
	if f367_arg0._allowingButtonRepeats then
		return 
	else
		f367_arg0._allowingButtonRepeats = true --[[ @ 0]]
		Engine[@"hash_38BD6378ACE0B73A"]( f367_arg1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.PopAllowButtonRepeats = function ( f368_arg0, f368_arg1 )
	if not f368_arg0._allowingButtonRepeats then
		return 
	else
		f368_arg0._allowingButtonRepeats = nil --[[ @ 0]]
		Engine[@"hash_7582D5FD52C48523"]( f368_arg1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetAsCurrentMultiItemPickup = function ( f369_arg0, f369_arg1 )
	local f369_local0 = DataSources.MultiItemPickup.getModel( f369_arg0 ) --[[ @ 0]]
	f369_local0.currentSelection:set( f369_arg1:getModel() ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IsValidListToUpdateTabCount = function ( f370_arg0, f370_arg1 )
	local f370_local0 = function ( f371_arg0, f371_arg1 )
		return CoD.isPC and IsMouseOrKeyboard( f371_arg1 ) and f371_arg0.__isForKBM
	end
	 --[[ @ 0]]
	local f370_local1 = function ( f372_arg0, f372_arg1 )
		return IsGamepad( f372_arg1 ) and f372_arg0.__isForGamepad
	end
	 --[[ @ 0]]
	local f370_local2 = f370_local0( f370_arg0, f370_arg1 ) --[[ @ 0]]
	if not f370_local2 then
		f370_local2 = f370_local1( f370_arg0, f370_arg1 ) --[[ @ 0]]
	end
	return f370_local2
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "MultiItemPickup", "hudItems.multiItemPickup", function ( f373_arg0, f373_arg1 )
	local f373_local0 = f373_arg0:create( "count" ) --[[ @ 0]]
	f373_local0:set( 0 ) --[[ @ 0]]
	f373_local0 = f373_arg0:create( "status" ) --[[ @ 0]]
	f373_local0:set( Enum[@"hash_163CDAE6010C493"][@"hash_1E16E7DEBC8823D8"] ) --[[ @ 0]]
	f373_local0 = f373_arg0:create( "tabCount" ) --[[ @ 0]]
	f373_local0:set( 1 ) --[[ @ 0]]
	f373_local0 = f373_arg0:create( "currentTabIndex" ) --[[ @ 0]]
	f373_local0:set( 1 ) --[[ @ 0]]
	f373_arg0:create( "currentSelection" ) --[[ @ 0]]
	f373_arg0:create( "forceNotifyActive" ) --[[ @ 0]]
	f373_arg0:create( "forceNotifyAmmoList" ) --[[ @ 0]]
end, false, {
	prepare = function ( f374_arg0, f374_arg1, f374_arg2 )
		if not f374_arg1._rootModel then
			f374_arg1._rootModel = DataSources.MultiItemPickup.getModel( f374_arg0 ) --[[ @ 0]]
			f374_arg1:subscribeToModel( f374_arg1._rootModel.count, function ()
				if CoD.HUDUtility.IsValidListToUpdateTabCount( f374_arg1, f374_arg0 ) and f374_arg1.vCount > 1 then
					f374_arg1._rootModel.tabCount:set( math.ceil( math.ceil( f374_arg1._rootModel.count:get() / f374_arg1.hCount ) / f374_arg1.vCount ) ) --[[ @ 0]]
					f374_arg1._rootModel.currentTabIndex:set( 1 ) --[[ @ 0]]
				end
				if IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
					CoD.WZUtility.HackUpdateListDataSourceAfterDelay( f374_arg1, true, false, false, 0 ) --[[ @ 0]]
				else
					f374_arg1:clearLayout() --[[ @ 0]]
					CoD.WZUtility.HackUpdateListDataSourceAfterDelay( f374_arg1, true, false, true, 0 ) --[[ @ 0]]
					if f374_arg1._currentSelectionId then
						f374_arg1:findItem( {
							id = f374_arg1._currentSelectionId
						}, nil, true, nil ) --[[ @ 0]]
						f374_arg1._currentSelectionId = nil --[[ @ 0]]
					end
				end
			end, false ) --[[ @ 0]]
			f374_arg1._dummyModel = f374_arg1._rootModel:create( "dummyItem" ) --[[ @ 0]]
			local f374_local0 = f374_arg1._dummyModel:create( "isDummy" ) --[[ @ 0]]
			f374_local0:set( true ) --[[ @ 0]]
			f374_local0 = f374_arg1._dummyModel:create( "icon" ) --[[ @ 0]]
			f374_local0:set( @"blacktransparent" ) --[[ @ 0]]
			f374_local0 = f374_arg1._dummyModel:create( "stackCount" ) --[[ @ 0]]
			f374_local0:set( 0 ) --[[ @ 0]]
			f374_local0 = f374_arg1._dummyModel:create( "stashStackSize" ) --[[ @ 0]]
			f374_local0:set( 0 ) --[[ @ 0]]
			f374_local0 = f374_arg1._dummyModel:create( "collapsed" ) --[[ @ 0]]
			f374_local0:set( false ) --[[ @ 0]]
			f374_arg1._collapsedModel = f374_arg1._rootModel:create( "collapsedItem" ) --[[ @ 0]]
			f374_local0 = f374_arg1._collapsedModel:create( "collapsed" ) --[[ @ 0]]
			f374_local0:set( true ) --[[ @ 0]]
			LUI.OverrideFunction_CallOriginalFirst( f374_arg1, "pageDown", function ()
				f374_arg1._rootModel.currentTabIndex:set( math.ceil( f374_arg1.currentStartRow / f374_arg1.vCount ) ) --[[ @ 0]]
			end ) --[[ @ 0]]
			LUI.OverrideFunction_CallOriginalFirst( f374_arg1, "pageUp", function ()
				f374_arg1._rootModel.currentTabIndex:set( math.ceil( f374_arg1.currentStartRow / f374_arg1.vCount ) ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end,
	getCount = function ( f378_arg0 )
		if f378_arg0.vCount > 1 then
			local f378_local0 = f378_arg0._rootModel.count:get() --[[ @ 0]]
			if IsMouseOrKeyboard( f378_arg0.controller ) then
				return f378_local0
			end
			local f378_local1 = math.ceil( f378_local0 / f378_arg0.hCount ) --[[ @ 0]]
			if f378_arg0.vCount < f378_local1 then
				f378_local1 = math.ceil( f378_local1 / f378_arg0.vCount ) * f378_arg0.vCount --[[ @ 0]]
			end
			return math.max( f378_local1, f378_arg0.vCount ) * f378_arg0.hCount
		else
			return f378_arg0._rootModel.count:get() + (IsMouseOrKeyboard( f378_arg0.controller ) and 0 or math.floor( f378_arg0.hCount / 2 ))
		end
	end,
	getItem = function ( f379_arg0, f379_arg1, f379_arg2 )
		if f379_arg1.vCount > 1 then
			local f379_local0 = f379_arg1._rootModel.count:get() --[[ @ 0]]
			if IsMouseOrKeyboard( f379_arg1.controller ) or f379_arg2 <= f379_local0 then
				local f379_local1 = f379_arg1._rootModel["item" .. f379_arg2 - 1] --[[ @ 0]]
				local f379_local2 = f379_local1:create( "isDummy" ) --[[ @ 0]]
				f379_local2:set( false ) --[[ @ 0]]
				f379_local2 = f379_local1:create( "collapsed" ) --[[ @ 0]]
				f379_local2:set( false ) --[[ @ 0]]
				return f379_arg1._rootModel["item" .. f379_arg2 - 1]
			else
				local f379_local1 = math.ceil( f379_arg2 / f379_arg1.hCount ) --[[ @ 0]]
				local f379_local2 = math.ceil( f379_local0 / f379_arg1.hCount ) --[[ @ 0]]
				if f379_local1 <= f379_local2 or f379_arg1.vCount < f379_local2 then
					return f379_arg1._dummyModel
				else
					return f379_arg1._collapsedModel
				end
			end
		elseif not IsMouseOrKeyboard( f379_arg0 ) and f379_arg2 < f379_arg1.hCount / 2 then
			return f379_arg1._dummyModel
		elseif IsMouseOrKeyboard( f379_arg0 ) then
			local f379_local3 = f379_arg2 --[[ @ 0]]
		end
		return f379_arg1._rootModel["item" .. f379_local3 or f379_arg2 - math.floor( f379_arg1.hCount / 2 ) - 1]
	end,
	getSpacerAfterRow = function ( f380_arg0, f380_arg1, f380_arg2 )
		if f380_arg0.vCount > 1 and not IsMouseOrKeyboard( f380_arg0.controller ) then
			local f380_local0 = math.ceil( f380_arg0._rootModel.count:get() / f380_arg0.hCount ) --[[ @ 0]]
			if f380_local0 <= f380_arg1 and f380_local0 <= f380_arg0.vCount then
				return -f380_arg0.spacing
			end
		end
		return 0
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "MultiItemPickupTab", "hudItems.multiItemPickup.tabs", function ( f381_arg0, f381_arg1 )
	
end, false, {
	prepare = function ( f382_arg0, f382_arg1, f382_arg2 )
		if not f382_arg1._rootModel then
			f382_arg1._rootModel = DataSources.MultiItemPickupTab.getModel( f382_arg0 ) --[[ @ 0]]
			local f382_local0 = f382_arg1 --[[ @ 0]]
			local f382_local1 = f382_arg1.subscribeToModel --[[ @ 0]]
			local f382_local2 = DataSources.MultiItemPickup.getModel( f382_arg0 ) --[[ @ 0]]
			f382_local1( f382_local0, f382_local2.tabCount, function ()
				f382_arg1:clearLayout() --[[ @ 0]]
				CoD.WZUtility.HackUpdateListDataSourceAfterDelay( f382_arg1, false, false, false, 0 ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f382_local0 = f382_arg1 --[[ @ 0]]
			f382_local1 = f382_arg1.subscribeToModel --[[ @ 0]]
			f382_local2 = DataSources.MultiItemPickup.getModel( f382_arg0 ) --[[ @ 0]]
			f382_local1( f382_local0, f382_local2.currentTabIndex, function ()
				f382_arg1:clearLayout() --[[ @ 0]]
				CoD.WZUtility.HackUpdateListDataSourceAfterDelay( f382_arg1, false, false, false, 0 ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			f382_arg1._unselectedTab = f382_arg1._rootModel:create( "unselectedTab" ) --[[ @ 0]]
			f382_arg1._selectedTab = f382_arg1._rootModel:create( "selectedTab" ) --[[ @ 0]]
			f382_local1 = f382_arg1._selectedTab:create( "selected" ) --[[ @ 0]]
			f382_local1:set( true ) --[[ @ 0]]
			f382_arg1._leftBumper = f382_arg1._rootModel:create( "leftBumper" ) --[[ @ 0]]
			f382_local1 = f382_arg1._leftBumper:create( "leftBumper" ) --[[ @ 0]]
			f382_local1:set( true ) --[[ @ 0]]
			f382_arg1._rightBumper = f382_arg1._rootModel:create( "rightBumper" ) --[[ @ 0]]
			f382_local1 = f382_arg1._rightBumper:create( "rightBumper" ) --[[ @ 0]]
			f382_local1:set( true ) --[[ @ 0]]
		end
	end,
	getCount = function ( f385_arg0 )
		local f385_local0 = DataSources.MultiItemPickup.getModel( f385_arg0.controller ) --[[ @ 0]]
		f385_local0 = f385_local0.tabCount:get() --[[ @ 0]]
		if f385_local0 > 1 then
			return f385_local0 + 2
		else
			return 0
		end
	end,
	getItem = function ( f386_arg0, f386_arg1, f386_arg2 )
		if f386_arg2 == 1 then
			return f386_arg1._leftBumper
		else
			local f386_local0 = f386_arg2 - 1 --[[ @ 0]]
			local f386_local1 = DataSources.MultiItemPickup.getModel( f386_arg0 ) --[[ @ 0]]
			if f386_local0 == f386_local1.currentTabIndex:get() then
				return f386_arg1._selectedTab
			else
				f386_local0 = f386_arg2 - 1 --[[ @ 0]]
				f386_local1 = DataSources.MultiItemPickup.getModel( f386_arg1.controller ) --[[ @ 0]]
				if f386_local1.tabCount:get() < f386_local0 then
					return f386_arg1._rightBumper
				else
					return f386_arg1._unselectedTab
				end
			end
		end
	end
} ) --[[ @ 0]]
CoD.HUDUtility.SetDataSourceModelToSelectedIndex = function ( f387_arg0, f387_arg1, f387_arg2, f387_arg3 )
	local f387_local0 = f387_arg3.gridInfoTable.zeroBasedIndex --[[ @ 0]]
	local f387_local1 = DataSources[f387_arg1].getModel( f387_arg0 ) --[[ @ 0]]
	f387_local1[f387_arg2]:set( f387_local0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetupMonitorForClipActive = function ( f388_arg0 )
	f388_arg0._isPlaying = nil --[[ @ 0]]
	f388_arg0:registerEventHandler( "clip_over", function ( element, event )
		element._isPlaying = nil --[[ @ 0]]
		LUI.UIElement.clipOver( element, event ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.RegisterArmorDamageStageClip = function ( f390_arg0, f390_arg1, f390_arg2 )
	if not f390_arg0._stageClips then
		f390_arg0._stageClips = {} --[[ @ 0]]
	end
	f390_arg0._stageClips[tonumber( f390_arg1 )] = f390_arg2 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.PlayArmorDamageClip = function ( f391_arg0, f391_arg1 )
	local f391_local0 = f391_arg1:get() --[[ @ 0]]
	if f391_arg0._stageClips and f391_arg0._stageClips[f391_local0] then
		local f391_local1 = f391_arg0._stageClips[f391_local0] --[[ @ 0]]
		if f391_arg0._isPlaying then
			f391_arg0.nextClip = f391_local1 --[[ @ 0]]
		else
			f391_arg0._isPlaying = true --[[ @ 0]]
			f391_arg0:playClip( f391_local1 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsArmorAtFullHealth = function ( f392_arg0 )
	local f392_local0 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f392_arg0 ) ) --[[ @ 0]]
	local f392_local1 = f392_local0.armor and f392_local0.armor:get() or 0 --[[ @ 0]]
	local f392_local2 = f392_local0.armorMax and f392_local0.armorMax:get() or 0 --[[ @ 0]]
	local f392_local3 --[[ @ 0]]
	if f392_local2 <= 0 or f392_local1 ~= f392_local2 then
		f392_local3 = false --[[ @ 0]]
	else
		f392_local3 = true --[[ @ 0]]
	end
	return f392_local3
end
 --[[ @ 0]]
CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenAmmo = function ( f393_arg0 )
	if CoD.HUDUtility.HiddenAmmoWeapons == nil then
		local f393_local0 = {
			@"ball",
			@"briefcase_bomb",
			@"briefcase_bomb_defuse",
			@"hash_10D333D04C24A8E0",
			@"hash_67B0E02B21CA4B07",
			@"hash_324A0E39E2CD5532",
			@"hash_4870EFC1575EBB12",
			@"hash_23DF876F5EC00D2C",
			@"hash_4156A3B0E81C372F",
			@"hash_25184D02E502ACD9",
			@"hash_28A1C8291D55129D",
			@"hash_330A5823B06EF289",
			@"hash_513E51B223A9D0B5",
			@"hash_765A2EBAA201D495",
			@"syrette",
			@"ai_tank_marker",
			@"autoturret",
			@"combat_robot_marker",
			@"dart",
			@"emp",
			@"rcbomb",
			@"sentinel"
		} --[[ @ 0]]
		local f393_local1 = {
			@"none",
			@"killstreak_remote"
		} --[[ @ 0]]
		CoD.HUDUtility.HiddenAmmoWeapons = {} --[[ @ 0]]
		local f393_local2 = string.lower( CoD.gameMode ) --[[ @ 0]]
		for f393_local6, f393_local7 in ipairs( f393_local0 ) --[[ @ 0]] do
			CoD.HUDUtility.HiddenAmmoWeapons[f393_local7 .. "_" .. f393_local2] = true --[[ @ 0]]
		end
	end
	return CoD.HUDUtility.HiddenAmmoWeapons[CoD.SafeGetModelValue( DataSources.CurrentWeapon.getModel( f393_arg0 ), "viewmodelWeaponName" )]
end
 --[[ @ 0]]
CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenDWAmmo = function ( f394_arg0 )
	if CoD.HUDUtility.HiddenDWAmmoWeapons == nil then
		local f394_local0 = {
			@"special_ballisticknife_t8_dw",
			@"special_ballisticknife_t8_dw_upgraded"
		} --[[ @ 0]]
		local f394_local1 = {
			@"none"
		} --[[ @ 0]]
		CoD.HUDUtility.HiddenDWAmmoWeapons = {} --[[ @ 0]]
		local f394_local2 = string.lower( CoD.gameMode ) --[[ @ 0]]
		for f394_local6, f394_local7 in ipairs( f394_local0 ) --[[ @ 0]] do
			CoD.HUDUtility.HiddenDWAmmoWeapons[f394_local7 .. "_" .. f394_local2] = true --[[ @ 0]]
		end
		for f394_local6, f394_local7 in ipairs( f394_local1 ) --[[ @ 0]] do
			CoD.HUDUtility.HiddenDWAmmoWeapons[f394_local7] = true --[[ @ 0]]
		end
	end
	return CoD.HUDUtility.HiddenDWAmmoWeapons[CoD.SafeGetModelValue( DataSources.CurrentWeapon.getModel( f394_arg0 ), "equippedWeaponReference" )]
end
 --[[ @ 0]]
CoD.HUDUtility.GetArmorBarWipe = function ( f395_arg0, f395_arg1, f395_arg2, f395_arg3, f395_arg4, f395_arg5 )
	local f395_local0 = f395_arg0 --[[ @ 0]]
	local f395_local1 = f395_arg0.armorMax --[[ @ 0]]
	if f395_local1 then
		f395_local1 = f395_local0 and f395_arg0.armorMax:get() --[[ @ 0]]
	end
	if f395_local1 and f395_local1 > 0 then
		return 0, math.min( 1, math.max( 0, f395_arg2 / f395_local1 ) ), 0, 1
	else
		return 0, 0, 0, 0
	end
end
 --[[ @ 0]]
CoD.HUDUtility.PlayUltimateProgressPulseClip = function ( f396_arg0, f396_arg1, f396_arg2, f396_arg3 )
	if not f396_arg0:getModel() then
		return 
	end
	local f396_local0 = f396_arg0:getModel() --[[ @ 0]]
	f396_local0 = f396_local0.powerRatio:get() --[[ @ 0]]
	if f396_local0 then
		local f396_local1 = f396_arg0 --[[ @ 0]]
		local f396_local2 = nil --[[ @ 0]]
		if f396_local1[f396_arg1.elementName] then
			f396_local2 = f396_arg0[f396_arg1.elementName] --[[ @ 0]]
			f396_local2:playClip( f396_arg1.clipName ) --[[ @ 0]]
			f396_local2._pulseTimer = LUI.UITimer.new( f396_arg2 * f396_local0, "pulse_finished", true, f396_local1 ) --[[ @ 0]]
			f396_local2:addElement( f396_local2._pulseTimer ) --[[ @ 0]]
		else
			return 
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.RegisterUltimatePulseFinished = function ( f397_arg0, f397_arg1 )
	f397_arg0:registerEventHandler( "pulse_finished", function ()
		f397_arg0:playClip( f397_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSources.TeammateHealTargeting = {
	preparedForController = {},
	subscriptions = {},
	prepare = function ( f399_arg0 )
		if not DataSources.TeammateHealTargeting.preparedForController then
			DataSources.TeammateHealTargeting.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.TeammateHealTargeting.subscriptions[f399_arg0] then
			DataSources.TeammateHealTargeting.subscriptions[f399_arg0] = LUI.UIElement.new() --[[ @ 0]]
		end
		DataSources.TeammateHealTargeting.subscriptions[f399_arg0]:unsubscribeFromAllModels() --[[ @ 0]]
		DataSources.TeammateHealTargeting.preparedForController[f399_arg0] = true --[[ @ 0]]
		local f399_local0 = Engine[@"GetModelForController"]( f399_arg0 ) --[[ @ 0]]
		f399_local0 = f399_local0:create( "teammateHealTargeting" ) --[[ @ 0]]
		local f399_local1 = f399_local0:create( "targetClient" ) --[[ @ 0]]
		DataSources.TeammateHealTargeting.subscriptions[f399_arg0]:subscribeToModel( f399_local0:create( "targetClientNum" ), function ( model )
			local f400_local0 = model:get() --[[ @ 0]]
			if f400_local0 ~= LuaDefine.INVALID_CLIENT_INDEX then
				f399_local1:set( Engine[@"hash_E4D2F32833CFA6C"]( f400_local0 ) ) --[[ @ 0]]
			end
		end, false ) --[[ @ 0]]
	end,
	getModel = function ( f401_arg0 )
		if not DataSources.TeammateHealTargeting.preparedForController or not DataSources.TeammateHealTargeting.preparedForController[f401_arg0] then
			DataSources.TeammateHealTargeting.prepare( f401_arg0 ) --[[ @ 0]]
		end
		local f401_local0 = Engine[@"GetModelForController"]( f401_arg0 ) --[[ @ 0]]
		return f401_local0.teammateHealTargeting
	end
} --[[ @ 0]]
CoD.HUDUtility.InitTeammateHealTargeting = function ( f402_arg0, f402_arg1 )
	DataSources.TeammateHealTargeting.getModel( f402_arg1 ) --[[ @ 0]]
	f402_arg0:setupTeammateHealTargeting() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.InitTeammateHealTargetingScreen = function ( f403_arg0, f403_arg1, f403_arg2 )
	if not f403_arg0.__teammateHealTargetingScreen then
		f403_arg0.__teammateHealTargetingScreen = CoD.TabletTak5.new( f403_arg2, f403_arg1, 0, 0, 0, CoD.TabletTak5.__defaultWidth, 0, 0, 0, CoD.TabletTak5.__defaultHeight ) --[[ @ 0]]
		f403_arg0:addElement( f403_arg0.__teammateHealTargetingScreen ) --[[ @ 0]]
		f403_arg2:sendInitializationEvents( f403_arg1, f403_arg0.__teammateHealTargetingScreen ) --[[ @ 0]]
		LUI.OverrideFunction_CallOriginalSecond( f403_arg0, "close", function ()
			if f403_arg0.__teammateHealTargetingScreen then
				f403_arg0.__teammateHealTargetingScreen:close() --[[ @ 0]]
				f403_arg0.__teammateHealTargetingScreen = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		LUI.OverrideFunction_CallOriginalSecond( f403_arg0.__teammateHealTargetingScreen, "close", function ()
			f403_arg0.__teammateHealTargetingScreen = nil --[[ @ 0]]
		end ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsTeammateHealTargeting = function ( f406_arg0 )
	local f406_local0 = DataSources.TeammateHealTargeting.getModel( f406_arg0 ) --[[ @ 0]]
	f406_local0 = f406_local0.status --[[ @ 0]]
	local f406_local1 = f406_local0 and f406_local0:get() --[[ @ 0]]
	if f406_local1 then
		return CoD.BitUtility.IsBitwiseAndNonZero( f406_local1, Enum[@"hash_41E41697AC99B868"][@"hash_9A83688E2A4D78"] )
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsTeammateHealTargetAlreadyBoosted = function ( f407_arg0 )
	local f407_local0 = DataSources.TeammateHealTargeting.getModel( f407_arg0 ) --[[ @ 0]]
	f407_local0 = f407_local0.targetClientNum --[[ @ 0]]
	local f407_local1 = f407_local0 and f407_local0:get() --[[ @ 0]]
	if f407_local1 and f407_local1 ~= LuaDefine.INVALID_CLIENT_INDEX then
		local f407_local2 = Engine[@"hash_E4D2F32833CFA6C"]( f407_local1 ) --[[ @ 0]]
		return (f407_local2.health.maxHealth:get() or 0) < (f407_local2.health.maxHealthRegen:get() or 0)
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.AbilityFlashIsFull = function ( f408_arg0, f408_arg1 )
	local f408_local0 = CoD.isWarzone --[[ @ 0]]
	if not f408_local0 then
		f408_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( f408_arg0, f408_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_61CF78BFE5F942F1"], Enum[@"hash_F0447219F15F7F3"][@"hash_3194F4FEC53470DF"] ) --[[ @ 0]]
	end
	return f408_local0
end
 --[[ @ 0]]
CoD.HUDUtility.CheckIfHoldOrToggle = function ( f409_arg0, f409_arg1 )
	if not CoD.isPC then
		return f409_arg1
	elseif f409_arg1 == CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_RADIATION_FIELD and Engine[@"GetProfileVarInt"]( f409_arg0, "radiation_toggle" ) == 1 then
		return CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_RADIATION_FIELD_PRESS
	elseif f409_arg1 == CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD then
		local f409_local0, f409_local1 = Engine[@"hash_27C4C4DBF61B869E"]( f409_arg0, "+toggleads_throw", 0 ) --[[ @ 0]]
		if f409_local0 ~= "" then
			local f409_local2 = f409_local0 --[[ @ 0]]
		end
		if (f409_local2 or f409_local1) ~= "" then
			return CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD_TOGGLE
		elseif Engine[@"GetProfileVarInt"]( f409_arg0, "altads_toggle" ) == 1 then
			return CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_BATTLESHIELD_PRESS
		end
	end
	return f409_arg1
end
 --[[ @ 0]]
CoD.HUDUtility.GetSpecialistWeaponHintString = function ( f410_arg0, f410_arg1 )
	return Engine[@"hash_4F9F1239CFD921FE"]( CoD.HUDUtility.SpecialistWeaponHints[CoD.HUDUtility.CheckIfHoldOrToggle( f410_arg0, f410_arg1 )] or @"hash_0" )
end
 --[[ @ 0]]
CoD.HUDUtility.GetSpecialistWeaponHintStringLower = function ( f411_arg0, f411_arg1 )
	local f411_local0 = CoD.HUDUtility.SpecialistWeaponHintsLower[f411_arg1] --[[ @ 0]]
	local f411_local1 --[[ @ 0]]
	if f411_local0 then
		f411_local1 = f411_local0[f411_arg0] --[[ @ 0]]
		if not f411_local1 then
		
		else
			return Engine[@"hash_4F9F1239CFD921FE"]( f411_local1 )
		end
	end
	f411_local1 = @"hash_0" --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SpecialistWeaponHintStringLowerNumElements = function ( f412_arg0, f412_arg1 )
	local f412_local0 = DataSources.HUDItems.getModel( f412_arg0 ) --[[ @ 0]]
	f412_local0 = f412_local0.abilityHintIndex --[[ @ 0]]
	local f412_local1 --[[ @ 0]]
	if f412_local0 then
		f412_local1 = f412_local0:get() --[[ @ 0]]
		if not f412_local1 then
		
		else
			local f412_local2 = CoD.HUDUtility.SpecialistWeaponHintsLower[f412_local1] --[[ @ 0]]
			return f412_local2 and #f412_local2 == f412_arg1
		end
	end
	f412_local1 = CoD.HUDUtility.GagdetHintIndex.GADGET_HINT_INDEX_NONE --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.DisallowXButtonPressForTime = function ( f413_arg0, f413_arg1, f413_arg2 )
	f413_arg1._disallowXButtonPress = true --[[ @ 0]]
	f413_arg1:addElement( LUI.UITimer.newElementTimer( f413_arg2, true, function ()
		f413_arg1._disallowXButtonPress = nil --[[ @ 0]]
	end ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.AreXButtonPressesDisallowed = function ( f415_arg0 )
	return f415_arg0._disallowXButtonPress
end
 --[[ @ 0]]
DataSources.KillcamEquipment = DataSourceHelpers.ListSetup( "KillcamEquipment", function ( f416_arg0 )
	local f416_local0 = {} --[[ @ 0]]
	local f416_local1 = {} --[[ @ 0]]
	local f416_local2 = {} --[[ @ 0]]
	local f416_local3 = {
		Enum[@"hash_1F0AA273B133F18C"][@"hash_12BA0618DA75FC65"],
		Enum[@"hash_1F0AA273B133F18C"][@"hash_12BA0318DA75F74C"],
		Enum[@"hash_1F0AA273B133F18C"][@"hash_12BA0418DA75F8FF"],
		Enum[@"hash_1F0AA273B133F18C"][@"hash_22BC73D8834F0281"],
		Enum[@"hash_1F0AA273B133F18C"][@"hash_60513F5D8C15D723"]
	} --[[ @ 0]]
	local f416_local4 = CoD.CACUtility.GetUnlockableItemTable() --[[ @ 0]]
	local f416_local5 = function ( f417_arg0, f417_arg1 )
		return f417_arg0.sortIndex < f417_arg1.sortIndex
	end
	 --[[ @ 0]]
	local f416_local6 = function ( f418_arg0 )
		local f418_local0 = f416_local4[f418_arg0] --[[ @ 0]]
		if f418_local0 then
			local f418_local1 = {
				name = f418_local0.displayName,
				icon = f418_local0.previewImage,
				loadoutSlotIndex = f418_local0.loadoutSlotIndex,
				sortIndex = f418_local0[@"hash_D909934375BE707"]
			} --[[ @ 0]]
			if not f416_local2[f418_local0.loadoutSlotIndex] then
				f416_local2[f418_local0.loadoutSlotIndex] = 1 --[[ @ 0]]
			else
				f416_local2[f418_local0.loadoutSlotIndex] = f416_local2[f418_local0.loadoutSlotIndex] + 1 --[[ @ 0]]
			end
			table.insert( f416_local1, f418_local1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f416_local7 = Engine[@"GetModelForController"]( f416_arg0 ) --[[ @ 0]]
	f416_local7 = f416_local7.talents --[[ @ 0]]
	if f416_local7 then
		local f416_local8 = f416_local7.count --[[ @ 0]]
		local f416_local9 = f416_local7.count:get() --[[ @ 0]]
	end
	local f416_local10 = f416_local8 and f416_local9 or 0 --[[ @ 0]]
	for f416_local11 = 0 --[[ @ 0]], f416_local10 - 1, 1 do
		local f416_local14 = f416_local7["talent" .. f416_local11] --[[ @ 0]]
		if f416_local14 then
			local f416_local15 = f416_local14.itemIndex --[[ @ 0]]
			if f416_local15 then
				f416_local15 = f416_local14.itemIndex:get() --[[ @ 0]]
			end
			f416_local6( f416_local15 ) --[[ @ 0]]
		end
	end
	local f416_local11 = DataSources.PlayerAbilities.getModel( f416_arg0 ) --[[ @ 0]]
	f416_local11 = f416_local11.playerGadget0 --[[ @ 0]]
	local f416_local16 = f416_local11 --[[ @ 0]]
	local f416_local12 = f416_local11.itemIndex --[[ @ 0]]
	if f416_local12 then
		f416_local12 = f416_local16 and f416_local11.itemIndex:get() --[[ @ 0]]
	end
	f416_local6( f416_local12 ) --[[ @ 0]]
	table.sort( f416_local1, f416_local5 ) --[[ @ 0]]
	for f416_local15, f416_local19 in pairs( f416_local3 ) --[[ @ 0]] do
		if f416_local2[f416_local19] and f416_local2[f416_local19] > 0 then
			local f416_local18 = "KillcamEquipmentGroup_" .. f416_local19 --[[ @ 0]]
			DataSources[f416_local18] = DataSourceHelpers.ListSetup( f416_local18, function ( f419_arg0 )
				local f419_local0 = {} --[[ @ 0]]
				for f419_local4, f419_local5 in ipairs( f416_local1 ) --[[ @ 0]] do
					if f419_local5.loadoutSlotIndex == f416_local19 then
						table.insert( f419_local0, {
							models = {
								name = f419_local5.name,
								icon = f419_local5.icon
							}
						} ) --[[ @ 0]]
					end
				end
				return f419_local0
			end, true ) --[[ @ 0]]
			table.insert( f416_local0, {
				models = {
					groupDatasource = f416_local18
				}
			} ) --[[ @ 0]]
		end
	end
	return f416_local0
end, nil, nil, function ( f420_arg0, f420_arg1, f420_arg2 )
	if not f420_arg1.__killcamEquipmentListCustomSubscriptions then
		f420_arg1.__killcamEquipmentListCustomSubscriptions = true --[[ @ 0]]
		local f420_local0 = Engine[@"GetModelForController"]( f420_arg0 ) --[[ @ 0]]
		f420_local0 = f420_local0.talents --[[ @ 0]]
		local f420_local1 = f420_local0 and f420_local0.anyTalentChanged --[[ @ 0]]
		if f420_local1 then
			f420_arg1:subscribeToModel( f420_local1, function ( model )
				if CoD.SpawnSelectionUtility.IsKillcamActive( f420_arg0 ) then
					f420_arg1:clearLayout() --[[ @ 0]]
					f420_arg1:updateDataSource() --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
		local f420_local2 = DataSources.PlayerAbilities.getModel( f420_arg0 ) --[[ @ 0]]
		f420_local2 = f420_local2.playerGadget0 --[[ @ 0]]
		local f420_local3 = f420_local2 and f420_local2.itemIndex --[[ @ 0]]
		if f420_local3 then
			f420_arg1:subscribeToModel( f420_local3, function ( model )
				if CoD.SpawnSelectionUtility.IsKillcamActive( f420_arg0 ) then
					f420_arg1:clearLayout() --[[ @ 0]]
					f420_arg1:updateDataSource() --[[ @ 0]]
				end
			end ) --[[ @ 0]]
		end
	end
end ) --[[ @ 0]]
CoD.HUDUtility.GetKillcamAttackerClanTagAndName = function ( f423_arg0, f423_arg1 )
	if DataSources.Attacker then
		local f423_local0 = DataSources.Attacker.getModel( f423_arg0 ) --[[ @ 0]]
		if f423_local0 then
			local f423_local1 = f423_local0.clanTag --[[ @ 0]]
			if f423_local1 then
				f423_local1 = f423_local0.clanTag:get() --[[ @ 0]]
			end
			local f423_local2 = f423_local0.name --[[ @ 0]]
			if f423_local2 then
				f423_local2 = f423_local0.name:get() --[[ @ 0]]
			end
			return StringAsClanTag( f423_local1 ) .. f423_local2
		end
	end
	return f423_arg1
end
 --[[ @ 0]]
CoD.HUDUtility.GetKillcamVictimClanTagAndName = function ( f424_arg0, f424_arg1 )
	if DataSources.Victim then
		local f424_local0 = DataSources.Victim.getModel( f424_arg0 ) --[[ @ 0]]
		if f424_local0 then
			local f424_local1 = f424_local0.clanTag --[[ @ 0]]
			if f424_local1 then
				f424_local1 = f424_local0.clanTag:get() --[[ @ 0]]
			end
			local f424_local2 = f424_local0.name --[[ @ 0]]
			if f424_local2 then
				f424_local2 = f424_local0.name:get() --[[ @ 0]]
			end
			return StringAsClanTag( f424_local1 ) .. f424_local2
		end
	end
	return f424_arg1
end
 --[[ @ 0]]
CoD.HUDUtility.MatchOrRoundBeginsIn = function ( f425_arg0 )
	local f425_local0 = f425_arg0 --[[ @ 0]]
	if f425_local0 ~= nil and f425_local0 > 0 then
		return @"hash_EF8CAA66D05D1B8"
	else
		return @"hash_18E58CC95DB34427"
	end
end
 --[[ @ 0]]
CoD.HUDUtility.OpenStartMenu = function ( f426_arg0, f426_arg1 )
	f426_arg0:dispatchEventToRoot( {
		name = "open_ingame_menu",
		uiMenuCommand = Enum[@"hash_152E616D9ABDBF0E"][@"hash_310B85D42D527608"],
		menuName = "StartMenu_Main",
		controller = f426_arg1,
		unpausable = 0
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ForceStreamedSpraysAndGesturesImages = {} --[[ @ 0]]
DataSources.SpraysAndGestures = DataSourceHelpers.ListSetup( "SpraysAndGestures", function ( f427_arg0, f427_arg1 )
	local f427_local0 = {} --[[ @ 0]]
	local f427_local1 = {} --[[ @ 0]]
	local f427_local2 = Engine[@"hash_2B2E4CCC119597B0"]() --[[ @ 0]]
	for f427_local7, f427_local8 in ipairs( Engine[@"hash_688987BA1B9D616B"]( f427_arg0, Engine[@"CurrentSessionMode"]() ) ) --[[ @ 0]] do
		if f427_local7 ~= 1 then
			local f427_local6 = f427_local2[f427_local8] --[[ @ 0]]
			if f427_local6 then
				CoD.CACUtility.AddToTableIfNotEmpty( f427_local1, f427_local6[@"hash_5BFF4CC56C2092F0"] ) --[[ @ 0]]
				table.insert( f427_local0, {
					models = {
						image = f427_local6[@"hash_5BFF4CC56C2092F0"],
						displayName = f427_local6[@"title"],
						index = f427_local7 - 2,
						item_index = f427_local8 - 1,
						chosen = false,
						assetName = f427_local6[@"hash_514C91FFB3BA4240"]
					},
					properties = {}
				} ) --[[ @ 0]]
			else
				table.insert( f427_local0, {
					models = {
						image = @"blacktransparent",
						displayName = @"hash_0",
						index = f427_local7 - 2,
						item_index = 0,
						chosen = false,
						assetName = @"hash_0"
					},
					properties = {}
				} ) --[[ @ 0]]
			end
		end
	end
	CoD.HUDUtility.ForceStreamedSpraysAndGesturesImages = CoD.BaseUtility.ForceStreamHelper( CoD.HUDUtility.ForceStreamedSpraysAndGesturesImages, f427_local1 ) --[[ @ 0]]
	return f427_local0
end, nil ) --[[ @ 0]]
CoD.HUDUtility.SetupQuickSprayModels = function ( f428_arg0, f428_arg1 )
	DataSources.QuickSpray.recreate( f428_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "QuickSpray", "QuickSpray", function ( f429_arg0, f429_arg1 )
	f429_arg0:create( "image" ) --[[ @ 0]]
	f429_arg0:create( "displayName" ) --[[ @ 0]]
	f429_arg0:create( "index" ) --[[ @ 0]]
	local f429_local0 = nil --[[ @ 0]]
	local f429_local1 = 0 --[[ @ 0]]
	local f429_local2 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f429_local2 == Enum[@"eModes"][@"hash_383EBA96F36BC4E5"] or f429_local2 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
		local f429_local3 = Engine[@"hash_2B2E4CCC119597B0"]() --[[ @ 0]]
		local f429_local4 = Engine[@"hash_688987BA1B9D616B"]( f429_arg1, f429_local2 ) --[[ @ 0]]
		f429_local1 = f429_local4[1] --[[ @ 0]]
		f429_local0 = f429_local3[f429_local1] --[[ @ 0]]
	end
	local f429_local3 = f429_arg0.image --[[ @ 0]]
	local f429_local4 = f429_local3 --[[ @ 0]]
	f429_local3 = f429_local3.set --[[ @ 0]]
	local f429_local5 --[[ @ 0]]
	if f429_local0 then
		f429_local5 = f429_local0[@"hash_5BFF4CC56C2092F0"] --[[ @ 0]]
		if not f429_local5 then
		
		else
			f429_local3( f429_local4, f429_local5 ) --[[ @ 0]]
			f429_local3 = f429_arg0.displayName --[[ @ 0]]
			f429_local4 = f429_local3 --[[ @ 0]]
			f429_local3 = f429_local3.set --[[ @ 0]]
			if f429_local0 then
				f429_local5 = f429_local0[@"title"] --[[ @ 0]]
				if not f429_local5 then
				
				else
					f429_local3( f429_local4, f429_local5 ) --[[ @ 0]]
					f429_local3 = f429_arg0.index --[[ @ 0]]
					f429_local4 = f429_local3 --[[ @ 0]]
					f429_local3 = f429_local3.set --[[ @ 0]]
					if f429_local0 then
						f429_local5 = f429_local1 - 1 --[[ @ 0]]
						if not f429_local5 then
						
						else
							f429_local3( f429_local4, f429_local5 ) --[[ @ 0]]
						end
					end
					f429_local5 = -1 --[[ @ 0]]
				end
			end
			f429_local5 = @"hash_0" --[[ @ 0]]
		end
	end
	f429_local5 = @"blacktransparent" --[[ @ 0]]
end, false ) --[[ @ 0]]
CoD.HUDUtility.MenuDelayedSetRightStickLock = function ( f430_arg0, f430_arg1, f430_arg2, f430_arg3 )
	if f430_arg0._delayedSetLockTimer ~= nil then
		f430_arg0._delayedSetLockTimer:close() --[[ @ 0]]
		f430_arg0._delayedSetLockTimer = nil --[[ @ 0]]
		if f430_arg0._isLocked == f430_arg3 then
			return 
		end
	end
	if not f430_arg0._hasHidingRightStickUnlock then
		f430_arg0._hasHidingRightStickUnlock = true --[[ @ 0]]
		LUI.OverrideFunction_CallOriginalFirst( f430_arg0, "close", function ()
			Engine[@"hash_364C13158F7FF920"]( f430_arg1, false ) --[[ @ 0]]
		end ) --[[ @ 0]]
	end
	if f430_arg2 == 0 then
		Engine[@"hash_364C13158F7FF920"]( f430_arg1, f430_arg3 ) --[[ @ 0]]
		f430_arg0._isLocked = f430_arg3 --[[ @ 0]]
	else
		f430_arg0._delayedSetLockTimer = LUI.UITimer.newElementTimer( f430_arg2, true, function ()
			Engine[@"hash_364C13158F7FF920"]( f430_arg1, f430_arg3 ) --[[ @ 0]]
			f430_arg0._delayedSetLockTimer = nil --[[ @ 0]]
			f430_arg0._isLocked = f430_arg3 --[[ @ 0]]
		end ) --[[ @ 0]]
		f430_arg0:addElement( f430_arg0._delayedSetLockTimer ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateStickSelectionModel = function ( f433_arg0, f433_arg1, f433_arg2, f433_arg3, f433_arg4 )
	if f433_arg0._gamepadSelectionEnabled or f433_arg4 then
		local f433_local0 = f433_arg2:getTotalCount() --[[ @ 0]]
		if f433_local0 ~= nil and f433_local0 > 0 then
			local f433_local1 = f433_arg3.Degrees --[[ @ 0]]
			if not f433_arg0._gamepadSelectionEnabled and f433_arg4 then
				local f433_local2 = Engine[@"GetModelForController"]( f433_arg1 ) --[[ @ 0]]
				f433_local1 = f433_local2.hudItems.wheelPointerDegrees --[[ @ 0]]
			end
			local f433_local2 = 360 / f433_local0 --[[ @ 0]]
			local f433_local3 = math.floor( (f433_local1:get() + 270 + f433_local2 * 0.5) % 360 / f433_local2 ) --[[ @ 0]]
			if f433_arg3.SelectedWedge:set( f433_local3 ) then
				f433_arg2:playSound( "wheel_changed" ) --[[ @ 0]]
			end
			local f433_local4 = Engine[@"GetModelForController"]( f433_arg1 ) --[[ @ 0]]
			f433_local4.hudItems.wheelPointerDegrees:set( f433_local1:get() ) --[[ @ 0]]
			f433_arg2._lastSelectedWedgeIndex = f433_local3 --[[ @ 0]]
		end
	else
		f433_arg3.SelectedWedge:set( -1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateSelectionModelFromDegrees = function ( f434_arg0, f434_arg1, f434_arg2, f434_arg3 )
	CoD.HUDUtility.UpdateStickSelectionModel( f434_arg1, f434_arg0, f434_arg2, f434_arg2:getStickModel( f434_arg0 ), f434_arg3 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateCurrentStickSelectionModelOnPC = function ( f435_arg0, f435_arg1, f435_arg2 )
	local f435_local0 = f435_arg2:getTotalCount() --[[ @ 0]]
	if f435_local0 ~= nil and f435_local0 > 0 then
		local f435_local1 = f435_arg2:getStickModel( f435_arg1 ) --[[ @ 0]]
		local f435_local2 = DataSources.FreeCursor.getModel( f435_arg1 ) --[[ @ 0]]
		local f435_local3, f435_local4 = f435_local2.position:get() --[[ @ 0]]
		local f435_local5 = f435_arg2:getCenter() --[[ @ 0]]
		if not f435_local5 then
			return 
		elseif math.sqrt( math.pow( f435_local3 - f435_local5.x, 2 ) + math.pow( f435_local4 - f435_local5.y, 2 ) ) < 50 then
			f435_local1.SelectedWedge:set( -1 ) --[[ @ 0]]
			local f435_local6 = Engine[@"GetModelForController"]( f435_arg1 ) --[[ @ 0]]
			f435_local6.hudItems.wheelPointerDegrees:set( 0 ) --[[ @ 0]]
			f435_arg2._lastSelectedWedgeIndex = -1 --[[ @ 0]]
			return 
		end
		local f435_local7 = math.atan2( f435_local3 - f435_local5.x, f435_local4 - f435_local5.y ) * 180 / math.pi --[[ @ 0]]
		local f435_local8 = 360 / f435_local0 --[[ @ 0]]
		local f435_local9 = math.floor( (f435_local7 + 180 + f435_local8 * 0.5) % 360 / f435_local8 ) --[[ @ 0]]
		if f435_local1.SelectedWedge:set( f435_local9 ) then
			f435_arg2:playSound( "wheel_changed" ) --[[ @ 0]]
		end
		local f435_local10 = (f435_local9 + 2) % f435_local0 --[[ @ 0]]
		local f435_local11 = Engine[@"GetModelForController"]( f435_arg1 ) --[[ @ 0]]
		f435_local11.hudItems.wheelPointerDegrees:set( f435_local10 * f435_local8 ) --[[ @ 0]]
		f435_arg2._lastSelectedWedgeIndex = f435_local9 --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateSelectionModelFromLength = function ( f436_arg0, f436_arg1, f436_arg2, f436_arg3, f436_arg4 )
	local f436_local0 = f436_arg2:getStickModel( f436_arg0 ) --[[ @ 0]]
	local f436_local1 = f436_arg3:get() --[[ @ 0]]
	if f436_arg1._gamepadSelectionEnabled then
		if f436_local1 < 0.5 then
			f436_arg1._gamepadSelectionEnabled = false --[[ @ 0]]
			if not f436_arg4 then
				f436_local0.WheelSelectionEnabled:set( false ) --[[ @ 0]]
			end
		end
	elseif f436_local1 > 0.9 then
		f436_arg1._gamepadSelectionEnabled = true --[[ @ 0]]
		f436_local0.WheelSelectionEnabled:set( true ) --[[ @ 0]]
	end
	if f436_arg4 then
		f436_local0.WheelSelectionEnabled:set( true ) --[[ @ 0]]
	end
	CoD.HUDUtility.UpdateStickSelectionModel( f436_arg1, f436_arg0, f436_arg2, f436_local0, f436_arg4 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.InitStickSelectionModel = function ( f437_arg0, f437_arg1, f437_arg2, f437_arg3 )
	local f437_local0 = f437_arg2:getStickModel( f437_arg1 ) --[[ @ 0]]
	f437_arg0._gamepadSelectionEnabled = false --[[ @ 0]]
	f437_local0.WheelSelectionEnabled:set( true ) --[[ @ 0]]
	local f437_local1 = Engine[@"GetModelForController"]( f437_arg1 ) --[[ @ 0]]
	f437_local1 = f437_local1:create( "hudItems" ) --[[ @ 0]]
	f437_local1 = f437_local1:create( "wheelPointerDegrees" ) --[[ @ 0]]
	f437_local1:set( f437_arg3 ) --[[ @ 0]]
	CoD.HUDUtility.UpdateStickSelectionModel( f437_arg0, f437_arg1, f437_arg2, f437_local0, true ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ResetStickSelectionModel = function ( f438_arg0, f438_arg1, f438_arg2, f438_arg3 )
	local f438_local0 = f438_arg3:getTotalCount() --[[ @ 0]]
	if f438_local0 ~= nil and f438_local0 > 0 then
		local f438_local1 = 90 --[[ @ 0]]
		if f438_arg0._lastSelectedWedge then
			f438_local1 = f438_arg0._lastSelectedWedge * 360 / f438_local0 - 270 --[[ @ 0]]
		end
		CoD.HUDUtility.InitStickSelectionModel( f438_arg1, f438_arg2, f438_arg3, f438_local1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.EndStickSelectionModel = function ( f439_arg0, f439_arg1 )
	local f439_local0 = DataSources[f439_arg1].getModel( f439_arg0 ) --[[ @ 0]]
	f439_local0.SelectedWedge:set( -1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.DisableWheelSelection = function ( f440_arg0, f440_arg1, f440_arg2 )
	local f440_local0 = f440_arg2:getStickModel( f440_arg0 ) --[[ @ 0]]
	f440_arg1._gamepadSelectionEnabled = false --[[ @ 0]]
	f440_local0.WheelSelectionEnabled:set( false ) --[[ @ 0]]
	local f440_local1 = f440_local0.SelectedWedge:get() --[[ @ 0]]
	if f440_local1 < 0 and (f440_arg2._lastSelectedWedgeIndex or -1) >= 0 then
		local f440_local2 = f440_arg2:getElementAtZeroBasedIndex( f440_arg2._lastSelectedWedgeIndex ) --[[ @ 0]]
		if f440_local2 and f440_local2.currentClipIsTransitionClip then
			f440_local1 = f440_arg2._lastSelectedWedgeIndex --[[ @ 0]]
			if f440_local0.SelectedWedge:set( f440_local1 ) then
				f440_arg2:playSound( "wheel_changed" ) --[[ @ 0]]
			end
		end
	end
	if f440_local1 > -1 then
		local f440_local2 = f440_arg2:getModelForIndex( f440_local1 + 1 ) --[[ @ 0]]
		f440_local2.chosen:set( true ) --[[ @ 0]]
		f440_local0.SelectedWedge:set( -1 ) --[[ @ 0]]
		f440_local2.chosen:set( false ) --[[ @ 0]]
		f440_arg2._lastSelectedWedgeIndex = -1 --[[ @ 0]]
		local f440_local3 = f440_arg2:getElementAtZeroBasedIndex( f440_local1 ) --[[ @ 0]]
		if f440_arg2._onChooseWedge then
			f440_arg2._onChooseWedge( f440_local1, f440_local3, f440_local2 ) --[[ @ 0]]
		end
	else
		f440_local0.SelectedWedge:set( -1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsCalloutsButtonPressed = function ( f441_arg0 )
	local f441_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f441_arg0, "ButtonBits.actionSlots.Flourish_Callouts", Enum[@"hash_1A3A4D6F29781E2C"][@"hash_DF43D93F8EF4FEA"] ) --[[ @ 0]]
	if not f441_local0 then
		f441_local0 = CoD.ModelUtility.IsModelValueEqualTo( f441_arg0, "hudItems.PCWheels.calloutWheelKeyPressed", 1 ) --[[ @ 0]]
		if f441_local0 then
			f441_local0 = CoD.ModelUtility.IsModelValueEqualTo( f441_arg0, "hudItems.PCWheels.sprayGestureWheelKeyPressed", 0 ) --[[ @ 0]]
		end
	end
	return f441_local0
end
 --[[ @ 0]]
CoD.HUDUtility.IsWheelPointerVisible = function ( f442_arg0 )
	local f442_local0 = IsMouseOrKeyboard( f442_arg0 ) --[[ @ 0]]
	if not f442_local0 then
		f442_local0 = DataSources.RightStick.getModel( f442_arg0 ) --[[ @ 0]]
		if f442_local0.WheelSelectionEnabled:get() ~= true then
			f442_local0 = DataSources.LeftStick.getModel( f442_arg0 ) --[[ @ 0]]
			if f442_local0.WheelSelectionEnabled:get() ~= true then
				f442_local0 = false --[[ @ 0]]
			else
				f442_local0 = true --[[ @ 0]]
			end
		end
		f442_local0 = true --[[ @ 0]]
	end
	return f442_local0
end
 --[[ @ 0]]
CoD.HUDUtility.HideWheelInPrematch = function ( f443_arg0 )
	if IsWarzone() then
		return false
	else
		return IsInPrematchPeriod( f443_arg0 )
	end
end
 --[[ @ 0]]
CoD.HUDUtility.EnableCalloutWheel = function ()
	return true
end
 --[[ @ 0]]
CoD.HUDUtility.IsSpraysAndGesturesButtonHeld = function ( f445_arg0 )
	local f445_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f445_arg0, "ButtonBits.actionSlots.Sprays_Boasts", Enum[@"hash_1A3A4D6F29781E2C"][@"hash_DF43D93F8EF4FEA"] ) --[[ @ 0]]
	if not f445_local0 then
		f445_local0 = CoD.ModelUtility.IsModelValueEqualTo( f445_arg0, "hudItems.PCWheels.sprayGestureWheelKeyPressed", 1 ) --[[ @ 0]]
		if f445_local0 then
			f445_local0 = CoD.ModelUtility.IsModelValueEqualTo( f445_arg0, "hudItems.PCWheels.calloutWheelKeyPressed", 0 ) --[[ @ 0]]
		end
	end
	return f445_local0
end
 --[[ @ 0]]
CoD.HUDUtility.IsSpraysAndGesturesButtonPressed = function ( f446_arg0 )
	local f446_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f446_arg0, "ButtonBits.actionSlots.Sprays_Boasts", Enum[@"hash_1A3A4D6F29781E2C"][@"hash_643535815622BB59"] ) --[[ @ 0]]
	if not f446_local0 then
		f446_local0 = CoD.ModelUtility.IsModelValueEqualTo( f446_arg0, "hudItems.PCWheels.sprayGestureWheelKeyPressed", 1 ) --[[ @ 0]]
	end
	return f446_local0
end
 --[[ @ 0]]
CoD.HUDUtility.InitWheelPCForMouseDrag = function ( f447_arg0, f447_arg1, f447_arg2, f447_arg3 )
	if not CoD.isPC then
		return 
	else
		local f447_local0 = f447_arg0 --[[ @ 0]]
		local f447_local1 = f447_arg0.subscribeToModel --[[ @ 0]]
		local f447_local2 = DataSources.FreeCursor.getModel( f447_arg1 ) --[[ @ 0]]
		f447_local1( f447_local0, f447_local2.position, function ( f448_arg0 )
			if f447_arg0._mouseSelectionEnabled and not f447_arg0._gamepadSelectionEnabled then
				CoD.HUDUtility.UpdateCurrentStickSelectionModelOnPC( f447_arg0, f447_arg1, f447_arg3 ) --[[ @ 0]]
			end
		end, false ) --[[ @ 0]]
		LUI.OverrideFunction_CallOriginalFirst( f447_arg0, "setState", function ( element, controller, f449_arg2, f449_arg3, f449_arg4 )
			if IsSelfInState( f447_arg0, "Visible" ) then
				if IsMouseOrKeyboard( controller ) then
					CoD.HUDUtility.MenuDelayedSetRightStickLock( f447_arg2, controller, 0, true ) --[[ @ 0]]
					Engine[@"hash_2D368E9CBCFAE9B0"]() --[[ @ 0]]
					f447_arg0._mouseSelectionEnabled = true --[[ @ 0]]
					EnableMouseLockInputBinding( f447_arg2, controller, true, true ) --[[ @ 0]]
				end
			else
				f447_arg0._mouseSelectionEnabled = false --[[ @ 0]]
				local f449_local0 = f447_arg3:getStickModel( controller ) --[[ @ 0]]
				f449_local0.SelectedWedge:set( -1 ) --[[ @ 0]]
				EnableMouseLockInputBinding( f447_arg2, controller, false, true ) --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.InitWheelPCForMouseDragInFrontend = function ( f450_arg0, f450_arg1, f450_arg2, f450_arg3 )
	if not CoD.isPC then
		return 
	else
		local f450_local0 = f450_arg0 --[[ @ 0]]
		local f450_local1 = f450_arg0.subscribeToModel --[[ @ 0]]
		local f450_local2 = DataSources.FreeCursor.getModel( f450_arg1 ) --[[ @ 0]]
		f450_local1( f450_local0, f450_local2.position, function ( f451_arg0 )
			if f450_arg0._mouseSelectionEnabled and not f450_arg0._gamepadSelectionEnabled then
				CoD.HUDUtility.UpdateCurrentStickSelectionModelOnPC( f450_arg0, f450_arg1, f450_arg3 ) --[[ @ 0]]
			end
		end, false ) --[[ @ 0]]
		f450_arg0._mouseSelectionEnabled = true --[[ @ 0]]
		f450_local1 = function ( f452_arg0, f452_arg1, f452_arg2 )
			local f452_local0 = f452_arg1:getTotalCount() --[[ @ 0]]
			if f452_local0 ~= nil and f452_local0 > 0 then
				local f452_local1 = f452_arg1:getStickModel( f452_arg0 ) --[[ @ 0]]
				local f452_local2 = f452_local1.SelectedWedge:get() --[[ @ 0]]
				if f452_local2 == -1 then
					local f452_local3 = 0 --[[ @ 0]]
				end
				f452_local2 = f452_local3 or f452_local2 + f452_arg2 --[[ @ 0]]
				local f452_local4 = false --[[ @ 0]]
				if f452_local0 <= f452_local2 then
					f452_local4 = f452_local1.SelectedWedge:set( 0 ) --[[ @ 0]]
				elseif f452_local2 < 0 then
					f452_local4 = f452_local1.SelectedWedge:set( f452_local0 ) --[[ @ 0]]
				else
					f452_local4 = f452_local1.SelectedWedge:set( f452_local2 ) --[[ @ 0]]
				end
				if f452_local4 then
					f452_arg1:playSound( "wheel_changed" ) --[[ @ 0]]
				end
				local f452_local5 = 360 / f452_local0 --[[ @ 0]]
				local f452_local6 = (f452_local2 + 2) % f452_local0 --[[ @ 0]]
				local f452_local7 = Engine[@"GetModelForController"]( f452_arg0 ) --[[ @ 0]]
				f452_local7.hudItems.wheelPointerDegrees:set( f452_local6 * f452_local5 ) --[[ @ 0]]
				f452_arg1._lastSelectedWedgeIndex = f452_local2 --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		CoD.Menu.AddButtonCallbackFunction( f450_arg2, f450_arg0, f450_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_navleft", function ( element, menu, controller, f453_arg3 )
			f450_local1( controller, f450_arg3, 1 ) --[[ @ 0]]
			return true
		end ) --[[ @ 0]]
		CoD.Menu.AddButtonCallbackFunction( f450_arg2, f450_arg0, f450_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_navright", function ( element, menu, controller, f454_arg3 )
			f450_local1( controller, f450_arg3, -1 ) --[[ @ 0]]
			return true
		end ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.AddSprayGestureCallback = function ( f455_arg0, f455_arg1 )
	f455_arg1._onChooseWedge = function ( f456_arg0, f456_arg1, f456_arg2 )
		if f456_arg2.index:get() >= 0 then
			Engine[@"hash_111C001DF63C3ABA"]( f455_arg0, f456_arg0 + 1, false ) --[[ @ 0]]
			Engine[@"hash_30DE279ECDDDD966"]( f455_arg0, @"hash_38492A9F79B4D8E2", {
				[@"hash_7B53288C022B73A7"] = f456_arg2.item_index:get() + 1,
				[@"hash_5E3755F8BEC75376"] = Engine[@"CurrentGameTime"](),
				[@"hash_284CFBA3558B4604"] = f456_arg2.assetName:get()
			} ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.AddQuickSprayCallback = function ( f457_arg0 )
	local f457_local0 = DataSources.QuickSpray.getModel( f457_arg0 ) --[[ @ 0]]
	if f457_local0.index:get() >= 0 then
		Engine[@"hash_111C001DF63C3ABA"]( f457_arg0, 0, true ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.GetCalloutWheel = function ()
	if not CoD.HUDUtility.CachedCalloutWheel then
		CoD.HUDUtility.CachedCalloutWheel = Engine[@"hash_7A7E3CD65E63086F"]( @"callout_wheel" ) --[[ @ 0]]
	end
	return CoD.HUDUtility.CachedCalloutWheel
end
 --[[ @ 0]]
DataSources.CalloutWheel = DataSourceHelpers.ListSetup( "CalloutWheel", function ( f459_arg0, f459_arg1 )
	local f459_local0 = {} --[[ @ 0]]
	local f459_local1 = {
		[Enum[@"hash_19EF92C53CE7E47E"][@"hash_38C3A83128A9E996"]] = @"title",
		[Enum[@"hash_19EF92C53CE7E47E"][@"hash_2910C1D41C706A4B"]] = @"hash_56190193FD8F6AFA",
		[Enum[@"hash_19EF92C53CE7E47E"][@"hash_6AEB3AFAF9D25FB8"]] = @"hash_73100B5ED522BF50"
	} --[[ @ 0]]
	local f459_local2 = DataSources.PlayerAbilities.getModel( f459_arg0 ) --[[ @ 0]]
	local f459_local3 = {} --[[ @ 0]]
	local f459_local4 = Engine[@"GetModelForController"]( f459_arg0 ) --[[ @ 0]]
	local f459_local5 = Engine[@"hash_1C53F8D38DF9042B"]( Engine[@"hash_169811927938FCD7"]() ) --[[ @ 0]]
	if CoD.HUDUtility.IsGameTypeEqualToString( "dom" ) then
		f459_local4:create( "CalloutWheel.dom_a.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.dom_b.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.dom_c.team" ) --[[ @ 0]]
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "control" ) then
		f459_local4:create( "CalloutWheel.control_0.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.control_1.team" ) --[[ @ 0]]
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "sd" ) then
		f459_local4:create( "CalloutWheel.sd_a.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.sd_b.team" ) --[[ @ 0]]
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "escort" ) then
		f459_local4:create( "CalloutWheel.escort_robot.team" ) --[[ @ 0]]
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "koth" ) then
		f459_local4:create( "CalloutWheel.koth_attacking.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.koth_defending.team" ) --[[ @ 0]]
		f459_local4:create( "CalloutWheel.koth_moving.team" ) --[[ @ 0]]
	elseif CoD.HUDUtility.IsGameTypeEqualToString( "warzone" ) then
		f459_local4:create( "CalloutWheel.escort_robot.team" ) --[[ @ 0]]
	end
	local f459_local6 = function ( f460_arg0 )
		if f460_arg0 == nil or f460_arg0 == @"hash_0" then
			return true
		elseif f460_arg0 == @"hash_73F314215AE581AC" then
			local f460_local0 --[[ @ 0]]
			if not CoD.HUDUtility.IsGameTypeEqualToString( "dm" ) then
				f460_local0 = not CoD.HUDUtility.IsGameTypeEqualToString( "gun" ) --[[ @ 0]]
			else
				f460_local0 = false --[[ @ 0]]
			end
			return f460_local0
		elseif f460_arg0 == @"hash_218F5B8A3D9D231" then
			local f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "dm" ) --[[ @ 0]]
			if not f460_local0 then
				f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "gun" ) --[[ @ 0]]
			end
			return f460_local0
		elseif f460_arg0 == @"hash_17106B9F4A1A8355" then
			local f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "tdm" ) --[[ @ 0]]
			if not f460_local0 then
				f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "conf" ) --[[ @ 0]]
				if not f460_local0 then
					f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) --[[ @ 0]]
				end
			end
			return f460_local0
		elseif f460_arg0 == @"hash_1A70255BA05F984C" then
			local f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "control" ) --[[ @ 0]]
			if not f460_local0 then
				f460_local0 = CoD.HUDUtility.IsGameTypeEqualToString( "sd" ) --[[ @ 0]]
			end
			return f460_local0
		elseif f460_arg0 == @"hash_757E90B1451515A7" then
			return CoD.isWarzone
		else
			local f460_local0 --[[ @ 0]]
			if f459_local5 ~= f460_arg0 and f459_local5 ~= f460_arg0 .. "_cwl" and f459_local5 ~= f460_arg0 .. "_hc" then
				f460_local0 = false --[[ @ 0]]
			else
				f460_local0 = true --[[ @ 0]]
			end
		end
		return f460_local0
	end
	 --[[ @ 0]]
	local f459_local7 = CoD.HUDUtility.GetCalloutWheel() --[[ @ 0]]
	local f459_local8 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	local f459_local9 = Engine[@"GetModelForController"]( f459_arg0 ) --[[ @ 0]]
	local f459_local10 = f459_local9.CalloutWheel --[[ @ 0]]
	for f459_local23, f459_local24 in ipairs( f459_local7 ) --[[ @ 0]] do
		local f459_local25 = #f459_local0 + 1 --[[ @ 0]]
		if f459_local6( f459_local24[@"gametype"] ) then
			local f459_local14 = f459_local24[@"hash_54963972D2A614AA"] --[[ @ 0]]
			if f459_local24[@"objective"] then
				if f459_local10[f459_local24[@"objective"]] then
					if not f459_arg1._hasGadgetSubscriptions then
						f459_local3[f459_local24[@"objective"]] = f459_local10[f459_local24[@"objective"]].team --[[ @ 0]]
					end
					local f459_local15 = 0 --[[ @ 0]]
					local f459_local16 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"title"] ) --[[ @ 0]]
					if f459_local10[f459_local24[@"objective"]].team:get() == CoD.TeamUtility.GetTeamIDForController( f459_arg0 ) and f459_local24[@"hash_CEF4564406075F8"] ~= nil then
						f459_local15 = 100 --[[ @ 0]]
						f459_local16 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"hash_CEF4564406075F8"] ) --[[ @ 0]]
					end
					table.insert( f459_local0, {
						models = {
							image = f459_local24[@"hash_5BFF4CC56C2092F0"],
							disabled = false,
							text = f459_local16,
							arrayIndex = f459_local23 - 1,
							index = f459_local25 - 1,
							chosen = false,
							addNumber = f459_local15,
							isSocialCallout = f459_local14
						},
						properties = {}
					} ) --[[ @ 0]]
				end
			end
			local f459_local15 = nil --[[ @ 0]]
			local f459_local16 = 0 --[[ @ 0]]
			local f459_local17 = false --[[ @ 0]]
			if f459_local24[@"name"] == "sgc_warzone_item" then
				local f459_local18 = f459_local9.hudItems.showPickupHint --[[ @ 0]]
				local f459_local19 = f459_local9.hudItems.pickupHintText --[[ @ 0]]
				local f459_local20 = f459_local9.hudItems.pickupHintTextOverride --[[ @ 0]]
				local f459_local21 = f459_local20 --[[ @ 0]]
				local f459_local22 = f459_local20:get() --[[ @ 0]]
				if f459_local22 then
					f459_local22 = f459_local21 and Engine[@"hash_4238317564B9D47B"]( f459_local20:get() ) --[[ @ 0]]
				end
				if f459_local22 then
					f459_local19 = f459_local20 --[[ @ 0]]
				end
				if not f459_arg1._hasGadgetSubscriptions then
					f459_local3.showPickupHintModel = f459_local18 --[[ @ 0]]
					f459_local3.pickupHintText = f459_local19 --[[ @ 0]]
					f459_local3.pickupHintTextOverride = f459_local20 --[[ @ 0]]
					f459_local3.pickupHintGold = f459_local9.hudItems.pickupHintGold --[[ @ 0]]
				end
				if f459_local19 and f459_local19:get() and (not (not f459_local18 or not f459_local18:get()) or f459_local22) then
					if f459_local9.hudItems.pickupHintGold:get() == 1 then
						f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_433C75DB9FD3177E", f459_local19:get() ) --[[ @ 0]]
					else
						f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"title"], f459_local19:get() ) --[[ @ 0]]
					end
				else
					f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_D39768E8FDB8F6A" ) --[[ @ 0]]
					f459_local17 = true --[[ @ 0]]
				end
			elseif f459_local24[@"hash_46A3A04E156E3184"] and f459_local24[@"hash_46A3A04E156E3184"] ~= 0 then
				if not f459_arg1._hasGadgetSubscriptions then
					f459_local3.inLastStand = f459_local9.hudItems.health.inLastStand --[[ @ 0]]
				end
				if f459_local9.hudItems.health.inLastStand:get() then
					f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"hash_CEF4564406075F8"] ) --[[ @ 0]]
					f459_local16 = 100 --[[ @ 0]]
				else
					f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"title"] ) --[[ @ 0]]
				end
			else
				f459_local15 = Engine[@"hash_4F9F1239CFD921FE"]( f459_local24[@"title"] ) --[[ @ 0]]
			end
			table.insert( f459_local0, {
				models = {
					image = f459_local24[@"hash_5BFF4CC56C2092F0"],
					disabled = f459_local17,
					text = f459_local15,
					arrayIndex = f459_local23 - 1,
					index = f459_local25 - 1,
					chosen = false,
					addNumber = f459_local16,
					isSocialCallout = f459_local14
				},
				properties = {}
			} ) --[[ @ 0]]
		end
	end
	if not f459_arg1._hasGadgetSubscriptions then
		f459_arg1._hasGadgetSubscriptions = true --[[ @ 0]]
		for f459_local23, f459_local24 in pairs( f459_local3 ) --[[ @ 0]] do
			f459_arg1:subscribeToModel( f459_local24, function ( model )
				f459_arg1:updateDataSource( true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
		end
	end
	return f459_local0
end, nil, nil, function ( f462_arg0, f462_arg1, f462_arg2 )
	
end ) --[[ @ 0]]
CoD.HUDUtility.AddCalloutWheelCallback = function ( f463_arg0, f463_arg1 )
	f463_arg1._onChooseWedge = function ( f464_arg0, f464_arg1, f464_arg2 )
		Engine[@"hash_346C794158F47657"]( f463_arg0, @"hash_37177AF8D2789CE8", @"selected", (f464_arg2.arrayIndex:get() or f464_arg0) + f464_arg2.addNumber:get() ) --[[ @ 0]]
	end
	 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ProcessPlayerCalloutInternal = function ( f465_arg0, f465_arg1, f465_arg2, f465_arg3, f465_arg4, f465_arg5, f465_arg6, f465_arg7 )
	if CoD.WZUtility.IsWarzoneUIHidden( f465_arg1, "wzHideConsoleUI", "warzoneHideConsole" ) then
		return 
	end
	local f465_local0 = DataSources.HUDItems.getModel( f465_arg1 ) --[[ @ 0]]
	f465_local0 = f465_local0.console --[[ @ 0]]
	if f465_local0 and f465_arg3 and f465_arg4 then
		local f465_local1 = GetPlayerCalloutNameColor( f465_arg1, f465_arg4 ) --[[ @ 0]]
		local f465_local2 = GetClientNameAndClanTag( f465_arg1, f465_arg4 ) --[[ @ 0]]
		if f465_arg6 then
			f465_local2 = Engine[@"hash_4F9F1239CFD921FE"]( f465_arg6, f465_local2 ) --[[ @ 0]]
		end
		local f465_local3, f465_local4 = nil --[[ @ 0]]
		if f465_arg5 then
			f465_local3 = GetPlayerCalloutNameColor( f465_arg1, f465_arg5 ) --[[ @ 0]]
			f465_local4 = GetClientNameAndClanTag( f465_arg1, f465_arg5 ) --[[ @ 0]]
		end
		local f465_local5 = nil --[[ @ 0]]
		if f465_arg7 then
			f465_local5 = Engine[@"hash_4F9F1239CFD921FE"]( Engine[@"GetIString"]( f465_arg3, "CS_LOCALIZED_STRINGS" ), f465_arg7 ) --[[ @ 0]]
		else
			f465_local5 = Engine[@"hash_4F9F1239CFD921FE"]( Engine[@"GetIString"]( f465_arg3, "CS_LOCALIZED_STRINGS" ) ) --[[ @ 0]]
		end
		local f465_local6 = f465_local0["line" .. f465_local0.currentIndex:get()] --[[ @ 0]]
		if not CoD.isPC then
			if IsCurrentLanguageReversed() then
				if f465_arg5 then
					f465_local6.text2:set( f465_local4 ) --[[ @ 0]]
					f465_local6.text2color:set( f465_local3 ) --[[ @ 0]]
				end
				f465_local6.text1:set( f465_local2 ) --[[ @ 0]]
				f465_local6.text1color:set( f465_local1 ) --[[ @ 0]]
				f465_local6.text0:set( f465_local5 ) --[[ @ 0]]
				f465_local6.text0color:set( Enum[@"hash_197A8DF5F2FA8BD5"][@"hash_54A8B270BE295E3E"] ) --[[ @ 0]]
			else
				f465_local6.text0:set( f465_local2 ) --[[ @ 0]]
				f465_local6.text0color:set( f465_local1 ) --[[ @ 0]]
				f465_local6.text1:set( f465_local5 ) --[[ @ 0]]
				f465_local6.text1color:set( Enum[@"hash_197A8DF5F2FA8BD5"][@"hash_54A8B270BE295E3E"] ) --[[ @ 0]]
				if f465_arg5 then
					f465_local6.text2:set( f465_local4 ) --[[ @ 0]]
					f465_local6.text2color:set( f465_local3 ) --[[ @ 0]]
				else
					f465_local6.text2:set( "" ) --[[ @ 0]]
				end
			end
			Engine[@"ForceNotifyModelSubscriptions"]( f465_local0 ) --[[ @ 0]]
		elseif f465_arg5 then
			CoD.PCUtility.ShowGameEvent( "^" .. f465_local3 .. f465_local4 .. ": " .. f465_local5 ) --[[ @ 0]]
		else
			CoD.PCUtility.ShowGameEvent( "^" .. f465_local1 .. f465_local2 .. ": " .. f465_local5 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ProcessPlayerCalloutWithNumber = function ( f466_arg0, f466_arg1, f466_arg2 )
	local f466_local0 = CoD.GetScriptNotifyData( f466_arg2 ) --[[ @ 0]]
	CoD.HUDUtility.ProcessPlayerCalloutInternal( f466_arg0, f466_arg1, f466_arg2, f466_local0[1], f466_local0[2], nil, nil, f466_local0[3] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ProcessPlayerCalloutWithColon = function ( f467_arg0, f467_arg1, f467_arg2 )
	local f467_local0 = CoD.GetScriptNotifyData( f467_arg2 ) --[[ @ 0]]
	local f467_local1 = f467_local0[1] --[[ @ 0]]
	local f467_local2 = f467_local0[2] --[[ @ 0]]
	local f467_local3 = f467_local0[3] --[[ @ 0]]
	local f467_local4 --[[ @ 0]]
	if f467_local3 then
		f467_local4 = Engine[@"GetIString"]( f467_local3, "CS_LOCALIZED_STRINGS" ) --[[ @ 0]]
		if not f467_local4 then
		
		else
			CoD.HUDUtility.ProcessPlayerCalloutInternal( f467_arg0, f467_arg1, f467_arg2, f467_local1, f467_local2, nil, @"hash_3C2E0670713898AB", f467_local4 ) --[[ @ 0]]
		end
	end
	f467_local4 = @"hash_0" --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ProcessPlayerCallout = function ( f468_arg0, f468_arg1, f468_arg2 )
	local f468_local0 = CoD.GetScriptNotifyData( f468_arg2 ) --[[ @ 0]]
	CoD.HUDUtility.ProcessPlayerCalloutInternal( f468_arg0, f468_arg1, f468_arg2, f468_local0[1], f468_local0[2], f468_local0[3] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.PositionDraftCharacterUnavailable = function ( f469_arg0, f469_arg1 )
	if f469_arg0:getModel() then
		local f469_local0 = f469_arg0:getModel() --[[ @ 0]]
		if f469_local0.unavailable then
			f469_local0 = f469_arg0:getModel() --[[ @ 0]]
			if f469_local0.unavailable:get() then
				return true
			end
		end
	end
	if CoD.HUDUtility.IsGameTypeEqualToString( "bounty" ) or CoD.HUDUtility.IsGameTypeEqualToString( "oic" ) or CoD.HUDUtility.IsGameTypeEqualToString( "sd" ) or CoD.HUDUtility.IsGameTypeEqualToString( "infect" ) or CoD.HUDUtility.IsGameTypeEqualToString( "sas" ) or CoD.HUDUtility.IsGameTypeEqualToString( "svz" ) then
		if Engine[@"IsVisibilityBitSet"]( f469_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) or Engine[@"IsVisibilityBitSet"]( f469_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) then
			return false
		end
		local f469_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		return f469_local0.hudItems.specialistSwitchIsLethal:get() == 1
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.LoadingHeaderNotShown = function ()
	local f470_local0 = LobbyData.GetCurrentMenuTarget() --[[ @ 0]]
	local f470_local1 --[[ @ 0]]
	if f470_local0[@"id"] ~= LobbyData.GetLobbyMenuIDByName( LuaEnum.UI.DIRECTOR_ONLINE_MP_TRAINING ) then
		f470_local1 = IsSimulateCT() --[[ @ 0]]
	else
		f470_local1 = true --[[ @ 0]]
	end
	return f470_local1
end
 --[[ @ 0]]
CoD.HUDUtility.ShowRestartLevelPrompt = function ()
	local f471_local0 = LobbyData.GetCurrentMenuTarget() --[[ @ 0]]
	if CoD.isZombie then
		if Engine[@"hash_169811927938FCD7"]() ~= "ztutorial" and ((Engine[@"SessionModeIsMode"]( Enum[@"hash_51DD23D27A61F09A"][@"hash_43E66A586897A605"] ) == true) or (Engine[@"SessionModeIsMode"]( Enum[@"hash_51DD23D27A61F09A"][@"hash_30B674220A0C7377"] ) == true) or (f471_local0[@"id"] == LobbyData.GetLobbyMenuIDByName( LuaEnum.UI.DIRECTOR_ONLINE_ZM_PRIVATE )) or f471_local0[@"id"] == LobbyData.GetLobbyMenuIDByName( LuaEnum.UI.DIRECTOR_ONLINE_ZM_CUSTOM )) then
			return true
		end
	end
	return false
end
 --[[ @ 0]]
CoD.HUDUtility.HandleRestartPromptNotifies = function ( f472_arg0, f472_arg1, f472_arg2, f472_arg3 )
	local f472_local0 = LobbyData.GetCurrentMenuTarget() --[[ @ 0]]
	local f472_local1 = f472_local0[@"LobbyType"] --[[ @ 0]]
	if not Engine[@"hash_3573048F8D3B4E25"]() then
		f472_local1 = Engine[@"hash_3C3DF042E7492B66"]( Enum[@"LobbyModule"][@"hash_40C46B73E8E18BA2"] ) --[[ @ 0]]
	end
	local f472_local2 = Engine[@"hash_10EA2BE00F49480D"]( f472_local1 ) --[[ @ 0]]
	if CoD.ModelUtility.IsParamModelEqualToHashString( f472_arg2, @"hash_3AA743D9AD6C8E19" ) then
		SetState( f472_arg1, "DefaultState", f472_arg3 ) --[[ @ 0]]
	elseif CoD.ModelUtility.IsParamModelEqualToHashString( f472_arg2, @"hash_1FC4832B89307895" ) then
		if CoD.HUDUtility.ShowRestartLevelPrompt() then
			if f472_local2 then
				SetState( f472_arg1, "Shown", f472_arg3 ) --[[ @ 0]]
			end
		else
			ResumeEndGame( f472_arg0, f472_arg3 ) --[[ @ 0]]
			SetState( f472_arg1, "DefaultState", f472_arg3 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.HUDUtility.StartStreamHiding = function ( f473_arg0, f473_arg1, f473_arg2, f473_arg3, f473_arg4, f473_arg5, f473_arg6 )
	f473_arg0._streamReadyCount = 0 --[[ @ 0]]
	f473_arg0._streamCheckTimeElapsed = 0 --[[ @ 0]]
	if f473_arg3 > 0 and f473_arg4 > 0 and not f473_arg0.checkStreamerTimer then
		f473_arg0:setState( f473_arg1, "Obscuring" ) --[[ @ 0]]
		f473_arg0.checkStreamerTimer = LUI.UITimer.newElementTimer( f473_arg3, false, function ( f474_arg0 )
			f473_arg0._streamCheckTimeElapsed = f473_arg0._streamCheckTimeElapsed + (f474_arg0.timeElapsed or f473_arg3) --[[ @ 0]]
			if Engine[@"hash_32FE089161DFD305"]( f473_arg5, f473_arg6 ) then
				f473_arg0._streamReadyCount = f473_arg0._streamReadyCount + 1 --[[ @ 0]]
			else
				f473_arg0._streamReadyCount = 0 --[[ @ 0]]
			end
			if f473_arg2 <= f473_arg0._streamReadyCount or f473_arg4 < f473_arg0._streamCheckTimeElapsed then
				f473_arg0:setState( f473_arg1, "DefaultState" ) --[[ @ 0]]
				f473_arg0.checkStreamerTimer:close() --[[ @ 0]]
				f473_arg0.checkStreamerTimer = nil --[[ @ 0]]
			end
		end ) --[[ @ 0]]
		f473_arg0:addElement( f473_arg0.checkStreamerTimer ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsMultiplayer = function ()
	return CoD.isMultiplayer
end
 --[[ @ 0]]
CoD.HUDUtility.IsZombies = function ()
	return CoD.isZombie
end
 --[[ @ 0]]
CoD.HUDUtility.IsWarzone = function ()
	return CoD.isWarzone
end
 --[[ @ 0]]
CoD.HUDUtility.SetUseCylinderMapping = function ( f478_arg0, f478_arg1 )
	f478_arg0:setUseCylinderMapping( f478_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility[@"hash_1DCC62D0D0DCD91E"] = function ( f479_arg0, f479_arg1, f479_arg2, f479_arg3 )
	if f479_arg2 == @"hash_506A6D02304FE510" or f479_arg2 == @"hash_50C27F02309A797C" then
		if f479_arg1 and f479_arg1.newTabletIcePickGadget == nil then
			f479_arg1.newTabletIcePickGadget = CoD.TabletIcePickGadget.new( f479_arg1, f479_arg3, 0, 0, 0, CoD.TabletIcePickGadget.__defaultWidth, 0, 0, 0, CoD.TabletIcePickGadget.__defaultHeight ) --[[ @ 0]]
			LUI.OverrideFunction_CallOriginalSecond( f479_arg1.newTabletIcePickGadget, "close", function ()
				f479_arg1.newTabletIcePickGadget = nil --[[ @ 0]]
			end ) --[[ @ 0]]
			f479_arg0:addForceClosedSafeAreaChild( f479_arg1.newTabletIcePickGadget, "newTabletIcePickGadget" ) --[[ @ 0]]
			f479_arg1.newTabletIcePickGadget.id = "newTabletIcePickGadget" --[[ @ 0]]
			f479_arg1:sendInitializationEvents( f479_arg0.controller, f479_arg1.newTabletIcePickGadget ) --[[ @ 0]]
		end
	elseif f479_arg1 and f479_arg1.newTabletIcePickGadget then
		f479_arg1.newTabletIcePickGadget:close() --[[ @ 0]]
		f479_arg1.newTabletIcePickGadget = nil --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility[@"hash_3E213B828E44EBE4"] = function ( f481_arg0, f481_arg1, f481_arg2 )
	if f481_arg1._hasButtonBitSubscription then
		return 
	end
	f481_arg1._hasButtonBitSubscription = true --[[ @ 0]]
	local f481_local0 = function ( f482_arg0 )
		local f482_local0 = f482_arg0:get() & Enum[@"LUIButtonFlags"][@"hash_5253A6F6CAAAE464"] --[[ @ 0]]
		if f482_local0 ~= f481_arg1._currentButtonPressedValue then
			CoD.BaseUtility.SendCustomMenuResponse( f481_arg2, "IcePick", "id", f482_local0 ) --[[ @ 0]]
			f481_arg1._currentButtonPressedValue = f482_local0 --[[ @ 0]]
		end
		BlockGameFromKeyEvent( f481_arg2 ) --[[ @ 0]]
		return false
	end
	 --[[ @ 0]]
	local f481_local1 = function ( f483_arg0 )
		local f483_local0 = f483_arg0:get() & Enum[@"LUIButtonFlags"][@"hash_5253A6F6CAAAE464"] --[[ @ 0]]
		if f483_local0 ~= f481_arg1._currentButtonPressedValue then
			CoD.BaseUtility.SendCustomMenuResponse( f481_arg2, "IcePick", "back", f483_local0 ) --[[ @ 0]]
			f481_arg1._currentButtonPressedValue = f483_local0 --[[ @ 0]]
		end
		BlockGameFromKeyEvent( f481_arg2 ) --[[ @ 0]]
		return false
	end
	 --[[ @ 0]]
	f481_arg1._currentButtonPressedValue = 0 --[[ @ 0]]
	local f481_local2 = Engine[@"GetModelForController"]( f481_arg2 ) --[[ @ 0]]
	local f481_local3 = f481_local2.ButtonBits[Enum[@"LUIButton"][@"hash_4C083113BC81F23F"]] --[[ @ 0]]
	local f481_local4 = f481_local2.ButtonBits[Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"]] --[[ @ 0]]
	local f481_local5 = f481_local2:create( "IcePickInfo.forceUse" ) --[[ @ 0]]
	f481_local5:set( 0 ) --[[ @ 0]]
	f481_arg1:subscribeToModel( f481_local3, f481_local0, false ) --[[ @ 0]]
	f481_arg1:subscribeToModel( f481_local4, f481_local1, false ) --[[ @ 0]]
	f481_arg1:subscribeToModel( f481_local5, function ( model )
		if model:get() == 1 then
			CoD.BaseUtility.SendCustomMenuResponse( f481_arg2, "IcePick", "id", 1 ) --[[ @ 0]]
			model:set( 0 ) --[[ @ 0]]
		end
		return false
	end, false ) --[[ @ 0]]
	if CoD.isPC then
		f481_arg1:subscribeToModel( Engine[@"hash_7A9FCAD7BE6FA349"]( "+activate", f481_arg2 ), f481_local0, false ) --[[ @ 0]]
		f481_arg1:subscribeToModel( Engine[@"hash_7A9FCAD7BE6FA349"]( "+weapnext", f481_arg2 ), f481_local1, false ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.SetIcePickCurrentHackingFlavorText = function ( f485_arg0, f485_arg1 )
	local f485_local0 = f485_arg0:getModel() --[[ @ 0]]
	local f485_local1 = f485_local0.hackableFlavorText:get() --[[ @ 0]]
	local f485_local2 = nil --[[ @ 0]]
	if f485_local0.hackableCategory:get() == CoD.HUDUtility.IcePickCategories.PLAYER then
		f485_local2 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1B9E61460B564573", GetCharacterDisplayNameByIndex( CoD.PlayerRoleUtility.GetCharacterIndexForClientNum( f485_arg1, f485_local0.hackableID:get() ) ) ) --[[ @ 0]]
	else
		f485_local2 = Engine[@"hash_4F9F1239CFD921FE"]( f485_local1 ) --[[ @ 0]]
	end
	local f485_local3 = Engine[@"GetModelForController"]( f485_arg1 ) --[[ @ 0]]
	f485_local3 = f485_local3.IcePickInfo.currentHackFlavorText --[[ @ 0]]
	if not f485_local3:set( f485_local2 ) then
		Engine[@"ForceNotifyModelSubscriptions"]( f485_local3 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IcePickCategories = LuaEnum.createEnum( "PLAYER", "EQUIPMENT", "VEHICLE" ) --[[ @ 0]]
CoD.HUDUtility.IcePickHackableStatuses = LuaEnum.createEnum( "UNHACKED", "HACKING", "HACKED", "DESTROYED" ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "IcePickHackables", "IcePickHackables", function ( f486_arg0, f486_arg1 )
	if not f486_arg0.hackablesCount then
		local f486_local0 = f486_arg0:create( "hackablesCount" ) --[[ @ 0]]
		f486_local0:set( 0 ) --[[ @ 0]]
		f486_local0 = f486_arg0:create( "hackablesCategoryCounts" ) --[[ @ 0]]
		for f486_local1 = 0 --[[ @ 0]], #CoD.HUDUtility.IcePickCategories - 1, 1 do
			f486_local0:create( f486_local1 ) --[[ @ 0]]
		end
	end
end, false, {
	prepare = function ( f487_arg0, f487_arg1, f487_arg2 )
		if not f487_arg1._rootModel then
			f487_arg1._rootModel = DataSources.IcePickHackables.getModel( f487_arg0 ) --[[ @ 0]]
			f487_arg1:subscribeToModel( f487_arg1._rootModel.hackablesCount, function ()
				f487_arg1:updateDataSource( false, true ) --[[ @ 0]]
			end, false ) --[[ @ 0]]
			local f487_local0 = f487_arg1._rootModel.hackablesCategoryCounts --[[ @ 0]]
			for f487_local1 = 0 --[[ @ 0]], #CoD.HUDUtility.IcePickCategories - 1, 1 do
				f487_arg1:subscribeToModel( f487_local0["" .. f487_local1], function ()
					f487_arg1:updateDataSource( false, true ) --[[ @ 0]]
				end, false ) --[[ @ 0]]
			end
		end
		f487_arg1._filteredItems = {} --[[ @ 0]]
		local f487_local0 = CoD.TeamUtility.GetPredictedTeamID( f487_arg0 ) --[[ @ 0]]
		local f487_local1 = f487_arg1._rootModel.hackablesCount:get() --[[ @ 0]]
		for f487_local2 = 0 --[[ @ 0]], f487_local1 - 1, 1 do
			local f487_local5 = f487_arg1._rootModel["item" .. f487_local2] --[[ @ 0]]
			if not f487_arg2 or f487_arg2( f487_local5 ) then
				if f487_local5.hackableCategory:get() == CoD.HUDUtility.IcePickCategories.PLAYER then
					local f487_local6 = Engine[@"GetTeamID"]( f487_arg0, f487_local2 ) --[[ @ 0]]
					if f487_local6 ~= f487_local0 and f487_local6 > 0 then
						table.insert( f487_arg1._filteredItems, f487_local5 ) --[[ @ 0]]
					end
				end
				table.insert( f487_arg1._filteredItems, f487_local5 ) --[[ @ 0]]
			end
		end
	end,
	getCount = function ( f490_arg0 )
		return #f490_arg0._filteredItems
	end,
	getItem = function ( f491_arg0, f491_arg1, f491_arg2 )
		return f491_arg1._filteredItems[f491_arg2]
	end
} ) --[[ @ 0]]
DataSources.IcePickInfo = {
	getModel = function ( f492_arg0 )
		local f492_local0 = Engine[@"GetModelForController"]( f492_arg0 ) --[[ @ 0]]
		f492_local0 = f492_local0:create( "IcePickInfo" ) --[[ @ 0]]
		local f492_local1 = function ( f493_arg0, f493_arg1 )
			if not f492_local0[f493_arg0] then
				local f493_local0 = f492_local0:create( f493_arg0 ) --[[ @ 0]]
				f493_local0:set( f493_arg1 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f492_local1( "currentHackProgress", 0 ) --[[ @ 0]]
		f492_local1( "detectionProgress", 0 ) --[[ @ 0]]
		f492_local1( "currentHackFlavorText", "" ) --[[ @ 0]]
		return f492_local0
	end
} --[[ @ 0]]
CoD.HUDUtility.IcePickFeedType = "IcePickFeed" --[[ @ 0]]
CoD.HUDUtility.IcePickFeedInstanceType = CoD.HUDUtility.IcePickFeedType --[[ @ 0]]
CoD.HUDUtility.SetupIcePickHackFeed = function ( f494_arg0, f494_arg1, f494_arg2, f494_arg3 )
	CoD.FeedUtility.FeedTypes[CoD.HUDUtility.IcePickFeedType] = CoD.HUDUtility.IcePickFeedTable --[[ @ 0]]
	CoD.FeedUtility.SetupFeed( f494_arg0, f494_arg1, CoD.HUDUtility.IcePickFeedType, CoD.HUDUtility.IcePickFeedInstanceType, CoD.FeedUtility.FeedAxis.VERTICAL, CoD.FeedUtility.FeedDirections.NEGATIVE, CoD.FeedUtility.FeedInsertionSide.BEGINNING, f494_arg2, f494_arg3 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IcePickAddItemToFeed = function ( f495_arg0, f495_arg1, f495_arg2 )
	local f495_local0 = f495_arg0 --[[ @ 0]]
	if f495_local0 then
		if not f495_local0.addFeedItem or not f495_local0.feedSize or f495_arg1:get() == "" then
			return 
		end
		f495_local0:addFeedItem( {
			hackingText = f495_arg1:get(),
			[1] = f495_arg2
		}, 0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.InitIcePickFeedItem = function ( f496_arg0, f496_arg1, f496_arg2, f496_arg3 )
	local f496_local0 = f496_arg0:create( "item" .. f496_arg3 ) --[[ @ 0]]
	f496_local0:create( "hackingText" ) --[[ @ 0]]
	local f496_local1 = CoD.IcePickHackFlavorTextItem.new( f496_arg1, f496_arg2, 0, 0, 0, CoD.IcePickHackFlavorTextItem.__defaultWidth, 0, 0, 0, CoD.IcePickHackFlavorTextItem.__defaultHeight ) --[[ @ 0]]
	f496_local1:setModel( f496_local0, f496_arg2 ) --[[ @ 0]]
	return f496_local1
end
 --[[ @ 0]]
CoD.HUDUtility.PopulateIcePickFeedItem = function ( f497_arg0, f497_arg1 )
	local f497_local0 = f497_arg0:getModel() --[[ @ 0]]
	f497_local0.hackingText:set( f497_arg1.hackingText ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IcePickFeedSize = {
	[CoD.HUDUtility.IcePickFeedInstanceType] = 15
} --[[ @ 0]]
CoD.HUDUtility.IcePickFeedTable = {
	sizes = CoD.HUDUtility.IcePickFeedSize,
	createFeedItem = CoD.HUDUtility.InitIcePickFeedItem,
	onFeedItemInserted = CoD.HUDUtility.PopulateIcePickFeedItem
} --[[ @ 0]]
DataSources.Escort = {
	getModel = function ( f498_arg0 )
		local f498_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
		f498_local0 = f498_local0:create( "Escort" ) --[[ @ 0]]
		local f498_local1 = function ( f499_arg0, f499_arg1 )
			if not f498_local0[f499_arg0] then
				local f499_local0 = f498_local0:create( f499_arg0 ) --[[ @ 0]]
				f499_local0:set( f499_arg1 ) --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		f498_local1( "robotProgress", 0 ) --[[ @ 0]]
		f498_local1( "robotProgressToBeat", 0 ) --[[ @ 0]]
		f498_local1( "robotMoving", 0 ) --[[ @ 0]]
		f498_local1( "robotObjective", nil ) --[[ @ 0]]
		return f498_local0
	end
} --[[ @ 0]]
CoD.HUDUtility.SetEscortRobotObjective = function ( f500_arg0 )
	local f500_local0 = f500_arg0 --[[ @ 0]]
	local f500_local1 = f500_arg0.setModel --[[ @ 0]]
	local f500_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f500_local1( f500_local0, f500_local2.Escort.robotObjective:get() ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeEqualToString = function ( f501_arg0 )
	local f501_local0 = Dvar[@"g_gametype"]:get() --[[ @ 0]]
	local f501_local1 --[[ @ 0]]
	if f501_local0 == nil or f501_local0 ~= f501_arg0 and f501_local0 ~= f501_arg0 .. "_hc" and f501_local0 ~= f501_arg0 .. "_cwl" and f501_local0 ~= f501_arg0 .. "_bb" then
		f501_local1 = false --[[ @ 0]]
	else
		f501_local1 = true --[[ @ 0]]
	end
	return f501_local1
end
 --[[ @ 0]]
CoD.HUDUtility.IsDidYouKnowAssetValid = function ( f502_arg0, f502_arg1 )
	local f502_local0 = f502_arg1[f502_arg0 .. "_gtsName"] --[[ @ 0]]
	local f502_local1 = f502_arg1[f502_arg0 .. "_gtsOperator"] --[[ @ 0]]
	if f502_local0 == nil or f502_local0 == @"none" then
		return true
	elseif f502_local1 == @"==" then
		return IsGametypeSettingsValue( f502_local0, f502_arg1[f502_arg0 .. "_gtsValue"] )
	elseif f502_local1 == @"hash_7C28707B48C6683" then
		return not IsGametypeSettingsValue( f502_local0, f502_arg1[f502_arg0 .. "_gtsValue"] )
	elseif f502_local1 == @"hash_2F63B14C8601A37B" then
		return Engine[@"GetGametypeSetting"]( f502_local0 ) < f502_arg1[f502_arg0 .. "_gtsValue"]
	elseif f502_local1 == @"hash_2F63B34C8601A6E1" then
		return f502_arg1[f502_arg0 .. "_gtsValue"] < Engine[@"GetGametypeSetting"]( f502_local0 )
	else
		return false
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeWzAmbush = function ()
	return string.find( Dvar[@"g_gametype"]:get(), "warzone_ambush" ) ~= nil
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeWzRedeploy = function ()
	return IsGametypeSettingsValue( "deathCircleRespawn", 1 )
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeWzSpectre = function ()
	return IsGametypeSettingsValue( "wzSpectreRising", 1 )
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeWzGroundWar = function ()
	return IsGametypeSettingsValue( "wzBigTeamBattle", 1 )
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeCWL = function ()
	return string.find( Dvar[@"g_gametype"]:get(), "_cwl" ) ~= nil
end
 --[[ @ 0]]
CoD.HUDUtility.IsGameTypeBareBones = function ()
	return string.find( Dvar[@"g_gametype"]:get(), "_bb" ) ~= nil
end
 --[[ @ 0]]
CoD.HUDUtility.SetHardpointObjective = function ( f509_arg0 )
	local f509_local0 = f509_arg0:getModel() --[[ @ 0]]
	local f509_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f509_local1 = f509_local1.hudItems:create( "hardpointObj" ) --[[ @ 0]]
	f509_local1:set( f509_local0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetScoreInfoHardpointObjective = function ( f510_arg0, f510_arg1 )
	local f510_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f510_local0 = f510_local0.hudItems.hardpointObj:get() --[[ @ 0]]
	if f510_local0 then
		f510_arg0:setModel( f510_local0 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.IsScoreInfoObjectiveContested = function ( f511_arg0, f511_arg1 )
	local f511_local0 = f511_arg0:getModel() --[[ @ 0]]
	if f511_local0 then
		return CoD.WaypointUtility.ShouldShowWaypointAsContestedHelper( f511_arg1, Engine[@"GetObjectiveName"]( f511_arg1, f511_local0.objId:get() ), f511_local0.objId:get(), nil )
	else
		
	end
end
 --[[ @ 0]]
CoD.HUDUtility.StuckImages = {
	NONE = 0,
	SEMTEX = 1,
	SPARROW = 2
} --[[ @ 0]]
CoD.HUDUtility.SetRemoteMissileLockonScale = function ( f512_arg0, f512_arg1 )
	local f512_local0 = f512_arg1:get() --[[ @ 0]]
	f512_arg0:setScale( f512_local0, f512_local0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ForceCloseOnClose = function ( f513_arg0 )
	
end
 --[[ @ 0]]
CoD.HUDUtility.UpdateZMTowersCrowdMeterState = function ( f514_arg0, f514_arg1, f514_arg2 )
	if f514_arg1:get() then
		f514_arg0:setState( f514_arg2, "crowd_server_paused" ) --[[ @ 0]]
	elseif f514_arg0._restoreState then
		f514_arg0:setState( f514_arg2, f514_arg0._restoreState ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.BlackhatStatus = {
	Scanning = 0,
	Breaching = 1,
	Hacking = 2
} --[[ @ 0]]
CoD.HUDUtility.BlackHatPreLoad = function ( f515_arg0, f515_arg1 )
	local f515_local0 = Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f515_arg1 ), "hudItems.blackhat" ) --[[ @ 0]]
	local f515_local1 = Engine[@"CreateModel"]( f515_local0, "perc" ) --[[ @ 0]]
	local f515_local2 = Engine[@"CreateModel"]( f515_local0, "offsetShaderValue" ) --[[ @ 0]]
	local f515_local3 = Engine[@"CreateModel"]( f515_local0, "status" ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f515_local1, 0 ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f515_local2, "0 0 0 0" ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f515_local3, 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.SetUpReticle = function ( f516_arg0, f516_arg1 )
	f516_arg0:setupReticle( f516_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.TempestPostLoad = function ( f517_arg0, f517_arg1, f517_arg2 )
	local f517_local0 = f517_arg0 --[[ @ 0]]
	local f517_local1 = f517_arg0.subscribeToModel --[[ @ 0]]
	local f517_local2 = DataSources.CurrentWeapon.getModel( f517_arg1 ) --[[ @ 0]]
	f517_local1( f517_local0, f517_local2:create( "lookingDownSights" ), function ( f518_arg0 )
		if Engine[@"GetModelValue"]( f518_arg0 ) == true then
			if not f517_arg0.ui3d then
				f517_arg0.ui3d = CoD.TempestReticle_UI3D.new( f517_arg2, f517_arg1, 0, 0, 0, CoD.TempestReticle_UI3D.__defaultWidth, 0, 0, 0, CoD.TempestReticle_UI3D.__defaultHeight ) --[[ @ 0]]
				f517_arg0:addElement( f517_arg0.ui3d ) --[[ @ 0]]
				f517_arg2:sendInitializationEvents( f517_arg1, f517_arg0.ui3d ) --[[ @ 0]]
			end
		elseif f517_arg0.ui3d then
			f517_arg0.ui3d:close() --[[ @ 0]]
			f517_arg0.ui3d = nil --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.UplinkBallReticlePreLoad = function ( f519_arg0 )
	DataSources.ReticleBindings.createModelsForActions( f519_arg0, {
		"speed_throw",
		"attack"
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSources.ZMPlayerList = {
	getModel = function ( f520_arg0 )
		return Engine[@"CreateModel"]( Engine[@"GetModelForController"]( f520_arg0 ), "PlayerList" )
	end
} --[[ @ 0]]
CoD.HUDUtility.ZMScrPreLoad = function ( f521_arg0, f521_arg1 )
	local f521_local0 = DataSources.ZMPlayerList.getModel( f521_arg1 ) --[[ @ 0]]
	for f521_local1 = 0 --[[ @ 0]], 3, 1 do
		local f521_local4 = Engine[@"CreateModel"]( f521_local0, f521_local1 ) --[[ @ 0]]
		Engine[@"SetModelValue"]( Engine[@"CreateModel"]( f521_local4, "zombieInventoryIcon" ), "blacktransparent" ) --[[ @ 0]]
		f521_local4:create( "playerScore" ) --[[ @ 0]]
		f521_local4:create( "playerIsDowned" ) --[[ @ 0]]
		f521_local4:create( "zombiePlayerIcon" ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.HUDUtility.ZMScrHideScoreEvent = function ( f522_arg0 )
	local f522_local0 --[[ @ 0]]
	if Engine[@"IsVisibilityBitSet"]( f522_arg0, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) then
		f522_local0 = CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) --[[ @ 0]]
	else
		f522_local0 = true --[[ @ 0]]
	end
	return f522_local0
end
 --[[ @ 0]]
CoD.HUDUtility.ZMScrEmitPoints = function ( f523_arg0, f523_arg1, f523_arg2, f523_arg3, f523_arg4, f523_arg5 )
	if f523_arg0.activeScoreElements > 10 then
		return 
	elseif f523_arg1 == 0 or f523_arg1 < -10000 or f523_arg1 > 10000 then
		return 
	elseif CoD.HUDUtility.ZMScrHideScoreEvent( f523_arg2 ) then
		return 
	end
	local f523_local0 = CoD.ZMScr_PlusPointsContainer.new( f523_arg3, f523_arg2, 0, 0, 0, CoD.ZMScr_PlusPointsContainer.__defaultWidth, 0, 0, 0, CoD.ZMScr_PlusPointsContainer.__defaultHeight ) --[[ @ 0]]
	if f523_arg1 > 0 then
		f523_local0.ZMScrPlusPoints.Label1:setText( "+" .. f523_arg1 ) --[[ @ 0]]
		f523_local0.ZMScrPlusPoints.Label2:setText( "+" .. f523_arg1 ) --[[ @ 0]]
		if f523_arg5 then
			f523_local0.ZMScrPlusPoints:playClip( "BonusScore" ) --[[ @ 0]]
		else
			f523_local0.ZMScrPlusPoints:playClip( "DefaultClip" ) --[[ @ 0]]
		end
	else
		f523_local0.ZMScrPlusPoints.Label1:setText( f523_arg1 ) --[[ @ 0]]
		f523_local0.ZMScrPlusPoints.Label2:setText( f523_arg1 ) --[[ @ 0]]
		f523_local0.ZMScrPlusPoints:playClip( "NegativeScore" ) --[[ @ 0]]
	end
	if f523_arg4 then
		f523_local0:setScale( 0.75 ) --[[ @ 0]]
	end
	f523_arg0.lastAnim = f523_arg0.lastAnim + 1 --[[ @ 0]]
	f523_local0:setState( f523_arg2, "DefaultState" ) --[[ @ 0]]
	if not f523_local0:hasClip( "Anim" .. f523_arg0.lastAnim ) then
		f523_arg0.lastAnim = 1 --[[ @ 0]]
	end
	f523_local0:registerEventHandler( "clip_over", function ( element, event )
		element:close() --[[ @ 0]]
		f523_arg0.activeScoreElements = f523_arg0.activeScoreElements - 1 --[[ @ 0]]
	end ) --[[ @ 0]]
	f523_arg0:addElement( f523_local0 ) --[[ @ 0]]
	f523_arg3:sendInitializationEvents( f523_arg2, f523_local0 ) --[[ @ 0]]
	f523_local0:playClip( "Anim" .. f523_arg0.lastAnim ) --[[ @ 0]]
	f523_arg0.activeScoreElements = f523_arg0.activeScoreElements + 1 --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ZMScrSetupTrialsElementsForClient = function ( f525_arg0, f525_arg1, f525_arg2 )
	local f525_local0 = 0 --[[ @ 0]]
	local f525_local1 = 1 --[[ @ 0]]
	local f525_local2 = 2 --[[ @ 0]]
	local f525_local3 = 3 --[[ @ 0]]
	local f525_local4 = Engine[@"CreateModel"]( f525_arg2, "trialsCheckState" ) --[[ @ 0]]
	local f525_local5 = Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "ZMHudGlobal.trials.infoHidden" ) --[[ @ 0]]
	local f525_local6 = function ()
		local f526_local0 = f525_local5:get() --[[ @ 0]]
		if f526_local0 ~= nil then
			if f526_local0 == true then
				f525_arg0:setState( f525_arg1, "HideForRoundSplash" ) --[[ @ 0]]
			else
				local f526_local1 = f525_local4:get() --[[ @ 0]]
				if f526_local1 ~= nil then
					if f526_local1 == f525_local0 then
						f525_arg0:setState( f525_arg1, "DefaultState" ) --[[ @ 0]]
					elseif f526_local1 == f525_local1 then
						f525_arg0:setState( f525_arg1, "Counter" ) --[[ @ 0]]
					elseif f526_local1 == f525_local2 then
						f525_arg0:setState( f525_arg1, "Unchecked" ) --[[ @ 0]]
					else
						f525_arg0:setState( f525_arg1, "Checked" ) --[[ @ 0]]
					end
				end
			end
		end
	end
	 --[[ @ 0]]
	f525_arg0:subscribeToModel( f525_local4, function ( model )
		f525_local6() --[[ @ 0]]
	end ) --[[ @ 0]]
	f525_arg0:subscribeToModel( f525_local5, function ( model )
		f525_local6() --[[ @ 0]]
	end ) --[[ @ 0]]
	local f525_local7 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	local f525_local8 = Engine[@"CreateModel"]( f525_arg2, "trialsCounterValue" ) --[[ @ 0]]
	local f525_local9 = f525_local7:create( "ZMHudGlobal.trials.playerCounterMax" ) --[[ @ 0]]
	local f525_local10 = function ( f529_arg0 )
		local f529_local0 = f525_local8:get() --[[ @ 0]]
		local f529_local1 = f525_local9:get() --[[ @ 0]]
		if f529_local0 ~= nil and f529_local1 ~= nil then
			f525_arg0.Counter:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5B7D5EBBEC599C9A", f529_local0, f529_local1 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f525_arg0:subscribeToModel( f525_local8, f525_local10 ) --[[ @ 0]]
	f525_arg0:subscribeToModel( f525_local9, f525_local10 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUDUtility.ZMScrPostLoad = function ( f530_arg0, f530_arg1, f530_arg2 )
	local f530_local0 = 4 --[[ @ 0]]
	if CoD.HUDUtility.IsAnyGameType( f530_arg1, "zstandard" ) then
		return 
	end
	local f530_local1 = {
		damage10 = {
			score = 10,
			bonusPoints = false
		},
		damage20 = {
			score = 20,
			bonusPoints = false
		},
		damage30 = {
			score = 30,
			bonusPoints = false
		},
		damage40 = {
			score = 40,
			bonusPoints = false
		},
		damage50 = {
			score = 50,
			bonusPoints = false
		},
		damage60 = {
			score = 60,
			bonusPoints = false
		},
		damage70 = {
			score = 70,
			bonusPoints = false
		},
		damage80 = {
			score = 80,
			bonusPoints = false
		},
		damage90 = {
			score = 90,
			bonusPoints = false
		},
		death_head = {
			score = 30,
			bonusPoints = true
		},
		death_melee = {
			score = 60,
			bonusPoints = true
		},
		transform_kill = {
			score = 50,
			bonusPoints = true
		}
	} --[[ @ 0]]
	local f530_local2 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	local f530_local3 = Engine[@"GetModelForController"]( f530_arg1 ) --[[ @ 0]]
	f530_arg0.pendingDelayedScores = 0 --[[ @ 0]]
	local f530_local4 = Engine[@"GetClientNum"]( f530_arg1 ) --[[ @ 0]]
	for f530_local5 = 0 --[[ @ 0]], f530_local0 - 1, 1 do
		local f530_local8 = f530_local5 --[[ @ 0]]
		local f530_local9 = DataSources.PlayerListZM.clientNumToArrayIndex( f530_local8, f530_local4 ) --[[ @ 0]]
		local f530_local10 = f530_arg0["ZMScrPlusPoints" .. f530_local9] --[[ @ 0]]
		f530_local10.lastAnim = 0 --[[ @ 0]]
		f530_local10.activeScoreElements = 0 --[[ @ 0]]
		local f530_local11 = Engine[@"hash_E4D2F32833CFA6C"]( f530_local8 ) --[[ @ 0]]
		local f530_local12 = f530_local11.clientNum:get() --[[ @ 0]]
		if f530_local12 ~= nil then
			local f530_local13 = f530_local2:create( "PlayerList.client" .. f530_local12 ) --[[ @ 0]]
			if f530_local13 ~= nil then
				for f530_local17, f530_local18 in pairs( f530_local1 ) --[[ @ 0]] do
					f530_local10:registerEventHandler( "delayed_score", function ( element, event )
						CoD.HUDUtility.ZMScrEmitPoints( element, event.score, f530_arg1, f530_arg2, f530_local8 > 0, event.bonusPoints ) --[[ @ 0]]
						f530_arg0.pendingDelayedScores = f530_arg0.pendingDelayedScores - 1 --[[ @ 0]]
					end ) --[[ @ 0]]
					f530_local10:subscribeToModel( Engine[@"CreateModel"]( f530_local13, "score_cf_" .. f530_local17 ), function ( model )
						if Engine[@"GetModelValue"]( model ) ~= nil and not CoD.HUDUtility.ZMScrHideScoreEvent( f530_arg1 ) then
							local f532_local0 = f530_local18.score --[[ @ 0]]
							local f532_local1 = Engine[@"GetModel"]( f530_local3, "hudItems.doublePointsActive" ) --[[ @ 0]]
							if f532_local1 ~= nil and Engine[@"GetModelValue"]( f532_local1 ) == 1 then
								f532_local0 = f530_local18.score * 2 --[[ @ 0]]
							end
							if f530_local10.accountedForScore ~= nil then
								f530_local10.accountedForScore = f530_local10.accountedForScore + f532_local0 --[[ @ 0]]
							end
							if f530_arg0.pendingDelayedScores < 500 then
								f530_arg0:addElement( LUI.UITimer.new( 16 * Engine[@"GetModelValue"]( model ) % 3, {
									name = "delayed_score",
									score = f532_local0,
									bonusPoints = f530_local18.bonusPoints
								}, true, f530_local10 ) ) --[[ @ 0]]
								f530_arg0.pendingDelayedScores = f530_arg0.pendingDelayedScores + 1 --[[ @ 0]]
							end
						end
					end ) --[[ @ 0]]
				end
				if f530_local9 ~= 0 then
					f530_local14 = f530_arg0["Listing" .. f530_local9 + 1] --[[ @ 0]]
					if f530_local14 ~= nil then
						CoD.HUDUtility.ZMScrSetupTrialsElementsForClient( f530_local14.TrialsInfo, f530_arg1, f530_local13 ) --[[ @ 0]]
					end
				end
			end
		end
		local f530_local13 = f530_local11.scoreboard.score --[[ @ 0]]
		f530_local10.accountedForScore = Engine[@"GetModelValue"]( f530_local13 ) --[[ @ 0]]
		f530_local10:subscribeToModel( f530_local13, function ( model )
			local f533_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
			if f530_local10.accountedForScore == nil then
				f530_local10.accountedForScore = f533_local0 --[[ @ 0]]
			end
			if f533_local0 ~= f530_local10.accountedForScore then
				CoD.HUDUtility.ZMScrEmitPoints( f530_local10, f533_local0 - f530_local10.accountedForScore, f530_arg1, f530_arg2, f530_local8 > 0, false ) --[[ @ 0]]
				f530_local10.accountedForScore = f533_local0 --[[ @ 0]]
			end
		end ) --[[ @ 0]]
	end
	Engine[@"CreateModel"]( f530_local3, "hudItems.doublePointsActive" ) --[[ @ 0]]
end
 --[[ @ 0]]
