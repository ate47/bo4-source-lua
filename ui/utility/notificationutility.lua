-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:36
CoD.NotificationUtility = {} --[[ @ 0]]
CoD.NotificationUtility.DefaultNotificationFadeOutDuration = 500 --[[ @ 0]]
CoD.NotificationUtility.NotificationX = 0 --[[ @ 0]]
CoD.NotificationUtility.NotificationY = 5 --[[ @ 0]]
CoD.NotificationUtility.NotificationQueueAnimationDuration = 250 --[[ @ 0]]
CoD.NotificationUtility.NotificationQueueOpacity = 0.95 --[[ @ 0]]
CoD.NotificationUtility.NotificationQueueScale = 0.65 --[[ @ 0]]
CoD.NotificationUtility.RewardDefaultFadeOutDuration = 500 --[[ @ 0]]
CoD.NotificationUtility.RewardMaxRewards = 3 --[[ @ 0]]
CoD.NotificationUtility.RewardQueueAnimationDuration = 200 --[[ @ 0]]
CoD.NotificationUtility.RewardShowItemDuration = 3500 --[[ @ 0]]
CoD.NotificationUtility.RewardTimeBetweenRewards = 700 --[[ @ 0]]
CoD.NotificationUtility.AccentColors = {
	CamoChallenges = "26 114 203",
	ReticleChallenges = "239 88 57",
	Challenges = "219 186 35",
	WeaponLevelUp = "65 17 113",
	RankUp = "109 116 46",
	SpecialistChallenges = "247 204 15",
	LootContractComplete = "255 192 3"
} --[[ @ 0]]
CoD.NotificationUtility.MaxQueue = {
	Medal = 3
} --[[ @ 0]]
CoD.NotificationUtility.NotificationDuration = {
	Medal = 2300,
	CamoChallenges = 2000,
	ReticleChallenges = 2000,
	Challenges = 2000,
	WeaponLevelUp = 2000,
	RankUp = 3000,
	SpecialistChallenges = 2000,
	WaypointCaptured = 2000,
	LootContractComplete = 3000
} --[[ @ 0]]
CoD.NotificationUtility.Priorities = {
	WaypointCaptured = 1,
	LootContractComplete = 2,
	Medal = 3,
	CamoChallenges = 4,
	ReticleChallenges = 5,
	Challenges = 6,
	WeaponLevelUp = 7,
	SpecialistChallenges = 8,
	RankUp = 9
} --[[ @ 0]]
CoD.NotificationUtility.GameUpdateMessageEnum = {
	LIVES_REMAINING = 1,
	LIVES_REMAINING_VS = 2,
	ZONE_A_CAPTURED = 3,
	ZONE_B_CAPTURED = 4,
	ZONE_C_CAPTURED = 5,
	CHANGE_CLASS_NEXT_SPAWN = 6,
	NO_RESPAWNS_REMAINING = 7,
	FIRST_TEAM_TO_SCORE_WINS = 8,
	SPRECTRE_RISING_KILL_TARGET = 9,
	SPRECTRE_RISING_SURVIVE = 10,
	SPRECTRE_RISING_TARGET_KILLED = 11,
	SPRECTRE_RISING_TARGET_SURVIVED = 12
} --[[ @ 0]]
CoD.NotificationUtility.GameUpdateMessages = {
	[CoD.NotificationUtility.GameUpdateMessageEnum.LIVES_REMAINING] = {
		title = @"hash_5E012850A54450A1",
		oneLifeTitle = @"hash_6B631579DB5C582",
		colorSet = ColorSet.GameUpdateLives
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.LIVES_REMAINING_VS] = {
		title = @"hash_4FCF4CC13B1DA435",
		colorSet = ColorSet.GameUpdateLives
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_A_CAPTURED] = {
		title = @"hash_6222CB9625823163"
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_B_CAPTURED] = {
		title = @"hash_6222CC9625823316"
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_C_CAPTURED] = {
		title = @"hash_6222CD96258234C9"
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.CHANGE_CLASS_NEXT_SPAWN] = {
		title = @"hash_181A96FE9C28ADA2",
		colorSet = ColorSet.White
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.NO_RESPAWNS_REMAINING] = {
		title = @"hash_1AC79C9DCB937708",
		colorSet = ColorSet.GameUpdateLives
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.FIRST_TEAM_TO_SCORE_WINS] = {
		title = @"hash_130FBFEC096787C2",
		colorSet = ColorSet.White
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_KILL_TARGET] = {
		title = @"hash_20AF6C5BE452685B",
		colorSet = ColorSet.White
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_SURVIVE] = {
		title = @"hash_5051255F540A6BED",
		colorSet = ColorSet.White
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_TARGET_KILLED] = {
		title = @"hash_8FDB14519CBC4FA",
		colorSet = ColorSet.White
	},
	[CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_TARGET_SURVIVED] = {
		title = @"hash_FEFEA554B814971",
		colorSet = ColorSet.White
	}
} --[[ @ 0]]
CoD.NotificationUtility.InvalidCmdHintStrings = {
	[Enum[@"hash_6871813ED3FF6169"][@"hash_4C53A048EA2553DF"]] = @"hash_37605398DCE96965"
} --[[ @ 0]]
CoD.NotificationUtility.TieredChallengeCheck = function ( f1_arg0, f1_arg1 )
	if not IsMultiplayer() then
		return false
	else
		local f1_local0, f1_local1 = CoD.ChallengesUtility.GetChallengeRewardDisplayTier( f1_arg0.rewardInfo ) --[[ @ 0]]
		local f1_local2, f1_local3 = CoD.ChallengesUtility.GetChallengeRewardDisplayTier( f1_arg1.rewardInfo ) --[[ @ 0]]
		if f1_local1 == f1_local3 then
			return f1_local2 < f1_local0
		else
			return false
		end
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.PriorityFunctions = {
	CamoChallenges = CoD.NotificationUtility.TieredChallengeCheck,
	ReticleChallenges = CoD.NotificationUtility.TieredChallengeCheck,
	Challenges = CoD.NotificationUtility.TieredChallengeCheck,
	SpecialistChallenges = CoD.NotificationUtility.TieredChallengeCheck
} --[[ @ 0]]
CoD.NotificationUtility.CreateNotification = {} --[[ @ 0]]
CoD.NotificationUtility.CombineNotifications = {} --[[ @ 0]]
CoD.NotificationUtility.DoNotificationsCombine = {} --[[ @ 0]]
CoD.NotificationUtility.XPRewardImage = @"t7_hud_mp_notifications_xp_blue" --[[ @ 0]]
CoD.NotificationUtility.UpdateVisibility = function ( f2_arg0, f2_arg1 )
	if not (not CoD.IsShoutcaster( f2_arg1.controller ) or CoD.ShoutcasterProfileVarBool( f2_arg1.controller, "shoutcaster_ds_playernotifications" )) or Engine[@"IsVisibilityBitSet"]( f2_arg0.controller, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) or Engine[@"IsVisibilityBitSet"]( f2_arg0.controller, Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"] ) then
		f2_arg0:setAlpha( 0 ) --[[ @ 0]]
	else
		f2_arg0:setAlpha( 1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.InitNotifications = function ( f3_arg0, f3_arg1, f3_arg2 )
	CoD.NotificationUtility.SessionMode = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	f3_arg0.controller = f3_arg1 --[[ @ 0]]
	f3_arg0.menu = f3_arg2 --[[ @ 0]]
	local f3_local0 = Engine[@"GetModelForController"]( f3_arg1 ) --[[ @ 0]]
	f3_arg0:setModel( f3_local0:create( "NotificationQueue" ), f3_arg1 ) --[[ @ 0]]
	f3_arg0.clearNotificationQueue = CoD.NotificationUtility.ClearNotificationQueue --[[ @ 0]]
	f3_arg0.notificationQueueEmptyModel = f3_local0:create( "NotificationQueueEmpty" ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f3_arg0.notificationQueueEmptyModel, true ) --[[ @ 0]]
	f3_arg0.BGBNotificationQueueEmptyModel = f3_local0:create( "BGBNotificationQueueEmpty" ) --[[ @ 0]]
	Engine[@"SetModelValue"]( f3_arg0.BGBNotificationQueueEmptyModel, true ) --[[ @ 0]]
	f3_arg0.availableNotificationModels = {} --[[ @ 0]]
	local f3_local1 = 0 --[[ @ 0]]
	for f3_local5, f3_local6 in pairs( CoD.NotificationUtility.MaxQueue ) --[[ @ 0]] do
		if f3_local1 < f3_local6 then
			f3_local1 = f3_local6 --[[ @ 0]]
		end
	end
	f3_local1 = f3_local1 + 1 --[[ @ 0]]
	for f3_local2 = 1 --[[ @ 0]], f3_local1, 1 do
		f3_local6 = table.insert --[[ @ 0]]
		local f3_local7 = f3_arg0.availableNotificationModels --[[ @ 0]]
		local f3_local8 = f3_arg0:getModel() --[[ @ 0]]
		f3_local6( f3_local7, f3_local8:create( "Notification" .. f3_local2 ) ) --[[ @ 0]]
	end
	f3_arg0.notificationWidgetsBeingShown = {} --[[ @ 0]]
	f3_arg0.notificationQueue = {} --[[ @ 0]]
	f3_arg0.streamedImages = {} --[[ @ 0]]
	f3_arg0:subscribeToGlobalModel( f3_arg1, "PerController", "scriptNotify", function ( model )
		local f4_local0 = Engine[@"GetModelValue"]( model ) --[[ @ 0]]
		local f4_local1 = {
			controller = f3_arg1,
			name = f4_local0,
			data = CoD.GetScriptNotifyData( model )
		} --[[ @ 0]]
		if CoD.HUDUtility.IsAnyGameType( f3_arg1, "ztrials" ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) and not f4_local0 == @"clear_notification_queue" then
			return 
		elseif f4_local0 == @"medal_received" then
			if (Engine[@"hash_49E5BE3B4BBA4E0E"]( "ui_show_medals" ) or Engine[@"hash_3573048F8D3B4E25"]()) and CoD.JobFeedUtility.GetJobType( f4_local1.data[1] ) == @"hash_0" and (CoD.HUDUtility.FullscreenController == nil or f3_arg1 == CoD.HUDUtility.FullscreenController) then
				CoD.NotificationUtility.OnMedalReceived( f3_arg0, f4_local1 ) --[[ @ 0]]
			end
		elseif f4_local0 == @"challenge_complete" and not IsWarzone() then
			local f4_local2 = {
				challengeID = f4_local1.data[1],
				itemIndex = f4_local1.data[2],
				challengeType = f4_local1.data[3],
				tableNumber = f4_local1.data[4],
				row = f4_local1.data[5],
				maxVal = f4_local1.data[6],
				rewardXP = f4_local1.data[7],
				type = "Challenges"
			} --[[ @ 0]]
			if CoD.ChallengesUtility.IsSpecialistTransmissionChallenge( f4_local2.challengeType, f4_local2.tableNumber, f4_local2.row ) or CoD.ChallengesUtility.IsTerribleKnifeChallenge( f4_local2.challengeType, f4_local2.tableNumber, f4_local2.row ) or CoD.ChallengesUtility.IsHiddenPostShipChallenge( f4_local2.challengeType, f4_local2.tableNumber, f4_local2.row ) then
				return 
			end
			f4_local2.rewardInfo = CoD.ChallengesUtility.GetChallengeRewardInfo( f3_arg1, f4_local2.tableNumber, f4_local2.row, f4_local2.challengeType, f4_local2.itemIndex, Engine[@"GetEquippedHero"]( f3_arg1, Engine[@"CurrentSessionMode"]() ) ) --[[ @ 0]]
			if f4_local2.rewardInfo then
				CoD.NotificationUtility.AddNotification( f3_arg0, f4_local2 ) --[[ @ 0]]
			end
		elseif f4_local0 == @"gun_level_complete" then
			CoD.NotificationUtility.AddNotification( f3_arg0, {
				rank = f4_local1.data[1],
				itemIndex = f4_local1.data[2],
				attachmentIndex = f4_local1.data[3],
				rewardXP = f4_local1.data[4],
				type = "WeaponLevelUp"
			} ) --[[ @ 0]]
		elseif f4_local0 == @"rank_up" then
			CoD.NotificationUtility.AddNotification( f3_arg0, {
				rank = f4_local1.data[1],
				prestige = f4_local1.data[2],
				unlockTokensAdded = f4_local1.data[3],
				type = "RankUp"
			} ) --[[ @ 0]]
		elseif f4_local0 == @"clear_notification_queue" then
			CoD.NotificationUtility.ClearNotificationQueue( f3_arg0 ) --[[ @ 0]]
		elseif f4_local0 == @"waypoint_captured" then
			local f4_local2 = CoD.GetScriptNotifyData( model ) --[[ @ 0]]
			CoD.NotificationUtility.AddNotification( f3_arg0, {
				objName = Engine[@"GetIString"]( f4_local2[1], "CS_LOCALIZED_STRINGS" ),
				percentage = f4_local2[2],
				type = "WaypointCaptured"
			} ) --[[ @ 0]]
		elseif f4_local0 == @"hash_1739C4BD5BAF83BC" and not IsWarzone() then
			CoD.NotificationUtility.AddNotification( f3_arg0, {
				contractId = f4_local1.data[1],
				type = "LootContractComplete"
			} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f3_arg0:registerEventHandler( "notification_time_up", function ( element, event )
		if event.notificationContainer.fadingOffQueue then
			return 
		end
		event.notificationContainer.timeUp = true --[[ @ 0]]
		if event.notificationContainer.widget:hasClip( "TimeUp" ) then
			event.notificationContainer.widget:playClip( "TimeUp" ) --[[ @ 0]]
			event.notificationContainer.widget:registerEventHandler( "clip_over", function ( element, event )
				CoD.NotificationUtility.OnNotificationComplete( element ) --[[ @ 0]]
			end ) --[[ @ 0]]
		else
			event.notificationContainer:beginAnimation( "keyframe", CoD.NotificationUtility.DefaultNotificationFadeOutDuration ) --[[ @ 0]]
			event.notificationContainer:setAlpha( 0 ) --[[ @ 0]]
			event.notificationContainer:registerEventHandler( "transition_complete_keyframe", function ( element, event )
				CoD.NotificationUtility.OnNotificationComplete( element ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f3_arg0:registerEventHandler( "queue_done_animating", function ( element, event )
		element.queueAnimating = nil --[[ @ 0]]
		CoD.NotificationUtility.ShowNextNotification( element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f3_arg0:subscribeToModel( f3_arg0.BGBNotificationQueueEmptyModel, function ( model )
		if Engine[@"GetModelValue"]( model ) == true then
			f3_arg0:processEvent( {
				name = "queue_done_animating"
			} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f3_local2 = function ( f10_arg0 )
		CoD.NotificationUtility.UpdateVisibility( f3_arg0, {
			controller = f3_arg1
		} ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	if IsMultiplayer() then
		f3_local3 = Engine[@"GetModelForController"]( f3_arg1 ) --[[ @ 0]]
		f3_arg0:subscribeToModel( f3_local3["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"]], f3_local2 ) --[[ @ 0]]
		f3_arg0:subscribeToModel( f3_local3["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"]], f3_local2 ) --[[ @ 0]]
		f3_arg0:subscribeToModel( f3_local3["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"]], f3_local2 ) --[[ @ 0]]
		f3_arg0:subscribeToModel( f3_local3["CodCaster.profileSettingsUpdated"], f3_local2 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.AddNotification = function ( f11_arg0, f11_arg1 )
	if Engine[@"IsVisibilityBitSet"]( f11_arg0.controller, Enum[@"UIVisibilityBit"][@"hash_5198075B069840DC"] ) and not Engine[@"IsVisibilityBitSet"]( f11_arg0.controller, Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ) then
		return 
	end
	f11_arg1.priority = CoD.NotificationUtility.Priorities[f11_arg1.type] --[[ @ 0]]
	local f11_local0 = 1 --[[ @ 0]]
	while f11_local0 <= #f11_arg0.notificationQueue do
		local f11_local1 = f11_arg0.notificationQueue[f11_local0] --[[ @ 0]]
		if f11_arg1.priority < f11_local1.priority then
			break
		elseif f11_arg1.type == f11_local1.type and CoD.NotificationUtility.PriorityFunctions[f11_arg1.type] and CoD.NotificationUtility.PriorityFunctions[f11_arg1.type]( f11_arg1, f11_local1 ) then
			break
		end
		f11_local0 = f11_local0 + 1 --[[ @ 0]]
	end
	table.insert( f11_arg0.notificationQueue, f11_local0, f11_arg1 ) --[[ @ 0]]
	CoD.NotificationUtility.ShowNextNotification( f11_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.CombineNotifications.Medal = function ( f12_arg0, f12_arg1 )
	if not f12_arg0.numStacks then
		f12_arg0.numStacks = 2 --[[ @ 0]]
	else
		f12_arg0.numStacks = f12_arg0.numStacks + 1 --[[ @ 0]]
	end
	local f12_local0 = f12_arg0.widget:getModel() --[[ @ 0]]
	Engine[@"SetModelValue"]( f12_local0:create( "subtitle" ), "x" .. f12_arg0.numStacks ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.WaypointCaptured = function ( f13_arg0, f13_arg1, f13_arg2 )
	local f13_local0 = f13_arg2:create( "objName" ) --[[ @ 0]]
	f13_local0:set( f13_arg1.objName ) --[[ @ 0]]
	f13_local0 = f13_arg2:create( "percentage" ) --[[ @ 0]]
	f13_local0:set( f13_arg1.percentage ) --[[ @ 0]]
	return CoD.WaypointCaptured.new( f13_arg0.menu, f13_arg0.controller )
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.Medal = function ( f14_arg0, f14_arg1, f14_arg2 )
	local f14_local0 = CoD.NotificationUtility.GetMedalData( f14_arg1.scoreInfoIndex ) --[[ @ 0]]
	local f14_local1 = f14_local0.name and Engine[@"hash_4F9F1239CFD921FE"]( f14_local0.name ) or "" --[[ @ 0]]
	local f14_local2 = f14_arg2:create( "title" ) --[[ @ 0]]
	f14_local2:set( f14_local1 ) --[[ @ 0]]
	f14_local2 = f14_arg2:create( "subtitle" ) --[[ @ 0]]
	f14_local2:set( "" ) --[[ @ 0]]
	f14_local2 = f14_arg2:create( "icon" ) --[[ @ 0]]
	f14_local2:set( f14_local0.iconSmall ) --[[ @ 0]]
	return CoD[f14_local0.widgetName].new( f14_arg0.menu, f14_arg0.controller )
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.WeaponLevelUp = function ( f15_arg0, f15_arg1, f15_arg2 )
	local f15_local0 = f15_arg2:create( "title" ) --[[ @ 0]]
	f15_local0:set( Engine[@"hash_4F9F1239CFD921FE"]( Engine[@"GetItemName"]( f15_arg1.itemIndex ) ) ) --[[ @ 0]]
	f15_local0 = f15_arg2:create( "subtitle" ) --[[ @ 0]]
	f15_local0:set( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2DF1FC4A933D0FDA", f15_arg1.rank + 2 ) ) --[[ @ 0]]
	f15_local0 = CoD.CACUtility.GetUnlockableItemInfo( f15_arg1.itemIndex, CoD.NotificationUtility.SessionMode ) --[[ @ 0]]
	local f15_local1 --[[ @ 0]]
	if f15_local0 then
		f15_local1 = CoD.CACUtility.GetPreviewImageLarge( CoD.NotificationUtility.SessionMode, f15_local0 ) --[[ @ 0]]
		if not f15_local1 then
		
		else
			local f15_local2 = f15_arg2:create( "icon" ) --[[ @ 0]]
			f15_local2:set( f15_local1 ) --[[ @ 0]]
			f15_local2 = f15_arg2:create( "color" ) --[[ @ 0]]
			f15_local2:set( CoD.NotificationUtility.AccentColors[f15_arg1.type] ) --[[ @ 0]]
			if IsArenaMode() then
				f15_arg0:setAlpha( 0 ) --[[ @ 0]]
			end
			if f15_arg1.rewardXP and f15_arg1.rewardXP > 0 then
				f15_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f15_arg1.type], CoD.NotificationUtility.XPRewardImage, Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7D6137AA2004DB90", f15_arg1.rewardXP ) ) --[[ @ 0]]
			end
			f15_local2 = f15_arg1.attachmentIndex --[[ @ 0]]
			if f15_local2 and f15_local2 ~= 0 then
				f15_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f15_arg1.type], Engine[@"GetAttachmentUniqueImageByAttachmentIndex"]( Engine[@"CurrentSessionMode"](), f15_arg1.itemIndex, f15_local2 ), Engine[@"Localize"]( Engine[@"GetAttachmentNameByIndex"]( f15_local2 ) ) ) --[[ @ 0]]
			end
			return CoD.WeaponLevelUpNotification.new( f15_arg0.menu, f15_arg0.controller )
		end
	end
	f15_local1 = @"blacktransparent" --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.RankUp = function ( f16_arg0, f16_arg1, f16_arg2 )
	local f16_local0 = IsInParagonCapableGameMode() --[[ @ 0]]
	if f16_local0 then
		f16_local0 = f16_arg1.prestige == CoD.PrestigeUtility.GetPrestigeCap() --[[ @ 0]]
	end
	local f16_local1 = "" --[[ @ 0]]
	local f16_local2 = "" --[[ @ 0]]
	if f16_local0 then
		f16_local1 = Engine[@"GetParagonRankDisplayLevel"]( f16_arg1.rank ) --[[ @ 0]]
		local f16_local3 = Engine[@"GetPlayerStats"]( f16_arg0.controller ) --[[ @ 0]]
		local f16_local4 = f16_local3.playerstatslist.paragon_icon_id.statvalue --[[ @ 0]]
		if f16_local4 then
			local f16_local5 = f16_local4:get() --[[ @ 0]]
		end
		f16_local4 = f16_local5 or CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID --[[ @ 0]]
		if f16_local4 ~= CoD.PrestigeUtility.INVALID_PARAGON_ICON_ID then
			f16_local2 = Engine[@"GetParagonIconById"]( f16_local4 ) --[[ @ 0]]
		else
			f16_local2 = Engine[@"GetRankIcon"]( 0, f16_arg1.prestige ) --[[ @ 0]]
		end
	else
		f16_local1 = Engine[@"GetRankDisplayLevel"]( f16_arg1.rank ) --[[ @ 0]]
		f16_local2 = Engine[@"GetRankIcon"]( f16_arg1.rank, f16_arg1.prestige ) --[[ @ 0]]
	end
	local f16_local3 = f16_arg2:create( "title" ) --[[ @ 0]]
	f16_local3:set( CoD.BaseUtility.LocalizeIfXHash( CoD.GetRankName( f16_arg1.rank, f16_arg1.prestige ) ) ) --[[ @ 0]]
	f16_local3 = f16_arg2:create( "subtitle" ) --[[ @ 0]]
	f16_local3:set( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2DF1FC4A933D0FDA", f16_local1 ) ) --[[ @ 0]]
	f16_local3 = f16_arg2:create( "icon" ) --[[ @ 0]]
	f16_local3:set( GetRankIconLarge( f16_local2 ) ) --[[ @ 0]]
	f16_local3 = f16_arg2:create( "color" ) --[[ @ 0]]
	f16_local3:set( CoD.NotificationUtility.AccentColors[f16_arg1.type] ) --[[ @ 0]]
	if f16_arg1.rewardXP and f16_arg1.rewardXP > 0 then
		f16_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f16_arg1.type], CoD.NotificationUtility.XPRewardImage, Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7D6137AA2004DB90", f16_arg1.rewardXP ) ) --[[ @ 0]]
	end
	if not f16_local0 then
		f16_local3 = Engine[@"GetUnlockedItemsForLevel"]( f16_arg0.controller, f16_arg1.rank ) --[[ @ 0]]
		local f16_local4 = false --[[ @ 0]]
		for f16_local9, f16_local10 in ipairs( f16_local3 ) --[[ @ 0]] do
			local f16_local11 = f16_local10.itemImage --[[ @ 0]]
			if IsZombies() and f16_local10.loadoutType ~= "equippedbubblegumpack" then
				
			else
				
			end
			f16_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f16_arg1.type], f16_local11, Engine[@"hash_4F9F1239CFD921FE"]( f16_local10.itemName ) ) --[[ @ 0]]
		end
	end
	return CoD.RankUpNotification.new( f16_arg0.menu, f16_arg0.controller )
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.Challenges = function ( f17_arg0, f17_arg1, f17_arg2 )
	local f17_local0 = f17_arg0.controller --[[ @ 0]]
	local f17_local1 = f17_arg1.rewardInfo --[[ @ 0]]
	local f17_local2 = nil --[[ @ 0]]
	if f17_local1.titleText then
		if f17_arg1.challengeType == Enum[@"statsMilestoneTypes_t"][@"hash_586B082C51FC2370"] and f17_local1.reticleInfo then
			f17_arg1.type = "ReticleChallenges" --[[ @ 0]]
		end
		if f17_arg1.challengeType == Enum[@"statsMilestoneTypes_t"][@"hash_128E0B9B3994DEC3"] then
			f17_arg1.type = "SpecialistChallenges" --[[ @ 0]]
		end
		if f17_local1.camoInfo then
			f17_arg1.type = "CamoChallenges" --[[ @ 0]]
		end
		local f17_local3 = {
			"vialInfo",
			"xpInfo",
			"transmissionInfo",
			"specialistInfo",
			"camoInfo",
			"emblemInfo",
			"reticleInfo"
		} --[[ @ 0]]
		local f17_local4 = f17_local1.currentTier --[[ @ 0]]
		if f17_local4 then
			f17_local4 = f17_local1.maxTier --[[ @ 0]]
			if f17_local4 then
				f17_local4 = f17_local1.maxTier <= f17_local1.currentTier --[[ @ 0]]
			end
		end
		for f17_local8, f17_local9 in ipairs( f17_local3 ) --[[ @ 0]] do
			if f17_local1[f17_local9] and (f17_local9 ~= "emblemInfo" or f17_local4) then
				f17_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f17_arg1.type], f17_local1[f17_local9].image, f17_local1[f17_local9].displayString, f17_local1[f17_local9].rewardSize ) --[[ @ 0]]
			end
		end
		f17_local5 = f17_arg2:create( "title" ) --[[ @ 0]]
		f17_local5:set( f17_local1.titleText ) --[[ @ 0]]
		f17_local5 = f17_arg2:create( "subtitle" ) --[[ @ 0]]
		f17_local5:set( f17_local1.subtitleText ) --[[ @ 0]]
		f17_local5 = f17_arg2:create( "icon" ) --[[ @ 0]]
		f17_local5:set( f17_local1.icon ) --[[ @ 0]]
		f17_local5 = f17_arg2:create( "color" ) --[[ @ 0]]
		f17_local5:set( CoD.NotificationUtility.AccentColors[f17_arg1.type] ) --[[ @ 0]]
		if IsMultiplayer() then
			f17_local5 = CoD.ChallengesUtility.GetChallengeRewardDisplayTier( f17_local1 ) --[[ @ 0]]
			if f17_local1.specialistInfo then
				if f17_local5 == CoD.ChallengesUtility.SpecialistRewardTiers.CompletionEpic then
					f17_local2 = CoD.SpecialistCompletionEpicChallengeNotification --[[ @ 0]]
				elseif f17_local5 == CoD.ChallengesUtility.SpecialistRewardTiers.Epic then
					f17_local2 = CoD.SpecialistEpicChallengeNotification --[[ @ 0]]
				end
				f17_local2 = CoD.SpecialistChallengeNotification --[[ @ 0]]
			elseif f17_local1.camoInfo then
				f17_local2 = CoD.CamoChallengeNotification --[[ @ 0]]
			elseif f17_local1.reticleInfo then
				f17_local2 = CoD.ReticleChallengeNotification --[[ @ 0]]
			elseif f17_local1.emblemInfo then
				if f17_local5 == CoD.ChallengesUtility.EmblemRewardTiers.Mastery then
					f17_local2 = CoD.MPChallengeMasteryNotification --[[ @ 0]]
				end
				f17_local2 = CoD.MPChallengeNotification --[[ @ 0]]
			end
			f17_local2 = CoD.MPChallengeNotification --[[ @ 0]]
		elseif IsZombies() or IsWarzone() then
			if f17_local1.camoInfo then
				f17_local2 = CoD.CamoChallengeNotification --[[ @ 0]]
			elseif f17_local1.reticleInfo then
				f17_local2 = CoD.ReticleChallengeNotification --[[ @ 0]]
			end
			f17_local2 = CoD.MPChallengeNotification --[[ @ 0]]
		end
	end
	if f17_local2 and f17_local2.new then
		return f17_local2.new( f17_arg0.menu, f17_arg0.controller )
	else
		return CoD.ChallengesNotification.new( f17_arg0.menu, f17_arg0.controller )
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.CreateNotification.LootContractComplete = function ( f18_arg0, f18_arg1, f18_arg2 )
	local f18_local0 = CoDShared.LootContracts.GetContractTitle( f18_arg1.contractId ) --[[ @ 0]]
	local f18_local1 = CoDShared.LootContracts.GetContractDescription( f18_arg1.contractId ) --[[ @ 0]]
	local f18_local2 = CoDShared.LootContracts.GetContractsProgressTarget( f18_arg0.controller, f18_arg1.contractId ) --[[ @ 0]]
	local f18_local3 = CoDShared.LootContracts.GetContractsCategoryHash( f18_arg1.contractId ) --[[ @ 0]]
	local f18_local4 = CoDShared.LootContracts.GetContractsDifficulty( f18_arg1.contractId ) --[[ @ 0]]
	local f18_local5 = Engine[@"hash_4F9F1239CFD921FE"]( f18_local1, f18_local2 ) --[[ @ 0]]
	local f18_local6 = CoD.ContractUtility.GetLootContractIcon( f18_local3, f18_local4 ) --[[ @ 0]]
	if f18_local3 == @"play" then
		f18_local6 = CoD.ContractUtility.GetLootContractIcon( f18_local3, CoDShared.LootContracts.GetContractsGameMode( f18_arg1.contractId ) ) --[[ @ 0]]
	end
	local f18_local7 = CoDShared.LootContracts.GetCurrentContractGameMode() --[[ @ 0]]
	if f18_local7 ~= Enum[@"hash_41B899F51A938E95"][@"hash_28291997DE05302D"] then
		local f18_local8 = Engine[@"hash_292C69F543736D04"]( f18_arg0.controller ) --[[ @ 0]]
		for f18_local13, f18_local14 in ipairs( f18_local8.pinnedContracts[f18_local7] ) --[[ @ 0]] do
			if f18_local14.id == f18_arg1.contractId then
				if f18_local14.xpAmount and f18_local14.xpAmount > 0 then
					f18_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f18_arg1.type], CoD.NotificationUtility.XPRewardImage, Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7D6137AA2004DB90", f18_local14.xpAmount ) ) --[[ @ 0]]
				end
				if f18_local14.reward and f18_local14.reward.type == 1 and f18_local14.reward.amount > 0 then
				
				elseif f18_local14.reward and f18_local14.reward.type == 3 and f18_local14.reward.id == "21" and f18_local14.reward.amount > 0 then
					f18_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f18_arg1.type], @"ui_icon_nebulium_medium", Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3F251843889153EE", f18_local14.reward.amount ) ) --[[ @ 0]]
					break
				end
				local f18_local12 --[[ @ 0]]
				if f18_local14.reward.amount > 1 then
					f18_local12 = @"hash_8FD4B5379066B7A" --[[ @ 0]]
					if not f18_local12 then
					
					else
						f18_arg0.NotificationRewardQueue:addReward( CoD.NotificationUtility.AccentColors[f18_arg1.type], @"ui_icon_blackmarket_reserves_case_small", Engine[@"hash_4F9F1239CFD921FE"]( f18_local12, f18_local14.reward.amount ) ) --[[ @ 0]]
					end
				end
				f18_local12 = @"hash_2C18D8F7DBC9D643" --[[ @ 0]]
			end
		end
	end
	local f18_local8 = f18_arg2:create( "icon" ) --[[ @ 0]]
	f18_local8:set( f18_local6 ) --[[ @ 0]]
	f18_local8 = f18_arg2:create( "title" ) --[[ @ 0]]
	f18_local8:set( Engine[@"hash_4F9F1239CFD921FE"]( f18_local0 ) ) --[[ @ 0]]
	f18_local8 = f18_arg2:create( "subtitle" ) --[[ @ 0]]
	f18_local8:set( f18_local5 ) --[[ @ 0]]
	f18_local8 = f18_arg2:create( "color" ) --[[ @ 0]]
	f18_local8:set( CoD.NotificationUtility.AccentColors[f18_arg1.type] ) --[[ @ 0]]
	return CoD.LootContractCompleteNotification.new( f18_arg0.menu, f18_arg0.controller )
end
 --[[ @ 0]]
CoD.NotificationUtility.DoNotificationsCombine.Medal = function ( f19_arg0, f19_arg1 )
	return f19_arg0.scoreInfoIndex == f19_arg1.scoreInfoIndex
end
 --[[ @ 0]]
CoD.NotificationUtility.GetMedalData = function ( f20_arg0 )
	local f20_local0 = {
		name = @"hash_0",
		description = @"hash_0",
		iconSmall = @"$default",
		iconLarge = @"$default",
		widgetName = "BadasseryMedal",
		foundMedal = false
	} --[[ @ 0]]
	local f20_local1 = Engine[@"hash_25DC2BA4A99CE43E"]( CoD.scoreInfoTable, f20_arg0, CoD.AARUtility.MedalRefCol ) --[[ @ 0]]
	if f20_local1 and f20_local1 ~= @"hash_0" then
		local f20_local2 = Engine[@"hash_2E00B2F29271C60B"]( f20_local1 ) --[[ @ 0]]
		if f20_local2 then
			f20_local0.name = f20_local2[@"stringref"] or @"hash_0" --[[ @ 0]]
			f20_local0.description = f20_local2[@"description"] or @"hash_0" --[[ @ 0]]
			f20_local0.iconSmall = f20_local2[@"hash_5DA32D2BFAA81507"] --[[ @ 0]]
			f20_local0.iconLarge = f20_local2[@"hash_78027A8209C5D65F"] --[[ @ 0]]
			f20_local0.widgetName = f20_local2[@"hash_407F0119E3154625"] --[[ @ 0]]
			f20_local0.foundMedal = true --[[ @ 0]]
		end
	end
	return f20_local0
end
 --[[ @ 0]]
CoD.NotificationUtility.OnMedalReceived = function ( f21_arg0, f21_arg1 )
	local f21_local0 = f21_arg1.data[1] --[[ @ 0]]
	local f21_local1 = CoD.NotificationUtility.GetMedalData( f21_local0 ) --[[ @ 0]]
	local self = LUI.UIImage.new() --[[ @ 0]]
	f21_arg0.streamedImages[self] = true --[[ @ 0]]
	self:setAlpha( 0 ) --[[ @ 0]]
	self:setImage( RegisterImage( f21_local1.iconSmall ) ) --[[ @ 0]]
	self:setupUIStreamedImage( 4000 ) --[[ @ 0]]
	self:registerEventHandler( "streamed_image_ready", function ( self, event )
		f21_arg0.streamedImages[self] = nil --[[ @ 0]]
		CoD.NotificationUtility.AddNotification( f21_arg0, {
			scoreInfoIndex = f21_local0,
			type = "Medal",
			streamingMedalImage = self
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:registerEventHandler( "streamed_image_timed_out", function ( self, event )
		f21_arg0.streamedImages[self] = nil --[[ @ 0]]
		self:close() --[[ @ 0]]
	end ) --[[ @ 0]]
	f21_arg0:addElement( self ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.DestroyNotification = function ( f24_arg0, f24_arg1 )
	table.insert( f24_arg0.availableNotificationModels, f24_arg1.widget:getModel() ) --[[ @ 0]]
	f24_arg1.widget:close() --[[ @ 0]]
	f24_arg1:close() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.OnNotificationComplete = function ( f25_arg0 )
	CoD.NotificationUtility.DestroyNotification( f25_arg0, table.remove( f25_arg0.notificationWidgetsBeingShown, 1 ) ) --[[ @ 0]]
	CoD.NotificationUtility.ShowNextNotification( f25_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.ShouldShowNewNotification = function ( f26_arg0 )
	if #f26_arg0.availableNotificationModels == 0 then
		return false
	elseif #f26_arg0.notificationQueue == 0 then
		return false
	elseif #f26_arg0.notificationWidgetsBeingShown == 0 then
		return true
	else
		local f26_local0 = f26_arg0.notificationQueue[1] --[[ @ 0]]
		if f26_local0.type ~= f26_arg0.notificationWidgetsBeingShown[1].notification.type then
			return false
		elseif CoD.NotificationUtility.DoNotificationsCombine[f26_local0.type] and CoD.NotificationUtility.DoNotificationsCombine[f26_local0.type]( f26_arg0.notificationWidgetsBeingShown[#f26_arg0.notificationWidgetsBeingShown].notification, f26_local0 ) then
			return true
		elseif f26_arg0.queueAnimating then
			return false
		elseif CoD.NotificationUtility.MaxQueue[f26_local0.type] then
			return true
		else
			return false
		end
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.ShowNextNotification = function ( f27_arg0 )
	if CoD.HUDUtility.IsAnyGameType( f27_arg0.controller, "ztrials" ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) then
		return 
	elseif Engine[@"GetModelValue"]( f27_arg0.BGBNotificationQueueEmptyModel ) ~= true then
		return 
	elseif not CoD.NotificationUtility.ShouldShowNewNotification( f27_arg0 ) then
		if #f27_arg0.notificationWidgetsBeingShown == 0 then
			Engine[@"SetModelValue"]( f27_arg0.notificationQueueEmptyModel, true ) --[[ @ 0]]
		end
		return 
	end
	Engine[@"SetModelValue"]( f27_arg0.notificationQueueEmptyModel, false ) --[[ @ 0]]
	local f27_local0 = table.remove( f27_arg0.notificationQueue, 1 ) --[[ @ 0]]
	local f27_local1 = f27_arg0.notificationWidgetsBeingShown[#f27_arg0.notificationWidgetsBeingShown] --[[ @ 0]]
	if f27_local1 and not f27_local1.timeUp and CoD.NotificationUtility.CombineNotifications[f27_local0.type] and CoD.NotificationUtility.DoNotificationsCombine[f27_local0.type]( f27_local1.notification, f27_local0 ) then
		CoD.NotificationUtility.CombineNotifications[f27_local0.type]( f27_local1, f27_local0 ) --[[ @ 0]]
		f27_local1.timeUpTimer:reset() --[[ @ 0]]
		f27_local1.widget:playClip( "Combined" ) --[[ @ 0]]
		return 
	elseif f27_local0.streamingMedalImage then
		f27_local0.streamingMedalImage:close() --[[ @ 0]]
		f27_local0.streamingMedalImage = nil --[[ @ 0]]
	end
	local f27_local2 = table.remove( f27_arg0.availableNotificationModels ) --[[ @ 0]]
	local f27_local3 = CoD.NotificationUtility.CreateNotification[f27_local0.type]( f27_arg0, f27_local0, f27_local2 ) --[[ @ 0]]
	local f27_local4 = f27_local3.__defaultWidth --[[ @ 0]]
	f27_local3:setLeftRight( false, false, -f27_local4 / 2, f27_local4 / 2 ) --[[ @ 0]]
	f27_local3:setTopBottom( true, false, 0, f27_local3.__defaultHeight ) --[[ @ 0]]
	f27_local3:setModel( f27_local2, f27_arg0.controller ) --[[ @ 0]]
	f27_arg0.menu:sendInitializationEvents( f27_arg0.controller, f27_local3 ) --[[ @ 0]]
	local self = LUI.UIElement.new() --[[ @ 0]]
	self:setLeftRight( false, false, CoD.NotificationUtility.NotificationX, CoD.NotificationUtility.NotificationX ) --[[ @ 0]]
	if CoD.IsShoutcaster( f27_arg0.controller ) then
		self:setTopBottom( true, false, 200, 200 ) --[[ @ 0]]
	else
		self:setTopBottom( true, false, CoD.NotificationUtility.NotificationY, CoD.NotificationUtility.NotificationY ) --[[ @ 0]]
	end
	self:setAlpha( 1 ) --[[ @ 0]]
	self:setScale( 1 ) --[[ @ 0]]
	self.notification = f27_local0 --[[ @ 0]]
	self.widget = f27_local3 --[[ @ 0]]
	self:addElement( f27_local3 ) --[[ @ 0]]
	self.timeUpTimer = LUI.UITimer.new( CoD.NotificationUtility.NotificationDuration[f27_local0.type], {
		name = "notification_time_up",
		notificationContainer = self
	}, true, f27_arg0 ) --[[ @ 0]]
	self:addElement( self.timeUpTimer ) --[[ @ 0]]
	table.insert( f27_arg0.notificationWidgetsBeingShown, self ) --[[ @ 0]]
	f27_arg0:addElement( self ) --[[ @ 0]]
	f27_arg0.menu:sendInitializationEvents( f27_arg0.controller, self ) --[[ @ 0]]
	if #f27_arg0.notificationWidgetsBeingShown > 1 then
		local f27_local6 = f27_local3.__defaultWidth / 2 --[[ @ 0]]
		for f27_local7 = #f27_arg0.notificationWidgetsBeingShown - 1 --[[ @ 0]], 1, -1 do
			local f27_local10 = f27_arg0.notificationWidgetsBeingShown[f27_local7] --[[ @ 0]]
			f27_local4 = f27_local10.widget.__defaultWidth --[[ @ 0]]
			f27_local6 = f27_local6 + f27_local4 / 2 * CoD.NotificationUtility.NotificationQueueScale --[[ @ 0]]
			f27_local10:beginAnimation( "keyframe", CoD.NotificationUtility.NotificationQueueAnimationDuration, true, true ) --[[ @ 0]]
			f27_local10:setLeftRight( false, false, f27_local6, f27_local6 ) --[[ @ 0]]
			f27_local10:setAlpha( CoD.NotificationUtility.NotificationQueueOpacity ) --[[ @ 0]]
			f27_local10:setScale( CoD.NotificationUtility.NotificationQueueScale ) --[[ @ 0]]
			f27_local6 = f27_local6 + f27_local4 / 2 * CoD.NotificationUtility.NotificationQueueScale --[[ @ 0]]
		end
		if CoD.NotificationUtility.MaxQueue[f27_local0.type] < #f27_arg0.notificationWidgetsBeingShown then
			f27_arg0.notificationWidgetsBeingShown[1].timeUpTimer:close() --[[ @ 0]]
			f27_arg0.notificationWidgetsBeingShown[1]:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.notificationWidgetsBeingShown[1]:setScale( 0 ) --[[ @ 0]]
			f27_arg0.notificationWidgetsBeingShown[1].fadingOffQueue = true --[[ @ 0]]
			f27_arg0.notificationWidgetsBeingShown[1]:registerEventHandler( "transition_complete_keyframe", function ( element, event )
				CoD.NotificationUtility.OnNotificationComplete( f27_arg0 ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end
	f27_arg0:addElement( LUI.UITimer.new( CoD.NotificationUtility.NotificationQueueAnimationDuration, "queue_done_animating", true, f27_arg0 ) ) --[[ @ 0]]
	f27_arg0.queueAnimating = true --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.ClearNotificationQueue = function ( f29_arg0 )
	for f29_local3, f29_local4 in pairs( f29_arg0.notificationQueue ) --[[ @ 0]] do
		if f29_local4.streamingMedalImage then
			f29_local4.streamingMedalImage:close() --[[ @ 0]]
		end
	end
	f29_arg0.notificationQueue = {} --[[ @ 0]]
	Engine[@"SetModelValue"]( f29_arg0.notificationQueueEmptyModel, true ) --[[ @ 0]]
	for f29_local3, f29_local4 in ipairs( f29_arg0.notificationWidgetsBeingShown ) --[[ @ 0]] do
		CoD.NotificationUtility.DestroyNotification( f29_arg0, f29_local4 ) --[[ @ 0]]
	end
	f29_arg0.notificationWidgetsBeingShown = {} --[[ @ 0]]
	for f29_local3, f29_local4 in pairs( f29_arg0.streamedImages ) --[[ @ 0]] do
		f29_local3:close() --[[ @ 0]]
	end
	f29_arg0.streamedImages = {} --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.InitToastContainer = function ( f30_arg0, f30_arg1, f30_arg2, f30_arg3 )
	f30_arg3.playNotification = function ( f31_arg0, f31_arg1 )
		local f31_local0 = f31_arg0:getParent() --[[ @ 0]]
		if f31_local0 then
			f31_local0:playClip( "Show" ) --[[ @ 0]]
		end
		f31_arg0:setState( f30_arg1, f31_arg1.state ) --[[ @ 0]]
		f31_arg0.currentNotification = f31_arg1 --[[ @ 0]]
		f31_arg0.EmblemDecal:setupDrawDecalById( f31_arg1.emblemDecal ) --[[ @ 0]]
		f31_arg0.ContentIconInternal.ContentIcon:setImage( RegisterImage( f31_arg1.contentIcon ) ) --[[ @ 0]]
		f31_arg0.Description:setText( f31_arg1.description ) --[[ @ 0]]
		if f31_arg1.backgroundId ~= nil then
			local f31_local1 = f31_arg0.CallingCardsFrameWidget.CardIconFrame --[[ @ 0]]
			CoD.ChallengesUtility.SetCallingCardForWidget( f31_local1, f31_arg1.backgroundId, f30_arg2.id ) --[[ @ 0]]
			if f31_local1.framedWidget then
				f31_local1.framedWidget:playClip( "DefaultClip" ) --[[ @ 0]]
			end
		end
		f31_arg0.ContentIconInternal.NotifTextMain:setText( f31_arg1.kicker ) --[[ @ 0]]
		f31_arg0.FunctionIcon:setImage( RegisterImage( f31_arg1.functionIcon ) ) --[[ @ 0]]
		f31_arg0.FooterText:setText( f31_arg1.description ) --[[ @ 0]]
		local f31_local1 = f31_arg0.LootBonusToastStandard --[[ @ 0]]
		if f31_local1 then
			f31_local1:setState( f30_arg1, f31_arg1.state ) --[[ @ 0]]
			f31_local1.ItemName:setText( f31_arg1.kicker ) --[[ @ 0]]
			f31_local1.SetName:setText( f31_arg1.description ) --[[ @ 0]]
			f31_local1.Category:setText( f31_arg1.category ) --[[ @ 0]]
			f31_local1.ItemImage:setImage( RegisterImage( f31_arg1.contentIcon ) ) --[[ @ 0]]
		end
		local f31_local2 = f31_arg0.ToastContainerFactionReward --[[ @ 0]]
		if f31_local2 then
			f31_local2.NotifText:setText( ConvertToUpperString( f31_arg1.description ) ) --[[ @ 0]]
		end
		local f31_local3 = f31_arg0.ToastContentLarge --[[ @ 0]]
		if f31_local3 then
			if f31_arg1.contentIcon == @"blacktransparent" then
				f31_local3:setState( f30_arg1, "NoImage" ) --[[ @ 0]]
			else
				f31_local3:setState( f30_arg1, "DefaultState" ) --[[ @ 0]]
			end
			f31_local3.Title:setText( f31_arg1.kicker ) --[[ @ 0]]
			f31_local3.Details:setText( f31_arg1.description ) --[[ @ 0]]
			f31_local3.ItemImage:setImage( RegisterImage( f31_arg1.contentIcon ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f30_arg3.appendNotification = function ( f32_arg0, f32_arg1 )
		if f32_arg1 == nil then
			return 
		elseif f32_arg0.currentNotification ~= nil then
			local f32_local0 = f32_arg0.nextNotification --[[ @ 0]]
			if f32_local0 == nil then
				f32_arg0.nextNotification = f32_arg1 --[[ @ 0]]
			end
			while f32_local0 and f32_local0.next ~= nil do
				f32_local0 = f32_local0.next --[[ @ 0]]
			end
			f32_local0.next = f32_arg1 --[[ @ 0]]
		else
			f32_arg0:playNotification( f32_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f30_arg3.getModelValueTable = function ( f33_arg0, f33_arg1 )
		return {
			state = f33_arg1.state:get(),
			kicker = f33_arg1.kicker:get(),
			description = f33_arg1.description:get(),
			contentIcon = f33_arg1.contentIcon:get(),
			emblemDecal = f33_arg1.emblemDecal:get(),
			backgroundId = f33_arg1.backgroundId:get(),
			functionIcon = f33_arg1.functionIcon:get(),
			category = f33_arg1.category:get()
		}
	end
	 --[[ @ 0]]
	f30_arg3.currentNotification = nil --[[ @ 0]]
	f30_arg3.nextNotification = nil --[[ @ 0]]
	local f30_local0 = Engine[@"GetModelForController"]( f30_arg1 ) --[[ @ 0]]
	f30_local0 = f30_local0:create( "FrontendToast" ) --[[ @ 0]]
	f30_arg3:subscribeToModel( f30_local0.notify, function ( model )
		if Engine[@"GetModelValue"]( model ) == true or Engine[@"GetModelValue"]( model ) == 1 then
			Engine[@"SetModelValue"]( f30_local0.notify, false ) --[[ @ 0]]
			f30_arg3:setModel( f30_local0, f30_arg1 ) --[[ @ 0]]
			f30_arg3:appendNotification( f30_arg3:getModelValueTable( f30_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f30_arg0:registerEventHandler( "clip_over", function ( element, event )
		local f35_local0 = f30_arg3 --[[ @ 0]]
		f35_local0.currentNotification = nil --[[ @ 0]]
		if f35_local0.nextNotification ~= nil then
			f35_local0:playNotification( f35_local0.nextNotification ) --[[ @ 0]]
			f35_local0.nextNotification = f35_local0.nextNotification.next --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.RewardQueuePostLoad = function ( f36_arg0, f36_arg1, f36_arg2 )
	f36_arg0.controller = f36_arg1 --[[ @ 0]]
	f36_arg0.menu = f36_arg2 --[[ @ 0]]
	local f36_local0 = f36_arg0 --[[ @ 0]]
	local f36_local1 = f36_arg0.setModel --[[ @ 0]]
	local f36_local2 = Engine[@"GetModelForController"]( f36_arg1 ) --[[ @ 0]]
	f36_local1( f36_local0, f36_local2:create( "NotificationRewardQueue" ), f36_arg1 ) --[[ @ 0]]
	f36_arg0.availableRewardModels = {} --[[ @ 0]]
	f36_local1 = CoD.NotificationUtility.RewardMaxRewards + 1 --[[ @ 0]]
	for f36_local0 = 1 --[[ @ 0]], f36_local1, 1 do
		local f36_local4 = table.insert --[[ @ 0]]
		local f36_local5 = f36_arg0.availableRewardModels --[[ @ 0]]
		local f36_local6 = f36_arg0:getModel() --[[ @ 0]]
		f36_local4( f36_local5, f36_local6:create( "Reward" .. f36_local0 ) ) --[[ @ 0]]
	end
	f36_arg0.rewardWidgetsBeingShown = {} --[[ @ 0]]
	f36_arg0.rewardQueue = {} --[[ @ 0]]
	f36_arg0.addReward = function ( f37_arg0, f37_arg1, f37_arg2, f37_arg3, f37_arg4 )
		if f37_arg4 == "CallingCard" then
			f37_arg4 = nil --[[ @ 0]]
		end
		table.insert( f37_arg0.rewardQueue, {
			color = f37_arg1,
			imageName = f37_arg2,
			text = f37_arg3,
			size = f37_arg4
		} ) --[[ @ 0]]
		CoD.NotificationUtility.RewardShowNextItem( f37_arg0, f36_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f36_arg0:registerEventHandler( "queue_done_animating", function ( element, event )
		element.queueAnimating = nil --[[ @ 0]]
		CoD.NotificationUtility.RewardShowNextItem( element, f36_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f36_arg0:registerEventHandler( "time_up", function ( element, event )
		if event.widgetContainer.fadingOffQueue then
			return 
		elseif event.widgetContainer.widget:hasClip( "TimeUp" ) then
			event.widgetContainer.widget:playClip( "TimeUp" ) --[[ @ 0]]
			event.widgetContainer.widget:registerEventHandler( "clip_over", function ( element, event )
				CoD.NotificationUtility.RewardOnShowItemComplete( element ) --[[ @ 0]]
			end ) --[[ @ 0]]
		else
			event.widgetContainer:beginAnimation( "keyframe", CoD.NotificationUtility.RewardDefaultFadeOutDuration ) --[[ @ 0]]
			event.widgetContainer:setAlpha( 0 ) --[[ @ 0]]
			event.widgetContainer:registerEventHandler( "transition_complete_keyframe", function ( element, event )
				CoD.NotificationUtility.RewardOnShowItemComplete( element ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.RewardCreateRewardWidget = function ( f42_arg0, f42_arg1, f42_arg2 )
	local f42_local0 = f42_arg2:create( "color" ) --[[ @ 0]]
	f42_local0:set( f42_arg1.color ) --[[ @ 0]]
	if f42_arg1.imageName then
		f42_local0 = f42_arg2:create( "icon" ) --[[ @ 0]]
		f42_local0:set( f42_arg1.imageName ) --[[ @ 0]]
	else
		f42_local0 = f42_arg2:create( "icon" ) --[[ @ 0]]
		f42_local0:set( @"blacktransparent" ) --[[ @ 0]]
	end
	f42_local0 = f42_arg2:create( "title" ) --[[ @ 0]]
	f42_local0:set( CoD.BaseUtility.LocalizeIfXHash( f42_arg1.text ) ) --[[ @ 0]]
	if f42_arg1.size then
		f42_local0 = f42_arg2:create( "size" ) --[[ @ 0]]
		f42_local0:set( f42_arg1.size ) --[[ @ 0]]
	else
		f42_local0 = f42_arg2:create( "size" ) --[[ @ 0]]
		f42_local0:set( @"hash_0" ) --[[ @ 0]]
	end
	return CoD.NotificationRewardWidget.new( f42_arg0.menu, f42_arg0.controller, 0, 0, 0, 384, 0, 0, 0, 96 )
end
 --[[ @ 0]]
CoD.NotificationUtility.RewardOnShowItemComplete = function ( f43_arg0 )
	local f43_local0 = table.remove( f43_arg0.rewardWidgetsBeingShown, 1 ) --[[ @ 0]]
	table.insert( f43_arg0.availableRewardModels, f43_local0.widget:getModel() ) --[[ @ 0]]
	f43_local0.widget:close() --[[ @ 0]]
	f43_local0:close() --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.RewardShouldShowNewItem = function ( f44_arg0 )
	if #f44_arg0.rewardQueue == 0 then
		return false
	elseif #f44_arg0.rewardWidgetsBeingShown == 0 then
		return true
	elseif f44_arg0.queueAnimating then
		return false
	else
		return true
	end
end
 --[[ @ 0]]
CoD.NotificationUtility.RewardShowNextItem = function ( f45_arg0, f45_arg1 )
	if not CoD.NotificationUtility.RewardShouldShowNewItem( f45_arg0 ) then
		return 
	end
	local f45_local0 = table.remove( f45_arg0.rewardQueue, 1 ) --[[ @ 0]]
	local f45_local1 = table.remove( f45_arg0.availableRewardModels ) --[[ @ 0]]
	local f45_local2 = CoD.NotificationUtility.RewardCreateRewardWidget( f45_arg0, f45_local0, f45_local1 ) --[[ @ 0]]
	local f45_local3, f45_local4 = f45_local2:getLocalSize() --[[ @ 0]]
	f45_local2:setLeftRight( 0.5, 0.5, -f45_local3 / 2, f45_local3 / 2 ) --[[ @ 0]]
	f45_local2:setTopBottom( 1, 1, -f45_local4, 0 ) --[[ @ 0]]
	f45_local2:setModel( f45_local1, f45_arg1 ) --[[ @ 0]]
	f45_local2:setState( f45_arg1, "DefaultState" ) --[[ @ 0]]
	local self = LUI.UIElement.new() --[[ @ 0]]
	self:setLeftRight( 1, 1, -f45_local3 / 2, -f45_local3 / 2 ) --[[ @ 0]]
	self:setTopBottom( 0, 0, 0, 0 ) --[[ @ 0]]
	self:setAlpha( 0 ) --[[ @ 0]]
	self:setScale( 1 ) --[[ @ 0]]
	self:beginAnimation( "keyframe", CoD.NotificationUtility.RewardQueueAnimationDuration, true, true ) --[[ @ 0]]
	self:setTopBottom( 0, 0, f45_local4, f45_local4 ) --[[ @ 0]]
	self:setAlpha( 1 ) --[[ @ 0]]
	self.reward = f45_local0 --[[ @ 0]]
	self.widget = f45_local2 --[[ @ 0]]
	self.timeUpTimer = LUI.UITimer.new( CoD.NotificationUtility.RewardShowItemDuration, {
		name = "time_up",
		widgetContainer = self
	}, true, f45_arg0 ) --[[ @ 0]]
	self:addElement( self.timeUpTimer ) --[[ @ 0]]
	self:addElement( f45_local2 ) --[[ @ 0]]
	f45_arg0.menu:sendInitializationEvents( f45_arg0.controller, f45_local2 ) --[[ @ 0]]
	table.insert( f45_arg0.rewardWidgetsBeingShown, self ) --[[ @ 0]]
	f45_arg0:addElement( self ) --[[ @ 0]]
	if #f45_arg0.rewardWidgetsBeingShown > 1 then
		f45_local3, f45_local4 = f45_local2:getLocalSize() --[[ @ 0]]
		local f45_local6 = f45_local4 --[[ @ 0]]
		for f45_local7 = #f45_arg0.rewardWidgetsBeingShown - 1 --[[ @ 0]], 1, -1 do
			local f45_local10 = f45_arg0.rewardWidgetsBeingShown[f45_local7] --[[ @ 0]]
			f45_local3, f45_local4 = f45_local10.widget:getLocalSize() --[[ @ 0]]
			f45_local6 = f45_local6 + f45_local4 --[[ @ 0]]
			f45_local10:beginAnimation( "keyframe", CoD.NotificationUtility.RewardQueueAnimationDuration, true, true ) --[[ @ 0]]
			f45_local10:setTopBottom( 0, 0, f45_local6, f45_local6 ) --[[ @ 0]]
		end
		if CoD.NotificationUtility.RewardMaxRewards < #f45_arg0.rewardWidgetsBeingShown then
			f45_arg0.rewardWidgetsBeingShown[1].timeUpTimer:close() --[[ @ 0]]
			f45_arg0.rewardWidgetsBeingShown[1]:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.rewardWidgetsBeingShown[1]:setScale( 0 ) --[[ @ 0]]
			f45_arg0.rewardWidgetsBeingShown[1].fadingOffQueue = true --[[ @ 0]]
			f45_arg0.rewardWidgetsBeingShown[1]:registerEventHandler( "transition_complete_keyframe", function ( element, event )
				CoD.NotificationUtility.RewardOnShowItemComplete( f45_arg0 ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end
	f45_arg0:addElement( LUI.UITimer.new( CoD.NotificationUtility.RewardTimeBetweenRewards, "queue_done_animating", true, f45_arg0 ) ) --[[ @ 0]]
	f45_arg0.queueAnimating = true --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.ReadyEventsPostLoad = function ( f47_arg0, f47_arg1 )
	local f47_local0 = RegisterImage( @"blacktransparent" ) --[[ @ 0]]
	f47_arg0.playNotification = function ( f48_arg0, f48_arg1 )
		f48_arg0.currentNotification = f48_arg1 --[[ @ 0]]
		f48_arg0.Scorestreak.ScorestreakInfo.Text:setText( f48_arg1.title or "" ) --[[ @ 0]]
		f48_arg0.Scorestreak.ScorestreakInfo.IconContainer.Icon:setImage( f48_arg1.image or f47_local0 ) --[[ @ 0]]
		f48_arg0.Scorestreak.ControllerDependentTextBox.KBMText:setText( f48_arg1.bindingKBM or "" ) --[[ @ 0]]
		f48_arg0.Description:setText( f48_arg1.description or "" ) --[[ @ 0]]
		f48_arg0:playClip( f48_arg1.clip or "ShowNotification" ) --[[ @ 0]]
		f48_arg0.Scorestreak:playClip( "IntroAnim" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f47_local1 = function ()
		local f49_local0 = Engine[@"GetModel"]( DataSources.PerController.getModel( f47_arg1 ), "vehicle.vehicleType" ) --[[ @ 0]]
		return f49_local0 and Engine[@"GetModelValue"]( f49_local0 ) ~= @"hash_0"
	end
	 --[[ @ 0]]
	local f47_local2 = function ()
		return CoD.HUDUtility.IsGameTypeEqualToString( "ball" ) and IsCurrentWeaponReference( f47_arg1, @"ball" )
	end
	 --[[ @ 0]]
	f47_arg0.appendNotification = function ( f51_arg0, f51_arg1 )
		if LUI.DEVHideButtonPrompts then
			return 
		elseif f47_local2() then
			if f51_arg0.secondAttempt then
				f51_arg0.secondAttempt = nil --[[ @ 0]]
			else
				f51_arg0.secondAttempt = true --[[ @ 0]]
				local self = LUI.UITimer.new( 500, "appendNotificationSecondCheck", true, f51_arg0 ) --[[ @ 0]]
				f51_arg0:registerEventHandler( "appendNotificationSecondCheck", function ( element, event )
					f51_arg0:appendNotification( f51_arg1 ) --[[ @ 0]]
				end ) --[[ @ 0]]
				f51_arg0:addElement( self ) --[[ @ 0]]
			end
			return 
		end
		local self = function ( f53_arg0 )
			local f53_local0 = LUI.ShallowCopy( f53_arg0 ) --[[ @ 0]]
			if f51_arg0.nextNotification == nil then
				f51_arg0.nextNotification = f53_local0 --[[ @ 0]]
			else
				local f53_local1 = nil --[[ @ 0]]
				local f53_local2 = f51_arg0.nextNotification --[[ @ 0]]
				while f53_local2 and f53_arg0.priority <= f53_local2.priority do
					f53_local1 = f53_local2 --[[ @ 0]]
					f53_local2 = f53_local2.next --[[ @ 0]]
				end
				if f53_local1 then
					f53_local0.next = f53_local1.next --[[ @ 0]]
					f53_local1.next = f53_local0 --[[ @ 0]]
				end
				f51_arg0.nextNotification = f53_local0 --[[ @ 0]]
				f53_local0.next = f53_local2 --[[ @ 0]]
			end
		end
		 --[[ @ 0]]
		if f47_local1() then
			self( f51_arg1 ) --[[ @ 0]]
		elseif f51_arg0.currentNotification ~= nil then
			local f51_local1 = Engine[@"hash_69D33D652B9B0F3B"]() - f51_arg0.notificationStartTime --[[ @ 0]]
			if f51_local1 > 0 and f51_local1 < 30 and f51_arg0.currentNotification.priority < f51_arg1.priority then
				f51_arg0.nextNotification = f51_arg0.currentNotification --[[ @ 0]]
				f51_arg0:playNotification( LUI.ShallowCopy( f51_arg1 ) ) --[[ @ 0]]
			else
				self( f51_arg1 ) --[[ @ 0]]
			end
		else
			f51_arg0:playNotification( LUI.ShallowCopy( f51_arg1 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f47_arg0.notificationStartTime = -1 --[[ @ 0]]
	f47_arg0.currentNotification = nil --[[ @ 0]]
	f47_arg0.nextNotification = nil --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( f47_arg0, "playClip", function ( element )
		element.notificationStartTime = Engine[@"hash_69D33D652B9B0F3B"]() --[[ @ 0]]
	end ) --[[ @ 0]]
	f47_arg0:registerEventHandler( "clip_over", function ( element, event )
		f47_arg0.notificationStartTime = -1 --[[ @ 0]]
		f47_arg0.currentNotification = nil --[[ @ 0]]
		if f47_arg0.nextNotification ~= nil and not f47_local1() then
			f47_arg0:playNotification( f47_arg0.nextNotification ) --[[ @ 0]]
			f47_arg0.nextNotification = f47_arg0.nextNotification.next --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f47_arg0:subscribeToGlobalModel( f47_arg1, "PerController", "vehicle.vehicleType", function ( model )
		if Engine[@"GetModelValue"]( model ) == "" then
			f47_arg0:processEvent( {
				name = "clip_over"
			} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f47_local3 = f47_arg0 --[[ @ 0]]
	local f47_local4 = f47_arg0.subscribeToModel --[[ @ 0]]
	local f47_local5 = DataSources.CurrentWeapon.getModel( f47_arg1 ) --[[ @ 0]]
	f47_local4( f47_local3, f47_local5:create( "equippedWeaponReference" ), function ( f57_arg0 )
		if f47_local2() then
			f47_arg0.nextNotification = nil --[[ @ 0]]
			f47_arg0:playClip( "DefaultClip" ) --[[ @ 0]]
			f47_arg0:processEvent( {
				name = "clip_over"
			} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "GameUpdateNotification", "GameUpdateNotification", function ( f58_arg0, f58_arg1 )
	f58_arg0:create( "title" ) --[[ @ 0]]
	f58_arg0:create( "color" ) --[[ @ 0]]
end, false ) --[[ @ 0]]
CoD.NotificationUtility.SetGameUpdateNotificationModels = function ( f59_arg0, f59_arg1, f59_arg2 )
	local f59_local0 = DataSources.GameUpdateNotification.getModel( f59_arg1 ) --[[ @ 0]]
	if not f59_local0 then
		return 
	end
	local f59_local1 = "" --[[ @ 0]]
	local f59_local2 = f59_arg2[1] --[[ @ 0]]
	local f59_local3 = CoD.NotificationUtility.GameUpdateMessages[f59_local2] --[[ @ 0]]
	f59_arg0:setState( f59_arg1, f59_local3.state or "DefaultState" ) --[[ @ 0]]
	if f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.LIVES_REMAINING then
		local f59_local4 = f59_arg2[2] --[[ @ 0]]
		if f59_local4 == 1 and f59_local3.oneLifeTitle then
			f59_local1 = Engine[@"hash_4F9F1239CFD921FE"]( f59_local3.oneLifeTitle ) --[[ @ 0]]
		else
			f59_local1 = Engine[@"hash_4F9F1239CFD921FE"]( f59_local3.title, f59_local4 ) --[[ @ 0]]
		end
	elseif f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.LIVES_REMAINING_VS then
		local f59_local4 = f59_arg2[2] --[[ @ 0]]
		local f59_local5 = f59_arg2[3] --[[ @ 0]]
		local f59_local6 = CoD.TeamUtility.GetTeamID( f59_arg1 ) --[[ @ 0]]
		if f59_local6 == Enum[@"team_t"][@"hash_42A34B055ADD98AB"] then
			f59_local1 = Engine[@"hash_4F9F1239CFD921FE"]( f59_local3.title, f59_local4, f59_local5 ) --[[ @ 0]]
		elseif f59_local6 == Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] then
			f59_local1 = Engine[@"hash_4F9F1239CFD921FE"]( f59_local3.title, f59_local5, f59_local4 ) --[[ @ 0]]
		end
	elseif f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_A_CAPTURED or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_B_CAPTURED or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.ZONE_C_CAPTURED or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.CHANGE_CLASS_NEXT_SPAWN or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.NO_RESPAWNS_REMAINING or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.FIRST_TEAM_TO_SCORE_WINS or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_KILL_TARGET or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_SURVIVE or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_TARGET_KILLED or f59_local2 == CoD.NotificationUtility.GameUpdateMessageEnum.SPRECTRE_RISING_TARGET_SURVIVED then
		f59_local1 = Engine[@"hash_4F9F1239CFD921FE"]( f59_local3.title ) --[[ @ 0]]
	end
	local f59_local4 = f59_local3.colorSet --[[ @ 0]]
	if not f59_local4 then
		f59_local4 = ColorSet.GameUpdateDefault --[[ @ 0]]
	end
	f59_local0.title:set( f59_local1 ) --[[ @ 0]]
	f59_local0.color:set( CoD.ColorUtility.ConvertColor( f59_local4.r, f59_local4.g, f59_local4.b ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.InitGameUpdateNotification = function ( f60_arg0, f60_arg1 )
	f60_arg0.gameUpdateNotificationQueue = {} --[[ @ 0]]
	local f60_local0 = function ()
		if #f60_arg0.gameUpdateNotificationQueue > 0 then
			CoD.NotificationUtility.SetGameUpdateNotificationModels( f60_arg0, f60_arg1, f60_arg0.gameUpdateNotificationQueue[1].data ) --[[ @ 0]]
			if f60_arg0:hasClip( "StartNotification" ) then
				f60_arg0:playClip( "StartNotification" ) --[[ @ 0]]
				f60_arg0:registerEventHandler( "clip_over", function ( menu, controller )
					f60_arg0.timeUpTimer = LUI.UITimer.new( 2000, {
						name = "notification_time_up"
					}, true, f60_arg0 ) --[[ @ 0]]
					f60_arg0:addElement( f60_arg0.timeUpTimer ) --[[ @ 0]]
				end ) --[[ @ 0]]
			else
				f60_arg0.timeUpTimer = LUI.UITimer.new( 2000, {
					name = "notification_time_up"
				}, true, f60_arg0 ) --[[ @ 0]]
				f60_arg0:addElement( f60_arg0.timeUpTimer ) --[[ @ 0]]
			end
		end
	end
	 --[[ @ 0]]
	local f60_local1 = function ()
		table.remove( f60_arg0.gameUpdateNotificationQueue, 1 ) --[[ @ 0]]
		f60_local0() --[[ @ 0]]
	end
	 --[[ @ 0]]
	f60_arg0:subscribeToGlobalModel( f60_arg1, "PerController", "scriptNotify", function ( model )
		if Engine[@"GetModelValue"]( model ) ~= @"hash_6B67AA04E378D681" then
			return 
		elseif Engine[@"IsVisibilityBitSet"]( f60_arg1, Enum[@"UIVisibilityBit"][@"hash_5198075B069840DC"] ) and not Engine[@"IsVisibilityBitSet"]( f60_arg1, Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ) then
			return 
		end
		table.insert( f60_arg0.gameUpdateNotificationQueue, {
			data = CoD.GetScriptNotifyData( model )
		} ) --[[ @ 0]]
		if #f60_arg0.gameUpdateNotificationQueue == 1 then
			f60_local0() --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f60_arg0:registerEventHandler( "notification_time_up", function ( element, event )
		if element:hasClip( "TimeUp" ) then
			element:playClip( "TimeUp" ) --[[ @ 0]]
			element:registerEventHandler( "clip_over", function ( element, event )
				f60_local1() --[[ @ 0]]
			end ) --[[ @ 0]]
		else
			f60_local1() --[[ @ 0]]
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.InitHealNagNotification = function ( f67_arg0, f67_arg1 )
	f67_arg0._showHealNag = false --[[ @ 0]]
	f67_arg0._shownNagCount = 0 --[[ @ 0]]
	f67_arg0._currentClip = "DefaultClip" --[[ @ 0]]
	local f67_local0 = function ( f68_arg0 )
		f67_arg0._currentClip = f68_arg0 --[[ @ 0]]
		f67_arg0:playClip( f68_arg0 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f67_local1 = function ()
		f67_arg0._showHealNag = false --[[ @ 0]]
		f67_arg0._shownNagCount = 0 --[[ @ 0]]
		f67_local0( "DefaultClip" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	local f67_local2 = function ( f70_arg0, f70_arg1 )
		local f70_local0 = 100 --[[ @ 0]]
		if Engine[@"GetDvarType"]( "healNag_minHealthBeforeNag" ) then
			f70_local0 = Engine[@"hash_622EAAB59AA27E9B"]( "healNag_minHealthBeforeNag" ) --[[ @ 0]]
		end
		if f70_arg0 <= 0 or f67_arg0._showHealNag and f70_local0 <= f70_arg0 then
			f67_local1() --[[ @ 0]]
		elseif not f67_arg0._showHealNag and f70_arg0 < f70_local0 and f70_arg1 == Enum[@"hash_F0447219F15F7F3"][@"hash_61CF78BFE5F942F1"] then
			f67_arg0._showHealNag = true --[[ @ 0]]
			f67_local0( "FirstPromptDelay" ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f67_arg0:appendEventHandler( "clip_over", function ( f71_arg0, f71_arg1 )
		local f71_local0 = 1 --[[ @ 0]]
		if Engine[@"GetDvarType"]( "healNag_maxExtraNags" ) then
			f71_local0 = Engine[@"hash_622EAAB59AA27E9B"]( "healNag_maxExtraNags" ) --[[ @ 0]]
		end
		if f67_arg0._currentClip == "FirstPromptDelay" then
			f67_local0( "FirstPrompt" ) --[[ @ 0]]
		elseif f67_arg0._currentClip == "FirstPrompt" then
			f67_local0( "FirstPromptOut" ) --[[ @ 0]]
		elseif f67_arg0._currentClip == "FirstPromptOut" then
			if f67_arg0._showHealNag then
				f67_arg0._shownNagCount = f67_arg0._shownNagCount + 1 --[[ @ 0]]
				if f71_local0 < f67_arg0._shownNagCount then
					f67_local1() --[[ @ 0]]
				else
					f67_local0( "ExtraPromptDelay" ) --[[ @ 0]]
				end
			else
				f67_local1() --[[ @ 0]]
			end
		elseif f67_arg0._currentClip == "ExtraPromptDelay" then
			f67_local0( "ExtraPrompt" ) --[[ @ 0]]
		elseif f67_arg0._currentClip == "ExtraPrompt" then
			f67_local0( "ExtraPromptOut" ) --[[ @ 0]]
		elseif f67_arg0._currentClip == "ExtraPromptOut" then
			if f67_arg0._showHealNag then
				f67_arg0._shownNagCount = f67_arg0._shownNagCount + 1 --[[ @ 0]]
				if f71_local0 < f67_arg0._shownNagCount then
					f67_local0( "DefaultClip" ) --[[ @ 0]]
				else
					f67_local0( "ExtraPromptDelay" ) --[[ @ 0]]
				end
			else
				f67_local1() --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
	f67_arg0:linkToElementModel( f67_arg0, "health.healthValue", true, function ( model )
		local f72_local0 = DataSources.PlayerAbilities.getModel( f67_arg1 ) --[[ @ 0]]
		f72_local0 = f72_local0.playerGadget1.state --[[ @ 0]]
		local f72_local1 = f72_local0 and f72_local0:get() --[[ @ 0]]
		local f72_local2 = model:get() --[[ @ 0]]
		if f72_local2 and f72_local1 then
			f67_local2( f72_local2, f72_local1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f67_arg0:subscribeToGlobalModel( f67_arg1, "PlayerAbilities", "playerGadget1.state", function ( model )
		local f73_local0 = f67_arg0:getModel( f67_arg1, "health.healthValue" ) --[[ @ 0]]
		local f73_local1 = f73_local0 and f73_local0:get() --[[ @ 0]]
		local f73_local2 = model:get() --[[ @ 0]]
		if f73_local1 and f73_local2 then
			f67_local2( f73_local1, f73_local2 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f67_local3 = f67_arg0 --[[ @ 0]]
	local f67_local4 = f67_arg0.subscribeToModel --[[ @ 0]]
	local f67_local5 = Engine[@"GetModelForController"]( f67_arg1 ) --[[ @ 0]]
	f67_local4( f67_local3, f67_local5["hudItems.healingActive"], function ( f74_arg0 )
		if f74_arg0:get() == 1 then
			f67_arg0._showHealNag = false --[[ @ 0]]
			f67_arg0._shownNagCount = 0 --[[ @ 0]]
			if f67_arg0._currentClip == "FirstPrompt" then
				f67_local0( "FirstPromptOut" ) --[[ @ 0]]
			elseif f67_arg0._currentClip == "ExtraPrompt" then
				f67_local0( "ExtraPromptOut" ) --[[ @ 0]]
			elseif f67_arg0._currentClip ~= "FirstPromptOut" and f67_arg0._currentClip ~= "ExtraPromptOut" then
				f67_local1() --[[ @ 0]]
			end
		end
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.NotificationUtility.GetInvalidCmdHint = function ( f75_arg0 )
	return Engine[@"hash_4F9F1239CFD921FE"]( CoD.NotificationUtility.InvalidCmdHintStrings[f75_arg0] or @"hash_0" )
end
 --[[ @ 0]]
