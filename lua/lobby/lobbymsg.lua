-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "lua/lobby/common/lobbycore" ) --[[ @ 0]]

LobbyMsg = {} --[[ @ 0]]
LobbyMsgClient = {} --[[ @ 0]]
LobbyMsgHost = {} --[[ @ 0]]
LobbyMsgClient.MsgHandlers = {} --[[ @ 0]]
LobbyMsgHost.MsgHandlers = {} --[[ @ 0]]
LobbyMsg.LuaMsgType = {
	LUA_MESSAGE_TYPE_TEST = 1,
	LUA_MESSAGE_TYPE_SERVER_REQUEST_LEAVEWITHPARTY = 2,
	LUA_MESSAGE_TYPE_LOBBY_HOST_DISCONNECT = 3,
	LUA_MESSAGE_TYPE_LOBBY_CLIENT_DISCONNECT = 4,
	LUA_MESSAGE_TYPE_LOBBY_CLIENT_LEAVEWITHPARTY = 5,
	LUA_MESSAGE_TYPE_LOBBY_CLIENT_RESET_LOADOUTS = 6
} --[[ @ 0]]
LobbyMsg.PackageMessage = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4 )
	if f1_arg0 then
		return f1_arg2( f1_arg1, f1_arg3, f1_arg4 )
	else
		return false, 0
	end
end
 --[[ @ 0]]
LobbyMsg.PackageMessageCheckValue = function ( f2_arg0, f2_arg1, f2_arg2, f2_arg3, f2_arg4 )
	if f2_arg0 then
		local f2_local0, f2_local1 = f2_arg2( f2_arg1, f2_arg3, f2_arg4 ) --[[ @ 0]]
		if f2_local0 and (f2_arg4 == nil or f2_local1 == f2_arg4) then
			return f2_local0, f2_local1
		elseif f2_local0 then
			error( "LobbyMsg.PackageMessageValuesMatch failed to package [" .. f2_arg3 .. "] " .. f2_arg4 .. " into message.  Value packaged == " .. retValue ) --[[ @ 0]]
		end
	end
	return false, 0
end
 --[[ @ 0]]
LobbyMsg.OnTestHostPacket = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3, f3_arg4, f3_arg5, f3_arg6, f3_arg7, f3_arg8, f3_arg9, f3_arg10, f3_arg11, f3_arg12, f3_arg13 )
	local f3_local0 = {} --[[ @ 0]]
	local f3_local1, f3_local2 = LobbyMsg.PackageMessage( true, f3_arg0, f3_arg0.packageInt32, "integer32", f3_arg1 ) --[[ @ 0]]
	f3_local0.integer32 = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessageCheckValue( f3_local1, f3_arg0, f3_arg0.packageUInt32, "uInteger32", f3_arg2 ) --[[ @ 0]]
	f3_local0.uInteger32 = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageBool, "boolean", f3_arg3 ) --[[ @ 0]]
	f3_local0.boolean = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageInt16, "short", f3_arg4 ) --[[ @ 0]]
	f3_local0.short = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageUInt16, "ushort", f3_arg5 ) --[[ @ 0]]
	f3_local0.ushort = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageInt8, "character", f3_arg6 ) --[[ @ 0]]
	f3_local0.character = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageUInt8, "uCharacter", f3_arg7 ) --[[ @ 0]]
	f3_local0.uCharacter = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageInt64, "int64", f3_arg8 ) --[[ @ 0]]
	f3_local0.int64 = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageUInt64, "uInt64", f3_arg9 ) --[[ @ 0]]
	f3_local0.uInt64 = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageFloat, "float", f3_arg10 ) --[[ @ 0]]
	f3_local0.float = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageXUID, "xuid", f3_arg11 ) --[[ @ 0]]
	f3_local0.xuid = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageString, "StringTest", f3_arg12 ) --[[ @ 0]]
	f3_local0.StringTest = f3_local2 --[[ @ 0]]
	f3_local1, f3_local2 = LobbyMsg.PackageMessage( f3_local1, f3_arg0, f3_arg0.packageInt16, "bigToSmall", f3_arg13 ) --[[ @ 0]]
	f3_local0.testBigToSmall = f3_local2 --[[ @ 0]]
	return f3_local1, f3_local0
end
 --[[ @ 0]]
LobbyMsg.OnTestClientPacket = function ( f4_arg0 )
	local f4_local0 = 0 --[[ @ 0]]
	local f4_local1 = Engine[@"hash_1E42CF04B7DDD5DE"]( LobbyMsg.EncodeToLobbyMsgType( LobbyMsg.LuaMsgType.LUA_MESSAGE_TYPE_TEST ), Enum[@"lobbymodule"][@"lobby_module_client"], Engine[@"lobbygetcontrollinglobbysession"]( Enum[@"lobbymodule"][@"lobby_module_client"] ) ) --[[ @ 0]]
	local f4_local2 = {
		integer32 = -23345,
		uInteger32 = 23345,
		boolean = true,
		short = -2436,
		ushort = 2437,
		character = -56,
		uCharacter = 132,
		int64 = Engine[@"numbertouint64"]( 123456792 ) + Engine[@"numbertouint64"]( 123456792 ),
		uInt64 = Engine[@"numbertouint64"]( 11121314 ) * Engine[@"numbertouint64"]( 11121314 ),
		float = 3.14,
		xuid = Engine[@"getxuid64"]( 0 ),
		StringTest = "Hello Host",
		testBigToSmall = Engine[@"numbertouint64"]( 12345 )
	} --[[ @ 0]]
	LobbyMsg.OnTestHostPacket( f4_local1, f4_local2.integer32, f4_local2.uInteger32, f4_local2.boolean, f4_local2.short, f4_local2.ushort, f4_local2.character, f4_local2.uCharacter, f4_local2.int64, f4_local2.uInt64, f4_local2.float, f4_local2.xuid, f4_local2.StringTest, f4_local2.testBigToSmall ) --[[ @ 0]]
	f4_local1:debugPrint() --[[ @ 0]]
	f4_local1:sendTo( f4_local0, Enum[@"lobbymodule"][@"hash_3F90DB2D4085A3E0"], Enum[@"netchanmsgtype_e"][@"netchan_lobbygame_unreliable"] ) --[[ @ 0]]
	f4_local1:free() --[[ @ 0]]
end
 --[[ @ 0]]
LobbyMsg.handleTestClientPacket = function ( f5_arg0 )
	local f5_local0 = f5_arg0.lobbyMsg:getLobbyMsgInfo() --[[ @ 0]]
	local f5_local1 = f5_arg0.lobbyMsg:getMsgStructInfo() --[[ @ 0]]
	local f5_local2 = f5_arg0.controller --[[ @ 0]]
	local f5_local3 = f5_arg0.lobbyMsg --[[ @ 0]]
	local f5_local4 = true --[[ @ 0]]
	local f5_local5 = {} --[[ @ 0]]
	f5_local4, f5_local5 = LobbyMsg.OnTestHostPacket( f5_local3 ) --[[ @ 0]]
	if f5_local4 then
		f5_local3:debugPrint() --[[ @ 0]]
	end
	return f5_local4
end
 --[[ @ 0]]
LobbyMsg.ConvertToLuaMsgType = function ( f6_arg0 )
	return f6_arg0 - Enum[@"msgtype"][@"hash_28D9789F91FCDB78"]
end
 --[[ @ 0]]
LobbyMsg.EncodeToLobbyMsgType = function ( f7_arg0 )
	return f7_arg0 + Enum[@"msgtype"][@"hash_28D9789F91FCDB78"]
end
 --[[ @ 0]]
LobbyMsg.PackageLobbyType = function ( f8_arg0, f8_arg1, f8_arg2, f8_arg3 )
	local f8_local0, f8_local1 = LobbyMsg.PackageMessage( f8_arg1, f8_arg0, f8_arg0.packageInt8, "lobbyType", f8_arg3 ) --[[ @ 0]]
	f8_arg2.lobbyType = f8_local1 --[[ @ 0]]
	return f8_local0, f8_arg2
end
 --[[ @ 0]]
LobbyMsg.PackageKickLobbyLeader = function ( f9_arg0, f9_arg1 )
	local f9_local0 = {} --[[ @ 0]]
	local f9_local1, f9_local2 = LobbyMsg.PackageMessage( true, f9_arg0, f9_arg0.packageXUID, "leader", f9_arg1 ) --[[ @ 0]]
	f9_local0.xuid = f9_local2 --[[ @ 0]]
	return f9_local1, f9_local0
end
 --[[ @ 0]]
LobbyMsg.PackageLobbyTypeAndXuid = function ( f10_arg0, f10_arg1, f10_arg2, f10_arg3, f10_arg4 )
	local f10_local0, f10_local1 = LobbyMsg.PackageLobbyType( f10_arg0, f10_arg1, f10_arg2, f10_arg3 ) --[[ @ 0]]
	f10_arg2 = f10_local1 --[[ @ 0]]
	f10_local0, f10_local1 = LobbyMsg.PackageMessage( f10_local0, f10_arg0, f10_arg0.packageXUID, "xuid", f10_arg4 ) --[[ @ 0]]
	f10_arg2.xuid = f10_local1 --[[ @ 0]]
	return f10_local0, f10_arg2
end
 --[[ @ 0]]
LobbyMsg.PackageLobbyDisconnect = function ( f11_arg0, f11_arg1, f11_arg2, f11_arg3 )
	local f11_local0, f11_local1 = LobbyMsg.PackageLobbyTypeAndXuid( f11_arg0, true, {}, f11_arg1, f11_arg2 ) --[[ @ 0]]
	local f11_local2 = f11_local1 --[[ @ 0]]
	f11_local0, f11_local1 = LobbyMsg.PackageMessage( f11_local0, f11_arg0, f11_arg0.packageUInt8, "reason", f11_arg3 ) --[[ @ 0]]
	f11_local2.disconnectReason = f11_local1 --[[ @ 0]]
	return f11_local0, f11_local2
end
 --[[ @ 0]]
LobbyMsg.PackageHostLeaveWithPary = function ( f12_arg0, f12_arg1 )
	local f12_local0, f12_local1 = LobbyMsg.PackageLobbyType( f12_arg0, true, {}, f12_arg1 ) --[[ @ 0]]
	return f12_local0, f12_local1
end
 --[[ @ 0]]
LobbyMsg.PackageLobbyMove = function ( f13_arg0, f13_arg1, f13_arg2 )
	local f13_local0, f13_local1 = LobbyMsg.PackageLobbyType( f13_arg0, true, {}, f13_arg1 ) --[[ @ 0]]
	local f13_local2 = f13_local1 --[[ @ 0]]
	f13_local0, f13_local1 = LobbyMsg.PackageMessage( f13_local0, f13_arg0, f13_arg0.packageInt8, "movelobbytype", f13_arg2 ) --[[ @ 0]]
	f13_local2.lobbyTypeMoveFrom = f13_local1 --[[ @ 0]]
	return f13_local0, f13_local2
end
 --[[ @ 0]]
LobbyMsg.PackageLobbyMove = function ( f14_arg0, f14_arg1, f14_arg2 )
	local f14_local0, f14_local1 = LobbyMsg.PackageLobbyType( f14_arg0, true, {}, f14_arg1 ) --[[ @ 0]]
	local f14_local2 = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageInt32, "response", response ) --[[ @ 0]]
	f14_local2.response = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageString, "name", name ) --[[ @ 0]]
	f14_local2.name = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageUInt32, "serverLocation", serverLocation ) --[[ @ 0]]
	f14_local2.serverLocation = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageInt32, "networkMode", networkMode ) --[[ @ 0]]
	f14_local2.networkMode = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageInt32, "mainMode", mainMode ) --[[ @ 0]]
	f14_local2.mainMode = f14_local1 --[[ @ 0]]
	f14_local0, f14_local1 = LobbyMsg.PackageMessage( f14_local0, f14_arg0, f14_arg0.packageUInt64, "reservationKey", reservationKey ) --[[ @ 0]]
	f14_local2.reservationKey = f14_local1 --[[ @ 0]]
	return f14_local0, f14_local2
end
 --[[ @ 0]]
LobbyMsg.HandleDisconnect = function ( f15_arg0 )
	local f15_local0 = f15_arg0.lobbyMsg:getLobbyMsgInfo() --[[ @ 0]]
	local f15_local1 = f15_arg0.lobbyMsg:getMsgStructInfo() --[[ @ 0]]
	local f15_local2 = f15_arg0.controller --[[ @ 0]]
	local f15_local3 = f15_arg0.lobbyMsg --[[ @ 0]]
	local f15_local4, f15_local5 = LobbyMsg.PackageLobbyTypeAndXuid( msg, true, {} ) --[[ @ 0]]
end
 --[[ @ 0]]
LobbyMsg.MsgHandlers = {} --[[ @ 0]]
LobbyMsg.MsgHandlers[LobbyMsg.LuaMsgType.LUA_MESSAGE_TYPE_TEST] = LobbyMsg.handleTestClientPacket --[[ @ 0]]
require( "x64:599b52a1238a9d8" ) --[[ @ 0]]
require( "x64:11182af24cee44ef" ) --[[ @ 0]]
function ContainsKey( f16_arg0, f16_arg1 )
	return f16_arg0[f16_arg1] ~= nil
end

LobbyMsg.OnLobbyMessage = function ( f17_arg0 )
	local f17_local0 = f17_arg0.lobbyMsg:getLobbyMsgInfo() --[[ @ 0]]
	local f17_local1 = LobbyMsg.ConvertToLuaMsgType( f17_local0.msgType ) --[[ @ 0]]
	if ContainsKey( LobbyMsg.MsgHandlers, f17_local1 ) then
		return LobbyMsg.MsgHandlers[f17_local1]( f17_arg0 )
	elseif ContainsKey( LobbyMsgClient.MsgHandlers, f17_local1 ) then
		return LobbyMsgClient.MsgHandlers[f17_local1]( f17_arg0 )
	elseif ContainsKey( LobbyMsgHost.MsgHandlers, f17_local1 ) then
		return LobbyMsgClient.MsgHandlers[f17_local1]( f17_arg0 )
	else
		assert( false ) --[[ @ 0]]
		return false
	end
end
 --[[ @ 0]]
