-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:e9c0321bb7002d6" ) --[[ @ 0]]

CoD.AmmoWidget_PowerBasedCount = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.__defaultWidth = 64 --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.__defaultHeight = 20 --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidget_PowerBasedCount ) --[[ @ 0]]
	self.id = "AmmoWidget_PowerBasedCount" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local pipx1 = CoD.AmmoWidget_PowerBasedCountPip.new( f1_arg0, f1_arg1, 0, 0, 15, 49, 0, 0, 0, 4 ) --[[ @ 0]]
	pipx1:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "ammo", 2 )
			end
		},
		{
			stateName = "Inactive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "clipMaxAmmo", 2 )
			end
		}
	} ) --[[ @ 0]]
	pipx1:linkToElementModel( pipx1, "ammo", true, function ( model )
		f1_arg0:updateElementState( pipx1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx1:linkToElementModel( pipx1, "clipMaxAmmo", true, function ( model )
		f1_arg0:updateElementState( pipx1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx1:linkToElementModel( self, nil, false, function ( model )
		pipx1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( pipx1 ) --[[ @ 0]]
	self.pipx1 = pipx1 --[[ @ 0]]
	
	local pipx2 = CoD.AmmoWidget_PowerBasedCountPip.new( f1_arg0, f1_arg1, 0, 0, 15, 49, 0, 0, 5, 9 ) --[[ @ 0]]
	pipx2:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "ammo", 3 )
			end
		},
		{
			stateName = "Inactive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "clipMaxAmmo", 3 )
			end
		}
	} ) --[[ @ 0]]
	pipx2:linkToElementModel( pipx2, "ammo", true, function ( model )
		f1_arg0:updateElementState( pipx2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx2:linkToElementModel( pipx2, "clipMaxAmmo", true, function ( model )
		f1_arg0:updateElementState( pipx2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx2.Image:setImage( RegisterImage( @"uie_hud_core_loadout_reservebar" ) ) --[[ @ 0]]
	pipx2:linkToElementModel( self, nil, false, function ( model )
		pipx2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( pipx2 ) --[[ @ 0]]
	self.pipx2 = pipx2 --[[ @ 0]]
	
	local pipx3 = CoD.AmmoWidget_PowerBasedCountPip.new( f1_arg0, f1_arg1, 0, 0, 15, 49, 0, 0, 10, 14 ) --[[ @ 0]]
	pipx3:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "ammo", 4 )
			end
		},
		{
			stateName = "Inactive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, f1_arg1, "clipMaxAmmo", 4 )
			end
		}
	} ) --[[ @ 0]]
	pipx3:linkToElementModel( pipx3, "ammo", true, function ( model )
		f1_arg0:updateElementState( pipx3, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx3:linkToElementModel( pipx3, "clipMaxAmmo", true, function ( model )
		f1_arg0:updateElementState( pipx3, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	pipx3.Image:setImage( RegisterImage( @"uie_hud_core_loadout_reservebar" ) ) --[[ @ 0]]
	pipx3:linkToElementModel( self, nil, false, function ( model )
		pipx3:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( pipx3 ) --[[ @ 0]]
	self.pipx3 = pipx3 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NoReserve",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThan( self, f1_arg1, "ammo", 2 ) and CoD.ModelUtility.IsSelfModelValueLessThan( self, f1_arg1, "clipMaxAmmo", 2 )
			end
		},
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "fireableUntilEmpty" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clipMaxAmmo", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "fireableUntilEmpty", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "fireableUntilEmpty"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		local f22_local0 = self --[[ @ 0]]
		if CoD.HUDUtility.ShouldPulseNewAmmo( self ) then
			PlayClip( self, "Pulse", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.__resetProperties = function ( f23_arg0 )
	f23_arg0.pipx3:completeAnimation() --[[ @ 0]]
	f23_arg0.pipx2:completeAnimation() --[[ @ 0]]
	f23_arg0.pipx1:completeAnimation() --[[ @ 0]]
	f23_arg0.pipx3:setAlpha( 1 ) --[[ @ 0]]
	f23_arg0.pipx2:setAlpha( 1 ) --[[ @ 0]]
	f23_arg0.pipx1:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NoReserve = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f25_arg0.pipx1:completeAnimation() --[[ @ 0]]
			f25_arg0.pipx1:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.pipx1 ) --[[ @ 0]]
			f25_arg0.pipx2:completeAnimation() --[[ @ 0]]
			f25_arg0.pipx2:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.pipx2 ) --[[ @ 0]]
			f25_arg0.pipx3:completeAnimation() --[[ @ 0]]
			f25_arg0.pipx3:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.pipx3 ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f26_arg0.pipx1:completeAnimation() --[[ @ 0]]
			f26_arg0.pipx1:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.pipx1 ) --[[ @ 0]]
			f26_arg0.pipx2:completeAnimation() --[[ @ 0]]
			f26_arg0.pipx2:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.pipx2 ) --[[ @ 0]]
			f26_arg0.pipx3:completeAnimation() --[[ @ 0]]
			f26_arg0.pipx3:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.pipx3 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidget_PowerBasedCount.__onClose = function ( f27_arg0 )
	f27_arg0.pipx1:close() --[[ @ 0]]
	f27_arg0.pipx2:close() --[[ @ 0]]
	f27_arg0.pipx3:close() --[[ @ 0]]
end
 --[[ @ 0]]
