-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:176d8d58932b4f69" ) --[[ @ 0]]
require( "x64:645d84eeaa678589" ) --[[ @ 0]]

CoD.PC_Korea_Event_Week_Progression = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.__defaultWidth = 560 --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.__defaultHeight = 111 --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PC_Korea_Event_Week_Progression ) --[[ @ 0]]
	self.id = "PC_Korea_Event_Week_Progression" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local StarsBG = LUI.UIImage.new( 0, 0, 0, 448, 0, 1, 0, 0 ) --[[ @ 0]]
	StarsBG:setImage( RegisterImage( @"uie_pc_igrevent_weekprogression_week_bg" ) ) --[[ @ 0]]
	StarsBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	StarsBG:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	StarsBG:setupNineSliceShader( 64, 64 ) --[[ @ 0]]
	self:addElement( StarsBG ) --[[ @ 0]]
	self.StarsBG = StarsBG --[[ @ 0]]
	
	local CurrentWeekBG = LUI.UIImage.new( 0, 0, 0, 448, 0, 1, 0, 0 ) --[[ @ 0]]
	CurrentWeekBG:setAlpha( 0 ) --[[ @ 0]]
	CurrentWeekBG:setImage( RegisterImage( @"uie_pc_igrevent_weekprogression_currentweek_bg" ) ) --[[ @ 0]]
	CurrentWeekBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	CurrentWeekBG:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CurrentWeekBG:setupNineSliceShader( 64, 64 ) --[[ @ 0]]
	self:addElement( CurrentWeekBG ) --[[ @ 0]]
	self.CurrentWeekBG = CurrentWeekBG --[[ @ 0]]
	
	local CompletedWeekBG = LUI.UIImage.new( 0, 0, 0, 448, 0, 1, 0, 0 ) --[[ @ 0]]
	CompletedWeekBG:setAlpha( 0 ) --[[ @ 0]]
	CompletedWeekBG:setImage( RegisterImage( @"uie_pc_igrevent_weekprogression_completedweek_bg" ) ) --[[ @ 0]]
	CompletedWeekBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	CompletedWeekBG:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CompletedWeekBG:setupNineSliceShader( 64, 64 ) --[[ @ 0]]
	self:addElement( CompletedWeekBG ) --[[ @ 0]]
	self.CompletedWeekBG = CompletedWeekBG --[[ @ 0]]
	
	local WeekDecoration = LUI.UIImage.new( 0, 0, 0, 112, 0, 0, 0.5, 112.5 ) --[[ @ 0]]
	WeekDecoration:setAlpha( 0.5 ) --[[ @ 0]]
	WeekDecoration:setImage( RegisterImage( @"uie_pc_igrevent_weekprogression_number_deco" ) ) --[[ @ 0]]
	self:addElement( WeekDecoration ) --[[ @ 0]]
	self.WeekDecoration = WeekDecoration --[[ @ 0]]
	
	local DayList = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	DayList:setLeftRight( 0.5, 0.5, -172, 168 ) --[[ @ 0]]
	DayList:setTopBottom( 0.5, 0.5, -52, 60 ) --[[ @ 0]]
	DayList:setWidgetType( CoD.PC_Korea_Event_Day_Progression ) --[[ @ 0]]
	DayList:setHorizontalCount( 3 ) --[[ @ 0]]
	DayList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	DayList:linkToElementModel( self, "dayList", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			DayList:setDataSource( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DayList ) --[[ @ 0]]
	self.DayList = DayList --[[ @ 0]]
	
	local WeekText = LUI.UIText.new( 0.5, 0.5, -271.5, -178.5, 0.5, 0.5, -19.5, 19.5 ) --[[ @ 0]]
	WeekText:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	WeekText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	WeekText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	WeekText:linkToElementModel( self, "weekNumber", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			WeekText:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WeekText ) --[[ @ 0]]
	self.WeekText = WeekText --[[ @ 0]]
	
	local TimeRemainingBG = LUI.UIImage.new( 0, 0, 0, 448, 1, 1, -19, 0 ) --[[ @ 0]]
	TimeRemainingBG:setAlpha( 0 ) --[[ @ 0]]
	TimeRemainingBG:setImage( RegisterImage( @"hash_644E36BB9FF6587A" ) ) --[[ @ 0]]
	TimeRemainingBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	TimeRemainingBG:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TimeRemainingBG:setupNineSliceShader( 6, 6 ) --[[ @ 0]]
	self:addElement( TimeRemainingBG ) --[[ @ 0]]
	self.TimeRemainingBG = TimeRemainingBG --[[ @ 0]]
	
	local WeekEndingText = LUI.UIText.new( 0, 0, 0, 448, 1, 1, -15, -2 ) --[[ @ 0]]
	WeekEndingText:setRGB( 0, 0, 0 ) --[[ @ 0]]
	WeekEndingText:setAlpha( 0 ) --[[ @ 0]]
	WeekEndingText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	WeekEndingText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	WeekEndingText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	WeekEndingText:linkToElementModel( self, "weekTimeRemaining", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			WeekEndingText:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WeekEndingText ) --[[ @ 0]]
	self.WeekEndingText = WeekEndingText --[[ @ 0]]
	
	local CurrentWeekRewardBG = CoD.PC_Korea_Event_Week_Reward.new( f1_arg0, f1_arg1, 0, 0, 449, 560, 0, 0, 0, 111 ) --[[ @ 0]]
	CurrentWeekRewardBG:mergeStateConditions( {
		{
			stateName = "CurrentWeekRewardIntroUnlock",
			condition = function ( menu, element, event )
				local f5_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "showCompletedAnimation" ) --[[ @ 0]]
				if f5_local0 then
					f5_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isActive" ) --[[ @ 0]]
					if f5_local0 then
						f5_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "PCKoreaEventProgression.isCurrentWeekCompleted" ) --[[ @ 0]]
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "CurrentWeekRewardUnlocked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isActive" ) and CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isCompleted" )
			end
		},
		{
			stateName = "CurrentWeek",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isActive" )
			end
		},
		{
			stateName = "Completed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isCompleted" )
			end
		},
		{
			stateName = "Failed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isFailed" )
			end
		},
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	CurrentWeekRewardBG:linkToElementModel( CurrentWeekRewardBG, "showCompletedAnimation", true, function ( model )
		f1_arg0:updateElementState( CurrentWeekRewardBG, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "showCompletedAnimation"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentWeekRewardBG:linkToElementModel( CurrentWeekRewardBG, "isActive", true, function ( model )
		f1_arg0:updateElementState( CurrentWeekRewardBG, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isActive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local10 = CurrentWeekRewardBG --[[ @ 0]]
	local CompletedBar = CurrentWeekRewardBG.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	CompletedBar( f1_local10, f1_local12["PCKoreaEventProgression.isCurrentWeekCompleted"], function ( f13_arg0 )
		f1_arg0:updateElementState( CurrentWeekRewardBG, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "PCKoreaEventProgression.isCurrentWeekCompleted"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CurrentWeekRewardBG:linkToElementModel( CurrentWeekRewardBG, "isCompleted", true, function ( model )
		f1_arg0:updateElementState( CurrentWeekRewardBG, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isCompleted"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentWeekRewardBG:linkToElementModel( CurrentWeekRewardBG, "isFailed", true, function ( model )
		f1_arg0:updateElementState( CurrentWeekRewardBG, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isFailed"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentWeekRewardBG:linkToElementModel( self, "rewardImage", true, function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			CurrentWeekRewardBG.RewardImage:setImage( RegisterImage( f16_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CurrentWeekRewardBG ) --[[ @ 0]]
	self.CurrentWeekRewardBG = CurrentWeekRewardBG --[[ @ 0]]
	
	CompletedBar = LUI.UIImage.new( 0, 0, -16, 0, -0, 1, 0, 0 ) --[[ @ 0]]
	CompletedBar:setAlpha( 0 ) --[[ @ 0]]
	CompletedBar:setImage( RegisterImage( @"uie_pc_igrevent_weekprogression_weekcompleted" ) ) --[[ @ 0]]
	self:addElement( CompletedBar ) --[[ @ 0]]
	self.CompletedBar = CompletedBar --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Completed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isCompleted" )
			end
		},
		{
			stateName = "CurrentWeek",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isActive" )
			end
		},
		{
			stateName = "Failed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isFailed" )
			end
		},
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isCompleted", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isCompleted"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isActive", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isActive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isFailed", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isFailed"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DayList.id = "DayList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.__resetProperties = function ( f24_arg0 )
	f24_arg0.WeekText:completeAnimation() --[[ @ 0]]
	f24_arg0.CompletedWeekBG:completeAnimation() --[[ @ 0]]
	f24_arg0.CompletedBar:completeAnimation() --[[ @ 0]]
	f24_arg0.CurrentWeekBG:completeAnimation() --[[ @ 0]]
	f24_arg0.TimeRemainingBG:completeAnimation() --[[ @ 0]]
	f24_arg0.WeekEndingText:completeAnimation() --[[ @ 0]]
	f24_arg0.DayList:completeAnimation() --[[ @ 0]]
	f24_arg0.WeekDecoration:completeAnimation() --[[ @ 0]]
	f24_arg0.StarsBG:completeAnimation() --[[ @ 0]]
	f24_arg0.WeekText:setTopBottom( 0.5, 0.5, -19.5, 19.5 ) --[[ @ 0]]
	f24_arg0.WeekText:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f24_arg0.CompletedWeekBG:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.CompletedBar:setTopBottom( -0, 1, 0, 0 ) --[[ @ 0]]
	f24_arg0.CompletedBar:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.CurrentWeekBG:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.TimeRemainingBG:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.WeekEndingText:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.DayList:setTopBottom( 0.5, 0.5, -52, 60 ) --[[ @ 0]]
	f24_arg0.DayList:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.WeekDecoration:setAlpha( 0.5 ) --[[ @ 0]]
	f24_arg0.StarsBG:setRGB( 1, 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.WeekText:completeAnimation() --[[ @ 0]]
			f25_arg0.WeekText:setRGB( 0.49, 0.49, 0.49 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.WeekText ) --[[ @ 0]]
		end
	},
	Completed = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f26_arg0.CompletedWeekBG:completeAnimation() --[[ @ 0]]
			f26_arg0.CompletedWeekBG:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.CompletedWeekBG ) --[[ @ 0]]
			f26_arg0.WeekText:completeAnimation() --[[ @ 0]]
			f26_arg0.WeekText:setRGB( 0.77, 0.77, 0.77 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.WeekText ) --[[ @ 0]]
			f26_arg0.CompletedBar:completeAnimation() --[[ @ 0]]
			f26_arg0.CompletedBar:setTopBottom( -0, 1, 0, 0 ) --[[ @ 0]]
			f26_arg0.CompletedBar:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.CompletedBar ) --[[ @ 0]]
		end
	},
	CurrentWeek = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f27_arg0.CurrentWeekBG:completeAnimation() --[[ @ 0]]
			f27_arg0.CurrentWeekBG:setAlpha( 1 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.CurrentWeekBG ) --[[ @ 0]]
			f27_arg0.WeekDecoration:beginAnimation( 80 ) --[[ @ 0]]
			f27_arg0.WeekDecoration:setAlpha( 0.7 ) --[[ @ 0]]
			f27_arg0.WeekDecoration:registerEventHandler( "interrupted_keyframe", f27_arg0.clipInterrupted ) --[[ @ 0]]
			f27_arg0.WeekDecoration:registerEventHandler( "transition_complete_keyframe", f27_arg0.clipFinished ) --[[ @ 0]]
			f27_arg0.DayList:completeAnimation() --[[ @ 0]]
			f27_arg0.DayList:setTopBottom( 0.5, 0.5, -60, 52 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.DayList ) --[[ @ 0]]
			f27_arg0.WeekText:completeAnimation() --[[ @ 0]]
			f27_arg0.WeekText:setTopBottom( 0.5, 0.5, -23.5, 15.5 ) --[[ @ 0]]
			f27_arg0.WeekText:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.WeekText ) --[[ @ 0]]
			f27_arg0.TimeRemainingBG:completeAnimation() --[[ @ 0]]
			f27_arg0.TimeRemainingBG:setAlpha( 1 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.TimeRemainingBG ) --[[ @ 0]]
			f27_arg0.WeekEndingText:completeAnimation() --[[ @ 0]]
			f27_arg0.WeekEndingText:setAlpha( 1 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.WeekEndingText ) --[[ @ 0]]
		end
	},
	Failed = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f28_arg0.WeekText:completeAnimation() --[[ @ 0]]
			f28_arg0.WeekText:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.WeekText ) --[[ @ 0]]
		end
	},
	Unavailable = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f29_arg0.StarsBG:completeAnimation() --[[ @ 0]]
			f29_arg0.StarsBG:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.StarsBG ) --[[ @ 0]]
			f29_arg0.DayList:completeAnimation() --[[ @ 0]]
			f29_arg0.DayList:setAlpha( 0.5 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.DayList ) --[[ @ 0]]
			f29_arg0.WeekText:completeAnimation() --[[ @ 0]]
			f29_arg0.WeekText:setRGB( 0.27, 0.27, 0.27 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.WeekText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PC_Korea_Event_Week_Progression.__onClose = function ( f30_arg0 )
	f30_arg0.DayList:close() --[[ @ 0]]
	f30_arg0.WeekText:close() --[[ @ 0]]
	f30_arg0.WeekEndingText:close() --[[ @ 0]]
	f30_arg0.CurrentWeekRewardBG:close() --[[ @ 0]]
end
 --[[ @ 0]]
