-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/vehiclehuds/mothership/vhud_ms_lockarrow" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/mothership/vhud_ms_lockbox" ) --[[ @ 0]]

CoD.vhud_ms_LockOnNotification = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_ms_LockOnNotification.__defaultWidth = 60 --[[ @ 0]]
CoD.vhud_ms_LockOnNotification.__defaultHeight = 60 --[[ @ 0]]
CoD.vhud_ms_LockOnNotification.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_ms_LockOnNotification ) --[[ @ 0]]
	self.id = "vhud_ms_LockOnNotification" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local vhudmsLockBox = CoD.vhud_ms_LockBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -41.5, 41.5, 0.5, 0.5, -36, 47 ) --[[ @ 0]]
	vhudmsLockBox:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfEnumModelValueTrue( element, f1_arg1, Enum[@"MissileLockedOnDirection"][@"hash_57459C01AD9B3104"] )
			end
		},
		{
			stateName = "HasLock",
			condition = function ( menu, element, event )
				return VehicleHasEnemyLock( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	vhudmsLockBox:linkToElementModel( vhudmsLockBox, Enum[@"MissileLockedOnDirection"][@"hash_57459C01AD9B3104"], true, function ( model )
		f1_arg0:updateElementState( vhudmsLockBox, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = Enum[@"MissileLockedOnDirection"][@"hash_57459C01AD9B3104"]
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockBox:linkToElementModel( vhudmsLockBox, nil, true, function ( model )
		f1_arg0:updateElementState( vhudmsLockBox, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockBox:linkToElementModel( self, nil, false, function ( model )
		vhudmsLockBox:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudmsLockBox ) --[[ @ 0]]
	self.vhudmsLockBox = vhudmsLockBox --[[ @ 0]]
	
	local vhudmsLockArrow = CoD.vhud_ms_LockArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -77, -23, 0.5, 0.5, -29, 25 ) --[[ @ 0]]
	vhudmsLockArrow:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfEnumModelValueTrue( element, f1_arg1, Enum[@"MissileLockedOnDirection"][@"hash_7654066BD0500BF0"] )
			end
		}
	} ) --[[ @ 0]]
	vhudmsLockArrow:linkToElementModel( vhudmsLockArrow, Enum[@"MissileLockedOnDirection"][@"hash_7654066BD0500BF0"], true, function ( model )
		f1_arg0:updateElementState( vhudmsLockArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = Enum[@"MissileLockedOnDirection"][@"hash_7654066BD0500BF0"]
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockArrow:linkToElementModel( self, nil, false, function ( model )
		vhudmsLockArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudmsLockArrow ) --[[ @ 0]]
	self.vhudmsLockArrow = vhudmsLockArrow --[[ @ 0]]
	
	local vhudmsLockArrow0 = CoD.vhud_ms_LockArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, 23, 77, 0.5, 0.5, -27, 27 ) --[[ @ 0]]
	vhudmsLockArrow0:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfEnumModelValueTrue( element, f1_arg1, Enum[@"MissileLockedOnDirection"][@"hash_763CE4D237D81945"] )
			end
		}
	} ) --[[ @ 0]]
	vhudmsLockArrow0:linkToElementModel( vhudmsLockArrow0, Enum[@"MissileLockedOnDirection"][@"hash_763CE4D237D81945"], true, function ( model )
		f1_arg0:updateElementState( vhudmsLockArrow0, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = Enum[@"MissileLockedOnDirection"][@"hash_763CE4D237D81945"]
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockArrow0:setZRot( 180 ) --[[ @ 0]]
	vhudmsLockArrow0:linkToElementModel( self, nil, false, function ( model )
		vhudmsLockArrow0:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudmsLockArrow0 ) --[[ @ 0]]
	self.vhudmsLockArrow0 = vhudmsLockArrow0 --[[ @ 0]]
	
	local vhudmsLockArrow1 = CoD.vhud_ms_LockArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -29, 25, 0.5, 0.5, -1, 53 ) --[[ @ 0]]
	vhudmsLockArrow1:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfEnumModelValueTrue( element, f1_arg1, Enum[@"MissileLockedOnDirection"][@"hash_53BBA82A75213295"] )
			end
		}
	} ) --[[ @ 0]]
	vhudmsLockArrow1:linkToElementModel( vhudmsLockArrow1, Enum[@"MissileLockedOnDirection"][@"hash_53BBA82A75213295"], true, function ( model )
		f1_arg0:updateElementState( vhudmsLockArrow1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = Enum[@"MissileLockedOnDirection"][@"hash_53BBA82A75213295"]
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockArrow1:setZRot( 90 ) --[[ @ 0]]
	vhudmsLockArrow1:linkToElementModel( self, nil, false, function ( model )
		vhudmsLockArrow1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudmsLockArrow1 ) --[[ @ 0]]
	self.vhudmsLockArrow1 = vhudmsLockArrow1 --[[ @ 0]]
	
	local vhudmsLockArrow2 = CoD.vhud_ms_LockArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -27, 27, 0.5, 0.5, -54, 0 ) --[[ @ 0]]
	vhudmsLockArrow2:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfEnumModelValueTrue( element, f1_arg1, Enum[@"MissileLockedOnDirection"][@"hash_21091C5D63A96BC0"] )
			end
		}
	} ) --[[ @ 0]]
	vhudmsLockArrow2:linkToElementModel( vhudmsLockArrow2, Enum[@"MissileLockedOnDirection"][@"hash_21091C5D63A96BC0"], true, function ( model )
		f1_arg0:updateElementState( vhudmsLockArrow2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = Enum[@"MissileLockedOnDirection"][@"hash_21091C5D63A96BC0"]
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudmsLockArrow2:setZRot( -90 ) --[[ @ 0]]
	vhudmsLockArrow2:linkToElementModel( self, nil, false, function ( model )
		vhudmsLockArrow2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudmsLockArrow2 ) --[[ @ 0]]
	self.vhudmsLockArrow2 = vhudmsLockArrow2 --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_ms_LockOnNotification.__onClose = function ( f19_arg0 )
	f19_arg0.vhudmsLockBox:close() --[[ @ 0]]
	f19_arg0.vhudmsLockArrow:close() --[[ @ 0]]
	f19_arg0.vhudmsLockArrow0:close() --[[ @ 0]]
	f19_arg0.vhudmsLockArrow1:close() --[[ @ 0]]
	f19_arg0.vhudmsLockArrow2:close() --[[ @ 0]]
end
 --[[ @ 0]]
