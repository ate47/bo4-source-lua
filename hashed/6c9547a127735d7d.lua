-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
CoD.KilledByHeader = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.KilledByHeader.__defaultWidth = 600 --[[ @ 0]]
CoD.KilledByHeader.__defaultHeight = 150 --[[ @ 0]]
CoD.KilledByHeader.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.KilledByHeader ) --[[ @ 0]]
	self.id = "KilledByHeader" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TextBackground = LUI.UIImage.new( 0, 1, 0, 0, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	TextBackground:setRGB( 0, 0, 0 ) --[[ @ 0]]
	TextBackground:setAlpha( 0.8 ) --[[ @ 0]]
	TextBackground:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	TextBackground:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	TextBackground:setShaderVector( 1, 0.15, 0.15, 0, 0 ) --[[ @ 0]]
	TextBackground:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	TextBackground:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	TextBackground:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( TextBackground ) --[[ @ 0]]
	self.TextBackground = TextBackground --[[ @ 0]]
	
	local MistakesText = LUI.UIText.new( 0.5, 0.5, -206.5, 206.5, 0.5, 0.5, -18.5, 18.5 ) --[[ @ 0]]
	MistakesText:setText( LocalizeToUpperString( @"hash_51838FDD5EA1D43A" ) ) --[[ @ 0]]
	MistakesText:setTTF( "notosans_regular" ) --[[ @ 0]]
	MistakesText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	MistakesText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	MistakesText:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByMOD", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MistakesText:setAlpha( Negate( CoD.DeathCamUtility.KilledByMOD_UnkownToAlpha( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MistakesText ) --[[ @ 0]]
	self.MistakesText = MistakesText --[[ @ 0]]
	
	local WeaponImage = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -64, 64, 0.5, 0.5, -64, 64 ) --[[ @ 0]]
	WeaponImage:setScale( 0.6, 0.6 ) --[[ @ 0]]
	WeaponImage:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByMOD", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			WeaponImage:setAlpha( CoD.DeathCamUtility.KilledByMOD_UnkownToAlpha( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WeaponImage:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByItemIndex", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			WeaponImage:setImage( RegisterImage( GetWeaponItemImageFromIndex( f4_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WeaponImage ) --[[ @ 0]]
	self.WeaponImage = WeaponImage --[[ @ 0]]
	
	local DeathTypeText = LUI.UIText.new( 0.5, 0.5, -276.5, -76.5, 0.5, 0.5, -18.5, 18.5 ) --[[ @ 0]]
	DeathTypeText:setTTF( "notosans_regular" ) --[[ @ 0]]
	DeathTypeText:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	DeathTypeText:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	DeathTypeText:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByMOD", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			DeathTypeText:setAlpha( CoD.DeathCamUtility.KilledByMOD_UnkownToAlpha( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DeathTypeText:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByMOD", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			DeathTypeText:setText( CoD.SocialUtility.CleanGamerTag( LocalizeToUpperString( CoD.DeathCamUtility.KilledByMODToDeathType( f6_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DeathTypeText ) --[[ @ 0]]
	self.DeathTypeText = DeathTypeText --[[ @ 0]]
	
	local DeathWeaponName = LUI.UIText.new( 0.5, 0.5, 77, 277, 0.5, 0.5, -18.5, 18.5 ) --[[ @ 0]]
	DeathWeaponName:setTTF( "notosans_regular" ) --[[ @ 0]]
	DeathWeaponName:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	DeathWeaponName:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	DeathWeaponName:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByMOD", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			DeathWeaponName:setAlpha( CoD.DeathCamUtility.KilledByMOD_UnkownToAlpha( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DeathWeaponName:subscribeToGlobalModel( f1_arg1, "HUDItems", "killedByItemIndex", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			DeathWeaponName:setText( LocalizeToUpperString( GetItemNameFromIndex( Enum[@"hash_6EB546760F890D2"][@"hash_13057ABF96AF8289"], f8_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DeathWeaponName ) --[[ @ 0]]
	self.DeathWeaponName = DeathWeaponName --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "InSpawnSelect",
			condition = function ( menu, element, event )
				return CoD.SpawnSelectionUtility.IsSpawnSelectActive( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.showSpawnSelect"], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "hudItems.showSpawnSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.KilledByHeader.__resetProperties = function ( f11_arg0 )
	f11_arg0.TextBackground:completeAnimation() --[[ @ 0]]
	f11_arg0.TextBackground:setAlpha( 0.8 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.KilledByHeader.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	InSpawnSelect = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f13_arg0.TextBackground:completeAnimation() --[[ @ 0]]
			f13_arg0.TextBackground:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.TextBackground ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.KilledByHeader.__onClose = function ( f14_arg0 )
	f14_arg0.MistakesText:close() --[[ @ 0]]
	f14_arg0.WeaponImage:close() --[[ @ 0]]
	f14_arg0.DeathTypeText:close() --[[ @ 0]]
	f14_arg0.DeathWeaponName:close() --[[ @ 0]]
end
 --[[ @ 0]]
