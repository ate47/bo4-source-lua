-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/cac/newbreadcrumb" ) --[[ @ 0]]

CoD.WeaponPersonalizationTextBreadcrumb = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.__defaultWidth = 350 --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.__defaultHeight = 45 --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponPersonalizationTextBreadcrumb ) --[[ @ 0]]
	self.id = "WeaponPersonalizationTextBreadcrumb" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local textCenterAlign = LUI.UIText.new( -0.02, 0.98, 6, -6, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	textCenterAlign:setRGB( 0.8, 0.79, 0.78 ) --[[ @ 0]]
	textCenterAlign:setText( "" ) --[[ @ 0]]
	textCenterAlign:setTTF( "dinnext_regular" ) --[[ @ 0]]
	textCenterAlign:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	textCenterAlign:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	textCenterAlign:setBackingType( 1 ) --[[ @ 0]]
	textCenterAlign:setBackingXPadding( 15 ) --[[ @ 0]]
	textCenterAlign:setBackingYPadding( 7 ) --[[ @ 0]]
	self:addElement( textCenterAlign ) --[[ @ 0]]
	self.textCenterAlign = textCenterAlign --[[ @ 0]]
	
	local Breadcrumb = CoD.NewBreadcrumb.new( f1_arg0, f1_arg1, 0, 0, 314, 344, 0, 0, 7.5, 37.5 ) --[[ @ 0]]
	Breadcrumb:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f2_local0 = IsLive() --[[ @ 0]]
				if f2_local0 then
					if not IsInGame() then
						f2_local0 = CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "breadcrumbCount", 0 ) --[[ @ 0]]
					else
						f2_local0 = false --[[ @ 0]]
					end
				end
				return f2_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local3 = Breadcrumb --[[ @ 0]]
	local f1_local4 = Breadcrumb.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["lobbyRoot.lobbyNetworkMode"], function ( f3_arg0 )
		f1_arg0:updateElementState( Breadcrumb, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "lobbyRoot.lobbyNetworkMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = Breadcrumb --[[ @ 0]]
	f1_local4 = Breadcrumb.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["lobbyRoot.lobbyNav"], function ( f4_arg0 )
		f1_arg0:updateElementState( Breadcrumb, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Breadcrumb:linkToElementModel( Breadcrumb, "breadcrumbCount", true, function ( model )
		f1_arg0:updateElementState( Breadcrumb, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "breadcrumbCount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Breadcrumb:setScale( 0.8, 0.8 ) --[[ @ 0]]
	Breadcrumb:linkToElementModel( self, nil, false, function ( model )
		Breadcrumb:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Breadcrumb ) --[[ @ 0]]
	self.Breadcrumb = Breadcrumb --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NoHintText",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ShowText",
			condition = function ( menu, element, event )
				return true
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "weaponModelSlotIndex", true, function ( model )
		local f9_local0 = self --[[ @ 0]]
		UpdateElementState( self, "Breadcrumb", f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.__resetProperties = function ( f10_arg0 )
	f10_arg0.textCenterAlign:completeAnimation() --[[ @ 0]]
	f10_arg0.Breadcrumb:completeAnimation() --[[ @ 0]]
	f10_arg0.textCenterAlign:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.Breadcrumb:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.textCenterAlign:completeAnimation() --[[ @ 0]]
			f11_arg0.textCenterAlign:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.textCenterAlign ) --[[ @ 0]]
			f11_arg0.Breadcrumb:completeAnimation() --[[ @ 0]]
			f11_arg0.Breadcrumb:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Breadcrumb ) --[[ @ 0]]
		end
	},
	NoHintText = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f12_arg0.textCenterAlign:completeAnimation() --[[ @ 0]]
			f12_arg0.textCenterAlign:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.textCenterAlign ) --[[ @ 0]]
			f12_arg0.Breadcrumb:completeAnimation() --[[ @ 0]]
			f12_arg0.Breadcrumb:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Breadcrumb ) --[[ @ 0]]
		end
	},
	ShowText = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WeaponPersonalizationTextBreadcrumb.__onClose = function ( f14_arg0 )
	f14_arg0.Breadcrumb:close() --[[ @ 0]]
end
 --[[ @ 0]]
