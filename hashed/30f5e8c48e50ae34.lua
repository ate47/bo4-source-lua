-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:79b528a05aba52d6" ) --[[ @ 0]]
require( "x64:4ba4dbda9ab6d277" ) --[[ @ 0]]
require( "x64:35653ef4ad2299d" ) --[[ @ 0]]
require( "x64:4b1b346e32476a2e" ) --[[ @ 0]]

CoD.ReservesOffersCarousel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReservesOffersCarousel.__defaultWidth = 248 --[[ @ 0]]
CoD.ReservesOffersCarousel.__defaultHeight = 462 --[[ @ 0]]
CoD.ReservesOffersCarousel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReservesOffersCarousel ) --[[ @ 0]]
	self.id = "ReservesOffersCarousel" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local OffersCarousel = LUI.UIList.new( f1_arg0, f1_arg1, 12, 0, nil, true, false, false, false ) --[[ @ 0]]
	OffersCarousel:setLeftRight( 0.5, 0.5, -124, 124 ) --[[ @ 0]]
	OffersCarousel:setTopBottom( 0.5, 0.5, -231, 231 ) --[[ @ 0]]
	OffersCarousel:setWidgetType( CoD.ReservesLootPurchaseBundleButtonContainer ) --[[ @ 0]]
	OffersCarousel:setSpacing( 12 ) --[[ @ 0]]
	OffersCarousel:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OffersCarousel:setHorizontalCounter( CoD.horizontalCounterTriggerPrompts ) --[[ @ 0]]
	OffersCarousel:setDataSource( "ReserveDealsList" ) --[[ @ 0]]
	OffersCarousel:registerEventHandler( "occlusion_change", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f2_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f2_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", false ) then
			CoD.GridAndListUtility.UpdateDataSource( element, true, true, true ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	OffersCarousel:registerEventHandler( "gain_list_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.DisableAutoScrolling( f1_arg1, element ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	OffersCarousel:registerEventHandler( "lose_list_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.ReEnableAutoScrolling( f1_arg1, element ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	OffersCarousel:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( OffersCarousel, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "ItemShopDetails", controller, {
			_model = element:getModel()
		} ) --[[ @ 0]]
		PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( OffersCarousel, f1_arg1, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], "MWHEELDOWN", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( element, controller, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( OffersCarousel, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "MWHEELUP", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( element, controller, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( OffersCarousel, "updateDataSource", function ( element, controller, f12_arg2, f12_arg3 )
		CoD.GridAndListUtility.SetFocusToFirstSelectableItem( element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OffersCarousel:subscribeToGlobalModel( f1_arg1, "PerController", "reservesViewingCrates", function ( model )
		local f13_local0 = OffersCarousel --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueTrue( f1_arg1, "reservesViewingCrates" ) then
			CoD.GridAndListUtility.DisableAutoScrolling( f1_arg1, f13_local0 ) --[[ @ 0]]
		elseif not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "reservesViewingCrates" ) then
			CoD.GridAndListUtility.ReEnableAutoScrolling( f1_arg1, f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( OffersCarousel ) --[[ @ 0]]
	self.OffersCarousel = OffersCarousel --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsPC() and IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f15_arg0, f15_arg1 )
		f15_arg1.menu = f15_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f15_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = self --[[ @ 0]]
	local f1_local3 = self.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.LastInput, function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	OffersCarousel.id = "OffersCarousel" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local3 = self --[[ @ 0]]
	f1_local3 = OffersCarousel --[[ @ 0]]
	CoD.BaseUtility.DisableNavigation( f1_local3 ) --[[ @ 0]]
	SetElementProperty( f1_local3, "__loopOnSameRow", true ) --[[ @ 0]]
	SetElementProperty( f1_local3, "__allowCreateOnLoop", true ) --[[ @ 0]]
	CoD.BlackMarketUtility.InitialHideScrollPrompts( self, f1_arg1, f1_local3 ) --[[ @ 0]]
	CoD.BlackMarketUtility.ShopCycleThroughItems( f1_arg0, f1_arg1, f1_local3, 0.5 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.ReservesOffersCarousel.__resetProperties = function ( f17_arg0 )
	f17_arg0.OffersCarousel:completeAnimation() --[[ @ 0]]
	f17_arg0.OffersCarousel:setHorizontalCounter( CoD.horizontalCounterTriggerPrompts ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReservesOffersCarousel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.OffersCarousel:completeAnimation() --[[ @ 0]]
			f19_arg0.OffersCarousel:setHorizontalCounter( CoD.horizontalCounter ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.OffersCarousel ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReservesOffersCarousel.__onClose = function ( f20_arg0 )
	f20_arg0.OffersCarousel:close() --[[ @ 0]]
end
 --[[ @ 0]]
