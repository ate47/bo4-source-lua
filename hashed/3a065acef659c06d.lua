-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/menus/lobby/directorfindgame" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "x64:6131b51676141877" ) --[[ @ 0]]
require( "x64:6260c7a8e3737127" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directormapandgametypecontainer" ) --[[ @ 0]]
require( "x64:6fda45231af81f63" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebuttonoption" ) --[[ @ 0]]
require( "x64:1ea788cab9c8c2f2" ) --[[ @ 0]]
require( "x64:20daafb4764cb9e3" ) --[[ @ 0]]
require( "x64:3ac3ecac3599406b" ) --[[ @ 0]]
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]

CoD.directorPregame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorPregame.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorPregame.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorPregame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.DirectorUtility.InitPublicLobbyModels( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
	CoD.DirectorUtility.InitQuickPlayModel( f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.directorPregame ) --[[ @ 0]]
	self.id = "directorPregame" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Header = CoD.DirectorScreenHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -870, -227, 0, 0, 301, 401 ) --[[ @ 0]]
	Header:setAlpha( 0 ) --[[ @ 0]]
	Header:setZoom( 75 ) --[[ @ 0]]
	Header.Header:setText( LocalizeToUpperString( @"menu/local" ) ) --[[ @ 0]]
	self:addElement( Header ) --[[ @ 0]]
	self.Header = Header --[[ @ 0]]
	
	local pckeyboardNavigationRedirector2 = nil --[[ @ 0]]
	
	pckeyboardNavigationRedirector2 = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0.5, 0.8, 384, 384, 0.27, 0.32, 0, 0 ) --[[ @ 0]]
	self:addElement( pckeyboardNavigationRedirector2 ) --[[ @ 0]]
	self.pckeyboardNavigationRedirector2 = pckeyboardNavigationRedirector2 --[[ @ 0]]
	
	local pckeyboardNavigationRedirector = nil --[[ @ 0]]
	
	pckeyboardNavigationRedirector = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0.5, 0.8, 384, 384, 0.77, 0.82, 0, 0 ) --[[ @ 0]]
	self:addElement( pckeyboardNavigationRedirector ) --[[ @ 0]]
	self.pckeyboardNavigationRedirector = pckeyboardNavigationRedirector --[[ @ 0]]
	
	local ZMLobbyButtons = CoD.ZMLobbyButtonsContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, 515, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	ZMLobbyButtons:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not IsLobbyHostOfCurrentMenu()
			end
		}
	} ) --[[ @ 0]]
	ZMLobbyButtons:appendEventHandler( "on_session_start", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ZMLobbyButtons, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ZMLobbyButtons:appendEventHandler( "on_session_end", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ZMLobbyButtons, f4_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local FindMatchMissingDLCErrorTriangle = ZMLobbyButtons --[[ @ 0]]
	local FindMatchButton = ZMLobbyButtons.subscribeToModel --[[ @ 0]]
	local CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchButton( FindMatchMissingDLCErrorTriangle, CustomGamesButton["lobbyRoot.lobbyNav"], function ( f5_arg0 )
		f1_arg0:updateElementState( ZMLobbyButtons, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = ZMLobbyButtons --[[ @ 0]]
	FindMatchButton = ZMLobbyButtons.subscribeToModel --[[ @ 0]]
	CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchButton( FindMatchMissingDLCErrorTriangle, CustomGamesButton["lobbyRoot.gameClient.update"], function ( f6_arg0 )
		f1_arg0:updateElementState( ZMLobbyButtons, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = ZMLobbyButtons --[[ @ 0]]
	FindMatchButton = ZMLobbyButtons.subscribeToModel --[[ @ 0]]
	CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchButton( FindMatchMissingDLCErrorTriangle, CustomGamesButton["lobbyRoot.privateClient.update"], function ( f7_arg0 )
		f1_arg0:updateElementState( ZMLobbyButtons, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = ZMLobbyButtons --[[ @ 0]]
	FindMatchButton = ZMLobbyButtons.subscribeToModel --[[ @ 0]]
	CustomGamesButton = DataSources.ZMLobbyExclusions.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchButton( FindMatchMissingDLCErrorTriangle, CustomGamesButton.PublicMatchExcluded, function ( f8_arg0 )
		f1_arg0:updateElementState( ZMLobbyButtons, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "PublicMatchExcluded"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = ZMLobbyButtons --[[ @ 0]]
	FindMatchButton = ZMLobbyButtons.subscribeToModel --[[ @ 0]]
	CustomGamesButton = DataSources.ZMLobbyExclusions.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchButton( FindMatchMissingDLCErrorTriangle, CustomGamesButton.PrivateMatchExcluded, function ( f9_arg0 )
		f1_arg0:updateElementState( ZMLobbyButtons, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "PrivateMatchExcluded"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ZMLobbyButtons:setAlpha( 0 ) --[[ @ 0]]
	ZMLobbyButtons:subscribeToGlobalModel( f1_arg1, "ZMLobbyExclusions", nil, function ( model )
		ZMLobbyButtons:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ZMLobbyButtons ) --[[ @ 0]]
	self.ZMLobbyButtons = ZMLobbyButtons --[[ @ 0]]
	
	FindMatchButton = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	FindMatchButton:mergeStateConditions( {
		{
			stateName = "Unselectable",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShouldLockFindMatchButton( f1_arg1 )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return IsLobbyHostOfCurrentMenu()
			end
		}
	} ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	local DirectorLobbyPoseMembers = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers.playlistId, function ( f13_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "playlistId"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["privateClient.count"], function ( f14_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "privateClient.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchButton:appendEventHandler( "on_session_start", function ( f15_arg0, f15_arg1 )
		f15_arg1.menu = f15_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( FindMatchButton, f15_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FindMatchButton:appendEventHandler( "on_session_end", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( FindMatchButton, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.lobbyNav"], function ( f17_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.gameClient.update"], function ( f18_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.privateClient.update"], function ( f19_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers.offlineScreenState, function ( f20_arg0 )
		f1_arg0:updateElementState( FindMatchButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "offlineScreenState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"menu/find_match" ) ) --[[ @ 0]]
	FindMatchButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/find_match" ) ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.lobbyNav"], function ( f21_arg0, f21_arg1 )
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.playlistId"], function ( f22_arg0, f22_arg1 )
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = Engine[@"getglobalmodel"]() --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["lobbyRoot.lobbyList.playerCount"], function ( f23_arg0, f23_arg1 )
		CoD.Menu.UpdateButtonShownState( f23_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers.playlistId, function ( f24_arg0, f24_arg1 )
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = FindMatchButton --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle = FindMatchButton.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembers = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle( CustomGamesButton, DirectorLobbyPoseMembers["privateClient.count"], function ( f25_arg0, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FindMatchButton:registerEventHandler( "gain_focus", function ( element, event )
		local f26_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f26_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f26_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f26_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( FindMatchButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not IsZombies() and not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and not CoD.DirectorUtility.ShouldLockFindMatchButton( controller ) then
			CoD.DirectorUtility.NavigateToPublicLobbyForCurrentMenuMode( menu, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		elseif not IsZombies() and CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.OpenTooManyClientsPopup( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsZombies() and not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and not CoD.DirectorUtility.ShouldLockFindMatchButton( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not IsZombies() and CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( FindMatchButton ) --[[ @ 0]]
	self.FindMatchButton = FindMatchButton --[[ @ 0]]
	
	FindMatchMissingDLCErrorTriangle = CoD.ErrorTriangle.new( f1_arg0, f1_arg1, 0.5, 0.5, 516, 894, 1, 1, -133, -108 ) --[[ @ 0]]
	FindMatchMissingDLCErrorTriangle:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.DirectorUtility.ShouldShowFindMatchError( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	DirectorLobbyPoseMembers = FindMatchMissingDLCErrorTriangle --[[ @ 0]]
	CustomGamesButton = FindMatchMissingDLCErrorTriangle.subscribeToModel --[[ @ 0]]
	local CommonHeader = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	CustomGamesButton( DirectorLobbyPoseMembers, CommonHeader.playlistId, function ( f30_arg0 )
		f1_arg0:updateElementState( FindMatchMissingDLCErrorTriangle, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "playlistId"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorLobbyPoseMembers = FindMatchMissingDLCErrorTriangle --[[ @ 0]]
	CustomGamesButton = FindMatchMissingDLCErrorTriangle.subscribeToModel --[[ @ 0]]
	CommonHeader = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	CustomGamesButton( DirectorLobbyPoseMembers, CommonHeader["privateClient.count"], function ( f31_arg0 )
		f1_arg0:updateElementState( FindMatchMissingDLCErrorTriangle, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "privateClient.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( FindMatchMissingDLCErrorTriangle ) --[[ @ 0]]
	self.FindMatchMissingDLCErrorTriangle = FindMatchMissingDLCErrorTriangle --[[ @ 0]]
	
	CustomGamesButton = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -433, -387 ) --[[ @ 0]]
	CustomGamesButton:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f32_local0 = IsLobbyHostOfCurrentMenu() --[[ @ 0]]
				if f32_local0 then
					if not IsPublicOrLeagueGame( f1_arg1 ) then
						f32_local0 = CoD.DirectorUtility.ShowCustomGameButtonForCurrentLobby( f1_arg1 ) --[[ @ 0]]
					else
						f32_local0 = false --[[ @ 0]]
					end
				end
				return f32_local0
			end
		}
	} ) --[[ @ 0]]
	CustomGamesButton:appendEventHandler( "on_session_start", function ( f33_arg0, f33_arg1 )
		f33_arg1.menu = f33_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( CustomGamesButton, f33_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CustomGamesButton:appendEventHandler( "on_session_end", function ( f34_arg0, f34_arg1 )
		f34_arg1.menu = f34_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( CustomGamesButton, f34_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonHeader = CustomGamesButton --[[ @ 0]]
	DirectorLobbyPoseMembers = CustomGamesButton.subscribeToModel --[[ @ 0]]
	local DirectorLeaderActivitySelect = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorLobbyPoseMembers( CommonHeader, DirectorLeaderActivitySelect["lobbyRoot.lobbyNav"], function ( f35_arg0 )
		f1_arg0:updateElementState( CustomGamesButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CommonHeader = CustomGamesButton --[[ @ 0]]
	DirectorLobbyPoseMembers = CustomGamesButton.subscribeToModel --[[ @ 0]]
	DirectorLeaderActivitySelect = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorLobbyPoseMembers( CommonHeader, DirectorLeaderActivitySelect["lobbyRoot.gameClient.update"], function ( f36_arg0 )
		f1_arg0:updateElementState( CustomGamesButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CommonHeader = CustomGamesButton --[[ @ 0]]
	DirectorLobbyPoseMembers = CustomGamesButton.subscribeToModel --[[ @ 0]]
	DirectorLeaderActivitySelect = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorLobbyPoseMembers( CommonHeader, DirectorLeaderActivitySelect["lobbyRoot.privateClient.update"], function ( f37_arg0 )
		f1_arg0:updateElementState( CustomGamesButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f37_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CommonHeader = CustomGamesButton --[[ @ 0]]
	DirectorLobbyPoseMembers = CustomGamesButton.subscribeToModel --[[ @ 0]]
	DirectorLeaderActivitySelect = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorLobbyPoseMembers( CommonHeader, DirectorLeaderActivitySelect.offlineScreenState, function ( f38_arg0 )
		f1_arg0:updateElementState( CustomGamesButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f38_arg0:get(),
			modelName = "offlineScreenState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference = function ()
		CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( CoD.DirectorUtility.GetCustomGamesName( @"menu/custom_games" ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference() --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String = function ()
		CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( CoD.DirectorUtility.GetCustomGamesName( @"menu/custom_games" ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String() --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	CommonHeader = CustomGamesButton --[[ @ 0]]
	DirectorLobbyPoseMembers = CustomGamesButton.subscribeToModel --[[ @ 0]]
	DirectorLeaderActivitySelect = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorLobbyPoseMembers( CommonHeader, DirectorLeaderActivitySelect["lobbyRoot.lobbyNav"], function ( f41_arg0, f41_arg1 )
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton:registerEventHandler( "gain_focus", function ( element, event )
		local f42_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f42_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f42_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f42_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CustomGamesButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsZombies() and IsPC() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.NavigateToCustomLobbyForCurrentMode( menu, controller ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			return true
		elseif IsZombies() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			OpenSystemOverlay( self, menu, controller, "CustomMutationsNotification" ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsZombies() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			OpenCustomGamesLobby( menu, controller ) --[[ @ 0]]
			return true
		elseif not IsZombies() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			OpenSystemOverlay( self, menu, controller, "CustomGamesNotification" ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsZombies() and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsZombies() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsZombies() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not IsZombies() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( CustomGamesButton ) --[[ @ 0]]
	self.CustomGamesButton = CustomGamesButton --[[ @ 0]]
	
	DirectorLobbyPoseMembers = CoD.DirectorLobbyPoseMembers.new( f1_arg0, f1_arg1, 0.5, 1.5, -960, -960, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( DirectorLobbyPoseMembers ) --[[ @ 0]]
	self.DirectorLobbyPoseMembers = DirectorLobbyPoseMembers --[[ @ 0]]
	
	CommonHeader = CoD.CommonHeader.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyMainMode", function ( model )
		local f45_local0 = model:get() --[[ @ 0]]
		if f45_local0 ~= nil then
			CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.DirectorUtility.ConvertLobbyMainModeToModeString( f45_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyTitle", function ( model )
		local f46_local0 = model:get() --[[ @ 0]]
		if f46_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f46_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	DirectorLeaderActivitySelect = CoD.DirectorLeaderActivitySelect.new( f1_arg0, f1_arg1, 0.5, 0.5, 625, 930, 0, 0, 8, 57 ) --[[ @ 0]]
	DirectorLeaderActivitySelect:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return IsLobbyHostOfCurrentMenu()
			end
		}
	} ) --[[ @ 0]]
	DirectorLeaderActivitySelect:appendEventHandler( "on_session_start", function ( f48_arg0, f48_arg1 )
		f48_arg1.menu = f48_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( DirectorLeaderActivitySelect, f48_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DirectorLeaderActivitySelect:appendEventHandler( "on_session_end", function ( f49_arg0, f49_arg1 )
		f49_arg1.menu = f49_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( DirectorLeaderActivitySelect, f49_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local QuickPlay = DirectorLeaderActivitySelect --[[ @ 0]]
	local DirectorMapGameTypeAndDifficulty = DirectorLeaderActivitySelect.subscribeToModel --[[ @ 0]]
	local MapAndGameType = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty( QuickPlay, MapAndGameType["lobbyRoot.lobbyNav"], function ( f50_arg0 )
		f1_arg0:updateElementState( DirectorLeaderActivitySelect, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f50_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickPlay = DirectorLeaderActivitySelect --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty = DirectorLeaderActivitySelect.subscribeToModel --[[ @ 0]]
	MapAndGameType = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty( QuickPlay, MapAndGameType["lobbyRoot.gameClient.update"], function ( f51_arg0 )
		f1_arg0:updateElementState( DirectorLeaderActivitySelect, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f51_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickPlay = DirectorLeaderActivitySelect --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty = DirectorLeaderActivitySelect.subscribeToModel --[[ @ 0]]
	MapAndGameType = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty( QuickPlay, MapAndGameType["lobbyRoot.privateClient.update"], function ( f52_arg0 )
		f1_arg0:updateElementState( DirectorLeaderActivitySelect, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f52_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorLeaderActivitySelect:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DirectorLeaderActivitySelect ) --[[ @ 0]]
	self.DirectorLeaderActivitySelect = DirectorLeaderActivitySelect --[[ @ 0]]
	
	DirectorMapGameTypeAndDifficulty = CoD.DirectorMapGameTypeAndDifficulty.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -368, -188 ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:setAlpha( 0 ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2BC441E8EF98063C" ) ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1C95DCE378B96DFF" ) ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image = function ( f53_arg0 )
		local f53_local0 = f53_arg0:get() --[[ @ 0]]
		if f53_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToZMPlaylistImage( f53_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath = function ()
		local f54_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f54_local0 = f54_local0.playlistId --[[ @ 0]]
		if f54_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image( f54_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image = function ( f55_arg0 )
		local f55_local0 = f55_arg0:get() --[[ @ 0]]
		if f55_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToZMPlaylistDifficulty( f55_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image_FullPath = function ()
		local f56_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f56_local0 = f56_local0.playlistId --[[ @ 0]]
		if f56_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image( f56_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc = function ( f57_arg0 )
		local f57_local0 = f57_arg0:get() --[[ @ 0]]
		if f57_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.DirectorUtility.PlaylistIDToZMPlaylistSubtitle( f57_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc_FullPath = function ()
		local f58_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f58_local0 = f58_local0.playlistId --[[ @ 0]]
		if f58_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc( f58_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title = function ( f59_arg0 )
		local f59_local0 = f59_arg0:get() --[[ @ 0]]
		if f59_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.DirectorUtility.PlaylistIDToZMPlaylistName( f59_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath = function ()
		local f60_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f60_local0 = f60_local0.playlistId --[[ @ 0]]
		if f60_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title( f60_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:appendEventHandler( "on_session_start", function ( f61_arg0, f61_arg1 )
		f61_arg1.menu = f61_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f61_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:appendEventHandler( "on_session_end", function ( f62_arg0, f62_arg1 )
		f62_arg1.menu = f62_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f62_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MapAndGameType = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	QuickPlay = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	QuickPlay( MapAndGameType, f1_local14["lobbyRoot.lobbyNav"], function ( f63_arg0, f63_arg1 )
		CoD.Menu.UpdateButtonShownState( f63_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MapAndGameType = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	QuickPlay = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local14 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	QuickPlay( MapAndGameType, f1_local14["lobbyRoot.gameClient.update"], function ( f64_arg0, f64_arg1 )
		CoD.Menu.UpdateButtonShownState( f64_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MapAndGameType = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	QuickPlay = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local14 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	QuickPlay( MapAndGameType, f1_local14["lobbyRoot.privateClient.update"], function ( f65_arg0, f65_arg1 )
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:registerEventHandler( "gain_focus", function ( element, event )
		local f66_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f66_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f66_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f66_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DirectorMapGameTypeAndDifficulty, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsLobbyHostOfCurrentMenu() and IsZombies() then
			CoD.LobbyUtility.SetLeaderActivityAndOpenOverlayNoDeps( self, controller, CoD.LobbyUtility.LeaderActivity.CHOOSING_MAP, "DirectorGamemodeSelectionZM" ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsLobbyHostOfCurrentMenu() and IsZombies() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( DirectorMapGameTypeAndDifficulty ) --[[ @ 0]]
	self.DirectorMapGameTypeAndDifficulty = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	
	QuickPlay = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -512, -443 ) --[[ @ 0]]
	QuickPlay:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "lobbyRoot.lobbyList.playerCount", 1 ) and CoD.ModelUtility.IsGlobalModelValueTrue( "ZMLobbyExclusions.ShowTutorialQuickPlay" )
			end
		}
	} ) --[[ @ 0]]
	QuickPlay:appendEventHandler( "on_session_start", function ( f70_arg0, f70_arg1 )
		f70_arg1.menu = f70_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( QuickPlay, f70_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	QuickPlay:appendEventHandler( "on_session_end", function ( f71_arg0, f71_arg1 )
		f71_arg1.menu = f71_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( QuickPlay, f71_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	local f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["lobbyRoot.lobbyNav"], function ( f72_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f72_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["lobbyRoot.gameClient.update"], function ( f73_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f73_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["lobbyRoot.privateClient.update"], function ( f74_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f74_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15.offlineScreenState, function ( f75_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f75_arg0:get(),
			modelName = "offlineScreenState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["lobbyRoot.lobbyList.playerCount"], function ( f76_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f76_arg0:get(),
			modelName = "lobbyRoot.lobbyList.playerCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["ZMLobbyExclusions.ShowTutorialQuickPlay"], function ( f77_arg0 )
		f1_arg0:updateElementState( QuickPlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f77_arg0:get(),
			modelName = "ZMLobbyExclusions.ShowTutorialQuickPlay"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickPlay:setAlpha( 0 ) --[[ @ 0]]
	QuickPlay.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"zmui/play_ztutorial" ) ) --[[ @ 0]]
	QuickPlay.DirectorSelectButtonMiniInternal.MiddleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	QuickPlay.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"zmui/play_ztutorial" ) ) --[[ @ 0]]
	QuickPlay.DirectorSelectButtonMiniInternal.MiddleTextFocus:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["lobbyRoot.lobbyList.playerCount"], function ( f78_arg0, f78_arg1 )
		CoD.Menu.UpdateButtonShownState( f78_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = QuickPlay --[[ @ 0]]
	MapAndGameType = QuickPlay.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	MapAndGameType( f1_local14, f1_local15["ZMLobbyExclusions.ShowTutorialQuickPlay"], function ( f79_arg0, f79_arg1 )
		CoD.Menu.UpdateButtonShownState( f79_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickPlay:registerEventHandler( "gain_focus", function ( element, event )
		local f80_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f80_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f80_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f80_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( QuickPlay, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalModelValueEqualTo( "lobbyRoot.lobbyList.playerCount", 1 ) and CoD.ModelUtility.IsGlobalModelValueTrue( "ZMLobbyExclusions.ShowTutorialQuickPlay" ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.ZombieUtility.QuickPlayPregame( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalModelValueEqualTo( "lobbyRoot.lobbyList.playerCount", 1 ) and CoD.ModelUtility.IsGlobalModelValueTrue( "ZMLobbyExclusions.ShowTutorialQuickPlay" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_3AC3B80C833B60E1", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( QuickPlay ) --[[ @ 0]]
	self.QuickPlay = QuickPlay --[[ @ 0]]
	
	MapAndGameType = CoD.DirectorMapAndGameTypeContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -368, -188 ) --[[ @ 0]]
	MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.GamemodeIcon:setImage( RegisterImage( @"blacktransparent" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2C79EA24AB1A2BA" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5890976738B1D859" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5890976738B1D859" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image = function ( f83_arg0 )
		local f83_local0 = f83_arg0:get() --[[ @ 0]]
		if f83_local0 ~= nil then
			MapAndGameType.DirectorMapAndGameInternal.MapImage:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToPlaylistImageTileSideInfo( f83_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath = function ()
		local f84_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f84_local0 = f84_local0.playlistId --[[ @ 0]]
		if f84_local0 then
			MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image( f84_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title = function ( f85_arg0 )
		local f85_local0 = f85_arg0:get() --[[ @ 0]]
		if f85_local0 ~= nil then
			MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle:setText( LocalizeToUpperString( CoD.DirectorUtility.PlaylistIDToPlaylistName( f85_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath = function ()
		local f86_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f86_local0 = f86_local0.playlistId --[[ @ 0]]
		if f86_local0 then
			MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title( f86_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_local15 = MapAndGameType --[[ @ 0]]
	f1_local14 = MapAndGameType.subscribeToModel --[[ @ 0]]
	local f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNav"], function ( f87_arg0, f87_arg1 )
		CoD.Menu.UpdateButtonShownState( f87_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = MapAndGameType --[[ @ 0]]
	f1_local14 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.privateClient.isHost"], function ( f88_arg0, f88_arg1 )
		CoD.Menu.UpdateButtonShownState( f88_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = MapAndGameType --[[ @ 0]]
	f1_local14 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.gameClient.isHost"], function ( f89_arg0, f89_arg1 )
		CoD.Menu.UpdateButtonShownState( f89_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MapAndGameType:registerEventHandler( "gain_focus", function ( element, event )
		local f90_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f90_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f90_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f90_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MapAndGameType, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsZombies() and IsPartyLeader( controller ) then
			CoD.DirectorUtility.DirectorOpenOverlayWithCurrentMenuMode( menu, controller, "DirectorFindGame" ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsZombies() and IsPartyLeader( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( MapAndGameType ) --[[ @ 0]]
	self.MapAndGameType = MapAndGameType --[[ @ 0]]
	
	f1_local15 = CustomGamesButton --[[ @ 0]]
	f1_local14 = CustomGamesButton.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNav"], CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference ) --[[ @ 0]]
	f1_local15 = CustomGamesButton --[[ @ 0]]
	f1_local14 = CustomGamesButton.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNav"], CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String ) --[[ @ 0]]
	f1_local15 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local14 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath ) --[[ @ 0]]
	f1_local15 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local14 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image_FullPath ) --[[ @ 0]]
	f1_local15 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local14 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc_FullPath ) --[[ @ 0]]
	f1_local15 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local14 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath ) --[[ @ 0]]
	f1_local15 = MapAndGameType --[[ @ 0]]
	f1_local14 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath ) --[[ @ 0]]
	f1_local15 = MapAndGameType --[[ @ 0]]
	f1_local14 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNetworkMode"], MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ZM_isPC",
			condition = function ( menu, element, event )
				return IsZombies() and IsPC()
			end
		},
		{
			stateName = "ZM",
			condition = function ( menu, element, event )
				return IsZombies()
			end
		},
		{
			stateName = "IsPC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local14 = self.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local15, f1_local16["lobbyRoot.lobbyNav"], function ( f96_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f96_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f97_arg2, f97_arg3, f97_arg4 )
		if IsZombies() and IsLobbyHostOfCurrentMenu() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.ZMLobbyButtons ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		elseif IsLobbyHostOfCurrentMenu() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.FindMatchButton ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		elseif not IsLobbyHostOfCurrentMenu() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.HomeOrPlayList ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "gameClientDataUpdate", function ( model )
		local f98_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "CharacterSelection", "clientUpdated", function ( model )
		local f99_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyNav", function ( model )
		local f100_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) and not IsLobbyHostOfCurrentMenu() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.HomeOrPlayList ) --[[ @ 0]]
			SetFocusToElement( self, "HomeOrPlayList", f1_arg1 ) --[[ @ 0]]
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		elseif CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "lobbyRoot.lastNavigationAction", LuaEnum.UI.DIRECTOR_ONLINE_MP_PREGAME ) and IsLobbyHostOfCurrentMenu() then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.FindMatchButton ) --[[ @ 0]]
		elseif CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
			CoD.FreeCursorUtility.RetriggerCursorPosition( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		pckeyboardNavigationRedirector2.id = "pckeyboardNavigationRedirector2" --[[ @ 0]]
	end
	if CoD.isPC then
		pckeyboardNavigationRedirector.id = "pckeyboardNavigationRedirector" --[[ @ 0]]
	end
	ZMLobbyButtons.id = "ZMLobbyButtons" --[[ @ 0]]
	FindMatchButton.id = "FindMatchButton" --[[ @ 0]]
	CustomGamesButton.id = "CustomGamesButton" --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.id = "DirectorMapGameTypeAndDifficulty" --[[ @ 0]]
	QuickPlay.id = "QuickPlay" --[[ @ 0]]
	MapAndGameType.id = "MapAndGameType" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local14 = self --[[ @ 0]]
	f1_local14 = pckeyboardNavigationRedirector2 --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetAsRedirectItem( f1_local14 ) --[[ @ 0]]
		CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.down, f1_local14, self.Loadouts ) --[[ @ 0]]
	end
	f1_local14 = pckeyboardNavigationRedirector --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetAsRedirectItem( f1_local14 ) --[[ @ 0]]
		CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local14, self.Loadouts ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.directorPregame.__resetProperties = function ( f101_arg0 )
	f101_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
	f101_arg0.FindMatchButton:completeAnimation() --[[ @ 0]]
	f101_arg0.ZMLobbyButtons:completeAnimation() --[[ @ 0]]
	f101_arg0.DirectorMapGameTypeAndDifficulty:completeAnimation() --[[ @ 0]]
	f101_arg0.DirectorLobbyPoseMembers:completeAnimation() --[[ @ 0]]
	f101_arg0.QuickPlay:completeAnimation() --[[ @ 0]]
	f101_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
	f101_arg0.FindMatchButton:setAlpha( 1 ) --[[ @ 0]]
	f101_arg0.ZMLobbyButtons:setAlpha( 0 ) --[[ @ 0]]
	f101_arg0.DirectorMapGameTypeAndDifficulty:setAlpha( 0 ) --[[ @ 0]]
	f101_arg0.DirectorLobbyPoseMembers:setAlpha( 1 ) --[[ @ 0]]
	f101_arg0.QuickPlay:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.directorPregame.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f102_arg0, f102_arg1 )
			f102_arg0:__resetProperties() --[[ @ 0]]
			f102_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f102_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f102_arg0.MapAndGameType:setAlpha( 1 ) --[[ @ 0]]
			f102_arg0.clipFinished( f102_arg0.MapAndGameType ) --[[ @ 0]]
		end
	},
	ZM_isPC = {
		DefaultClip = function ( f103_arg0, f103_arg1 )
			f103_arg0:__resetProperties() --[[ @ 0]]
			f103_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f103_arg0.ZMLobbyButtons:completeAnimation() --[[ @ 0]]
			f103_arg0.ZMLobbyButtons:setAlpha( 1 ) --[[ @ 0]]
			f103_arg0.clipFinished( f103_arg0.ZMLobbyButtons ) --[[ @ 0]]
			f103_arg0.FindMatchButton:completeAnimation() --[[ @ 0]]
			f103_arg0.FindMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f103_arg0.clipFinished( f103_arg0.FindMatchButton ) --[[ @ 0]]
			f103_arg0.DirectorLobbyPoseMembers:completeAnimation() --[[ @ 0]]
			f103_arg0.DirectorLobbyPoseMembers:setAlpha( 0 ) --[[ @ 0]]
			f103_arg0.clipFinished( f103_arg0.DirectorLobbyPoseMembers ) --[[ @ 0]]
			f103_arg0.DirectorMapGameTypeAndDifficulty:completeAnimation() --[[ @ 0]]
			f103_arg0.DirectorMapGameTypeAndDifficulty:setAlpha( 1 ) --[[ @ 0]]
			f103_arg0.clipFinished( f103_arg0.DirectorMapGameTypeAndDifficulty ) --[[ @ 0]]
			f103_arg0.QuickPlay:completeAnimation() --[[ @ 0]]
			f103_arg0.QuickPlay:setAlpha( 1 ) --[[ @ 0]]
			f103_arg0.clipFinished( f103_arg0.QuickPlay ) --[[ @ 0]]
		end
	},
	ZM = {
		DefaultClip = function ( f104_arg0, f104_arg1 )
			f104_arg0:__resetProperties() --[[ @ 0]]
			f104_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f104_arg0.ZMLobbyButtons:completeAnimation() --[[ @ 0]]
			f104_arg0.ZMLobbyButtons:setAlpha( 1 ) --[[ @ 0]]
			f104_arg0.clipFinished( f104_arg0.ZMLobbyButtons ) --[[ @ 0]]
			f104_arg0.FindMatchButton:completeAnimation() --[[ @ 0]]
			f104_arg0.FindMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f104_arg0.clipFinished( f104_arg0.FindMatchButton ) --[[ @ 0]]
			f104_arg0.DirectorLobbyPoseMembers:completeAnimation() --[[ @ 0]]
			f104_arg0.DirectorLobbyPoseMembers:setAlpha( 0 ) --[[ @ 0]]
			f104_arg0.clipFinished( f104_arg0.DirectorLobbyPoseMembers ) --[[ @ 0]]
			f104_arg0.DirectorMapGameTypeAndDifficulty:completeAnimation() --[[ @ 0]]
			f104_arg0.DirectorMapGameTypeAndDifficulty:setAlpha( 1 ) --[[ @ 0]]
			f104_arg0.clipFinished( f104_arg0.DirectorMapGameTypeAndDifficulty ) --[[ @ 0]]
			f104_arg0.QuickPlay:completeAnimation() --[[ @ 0]]
			f104_arg0.QuickPlay:setAlpha( 1 ) --[[ @ 0]]
			f104_arg0.clipFinished( f104_arg0.QuickPlay ) --[[ @ 0]]
		end
	},
	IsPC = {
		DefaultClip = function ( f105_arg0, f105_arg1 )
			f105_arg0:__resetProperties() --[[ @ 0]]
			f105_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f105_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f105_arg0.MapAndGameType:setAlpha( 1 ) --[[ @ 0]]
			f105_arg0.clipFinished( f105_arg0.MapAndGameType ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.directorPregame.__onClose = function ( f106_arg0 )
	f106_arg0.Header:close() --[[ @ 0]]
	f106_arg0.pckeyboardNavigationRedirector2:close() --[[ @ 0]]
	f106_arg0.pckeyboardNavigationRedirector:close() --[[ @ 0]]
	f106_arg0.ZMLobbyButtons:close() --[[ @ 0]]
	f106_arg0.FindMatchButton:close() --[[ @ 0]]
	f106_arg0.FindMatchMissingDLCErrorTriangle:close() --[[ @ 0]]
	f106_arg0.CustomGamesButton:close() --[[ @ 0]]
	f106_arg0.DirectorLobbyPoseMembers:close() --[[ @ 0]]
	f106_arg0.CommonHeader:close() --[[ @ 0]]
	f106_arg0.DirectorLeaderActivitySelect:close() --[[ @ 0]]
	f106_arg0.DirectorMapGameTypeAndDifficulty:close() --[[ @ 0]]
	f106_arg0.QuickPlay:close() --[[ @ 0]]
	f106_arg0.MapAndGameType:close() --[[ @ 0]]
end
 --[[ @ 0]]
