-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/pc/utility/textbacking" ) --[[ @ 0]]
require( "x64:5aaed9cd2ddca5ff" ) --[[ @ 0]]

CoD.HUD_VehiclePrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.HUD_VehiclePrompt.__defaultWidth = 95 --[[ @ 0]]
CoD.HUD_VehiclePrompt.__defaultHeight = 65 --[[ @ 0]]
CoD.HUD_VehiclePrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.HUD_VehiclePrompt ) --[[ @ 0]]
	self.id = "HUD_VehiclePrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local label = LUI.UIText.new( -0.04, 1.04, 0, 0, 1, 1, -13, -3 ) --[[ @ 0]]
	label:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	label:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	label:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	label:setBackingType( 1 ) --[[ @ 0]]
	label:setBackingWidget( CoD.TextBacking, f1_arg0, f1_arg1 ) --[[ @ 0]]
	label:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	label:setBackingXPadding( 2 ) --[[ @ 0]]
	label:setBackingYPadding( 1 ) --[[ @ 0]]
	label._backingElement.Blur:setAlpha( 1 ) --[[ @ 0]]
	label._backingElement.Backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	label:linkToElementModel( self, "text", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			label:setText( LocalizeToUpperString( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( label ) --[[ @ 0]]
	self.label = label --[[ @ 0]]
	
	local HUDVehiclePromptContainer = CoD.HUD_VehiclePrompt_Container.new( f1_arg0, f1_arg1, 0, 1, 0, 0, -0.12, 0.88, 7, -7 ) --[[ @ 0]]
	HUDVehiclePromptContainer:linkToElementModel( self, "bind", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			HUDVehiclePromptContainer.KBMText:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HUDVehiclePromptContainer ) --[[ @ 0]]
	self.HUDVehiclePromptContainer = HUDVehiclePromptContainer --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "text" ) and CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "bind" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "text", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "bind", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f7_arg2, f7_arg3, f7_arg4 )
		if IsSelfInState( self, "Visible" ) then
			ShowWidget( element ) --[[ @ 0]]
		else
			HideWidget( element ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.HUD_VehiclePrompt.__resetProperties = function ( f8_arg0 )
	f8_arg0.label:completeAnimation() --[[ @ 0]]
	f8_arg0.HUDVehiclePromptContainer:completeAnimation() --[[ @ 0]]
	f8_arg0.label:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.HUDVehiclePromptContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HUD_VehiclePrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f9_arg0.label:completeAnimation() --[[ @ 0]]
			f9_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.label ) --[[ @ 0]]
			f9_arg0.HUDVehiclePromptContainer:completeAnimation() --[[ @ 0]]
			f9_arg0.HUDVehiclePromptContainer:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.HUDVehiclePromptContainer ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f10_arg0.label:completeAnimation() --[[ @ 0]]
			f10_arg0.label:setAlpha( 1 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.label ) --[[ @ 0]]
			f10_arg0.HUDVehiclePromptContainer:completeAnimation() --[[ @ 0]]
			f10_arg0.HUDVehiclePromptContainer:setAlpha( 1 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.HUDVehiclePromptContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.HUD_VehiclePrompt.__onClose = function ( f11_arg0 )
	f11_arg0.label:close() --[[ @ 0]]
	f11_arg0.HUDVehiclePromptContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
