-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:52b0eecee2c62c9f" ) --[[ @ 0]]
require( "x64:fa454f551aa4a2f" ) --[[ @ 0]]
require( "x64:32b3a36f75bb6e0e" ) --[[ @ 0]]

CoD.PC_Prestige_ScrollbarWZ = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.__defaultWidth = 1215 --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.__defaultHeight = 528 --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PC_Prestige_ScrollbarWZ ) --[[ @ 0]]
	self.id = "PC_Prestige_ScrollbarWZ" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backgroundSlider = LUI.UIImage.new( 0.5, 0.5, -529.5, 529.5, 1, 1, -9, -7 ) --[[ @ 0]]
	backgroundSlider:setRGB( 0.38, 0.38, 0.38 ) --[[ @ 0]]
	backgroundSlider:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( backgroundSlider ) --[[ @ 0]]
	self.backgroundSlider = backgroundSlider --[[ @ 0]]
	
	local slider = CoD.PC_Prestige_Slider.new( f1_arg0, f1_arg1, 0.5, 0.5, -551, 551, 1, 1, -16, 0 ) --[[ @ 0]]
	self:addElement( slider ) --[[ @ 0]]
	self.slider = slider --[[ @ 0]]
	
	local leftArrow = CoD.PC_Prestige_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -553, -535, 1, 1, -18, 0 ) --[[ @ 0]]
	leftArrow:setZRot( 90 ) --[[ @ 0]]
	leftArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( leftArrow, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.PrestigeUtility.UpdateCurrentTargetIndex( self, controller, menu, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( leftArrow ) --[[ @ 0]]
	self.leftArrow = leftArrow --[[ @ 0]]
	
	local rightArrow = CoD.PC_Prestige_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, 535, 553, 1, 1, -18, 0 ) --[[ @ 0]]
	rightArrow:setZRot( 270 ) --[[ @ 0]]
	rightArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( rightArrow, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.PrestigeUtility.UpdateCurrentTargetIndex( self, controller, menu, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( rightArrow ) --[[ @ 0]]
	self.rightArrow = rightArrow --[[ @ 0]]
	
	local PCArrowL = CoD.StartMenu_Options_SettingSliderArrow.new( f1_arg0, f1_arg1, 0, 0, 0, 48, 0, 0, 0, 48 ) --[[ @ 0]]
	PCArrowL:setZRot( 270 ) --[[ @ 0]]
	PCArrowL:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowL, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		PlaySoundAlias( "uin_list_horizontal_generic" ) --[[ @ 0]]
		CoD.PrestigeUtility.UpdateCurrentTargetIndex( self, controller, menu, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowL ) --[[ @ 0]]
	self.PCArrowL = PCArrowL --[[ @ 0]]
	
	local PCArrowR = CoD.StartMenu_Options_SettingSliderArrow.new( f1_arg0, f1_arg1, 1, 1, -48, 0, 0, 0, 0, 48 ) --[[ @ 0]]
	PCArrowR:mergeStateConditions( {
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return IsMenuInState( menu, "AtRight" )
			end
		}
	} ) --[[ @ 0]]
	PCArrowR:setZRot( 90 ) --[[ @ 0]]
	PCArrowR:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowR, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		PlaySoundAlias( "uin_list_horizontal_generic" ) --[[ @ 0]]
		CoD.PrestigeUtility.UpdateCurrentTargetIndex( self, controller, menu, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowR ) --[[ @ 0]]
	self.PCArrowR = PCArrowR --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f15_arg2, f15_arg3, f15_arg4 )
		if IsSelfInState( self, "AtLeft" ) then
			MakeElementNotFocusable( self, "PCArrowL", controller ) --[[ @ 0]]
			MakeElementNotFocusable( self, "leftArrow", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "PCArrowR", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "rightArrow", controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "AtRight" ) then
			MakeElementNotFocusable( self, "PCArrowR", controller ) --[[ @ 0]]
			MakeElementNotFocusable( self, "rightArrow", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "leftArrow", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "PCArrowL", controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "AtLeftAndRight" ) then
			MakeElementNotFocusable( self, "PCArrowR", controller ) --[[ @ 0]]
			MakeElementNotFocusable( self, "rightArrow", controller ) --[[ @ 0]]
			MakeElementNotFocusable( self, "leftArrow", controller ) --[[ @ 0]]
			MakeElementNotFocusable( self, "PCArrowL", controller ) --[[ @ 0]]
		elseif IsInDefaultState( self ) then
			MakeElementFocusable( self, "PCArrowR", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "rightArrow", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "leftArrow", controller ) --[[ @ 0]]
			MakeElementFocusable( self, "PCArrowL", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	slider.id = "slider" --[[ @ 0]]
	leftArrow.id = "leftArrow" --[[ @ 0]]
	rightArrow.id = "rightArrow" --[[ @ 0]]
	PCArrowL.id = "PCArrowL" --[[ @ 0]]
	PCArrowR.id = "PCArrowR" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.__resetProperties = function ( f16_arg0 )
	f16_arg0.rightArrow:completeAnimation() --[[ @ 0]]
	f16_arg0.PCArrowR:completeAnimation() --[[ @ 0]]
	f16_arg0.leftArrow:completeAnimation() --[[ @ 0]]
	f16_arg0.PCArrowL:completeAnimation() --[[ @ 0]]
	f16_arg0.rightArrow:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.PCArrowR:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.leftArrow:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.PCArrowL:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	AtRight = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.rightArrow:completeAnimation() --[[ @ 0]]
			f18_arg0.rightArrow:setAlpha( 0.05 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.rightArrow ) --[[ @ 0]]
			f18_arg0.PCArrowR:completeAnimation() --[[ @ 0]]
			f18_arg0.PCArrowR:setAlpha( 0.02 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.PCArrowR ) --[[ @ 0]]
		end
	},
	AtLeftAndRight = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f19_arg0.leftArrow:completeAnimation() --[[ @ 0]]
			f19_arg0.leftArrow:setAlpha( 0.05 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.leftArrow ) --[[ @ 0]]
			f19_arg0.rightArrow:completeAnimation() --[[ @ 0]]
			f19_arg0.rightArrow:setAlpha( 0.05 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.rightArrow ) --[[ @ 0]]
			f19_arg0.PCArrowL:completeAnimation() --[[ @ 0]]
			f19_arg0.PCArrowL:setAlpha( 0.02 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.PCArrowL ) --[[ @ 0]]
			f19_arg0.PCArrowR:completeAnimation() --[[ @ 0]]
			f19_arg0.PCArrowR:setAlpha( 0.02 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.PCArrowR ) --[[ @ 0]]
		end
	},
	AtLeft = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f20_arg0.leftArrow:completeAnimation() --[[ @ 0]]
			f20_arg0.leftArrow:setAlpha( 0.05 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.leftArrow ) --[[ @ 0]]
			f20_arg0.PCArrowL:completeAnimation() --[[ @ 0]]
			f20_arg0.PCArrowL:setAlpha( 0.02 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.PCArrowL ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PC_Prestige_ScrollbarWZ.__onClose = function ( f21_arg0 )
	f21_arg0.slider:close() --[[ @ 0]]
	f21_arg0.leftArrow:close() --[[ @ 0]]
	f21_arg0.rightArrow:close() --[[ @ 0]]
	f21_arg0.PCArrowL:close() --[[ @ 0]]
	f21_arg0.PCArrowR:close() --[[ @ 0]]
end
 --[[ @ 0]]
