-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
CoD.AbilityHoldToActivateZM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AbilityHoldToActivateZM.__defaultWidth = 200 --[[ @ 0]]
CoD.AbilityHoldToActivateZM.__defaultHeight = 49 --[[ @ 0]]
CoD.AbilityHoldToActivateZM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AbilityHoldToActivateZM ) --[[ @ 0]]
	self.id = "AbilityHoldToActivateZM" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Arrow = LUI.UIImage.new( 0.5, 0.5, -4, 4, 0, 0, 38, 46 ) --[[ @ 0]]
	Arrow:setRGB( 0.06, 0.06, 0.06 ) --[[ @ 0]]
	Arrow:setAlpha( 0.94 ) --[[ @ 0]]
	Arrow:setZRot( -90 ) --[[ @ 0]]
	Arrow:setImage( RegisterImage( @"uie_ui_hud_common_triangle" ) ) --[[ @ 0]]
	self:addElement( Arrow ) --[[ @ 0]]
	self.Arrow = Arrow --[[ @ 0]]
	
	local ProgressBacking = LUI.UIImage.new( 0.5, 0.5, -33.5, 33.5, 0, 0, 30.5, 39.5 ) --[[ @ 0]]
	ProgressBacking:setRGB( 0.06, 0.06, 0.06 ) --[[ @ 0]]
	ProgressBacking:setAlpha( 0.94 ) --[[ @ 0]]
	self:addElement( ProgressBacking ) --[[ @ 0]]
	self.ProgressBacking = ProgressBacking --[[ @ 0]]
	
	local HeroAbilityHoldString = LUI.UIText.new( 0, 0, 0, 200, 0, 0, 11, 29 ) --[[ @ 0]]
	HeroAbilityHoldString:setText( CoD.BaseUtility.AlreadyLocalized( "HOLD" ) ) --[[ @ 0]]
	HeroAbilityHoldString:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	HeroAbilityHoldString:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	HeroAbilityHoldString:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldString ) --[[ @ 0]]
	self.HeroAbilityHoldString = HeroAbilityHoldString --[[ @ 0]]
	
	local empty = LUI.UIImage.new( 0, 0, 69, 131, 0, 0, 33.5, 36.5 ) --[[ @ 0]]
	empty:setRGB( ColorSet.T8__SLATE.r, ColorSet.T8__SLATE.g, ColorSet.T8__SLATE.b ) --[[ @ 0]]
	empty:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( empty ) --[[ @ 0]]
	self.empty = empty --[[ @ 0]]
	
	local ProgressFillManual = LUI.UIImage.new( 0.5, 0.5, -31.5, 31.5, 0, 0, 32.5, 37.5 ) --[[ @ 0]]
	ProgressFillManual:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	ProgressFillManual:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	ProgressFillManual:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	ProgressFillManual:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	ProgressFillManual:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ProgressFillManual:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	ProgressFillManual:subscribeToGlobalModel( f1_arg1, "HUDItems", "abilityDelayProgress", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ProgressFillManual:setShaderVector( 0, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressFillManual ) --[[ @ 0]]
	self.ProgressFillManual = ProgressFillManual --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NonHoldToActivate",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "hudItems.abilityHoldToActivate", 0 )
			end
		},
		{
			stateName = "VisibleCharged",
			condition = function ( menu, element, event )
				local f4_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 1 ) --[[ @ 0]]
				if f4_local0 then
					f4_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.abilityHoldToActivate", 1 ) --[[ @ 0]]
					if f4_local0 then
						f4_local0 = CoD.HUDUtility.GadgetHasHoldPrompt( element, f1_arg1 ) --[[ @ 0]]
						if f4_local0 then
							if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) then
								f4_local0 = not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
							else
								f4_local0 = false --[[ @ 0]]
							end
						end
					end
				end
				return f4_local0
			end
		},
		{
			stateName = "VisibleInUse",
			condition = function ( menu, element, event )
				local f5_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.abilityHoldToActivate", 2 ) --[[ @ 0]]
				if f5_local0 then
					if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 1 ) then
						f5_local0 = CoD.HUDUtility.GadgetHasHoldPrompt( element, f1_arg1 ) --[[ @ 0]]
						if f5_local0 then
							if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) then
								f5_local0 = not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
							else
								f5_local0 = false --[[ @ 0]]
							end
						else
							return f5_local0
						end
					end
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.abilityHoldToActivate"], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "hudItems.abilityHoldToActivate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AbilityHoldToActivateZM.__resetProperties = function ( f11_arg0 )
	f11_arg0.ProgressFillManual:completeAnimation() --[[ @ 0]]
	f11_arg0.ProgressBacking:completeAnimation() --[[ @ 0]]
	f11_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
	f11_arg0.Arrow:completeAnimation() --[[ @ 0]]
	f11_arg0.empty:completeAnimation() --[[ @ 0]]
	f11_arg0.ProgressFillManual:setAlpha( 1 ) --[[ @ 0]]
	f11_arg0.ProgressBacking:setAlpha( 0.94 ) --[[ @ 0]]
	f11_arg0.HeroAbilityHoldString:setAlpha( 1 ) --[[ @ 0]]
	f11_arg0.HeroAbilityHoldString:setText( CoD.BaseUtility.AlreadyLocalized( "HOLD" ) ) --[[ @ 0]]
	f11_arg0.Arrow:setAlpha( 0.94 ) --[[ @ 0]]
	f11_arg0.empty:setAlpha( 0.2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AbilityHoldToActivateZM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f12_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f12_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Arrow ) --[[ @ 0]]
			f12_arg0.ProgressBacking:completeAnimation() --[[ @ 0]]
			f12_arg0.ProgressBacking:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.ProgressBacking ) --[[ @ 0]]
			f12_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
			f12_arg0.HeroAbilityHoldString:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.HeroAbilityHoldString ) --[[ @ 0]]
			f12_arg0.empty:completeAnimation() --[[ @ 0]]
			f12_arg0.empty:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.empty ) --[[ @ 0]]
			f12_arg0.ProgressFillManual:completeAnimation() --[[ @ 0]]
			f12_arg0.ProgressFillManual:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.ProgressFillManual ) --[[ @ 0]]
		end
	},
	NonHoldToActivate = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f13_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f13_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.Arrow ) --[[ @ 0]]
			f13_arg0.ProgressBacking:completeAnimation() --[[ @ 0]]
			f13_arg0.ProgressBacking:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.ProgressBacking ) --[[ @ 0]]
			f13_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
			f13_arg0.HeroAbilityHoldString:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.HeroAbilityHoldString ) --[[ @ 0]]
			f13_arg0.empty:completeAnimation() --[[ @ 0]]
			f13_arg0.empty:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.empty ) --[[ @ 0]]
			f13_arg0.ProgressFillManual:completeAnimation() --[[ @ 0]]
			f13_arg0.ProgressFillManual:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.ProgressFillManual ) --[[ @ 0]]
		end
	},
	VisibleCharged = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	VisibleInUse = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f15_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
			f15_arg0.HeroAbilityHoldString:setText( CoD.BaseUtility.AlreadyLocalized( "DESTROY" ) ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.HeroAbilityHoldString ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AbilityHoldToActivateZM.__onClose = function ( f16_arg0 )
	f16_arg0.ProgressFillManual:close() --[[ @ 0]]
end
 --[[ @ 0]]
