-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/buttonprogressringcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/keyprompt" ) --[[ @ 0]]

CoD.WarzoneQuickInventoryPromptBacking = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.__defaultWidth = 150 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.__defaultHeight = 36 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneQuickInventoryPromptBacking ) --[[ @ 0]]
	self.id = "WarzoneQuickInventoryPromptBacking" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local keyPrompt = nil --[[ @ 0]]
	
	keyPrompt = CoD.KeyPrompt.new( f1_arg0, f1_arg1, 0, 0, 0, 36, 0, 0, 0, 36 ) --[[ @ 0]]
	keyPrompt:setAlpha( 0 ) --[[ @ 0]]
	keyPrompt.keybind:setText( "" ) --[[ @ 0]]
	self:addElement( keyPrompt ) --[[ @ 0]]
	self.keyPrompt = keyPrompt --[[ @ 0]]
	
	local progressRing = CoD.ButtonProgressRingContainer.new( f1_arg0, f1_arg1, 0, 0, -3, 39, 0, 0, -3, 39 ) --[[ @ 0]]
	progressRing:setScale( 0.81, 0.81 ) --[[ @ 0]]
	progressRing:linkToElementModel( self, nil, false, function ( model )
		progressRing:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( progressRing ) --[[ @ 0]]
	self.progressRing = progressRing --[[ @ 0]]
	
	local buttonPromptImage = LUI.UIImage.new( 0, 0, 3, 31, 0, 0, 4, 32 ) --[[ @ 0]]
	buttonPromptImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
	buttonPromptImage:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( buttonPromptImage ) --[[ @ 0]]
	self.buttonPromptImage = buttonPromptImage --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				local f3_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_disable_prompts"] ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = IsGamepad( f1_arg1 ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "Enabled",
			condition = function ( menu, element, event )
				local f4_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_enable_prompts"] ) --[[ @ 0]]
				if f4_local0 then
					f4_local0 = IsGamepad( f1_arg1 ) --[[ @ 0]]
					if f4_local0 then
						f4_local0 = CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] ) --[[ @ 0]]
					end
				end
				return f4_local0
			end
		},
		{
			stateName = "DisabledPC",
			condition = function ( menu, element, event )
				local f5_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_disable_prompts"] ) --[[ @ 0]]
				if f5_local0 then
					if not IsGamepad( f1_arg1 ) and not ShouldHideButtonPromptForPC( element, f1_arg1 ) then
						f5_local0 = CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] ) --[[ @ 0]]
						if f5_local0 then
							f5_local0 = IsPC() --[[ @ 0]]
						end
					else
						f5_local0 = false --[[ @ 0]]
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "EnabledPC",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_enable_prompts"] ) --[[ @ 0]]
				if f6_local0 then
					if not IsGamepad( f1_arg1 ) and not ShouldHideButtonPromptForPC( element, f1_arg1 ) then
						f6_local0 = CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] ) --[[ @ 0]]
						if f6_local0 then
							f6_local0 = IsPC() --[[ @ 0]]
						end
					else
						f6_local0 = false --[[ @ 0]]
					end
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f8_arg0, f8_arg1 )
		f8_arg1.menu = f8_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f8_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local4 = self --[[ @ 0]]
	local f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6.LastInput, function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "flags", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "flags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f11_arg2, f11_arg3, f11_arg4 )
		if IsInDefaultState( self ) and IsMouseOrKeyboard( controller ) then
			DisableMouseButton( self, controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.CloseContextualPromptPC( self ) --[[ @ 0]]
		elseif IsMouseOrKeyboard( controller ) then
			EnableMouseButton( self, controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.OpenContextualPromptPC( self ) --[[ @ 0]]
		elseif IsInDefaultState( self ) and IsGamepad( controller ) then
			DisableMouseButton( self, controller ) --[[ @ 0]]
			HideWidget( self ) --[[ @ 0]]
		elseif IsGamepad( controller ) then
			EnableMouseButton( self, controller ) --[[ @ 0]]
			ShowWidget( self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local5 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetupButtonPromptForPC( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseLocalHeight( self ) --[[ @ 0]]
		CoD.FreeCursorUtility.SetupHideContextualPromptPC( f1_local5, f1_arg1 ) --[[ @ 0]]
	else
		CoD.FreeCursorUtility.UseLocalHeight( self ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.__resetProperties = function ( f12_arg0 )
	f12_arg0.keyPrompt:completeAnimation() --[[ @ 0]]
	f12_arg0.keyPrompt:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Enabled = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	DisabledPC = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f16_arg0.keyPrompt:completeAnimation() --[[ @ 0]]
			f16_arg0.keyPrompt:setAlpha( 0.5 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.keyPrompt ) --[[ @ 0]]
		end
	},
	EnabledPC = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.keyPrompt:completeAnimation() --[[ @ 0]]
			f17_arg0.keyPrompt:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.keyPrompt ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptBacking.__onClose = function ( f18_arg0 )
	f18_arg0.keyPrompt:close() --[[ @ 0]]
	f18_arg0.progressRing:close() --[[ @ 0]]
end
 --[[ @ 0]]
