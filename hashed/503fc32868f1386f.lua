-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:34d398821a441c41" ) --[[ @ 0]]
require( "x64:116a180f17b86d32" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/ground/vehicleground_vignettecontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/mothership/vhud_ms_iris" ) --[[ @ 0]]
require( "x64:8aedb8c71f568d4" ) --[[ @ 0]]

CoD.vhud_attack_helicopter_internal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_attack_helicopter_internal.__defaultWidth = 1920 --[[ @ 0]]
CoD.vhud_attack_helicopter_internal.__defaultHeight = 1080 --[[ @ 0]]
CoD.vhud_attack_helicopter_internal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_attack_helicopter_internal ) --[[ @ 0]]
	self.id = "vhud_attack_helicopter_internal" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local VignetteContainer = CoD.VehicleGround_VignetteContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	VignetteContainer:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( VignetteContainer ) --[[ @ 0]]
	self.VignetteContainer = VignetteContainer --[[ @ 0]]
	
	local VehicleGroundIris = CoD.vhud_ms_Iris.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	VehicleGroundIris:setRGB( 1, 0.35, 0.35 ) --[[ @ 0]]
	VehicleGroundIris:linkToElementModel( self, nil, false, function ( model )
		VehicleGroundIris:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	VehicleGroundIris:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		PlayClipOnElement( self, {
			elementName = "VehicleGroundIris",
			clipName = "StartUp"
		}, f1_arg1 ) --[[ @ 0]]
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( VehicleGroundIris ) --[[ @ 0]]
	self.VehicleGroundIris = VehicleGroundIris --[[ @ 0]]
	
	local reticle = CoD.vhud_attack_helicopter_reticle.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	reticle:linkToElementModel( self, nil, false, function ( model )
		reticle:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( reticle ) --[[ @ 0]]
	self.reticle = reticle --[[ @ 0]]
	
	local dpsVehicleReticle = CoD.vhud_ms_Reticle.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	dpsVehicleReticle:mergeStateConditions( {
		{
			stateName = "Zoom",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "zoomed" )
			end
		}
	} ) --[[ @ 0]]
	dpsVehicleReticle:linkToElementModel( dpsVehicleReticle, "zoomed", true, function ( model )
		f1_arg0:updateElementState( dpsVehicleReticle, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "zoomed"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	dpsVehicleReticle:setRGB( 1, 0.59, 0.59 ) --[[ @ 0]]
	dpsVehicleReticle:setAlpha( 0 ) --[[ @ 0]]
	dpsVehicleReticle:linkToElementModel( self, nil, false, function ( model )
		dpsVehicleReticle:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	dpsVehicleReticle:registerEventHandler( "menu_loaded", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f8_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f8_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		PlayClipOnElement( self, {
			elementName = "dpsVehicleReticle",
			clipName = "StartUp"
		}, f1_arg1 ) --[[ @ 0]]
		if not f8_local0 then
			f8_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( dpsVehicleReticle ) --[[ @ 0]]
	self.dpsVehicleReticle = dpsVehicleReticle --[[ @ 0]]
	
	local ButtonLayout = CoD.vhud_attack_helicopter_button_layout.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	ButtonLayout:linkToElementModel( self, "bindings", false, function ( model )
		ButtonLayout:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ButtonLayout ) --[[ @ 0]]
	self.ButtonLayout = ButtonLayout --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_attack_helicopter_internal.__onClose = function ( f10_arg0 )
	f10_arg0.VignetteContainer:close() --[[ @ 0]]
	f10_arg0.VehicleGroundIris:close() --[[ @ 0]]
	f10_arg0.reticle:close() --[[ @ 0]]
	f10_arg0.dpsVehicleReticle:close() --[[ @ 0]]
	f10_arg0.ButtonLayout:close() --[[ @ 0]]
end
 --[[ @ 0]]
