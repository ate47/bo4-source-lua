-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:4f5fc069b41ddebe" ) --[[ @ 0]]
require( "x64:6418c603e13e58f2" ) --[[ @ 0]]
require( "x64:21b01b9f64de6381" ) --[[ @ 0]]
require( "x64:48a2bfd7fd77a149" ) --[[ @ 0]]

CoD.Demo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Demo.__defaultWidth = 1920 --[[ @ 0]]
CoD.Demo.__defaultHeight = 1080 --[[ @ 0]]
CoD.Demo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Demo ) --[[ @ 0]]
	self.id = "Demo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local emptyFocusableNoCursorUpdate = nil --[[ @ 0]]
	
	emptyFocusableNoCursorUpdate = CoD.emptyFocusableNoCursorUpdate.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	emptyFocusableNoCursorUpdate:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsGamepadOrKeyboardNavigation( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	emptyFocusableNoCursorUpdate:appendEventHandler( "input_source_changed", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( emptyFocusableNoCursorUpdate, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = emptyFocusableNoCursorUpdate --[[ @ 0]]
	local f1_local3 = emptyFocusableNoCursorUpdate.subscribeToModel --[[ @ 0]]
	local DemoContextPanelPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, DemoContextPanelPC.LastInput, function ( f4_arg0 )
		f1_arg0:updateElementState( emptyFocusableNoCursorUpdate, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusableNoCursorUpdate ) --[[ @ 0]]
	self.emptyFocusableNoCursorUpdate = emptyFocusableNoCursorUpdate --[[ @ 0]]
	
	f1_local3 = nil --[[ @ 0]]
	f1_local3 = LUI.UIElement.createFake() --[[ @ 0]]
	self.emptyFocusable = f1_local3 --[[ @ 0]]
	f1_local2 = nil --[[ @ 0]]
	self.DemoContextPanel = LUI.UIElement.createFake() --[[ @ 0]]
	DemoContextPanelPC = nil --[[ @ 0]]
	
	DemoContextPanelPC = CoD.DemoContextPanel.new( f1_arg0, f1_arg1, 0.5, 0.5, -920, -620, 1, 1, -322, -262 ) --[[ @ 0]]
	self:addElement( DemoContextPanelPC ) --[[ @ 0]]
	self.DemoContextPanelPC = DemoContextPanelPC --[[ @ 0]]
	
	local DemoIcons = CoD.DemoIcons.new( f1_arg0, f1_arg1, 0, 0, 516.5, 1373.5, 0, 0, 1022, 1222 ) --[[ @ 0]]
	DemoIcons:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DemoIcons ) --[[ @ 0]]
	self.DemoIcons = DemoIcons --[[ @ 0]]
	
	local f1_local6 = nil --[[ @ 0]]
	f1_local6 = LUI.UIElement.createFake() --[[ @ 0]]
	self.DemoPlaybackControls = f1_local6 --[[ @ 0]]
	local DemoPlaybackControlsPC = nil --[[ @ 0]]
	
	DemoPlaybackControlsPC = CoD.DemoPlaybackControls.new( f1_arg0, f1_arg1, 0.5, 0.5, -375, 375, 1, 1, -332, -196 ) --[[ @ 0]]
	self:addElement( DemoPlaybackControlsPC ) --[[ @ 0]]
	self.DemoPlaybackControlsPC = DemoPlaybackControlsPC --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HideControls",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.drawDemoControls" ) then
					f5_local0 = not IsDemoContextHighlightReelMode() --[[ @ 0]]
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		},
		{
			stateName = "InactiveControls",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "demo.drawDemoControls" ) and CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showChooseModeSidebar" )
			end
		},
		{
			stateName = "ClipPreview",
			condition = function ( menu, element, event )
				return IsDemoClipPreviewRunning() and not IsDemoContextHighlightReelMode()
			end
		},
		{
			stateName = "LightmanColorPicker",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "demo.drawDemoControls" ) and IsInLightmanColorPicker( f1_arg1 )
			end
		},
		{
			stateName = "HighlightReel",
			condition = function ( menu, element, event )
				return IsDemoContextHighlightReelMode()
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.drawDemoControls"], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "demo.drawDemoControls"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.contextMode"], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "demo.contextMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.showChooseModeSidebar"], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "demo.showChooseModeSidebar"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.clipState"], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "demo.clipState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.showLightmanColorPicker"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "demo.showLightmanColorPicker"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["demo.editingLightmanMarker"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "demo.editingLightmanMarker"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.LastInput, function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "input_source_changed", function ( self, event )
		local f18_local0 = nil --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) and IsElementPropertyValue( self, "demoShowMouse", true ) and not CoD.PCUtility.IsCurrentHudOccluded( f1_arg0, f1_arg1 ) then
			EnableMouseLockInputBinding( f1_arg0, f1_arg1, true, true ) --[[ @ 0]]
		end
		if not f18_local0 then
			f18_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.DemoUtility.CrossButtonAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		elseif not IsMouseOrKeyboard( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.DemoUtility.CrossButtonHoldAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		elseif not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.DemoUtility.SquareButtonAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		elseif not IsMouseOrKeyboard( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.DemoUtility.SquareButtonHoldAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		elseif not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) then
			CoD.DemoUtility.TriangleButtonAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) then
			CoD.DemoUtility.CircleButtonAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], "C", function ( element, menu, controller, model )
		CoD.DemoUtility.LeftBumperAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_2493152B20AE4F58"], @"hash_0", nil, "C" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_249A252B20B48936"], "SPACE", function ( element, menu, controller, model )
		CoD.DemoUtility.RightBumperAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_249A252B20B48936"], @"hash_0", nil, "SPACE" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) then
			CoD.DemoUtility.LeftStickAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], "F", function ( element, menu, controller, model )
		CoD.DemoUtility.RightStickAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_0", nil, "F" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], "1", function ( element, menu, controller, model )
		CoD.DemoUtility.DPadLeftAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, "1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], "2", function ( element, menu, controller, model )
		CoD.DemoUtility.DPadRightAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, "2" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], "3", function ( element, menu, controller, model )
		CoD.DemoUtility.DPadUpAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], @"hash_0", nil, "3" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], "4", function ( element, menu, controller, model )
		CoD.DemoUtility.DPadDownAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, "4" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE2", function ( element, menu, controller, model )
		CoD.DemoUtility.DemoToggleDemoHud( self, element, controller, "", menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE2" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "R", function ( element, menu, controller, model )
		CoD.DemoUtility.CrossButtonAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "R" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "V", function ( element, menu, controller, model )
		CoD.DemoUtility.CrossButtonHoldAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "V" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "G", function ( element, menu, controller, model )
		CoD.DemoUtility.SquareButtonAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "G" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "X", function ( element, menu, controller, model )
		CoD.DemoUtility.TriangleButtonAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "X" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "Q", function ( element, menu, controller, model )
		CoD.DemoUtility.UpdateDemoTimeScaleDelta( self, self.DemoPlaybackControlsPC, controller, "-0.2", menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "Q" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "E", function ( element, menu, controller, model )
		CoD.DemoUtility.UpdateDemoTimeScaleDelta( self, self.DemoPlaybackControlsPC, controller, "1.0", menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "E" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "LSHIFT", function ( element, menu, controller, model )
		CoD.DemoUtility.CircleButtonAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "LSHIFT" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f59_arg2, f59_arg3, f59_arg4 )
		if IsMouseOrKeyboard( controller ) and IsElementPropertyValue( element, "demoShowMouse", true ) and not CoD.PCUtility.IsCurrentHudOccluded( f1_arg0, controller ) then
			EnableMouseLockInputBinding( f1_arg0, controller, true, true ) --[[ @ 0]]
		elseif IsMouseOrKeyboard( controller ) and IsElementPropertyValue( element, "demoShowMouse", false ) and not CoD.PCUtility.IsCurrentHudOccluded( f1_arg0, controller ) then
			EnableMouseLockInputBinding( f1_arg0, controller, false, true ) --[[ @ 0]]
			SetFocusToElement( self, "emptyFocusableNoCursorUpdate", controller ) --[[ @ 0]]
		elseif IsMouseOrKeyboard( controller ) and CoD.PCUtility.IsCurrentHudOccluded( f1_arg0, controller ) then
			EnableMouseLockInputBinding( f1_arg0, controller, false, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "LeftTrigger.amount", function ( model )
		local f60_local0 = self --[[ @ 0]]
		if not IsMouseOrKeyboard( f1_arg1 ) then
			CoD.DemoUtility.LeftTriggerAction( self, f60_local0, f1_arg1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "RightTrigger.amount", function ( model )
		local f61_local0 = self --[[ @ 0]]
		if not IsMouseOrKeyboard( f1_arg1 ) then
			CoD.DemoUtility.RightTriggerAction( self, f61_local0, f1_arg1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "GlobalModel", "demo.showChooseModeSidebar", function ( model )
		local f62_local0 = self --[[ @ 0]]
		if not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showChooseModeSidebar" ) and IsMouseOrKeyboard( f1_arg1 ) then
			SetFocusToElement( self, "emptyFocusableNoCursorUpdate", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		emptyFocusableNoCursorUpdate.id = "emptyFocusableNoCursorUpdate" --[[ @ 0]]
	end
	f1_local3.id = "emptyFocusable" --[[ @ 0]]
	if CoD.isPC then
		DemoContextPanelPC.id = "DemoContextPanelPC" --[[ @ 0]]
	end
	f1_local6.id = "DemoPlaybackControls" --[[ @ 0]]
	if CoD.isPC then
		DemoPlaybackControlsPC.id = "DemoPlaybackControlsPC" --[[ @ 0]]
	end
	self.__defaultFocus = f1_local3 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local9 = self --[[ @ 0]]
	if IsPC() then
		SetElementProperty( f1_local9, "demoShowMouse", true ) --[[ @ 0]]
		SetMenuProperty( f1_arg0, "m_inputDisabled", false ) --[[ @ 0]]
		CoD.DemoUtility.InitPlayerPauseModel() --[[ @ 0]]
		CoD.DemoUtility.SubscribeDemoToScoreboardVisibility( self, self.emptyFocusableNoCursorUpdate, f1_arg0, f1_arg1 ) --[[ @ 0]]
		DelaySetFocusToElement( self, "emptyFocusableNoCursorUpdate", f1_arg1, 150 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.Demo.__resetProperties = function ( f63_arg0 )
	f63_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
	f63_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
	f63_arg0.DemoContextPanelPC:completeAnimation() --[[ @ 0]]
	f63_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
	f63_arg0.DemoPlaybackControls:setAlpha( 1 ) --[[ @ 0]]
	f63_arg0.DemoContextPanel:setAlpha( 1 ) --[[ @ 0]]
	f63_arg0.DemoContextPanelPC:setAlpha( 1 ) --[[ @ 0]]
	f63_arg0.DemoPlaybackControlsPC:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Demo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
			f64_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f64_arg0.DemoContextPanel:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.DemoContextPanel ) --[[ @ 0]]
			f64_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f64_arg0.DemoPlaybackControls:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.DemoPlaybackControls ) --[[ @ 0]]
		end
	},
	HideControls = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f65_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f65_arg0.DemoContextPanel:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.DemoContextPanel ) --[[ @ 0]]
			f65_arg0.DemoContextPanelPC:completeAnimation() --[[ @ 0]]
			f65_arg0.DemoContextPanelPC:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.DemoContextPanelPC ) --[[ @ 0]]
			f65_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f65_arg0.DemoPlaybackControls:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.DemoPlaybackControls ) --[[ @ 0]]
			f65_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
			f65_arg0.DemoPlaybackControlsPC:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.DemoPlaybackControlsPC ) --[[ @ 0]]
		end
	},
	InactiveControls = {
		DefaultClip = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f66_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f66_arg0.DemoContextPanel:setAlpha( 0.3 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DemoContextPanel ) --[[ @ 0]]
			f66_arg0.DemoContextPanelPC:completeAnimation() --[[ @ 0]]
			f66_arg0.DemoContextPanelPC:setAlpha( 0.4 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DemoContextPanelPC ) --[[ @ 0]]
			f66_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f66_arg0.DemoPlaybackControls:setAlpha( 0.4 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DemoPlaybackControls ) --[[ @ 0]]
			f66_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
			f66_arg0.DemoPlaybackControlsPC:setAlpha( 0.4 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DemoPlaybackControlsPC ) --[[ @ 0]]
		end
	},
	ClipPreview = {
		DefaultClip = function ( f67_arg0, f67_arg1 )
			f67_arg0:__resetProperties() --[[ @ 0]]
			f67_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f67_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f67_arg0.DemoContextPanel:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DemoContextPanel ) --[[ @ 0]]
			f67_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f67_arg0.DemoPlaybackControls:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DemoPlaybackControls ) --[[ @ 0]]
			f67_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
			f67_arg0.DemoPlaybackControlsPC:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DemoPlaybackControlsPC ) --[[ @ 0]]
		end
	},
	LightmanColorPicker = {
		DefaultClip = function ( f68_arg0, f68_arg1 )
			f68_arg0:__resetProperties() --[[ @ 0]]
			f68_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f68_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f68_arg0.DemoContextPanel:setAlpha( 1 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.DemoContextPanel ) --[[ @ 0]]
			f68_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f68_arg0.DemoPlaybackControls:setAlpha( 0.4 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.DemoPlaybackControls ) --[[ @ 0]]
			f68_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
			f68_arg0.DemoPlaybackControlsPC:setAlpha( 0.4 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.DemoPlaybackControlsPC ) --[[ @ 0]]
		end
	},
	HighlightReel = {
		DefaultClip = function ( f69_arg0, f69_arg1 )
			f69_arg0:__resetProperties() --[[ @ 0]]
			f69_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f69_arg0.DemoContextPanel:completeAnimation() --[[ @ 0]]
			f69_arg0.DemoContextPanel:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.DemoContextPanel ) --[[ @ 0]]
			f69_arg0.DemoContextPanelPC:completeAnimation() --[[ @ 0]]
			f69_arg0.DemoContextPanelPC:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.DemoContextPanelPC ) --[[ @ 0]]
			f69_arg0.DemoPlaybackControls:completeAnimation() --[[ @ 0]]
			f69_arg0.DemoPlaybackControls:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.DemoPlaybackControls ) --[[ @ 0]]
			f69_arg0.DemoPlaybackControlsPC:completeAnimation() --[[ @ 0]]
			f69_arg0.DemoPlaybackControlsPC:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.DemoPlaybackControlsPC ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Demo.__onClose = function ( f70_arg0 )
	f70_arg0.emptyFocusableNoCursorUpdate:close() --[[ @ 0]]
	f70_arg0.emptyFocusable:close() --[[ @ 0]]
	f70_arg0.DemoContextPanel:close() --[[ @ 0]]
	f70_arg0.DemoContextPanelPC:close() --[[ @ 0]]
	f70_arg0.DemoIcons:close() --[[ @ 0]]
	f70_arg0.DemoPlaybackControls:close() --[[ @ 0]]
	f70_arg0.DemoPlaybackControlsPC:close() --[[ @ 0]]
end
 --[[ @ 0]]
