-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:31bbde4283bb35f8" ) --[[ @ 0]]
require( "x64:5189db42984e831b" ) --[[ @ 0]]
require( "x64:37cfaa6a68d4fa26" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.DirectorChooseMapFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorChooseMapFrame.__defaultWidth = 1920 --[[ @ 0]]
CoD.DirectorChooseMapFrame.__defaultHeight = 804 --[[ @ 0]]
CoD.DirectorChooseMapFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorChooseMapFrame ) --[[ @ 0]]
	self.id = "DirectorChooseMapFrame" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local f1_local1 = nil --[[ @ 0]]
	
	local MapCategoryGridPC = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 8, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	MapCategoryGridPC:setLeftRight( 0, 0, 100, 500 ) --[[ @ 0]]
	MapCategoryGridPC:setTopBottom( 0, 0, 0, 804 ) --[[ @ 0]]
	MapCategoryGridPC:setWidgetType( CoD.CustomGames_MapModeSlider ) --[[ @ 0]]
	MapCategoryGridPC:setVerticalCount( 14 ) --[[ @ 0]]
	MapCategoryGridPC:setSpacing( 8 ) --[[ @ 0]]
	MapCategoryGridPC:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MapCategoryGridPC:setDataSource( "MapCategories" ) --[[ @ 0]]
	MapCategoryGridPC:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MapCategoryGridPC, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
		SetControllerModelValue( controller, "mapModeSelection", true ) --[[ @ 0]]
		SetFocusToElement( self, "MapListPC", controller ) --[[ @ 0]]
		PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( MapCategoryGridPC ) --[[ @ 0]]
	self.MapCategoryGridPC = MapCategoryGridPC --[[ @ 0]]
	
	local f1_local3 = nil --[[ @ 0]]
	
	local MapListPC = LUI.UIList.new( f1_arg0, f1_arg1, 8, 0, nil, false, false, false, false ) --[[ @ 0]]
	MapListPC:setLeftRight( 0, 0, 525, 925 ) --[[ @ 0]]
	MapListPC:setTopBottom( 0, 0, 0, 804 ) --[[ @ 0]]
	MapListPC:setWidgetType( CoD.CustomGames_MapModeSlider ) --[[ @ 0]]
	MapListPC:setVerticalCount( 14 ) --[[ @ 0]]
	MapListPC:setSpacing( 8 ) --[[ @ 0]]
	MapListPC:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MapListPC:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	MapListPC:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.MapUtility.SetMapPreviewToElementMap( element, f1_arg1 ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	MapListPC:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MapListPC, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsElementPropertyValue( element, "purchasable", true ) then
			OpenOverlay( self, "Store", controller ) --[[ @ 0]]
			return true
		else
			CoD.MapUtility.SelectElementMap( element, controller ) --[[ @ 0]]
			PlaySoundAlias( "cac_open_wpn_cust" ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MapListPC, f1_arg1, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		CoD.OptionsUtility.SetFocusToGrid( self.MapCategoryGridPC ) --[[ @ 0]]
		SetControllerModelValue( controller, "mapModeSelection", false ) --[[ @ 0]]
		DataSourceHelperRecreate( controller, "MapModePreview" ) --[[ @ 0]]
		PlaySoundAlias( "cac_wpn_cust_exit" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( MapListPC ) --[[ @ 0]]
	self.MapListPC = MapListPC --[[ @ 0]]
	
	local f1_local5 = nil --[[ @ 0]]
	f1_local5 = LUI.UIElement.createFake() --[[ @ 0]]
	self.MapCategoryList = f1_local5 --[[ @ 0]]
	local f1_local6 = nil --[[ @ 0]]
	f1_local6 = LUI.UIElement.createFake() --[[ @ 0]]
	self.MapList = f1_local6 --[[ @ 0]]
	
	local MapModeInfo = CoD.CustomGames_MapModeInfo.new( f1_arg0, f1_arg1, 0, 0, 1019, 1819, 0, 0, 0, 804 ) --[[ @ 0]]
	MapModeInfo.OfficialBadge:setAlpha( 0 ) --[[ @ 0]]
	MapModeInfo:subscribeToGlobalModel( f1_arg1, "MapModePreview", "mapName", function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			MapModeInfo.PreviewInfoName:setText( ToUpper( MapNameToLocalizedMapName( f11_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	MapModeInfo:subscribeToGlobalModel( f1_arg1, "MapModePreview", "mapName", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			MapModeInfo.PreviewInfoDesc:setText( MapNameToLocalizedMapDetailedDescription( f1_arg1, f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MapModeInfo ) --[[ @ 0]]
	self.MapModeInfo = MapModeInfo --[[ @ 0]]
	
	MapListPC:linkToElementModel( MapCategoryGridPC, "mapListDatasource", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			MapListPC:setDataSource( f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local6:linkToElementModel( f1_local5, "mapListDatasource", true, function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			f1_local6:setDataSource( f14_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ChooseMapPCKeyboardGamepad",
			condition = function ( menu, element, event )
				local f15_local0 = IsGamepadOrKeyboardNavigation( f1_arg1 ) --[[ @ 0]]
				if f15_local0 then
					f15_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "mapModeSelection" ) --[[ @ 0]]
					if f15_local0 then
						f15_local0 = IsPC() --[[ @ 0]]
					end
				end
				return f15_local0
			end
		},
		{
			stateName = "DefaultStatePCKeyboardGamepad",
			condition = function ( menu, element, event )
				return IsGamepadOrKeyboardNavigation( f1_arg1 ) and IsPC()
			end
		},
		{
			stateName = "ChooseMap",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueTrue( f1_arg1, "mapModeSelection" )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f18_arg0, f18_arg1 )
		f18_arg1.menu = f18_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f18_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.LastInput, function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.mapModeSelection, function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "mapModeSelection"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SetControllerModelValue( f1_arg1, "mapModeSelection", false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MapCategoryGridPC.id = "MapCategoryGridPC" --[[ @ 0]]
	MapListPC.id = "MapListPC" --[[ @ 0]]
	f1_local5.id = "MapCategoryList" --[[ @ 0]]
	f1_local6.id = "MapList" --[[ @ 0]]
	self.__defaultFocus = f1_local5 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local9 = self --[[ @ 0]]
	DataSourceHelperRecreate( f1_arg1, "MapModePreview" ) --[[ @ 0]]
	f1_local9 = MapCategoryGridPC --[[ @ 0]]
	if IsPC() then
		CoD.OptionsUtility.SetFocusToGrid( f1_local9 ) --[[ @ 0]]
		SetElementCanBeNavigatedTo( f1_local9, false ) --[[ @ 0]]
	end
	f1_local9 = MapListPC --[[ @ 0]]
	if IsPC() then
		SetElementCanBeNavigatedTo( f1_local9, false ) --[[ @ 0]]
		CoD.GridAndListUtility.DisableKeyboardNavigationOnGridCounters( f1_local9 ) --[[ @ 0]]
		SetElementProperty( f1_local9, "ignoreSavedActive", true ) --[[ @ 0]]
	end
	SetElementCanBeNavigatedTo( f1_local5, false ) --[[ @ 0]]
	SetElementCanBeNavigatedTo( f1_local6, false ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.DirectorChooseMapFrame.__resetProperties = function ( f22_arg0 )
	f22_arg0.MapList:completeAnimation() --[[ @ 0]]
	f22_arg0.MapCategoryGridPC:completeAnimation() --[[ @ 0]]
	f22_arg0.MapListPC:completeAnimation() --[[ @ 0]]
	f22_arg0.MapCategoryList:completeAnimation() --[[ @ 0]]
	f22_arg0.MapList:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.MapCategoryGridPC:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.MapListPC:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.MapCategoryList:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorChooseMapFrame.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
			f23_arg0.MapList:completeAnimation() --[[ @ 0]]
			f23_arg0.MapList:setAlpha( 0.12 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.MapList ) --[[ @ 0]]
		end
	},
	ChooseMapPCKeyboardGamepad = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f24_arg0.MapCategoryGridPC:completeAnimation() --[[ @ 0]]
			f24_arg0.MapCategoryGridPC:setAlpha( 0.12 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.MapCategoryGridPC ) --[[ @ 0]]
		end
	},
	DefaultStatePCKeyboardGamepad = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.MapListPC:completeAnimation() --[[ @ 0]]
			f25_arg0.MapListPC:setAlpha( 0.12 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.MapListPC ) --[[ @ 0]]
		end
	},
	ChooseMap = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
			f26_arg0.MapCategoryList:completeAnimation() --[[ @ 0]]
			f26_arg0.MapCategoryList:setAlpha( 0.12 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.MapCategoryList ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorChooseMapFrame.__onClose = function ( f27_arg0 )
	f27_arg0.MapListPC:close() --[[ @ 0]]
	f27_arg0.MapList:close() --[[ @ 0]]
	f27_arg0.MapCategoryGridPC:close() --[[ @ 0]]
	f27_arg0.MapCategoryList:close() --[[ @ 0]]
	f27_arg0.MapModeInfo:close() --[[ @ 0]]
end
 --[[ @ 0]]
