-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:1dd513db11e2bfb6" ) --[[ @ 0]]
require( "x64:688a4793bcdc6806" ) --[[ @ 0]]
require( "x64:369c5ab8a4b56a69" ) --[[ @ 0]]
require( "x64:1300da9b0ba493a" ) --[[ @ 0]]

CoD.ReservesLootButtonsGroup = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReservesLootButtonsGroup.__defaultWidth = 160 --[[ @ 0]]
CoD.ReservesLootButtonsGroup.__defaultHeight = 461 --[[ @ 0]]
CoD.ReservesLootButtonsGroup.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReservesLootButtonsGroup ) --[[ @ 0]]
	self.id = "ReservesLootButtonsGroup" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local ReservesLootBribeButton = CoD.ReservesLootBribeButtonContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -80, 80, 0.5, 0.5, 86.5, 230.5 ) --[[ @ 0]]
	ReservesLootBribeButton:subscribeToGlobalModel( f1_arg1, "ReservesLootPurchaseCase", nil, function ( model )
		ReservesLootBribeButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local LootCaseButton = ReservesLootBribeButton --[[ @ 0]]
	local LootBundleCrateButton = ReservesLootBribeButton.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	LootBundleCrateButton( LootCaseButton, f1_local4["LootStreamProgress.allRngUnlocked"], function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LootCaseButton = ReservesLootBribeButton --[[ @ 0]]
	LootBundleCrateButton = ReservesLootBribeButton.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	LootBundleCrateButton( LootCaseButton, f1_local4.lootBribeCount, function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ReservesLootBribeButton:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ReservesLootBribeButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.BlackMarketUtility.OpenAllReservesOwnedDialog( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBribeCount", 0 ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_model = element:getModel(),
				_properties = {
					_bribeType = LuaEnum.BRIBE_TYPES.BRIBE
				}
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBribeCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ReservesLootBribeButton ) --[[ @ 0]]
	self.ReservesLootBribeButton = ReservesLootBribeButton --[[ @ 0]]
	
	LootBundleCrateButton = CoD.ReservesLootBundleCrateButtonContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -80, 80, 0.5, 0.5, -72.5, 69.5 ) --[[ @ 0]]
	LootBundleCrateButton:subscribeToGlobalModel( f1_arg1, "ReservesLootBundleCrate", nil, function ( model )
		LootBundleCrateButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = LootBundleCrateButton --[[ @ 0]]
	LootCaseButton = LootBundleCrateButton.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	LootCaseButton( f1_local4, f1_local5["LootStreamProgress.allRngUnlocked"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = LootBundleCrateButton --[[ @ 0]]
	LootCaseButton = LootBundleCrateButton.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	LootCaseButton( f1_local4, f1_local5.lootBundleCrateCount, function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LootBundleCrateButton:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LootBundleCrateButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.BlackMarketUtility.OpenAllReservesOwnedDialog( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBundleCrateCount", 0 ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_model = element:getModel(),
				_properties = {
					_bribeType = LuaEnum.BRIBE_TYPES.CRATE
				}
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBundleCrateCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( LootBundleCrateButton ) --[[ @ 0]]
	self.LootBundleCrateButton = LootBundleCrateButton --[[ @ 0]]
	
	LootCaseButton = CoD.ReservesLootCaseButtonContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -80, 80, 0.5, 0.5, -230.5, -86.5 ) --[[ @ 0]]
	LootCaseButton:subscribeToGlobalModel( f1_arg1, "ReservesLootPurchaseCase", nil, function ( model )
		LootCaseButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = LootCaseButton --[[ @ 0]]
	f1_local4 = LootCaseButton.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local5, f1_local6["LootStreamProgress.allRngUnlocked"], function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = LootCaseButton --[[ @ 0]]
	f1_local4 = LootCaseButton.subscribeToModel --[[ @ 0]]
	f1_local6 = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local5, f1_local6.lootCaseCount, function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LootCaseButton:registerEventHandler( "gain_focus", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f17_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f17_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f17_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LootCaseButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.BlackMarketUtility.OpenAllReservesOwnedDialog( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootCaseCount", 0 ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_model = element:getModel(),
				_properties = {
					_bribeType = LuaEnum.BRIBE_TYPES.CASE
				}
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootCaseCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( LootCaseButton ) --[[ @ 0]]
	self.LootCaseButton = LootCaseButton --[[ @ 0]]
	
	ReservesLootBribeButton.id = "ReservesLootBribeButton" --[[ @ 0]]
	LootBundleCrateButton.id = "LootBundleCrateButton" --[[ @ 0]]
	LootCaseButton.id = "LootCaseButton" --[[ @ 0]]
	self.__defaultFocus = LootCaseButton --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReservesLootButtonsGroup.__onClose = function ( f20_arg0 )
	f20_arg0.ReservesLootBribeButton:close() --[[ @ 0]]
	f20_arg0.LootBundleCrateButton:close() --[[ @ 0]]
	f20_arg0.LootCaseButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
