-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:4f48b2a3318365e" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/vhud_buttonprompt_minimal" ) --[[ @ 0]]
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]
require( "x64:39d92dce1e4291ce" ) --[[ @ 0]]

CoD.vhud_gunship_buttonPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.__defaultWidth = 730 --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.__defaultHeight = 939 --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_gunship_buttonPrompt ) --[[ @ 0]]
	self.id = "vhud_gunship_buttonPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CycleWeaponPrompt = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, -312.5, -137.5, 1, 1, -93, -43 ) --[[ @ 0]]
	CycleWeaponPrompt:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	CycleWeaponPrompt:linkToElementModel( CycleWeaponPrompt, "text", true, function ( model )
		f1_arg0:updateElementState( CycleWeaponPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local CombatTrainingGameTimer = CycleWeaponPrompt --[[ @ 0]]
	local ExitPrompt = CycleWeaponPrompt.subscribeToModel --[[ @ 0]]
	local KBMCyclePrompt = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ExitPrompt( CombatTrainingGameTimer, KBMCyclePrompt["factions.isCoDCaster"], function ( f4_arg0 )
		f1_arg0:updateElementState( CycleWeaponPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CycleWeaponPrompt:linkToElementModel( CycleWeaponPrompt, "bind", true, function ( model )
		f1_arg0:updateElementState( CycleWeaponPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CycleWeaponPrompt:linkToElementModel( CycleWeaponPrompt, "cooldown", true, function ( model )
		if CycleWeaponPrompt["__stateValidation_cooldown->cooldown"] then
			CycleWeaponPrompt:removeSubscription( CycleWeaponPrompt["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			CycleWeaponPrompt["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f6_local0 = model:get() --[[ @ 0]]
			local f6_local1 = model:get() --[[ @ 0]]
			model = f6_local0 and f6_local1.cooldown --[[ @ 0]]
		end
		if model then
			CycleWeaponPrompt["__stateValidation_cooldown->cooldown"] = CycleWeaponPrompt:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( CycleWeaponPrompt, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CycleWeaponPrompt:subscribeToGlobalModel( f1_arg1, "VehicleController", "alt2_button_image", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			CycleWeaponPrompt.button:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CycleWeaponPrompt:linkToElementModel( self, "bindings.BUTTON_Y", false, function ( model )
		CycleWeaponPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CycleWeaponPrompt:linkToElementModel( self, "text", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			CycleWeaponPrompt.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CycleWeaponPrompt ) --[[ @ 0]]
	self.CycleWeaponPrompt = CycleWeaponPrompt --[[ @ 0]]
	
	ExitPrompt = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, 136.5, 311.5, 1, 1, -93, -43 ) --[[ @ 0]]
	ExitPrompt:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ExitPrompt:linkToElementModel( ExitPrompt, "text", true, function ( model )
		f1_arg0:updateElementState( ExitPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	KBMCyclePrompt = ExitPrompt --[[ @ 0]]
	CombatTrainingGameTimer = ExitPrompt.subscribeToModel --[[ @ 0]]
	local KBMCycleActionName = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CombatTrainingGameTimer( KBMCyclePrompt, KBMCycleActionName["factions.isCoDCaster"], function ( f13_arg0 )
		f1_arg0:updateElementState( ExitPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ExitPrompt:linkToElementModel( ExitPrompt, "bind", true, function ( model )
		f1_arg0:updateElementState( ExitPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ExitPrompt:linkToElementModel( ExitPrompt, "cooldown", true, function ( model )
		if ExitPrompt["__stateValidation_cooldown->cooldown"] then
			ExitPrompt:removeSubscription( ExitPrompt["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			ExitPrompt["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f15_local0 = model:get() --[[ @ 0]]
			local f15_local1 = model:get() --[[ @ 0]]
			model = f15_local0 and f15_local1.cooldown --[[ @ 0]]
		end
		if model then
			ExitPrompt["__stateValidation_cooldown->cooldown"] = ExitPrompt:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( ExitPrompt, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ExitPrompt:subscribeToGlobalModel( f1_arg1, "VehicleController", "alt1_button_image", function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			ExitPrompt.button:setImage( RegisterImage( f17_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ExitPrompt:linkToElementModel( self, "bindings.BUTTON_X", false, function ( model )
		ExitPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ExitPrompt:linkToElementModel( self, "text", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			ExitPrompt.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f19_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ExitPrompt ) --[[ @ 0]]
	self.ExitPrompt = ExitPrompt --[[ @ 0]]
	
	CombatTrainingGameTimer = CoD.CombatTrainingGameTimer.new( f1_arg0, f1_arg1, 0.5, 0.5, -101.5, 98.5, 0, 0, 0, 65 ) --[[ @ 0]]
	CombatTrainingGameTimer:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return IsGameTypeCombatTraining()
			end
		}
	} ) --[[ @ 0]]
	CombatTrainingGameTimer:setAlpha( 0 ) --[[ @ 0]]
	CombatTrainingGameTimer:setScale( 2, 2 ) --[[ @ 0]]
	self:addElement( CombatTrainingGameTimer ) --[[ @ 0]]
	self.CombatTrainingGameTimer = CombatTrainingGameTimer --[[ @ 0]]
	
	KBMCyclePrompt = nil --[[ @ 0]]
	
	KBMCyclePrompt = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -259.5, -170.5, 1, 1, -122.5, -100.5 ) --[[ @ 0]]
	KBMCyclePrompt:setAlpha( 0 ) --[[ @ 0]]
	KBMCyclePrompt.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{weapnext}]" ) ) --[[ @ 0]]
	KBMCyclePrompt.GamepadText:setText( "" ) --[[ @ 0]]
	self:addElement( KBMCyclePrompt ) --[[ @ 0]]
	self.KBMCyclePrompt = KBMCyclePrompt --[[ @ 0]]
	
	KBMCycleActionName = nil --[[ @ 0]]
	
	KBMCycleActionName = LUI.UIText.new( 0.5, 0.5, -365, -65, 1, 1, -78, -62 ) --[[ @ 0]]
	KBMCycleActionName:setAlpha( 0 ) --[[ @ 0]]
	KBMCycleActionName:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1CD7EB3F7D80E6F7" ) ) --[[ @ 0]]
	KBMCycleActionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	KBMCycleActionName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	KBMCycleActionName:setLetterSpacing( 0.5 ) --[[ @ 0]]
	KBMCycleActionName:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	self:addElement( KBMCycleActionName ) --[[ @ 0]]
	self.KBMCycleActionName = KBMCycleActionName --[[ @ 0]]
	
	local KBMExitPrompt = nil --[[ @ 0]]
	
	KBMExitPrompt = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, 170.5, 259.5, 1, 1, -122.5, -100.5 ) --[[ @ 0]]
	KBMExitPrompt:setAlpha( 0 ) --[[ @ 0]]
	KBMExitPrompt.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+activate}] " ) ) --[[ @ 0]]
	KBMExitPrompt.GamepadText:setText( "" ) --[[ @ 0]]
	self:addElement( KBMExitPrompt ) --[[ @ 0]]
	self.KBMExitPrompt = KBMExitPrompt --[[ @ 0]]
	
	local KBMExitActionName = nil --[[ @ 0]]
	
	KBMExitActionName = LUI.UIText.new( 0.5, 0.5, 65, 365, 1, 1, -78, -62 ) --[[ @ 0]]
	KBMExitActionName:setAlpha( 0 ) --[[ @ 0]]
	KBMExitActionName:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C7D903A026627FC" ) ) --[[ @ 0]]
	KBMExitActionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	KBMExitActionName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	KBMExitActionName:setLetterSpacing( 0.5 ) --[[ @ 0]]
	KBMExitActionName:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	KBMExitActionName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( KBMExitActionName ) --[[ @ 0]]
	self.KBMExitActionName = KBMExitActionName --[[ @ 0]]
	
	local HeroAbilityHoldStringPC = nil --[[ @ 0]]
	
	HeroAbilityHoldStringPC = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, 115, 315, 1, 1, -183.5, -134.5 ) --[[ @ 0]]
	HeroAbilityHoldStringPC:mergeStateConditions( {
		{
			stateName = "NonHoldToActivate",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "VisibleCharged",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		},
		{
			stateName = "VisibleInUse",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	HeroAbilityHoldStringPC:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldStringPC ) --[[ @ 0]]
	self.HeroAbilityHoldStringPC = HeroAbilityHoldStringPC --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KBMExitHidden",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and IsGameTypeCombatTraining()
			end
		},
		{
			stateName = "HideExitPrompt",
			condition = function ( menu, element, event )
				return IsGameTypeCombatTraining()
			end
		},
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f27_arg0, f27_arg1 )
		f27_arg1.menu = f27_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f27_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local9 = self --[[ @ 0]]
	local f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11.LastInput, function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.__resetProperties = function ( f29_arg0 )
	f29_arg0.ExitPrompt:completeAnimation() --[[ @ 0]]
	f29_arg0.CycleWeaponPrompt:completeAnimation() --[[ @ 0]]
	f29_arg0.CombatTrainingGameTimer:completeAnimation() --[[ @ 0]]
	f29_arg0.KBMCycleActionName:completeAnimation() --[[ @ 0]]
	f29_arg0.KBMCyclePrompt:completeAnimation() --[[ @ 0]]
	f29_arg0.KBMExitActionName:completeAnimation() --[[ @ 0]]
	f29_arg0.KBMExitPrompt:completeAnimation() --[[ @ 0]]
	f29_arg0.HeroAbilityHoldStringPC:completeAnimation() --[[ @ 0]]
	f29_arg0.ExitPrompt:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.CycleWeaponPrompt:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.CombatTrainingGameTimer:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.KBMCycleActionName:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.KBMCyclePrompt:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.KBMExitActionName:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.KBMExitPrompt:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.HeroAbilityHoldStringPC:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBMExitHidden = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f31_arg0.CycleWeaponPrompt:completeAnimation() --[[ @ 0]]
			f31_arg0.CycleWeaponPrompt:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.CycleWeaponPrompt ) --[[ @ 0]]
			f31_arg0.ExitPrompt:completeAnimation() --[[ @ 0]]
			f31_arg0.ExitPrompt:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ExitPrompt ) --[[ @ 0]]
			f31_arg0.CombatTrainingGameTimer:completeAnimation() --[[ @ 0]]
			f31_arg0.CombatTrainingGameTimer:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.CombatTrainingGameTimer ) --[[ @ 0]]
			f31_arg0.KBMCyclePrompt:completeAnimation() --[[ @ 0]]
			f31_arg0.KBMCyclePrompt:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.KBMCyclePrompt ) --[[ @ 0]]
			f31_arg0.KBMCycleActionName:completeAnimation() --[[ @ 0]]
			f31_arg0.KBMCycleActionName:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.KBMCycleActionName ) --[[ @ 0]]
		end
	},
	HideExitPrompt = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f32_arg0.ExitPrompt:completeAnimation() --[[ @ 0]]
			f32_arg0.ExitPrompt:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ExitPrompt ) --[[ @ 0]]
			f32_arg0.CombatTrainingGameTimer:completeAnimation() --[[ @ 0]]
			f32_arg0.CombatTrainingGameTimer:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.CombatTrainingGameTimer ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f33_arg0.CycleWeaponPrompt:completeAnimation() --[[ @ 0]]
			f33_arg0.CycleWeaponPrompt:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.CycleWeaponPrompt ) --[[ @ 0]]
			f33_arg0.ExitPrompt:completeAnimation() --[[ @ 0]]
			f33_arg0.ExitPrompt:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.ExitPrompt ) --[[ @ 0]]
			f33_arg0.KBMCyclePrompt:completeAnimation() --[[ @ 0]]
			f33_arg0.KBMCyclePrompt:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.KBMCyclePrompt ) --[[ @ 0]]
			f33_arg0.KBMCycleActionName:completeAnimation() --[[ @ 0]]
			f33_arg0.KBMCycleActionName:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.KBMCycleActionName ) --[[ @ 0]]
			f33_arg0.KBMExitPrompt:completeAnimation() --[[ @ 0]]
			f33_arg0.KBMExitPrompt:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.KBMExitPrompt ) --[[ @ 0]]
			f33_arg0.KBMExitActionName:completeAnimation() --[[ @ 0]]
			f33_arg0.KBMExitActionName:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.KBMExitActionName ) --[[ @ 0]]
			f33_arg0.HeroAbilityHoldStringPC:completeAnimation() --[[ @ 0]]
			f33_arg0.HeroAbilityHoldStringPC:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.HeroAbilityHoldStringPC ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.vhud_gunship_buttonPrompt.__onClose = function ( f34_arg0 )
	f34_arg0.CycleWeaponPrompt:close() --[[ @ 0]]
	f34_arg0.ExitPrompt:close() --[[ @ 0]]
	f34_arg0.CombatTrainingGameTimer:close() --[[ @ 0]]
	f34_arg0.KBMCyclePrompt:close() --[[ @ 0]]
	f34_arg0.KBMExitPrompt:close() --[[ @ 0]]
	f34_arg0.HeroAbilityHoldStringPC:close() --[[ @ 0]]
end
 --[[ @ 0]]
