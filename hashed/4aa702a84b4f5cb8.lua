-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:7fbffc86e9a93477" ) --[[ @ 0]]
require( "x64:17b5952c3bc0ee42" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.WeaponAccessoriesSelectInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.__defaultWidth = 1920 --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.__defaultHeight = 1080 --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.CACUtility.ShowEmptyWeaponCharmModel( f1_arg0, f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.WeaponAccessoriesSelectInternal ) --[[ @ 0]]
	self.id = "WeaponAccessoriesSelectInternal" --[[ @ 0]]
	self.soundSet = "CAC_WeaponPersonalization" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CharmListBg = LUI.UIImage.new( 0, 0, 73, 921, 0, 0, 81, 926 ) --[[ @ 0]]
	CharmListBg:setScale( 0.77, 0.77 ) --[[ @ 0]]
	CharmListBg:setImage( RegisterImage( @"uie_ui_menu_emblem_empty_bg" ) ) --[[ @ 0]]
	CharmListBg:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	CharmListBg:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CharmListBg:setupNineSliceShader( 212, 212 ) --[[ @ 0]]
	self:addElement( CharmListBg ) --[[ @ 0]]
	self.CharmListBg = CharmListBg --[[ @ 0]]
	
	local CharmList = LUI.UIList.new( f1_arg0, f1_arg1, 11, 0, nil, true, false, false, false ) --[[ @ 0]]
	CharmList:setLeftRight( 0, 0, 173, 814 ) --[[ @ 0]]
	CharmList:setTopBottom( 0, 0, 178, 819 ) --[[ @ 0]]
	CharmList:setWidgetType( CoD.LootWeaponOptionButton ) --[[ @ 0]]
	CharmList:setHorizontalCount( 4 ) --[[ @ 0]]
	CharmList:setVerticalCount( 4 ) --[[ @ 0]]
	CharmList:setSpacing( 11 ) --[[ @ 0]]
	CharmList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	CharmList:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	CharmList:setDataSource( "WeaponCharmList" ) --[[ @ 0]]
	CharmList:linkToElementModel( CharmList, "isLocked", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharmList:linkToElementModel( CharmList, "available", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharmList:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local CharmsMessage = CharmList --[[ @ 0]]
	local ItemInfoPanel = CharmList.subscribeToModel --[[ @ 0]]
	local XCamMouseControl = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ItemInfoPanel( CharmsMessage, XCamMouseControl.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CharmList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponCharmModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	CharmList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isPrestigeAttachment" ) then
			CoD.BreadcrumbUtility.SetWeaponAccessoryOld( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	CharmList:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CharmList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isLocked" ) and CoD.ModelUtility.IsSelfModelValueNilOrTrue( element, controller, "available" ) and not IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) then
			CoD.WeaponOptionsUtility.EquipWeaponAccessory( menu, element, controller, false ) --[[ @ 0]]
			SaveLoadout( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isLocked" ) and CoD.ModelUtility.IsSelfModelValueNilOrTrue( element, controller, "available" ) and not IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CharmList, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) and IsGamepad( controller ) then
			CoD.WeaponOptionsUtility.ClearWeaponAccessory( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CharmList, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "ui_remove", function ( element, menu, controller, model )
		if IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) and IsMouseOrKeyboard( controller ) then
			CoD.WeaponOptionsUtility.ClearWeaponAccessory( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementModelConditionFn( menu, self, element, controller, "isEquippedFn" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	CharmList:subscribeToGlobalModel( f1_arg1, "WeaponCharmList", "updateSelections", function ( model )
		local f15_local0 = CharmList --[[ @ 0]]
		UpdateAllMenuButtonPrompts( f1_arg0, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharmList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f16_arg0, f16_arg1, f16_arg2, f16_arg3 )
		if IsElementModelConditionFn( f16_arg1, self, f16_arg0, f16_arg2, "isEquippedFn" ) then
			return function ( f17_arg0, f17_arg1, f17_arg2, f17_arg3 )
				CoD.WeaponOptionsUtility.ClearWeaponAccessory( f17_arg1, f17_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( CharmList ) --[[ @ 0]]
	self.CharmList = CharmList --[[ @ 0]]
	
	ItemInfoPanel = CoD.BM_ItemInfoPanel.new( f1_arg0, f1_arg1, 1, 1, -732, -192, 0, 0, 695, 845 ) --[[ @ 0]]
	self:addElement( ItemInfoPanel ) --[[ @ 0]]
	self.ItemInfoPanel = ItemInfoPanel --[[ @ 0]]
	
	CharmsMessage = LUI.UIText.new( 0, 0, 167, 817, 0.5, 0.5, -53.5, -23.5 ) --[[ @ 0]]
	CharmsMessage:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	CharmsMessage:setAlpha( 0 ) --[[ @ 0]]
	CharmsMessage:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6F11EFCA50B790EB" ) ) --[[ @ 0]]
	CharmsMessage:setTTF( "dinnext_regular" ) --[[ @ 0]]
	CharmsMessage:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	CharmsMessage:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( CharmsMessage ) --[[ @ 0]]
	self.CharmsMessage = CharmsMessage --[[ @ 0]]
	
	XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_arg0, f1_arg1, 0.32, 0.68, 500, 500, 0, 0, 165, 665 ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	ItemInfoPanel:linkToElementModel( CharmList, nil, false, function ( model )
		ItemInfoPanel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ListEmpty",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.CharmList )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f20_arg0, f20_arg1 )
		f20_arg1.menu = f20_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f20_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharmList.id = "CharmList" --[[ @ 0]]
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	self.__defaultFocus = CharmList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local6 = self --[[ @ 0]]
	f1_local6 = CharmList --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local6, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.__resetProperties = function ( f21_arg0 )
	f21_arg0.CharmsMessage:completeAnimation() --[[ @ 0]]
	f21_arg0.CharmsMessage:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ListEmpty = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.CharmsMessage:completeAnimation() --[[ @ 0]]
			f23_arg0.CharmsMessage:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.CharmsMessage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WeaponAccessoriesSelectInternal.__onClose = function ( f24_arg0 )
	f24_arg0.ItemInfoPanel:close() --[[ @ 0]]
	f24_arg0.CharmList:close() --[[ @ 0]]
	f24_arg0.XCamMouseControl:close() --[[ @ 0]]
end
 --[[ @ 0]]
