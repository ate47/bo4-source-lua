-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:25587cd3245f1dc1" ) --[[ @ 0]]
require( "x64:4b236d88d3647924" ) --[[ @ 0]]
require( "x64:6def6a654efe7944" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebutton" ) --[[ @ 0]]
require( "x64:37b2e5c29b34a47e" ) --[[ @ 0]]
require( "ui/uieditor/widgets/dynamiccontainerwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "x64:1429ef25909713fe" ) --[[ @ 0]]
require( "ui/uieditor/widgets/notifications/publiclobbystagenotification/stagenotificationcontainer" ) --[[ @ 0]]

CoD.directorArenaMatchmaking = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorArenaMatchmaking.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorArenaMatchmaking.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorArenaMatchmaking.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.DirectorUtility.InitPublicLobbyModels( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.directorArenaMatchmaking ) --[[ @ 0]]
	self.id = "directorArenaMatchmaking" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local StageNotificationContainer = CoD.StageNotificationContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 120 ) --[[ @ 0]]
	StageNotificationContainer:subscribeToGlobalModel( f1_arg1, "Arena", "arenaEventName", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			StageNotificationContainer.CommonHeader.subtitle.StageTitle:setText( ToUpper( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	StageNotificationContainer:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "publicLobby.stageDetails", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			StageNotificationContainer.CommonHeader.subtitle.subtitle:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StageNotificationContainer ) --[[ @ 0]]
	self.StageNotificationContainer = StageNotificationContainer --[[ @ 0]]
	
	local TopBar = CoD.header_container_frontend.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	local f1_local3 = nil --[[ @ 0]]
	f1_local3 = LUI.UIElement.createFake() --[[ @ 0]]
	self.MapVote = f1_local3 --[[ @ 0]]
	local MapVotePC = nil --[[ @ 0]]
	
	MapVotePC = CoD.MapVote.new( f1_arg0, f1_arg1, 0.5, 0.5, -505, 406, 1, 1, -399, -184 ) --[[ @ 0]]
	MapVotePC:mergeStateConditions( {
		{
			stateName = "MapVote",
			condition = function ( menu, element, event )
				return CoD.LobbyUtility.MapVoteInState( LuaEnum.MAP_VOTE_STATE.VOTING ) and AlwaysFalse()
			end
		},
		{
			stateName = "MapVoteChosenNext",
			condition = function ( menu, element, event )
				local f5_local0 = CoD.LobbyUtility.MapVoteInState( LuaEnum.MAP_VOTE_STATE.LOCKEDIN ) --[[ @ 0]]
				if f5_local0 then
					f5_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "MapVote.lobbyMapVoteType", Enum[@"lobbymapvote"][@"lobby_mapvote_next"] ) --[[ @ 0]]
					if f5_local0 then
						f5_local0 = AlwaysFalse() --[[ @ 0]]
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "MapVoteChosenPrevious",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.LobbyUtility.MapVoteInState( LuaEnum.MAP_VOTE_STATE.LOCKEDIN ) --[[ @ 0]]
				if f6_local0 then
					f6_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "MapVote.lobbyMapVoteType", Enum[@"lobbymapvote"][@"lobby_mapvote_previous"] ) --[[ @ 0]]
					if f6_local0 then
						f6_local0 = AlwaysFalse() --[[ @ 0]]
					end
				end
				return f6_local0
			end
		},
		{
			stateName = "MapVoteChosenRandom",
			condition = function ( menu, element, event )
				local f7_local0 = CoD.LobbyUtility.MapVoteInState( LuaEnum.MAP_VOTE_STATE.LOCKEDIN ) --[[ @ 0]]
				if f7_local0 then
					f7_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "MapVote.lobbyMapVoteType", Enum[@"lobbymapvote"][@"lobby_mapvote_random"] ) --[[ @ 0]]
					if f7_local0 then
						f7_local0 = AlwaysFalse() --[[ @ 0]]
					end
				end
				return f7_local0
			end
		},
		{
			stateName = "SelectedMap",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.LobbyUtility.MapVoteInState( LuaEnum.MAP_VOTE_STATE.LOCKEDIN ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = CoD.ArenaUtility.ArenaMatchSet( self ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = IsArenaMode() --[[ @ 0]]
					end
				end
				return f8_local0
			end
		}
	} ) --[[ @ 0]]
	local overheadNameContainer = MapVotePC --[[ @ 0]]
	local DirectorReadyButton = MapVotePC.subscribeToModel --[[ @ 0]]
	local DirectorPreGameButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( overheadNameContainer, DirectorPreGameButton["lobbyRoot.mapVote"], function ( f9_arg0 )
		f1_arg0:updateElementState( MapVotePC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "lobbyRoot.mapVote"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	overheadNameContainer = MapVotePC --[[ @ 0]]
	DirectorReadyButton = MapVotePC.subscribeToModel --[[ @ 0]]
	DirectorPreGameButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( overheadNameContainer, DirectorPreGameButton["lobbyRoot.lobbyNav"], function ( f10_arg0 )
		f1_arg0:updateElementState( MapVotePC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	overheadNameContainer = MapVotePC --[[ @ 0]]
	DirectorReadyButton = MapVotePC.subscribeToModel --[[ @ 0]]
	DirectorPreGameButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( overheadNameContainer, DirectorPreGameButton["MapVote.lobbyMapVoteType"], function ( f11_arg0 )
		f1_arg0:updateElementState( MapVotePC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "MapVote.lobbyMapVoteType"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	overheadNameContainer = MapVotePC --[[ @ 0]]
	DirectorReadyButton = MapVotePC.subscribeToModel --[[ @ 0]]
	DirectorPreGameButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( overheadNameContainer, DirectorPreGameButton["lobbyRoot.publicLobby.stage"], function ( f12_arg0 )
		f1_arg0:updateElementState( MapVotePC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( MapVotePC ) --[[ @ 0]]
	self.MapVotePC = MapVotePC --[[ @ 0]]
	
	DirectorReadyButton = CoD.DirectorReadyButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 470, 896, 1, 1, -188, -108 ) --[[ @ 0]]
	DirectorReadyButton:setAlpha( 0 ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.PlayText:setText( LocalizeToUpperString( @"menu/ready" ) ) --[[ @ 0]]
	DirectorReadyButton:subscribeToGlobalModel( f1_arg1, "PerController", "ButtonBits." .. Enum[@"luibutton"][@"lui_key_xba_pscross"], function ( model )
		DirectorReadyButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectorReadyButton ) --[[ @ 0]]
	self.DirectorReadyButton = DirectorReadyButton --[[ @ 0]]
	
	overheadNameContainer = CoD.DynamicContainerWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 1080 ) --[[ @ 0]]
	self:addElement( overheadNameContainer ) --[[ @ 0]]
	self.overheadNameContainer = overheadNameContainer --[[ @ 0]]
	
	DirectorPreGameButton = CoD.DirectorPreGameButton.new( f1_arg0, f1_arg1, 0, 0, 536.5, 766.5, 1, 1, -178, -108 ) --[[ @ 0]]
	DirectorPreGameButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not IsBooleanDvarSet( "loot_enableBlackMarket" )
			end
		}
	} ) --[[ @ 0]]
	DirectorPreGameButton:setAlpha( 0 ) --[[ @ 0]]
	DirectorPreGameButton.DirectorCustomStartButton.MiddleText:setText( LocalizeToUpperString( @"menu/black_market" ) ) --[[ @ 0]]
	DirectorPreGameButton.DirectorCustomStartButton.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/black_market" ) ) --[[ @ 0]]
	DirectorPreGameButton:registerEventHandler( "gain_focus", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f15_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f15_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f15_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DirectorPreGameButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenQuarterMaster( self, element, controller, "", menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/black_market", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( DirectorPreGameButton ) --[[ @ 0]]
	self.DirectorPreGameButton = DirectorPreGameButton --[[ @ 0]]
	
	local ArenaEventButtons = CoD.ArenaEventButtons.new( f1_arg0, f1_arg1, 0.5, 0.5, 122, 322, 1, 1, -178, -108 ) --[[ @ 0]]
	ArenaEventButtons:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ArenaEventButtons ) --[[ @ 0]]
	self.ArenaEventButtons = ArenaEventButtons --[[ @ 0]]
	
	local ArenaDailyBonus = CoD.ArenaDailyBonus.new( f1_arg0, f1_arg1, 0.5, 0.5, 122, 322, 1, 1, -258, -188 ) --[[ @ 0]]
	ArenaDailyBonus:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ArenaDailyBonus ) --[[ @ 0]]
	self.ArenaDailyBonus = ArenaDailyBonus --[[ @ 0]]
	
	local ArenaEventProgressButton = CoD.ArenaEventProgressButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	self:addElement( ArenaEventProgressButton ) --[[ @ 0]]
	self.ArenaEventProgressButton = ArenaEventProgressButton --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "IsPC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "gameClientDataUpdate", function ( model )
		local f19_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorArenaMatchmaking( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "CharacterSelection", "clientUpdated", function ( model )
		local f20_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorArenaMatchmaking( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyNav", function ( model )
		local f21_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorArenaMatchmaking( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local3.id = "MapVote" --[[ @ 0]]
	if CoD.isPC then
		MapVotePC.id = "MapVotePC" --[[ @ 0]]
	end
	DirectorReadyButton.id = "DirectorReadyButton" --[[ @ 0]]
	DirectorPreGameButton.id = "DirectorPreGameButton" --[[ @ 0]]
	ArenaEventButtons.id = "ArenaEventButtons" --[[ @ 0]]
	ArenaEventProgressButton.id = "ArenaEventProgressButton" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local11 = self --[[ @ 0]]
	CoD.LobbyUtility.InitOverheadNamesPreLobby( f1_arg0, f1_arg1, overheadNameContainer ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.directorArenaMatchmaking.__onClose = function ( f22_arg0 )
	f22_arg0.StageNotificationContainer:close() --[[ @ 0]]
	f22_arg0.TopBar:close() --[[ @ 0]]
	f22_arg0.MapVote:close() --[[ @ 0]]
	f22_arg0.MapVotePC:close() --[[ @ 0]]
	f22_arg0.DirectorReadyButton:close() --[[ @ 0]]
	f22_arg0.overheadNameContainer:close() --[[ @ 0]]
	f22_arg0.DirectorPreGameButton:close() --[[ @ 0]]
	f22_arg0.ArenaEventButtons:close() --[[ @ 0]]
	f22_arg0.ArenaDailyBonus:close() --[[ @ 0]]
	f22_arg0.ArenaEventProgressButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
