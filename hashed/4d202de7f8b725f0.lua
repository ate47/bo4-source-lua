-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]

CoD.AmmoWidgetEquipmentText = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.__defaultWidth = 72 --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.__defaultHeight = 24 --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "hudItems.hawkActive", 0 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetEquipmentText ) --[[ @ 0]]
	self.id = "AmmoWidgetEquipmentText" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HeroAbilityUseString = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -36, 36, 0, 0, 0, 24 ) --[[ @ 0]]
	HeroAbilityUseString:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) --[[ @ 0]]
				if not f2_local0 then
					f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
					if not f2_local0 then
						f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) --[[ @ 0]]
					end
				end
				return f2_local0
			end
		},
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysTrue()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	local ExtraTextPC = HeroAbilityUseString --[[ @ 0]]
	local f1_local3 = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( ExtraTextPC, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f7_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ExtraTextPC = HeroAbilityUseString --[[ @ 0]]
	f1_local3 = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( ExtraTextPC, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f8_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ExtraTextPC = HeroAbilityUseString --[[ @ 0]]
	f1_local3 = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( ExtraTextPC, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]], function ( f9_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:appendEventHandler( "input_source_changed", function ( f10_arg0, f10_arg1 )
		f10_arg1.menu = f10_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( HeroAbilityUseString, f10_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ExtraTextPC = HeroAbilityUseString --[[ @ 0]]
	f1_local3 = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( ExtraTextPC, f1_local4.LastInput, function ( f11_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2EC61C43D90FCF56" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_29E6A8D0F83F4FC6" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	self:addElement( HeroAbilityUseString ) --[[ @ 0]]
	self.HeroAbilityUseString = HeroAbilityUseString --[[ @ 0]]
	
	f1_local3 = nil --[[ @ 0]]
	self.ExtraText = LUI.UIElement.createFake() --[[ @ 0]]
	ExtraTextPC = nil --[[ @ 0]]
	
	ExtraTextPC = LUI.UIText.new( 0, 1, 0, 0, 0.5, 0.5, -59, -41 ) --[[ @ 0]]
	ExtraTextPC:setAlpha( 0 ) --[[ @ 0]]
	ExtraTextPC:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2E5D33208E8D6267" ) ) --[[ @ 0]]
	ExtraTextPC:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ExtraTextPC:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ExtraTextPC:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( ExtraTextPC ) --[[ @ 0]]
	self.ExtraTextPC = ExtraTextPC --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HawkDeployed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "hudItems.hawkActive", 0 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "id" )
			end
		},
		{
			stateName = "Restricted",
			condition = function ( menu, element, event )
				return CoD.AmmoWidgetUtility.IsAbilityRestricted( self )
			end
		},
		{
			stateName = "InUse",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_inuse"] )
			end
		},
		{
			stateName = "Deployed",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "PowerBasedEmptyCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 0 )
			end
		},
		{
			stateName = "PowerBasedChargingAndReady",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"hash_61CF78BFE5F942F1"] ) and not IsWarzone()
			end
		},
		{
			stateName = "PowerBasedCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and not IsWarzone()
			end
		},
		{
			stateName = "PowerBased",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_hidden"] )
			end
		},
		{
			stateName = "Bounty",
			condition = function ( menu, element, event )
				return CoD.BountyHunterUtility.GameTypeIsBounty( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local5, f1_local6["hudItems.hawkActive"], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "hudItems.hawkActive"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local4 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local4( f1_local5, f1_local6["lobbyRoot.lobbyNav"], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.__resetProperties = function ( f27_arg0 )
	f27_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
	f27_arg0.ExtraText:completeAnimation() --[[ @ 0]]
	f27_arg0.ExtraTextPC:completeAnimation() --[[ @ 0]]
	f27_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f27_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.ExtraText:setAlpha( 0 ) --[[ @ 0]]
	f27_arg0.ExtraTextPC:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f28_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f28_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f28_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f28_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	HawkDeployed = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f29_arg0.ExtraText:completeAnimation() --[[ @ 0]]
			f29_arg0.ExtraText:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.ExtraText ) --[[ @ 0]]
			f29_arg0.ExtraTextPC:completeAnimation() --[[ @ 0]]
			f29_arg0.ExtraTextPC:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.ExtraTextPC ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f30_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f30_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	Restricted = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f31_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f31_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	InUse = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f32_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f32_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f32_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Deployed = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f33_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f33_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f33_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedEmptyCharging = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f34_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f34_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f34_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedChargingAndReady = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f35_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	PowerBasedCharging = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBased = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f37_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Bounty = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetEquipmentText.__onClose = function ( f39_arg0 )
	f39_arg0.HeroAbilityUseString:close() --[[ @ 0]]
end
 --[[ @ 0]]
