-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:4d1abdd4f5f088b8" ) --[[ @ 0]]
require( "x64:137b2f51af159fc1" ) --[[ @ 0]]

CoD.DupeMeter = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DupeMeter.__defaultWidth = 349 --[[ @ 0]]
CoD.DupeMeter.__defaultHeight = 34 --[[ @ 0]]
CoD.DupeMeter.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DupeMeter ) --[[ @ 0]]
	self.id = "DupeMeter" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backer = CoD.DupeMeterBacker.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( Backer ) --[[ @ 0]]
	self.Backer = Backer --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, 171, 346, 0, 0, 3.5, 31.5 ) --[[ @ 0]]
	Box:setRGB( 0.07, 0.07, 0.07 ) --[[ @ 0]]
	Box:setAlpha( 0.05 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 171, 346, 0.09, 0.09, 0.5, 28.5 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local Label = LUI.UIText.new( 0.5, 0.5, -168.5, -9.5, 0, 0, 11, 25 ) --[[ @ 0]]
	Label:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Label:setAlpha( 0.5 ) --[[ @ 0]]
	Label:setText( LocalizeToUpperString( @"ui/reroll_meter" ) ) --[[ @ 0]]
	Label:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Label:setLetterSpacing( 2 ) --[[ @ 0]]
	Label:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Label:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( Label ) --[[ @ 0]]
	self.Label = Label --[[ @ 0]]
	
	local DupeMeter = CoD.DupeMeterInternal.new( f1_arg0, f1_arg1, 0, 0, 176, 294, 0, 0, 4.5, 31.5 ) --[[ @ 0]]
	DupeMeter:linkToElementModel( self, nil, false, function ( model )
		DupeMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DupeMeter ) --[[ @ 0]]
	self.DupeMeter = DupeMeter --[[ @ 0]]
	
	local Number = LUI.UIText.new( 0, 0, 304, 343, 0, 0, 6, 28 ) --[[ @ 0]]
	Number:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Number:setAlpha( 0 ) --[[ @ 0]]
	Number:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	Number:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Number:setLetterSpacing( 1 ) --[[ @ 0]]
	Number:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Number:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Number ) --[[ @ 0]]
	self.Number = Number --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "AllRngUnlocked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "LootStreamProgress.allRngUnlocked" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["LootStreamProgress.allRngUnlocked"], function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "LootStreamProgress.allRngUnlocked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DupeMeter.__resetProperties = function ( f5_arg0 )
	f5_arg0.Label:completeAnimation() --[[ @ 0]]
	f5_arg0.Number:completeAnimation() --[[ @ 0]]
	f5_arg0.DupeMeter:completeAnimation() --[[ @ 0]]
	f5_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f5_arg0.Box:completeAnimation() --[[ @ 0]]
	f5_arg0.Backer:completeAnimation() --[[ @ 0]]
	f5_arg0.Label:setAlpha( 0.5 ) --[[ @ 0]]
	f5_arg0.Number:setAlpha( 0 ) --[[ @ 0]]
	f5_arg0.DupeMeter:setAlpha( 1 ) --[[ @ 0]]
	f5_arg0.NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	f5_arg0.Box:setAlpha( 0.05 ) --[[ @ 0]]
	f5_arg0.Backer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DupeMeter.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	AllRngUnlocked = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f7_arg0.Backer:completeAnimation() --[[ @ 0]]
			f7_arg0.Backer:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.Backer ) --[[ @ 0]]
			f7_arg0.Box:completeAnimation() --[[ @ 0]]
			f7_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.Box ) --[[ @ 0]]
			f7_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f7_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f7_arg0.Label:completeAnimation() --[[ @ 0]]
			f7_arg0.Label:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.Label ) --[[ @ 0]]
			f7_arg0.DupeMeter:completeAnimation() --[[ @ 0]]
			f7_arg0.DupeMeter:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.DupeMeter ) --[[ @ 0]]
			f7_arg0.Number:completeAnimation() --[[ @ 0]]
			f7_arg0.Number:setAlpha( 0 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.Number ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DupeMeter.__onClose = function ( f8_arg0 )
	f8_arg0.Backer:close() --[[ @ 0]]
	f8_arg0.DupeMeter:close() --[[ @ 0]]
end
 --[[ @ 0]]
