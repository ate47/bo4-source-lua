-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:5f94c92ca68ec385" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/colorpicker/emblemeditorgradienttypebutton" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/colorpicker/emblemgradientcolorbutton" ) --[[ @ 0]]

CoD.EmblemEditorGradient = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorGradient.__defaultWidth = 880 --[[ @ 0]]
CoD.EmblemEditorGradient.__defaultHeight = 240 --[[ @ 0]]
CoD.EmblemEditorGradient.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorGradient ) --[[ @ 0]]
	self.id = "EmblemEditorGradient" --[[ @ 0]]
	self.soundSet = "SelectColor_ColorSwatchPicker" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ColorPickerBkgd0 = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ColorPickerBkgd0:setAlpha( 0.5 ) --[[ @ 0]]
	ColorPickerBkgd0:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ColorPickerBkgd0:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ColorPickerBkgd0 ) --[[ @ 0]]
	self.ColorPickerBkgd0 = ColorPickerBkgd0 --[[ @ 0]]
	
	local BarBacking = LUI.UIImage.new( 0, 0, 0, 880, 0, 0, 0, 240 ) --[[ @ 0]]
	BarBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( BarBacking ) --[[ @ 0]]
	self.BarBacking = BarBacking --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 1, -1, 1, 0, 1, -1, 1 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local gradientSliderWidget = CoD.EmblemEditorGradientTypeButton.new( f1_arg0, f1_arg1, 0, 0, 37.5, 844.5, 0, 0, 160, 240 ) --[[ @ 0]]
	gradientSliderWidget:mergeStateConditions( {
		{
			stateName = "SingleSliderState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemSelectedLayerProperties.gradient_type", Enum[@"customizationgradienttype"][@"hash_1A7C637A09DA3D16"] )
			end
		},
		{
			stateName = "ContourState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemSelectedLayerProperties.gradient_type", Enum[@"customizationgradienttype"][@"hash_1A7C637A09DA3D16"] )
			end
		}
	} ) --[[ @ 0]]
	local gradientColor1 = gradientSliderWidget --[[ @ 0]]
	local gradientColor0 = gradientSliderWidget.subscribeToModel --[[ @ 0]]
	local GradientTypeList = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	gradientColor0( gradientColor1, GradientTypeList["Emblem.EmblemSelectedLayerProperties.gradient_type"], function ( f4_arg0 )
		f1_arg0:updateElementState( gradientSliderWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "Emblem.EmblemSelectedLayerProperties.gradient_type"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( gradientSliderWidget ) --[[ @ 0]]
	self.gradientSliderWidget = gradientSliderWidget --[[ @ 0]]
	
	gradientColor0 = CoD.EmblemGradientColorButton.new( f1_arg0, f1_arg1, 0, 0, 37.5, 417.5, 0, 0, 96, 144 ) --[[ @ 0]]
	gradientColor0:mergeStateConditions( {
		{
			stateName = "NoColor",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "Emblem.EmblemProperties.isColor0NoColor", 1 )
			end
		}
	} ) --[[ @ 0]]
	GradientTypeList = gradientColor0 --[[ @ 0]]
	gradientColor1 = gradientColor0.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	gradientColor1( GradientTypeList, f1_local8["Emblem.EmblemProperties.isColor0NoColor"], function ( f6_arg0 )
		f1_arg0:updateElementState( gradientColor0, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "Emblem.EmblemProperties.isColor0NoColor"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	gradientColor0:subscribeToGlobalModel( f1_arg1, "EmblemSelectedLayerColor", "color", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			gradientColor0.color:setRGB( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	GradientTypeList = gradientColor0 --[[ @ 0]]
	gradientColor1 = gradientColor0.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	gradientColor1( GradientTypeList, f1_local8["Emblem.EmblemProperties.isGradientMode"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GradientTypeList = gradientColor0 --[[ @ 0]]
	gradientColor1 = gradientColor0.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	gradientColor1( GradientTypeList, f1_local8["Emblem.EmblemProperties.colorMode"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	gradientColor0:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.CraftUtility.EmblemGradient_Color0GainFocus( self, self.gradientColor0, f1_arg1 ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( gradientColor0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_BackFromColorPicker( self, element, menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_ShowSwatchContainer( self, element, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( gradientColor0 ) --[[ @ 0]]
	self.gradientColor0 = gradientColor0 --[[ @ 0]]
	
	gradientColor1 = CoD.EmblemGradientColorButton.new( f1_arg0, f1_arg1, 0, 0, 464.5, 844.5, 0, 0, 96, 144 ) --[[ @ 0]]
	gradientColor1:mergeStateConditions( {
		{
			stateName = "NoColor",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "Emblem.EmblemProperties.isColor1NoColor", 1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local8 = gradientColor1 --[[ @ 0]]
	GradientTypeList = gradientColor1.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GradientTypeList( f1_local8, f1_local9["Emblem.EmblemProperties.isColor1NoColor"], function ( f14_arg0 )
		f1_arg0:updateElementState( gradientColor1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "Emblem.EmblemProperties.isColor1NoColor"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	gradientColor1:subscribeToGlobalModel( f1_arg1, "EmblemSelectedLayerColor1", "color", function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			gradientColor1.color:setRGB( f15_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local8 = gradientColor1 --[[ @ 0]]
	GradientTypeList = gradientColor1.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GradientTypeList( f1_local8, f1_local9["Emblem.EmblemProperties.isGradientMode"], function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = gradientColor1 --[[ @ 0]]
	GradientTypeList = gradientColor1.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GradientTypeList( f1_local8, f1_local9["Emblem.EmblemProperties.colorMode"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	gradientColor1:registerEventHandler( "gain_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f18_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f18_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.CraftUtility.EmblemGradient_Color1GainFocus( self, self.gradientColor1, f1_arg1 ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( gradientColor1, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_BackFromColorPicker( self, element, menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.CraftUtility.EmblemGradient_ShowSwatchContainer( self, element, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 1 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Emblem.EmblemProperties.colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_none"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( gradientColor1 ) --[[ @ 0]]
	self.gradientColor1 = gradientColor1 --[[ @ 0]]
	
	GradientTypeList = LUI.UIList.new( f1_arg0, f1_arg1, 21, 0, nil, false, false, false, false ) --[[ @ 0]]
	GradientTypeList:mergeStateConditions( {
		{
			stateName = "Selected",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsGradientButtonSelected( self, element, f1_arg1 ) and not IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local9 = GradientTypeList --[[ @ 0]]
	f1_local8 = GradientTypeList.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.EmblemSelectedLayerProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.gradient_type, function ( f23_arg0 )
		f1_arg0:updateElementState( GradientTypeList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "gradient_type"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GradientTypeList:appendEventHandler( "input_source_changed", function ( f24_arg0, f24_arg1 )
		f24_arg1.menu = f24_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( GradientTypeList, f24_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local9 = GradientTypeList --[[ @ 0]]
	f1_local8 = GradientTypeList.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.LastInput, function ( f25_arg0 )
		f1_arg0:updateElementState( GradientTypeList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	GradientTypeList:setLeftRight( 0, 0, 37.5, 844.5 ) --[[ @ 0]]
	GradientTypeList:setTopBottom( 0, 0, 32.5, 72.5 ) --[[ @ 0]]
	GradientTypeList:setWidgetType( CoD.CraftGradientButton ) --[[ @ 0]]
	GradientTypeList:setHorizontalCount( 3 ) --[[ @ 0]]
	GradientTypeList:setSpacing( 21 ) --[[ @ 0]]
	GradientTypeList:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	GradientTypeList:setDataSource( "GradientButtonList" ) --[[ @ 0]]
	GradientTypeList:linkToElementModel( GradientTypeList, "disabled", true, function ( model, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	GradientTypeList:registerEventHandler( "gain_focus", function ( element, event )
		local f27_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f27_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f27_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f27_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( GradientTypeList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not IsDisabled( element, controller ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsDisabled( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( GradientTypeList ) --[[ @ 0]]
	self.GradientTypeList = GradientTypeList --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Color0State",
			condition = function ( menu, element, event )
				local f30_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualTo( f1_arg1, "isGradientMode", 1 ) --[[ @ 0]]
				if f30_local0 then
					f30_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorContainerState", Enum[@"customizationcolornum"][@"customization_color_gradient"] ) --[[ @ 0]]
					if f30_local0 then
						f30_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorMode", Enum[@"customizationcolornum"][@"customization_color_0"] ) --[[ @ 0]]
					end
				end
				return f30_local0
			end
		},
		{
			stateName = "Color1State",
			condition = function ( menu, element, event )
				local f31_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualTo( f1_arg1, "isGradientMode", 1 ) --[[ @ 0]]
				if f31_local0 then
					f31_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorContainerState", Enum[@"customizationcolornum"][@"customization_color_gradient"] ) --[[ @ 0]]
					if f31_local0 then
						f31_local0 = CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorMode", Enum[@"customizationcolornum"][@"customization_color_1"] ) --[[ @ 0]]
					end
				end
				return f31_local0
			end
		},
		{
			stateName = "Visible_NotEditing",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEmblemEditorPropertyEqualTo( f1_arg1, "isGradientMode", 1 ) and CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorContainerState", Enum[@"customizationcolornum"][@"customization_color_gradient"] )
			end
		}
	} ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.isGradientMode, function ( f33_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f33_arg0:get(),
			modelName = "isGradientMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.colorContainerState, function ( f34_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "colorContainerState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.colorMode, function ( f35_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "colorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	gradientSliderWidget.id = "gradientSliderWidget" --[[ @ 0]]
	gradientColor0.id = "gradientColor0" --[[ @ 0]]
	gradientColor1.id = "gradientColor1" --[[ @ 0]]
	GradientTypeList.id = "GradientTypeList" --[[ @ 0]]
	self.__defaultFocus = gradientColor1 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorGradient.__resetProperties = function ( f36_arg0 )
	f36_arg0.gradientSliderWidget:completeAnimation() --[[ @ 0]]
	f36_arg0.gradientColor1:completeAnimation() --[[ @ 0]]
	f36_arg0.gradientColor0:completeAnimation() --[[ @ 0]]
	f36_arg0.ColorPickerBkgd0:completeAnimation() --[[ @ 0]]
	f36_arg0.Frame:completeAnimation() --[[ @ 0]]
	f36_arg0.BarBacking:completeAnimation() --[[ @ 0]]
	f36_arg0.GradientTypeList:completeAnimation() --[[ @ 0]]
	f36_arg0.gradientSliderWidget:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.gradientColor1:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.gradientColor0:setAlpha( 1 ) --[[ @ 0]]
	f36_arg0.ColorPickerBkgd0:setAlpha( 0.5 ) --[[ @ 0]]
	f36_arg0.Frame:setAlpha( 0.2 ) --[[ @ 0]]
	f36_arg0.BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	f36_arg0.GradientTypeList:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditorGradient.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f37_arg0.ColorPickerBkgd0:completeAnimation() --[[ @ 0]]
			f37_arg0.ColorPickerBkgd0:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.ColorPickerBkgd0 ) --[[ @ 0]]
			f37_arg0.BarBacking:completeAnimation() --[[ @ 0]]
			f37_arg0.BarBacking:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.BarBacking ) --[[ @ 0]]
			f37_arg0.Frame:completeAnimation() --[[ @ 0]]
			f37_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.Frame ) --[[ @ 0]]
			f37_arg0.gradientSliderWidget:completeAnimation() --[[ @ 0]]
			f37_arg0.gradientSliderWidget:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.gradientSliderWidget ) --[[ @ 0]]
			f37_arg0.gradientColor0:completeAnimation() --[[ @ 0]]
			f37_arg0.gradientColor0:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.gradientColor0 ) --[[ @ 0]]
			f37_arg0.gradientColor1:completeAnimation() --[[ @ 0]]
			f37_arg0.gradientColor1:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.gradientColor1 ) --[[ @ 0]]
			f37_arg0.GradientTypeList:completeAnimation() --[[ @ 0]]
			f37_arg0.GradientTypeList:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.GradientTypeList ) --[[ @ 0]]
		end
	},
	Color0State = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f38_arg0.gradientSliderWidget:completeAnimation() --[[ @ 0]]
			f38_arg0.gradientSliderWidget:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.gradientSliderWidget ) --[[ @ 0]]
			f38_arg0.gradientColor1:completeAnimation() --[[ @ 0]]
			f38_arg0.gradientColor1:setAlpha( 0.1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.gradientColor1 ) --[[ @ 0]]
		end
	},
	Color1State = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f39_arg0.gradientSliderWidget:completeAnimation() --[[ @ 0]]
			f39_arg0.gradientSliderWidget:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.gradientSliderWidget ) --[[ @ 0]]
			f39_arg0.gradientColor0:completeAnimation() --[[ @ 0]]
			f39_arg0.gradientColor0:setAlpha( 0.1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.gradientColor0 ) --[[ @ 0]]
		end
	},
	Visible_NotEditing = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditorGradient.__onClose = function ( f41_arg0 )
	f41_arg0.gradientSliderWidget:close() --[[ @ 0]]
	f41_arg0.gradientColor0:close() --[[ @ 0]]
	f41_arg0.gradientColor1:close() --[[ @ 0]]
	f41_arg0.GradientTypeList:close() --[[ @ 0]]
end
 --[[ @ 0]]
