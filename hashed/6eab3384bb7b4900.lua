-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:3bc87ac3fc76bb82" ) --[[ @ 0]]
require( "x64:5f791681246fe2b6" ) --[[ @ 0]]
require( "x64:2ac8a32561bb24f9" ) --[[ @ 0]]
require( "x64:2a390335687d572b" ) --[[ @ 0]]
require( "x64:56225e991e55c7d6" ) --[[ @ 0]]
require( "ui/uieditor/widgets/store/storecommontextbacking" ) --[[ @ 0]]

CoD.SupplyChainDetails_InfoPanel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.__defaultWidth = 558 --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.__defaultHeight = 246 --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SupplyChainDetails_InfoPanel ) --[[ @ 0]]
	self.id = "SupplyChainDetails_InfoPanel" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( 0, 0, 6, 552, 0, 0, 6.5, 231.5 ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, 6, 552, 0, 0, 6.5, 231.5 ) --[[ @ 0]]
	Box:setAlpha( 0.01 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local DotTiledBacking = CoD.StoreCommonTextBacking.new( f1_arg0, f1_arg1, 0, 0, 6, 552, 0, 0, 7, 232 ) --[[ @ 0]]
	DotTiledBacking:setAlpha( 0.15 ) --[[ @ 0]]
	self:addElement( DotTiledBacking ) --[[ @ 0]]
	self.DotTiledBacking = DotTiledBacking --[[ @ 0]]
	
	local TitleAndDesc = CoD.SupplyChainDetails_InfoPanelTitleAndDesc.new( f1_arg0, f1_arg1, 0, 0, 27, 547, 0, 0, 15.5, 231.5 ) --[[ @ 0]]
	TitleAndDesc:linkToElementModel( self, nil, false, function ( model )
		TitleAndDesc:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TitleAndDesc ) --[[ @ 0]]
	self.TitleAndDesc = TitleAndDesc --[[ @ 0]]
	
	local ButtonTopLine9Slice = LUI.UIImage.new( 0, 0, 0, 558, 0, 0, 0, 20 ) --[[ @ 0]]
	ButtonTopLine9Slice:setAlpha( 0.25 ) --[[ @ 0]]
	ButtonTopLine9Slice:setImage( RegisterImage( @"uie_ui_menu_cac_secondary_button_top_line" ) ) --[[ @ 0]]
	ButtonTopLine9Slice:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	ButtonTopLine9Slice:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	ButtonTopLine9Slice:setupNineSliceShader( 120, 10 ) --[[ @ 0]]
	self:addElement( ButtonTopLine9Slice ) --[[ @ 0]]
	self.ButtonTopLine9Slice = ButtonTopLine9Slice --[[ @ 0]]
	
	local ButtonBottomLine9Slice = LUI.UIImage.new( 0, 0, 0, 558, 0, 0, 224, 244 ) --[[ @ 0]]
	ButtonBottomLine9Slice:setAlpha( 0.25 ) --[[ @ 0]]
	ButtonBottomLine9Slice:setImage( RegisterImage( @"uie_ui_menu_cac_secondary_button_top_line" ) ) --[[ @ 0]]
	ButtonBottomLine9Slice:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	ButtonBottomLine9Slice:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	ButtonBottomLine9Slice:setupNineSliceShader( 120, 10 ) --[[ @ 0]]
	self:addElement( ButtonBottomLine9Slice ) --[[ @ 0]]
	self.ButtonBottomLine9Slice = ButtonBottomLine9Slice --[[ @ 0]]
	
	local HeaderGlow = LUI.UIImage.new( 0, 0, 2, 556, 0, 0, 12, 44 ) --[[ @ 0]]
	HeaderGlow:setAlpha( 0.1 ) --[[ @ 0]]
	HeaderGlow:setImage( RegisterImage( @"uie_ui_menu_common_box_glow" ) ) --[[ @ 0]]
	HeaderGlow:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	HeaderGlow:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	HeaderGlow:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	HeaderGlow:linkToElementModel( self, "rarity", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			HeaderGlow:setRGB( CoD.BlackMarketUtility.LootRarityToColor( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HeaderGlow ) --[[ @ 0]]
	self.HeaderGlow = HeaderGlow --[[ @ 0]]
	
	local ContractRarityHeaderBackground = LUI.UIImage.new( 0.13, 0.13, -68.5, 477.5, 0, 0, 16, 40 ) --[[ @ 0]]
	ContractRarityHeaderBackground:linkToElementModel( self, "rarity", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ContractRarityHeaderBackground:setRGB( CoD.BlackMarketUtility.LootRarityToColorDark( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeaderBackground ) --[[ @ 0]]
	self.ContractRarityHeaderBackground = ContractRarityHeaderBackground --[[ @ 0]]
	
	local PixelGridTiledBacking = LUI.UIImage.new( 0, 0, 5.5, 551.5, 0, 0, 16, 40 ) --[[ @ 0]]
	PixelGridTiledBacking:setAlpha( 0.05 ) --[[ @ 0]]
	PixelGridTiledBacking:setImage( RegisterImage( @"uie_ui_hud_notifications_pixelpattern" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	PixelGridTiledBacking:setupNineSliceShader( 128, 128 ) --[[ @ 0]]
	self:addElement( PixelGridTiledBacking ) --[[ @ 0]]
	self.PixelGridTiledBacking = PixelGridTiledBacking --[[ @ 0]]
	
	local ContractRarityHeader = CoD.ContractRarityHeader.new( f1_arg0, f1_arg1, 0, 0, 28, 228, 0, 0, 17, 43 ) --[[ @ 0]]
	ContractRarityHeader:linkToElementModel( self, nil, false, function ( model )
		ContractRarityHeader:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeader ) --[[ @ 0]]
	self.ContractRarityHeader = ContractRarityHeader --[[ @ 0]]
	
	local DupeStatus = CoD.DupeMarker.new( f1_arg0, f1_arg1, 0, 0, 4, 368, 0, 0, -25, -5 ) --[[ @ 0]]
	DupeStatus:linkToElementModel( self, nil, false, function ( model )
		DupeStatus:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DupeStatus ) --[[ @ 0]]
	self.DupeStatus = DupeStatus --[[ @ 0]]
	
	local ButtonPromptContainer = CoD.SupplyChainDetails_ButtonPromptContainer.new( f1_arg0, f1_arg1, 0, 0, 1, 301, 0, 0, -39, 0 ) --[[ @ 0]]
	ButtonPromptContainer:setAlpha( 0 ) --[[ @ 0]]
	ButtonPromptContainer:linkToElementModel( self, nil, false, function ( model )
		ButtonPromptContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ButtonPromptContainer ) --[[ @ 0]]
	self.ButtonPromptContainer = ButtonPromptContainer --[[ @ 0]]
	
	local Seasonal = CoD.ContractSeasonalOverlay_MetadataPanel.new( f1_arg0, f1_arg1, 0, 0, 6, 552, 0, 0, 16, 41 ) --[[ @ 0]]
	Seasonal:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "seasonal" )
			end
		}
	} ) --[[ @ 0]]
	Seasonal:linkToElementModel( Seasonal, "seasonal", true, function ( model )
		f1_arg0:updateElementState( Seasonal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "seasonal"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Seasonal:linkToElementModel( self, nil, false, function ( model )
		Seasonal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Seasonal ) --[[ @ 0]]
	self.Seasonal = Seasonal --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NoRarityWithButtons",
			condition = function ( menu, element, event )
				local f11_local0 --[[ @ 0]]
				if not MenuPropertyIsTrue( menu, "__hideSupplyChainDetailsButtons" ) then
					f11_local0 = CoD.BlackMarketUtility.ShowSupplyChainDetailsButtonPrompts( element, f1_arg1 ) --[[ @ 0]]
					if f11_local0 then
						f11_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "rarity", Enum[@"LootRarityType"][@"hash_18556B83CAD0D180"] ) --[[ @ 0]]
						if f11_local0 then
							f11_local0 = not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "itemCategory", @"specialist" ) --[[ @ 0]]
						end
					end
				else
					f11_local0 = false --[[ @ 0]]
				end
				return f11_local0
			end
		},
		{
			stateName = "ButtonPrompts",
			condition = function ( menu, element, event )
				local f12_local0 --[[ @ 0]]
				if not MenuPropertyIsTrue( menu, "__hideSupplyChainDetailsButtons" ) then
					f12_local0 = CoD.BlackMarketUtility.ShowSupplyChainDetailsButtonPrompts( element, f1_arg1 ) --[[ @ 0]]
				else
					f12_local0 = false --[[ @ 0]]
				end
				return f12_local0
			end
		},
		{
			stateName = "NoRarity",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "rarity", Enum[@"LootRarityType"][@"hash_18556B83CAD0D180"] ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "itemCategory", @"specialist" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "allowTogglePreview", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "allowTogglePreview"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "gesture_index", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gesture_index"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "movieName", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "movieName"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "allowFrozenMoment", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "allowFrozenMoment"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "rarity", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rarity"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "itemCategory", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemCategory"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.__resetProperties = function ( f20_arg0 )
	f20_arg0.DupeStatus:completeAnimation() --[[ @ 0]]
	f20_arg0.ButtonPromptContainer:completeAnimation() --[[ @ 0]]
	f20_arg0.ContractRarityHeaderBackground:completeAnimation() --[[ @ 0]]
	f20_arg0.PixelGridTiledBacking:completeAnimation() --[[ @ 0]]
	f20_arg0.ContractRarityHeader:completeAnimation() --[[ @ 0]]
	f20_arg0.HeaderGlow:completeAnimation() --[[ @ 0]]
	f20_arg0.DupeStatus:setTopBottom( 0, 0, -25, -5 ) --[[ @ 0]]
	f20_arg0.ButtonPromptContainer:setAlpha( 0 ) --[[ @ 0]]
	f20_arg0.ContractRarityHeaderBackground:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.PixelGridTiledBacking:setAlpha( 0.05 ) --[[ @ 0]]
	f20_arg0.ContractRarityHeader:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.HeaderGlow:setAlpha( 0.1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NoRarityWithButtons = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f22_arg0.HeaderGlow:completeAnimation() --[[ @ 0]]
			f22_arg0.HeaderGlow:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.HeaderGlow ) --[[ @ 0]]
			f22_arg0.ContractRarityHeaderBackground:completeAnimation() --[[ @ 0]]
			f22_arg0.ContractRarityHeaderBackground:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ContractRarityHeaderBackground ) --[[ @ 0]]
			f22_arg0.PixelGridTiledBacking:completeAnimation() --[[ @ 0]]
			f22_arg0.PixelGridTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.PixelGridTiledBacking ) --[[ @ 0]]
			f22_arg0.ContractRarityHeader:completeAnimation() --[[ @ 0]]
			f22_arg0.ContractRarityHeader:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ContractRarityHeader ) --[[ @ 0]]
			f22_arg0.DupeStatus:completeAnimation() --[[ @ 0]]
			f22_arg0.DupeStatus:setTopBottom( 0, 0, -63, -43 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.DupeStatus ) --[[ @ 0]]
			f22_arg0.ButtonPromptContainer:completeAnimation() --[[ @ 0]]
			f22_arg0.ButtonPromptContainer:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ButtonPromptContainer ) --[[ @ 0]]
		end
	},
	ButtonPrompts = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f23_arg0.DupeStatus:completeAnimation() --[[ @ 0]]
			f23_arg0.DupeStatus:setTopBottom( 0, 0, -63, -43 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.DupeStatus ) --[[ @ 0]]
			f23_arg0.ButtonPromptContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.ButtonPromptContainer:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.ButtonPromptContainer ) --[[ @ 0]]
		end
	},
	NoRarity = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f24_arg0.HeaderGlow:completeAnimation() --[[ @ 0]]
			f24_arg0.HeaderGlow:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.HeaderGlow ) --[[ @ 0]]
			f24_arg0.ContractRarityHeaderBackground:completeAnimation() --[[ @ 0]]
			f24_arg0.ContractRarityHeaderBackground:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.ContractRarityHeaderBackground ) --[[ @ 0]]
			f24_arg0.PixelGridTiledBacking:completeAnimation() --[[ @ 0]]
			f24_arg0.PixelGridTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PixelGridTiledBacking ) --[[ @ 0]]
			f24_arg0.ContractRarityHeader:completeAnimation() --[[ @ 0]]
			f24_arg0.ContractRarityHeader:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.ContractRarityHeader ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.SupplyChainDetails_InfoPanel.__onClose = function ( f25_arg0 )
	f25_arg0.DotTiledBacking:close() --[[ @ 0]]
	f25_arg0.TitleAndDesc:close() --[[ @ 0]]
	f25_arg0.HeaderGlow:close() --[[ @ 0]]
	f25_arg0.ContractRarityHeaderBackground:close() --[[ @ 0]]
	f25_arg0.ContractRarityHeader:close() --[[ @ 0]]
	f25_arg0.DupeStatus:close() --[[ @ 0]]
	f25_arg0.ButtonPromptContainer:close() --[[ @ 0]]
	f25_arg0.Seasonal:close() --[[ @ 0]]
end
 --[[ @ 0]]
