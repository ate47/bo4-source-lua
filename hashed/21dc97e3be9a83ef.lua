-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:a5aca312227765b" ) --[[ @ 0]]
require( "x64:470f9f39fc048c29" ) --[[ @ 0]]

CoD.FallMeter_PlayerInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.FallMeter_PlayerInfo.__defaultWidth = 38 --[[ @ 0]]
CoD.FallMeter_PlayerInfo.__defaultHeight = 8 --[[ @ 0]]
CoD.FallMeter_PlayerInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.FallMeter_PlayerInfo ) --[[ @ 0]]
	self.id = "FallMeter_PlayerInfo" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local PositionLine = LUI.UIImage.new( 0, 1, 0, 0, -0.03, 1.03, 0, 0 ) --[[ @ 0]]
	self:addElement( PositionLine ) --[[ @ 0]]
	self.PositionLine = PositionLine --[[ @ 0]]
	
	local PositionLineTextureOverlay = LUI.UIImage.new( 0.5, 0.5, -20.5, 20.5, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	PositionLineTextureOverlay:setImage( RegisterImage( @"uie_ui_hud_wz_indicatorbar" ) ) --[[ @ 0]]
	self:addElement( PositionLineTextureOverlay ) --[[ @ 0]]
	self.PositionLineTextureOverlay = PositionLineTextureOverlay --[[ @ 0]]
	
	local PositionLineGlow = LUI.UIImage.new( 0.5, 0.5, -20.5, 20.5, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	PositionLineGlow:setImage( RegisterImage( @"uie_ui_hud_wz_indicatorbar" ) ) --[[ @ 0]]
	PositionLineGlow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( PositionLineGlow ) --[[ @ 0]]
	self.PositionLineGlow = PositionLineGlow --[[ @ 0]]
	
	local Bloom = LUI.UIImage.new( 0.5, 0.5, -40, 40, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	Bloom:setAlpha( 0.5 ) --[[ @ 0]]
	Bloom:setImage( RegisterImage( @"uie_ui_menu_cac_preview_class_highlight_glow" ) ) --[[ @ 0]]
	Bloom:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Bloom ) --[[ @ 0]]
	self.Bloom = Bloom --[[ @ 0]]
	
	local PositionDot = LUI.UIImage.new( 1.08, 1.08, 0, 2, 0.5, 0.5, -1, 1 ) --[[ @ 0]]
	PositionDot:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( PositionDot ) --[[ @ 0]]
	self.PositionDot = PositionDot --[[ @ 0]]
	
	local AscentArrow = CoD.FallMeter_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -16, 16, 0, 0, -21, -5 ) --[[ @ 0]]
	AscentArrow:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueLessThan( f1_arg1, "HUDItems", "fallVelocity", -5 )
			end
		}
	} ) --[[ @ 0]]
	local DescentArrow2 = AscentArrow --[[ @ 0]]
	local DescentArrow1 = AscentArrow.subscribeToModel --[[ @ 0]]
	local DescentArrow3 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	DescentArrow1( DescentArrow2, DescentArrow3.fallVelocity, function ( f3_arg0 )
		f1_arg0:updateElementState( AscentArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "fallVelocity"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AscentArrow:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	AscentArrow:setZRot( 180 ) --[[ @ 0]]
	self:addElement( AscentArrow ) --[[ @ 0]]
	self.AscentArrow = AscentArrow --[[ @ 0]]
	
	DescentArrow1 = CoD.FallMeter_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -16, 16, 1, 1, 5, 21 ) --[[ @ 0]]
	DescentArrow1:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "HUDItems", "fallVelocity", 5 )
			end
		}
	} ) --[[ @ 0]]
	DescentArrow3 = DescentArrow1 --[[ @ 0]]
	DescentArrow2 = DescentArrow1.subscribeToModel --[[ @ 0]]
	local Speed = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	DescentArrow2( DescentArrow3, Speed.fallVelocity, function ( f5_arg0 )
		f1_arg0:updateElementState( DescentArrow1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "fallVelocity"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DescentArrow1:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	self:addElement( DescentArrow1 ) --[[ @ 0]]
	self.DescentArrow1 = DescentArrow1 --[[ @ 0]]
	
	DescentArrow2 = CoD.FallMeter_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -16, 16, 1, 1, 21, 37 ) --[[ @ 0]]
	DescentArrow2:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "HUDItems", "fallVelocity", 75 )
			end
		}
	} ) --[[ @ 0]]
	Speed = DescentArrow2 --[[ @ 0]]
	DescentArrow3 = DescentArrow2.subscribeToModel --[[ @ 0]]
	local ArrowFrameL = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	DescentArrow3( Speed, ArrowFrameL.fallVelocity, function ( f7_arg0 )
		f1_arg0:updateElementState( DescentArrow2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "fallVelocity"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DescentArrow2:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	self:addElement( DescentArrow2 ) --[[ @ 0]]
	self.DescentArrow2 = DescentArrow2 --[[ @ 0]]
	
	DescentArrow3 = CoD.FallMeter_Arrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -16, 16, 1, 1, 37, 53 ) --[[ @ 0]]
	DescentArrow3:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "HUDItems", "fallVelocity", 110 )
			end
		}
	} ) --[[ @ 0]]
	ArrowFrameL = DescentArrow3 --[[ @ 0]]
	Speed = DescentArrow3.subscribeToModel --[[ @ 0]]
	local ArrowL = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	Speed( ArrowFrameL, ArrowL.fallVelocity, function ( f9_arg0 )
		f1_arg0:updateElementState( DescentArrow3, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "fallVelocity"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DescentArrow3:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	self:addElement( DescentArrow3 ) --[[ @ 0]]
	self.DescentArrow3 = DescentArrow3 --[[ @ 0]]
	
	Speed = CoD.FallMeter_Speed.new( f1_arg0, f1_arg1, 0, 0, -85, -15, 0.5, 0.5, -19, 21 ) --[[ @ 0]]
	self:addElement( Speed ) --[[ @ 0]]
	self.Speed = Speed --[[ @ 0]]
	
	ArrowFrameL = LUI.UIImage.new( 0, 0, -19.5, -4.5, 0, 0, -3.5, 11.5 ) --[[ @ 0]]
	ArrowFrameL:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ArrowFrameL:setZRot( -45 ) --[[ @ 0]]
	ArrowFrameL:setImage( RegisterImage( @"hash_662E760CB652A6EE" ) ) --[[ @ 0]]
	self:addElement( ArrowFrameL ) --[[ @ 0]]
	self.ArrowFrameL = ArrowFrameL --[[ @ 0]]
	
	ArrowL = LUI.UIImage.new( 0, 0, -15, -10, 0.5, 0.5, -5.5, 5.5 ) --[[ @ 0]]
	ArrowL:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ArrowL:setScale( 1.4, 1.4 ) --[[ @ 0]]
	ArrowL:setImage( RegisterImage( @"uie_ui_hud_common_triangle" ) ) --[[ @ 0]]
	self:addElement( ArrowL ) --[[ @ 0]]
	self.ArrowL = ArrowL --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.FallMeter_PlayerInfo.__onClose = function ( f10_arg0 )
	f10_arg0.AscentArrow:close() --[[ @ 0]]
	f10_arg0.DescentArrow1:close() --[[ @ 0]]
	f10_arg0.DescentArrow2:close() --[[ @ 0]]
	f10_arg0.DescentArrow3:close() --[[ @ 0]]
	f10_arg0.Speed:close() --[[ @ 0]]
end
 --[[ @ 0]]
