-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
CoD.WeaponBribeAcquiredCheck = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponBribeAcquiredCheck.__defaultWidth = 64 --[[ @ 0]]
CoD.WeaponBribeAcquiredCheck.__defaultHeight = 64 --[[ @ 0]]
CoD.WeaponBribeAcquiredCheck.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponBribeAcquiredCheck ) --[[ @ 0]]
	self.id = "WeaponBribeAcquiredCheck" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CheckBacking = LUI.UIImage.new( 0, 0, 0, 64, 0, 0, 0, 64 ) --[[ @ 0]]
	CheckBacking:setRGB( 0.16, 0.65, 0.07 ) --[[ @ 0]]
	CheckBacking:setAlpha( 0.8 ) --[[ @ 0]]
	CheckBacking:setImage( RegisterImage( @"hash_10B8A6E9D12CAE19" ) ) --[[ @ 0]]
	self:addElement( CheckBacking ) --[[ @ 0]]
	self.CheckBacking = CheckBacking --[[ @ 0]]
	
	local CheckMark = LUI.UIImage.new( 0, 0, 0, 64, 0, 0, 0, 64 ) --[[ @ 0]]
	CheckMark:setRGB( 0.08, 0.65, 0 ) --[[ @ 0]]
	CheckMark:setImage( RegisterImage( @"hash_2661A673636FB8C3" ) ) --[[ @ 0]]
	self:addElement( CheckMark ) --[[ @ 0]]
	self.CheckMark = CheckMark --[[ @ 0]]
	
	local CheckGlow = LUI.UIImage.new( 0, 0, 0, 64, 0, 0, 0, 64 ) --[[ @ 0]]
	CheckGlow:setRGB( 0, 1, 0.02 ) --[[ @ 0]]
	CheckGlow:setImage( RegisterImage( @"hash_213FA817ECDA23A5" ) ) --[[ @ 0]]
	CheckGlow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( CheckGlow ) --[[ @ 0]]
	self.CheckGlow = CheckGlow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "UnOwned",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "purchased", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "purchased"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WeaponBribeAcquiredCheck.__resetProperties = function ( f4_arg0 )
	f4_arg0.CheckGlow:completeAnimation() --[[ @ 0]]
	f4_arg0.CheckMark:completeAnimation() --[[ @ 0]]
	f4_arg0.CheckBacking:completeAnimation() --[[ @ 0]]
	f4_arg0.CheckGlow:setAlpha( 1 ) --[[ @ 0]]
	f4_arg0.CheckMark:setAlpha( 1 ) --[[ @ 0]]
	f4_arg0.CheckBacking:setAlpha( 0.8 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponBribeAcquiredCheck.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f5_arg0, f5_arg1 )
			f5_arg0:__resetProperties() --[[ @ 0]]
			f5_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f5_local0 = function ( f6_arg0 )
				local f6_local0 = function ( f7_arg0 )
					f7_arg0:beginAnimation( 1520, Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
					f7_arg0:setAlpha( 0.3 ) --[[ @ 0]]
					f7_arg0:registerEventHandler( "transition_complete_keyframe", f5_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f5_arg0.CheckGlow:beginAnimation( 980, Enum[@"luitween"][@"luitween_ease_out"] ) --[[ @ 0]]
				f5_arg0.CheckGlow:setAlpha( 0.8 ) --[[ @ 0]]
				f5_arg0.CheckGlow:registerEventHandler( "interrupted_keyframe", f5_arg0.clipInterrupted ) --[[ @ 0]]
				f5_arg0.CheckGlow:registerEventHandler( "transition_complete_keyframe", f6_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f5_arg0.CheckGlow:completeAnimation() --[[ @ 0]]
			f5_arg0.CheckGlow:setAlpha( 0.3 ) --[[ @ 0]]
			f5_local0( f5_arg0.CheckGlow ) --[[ @ 0]]
			f5_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	UnOwned = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f8_arg0.CheckBacking:completeAnimation() --[[ @ 0]]
			f8_arg0.CheckBacking:setAlpha( 0 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.CheckBacking ) --[[ @ 0]]
			f8_arg0.CheckMark:completeAnimation() --[[ @ 0]]
			f8_arg0.CheckMark:setAlpha( 0 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.CheckMark ) --[[ @ 0]]
			f8_arg0.CheckGlow:completeAnimation() --[[ @ 0]]
			f8_arg0.CheckGlow:setAlpha( 0 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.CheckGlow ) --[[ @ 0]]
			f8_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
