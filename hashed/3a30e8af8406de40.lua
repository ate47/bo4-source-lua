-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/buttonprompt" ) --[[ @ 0]]
require( "x64:5cd8f1336652f81e" ) --[[ @ 0]]

CoD.KillcamFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.KillcamFrame.__defaultWidth = 1920 --[[ @ 0]]
CoD.KillcamFrame.__defaultHeight = 1080 --[[ @ 0]]
CoD.KillcamFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.KillcamFrame ) --[[ @ 0]]
	self.id = "KillcamFrame" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Left = LUI.UIImage.new( 0, 0, 0, 104, 0, 0, 0, 1080 ) --[[ @ 0]]
	Left:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Left ) --[[ @ 0]]
	self.Left = Left --[[ @ 0]]
	
	local Top = LUI.UIImage.new( 0, 0, 0, 1920, 0, 0, 0, 609 ) --[[ @ 0]]
	Top:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Top ) --[[ @ 0]]
	self.Top = Top --[[ @ 0]]
	
	local Right = LUI.UIImage.new( 0, 0, 512, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	Right:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Right ) --[[ @ 0]]
	self.Right = Right --[[ @ 0]]
	
	local Bottom = LUI.UIImage.new( 0, 0, 0, 1920, 0, 0, 849, 1080 ) --[[ @ 0]]
	Bottom:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Bottom ) --[[ @ 0]]
	self.Bottom = Bottom --[[ @ 0]]
	
	local KillcamCover = CoD.KillcamCover.new( f1_arg0, f1_arg1, 0, 0, 104, 512, 0, 0, 609, 849 ) --[[ @ 0]]
	self:addElement( KillcamCover ) --[[ @ 0]]
	self.KillcamCover = KillcamCover --[[ @ 0]]
	
	local ButtonPrompt = CoD.buttonprompt.new( f1_arg0, f1_arg1, 0, 0, 229, 387, 0, 0, 621, 671 ) --[[ @ 0]]
	ButtonPrompt:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.killcamActive", 0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = ButtonPrompt --[[ @ 0]]
	local f1_local8 = ButtonPrompt.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["hudItems.killcamActive"], function ( f3_arg0 )
		f1_arg0:updateElementState( ButtonPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "hudItems.killcamActive"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
	ButtonPrompt.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_170675323ADAA7D6" ) ) --[[ @ 0]]
	ButtonPrompt:subscribeToGlobalModel( f1_arg1, "Controller", "alt1_button_image", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ButtonPrompt.buttonPromptImage:setImage( RegisterImage( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ButtonPrompt ) --[[ @ 0]]
	self.ButtonPrompt = ButtonPrompt --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Killcam",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f7_arg2, f7_arg3, f7_arg4 )
		if IsSelfInState( self, "DefaultState" ) then
			SetElementState( self, self.KillcamCover, controller, "InstantOn" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local8 = self --[[ @ 0]]
	CoD.SpawnSelectionUtility.CalculateKillcamViewportSize( self, f1_arg1, f1_arg0, self.KillcamCover ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.KillcamFrame.__resetProperties = function ( f8_arg0 )
	f8_arg0.Bottom:completeAnimation() --[[ @ 0]]
	f8_arg0.Right:completeAnimation() --[[ @ 0]]
	f8_arg0.Top:completeAnimation() --[[ @ 0]]
	f8_arg0.Left:completeAnimation() --[[ @ 0]]
	f8_arg0.KillcamCover:completeAnimation() --[[ @ 0]]
	f8_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
	f8_arg0.Bottom:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.Right:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.Top:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.Left:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.KillcamCover:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.KillcamFrame.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f10_arg0.Left:completeAnimation() --[[ @ 0]]
			f10_arg0.Left:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Left ) --[[ @ 0]]
			f10_arg0.Top:completeAnimation() --[[ @ 0]]
			f10_arg0.Top:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Top ) --[[ @ 0]]
			f10_arg0.Right:completeAnimation() --[[ @ 0]]
			f10_arg0.Right:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Right ) --[[ @ 0]]
			f10_arg0.Bottom:completeAnimation() --[[ @ 0]]
			f10_arg0.Bottom:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.Bottom ) --[[ @ 0]]
			f10_arg0.KillcamCover:completeAnimation() --[[ @ 0]]
			f10_arg0.KillcamCover:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.KillcamCover ) --[[ @ 0]]
			f10_arg0.ButtonPrompt:completeAnimation() --[[ @ 0]]
			f10_arg0.ButtonPrompt:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.ButtonPrompt ) --[[ @ 0]]
		end
	},
	Killcam = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.KillcamFrame.__onClose = function ( f12_arg0 )
	f12_arg0.KillcamCover:close() --[[ @ 0]]
	f12_arg0.ButtonPrompt:close() --[[ @ 0]]
end
 --[[ @ 0]]
