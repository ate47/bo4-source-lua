-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:18d52912a320cd2e" ) --[[ @ 0]]
require( "x64:1e01da863e7cc28f" ) --[[ @ 0]]
require( "x64:69690c6fa0e7be3f" ) --[[ @ 0]]
require( "x64:58e954fb331b89f8" ) --[[ @ 0]]
require( "x64:5203538cb29e5bca" ) --[[ @ 0]]
require( "x64:8d447a0d3920f3e" ) --[[ @ 0]]

CoD.PlayerWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PlayerWidget.__defaultWidth = 358 --[[ @ 0]]
CoD.PlayerWidget.__defaultHeight = 112 --[[ @ 0]]
CoD.PlayerWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "hudItems.lastStand.progress", 0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "hudItems.lastStand.beingRevived", 0 ) --[[ @ 0]]
	self:setClass( CoD.PlayerWidget ) --[[ @ 0]]
	self.id = "PlayerWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ArmorPortraitBG = CoD.ArmorPortraitBG.new( f1_arg0, f1_arg1, 0, 0, 307, 399, 0, 0, 22, 86 ) --[[ @ 0]]
	ArmorPortraitBG:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ArmorPortraitBG:setModel( f2_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ArmorPortraitBG ) --[[ @ 0]]
	self.ArmorPortraitBG = ArmorPortraitBG --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0, 0, 21, 334, 0, 0, 22, 88 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local Backer = LUI.UIImage.new( 0, 0, -32.5, 334.5, 0, 0, 8, 101 ) --[[ @ 0]]
	Backer:setAlpha( 0 ) --[[ @ 0]]
	Backer:setImage( RegisterImage( @"uie_ui_hud_core_ammo_widget_backer" ) ) --[[ @ 0]]
	Backer:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_feather_edges" ) ) --[[ @ 0]]
	Backer:setShaderVector( 0, 0.05, 0.2, 0.05, 0.2 ) --[[ @ 0]]
	self:addElement( Backer ) --[[ @ 0]]
	self.Backer = Backer --[[ @ 0]]
	
	local PanelLight = LUI.UIImage.new( 0, 0, 22.5, 103.5, 0, 0, 21, 87 ) --[[ @ 0]]
	PanelLight:setRGB( 0.22, 0.21, 0.19 ) --[[ @ 0]]
	PanelLight:setAlpha( 0.75 ) --[[ @ 0]]
	self:addElement( PanelLight ) --[[ @ 0]]
	self.PanelLight = PanelLight --[[ @ 0]]
	
	local PanelDark = LUI.UIImage.new( 0, 0, 103, 334, 0, 0, 21, 87 ) --[[ @ 0]]
	PanelDark:setRGB( 0.18, 0.17, 0.16 ) --[[ @ 0]]
	PanelDark:setAlpha( 0.94 ) --[[ @ 0]]
	self:addElement( PanelDark ) --[[ @ 0]]
	self.PanelDark = PanelDark --[[ @ 0]]
	
	local headshotBarBacking = CoD.AmmoWidget_SpecialistEscalation.new( f1_arg0, f1_arg1, 0, 0, 21, 299, 0, 0, -2, 110 ) --[[ @ 0]]
	self:addElement( headshotBarBacking ) --[[ @ 0]]
	self.headshotBarBacking = headshotBarBacking --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 0, -6, 344, 0, 0, 7, 97 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"hash_5DABC2B0CF140508" ) ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local AmmoHeal_Prompt = CoD.AmmoWidget_Prompt.new( f1_arg0, f1_arg1, 0, 0, 94, 158, 0, 0, 93, 105 ) --[[ @ 0]]
	AmmoHeal_Prompt:mergeStateConditions( {
		{
			stateName = "LowHealth",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsClientModelValueGreaterThan( f1_arg1, "health.healthValue", 0 ) and CoD.ModelUtility.IsClientModelValueLessThanOrEqualTo( f1_arg1, "health.healthValue", 75 )
			end
		}
	} ) --[[ @ 0]]
	local LEDgraph = AmmoHeal_Prompt --[[ @ 0]]
	local BleedOutProgress = AmmoHeal_Prompt.subscribeToModel --[[ @ 0]]
	local LEDscreen = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f1_arg1 ) ) --[[ @ 0]]
	BleedOutProgress( LEDgraph, LEDscreen["health.healthValue"], function ( f4_arg0 )
		f1_arg0:updateElementState( AmmoHeal_Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "health.healthValue"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AmmoHeal_Prompt:setAlpha( 0 ) --[[ @ 0]]
	AmmoHeal_Prompt.PromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_38CADD3D78C04519" ) ) --[[ @ 0]]
	self:addElement( AmmoHeal_Prompt ) --[[ @ 0]]
	self.AmmoHeal_Prompt = AmmoHeal_Prompt --[[ @ 0]]
	
	BleedOutProgress = CoD.progressBar.new( f1_arg0, f1_arg1, 0, 0, 157, 315, 0, 0, 51, 63 ) --[[ @ 0]]
	BleedOutProgress:setAlpha( 0 ) --[[ @ 0]]
	BleedOutProgress:subscribeToGlobalModel( f1_arg1, "HUDItems", "laststand.progress", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			BleedOutProgress.ProgressBar:setShaderVector( 0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BleedOutProgress ) --[[ @ 0]]
	self.BleedOutProgress = BleedOutProgress --[[ @ 0]]
	
	LEDgraph = LUI.UIImage.new( 0, 0, -6.5, 343.5, 0, 0, 7, 97 ) --[[ @ 0]]
	LEDgraph:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LEDgraph:setAlpha( 0.75 ) --[[ @ 0]]
	LEDgraph:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_graph" ) ) --[[ @ 0]]
	self:addElement( LEDgraph ) --[[ @ 0]]
	self.LEDgraph = LEDgraph --[[ @ 0]]
	
	LEDscreen = LUI.UIImage.new( 0, 0, -5.5, 344.5, 0, 0, 7, 97 ) --[[ @ 0]]
	LEDscreen:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LEDscreen:setAlpha( 0.2 ) --[[ @ 0]]
	LEDscreen:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_screen" ) ) --[[ @ 0]]
	self:addElement( LEDscreen ) --[[ @ 0]]
	self.LEDscreen = LEDscreen --[[ @ 0]]
	
	local HealthValue = CoD.HealthInfo.new( f1_arg0, f1_arg1, 0, 0, -17, 221, 0, 0, 1, 167 ) --[[ @ 0]]
	HealthValue:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			HealthValue:setModel( f6_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HealthValue ) --[[ @ 0]]
	self.HealthValue = HealthValue --[[ @ 0]]
	
	local Sheen = LUI.UIImage.new( 0, 0, -6, 344, 0, 0, 6, 96 ) --[[ @ 0]]
	Sheen:setAlpha( 0.01 ) --[[ @ 0]]
	Sheen:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_sheen" ) ) --[[ @ 0]]
	self:addElement( Sheen ) --[[ @ 0]]
	self.Sheen = Sheen --[[ @ 0]]
	
	local DemoPip = CoD.DemoPip.new( f1_arg0, f1_arg1, 0, 0, 21, 26, 0, 0, 93, 98 ) --[[ @ 0]]
	self:addElement( DemoPip ) --[[ @ 0]]
	self.DemoPip = DemoPip --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "WZLastStand",
			condition = function ( menu, element, event )
				return IsWarzone() and CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local15 = self --[[ @ 0]]
	local f1_local16 = self.subscribeToModel --[[ @ 0]]
	local f1_local17 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["lobbyRoot.lobbyNav"], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["hudItems.lastStand.progress"], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "hudItems.lastStand.progress"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["hudItems.lastStand.beingRevived"], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "hudItems.lastStand.beingRevived"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PlayerWidget.__resetProperties = function ( f11_arg0 )
	f11_arg0.BleedOutProgress:completeAnimation() --[[ @ 0]]
	f11_arg0.HealthValue:completeAnimation() --[[ @ 0]]
	f11_arg0.BleedOutProgress:setAlpha( 0 ) --[[ @ 0]]
	f11_arg0.HealthValue:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f12_arg0.BleedOutProgress:completeAnimation() --[[ @ 0]]
			f12_arg0.BleedOutProgress:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.BleedOutProgress ) --[[ @ 0]]
			f12_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f12_arg0.HealthValue:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.HealthValue ) --[[ @ 0]]
		end
	},
	WZLastStand = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.BleedOutProgress:completeAnimation() --[[ @ 0]]
			f13_arg0.BleedOutProgress:setAlpha( 1 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.BleedOutProgress ) --[[ @ 0]]
			f13_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f13_arg0.HealthValue:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.HealthValue ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PlayerWidget.__onClose = function ( f14_arg0 )
	f14_arg0.ArmorPortraitBG:close() --[[ @ 0]]
	f14_arg0.headshotBarBacking:close() --[[ @ 0]]
	f14_arg0.AmmoHeal_Prompt:close() --[[ @ 0]]
	f14_arg0.BleedOutProgress:close() --[[ @ 0]]
	f14_arg0.HealthValue:close() --[[ @ 0]]
	f14_arg0.DemoPip:close() --[[ @ 0]]
end
 --[[ @ 0]]
