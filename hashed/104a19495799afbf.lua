-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "x64:21effcf31a0feeda" ) --[[ @ 0]]
require( "x64:4ea97a561b13454" ) --[[ @ 0]]

CoD.AmmoWidgetZM_ClipInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.__defaultWidth = 120 --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.__defaultHeight = 80 --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetZM_ClipInfo ) --[[ @ 0]]
	self.id = "AmmoWidgetZM_ClipInfo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Clip = CoD.AmmoWidgetZM_ClipContainerNew.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 1.5, 51.5 ) --[[ @ 0]]
	Clip:mergeStateConditions( {
		{
			stateName = "LowAmmo",
			condition = function ( menu, element, event )
				local f2_local0 = IsLowAmmoClip( f1_arg1 ) --[[ @ 0]]
				if f2_local0 then
					f2_local0 = WeaponHasAmmo( f1_arg1 ) --[[ @ 0]]
					if f2_local0 then
						f2_local0 = not IsSignatureWeaponInUse( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f2_local0
			end
		},
		{
			stateName = "NoAmmo",
			condition = function ( menu, element, event )
				local f3_local0 --[[ @ 0]]
				if not WeaponHasAmmo( f1_arg1 ) then
					f3_local0 = CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = not CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenAmmo( f1_arg1 ) --[[ @ 0]]
					end
				else
					f3_local0 = false --[[ @ 0]]
				end
				return f3_local0
			end
		},
		{
			stateName = "Hero",
			condition = function ( menu, element, event )
				return IsSignatureWeaponInUse( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local ClipHero = Clip --[[ @ 0]]
	local ClipDual = Clip.subscribeToModel --[[ @ 0]]
	local ClipOnly = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, ClipOnly.ammoLow, function ( f5_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "ammoLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	ClipOnly = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, ClipOnly.weaponHasAmmo, function ( f6_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "weaponHasAmmo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	ClipOnly = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, ClipOnly.equippedWeaponReference, function ( f7_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "equippedWeaponReference"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	ClipOnly = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, ClipOnly.viewmodelWeaponName, function ( f8_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Clip:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			Clip.Clip.ClipShadow:setText( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Clip:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			Clip.Clip.Clip:setText( f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Clip:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			Clip.ClipContainerPress.Clip:setText( f11_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Clip ) --[[ @ 0]]
	self.Clip = Clip --[[ @ 0]]
	
	ClipDual = CoD.AmmoWidgetZM_ClipContainerNew.new( f1_arg0, f1_arg1, 1, 1, -198, -10, 1, 1, -89.5, 27.5 ) --[[ @ 0]]
	ClipDual:mergeStateConditions( {
		{
			stateName = "LowAmmo",
			condition = function ( menu, element, event )
				return IsLowAmmoDWClip( f1_arg1 )
			end
		},
		{
			stateName = "NoAmmo",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hero",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ClipOnly = ClipDual --[[ @ 0]]
	ClipHero = ClipDual.subscribeToModel --[[ @ 0]]
	local TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipHero( ClipOnly, TotalAmmoLabel.ammoDWLow, function ( f15_arg0 )
		f1_arg0:updateElementState( ClipDual, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "ammoDWLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipDual:setAlpha( 0 ) --[[ @ 0]]
	ClipDual:setZoom( 3 ) --[[ @ 0]]
	ClipDual:linkToElementModel( self, "ammoInDWClip", true, function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			ClipDual.Clip.ClipShadow:setText( f16_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClipDual:linkToElementModel( self, "ammoInDWClip", true, function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			ClipDual.Clip.Clip:setText( f17_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClipDual:linkToElementModel( self, "ammoInDWClip", true, function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			ClipDual.ClipContainerPress.Clip:setText( f18_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClipDual ) --[[ @ 0]]
	self.ClipDual = ClipDual --[[ @ 0]]
	
	ClipHero = CoD.AmmoWidgetZM_ClipContainerHero.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 17, 17 ) --[[ @ 0]]
	ClipHero:mergeStateConditions( {
		{
			stateName = "Weapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "PlayerAbilities", "playerGadget3.state", Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] )
			end
		},
		{
			stateName = "Ability",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	TotalAmmoLabel = ClipHero --[[ @ 0]]
	ClipOnly = ClipHero.subscribeToModel --[[ @ 0]]
	local TabBottomLine = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	ClipOnly( TotalAmmoLabel, TabBottomLine["playerGadget2.state"], function ( f21_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "playerGadget2.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TotalAmmoLabel = ClipHero --[[ @ 0]]
	ClipOnly = ClipHero.subscribeToModel --[[ @ 0]]
	TabBottomLine = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	ClipOnly( TotalAmmoLabel, TabBottomLine["playerGadget3.state"], function ( f22_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "playerGadget3.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TotalAmmoLabel = ClipHero --[[ @ 0]]
	ClipOnly = ClipHero.subscribeToModel --[[ @ 0]]
	TabBottomLine = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipOnly( TotalAmmoLabel, TabBottomLine.viewmodelWeaponName, function ( f23_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero:setAlpha( 0 ) --[[ @ 0]]
	ClipHero:setZoom( 3 ) --[[ @ 0]]
	self:addElement( ClipHero ) --[[ @ 0]]
	self.ClipHero = ClipHero --[[ @ 0]]
	
	ClipOnly = CoD.AmmoWidgetZM_ClipContainerNew.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0.5, 0.5, -37.5, 37.5 ) --[[ @ 0]]
	ClipOnly:mergeStateConditions( {
		{
			stateName = "LowAmmo",
			condition = function ( menu, element, event )
				return IsLowAmmoClip( f1_arg1 ) and WeaponHasAmmo( f1_arg1 )
			end
		},
		{
			stateName = "NoAmmo",
			condition = function ( menu, element, event )
				local f25_local0 --[[ @ 0]]
				if not WeaponHasAmmo( f1_arg1 ) then
					f25_local0 = CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) --[[ @ 0]]
				else
					f25_local0 = false --[[ @ 0]]
				end
				return f25_local0
			end
		},
		{
			stateName = "Hero",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	TabBottomLine = ClipOnly --[[ @ 0]]
	TotalAmmoLabel = ClipOnly.subscribeToModel --[[ @ 0]]
	local TabBottomLine2 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( TabBottomLine, TabBottomLine2.ammoLow, function ( f27_arg0 )
		f1_arg0:updateElementState( ClipOnly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "ammoLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabBottomLine = ClipOnly --[[ @ 0]]
	TotalAmmoLabel = ClipOnly.subscribeToModel --[[ @ 0]]
	TabBottomLine2 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( TabBottomLine, TabBottomLine2.weaponHasAmmo, function ( f28_arg0 )
		f1_arg0:updateElementState( ClipOnly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "weaponHasAmmo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TabBottomLine = ClipOnly --[[ @ 0]]
	TotalAmmoLabel = ClipOnly.subscribeToModel --[[ @ 0]]
	TabBottomLine2 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( TabBottomLine, TabBottomLine2.equippedWeaponReference, function ( f29_arg0 )
		f1_arg0:updateElementState( ClipOnly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "equippedWeaponReference"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipOnly:setAlpha( 0 ) --[[ @ 0]]
	ClipOnly:setScale( 0.8, 0.8 ) --[[ @ 0]]
	ClipOnly:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			ClipOnly.Clip.ClipShadow:setText( f30_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClipOnly:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= nil then
			ClipOnly.Clip.Clip:setText( f31_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClipOnly:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= nil then
			ClipOnly.ClipContainerPress.Clip:setText( f32_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClipOnly ) --[[ @ 0]]
	self.ClipOnly = ClipOnly --[[ @ 0]]
	
	TotalAmmoLabel = LUI.UIText.new( 0, 1, 0, 0, 0, 0, 55, 75 ) --[[ @ 0]]
	TotalAmmoLabel:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	TotalAmmoLabel:setTTF( "skorzhen" ) --[[ @ 0]]
	TotalAmmoLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	TotalAmmoLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	TotalAmmoLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	TotalAmmoLabel:linkToElementModel( self, "ammoStock", true, function ( model )
		local f33_local0 = model:get() --[[ @ 0]]
		if f33_local0 ~= nil then
			TotalAmmoLabel:setText( f33_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TotalAmmoLabel ) --[[ @ 0]]
	self.TotalAmmoLabel = TotalAmmoLabel --[[ @ 0]]
	
	TabBottomLine = LUI.UIImage.new( 0.2, 0.8, 0, 0, 0, 0, 46.5, 50.5 ) --[[ @ 0]]
	TabBottomLine:setAlpha( 0.5 ) --[[ @ 0]]
	TabBottomLine:setImage( RegisterImage( @"uie_ui_menu_common_tab_line_bottom" ) ) --[[ @ 0]]
	TabBottomLine:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TabBottomLine ) --[[ @ 0]]
	self.TabBottomLine = TabBottomLine --[[ @ 0]]
	
	TabBottomLine2 = LUI.UIImage.new( 0.1, 0.1, 30.5, 65.5, 0, 0, 23, 18 ) --[[ @ 0]]
	TabBottomLine2:setAlpha( 0 ) --[[ @ 0]]
	TabBottomLine2:setZRot( 90 ) --[[ @ 0]]
	TabBottomLine2:setImage( RegisterImage( @"uie_ui_menu_common_tab_line_bottom" ) ) --[[ @ 0]]
	TabBottomLine2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TabBottomLine2 ) --[[ @ 0]]
	self.TabBottomLine2 = TabBottomLine2 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HiddenGamemodeWeapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenAmmo( f1_arg1 )
			end
		},
		{
			stateName = "HeroWeapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 )
			end
		},
		{
			stateName = "ClipOnly",
			condition = function ( menu, element, event )
				return CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) and CoD.WeaponUtility.CurrentZMWeaponIsClipOnlyAmmo( f1_arg1 )
			end
		},
		{
			stateName = "WeaponDual",
			condition = function ( menu, element, event )
				local f37_local0 = CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) --[[ @ 0]]
				if f37_local0 then
					f37_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "CurrentWeapon", "ammoInDWClip", -1 ) --[[ @ 0]]
					if f37_local0 then
						f37_local0 = not CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenDWAmmo( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f37_local0
			end
		},
		{
			stateName = "Weapon",
			condition = function ( menu, element, event )
				return CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) and not IsWeaponClipGreaterThanOrEqualTo( f1_arg1, 100 )
			end
		},
		{
			stateName = "Weapon3Digits",
			condition = function ( menu, element, event )
				return CoD.WeaponUtility.CurrentZMWeaponUsesAmmo( f1_arg1 ) and IsWeaponClipGreaterThanOrEqualTo( f1_arg1, 100 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.viewmodelWeaponName, function ( f40_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f40_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["playerGadget2.state"], function ( f41_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f41_arg0:get(),
			modelName = "playerGadget2.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["playerGadget3.state"], function ( f42_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f42_arg0:get(),
			modelName = "playerGadget3.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.equippedWeaponReference, function ( f43_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f43_arg0:get(),
			modelName = "equippedWeaponReference"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.isClipOnly, function ( f44_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f44_arg0:get(),
			modelName = "isClipOnly"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.ammoInDWClip, function ( f45_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f45_arg0:get(),
			modelName = "ammoInDWClip"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.clipMaxAmmo, function ( f46_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f46_arg0:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.__resetProperties = function ( f47_arg0 )
	f47_arg0.TabBottomLine2:completeAnimation() --[[ @ 0]]
	f47_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
	f47_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
	f47_arg0.ClipOnly:completeAnimation() --[[ @ 0]]
	f47_arg0.ClipHero:completeAnimation() --[[ @ 0]]
	f47_arg0.ClipDual:completeAnimation() --[[ @ 0]]
	f47_arg0.Clip:completeAnimation() --[[ @ 0]]
	f47_arg0.TabBottomLine2:setLeftRight( 0.1, 0.1, 30.5, 65.5 ) --[[ @ 0]]
	f47_arg0.TabBottomLine2:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.TabBottomLine:setAlpha( 0.5 ) --[[ @ 0]]
	f47_arg0.TotalAmmoLabel:setAlpha( 1 ) --[[ @ 0]]
	f47_arg0.ClipOnly:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f47_arg0.ClipHero:setTopBottom( 0, 1, 17, 17 ) --[[ @ 0]]
	f47_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f47_arg0.ClipHero:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.ClipDual:setLeftRight( 1, 1, -198, -10 ) --[[ @ 0]]
	f47_arg0.ClipDual:setTopBottom( 1, 1, -89.5, 27.5 ) --[[ @ 0]]
	f47_arg0.ClipDual:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f47_arg0.Clip:setTopBottom( 0, 0, 1.5, 51.5 ) --[[ @ 0]]
	f47_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f48_arg0.Clip:completeAnimation() --[[ @ 0]]
			f48_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.Clip ) --[[ @ 0]]
			f48_arg0.ClipDual:completeAnimation() --[[ @ 0]]
			f48_arg0.ClipDual:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.ClipDual ) --[[ @ 0]]
			f48_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f48_arg0.ClipHero:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.ClipHero ) --[[ @ 0]]
			f48_arg0.ClipOnly:completeAnimation() --[[ @ 0]]
			f48_arg0.ClipOnly:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.ClipOnly ) --[[ @ 0]]
			f48_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f48_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.TotalAmmoLabel ) --[[ @ 0]]
			f48_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
			f48_arg0.TabBottomLine:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.TabBottomLine ) --[[ @ 0]]
			f48_arg0.TabBottomLine2:completeAnimation() --[[ @ 0]]
			f48_arg0.TabBottomLine2:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.TabBottomLine2 ) --[[ @ 0]]
		end
	},
	HiddenGamemodeWeapon = {
		DefaultClip = function ( f49_arg0, f49_arg1 )
			f49_arg0:__resetProperties() --[[ @ 0]]
			f49_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f49_arg0.Clip:completeAnimation() --[[ @ 0]]
			f49_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.Clip ) --[[ @ 0]]
			f49_arg0.ClipDual:completeAnimation() --[[ @ 0]]
			f49_arg0.ClipDual:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ClipDual ) --[[ @ 0]]
			f49_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f49_arg0.ClipHero:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ClipHero ) --[[ @ 0]]
			f49_arg0.ClipOnly:completeAnimation() --[[ @ 0]]
			f49_arg0.ClipOnly:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ClipOnly ) --[[ @ 0]]
			f49_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f49_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.TotalAmmoLabel ) --[[ @ 0]]
			f49_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
			f49_arg0.TabBottomLine:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.TabBottomLine ) --[[ @ 0]]
			f49_arg0.TabBottomLine2:completeAnimation() --[[ @ 0]]
			f49_arg0.TabBottomLine2:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.TabBottomLine2 ) --[[ @ 0]]
		end
	},
	HeroWeapon = {
		DefaultClip = function ( f50_arg0, f50_arg1 )
			f50_arg0:__resetProperties() --[[ @ 0]]
			f50_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f50_arg0.Clip:completeAnimation() --[[ @ 0]]
			f50_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.Clip ) --[[ @ 0]]
			f50_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f50_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f50_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f50_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f50_arg0.ClipHero:setAlpha( 1 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.ClipHero ) --[[ @ 0]]
			f50_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f50_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.TotalAmmoLabel ) --[[ @ 0]]
			f50_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
			f50_arg0.TabBottomLine:setAlpha( 0 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.TabBottomLine ) --[[ @ 0]]
		end
	},
	ClipOnly = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f51_arg0.Clip:completeAnimation() --[[ @ 0]]
			f51_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f51_arg0.Clip:setTopBottom( 0, 0, 2.5, 77.5 ) --[[ @ 0]]
			f51_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.Clip ) --[[ @ 0]]
			f51_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f51_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f51_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f51_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f51_arg0.ClipHero:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.ClipHero ) --[[ @ 0]]
			f51_arg0.ClipOnly:completeAnimation() --[[ @ 0]]
			f51_arg0.ClipOnly:setAlpha( 1 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.ClipOnly ) --[[ @ 0]]
			f51_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f51_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.TotalAmmoLabel ) --[[ @ 0]]
			f51_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
			f51_arg0.TabBottomLine:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.TabBottomLine ) --[[ @ 0]]
		end
	},
	WeaponDual = {
		DefaultClip = function ( f52_arg0, f52_arg1 )
			f52_arg0:__resetProperties() --[[ @ 0]]
			f52_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f52_arg0.Clip:completeAnimation() --[[ @ 0]]
			f52_arg0.Clip:setLeftRight( 0.45, 0.95, 0, 0 ) --[[ @ 0]]
			f52_arg0.Clip:setTopBottom( 0, 0, 10.5, 44.5 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.Clip ) --[[ @ 0]]
			f52_arg0.ClipDual:completeAnimation() --[[ @ 0]]
			f52_arg0.ClipDual:setLeftRight( 0, 0.5, 6, 6 ) --[[ @ 0]]
			f52_arg0.ClipDual:setTopBottom( 0, 0, 10.5, 44.5 ) --[[ @ 0]]
			f52_arg0.ClipDual:setAlpha( 1 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.ClipDual ) --[[ @ 0]]
			f52_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f52_arg0.ClipHero:setLeftRight( 1, 1, -218, -30 ) --[[ @ 0]]
			f52_arg0.ClipHero:setTopBottom( 1, 1, -78.5, 38.5 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.ClipHero ) --[[ @ 0]]
			f52_arg0.TabBottomLine2:completeAnimation() --[[ @ 0]]
			f52_arg0.TabBottomLine2:setLeftRight( 0.1, 0.1, 28.5, 67.5 ) --[[ @ 0]]
			f52_arg0.TabBottomLine2:setAlpha( 0.5 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.TabBottomLine2 ) --[[ @ 0]]
		end
	},
	Weapon = {
		DefaultClip = function ( f53_arg0, f53_arg1 )
			f53_arg0:__resetProperties() --[[ @ 0]]
			f53_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Weapon3Digits = {
		DefaultClip = function ( f54_arg0, f54_arg1 )
			f54_arg0:__resetProperties() --[[ @ 0]]
			f54_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f54_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f54_arg0.ClipHero:setLeftRight( 1, 2, -248, -248 ) --[[ @ 0]]
			f54_arg0.ClipHero:setTopBottom( 1, 2, -96, -96 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.ClipHero ) --[[ @ 0]]
		end,
		HeroWeapon = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f55_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f55_arg0.ClipHero:setAlpha( 1 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.ClipHero ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetZM_ClipInfo.__onClose = function ( f56_arg0 )
	f56_arg0.Clip:close() --[[ @ 0]]
	f56_arg0.ClipDual:close() --[[ @ 0]]
	f56_arg0.ClipHero:close() --[[ @ 0]]
	f56_arg0.ClipOnly:close() --[[ @ 0]]
	f56_arg0.TotalAmmoLabel:close() --[[ @ 0]]
end
 --[[ @ 0]]
