-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/buttonprogressring" ) --[[ @ 0]]
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]
require( "x64:57740d6a36622800" ) --[[ @ 0]]
require( "x64:2eb2b44d72f6861a" ) --[[ @ 0]]
require( "x64:5e6b26605fb6b80c" ) --[[ @ 0]]

CoD.Support_Button = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Support_Button.__defaultWidth = 40 --[[ @ 0]]
CoD.Support_Button.__defaultHeight = 41 --[[ @ 0]]
CoD.Support_Button.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Support_Button ) --[[ @ 0]]
	self.id = "Support_Button" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 0, -22, 60, 0, 0, -19, 64 ) --[[ @ 0]]
	Background:setAlpha( 0.2 ) --[[ @ 0]]
	Background:setImage( RegisterImage( @"uie_streak_flare" ) ) --[[ @ 0]]
	Background:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local LED = LUI.UIImage.new( 0, 0, -11.5, 52.5, 0, 0, -13, 51 ) --[[ @ 0]]
	LED:setRGB( 0.79, 0.45, 0.05 ) --[[ @ 0]]
	LED:setAlpha( 0 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"uie_ui_hud_core_streak_led_button" ) ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local buttonInternal = CoD.Support_ButtonInternal.new( f1_arg0, f1_arg1, 0, 0, 0, 40, 0, 0, 2, 43 ) --[[ @ 0]]
	buttonInternal:linkToElementModel( self, nil, false, function ( model )
		buttonInternal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( buttonInternal ) --[[ @ 0]]
	self.buttonInternal = buttonInternal --[[ @ 0]]
	
	local Bar = CoD.Support_EarningBar.new( f1_arg0, f1_arg1, 0, 0, -9, 0, 0, 0, 19, 21 ) --[[ @ 0]]
	Bar:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	Bar:setAlpha( 0 ) --[[ @ 0]]
	Bar:linkToElementModel( self, nil, false, function ( model )
		Bar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Bar ) --[[ @ 0]]
	self.Bar = Bar --[[ @ 0]]
	
	local ButtonProgressRing = CoD.ButtonProgressRing.new( f1_arg0, f1_arg1, 1, 1, -94, -52, 0.5, 0.5, -21, 21 ) --[[ @ 0]]
	ButtonProgressRing:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	ButtonProgressRing:setAlpha( 0 ) --[[ @ 0]]
	ButtonProgressRing:setScale( 0.7, 0.7 ) --[[ @ 0]]
	ButtonProgressRing:subscribeToGlobalModel( f1_arg1, "HUDItems", "heroHoldProgress", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			ButtonProgressRing.progressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ButtonProgressRing ) --[[ @ 0]]
	self.ButtonProgressRing = ButtonProgressRing --[[ @ 0]]
	
	local ControllerDependentTextBox = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 1, 1, -117.5, -28.5, 0.5, 0.5, -23, 22 ) --[[ @ 0]]
	ControllerDependentTextBox:mergeStateConditions( {
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	local ArrowDown = ControllerDependentTextBox --[[ @ 0]]
	local ArrowUp = ControllerDependentTextBox.subscribeToModel --[[ @ 0]]
	local Rule = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ArrowUp( ArrowDown, Rule["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f10_arg0 )
		f1_arg0:updateElementState( ControllerDependentTextBox, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ArrowDown = ControllerDependentTextBox --[[ @ 0]]
	ArrowUp = ControllerDependentTextBox.subscribeToModel --[[ @ 0]]
	Rule = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ArrowUp( ArrowDown, Rule["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f11_arg0 )
		f1_arg0:updateElementState( ControllerDependentTextBox, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ControllerDependentTextBox:appendEventHandler( "input_source_changed", function ( f12_arg0, f12_arg1 )
		f12_arg1.menu = f12_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ControllerDependentTextBox, f12_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ArrowDown = ControllerDependentTextBox --[[ @ 0]]
	ArrowUp = ControllerDependentTextBox.subscribeToModel --[[ @ 0]]
	Rule = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ArrowUp( ArrowDown, Rule.LastInput, function ( f13_arg0 )
		f1_arg0:updateElementState( ControllerDependentTextBox, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.KBMText:setLetterSpacing( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+weapnext_inventory}]" ) ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setLetterSpacing( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ControllerDependentTextBox:linkToElementModel( self, nil, false, function ( model )
		ControllerDependentTextBox:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ControllerDependentTextBox:linkToElementModel( self, "bindingKBM", true, function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			ControllerDependentTextBox.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( f15_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ControllerDependentTextBox ) --[[ @ 0]]
	self.ControllerDependentTextBox = ControllerDependentTextBox --[[ @ 0]]
	
	ArrowUp = CoD.Support_ButtonArrow.new( f1_arg0, f1_arg1, 0, 0, -41, -25, 0, 0, -17, -1 ) --[[ @ 0]]
	ArrowUp:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "arrowState", CoD.ScorestreakInGameUtility.ArrowState.UP, CoD.ScorestreakInGameUtility.ArrowState.BOTH )
			end
		}
	} ) --[[ @ 0]]
	ArrowUp:linkToElementModel( ArrowUp, "arrowState", true, function ( model )
		f1_arg0:updateElementState( ArrowUp, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "arrowState"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ArrowUp:setAlpha( 0 ) --[[ @ 0]]
	ArrowUp:setZRot( 90 ) --[[ @ 0]]
	ArrowUp:linkToElementModel( self, nil, false, function ( model )
		ArrowUp:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArrowUp ) --[[ @ 0]]
	self.ArrowUp = ArrowUp --[[ @ 0]]
	
	ArrowDown = CoD.Support_ButtonArrow.new( f1_arg0, f1_arg1, 0, 0, -41, -25, 0, 0, 41, 57 ) --[[ @ 0]]
	ArrowDown:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "arrowState", CoD.ScorestreakInGameUtility.ArrowState.DOWN, CoD.ScorestreakInGameUtility.ArrowState.BOTH )
			end
		}
	} ) --[[ @ 0]]
	ArrowDown:linkToElementModel( ArrowDown, "arrowState", true, function ( model )
		f1_arg0:updateElementState( ArrowDown, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "arrowState"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ArrowDown:setAlpha( 0 ) --[[ @ 0]]
	ArrowDown:setZRot( -90 ) --[[ @ 0]]
	ArrowDown:linkToElementModel( self, nil, false, function ( model )
		ArrowDown:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArrowDown ) --[[ @ 0]]
	self.ArrowDown = ArrowDown --[[ @ 0]]
	
	Rule = LUI.UIImage.new( 0, 0, 0, 40, 0, 0, -6, 2 ) --[[ @ 0]]
	Rule:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Rule:setAlpha( 0 ) --[[ @ 0]]
	Rule:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_rule_thin" ) ) --[[ @ 0]]
	Rule:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Rule ) --[[ @ 0]]
	self.Rule = Rule --[[ @ 0]]
	
	local Rule2 = LUI.UIImage.new( 0, 0, 0, 40, 0, 0, 41.5, 49.5 ) --[[ @ 0]]
	Rule2:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Rule2:setAlpha( 0 ) --[[ @ 0]]
	Rule2:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_rule_thin" ) ) --[[ @ 0]]
	Rule2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Rule2 ) --[[ @ 0]]
	self.Rule2 = Rule2 --[[ @ 0]]
	
	local Bar2 = LUI.UIImage.new( 0, 0, -0.5, 39.5, 0, 0, 41.5, 49.5 ) --[[ @ 0]]
	Bar2:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Bar2:setAlpha( 0 ) --[[ @ 0]]
	Bar2:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_rule_thick" ) ) --[[ @ 0]]
	Bar2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	Bar2:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Bar2 ) --[[ @ 0]]
	self.Bar2 = Bar2 --[[ @ 0]]
	
	local Bar3 = LUI.UIImage.new( 0, 0, -0.5, 39.5, 0, 0, -6, 2 ) --[[ @ 0]]
	Bar3:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Bar3:setAlpha( 0 ) --[[ @ 0]]
	Bar3:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_rule_thick" ) ) --[[ @ 0]]
	Bar3:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	Bar3:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Bar3 ) --[[ @ 0]]
	self.Bar3 = Bar3 --[[ @ 0]]
	
	local FUItop2 = LUI.UIImage.new( 0, 0, 0.5, 40.5, 0, 0, 36, 44 ) --[[ @ 0]]
	FUItop2:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	FUItop2:setAlpha( 0 ) --[[ @ 0]]
	FUItop2:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_fui_selector" ) ) --[[ @ 0]]
	FUItop2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FUItop2 ) --[[ @ 0]]
	self.FUItop2 = FUItop2 --[[ @ 0]]
	
	local FUItop = LUI.UIImage.new( 0, 0, 0.5, 40.5, 0, 0, -5, 3 ) --[[ @ 0]]
	FUItop:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	FUItop:setAlpha( 0 ) --[[ @ 0]]
	FUItop:setImage( RegisterImage( @"uie_ui_hud_core_streak_widget_fui_selector" ) ) --[[ @ 0]]
	FUItop:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FUItop ) --[[ @ 0]]
	self.FUItop = FUItop --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Usable",
			condition = function ( menu, element, event )
				local f22_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "rewardImage" ) --[[ @ 0]]
				if f22_local0 then
					f22_local0 = CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "rewardAmmo", 0 ) --[[ @ 0]]
					if f22_local0 then
						f22_local0 = IsGamepad( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f22_local0
			end
		},
		{
			stateName = "UsableKBM",
			condition = function ( menu, element, event )
				local f23_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "rewardImage" ) --[[ @ 0]]
				if f23_local0 then
					f23_local0 = CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "rewardAmmo", 0 ) --[[ @ 0]]
					if f23_local0 then
						f23_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f23_local0
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "rewardImage", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rewardImage"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "rewardAmmo", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rewardAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f26_arg0, f26_arg1 )
		f26_arg1.menu = f26_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f26_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local15 = self --[[ @ 0]]
	local f1_local16 = self.subscribeToModel --[[ @ 0]]
	local f1_local17 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.LastInput, function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f28_arg2, f28_arg3, f28_arg4 )
		DispatchEventToParent( element, "scorestreak_state_update", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Support_Button.__resetProperties = function ( f29_arg0 )
	f29_arg0.buttonInternal:completeAnimation() --[[ @ 0]]
	f29_arg0.Bar:completeAnimation() --[[ @ 0]]
	f29_arg0.Background:completeAnimation() --[[ @ 0]]
	f29_arg0.LED:completeAnimation() --[[ @ 0]]
	f29_arg0.ButtonProgressRing:completeAnimation() --[[ @ 0]]
	f29_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
	f29_arg0.Rule:completeAnimation() --[[ @ 0]]
	f29_arg0.Bar3:completeAnimation() --[[ @ 0]]
	f29_arg0.Bar2:completeAnimation() --[[ @ 0]]
	f29_arg0.Rule2:completeAnimation() --[[ @ 0]]
	f29_arg0.FUItop2:completeAnimation() --[[ @ 0]]
	f29_arg0.FUItop:completeAnimation() --[[ @ 0]]
	f29_arg0.ArrowUp:completeAnimation() --[[ @ 0]]
	f29_arg0.ArrowDown:completeAnimation() --[[ @ 0]]
	f29_arg0.buttonInternal:setLeftRight( 0, 0, 0, 40 ) --[[ @ 0]]
	f29_arg0.buttonInternal:setTopBottom( 0, 0, 2, 43 ) --[[ @ 0]]
	f29_arg0.buttonInternal:setScale( 1, 1 ) --[[ @ 0]]
	f29_arg0.Bar:setLeftRight( 0, 0, -9, 0 ) --[[ @ 0]]
	f29_arg0.Bar:setTopBottom( 0, 0, 19, 21 ) --[[ @ 0]]
	f29_arg0.Background:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f29_arg0.Background:setAlpha( 0.2 ) --[[ @ 0]]
	f29_arg0.Background:setScale( 1, 1 ) --[[ @ 0]]
	f29_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ButtonProgressRing:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ControllerDependentTextBox:setLeftRight( 1, 1, -117.5, -28.5 ) --[[ @ 0]]
	f29_arg0.ControllerDependentTextBox:setTopBottom( 0.5, 0.5, -23, 22 ) --[[ @ 0]]
	f29_arg0.ControllerDependentTextBox:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.Rule:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.Bar3:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.Bar2:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.Rule2:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.FUItop2:setLeftRight( 0, 0, 0.5, 40.5 ) --[[ @ 0]]
	f29_arg0.FUItop2:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.FUItop:setLeftRight( 0, 0, 0.5, 40.5 ) --[[ @ 0]]
	f29_arg0.FUItop:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ArrowUp:setLeftRight( 0, 0, -41, -25 ) --[[ @ 0]]
	f29_arg0.ArrowUp:setTopBottom( 0, 0, -17, -1 ) --[[ @ 0]]
	f29_arg0.ArrowUp:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ArrowDown:setTopBottom( 0, 0, 41, 57 ) --[[ @ 0]]
	f29_arg0.ArrowDown:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Support_Button.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f30_arg0.Background:completeAnimation() --[[ @ 0]]
			f30_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.Background ) --[[ @ 0]]
			f30_arg0.buttonInternal:completeAnimation() --[[ @ 0]]
			f30_arg0.buttonInternal:setLeftRight( 0, 0, 0, 40 ) --[[ @ 0]]
			f30_arg0.buttonInternal:setTopBottom( 0, 0, 0, 41 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.buttonInternal ) --[[ @ 0]]
			f30_arg0.Bar:completeAnimation() --[[ @ 0]]
			f30_arg0.Bar:setLeftRight( 0, 0, -6, 3 ) --[[ @ 0]]
			f30_arg0.Bar:setTopBottom( 0, 0, 19, 21 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.Bar ) --[[ @ 0]]
		end
	},
	Usable = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f31_arg0.Background:completeAnimation() --[[ @ 0]]
			f31_arg0.Background:setAlpha( 0.05 ) --[[ @ 0]]
			f31_arg0.Background:setScale( 1, 0.8 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.Background ) --[[ @ 0]]
			f31_arg0.LED:completeAnimation() --[[ @ 0]]
			f31_arg0.LED:setAlpha( 0.08 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.LED ) --[[ @ 0]]
			f31_arg0.buttonInternal:completeAnimation() --[[ @ 0]]
			f31_arg0.buttonInternal:setLeftRight( 0, 0, 0, 40 ) --[[ @ 0]]
			f31_arg0.buttonInternal:setTopBottom( 0, 0, 0, 41 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.buttonInternal ) --[[ @ 0]]
			f31_arg0.Bar:completeAnimation() --[[ @ 0]]
			f31_arg0.Bar:setLeftRight( 0, 0, -18, -9 ) --[[ @ 0]]
			f31_arg0.Bar:setTopBottom( 0, 0, 19, 21 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.Bar ) --[[ @ 0]]
		end,
		Focus = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 14 ) --[[ @ 0]]
			local f32_local0 = function ( f33_arg0 )
				f32_arg0.Background:beginAnimation( 230, Enum[@"luitween"][@"luitween_ease_both"] ) --[[ @ 0]]
				f32_arg0.Background:setScale( 1, 1 ) --[[ @ 0]]
				f32_arg0.Background:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
				f32_arg0.Background:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.Background:completeAnimation() --[[ @ 0]]
			f32_arg0.Background:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f32_arg0.Background:setAlpha( 0.75 ) --[[ @ 0]]
			f32_arg0.Background:setScale( 1, 0.8 ) --[[ @ 0]]
			f32_local0( f32_arg0.Background ) --[[ @ 0]]
			f32_arg0.LED:completeAnimation() --[[ @ 0]]
			f32_arg0.LED:setAlpha( 0.34 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.LED ) --[[ @ 0]]
			local f32_local1 = function ( f34_arg0 )
				f32_arg0.buttonInternal:beginAnimation( 230, Enum[@"luitween"][@"luitween_ease_both"] ) --[[ @ 0]]
				f32_arg0.buttonInternal:setScale( 1.1, 1.1 ) --[[ @ 0]]
				f32_arg0.buttonInternal:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
				f32_arg0.buttonInternal:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.buttonInternal:completeAnimation() --[[ @ 0]]
			f32_arg0.buttonInternal:setScale( 1, 1 ) --[[ @ 0]]
			f32_local1( f32_arg0.buttonInternal ) --[[ @ 0]]
			f32_arg0.Bar:completeAnimation() --[[ @ 0]]
			f32_arg0.Bar:setLeftRight( 0, 0, -18, -9 ) --[[ @ 0]]
			f32_arg0.Bar:setTopBottom( 0, 0, 19, 21 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Bar ) --[[ @ 0]]
			f32_arg0.ButtonProgressRing:completeAnimation() --[[ @ 0]]
			f32_arg0.ButtonProgressRing:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ButtonProgressRing ) --[[ @ 0]]
			f32_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f32_arg0.ControllerDependentTextBox:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ControllerDependentTextBox ) --[[ @ 0]]
			f32_arg0.ArrowUp:completeAnimation() --[[ @ 0]]
			f32_arg0.ArrowUp:setLeftRight( 0, 0, -41, -25 ) --[[ @ 0]]
			f32_arg0.ArrowUp:setTopBottom( 0, 0, -15, 1 ) --[[ @ 0]]
			f32_arg0.ArrowUp:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ArrowUp ) --[[ @ 0]]
			f32_arg0.ArrowDown:completeAnimation() --[[ @ 0]]
			f32_arg0.ArrowDown:setTopBottom( 0, 0, 39, 55 ) --[[ @ 0]]
			f32_arg0.ArrowDown:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ArrowDown ) --[[ @ 0]]
			f32_arg0.Rule:completeAnimation() --[[ @ 0]]
			f32_arg0.Rule:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Rule ) --[[ @ 0]]
			f32_arg0.Rule2:completeAnimation() --[[ @ 0]]
			f32_arg0.Rule2:setAlpha( 0.93 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Rule2 ) --[[ @ 0]]
			f32_arg0.Bar2:completeAnimation() --[[ @ 0]]
			f32_arg0.Bar2:setAlpha( 0.93 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Bar2 ) --[[ @ 0]]
			f32_arg0.Bar3:completeAnimation() --[[ @ 0]]
			f32_arg0.Bar3:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Bar3 ) --[[ @ 0]]
			f32_arg0.FUItop2:completeAnimation() --[[ @ 0]]
			f32_arg0.FUItop2:setLeftRight( 0, 0, -0.5, 39.5 ) --[[ @ 0]]
			f32_arg0.FUItop2:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.FUItop2 ) --[[ @ 0]]
			f32_arg0.FUItop:completeAnimation() --[[ @ 0]]
			f32_arg0.FUItop:setLeftRight( 0, 0, -0.5, 39.5 ) --[[ @ 0]]
			f32_arg0.FUItop:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.FUItop ) --[[ @ 0]]
		end
	},
	UsableKBM = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f35_local0 = function ( f36_arg0 )
				f35_arg0.Background:beginAnimation( 230 ) --[[ @ 0]]
				f35_arg0.Background:setScale( 1, 1 ) --[[ @ 0]]
				f35_arg0.Background:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.Background:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.Background:completeAnimation() --[[ @ 0]]
			f35_arg0.Background:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f35_arg0.Background:setAlpha( 0.75 ) --[[ @ 0]]
			f35_arg0.Background:setScale( 1, 0.8 ) --[[ @ 0]]
			f35_local0( f35_arg0.Background ) --[[ @ 0]]
			f35_arg0.LED:completeAnimation() --[[ @ 0]]
			f35_arg0.LED:setAlpha( 0.34 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.LED ) --[[ @ 0]]
			local f35_local1 = function ( f37_arg0 )
				f35_arg0.buttonInternal:beginAnimation( 230 ) --[[ @ 0]]
				f35_arg0.buttonInternal:setScale( 1.1, 1.1 ) --[[ @ 0]]
				f35_arg0.buttonInternal:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.buttonInternal:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.buttonInternal:completeAnimation() --[[ @ 0]]
			f35_arg0.buttonInternal:setLeftRight( 0, 0, 0, 40 ) --[[ @ 0]]
			f35_arg0.buttonInternal:setTopBottom( 0, 0, 0, 41 ) --[[ @ 0]]
			f35_arg0.buttonInternal:setScale( 1, 1 ) --[[ @ 0]]
			f35_local1( f35_arg0.buttonInternal ) --[[ @ 0]]
			f35_arg0.Bar:completeAnimation() --[[ @ 0]]
			f35_arg0.Bar:setLeftRight( 0, 0, -18, -9 ) --[[ @ 0]]
			f35_arg0.Bar:setTopBottom( 0, 0, 19, 21 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.Bar ) --[[ @ 0]]
			f35_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f35_arg0.ControllerDependentTextBox:setLeftRight( 1, 1, -119, -30 ) --[[ @ 0]]
			f35_arg0.ControllerDependentTextBox:setTopBottom( 0.5, 0.5, -1.5, 20.5 ) --[[ @ 0]]
			f35_arg0.ControllerDependentTextBox:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Support_Button.__onClose = function ( f38_arg0 )
	f38_arg0.buttonInternal:close() --[[ @ 0]]
	f38_arg0.Bar:close() --[[ @ 0]]
	f38_arg0.ButtonProgressRing:close() --[[ @ 0]]
	f38_arg0.ControllerDependentTextBox:close() --[[ @ 0]]
	f38_arg0.ArrowUp:close() --[[ @ 0]]
	f38_arg0.ArrowDown:close() --[[ @ 0]]
end
 --[[ @ 0]]
