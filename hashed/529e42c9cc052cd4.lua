-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]
require( "x64:4ffc2c7e4adad795" ) --[[ @ 0]]
require( "x64:3a60f9dd8c2d255e" ) --[[ @ 0]]
require( "x64:3c0cb09f85132dc0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]

CoD.PaintshopWeaponSelectWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.__defaultWidth = 1920 --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.__defaultHeight = 1080 --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PaintshopWeaponSelectWidget ) --[[ @ 0]]
	self.id = "PaintshopWeaponSelectWidget" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local weaponList = LUI.UIList.new( f1_arg0, f1_arg1, 18, 0, nil, false, false, false, false ) --[[ @ 0]]
	weaponList:setLeftRight( 0.5, 0.5, -721, 721 ) --[[ @ 0]]
	weaponList:setTopBottom( 1, 1, -384, -114 ) --[[ @ 0]]
	weaponList:setWidgetType( CoD.WeaponSelectGridItem ) --[[ @ 0]]
	weaponList:setHorizontalCount( 5 ) --[[ @ 0]]
	weaponList:setVerticalCount( 2 ) --[[ @ 0]]
	weaponList:setSpacing( 18 ) --[[ @ 0]]
	weaponList:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	weaponList:setDataSource( "PaintshopWeaponList" ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "refHash", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponNameInfoModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		CoD.CraftUtility.UpdateWeaponModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.CACUtility.ShowWeaponVariantList( menu, controller, self.WeaponVariantListWidget ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			SetControllerModelValue( controller, "PaintjobWeaponVariantListShown", true ) --[[ @ 0]]
			return true
		elseif not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.CraftUtility.OpenPaintjobSelection( self, element, controller, "setweapon", menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		elseif not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_weaponList = function ( f7_arg0, f7_arg1, f7_arg2, f7_arg3 )
		local f7_local0 = weaponList --[[ @ 0]]
		CoD.CACUtility.SetActiveListItemToFirstSelectableItem( f7_local0, f7_arg1 ) --[[ @ 0]]
		CoD.CraftUtility.UpdateWeaponModel( f7_arg2, f7_local0, f7_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_weaponList ) --[[ @ 0]]
	self:addElement( weaponList ) --[[ @ 0]]
	self.weaponList = weaponList --[[ @ 0]]
	
	local weaponCategoryList = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 0, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	weaponCategoryList:setLeftRight( 0.5, 0.5, -600, 600 ) --[[ @ 0]]
	weaponCategoryList:setTopBottom( 0, 0, 52, 87 ) --[[ @ 0]]
	weaponCategoryList:setZoom( 72 ) --[[ @ 0]]
	weaponCategoryList:setWidgetType( CoD.CACTextTab ) --[[ @ 0]]
	weaponCategoryList:setHorizontalCount( 5 ) --[[ @ 0]]
	weaponCategoryList:setSpacing( 0 ) --[[ @ 0]]
	weaponCategoryList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	weaponCategoryList:setDataSource( "PaintshopWeaponGroups" ) --[[ @ 0]]
	weaponCategoryList:registerEventHandler( "list_active_changed", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if CoD.BaseUtility.IsWidgetVisible( element ) then
			SetStateByElementModel( self, element, f1_arg1, "state" ) --[[ @ 0]]
			SetElementProperty( f1_arg0, "__itemGroup", element.category ) --[[ @ 0]]
			SetLoseFocusToElement( self, "weaponList", f1_arg1 ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f1_arg1 ) --[[ @ 0]]
			CoD.FreeCursorUtility.GiveFocusToElementsDefaultFocus( f1_arg0, f1_arg0, f1_arg1 ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( f1_arg0, f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self.__on_menuOpened_weaponCategoryList = function ( f9_arg0, f9_arg1, f9_arg2, f9_arg3 )
		local f9_local0 = weaponCategoryList --[[ @ 0]]
		if not IsElementPropertyValue( f9_local0, "_receivedMenuOpen", true ) then
			SetElementProperty( f9_local0, "_receivedMenuOpen", true ) --[[ @ 0]]
			CoD.CACUtility.SetActiveListItemForWeaponGroup( f9_arg2, f9_arg1, self.weaponCategoryList ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f9_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
	self:addElement( weaponCategoryList ) --[[ @ 0]]
	self.weaponCategoryList = weaponCategoryList --[[ @ 0]]
	
	local LB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, -799.5, -599.5, 0, 0, 52, 86 ) --[[ @ 0]]
	LB:setZoom( 72 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	local RB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0.5, 0.5, 600, 771, 0, 0, 52, 86 ) --[[ @ 0]]
	RB:setZoom( 72 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	local RightArrow = nil --[[ @ 0]]
	
	RightArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, 600, 667, 0, 0, 48.5, 93.5 ) --[[ @ 0]]
	RightArrow:mergeStateConditions( {
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	RightArrow:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( RightArrow, f11_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local WeaponVariantListWidget = RightArrow --[[ @ 0]]
	local LeftArrow = RightArrow.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	LeftArrow( WeaponVariantListWidget, f1_local8.LastInput, function ( f12_arg0 )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	RightArrow.ControllerImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	RightArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f13_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f13_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.weaponCategoryList, controller, true ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightArrow ) --[[ @ 0]]
	self.RightArrow = RightArrow --[[ @ 0]]
	
	LeftArrow = nil --[[ @ 0]]
	
	LeftArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, -666.5, -599.5, 0, 0, 48.5, 93.5 ) --[[ @ 0]]
	LeftArrow:mergeStateConditions( {
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LeftArrow:appendEventHandler( "input_source_changed", function ( f17_arg0, f17_arg1 )
		f17_arg1.menu = f17_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( LeftArrow, f17_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local8 = LeftArrow --[[ @ 0]]
	WeaponVariantListWidget = LeftArrow.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponVariantListWidget( f1_local8, f1_local9.LastInput, function ( f18_arg0 )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftArrow:setZRot( 180 ) --[[ @ 0]]
	LeftArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	LeftArrow.ControllerImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	LeftArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.GridAndListUtility.NavigateGridItem( self.weaponCategoryList, controller, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( LeftArrow ) --[[ @ 0]]
	self.LeftArrow = LeftArrow --[[ @ 0]]
	
	WeaponVariantListWidget = CoD.WeaponVariantListWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -294, 196 ) --[[ @ 0]]
	WeaponVariantListWidget.SignatureWeaponList:setSpacing( 18 ) --[[ @ 0]]
	WeaponVariantListWidget:registerEventHandler( "gain_focus", function ( element, event )
		local f22_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f22_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f22_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		return f22_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponVariantListWidget, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.HideWeaponVariantList( menu, controller ) --[[ @ 0]]
		SetControllerModelValue( controller, "PaintjobWeaponVariantListShown", false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( WeaponVariantListWidget ) --[[ @ 0]]
	self.WeaponVariantListWidget = WeaponVariantListWidget --[[ @ 0]]
	
	WeaponVariantListWidget:linkToElementModel( weaponList, nil, false, function ( model )
		WeaponVariantListWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "NoCategories",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.weaponCategoryList )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f27_arg0, f27_arg1 )
		f27_arg1.menu = f27_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f27_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList.id = "weaponList" --[[ @ 0]]
	weaponCategoryList.id = "weaponCategoryList" --[[ @ 0]]
	if CoD.isPC then
		RightArrow.id = "RightArrow" --[[ @ 0]]
	end
	if CoD.isPC then
		LeftArrow.id = "LeftArrow" --[[ @ 0]]
	end
	WeaponVariantListWidget.id = "WeaponVariantListWidget" --[[ @ 0]]
	self.__defaultFocus = weaponList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_weaponList ) --[[ @ 0]]
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local8 = self --[[ @ 0]]
	f1_local8 = weaponList --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local8, f1_arg1, "displayName", "", "" ) --[[ @ 0]]
		SetElementProperty( f1_local8, "ignoreSavedActive", true ) --[[ @ 0]]
		CoD.CACUtility.UseEquippedItemAsDefaultFocus( f1_arg0, f1_arg1, f1_local8 ) --[[ @ 0]]
	else
		SetElementProperty( f1_local8, "ignoreSavedActive", true ) --[[ @ 0]]
	end
	CoD.GridAndListUtility.AddBumperNavigation( f1_arg0, weaponCategoryList, f1_arg1 ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( RightArrow ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( LeftArrow ) --[[ @ 0]]
	f1_local8 = WeaponVariantListWidget --[[ @ 0]]
	HideWidget( self.WeaponVariantListWidget ) --[[ @ 0]]
	SetElementProperty( f1_local8, "_forPaintshop", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.__resetProperties = function ( f29_arg0 )
	f29_arg0.weaponCategoryList:completeAnimation() --[[ @ 0]]
	f29_arg0.RB:completeAnimation() --[[ @ 0]]
	f29_arg0.LB:completeAnimation() --[[ @ 0]]
	f29_arg0.weaponCategoryList:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.RB:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.LB:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NoCategories = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f31_arg0.weaponCategoryList:completeAnimation() --[[ @ 0]]
			f31_arg0.weaponCategoryList:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.weaponCategoryList ) --[[ @ 0]]
			f31_arg0.LB:completeAnimation() --[[ @ 0]]
			f31_arg0.LB:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.LB ) --[[ @ 0]]
			f31_arg0.RB:completeAnimation() --[[ @ 0]]
			f31_arg0.RB:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.RB ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PaintshopWeaponSelectWidget.__onClose = function ( f32_arg0 )
	f32_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f32_arg0.WeaponVariantListWidget:close() --[[ @ 0]]
	f32_arg0.weaponList:close() --[[ @ 0]]
	f32_arg0.weaponCategoryList:close() --[[ @ 0]]
	f32_arg0.LB:close() --[[ @ 0]]
	f32_arg0.RB:close() --[[ @ 0]]
	f32_arg0.RightArrow:close() --[[ @ 0]]
	f32_arg0.LeftArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
