-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:1019bf86db65af0e" ) --[[ @ 0]]
require( "ui/uieditor/widgets/aar_t8/medals/aarmedalstab" ) --[[ @ 0]]
require( "x64:1d15797b08b66dd4" ) --[[ @ 0]]
require( "x64:dcd854a7bb6c2c2" ) --[[ @ 0]]
require( "x64:3d325629f2c60cbb" ) --[[ @ 0]]
require( "x64:5299e9177f75b70" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "ui/uieditor/widgets/notifications/publiclobbystagenotification/stagenotificationcontainer" ) --[[ @ 0]]

CoD.AAR_T8_WZ = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.AAR_T8_WZ = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "AAR_T8_WZ", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.AARUtility.InitAARModels( f1_arg0 ) --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.AAR_T8_WZ ) --[[ @ 0]]
	self.soundSet = "CAC" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, -0.1, 1, 0, 0 ) --[[ @ 0]]
	Backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local AARMeritReportTab = CoD.AARMeritReportTab.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -450, 450 ) --[[ @ 0]]
	self:addElement( AARMeritReportTab ) --[[ @ 0]]
	self.AARMeritReportTab = AARMeritReportTab --[[ @ 0]]
	
	local AARSummaryTabWZ = CoD.AARSummaryTab_WZ.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 9, 9 ) --[[ @ 0]]
	AARSummaryTabWZ:subscribeToGlobalModel( f1_arg0, "AARSummaryStats", nil, function ( model )
		AARSummaryTabWZ:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AARSummaryTabWZ ) --[[ @ 0]]
	self.AARSummaryTabWZ = AARSummaryTabWZ --[[ @ 0]]
	
	local AARContractsTab = CoD.AARContractsTab.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -450, 450 ) --[[ @ 0]]
	self:addElement( AARContractsTab ) --[[ @ 0]]
	self.AARContractsTab = AARContractsTab --[[ @ 0]]
	
	local AARSquadSummary = CoD.AARSquadSummary.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -450, 450 ) --[[ @ 0]]
	self:addElement( AARSquadSummary ) --[[ @ 0]]
	self.AARSquadSummary = AARSquadSummary --[[ @ 0]]
	
	local AARMedalsTab = CoD.AARMedalsTab.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -440, 460 ) --[[ @ 0]]
	self:addElement( AARMedalsTab ) --[[ @ 0]]
	self.AARMedalsTab = AARMedalsTab --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local StageNotificationContainer = CoD.StageNotificationContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 120 ) --[[ @ 0]]
	StageNotificationContainer:subscribeToGlobalModel( f1_arg0, "MapVote", "mapVoteGameModeNext", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			StageNotificationContainer.CommonHeader.subtitle.StageTitle:setText( CoD.GameTypeUtility.GameTypeToLocalizeToUpperName( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	StageNotificationContainer:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "publicLobby.stageDetails", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			StageNotificationContainer.CommonHeader.subtitle.subtitle:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f5_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	StageNotificationContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( StageNotificationContainer ) --[[ @ 0]]
	self.StageNotificationContainer = StageNotificationContainer --[[ @ 0]]
	
	local CommonHeader = CoD.CommonHeader.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_5EEF90B1483C4C23" ) ) --[[ @ 0]]
	CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CommonHeader:registerEventHandler( "menu_loaded", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f8_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f8_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f8_local0 then
			f8_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	local ScoreboardTab = CoD.AARScoreboardTabButton.new( f1_local1, f1_arg0, 0.5, 0.5, -339, 339, 0, 0, 4, 38 ) --[[ @ 0]]
	ScoreboardTab:registerEventHandler( "menu_loaded", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f9_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f9_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f9_local0 then
			f9_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	self:addElement( ScoreboardTab ) --[[ @ 0]]
	self.ScoreboardTab = ScoreboardTab --[[ @ 0]]
	
	local TopBar = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	TopBar:registerEventHandler( "menu_loaded", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f10_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f10_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f10_local0 then
			f10_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Offline",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLAN()
			end
		}
	} ) --[[ @ 0]]
	local f1_local13 = self --[[ @ 0]]
	local f1_local14 = self.subscribeToModel --[[ @ 0]]
	local f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local13, f1_local15["lobbyRoot.lobbyNav"], function ( f12_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f12_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local13 = self --[[ @ 0]]
	f1_local14 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local14( f1_local13, f1_local15["lobbyRoot.lobbyNav"], function ( f13_arg0, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], "ui_confirm", function ( element, menu, controller, model )
		if not IsPC() then
			CoD.AnalyticsUtility.GoBackAndShowMatchSurveyIfNecessary( menu, controller ) --[[ @ 0]]
			MenuUnhideFreeCursor( menu, controller ) --[[ @ 0]]
			return true
		elseif IsPC() then
			CoD.AnalyticsUtility.GoBackAndShowMatchSurveyIfNecessary( menu, controller ) --[[ @ 0]]
			MenuUnhideFreeCursor( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"hash_4E4E038F4690D38D", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_back"], "ESCAPE", function ( element, menu, controller, model )
		CoD.AnalyticsUtility.GoBackAndShowMatchSurveyIfNecessary( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_0", nil, "ESCAPE" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsLobbyNetworkModeLive() and not IsRecentGameBookmarked( controller ) then
			FileshareBookmarkRecentGame( controller ) --[[ @ 0]]
			UpdateButtonPromptState( menu, element, controller, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsLobbyNetworkModeLive() and not IsRecentGameBookmarked( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/bookmark_game", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f20_arg0, f20_arg1, f20_arg2, f20_arg3 )
		local f20_local0 = self --[[ @ 0]]
		CoD.AARUtility.OpenAAROverlays( f20_arg2, f20_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "AAR.activeTab", function ( model )
		local f22_local0 = self --[[ @ 0]]
		CoD.AARUtility.UpdateAARScene( f1_local1, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AARSummaryTabWZ.id = "AARSummaryTabWZ" --[[ @ 0]]
	AARContractsTab.id = "AARContractsTab" --[[ @ 0]]
	AARSquadSummary.id = "AARSquadSummary" --[[ @ 0]]
	AARMedalsTab.id = "AARMedalsTab" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	ScoreboardTab.id = "ScoreboardTab" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local14 = self --[[ @ 0]]
	CoD.AARUtility.AARFirstTimeOpenActions( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	CoD.AARUtility.AnimateCurrentLevelProgress( f1_local1, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.AAR_T8_WZ.__resetProperties = function ( f24_arg0 )
	f24_arg0.CommonHeader:completeAnimation() --[[ @ 0]]
	f24_arg0.StageNotificationContainer:completeAnimation() --[[ @ 0]]
	f24_arg0.CommonHeader:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.StageNotificationContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AAR_T8_WZ.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f25_arg0.StageNotificationContainer:completeAnimation() --[[ @ 0]]
			f25_arg0.StageNotificationContainer:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.StageNotificationContainer ) --[[ @ 0]]
			f25_arg0.CommonHeader:completeAnimation() --[[ @ 0]]
			f25_arg0.CommonHeader:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.CommonHeader ) --[[ @ 0]]
		end
	},
	Offline = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f26_arg0.StageNotificationContainer:completeAnimation() --[[ @ 0]]
			f26_arg0.StageNotificationContainer:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.StageNotificationContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AAR_T8_WZ.__onClose = function ( f27_arg0 )
	f27_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f27_arg0.AARMeritReportTab:close() --[[ @ 0]]
	f27_arg0.AARSummaryTabWZ:close() --[[ @ 0]]
	f27_arg0.AARContractsTab:close() --[[ @ 0]]
	f27_arg0.AARSquadSummary:close() --[[ @ 0]]
	f27_arg0.AARMedalsTab:close() --[[ @ 0]]
	f27_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f27_arg0.StageNotificationContainer:close() --[[ @ 0]]
	f27_arg0.CommonHeader:close() --[[ @ 0]]
	f27_arg0.ScoreboardTab:close() --[[ @ 0]]
	f27_arg0.TopBar:close() --[[ @ 0]]
end
 --[[ @ 0]]
