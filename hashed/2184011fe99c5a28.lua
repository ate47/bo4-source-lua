-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:134b7fd0c151db2e" ) --[[ @ 0]]
require( "x64:24ebc9b16ab98c5" ) --[[ @ 0]]
require( "x64:6877966f09b2444c" ) --[[ @ 0]]
require( "x64:7d4aada18a6388eb" ) --[[ @ 0]]
require( "x64:798ada54f032daa3" ) --[[ @ 0]]
require( "x64:8b3af522c6cb7a3" ) --[[ @ 0]]

CoD.CompassGroupMPContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CompassGroupMPContainer.__defaultWidth = 350 --[[ @ 0]]
CoD.CompassGroupMPContainer.__defaultHeight = 350 --[[ @ 0]]
CoD.CompassGroupMPContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg1, "hudItems.spawnSelectedLocation" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "PlayerSettingsUpdate", "" ) --[[ @ 0]]
	self:setClass( CoD.CompassGroupMPContainer ) --[[ @ 0]]
	self.id = "CompassGroupMPContainer" --[[ @ 0]]
	self.soundSet = "HUD" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local WZBlur = LUI.UIImage.new( 0, 0, 12, 332, 0, 0, 19, 331 ) --[[ @ 0]]
	WZBlur:setAlpha( 0 ) --[[ @ 0]]
	WZBlur:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_map_square_backer_blur" ) ) --[[ @ 0]]
	WZBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	WZBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( WZBlur ) --[[ @ 0]]
	self.WZBlur = WZBlur --[[ @ 0]]
	
	local WZBacker = LUI.UIImage.new( 0, 0, 12, 332, 0, 0, 19, 331 ) --[[ @ 0]]
	WZBacker:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_map_square_backer" ) ) --[[ @ 0]]
	self:addElement( WZBacker ) --[[ @ 0]]
	self.WZBacker = WZBacker --[[ @ 0]]
	
	local Border = LUI.UIImage.new( 0, 0, 2, 322, 0, 0, 14, 326 ) --[[ @ 0]]
	Border:setAlpha( 0 ) --[[ @ 0]]
	Border:setScale( 0.99, 0.99 ) --[[ @ 0]]
	Border:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_map_square_border" ) ) --[[ @ 0]]
	self:addElement( Border ) --[[ @ 0]]
	self.Border = Border --[[ @ 0]]
	
	local bg = LUI.UIImage.new( 0.5, 0.5, -143.5, 143.5, 0.5, 0.5, -143.5, 143.5 ) --[[ @ 0]]
	bg:setRGB( 0.07, 0.07, 0.07 ) --[[ @ 0]]
	bg:setAlpha( 0 ) --[[ @ 0]]
	bg:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_elliptical_ring_normal" ) ) --[[ @ 0]]
	bg:setShaderVector( 0, 50, 0, 0, 0 ) --[[ @ 0]]
	bg:setShaderVector( 1, 100, 100, 0, 0 ) --[[ @ 0]]
	bg:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( bg ) --[[ @ 0]]
	self.bg = bg --[[ @ 0]]
	
	local AwarenessRingBacker = CoD.CompassAwarenessRingBacker.new( f1_arg0, f1_arg1, 0.5, 0.5, -175, 175, 0.5, 0.5, -175, 175 ) --[[ @ 0]]
	AwarenessRingBacker:subscribeToGlobalModel( f1_arg1, "HUDItems", "yaw", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			AwarenessRingBacker:setZRot( CoD.HUDUtility.RotateAwarenessRingIfEnabled( Negate( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AwarenessRingBacker ) --[[ @ 0]]
	self.AwarenessRingBacker = AwarenessRingBacker --[[ @ 0]]
	
	local CompassGroup = CoD.CompassGroupContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -146.5, 146.5, 0.5, 0.5, -146.5, 146.5 ) --[[ @ 0]]
	CompassGroup:setScale( 0.9, 0.9 ) --[[ @ 0]]
	self:addElement( CompassGroup ) --[[ @ 0]]
	self.CompassGroup = CompassGroup --[[ @ 0]]
	
	local EMPbacker = LUI.UIImage.new( 0, 0, -1, 351, 0, 0, 8, 344 ) --[[ @ 0]]
	EMPbacker:setRGB( 0, 0, 0 ) --[[ @ 0]]
	EMPbacker:setAlpha( 0 ) --[[ @ 0]]
	EMPbacker:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_compass" ) ) --[[ @ 0]]
	self:addElement( EMPbacker ) --[[ @ 0]]
	self.EMPbacker = EMPbacker --[[ @ 0]]
	
	local empMinimap = LUI.UIImage.new( 0, 0, -2, 350, 0, 0, 16.5, 352.5 ) --[[ @ 0]]
	empMinimap:setAlpha( 0 ) --[[ @ 0]]
	empMinimap:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_compass" ) ) --[[ @ 0]]
	empMinimap:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_emp" ) ) --[[ @ 0]]
	empMinimap:setShaderVector( 0, 30.27, 0, 0, 0 ) --[[ @ 0]]
	empMinimap:setShaderVector( 1, 1, 0, 0, 0 ) --[[ @ 0]]
	empMinimap:setShaderVector( 2, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( empMinimap ) --[[ @ 0]]
	self.empMinimap = empMinimap --[[ @ 0]]
	
	local EMPSquareBacker = LUI.UIImage.new( 0, 0, 17, 333, 0, 0, 23, 335 ) --[[ @ 0]]
	EMPSquareBacker:setRGB( 0, 0, 0 ) --[[ @ 0]]
	EMPSquareBacker:setAlpha( 0 ) --[[ @ 0]]
	EMPSquareBacker:setImage( RegisterImage( @"hash_415BFD9E73512722" ) ) --[[ @ 0]]
	self:addElement( EMPSquareBacker ) --[[ @ 0]]
	self.EMPSquareBacker = EMPSquareBacker --[[ @ 0]]
	
	local EMPMinimapSquare = LUI.UIImage.new( 0, 0, 17, 333, 0, 0, 23, 335 ) --[[ @ 0]]
	EMPMinimapSquare:setAlpha( 0 ) --[[ @ 0]]
	EMPMinimapSquare:setImage( RegisterImage( @"hash_6F6D3426FEBC0C41" ) ) --[[ @ 0]]
	EMPMinimapSquare:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_emp" ) ) --[[ @ 0]]
	EMPMinimapSquare:setShaderVector( 0, 35.93, 0, 0, 0 ) --[[ @ 0]]
	EMPMinimapSquare:setShaderVector( 1, 0.83, 0, 0, 0 ) --[[ @ 0]]
	EMPMinimapSquare:setShaderVector( 2, 0.49, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( EMPMinimapSquare ) --[[ @ 0]]
	self.EMPMinimapSquare = EMPMinimapSquare --[[ @ 0]]
	
	local CompassGroupFixed = CoD.CompassGroupSquare.new( f1_arg0, f1_arg1, 0, 0, 16, 336, 0, 0, -10, 340 ) --[[ @ 0]]
	CompassGroupFixed:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_5C212964B40FA826" ) ) --[[ @ 0]]
	self:addElement( CompassGroupFixed ) --[[ @ 0]]
	self.CompassGroupFixed = CompassGroupFixed --[[ @ 0]]
	
	local AwarenessRing = CoD.CompassAwarenessContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -165, 165, 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	AwarenessRing:setScale( 0.78, 0.78 ) --[[ @ 0]]
	AwarenessRing:subscribeToGlobalModel( f1_arg1, "HUDItems", "yaw", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			AwarenessRing:setZRot( CoD.HUDUtility.RotateAwarenessRingIfEnabled( Negate( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AwarenessRing ) --[[ @ 0]]
	self.AwarenessRing = AwarenessRing --[[ @ 0]]
	
	local LED = LUI.UIImage.new( 0, 0, 2, 352, 0, 0, 1, 351 ) --[[ @ 0]]
	LED:setAlpha( 0 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"hash_6AB51226AFA7482D" ) ) --[[ @ 0]]
	LED:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 0, 1, 351, 0, 0, 1, 351 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"hash_28948B5B65EE07D9" ) ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local CircularCompass = CoD.CircularCompass.new( f1_arg0, f1_arg1, 0.5, 0.5, -165, 165, 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	CircularCompass:subscribeToGlobalModel( f1_arg1, "HUDItems", "yaw", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			CircularCompass:setZRot( Negate( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CircularCompass ) --[[ @ 0]]
	self.CircularCompass = CircularCompass --[[ @ 0]]
	
	local MinimapDetected = CoD.MinimapDetected.new( f1_arg0, f1_arg1, 0, 0, 266, 322, 0, 0, 293.5, 349.5 ) --[[ @ 0]]
	self:addElement( MinimapDetected ) --[[ @ 0]]
	self.MinimapDetected = MinimapDetected --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HiddenMultiPickup",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
				if f6_local0 then
					if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_compass_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) then
						f6_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) --[[ @ 0]]
						if f6_local0 then
						
						else
							return f6_local0
						end
					end
					f6_local0 = not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) --[[ @ 0]]
				end
				return f6_local0
			end
		},
		{
			stateName = "InvisibleVehicle",
			condition = function ( menu, element, event )
				return Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not IsWarzone()
			end
		},
		{
			stateName = "InvisiblePreference",
			condition = function ( menu, element, event )
				return CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideMinimapUI", "warzoneHideMinimap" )
			end
		},
		{
			stateName = "CodCasterVisible",
			condition = function ( menu, element, event )
				local f9_local0 = IsCodCaster( f1_arg1 ) --[[ @ 0]]
				if f9_local0 then
					f9_local0 = IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_ds_minimap", Enum[@"shoutcastersettingminimapmode"][@"shoutcaster_setting_minimap_mode_standard"] ) --[[ @ 0]]
					if f9_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "CodCaster.showFullScreenMap" ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) then
							f9_local0 = not ScoreboardVisible( f1_arg1 ) --[[ @ 0]]
						else
							f9_local0 = false --[[ @ 0]]
						end
					end
				end
				return f9_local0
			end
		},
		{
			stateName = "CodCasterInvisible",
			condition = function ( menu, element, event )
				return IsCodCaster( f1_arg1 )
			end
		},
		{
			stateName = "EMPCircular",
			condition = function ( menu, element, event )
				local f11_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
				if f11_local0 then
					if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_compass_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) then
						f11_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
						if f11_local0 then
							f11_local0 = CoD.HUDUtility.IsRotatingMinimapEnabled( f1_arg1 ) --[[ @ 0]]
						end
					else
						f11_local0 = false --[[ @ 0]]
					end
				end
				return f11_local0
			end
		},
		{
			stateName = "EMP",
			condition = function ( menu, element, event )
				local f12_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
				if f12_local0 then
					if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_compass_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) then
						f12_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
					else
						f12_local0 = false --[[ @ 0]]
					end
				end
				return f12_local0
			end
		},
		{
			stateName = "CircularFogOfWar",
			condition = function ( menu, element, event )
				local f13_local0 = CoD.HUDUtility.IsRotatingMinimapEnabled( f1_arg1 ) --[[ @ 0]]
				if f13_local0 then
					f13_local0 = CoD.HUDUtility.IsFogOfWarEnabled( f1_arg1 ) --[[ @ 0]]
					if f13_local0 then
						f13_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
					end
				end
				return f13_local0
			end
		},
		{
			stateName = "Circular",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsRotatingMinimapEnabled( f1_arg1 ) and CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" )
			end
		},
		{
			stateName = "WZDefaultState",
			condition = function ( menu, element, event )
				return IsWarzone()
			end
		}
	} ) --[[ @ 0]]
	local f1_local17 = self --[[ @ 0]]
	local f1_local18 = self.subscribeToModel --[[ @ 0]]
	local f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["hudItems.playerSpawned"], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "hudItems.playerSpawned"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_compass_visible"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_compass_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]], function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]], function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]], function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f32_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f32_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["lobbyRoot.lobbyNav"], function ( f33_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f33_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19.PlayerSettingsUpdate, function ( f34_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["factions.isCoDCaster"], function ( f35_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19.profileSettingsUpdated, function ( f36_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["CodCaster.showFullScreenMap"], function ( f37_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f37_arg0:get(),
			modelName = "CodCaster.showFullScreenMap"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19.forceScoreboard, function ( f38_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f38_arg0:get(),
			modelName = "forceScoreboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f39_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f39_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CompassGroupMPContainer.__resetProperties = function ( f40_arg0 )
	f40_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
	f40_arg0.bg:completeAnimation() --[[ @ 0]]
	f40_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
	f40_arg0.Frame:completeAnimation() --[[ @ 0]]
	f40_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
	f40_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
	f40_arg0.WZBacker:completeAnimation() --[[ @ 0]]
	f40_arg0.Border:completeAnimation() --[[ @ 0]]
	f40_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
	f40_arg0.LED:completeAnimation() --[[ @ 0]]
	f40_arg0.empMinimap:completeAnimation() --[[ @ 0]]
	f40_arg0.WZBlur:completeAnimation() --[[ @ 0]]
	f40_arg0.EMPbacker:completeAnimation() --[[ @ 0]]
	f40_arg0.MinimapDetected:completeAnimation() --[[ @ 0]]
	f40_arg0.EMPSquareBacker:completeAnimation() --[[ @ 0]]
	f40_arg0.EMPMinimapSquare:completeAnimation() --[[ @ 0]]
	f40_arg0.CircularCompass:setLeftRight( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	f40_arg0.CircularCompass:setTopBottom( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	f40_arg0.CircularCompass:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.bg:setLeftRight( 0.5, 0.5, -143.5, 143.5 ) --[[ @ 0]]
	f40_arg0.bg:setRGB( 0.07, 0.07, 0.07 ) --[[ @ 0]]
	f40_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.CompassGroup:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.Frame:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.AwarenessRingBacker:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.AwarenessRing:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.WZBacker:setLeftRight( 0, 0, 12, 332 ) --[[ @ 0]]
	f40_arg0.WZBacker:setTopBottom( 0, 0, 19, 331 ) --[[ @ 0]]
	f40_arg0.WZBacker:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f40_arg0.WZBacker:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.Border:setTopBottom( 0, 0, 14, 326 ) --[[ @ 0]]
	f40_arg0.Border:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.CompassGroupFixed:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.empMinimap:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.WZBlur:setLeftRight( 0, 0, 12, 332 ) --[[ @ 0]]
	f40_arg0.WZBlur:setTopBottom( 0, 0, 19, 331 ) --[[ @ 0]]
	f40_arg0.WZBlur:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.EMPbacker:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.MinimapDetected:setAlpha( 1 ) --[[ @ 0]]
	f40_arg0.EMPSquareBacker:setAlpha( 0 ) --[[ @ 0]]
	f40_arg0.EMPMinimapSquare:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CompassGroupMPContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f41_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f41_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.WZBacker ) --[[ @ 0]]
			f41_arg0.Border:completeAnimation() --[[ @ 0]]
			f41_arg0.Border:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Border ) --[[ @ 0]]
			f41_arg0.bg:completeAnimation() --[[ @ 0]]
			f41_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.bg ) --[[ @ 0]]
			f41_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f41_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f41_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f41_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.CompassGroup ) --[[ @ 0]]
			f41_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f41_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.CompassGroupFixed ) --[[ @ 0]]
			f41_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f41_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AwarenessRing ) --[[ @ 0]]
			f41_arg0.Frame:completeAnimation() --[[ @ 0]]
			f41_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Frame ) --[[ @ 0]]
			f41_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f41_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	HiddenMultiPickup = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f42_arg0.WZBlur:completeAnimation() --[[ @ 0]]
			f42_arg0.WZBlur:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.WZBlur ) --[[ @ 0]]
			f42_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f42_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.WZBacker ) --[[ @ 0]]
			f42_arg0.Border:completeAnimation() --[[ @ 0]]
			f42_arg0.Border:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Border ) --[[ @ 0]]
			f42_arg0.bg:completeAnimation() --[[ @ 0]]
			f42_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.bg ) --[[ @ 0]]
			f42_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f42_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f42_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f42_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.CompassGroup ) --[[ @ 0]]
			f42_arg0.empMinimap:completeAnimation() --[[ @ 0]]
			f42_arg0.empMinimap:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.empMinimap ) --[[ @ 0]]
			f42_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f42_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.CompassGroupFixed ) --[[ @ 0]]
			f42_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f42_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.AwarenessRing ) --[[ @ 0]]
			f42_arg0.LED:completeAnimation() --[[ @ 0]]
			f42_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.LED ) --[[ @ 0]]
			f42_arg0.Frame:completeAnimation() --[[ @ 0]]
			f42_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Frame ) --[[ @ 0]]
			f42_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f42_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f43_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f43_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.WZBacker ) --[[ @ 0]]
			f43_arg0.bg:completeAnimation() --[[ @ 0]]
			f43_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.bg ) --[[ @ 0]]
			f43_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f43_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f43_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f43_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.CompassGroup ) --[[ @ 0]]
			f43_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f43_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.CompassGroupFixed ) --[[ @ 0]]
			f43_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f43_arg0.AwarenessRing:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.AwarenessRing ) --[[ @ 0]]
			f43_arg0.LED:completeAnimation() --[[ @ 0]]
			f43_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.LED ) --[[ @ 0]]
			f43_arg0.Frame:completeAnimation() --[[ @ 0]]
			f43_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.Frame ) --[[ @ 0]]
			f43_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f43_arg0.CircularCompass:setLeftRight( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
			f43_arg0.CircularCompass:setTopBottom( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
			f43_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.CircularCompass ) --[[ @ 0]]
		end,
		WZDefaultState = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			local f44_local0 = function ( f45_arg0 )
				f44_arg0.WZBacker:beginAnimation( 100 ) --[[ @ 0]]
				f44_arg0.WZBacker:setAlpha( 1 ) --[[ @ 0]]
				f44_arg0.WZBacker:registerEventHandler( "interrupted_keyframe", f44_arg0.clipInterrupted ) --[[ @ 0]]
				f44_arg0.WZBacker:registerEventHandler( "transition_complete_keyframe", f44_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f44_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f44_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f44_local0( f44_arg0.WZBacker ) --[[ @ 0]]
			f44_arg0.bg:completeAnimation() --[[ @ 0]]
			f44_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.bg ) --[[ @ 0]]
			f44_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f44_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f44_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f44_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.CompassGroup ) --[[ @ 0]]
			local f44_local1 = function ( f46_arg0 )
				f44_arg0.CompassGroupFixed:beginAnimation( 100 ) --[[ @ 0]]
				f44_arg0.CompassGroupFixed:setAlpha( 1 ) --[[ @ 0]]
				f44_arg0.CompassGroupFixed:registerEventHandler( "interrupted_keyframe", f44_arg0.clipInterrupted ) --[[ @ 0]]
				f44_arg0.CompassGroupFixed:registerEventHandler( "transition_complete_keyframe", f44_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f44_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f44_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f44_local1( f44_arg0.CompassGroupFixed ) --[[ @ 0]]
			f44_arg0.Frame:completeAnimation() --[[ @ 0]]
			f44_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.Frame ) --[[ @ 0]]
			f44_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f44_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	InvisibleVehicle = {
		DefaultClip = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f47_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f47_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.WZBacker ) --[[ @ 0]]
			f47_arg0.bg:completeAnimation() --[[ @ 0]]
			f47_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.bg ) --[[ @ 0]]
			f47_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f47_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f47_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f47_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.CompassGroup ) --[[ @ 0]]
			f47_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f47_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.CompassGroupFixed ) --[[ @ 0]]
			f47_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f47_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.AwarenessRing ) --[[ @ 0]]
			f47_arg0.Frame:completeAnimation() --[[ @ 0]]
			f47_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.Frame ) --[[ @ 0]]
			f47_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f47_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	InvisiblePreference = {
		DefaultClip = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			local f48_local0 = function ( f49_arg0 )
				f48_arg0.WZBacker:beginAnimation( 90 ) --[[ @ 0]]
				f48_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
				f48_arg0.WZBacker:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.WZBacker:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f48_arg0.WZBacker:setAlpha( 1 ) --[[ @ 0]]
			f48_local0( f48_arg0.WZBacker ) --[[ @ 0]]
			f48_arg0.bg:completeAnimation() --[[ @ 0]]
			f48_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.bg ) --[[ @ 0]]
			f48_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f48_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.AwarenessRingBacker ) --[[ @ 0]]
			local f48_local1 = function ( f50_arg0 )
				f48_arg0.CompassGroup:beginAnimation( 90 ) --[[ @ 0]]
				f48_arg0.CompassGroup:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.CompassGroup:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f48_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f48_local1( f48_arg0.CompassGroup ) --[[ @ 0]]
			f48_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f48_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.CompassGroupFixed ) --[[ @ 0]]
			local f48_local2 = function ( f51_arg0 )
				f48_arg0.AwarenessRing:beginAnimation( 90 ) --[[ @ 0]]
				f48_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
				f48_arg0.AwarenessRing:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.AwarenessRing:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f48_arg0.AwarenessRing:setAlpha( 1 ) --[[ @ 0]]
			f48_local2( f48_arg0.AwarenessRing ) --[[ @ 0]]
			f48_arg0.LED:completeAnimation() --[[ @ 0]]
			f48_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.LED ) --[[ @ 0]]
			f48_arg0.Frame:completeAnimation() --[[ @ 0]]
			f48_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.Frame ) --[[ @ 0]]
			f48_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f48_arg0.CircularCompass:setLeftRight( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
			f48_arg0.CircularCompass:setTopBottom( 0.5, 0.5, -165, 165 ) --[[ @ 0]]
			f48_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.CircularCompass ) --[[ @ 0]]
		end,
		WZDefaultState = function ( f52_arg0, f52_arg1 )
			f52_arg0:__resetProperties() --[[ @ 0]]
			f52_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			local f52_local0 = function ( f53_arg0 )
				f52_arg0.WZBacker:beginAnimation( 100 ) --[[ @ 0]]
				f52_arg0.WZBacker:setAlpha( 1 ) --[[ @ 0]]
				f52_arg0.WZBacker:registerEventHandler( "interrupted_keyframe", f52_arg0.clipInterrupted ) --[[ @ 0]]
				f52_arg0.WZBacker:registerEventHandler( "transition_complete_keyframe", f52_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f52_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f52_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f52_local0( f52_arg0.WZBacker ) --[[ @ 0]]
			f52_arg0.bg:completeAnimation() --[[ @ 0]]
			f52_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.bg ) --[[ @ 0]]
			f52_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f52_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f52_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f52_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.CompassGroup ) --[[ @ 0]]
			local f52_local1 = function ( f54_arg0 )
				f52_arg0.CompassGroupFixed:beginAnimation( 100 ) --[[ @ 0]]
				f52_arg0.CompassGroupFixed:setAlpha( 1 ) --[[ @ 0]]
				f52_arg0.CompassGroupFixed:registerEventHandler( "interrupted_keyframe", f52_arg0.clipInterrupted ) --[[ @ 0]]
				f52_arg0.CompassGroupFixed:registerEventHandler( "transition_complete_keyframe", f52_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f52_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f52_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f52_local1( f52_arg0.CompassGroupFixed ) --[[ @ 0]]
			f52_arg0.Frame:completeAnimation() --[[ @ 0]]
			f52_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.Frame ) --[[ @ 0]]
			f52_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f52_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	CodCasterVisible = {
		DefaultClip = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f55_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f55_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.WZBacker ) --[[ @ 0]]
			f55_arg0.bg:completeAnimation() --[[ @ 0]]
			f55_arg0.bg:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.bg ) --[[ @ 0]]
			f55_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f55_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.CompassGroupFixed ) --[[ @ 0]]
		end
	},
	CodCasterInvisible = {
		DefaultClip = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f56_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f56_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.WZBacker ) --[[ @ 0]]
			f56_arg0.bg:completeAnimation() --[[ @ 0]]
			f56_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.bg ) --[[ @ 0]]
			f56_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f56_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f56_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f56_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.CompassGroup ) --[[ @ 0]]
			f56_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f56_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.CompassGroupFixed ) --[[ @ 0]]
			f56_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f56_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.AwarenessRing ) --[[ @ 0]]
			f56_arg0.Frame:completeAnimation() --[[ @ 0]]
			f56_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.Frame ) --[[ @ 0]]
			f56_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f56_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.CircularCompass ) --[[ @ 0]]
		end
	},
	EMPCircular = {
		DefaultClip = function ( f57_arg0, f57_arg1 )
			f57_arg0:__resetProperties() --[[ @ 0]]
			f57_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f57_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f57_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.WZBacker ) --[[ @ 0]]
			f57_arg0.bg:completeAnimation() --[[ @ 0]]
			f57_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.bg ) --[[ @ 0]]
			f57_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f57_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f57_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f57_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.CompassGroup ) --[[ @ 0]]
			f57_arg0.EMPbacker:completeAnimation() --[[ @ 0]]
			f57_arg0.EMPbacker:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.EMPbacker ) --[[ @ 0]]
			f57_arg0.empMinimap:completeAnimation() --[[ @ 0]]
			f57_arg0.empMinimap:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.empMinimap ) --[[ @ 0]]
			f57_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f57_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.CompassGroupFixed ) --[[ @ 0]]
			f57_arg0.Frame:completeAnimation() --[[ @ 0]]
			f57_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.Frame ) --[[ @ 0]]
			f57_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f57_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.CircularCompass ) --[[ @ 0]]
			f57_arg0.MinimapDetected:completeAnimation() --[[ @ 0]]
			f57_arg0.MinimapDetected:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.MinimapDetected ) --[[ @ 0]]
		end
	},
	EMP = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 13 ) --[[ @ 0]]
			f58_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f58_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WZBacker ) --[[ @ 0]]
			f58_arg0.bg:completeAnimation() --[[ @ 0]]
			f58_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.bg ) --[[ @ 0]]
			f58_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f58_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f58_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f58_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.CompassGroup ) --[[ @ 0]]
			f58_arg0.EMPbacker:completeAnimation() --[[ @ 0]]
			f58_arg0.EMPbacker:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.EMPbacker ) --[[ @ 0]]
			f58_arg0.empMinimap:completeAnimation() --[[ @ 0]]
			f58_arg0.empMinimap:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.empMinimap ) --[[ @ 0]]
			f58_arg0.EMPSquareBacker:completeAnimation() --[[ @ 0]]
			f58_arg0.EMPSquareBacker:setAlpha( 1 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.EMPSquareBacker ) --[[ @ 0]]
			f58_arg0.EMPMinimapSquare:completeAnimation() --[[ @ 0]]
			f58_arg0.EMPMinimapSquare:setAlpha( 1 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.EMPMinimapSquare ) --[[ @ 0]]
			f58_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f58_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.CompassGroupFixed ) --[[ @ 0]]
			f58_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f58_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.AwarenessRing ) --[[ @ 0]]
			f58_arg0.Frame:completeAnimation() --[[ @ 0]]
			f58_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.Frame ) --[[ @ 0]]
			f58_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f58_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.CircularCompass ) --[[ @ 0]]
			f58_arg0.MinimapDetected:completeAnimation() --[[ @ 0]]
			f58_arg0.MinimapDetected:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.MinimapDetected ) --[[ @ 0]]
		end
	},
	CircularFogOfWar = {
		DefaultClip = function ( f59_arg0, f59_arg1 )
			f59_arg0:__resetProperties() --[[ @ 0]]
			f59_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f59_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f59_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WZBacker ) --[[ @ 0]]
			f59_arg0.bg:completeAnimation() --[[ @ 0]]
			f59_arg0.bg:setLeftRight( 0.5, 0.5, -143.5, 143.5 ) --[[ @ 0]]
			f59_arg0.bg:setRGB( 0.07, 0.07, 0.07 ) --[[ @ 0]]
			f59_arg0.bg:setAlpha( 1 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.bg ) --[[ @ 0]]
			f59_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f59_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f59_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f59_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.CompassGroupFixed ) --[[ @ 0]]
		end
	},
	Circular = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f60_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f60_arg0.WZBacker:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WZBacker ) --[[ @ 0]]
			f60_arg0.bg:completeAnimation() --[[ @ 0]]
			f60_arg0.bg:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.bg ) --[[ @ 0]]
			f60_arg0.CompassGroupFixed:completeAnimation() --[[ @ 0]]
			f60_arg0.CompassGroupFixed:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.CompassGroupFixed ) --[[ @ 0]]
		end
	},
	WZDefaultState = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f61_arg0.WZBlur:completeAnimation() --[[ @ 0]]
			f61_arg0.WZBlur:setLeftRight( 0, 0, 14, 334 ) --[[ @ 0]]
			f61_arg0.WZBlur:setTopBottom( 0, 0, 21.5, 333.5 ) --[[ @ 0]]
			f61_arg0.WZBlur:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WZBlur ) --[[ @ 0]]
			f61_arg0.WZBacker:completeAnimation() --[[ @ 0]]
			f61_arg0.WZBacker:setLeftRight( 0, 0, 14, 334 ) --[[ @ 0]]
			f61_arg0.WZBacker:setTopBottom( 0, 0, 21.5, 333.5 ) --[[ @ 0]]
			f61_arg0.WZBacker:setRGB( 0.11, 0.11, 0.11 ) --[[ @ 0]]
			f61_arg0.WZBacker:setAlpha( 0.88 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WZBacker ) --[[ @ 0]]
			f61_arg0.Border:completeAnimation() --[[ @ 0]]
			f61_arg0.Border:setTopBottom( 0, 0, 15.5, 327.5 ) --[[ @ 0]]
			f61_arg0.Border:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.Border ) --[[ @ 0]]
			f61_arg0.bg:completeAnimation() --[[ @ 0]]
			f61_arg0.bg:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.bg ) --[[ @ 0]]
			f61_arg0.AwarenessRingBacker:completeAnimation() --[[ @ 0]]
			f61_arg0.AwarenessRingBacker:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.AwarenessRingBacker ) --[[ @ 0]]
			f61_arg0.CompassGroup:completeAnimation() --[[ @ 0]]
			f61_arg0.CompassGroup:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.CompassGroup ) --[[ @ 0]]
			f61_arg0.AwarenessRing:completeAnimation() --[[ @ 0]]
			f61_arg0.AwarenessRing:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.AwarenessRing ) --[[ @ 0]]
			f61_arg0.Frame:completeAnimation() --[[ @ 0]]
			f61_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.Frame ) --[[ @ 0]]
			f61_arg0.CircularCompass:completeAnimation() --[[ @ 0]]
			f61_arg0.CircularCompass:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.CircularCompass ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CompassGroupMPContainer.__onClose = function ( f62_arg0 )
	f62_arg0.AwarenessRingBacker:close() --[[ @ 0]]
	f62_arg0.CompassGroup:close() --[[ @ 0]]
	f62_arg0.CompassGroupFixed:close() --[[ @ 0]]
	f62_arg0.AwarenessRing:close() --[[ @ 0]]
	f62_arg0.CircularCompass:close() --[[ @ 0]]
	f62_arg0.MinimapDetected:close() --[[ @ 0]]
end
 --[[ @ 0]]
