-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:362eee6f7ab7e3b3" ) --[[ @ 0]]

CoD.ZMInventoryListBackingInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMInventoryListBackingInternal.__defaultWidth = 1380 --[[ @ 0]]
CoD.ZMInventoryListBackingInternal.__defaultHeight = 80 --[[ @ 0]]
CoD.ZMInventoryListBackingInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMInventoryListBackingInternal ) --[[ @ 0]]
	self.id = "ZMInventoryListBackingInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( -0.03, 1.03, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SceneBlur:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_381EEB1F96D4BE0A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local SolidBase = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SolidBase:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SolidBase:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( SolidBase ) --[[ @ 0]]
	self.SolidBase = SolidBase --[[ @ 0]]
	
	local BaseGradientL = LUI.UIImage.new( -0.03, 0.5, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BaseGradientL:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BaseGradientL:setAlpha( 0.1 ) --[[ @ 0]]
	BaseGradientL:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_gradient_normal" ) ) --[[ @ 0]]
	BaseGradientL:setShaderVector( 0, 0, 0, 0, 15 ) --[[ @ 0]]
	BaseGradientL:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	BaseGradientL:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BaseGradientL ) --[[ @ 0]]
	self.BaseGradientL = BaseGradientL --[[ @ 0]]
	
	local BaseGradientR = LUI.UIImage.new( 0.5, 1.03, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BaseGradientR:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BaseGradientR:setAlpha( 0.1 ) --[[ @ 0]]
	BaseGradientR:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_gradient_normal" ) ) --[[ @ 0]]
	BaseGradientR:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BaseGradientR:setShaderVector( 1, 0, 0, 0, 15 ) --[[ @ 0]]
	BaseGradientR:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BaseGradientR ) --[[ @ 0]]
	self.BaseGradientR = BaseGradientR --[[ @ 0]]
	
	local TextureMid = LUI.UIImage.new( 0, 1, 0, 0, 0.5, 0.5, -40, 40 ) --[[ @ 0]]
	TextureMid:setAlpha( 0.8 ) --[[ @ 0]]
	TextureMid:setImage( RegisterImage( @"uie_zm_hud_inventory_backing_mid" ) ) --[[ @ 0]]
	TextureMid:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	TextureMid:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	TextureMid:setShaderVector( 1, 1, 0, 0, 0 ) --[[ @ 0]]
	TextureMid:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( TextureMid ) --[[ @ 0]]
	self.TextureMid = TextureMid --[[ @ 0]]
	
	local Tip = CoD.ZMInventoryListBackingInternalTip.new( f1_arg0, f1_arg1, 0, 0, -100, 0, 0, 0, 0, 80 ) --[[ @ 0]]
	self:addElement( Tip ) --[[ @ 0]]
	self.Tip = Tip --[[ @ 0]]
	
	local End = CoD.ZMInventoryListBackingInternalTip.new( f1_arg0, f1_arg1, 1, 1, 0, 100, 0, 0, 0, 80 ) --[[ @ 0]]
	End:setYRot( 180 ) --[[ @ 0]]
	self:addElement( End ) --[[ @ 0]]
	self.End = End --[[ @ 0]]
	
	local BGTip = LUI.UIImage.new( 0, 0, -100, 0, 0, 0, -10, 90 ) --[[ @ 0]]
	BGTip:setImage( RegisterImage( @"uie_zm_hud_inventory_framearrow" ) ) --[[ @ 0]]
	self:addElement( BGTip ) --[[ @ 0]]
	self.BGTip = BGTip --[[ @ 0]]
	
	local BGEnd = LUI.UIImage.new( 1, 1, 0, 100, 0, 0, -10, 90 ) --[[ @ 0]]
	BGEnd:setYRot( 180 ) --[[ @ 0]]
	BGEnd:setImage( RegisterImage( @"uie_zm_hud_inventory_framearrow" ) ) --[[ @ 0]]
	self:addElement( BGEnd ) --[[ @ 0]]
	self.BGEnd = BGEnd --[[ @ 0]]
	
	local DividerBottom = LUI.UIImage.new( 0.5, 0.5, -70, 70, 0, 0, 70, 90 ) --[[ @ 0]]
	DividerBottom:setImage( RegisterImage( @"uie_zm_hud_inventory_framedivider_horizontal" ) ) --[[ @ 0]]
	self:addElement( DividerBottom ) --[[ @ 0]]
	self.DividerBottom = DividerBottom --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] )
			end
		}
	} ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	local f1_local12 = self.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]], function ( f3_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZMInventoryListBackingInternal.__onClose = function ( f4_arg0 )
	f4_arg0.Tip:close() --[[ @ 0]]
	f4_arg0.End:close() --[[ @ 0]]
end
 --[[ @ 0]]
