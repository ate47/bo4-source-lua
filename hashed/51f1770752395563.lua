-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:7aa18a2396b77054" ) --[[ @ 0]]
require( "x64:4ca1dc89b2aa714c" ) --[[ @ 0]]
require( "x64:4b1b346e32476a2e" ) --[[ @ 0]]

CoD.ActiveCamoGrid = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ActiveCamoGrid.__defaultWidth = 1254 --[[ @ 0]]
CoD.ActiveCamoGrid.__defaultHeight = 350 --[[ @ 0]]
CoD.ActiveCamoGrid.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ActiveCamoGrid ) --[[ @ 0]]
	self.id = "ActiveCamoGrid" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BottomBracket9Slice = LUI.UIImage.new( 0, 0, 0, 1254, 0, 0, 28, 37 ) --[[ @ 0]]
	BottomBracket9Slice:setAlpha( 0.5 ) --[[ @ 0]]
	BottomBracket9Slice:setZRot( 180 ) --[[ @ 0]]
	BottomBracket9Slice:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	BottomBracket9Slice:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	BottomBracket9Slice:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BottomBracket9Slice:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( BottomBracket9Slice ) --[[ @ 0]]
	self.BottomBracket9Slice = BottomBracket9Slice --[[ @ 0]]
	
	local Label = LUI.UIText.new( 0, 0, 0, 316, 0, 0, 11, 27 ) --[[ @ 0]]
	Label:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	Label:setText( LocalizeToUpperString( @"hash_57A8BC9CB373E4C6" ) ) --[[ @ 0]]
	Label:setTTF( "default" ) --[[ @ 0]]
	Label:setLetterSpacing( 4 ) --[[ @ 0]]
	Label:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( Label ) --[[ @ 0]]
	self.Label = Label --[[ @ 0]]
	
	local ActiveCamoList = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	ActiveCamoList:mergeStateConditions( {
		{
			stateName = "New",
			condition = function ( menu, element, event )
				return CoD.BreadcrumbUtility.IsWeaponCamoNew( menu, element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ActiveCamoList:setLeftRight( 0, 0, 12, 1242 ) --[[ @ 0]]
	ActiveCamoList:setTopBottom( 0, 0, 40, 300 ) --[[ @ 0]]
	ActiveCamoList:setWidgetType( CoD.ActiveThemeSlot ) --[[ @ 0]]
	ActiveCamoList:setHorizontalCount( 10 ) --[[ @ 0]]
	ActiveCamoList:setSpacing( 10 ) --[[ @ 0]]
	ActiveCamoList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ActiveCamoList:setHorizontalScrollbar( CoD.PC_GridHorizontalScrollbar ) --[[ @ 0]]
	ActiveCamoList:setHorizontalCounter( CoD.horizontalCounter ) --[[ @ 0]]
	ActiveCamoList:setDataSource( "WeaponOptions" ) --[[ @ 0]]
	ActiveCamoList:linkToElementModel( ActiveCamoList, "itemIndex", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ActiveCamoList:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local4 = ActiveCamoList --[[ @ 0]]
	local CamosWillAppearHereText = ActiveCamoList.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CamosWillAppearHereText( f1_local4, f1_local6.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ActiveCamoList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		CoD.WeaponOptionsUtility.SetFocusedWeaponOptionModel( element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		CoD.CraftUtility.PreviewWeaponCamo( self, element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	ActiveCamoList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if IsElementInState( element, "New" ) then
			CoD.BreadcrumbUtility.SetWeaponCamoOld( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.BreadcrumbUtility.UpdateWeaponCamoBreadcrumbs( f1_arg0, f1_arg1 ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.SetBaseWeaponOptions( element, f1_arg0, f1_arg1 ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.ClearWeaponOptionInfoModel( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		else
			CoD.WeaponOptionsUtility.SetBaseWeaponOptions( element, f1_arg0, f1_arg1 ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.ClearWeaponOptionInfoModel( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	ActiveCamoList:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, controller ) then
			PlaySoundAlias( "cac_equipment_add" ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.SetWeaponOptionClassItemHelper( self, element, controller, menu ) --[[ @ 0]]
			UpdateSelfState( self, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		elseif ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, controller ) then
			PlaySoundAlias( "cac_equipment_add" ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.ClearWeaponOptionsHelper( self, element, menu, controller ) --[[ @ 0]]
			UpdateSelfState( self, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) then
			PlaySoundAlias( "cac_equipment_remove" ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.ClearWeaponOptionsHelper( self, element, menu, controller ) --[[ @ 0]]
			UpdateSelfState( self, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/remove", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) then
			PlaySoundAlias( "cac_equipment_remove" ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.ClearWeaponOptionsHelper( self, element, menu, controller ) --[[ @ 0]]
			UpdateSelfState( self, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, controller, "camoIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"menu/remove", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionCamoWrappedOrLocked( menu, element, controller ) then
			CoD.WeaponOptionsUtility.OpenActiveCamoStageDetailsOverlay( menu, controller, "CamoPersonalizationDetails", element, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionCamoWrappedOrLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"menu/details", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionCamoWrapped( menu, element, controller ) then
			CoD.WeaponOptionsUtility.OpenActiveCamoStageDetailsOverlay( menu, controller, "CamoPersonalizationDetails", element, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and ShouldDisplayContextualMenuInActiveCamoList( controller, element ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionCamoWrapped( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"menu/details", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollLeft( self.ActiveCamoList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.ActiveCamoList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ActiveCamoList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollRight( self.ActiveCamoList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.ActiveCamoList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	ActiveCamoList:subscribeToGlobalModel( f1_arg1, "PerController", "WeaponPersonalization.listUpdate", function ( model )
		CoD.GridAndListUtility.UpdateDataSource( ActiveCamoList, true, false, true ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ActiveCamoList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/remove", function ( f24_arg0, f24_arg1, f24_arg2, f24_arg3 )
		if ShouldDisplayContextualMenuInActiveCamoList( f24_arg2, f24_arg0 ) and CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( f24_arg1, f24_arg0, f24_arg2, "camoIndex" ) then
			return function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
				PlaySoundAlias( "cac_equipment_remove" ) --[[ @ 0]]
				CoD.WeaponOptionsUtility.ClearWeaponOptionsHelper( self, f25_arg0, f25_arg1, f25_arg2 ) --[[ @ 0]]
				UpdateSelfState( self, f25_arg2 ) --[[ @ 0]]
				UpdateAllMenuButtonPrompts( f25_arg1, f25_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	ActiveCamoList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/details", function ( f26_arg0, f26_arg1, f26_arg2, f26_arg3 )
		if IsPC() and ShouldDisplayContextualMenuInActiveCamoList( f26_arg2, f26_arg0 ) and not CoD.WeaponOptionsUtility.IsItemWeaponOptionCamoWrapped( f26_arg1, f26_arg0, f26_arg2 ) then
			return function ( f27_arg0, f27_arg1, f27_arg2, f27_arg3 )
				CoD.WeaponOptionsUtility.OpenActiveCamoStageDetailsOverlay( f27_arg1, f27_arg2, "CamoPersonalizationDetails", f27_arg0, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( ActiveCamoList ) --[[ @ 0]]
	self.ActiveCamoList = ActiveCamoList --[[ @ 0]]
	
	CamosWillAppearHereText = LUI.UIText.new( 0, 0, 12, 1242, 0, 0, 150, 180 ) --[[ @ 0]]
	CamosWillAppearHereText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79B15B2A5E21491C" ) ) --[[ @ 0]]
	CamosWillAppearHereText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	CamosWillAppearHereText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	CamosWillAppearHereText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( CamosWillAppearHereText ) --[[ @ 0]]
	self.CamosWillAppearHereText = CamosWillAppearHereText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ListEmpty",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.ActiveCamoList )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f29_arg0, f29_arg1 )
		f29_arg1.menu = f29_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f29_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ActiveCamoList.id = "ActiveCamoList" --[[ @ 0]]
	self.__defaultFocus = ActiveCamoList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local4 = self --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalCounter( f1_arg0, self.ActiveCamoList ) --[[ @ 0]]
		CoD.PCUtility.SetForceMouseEventDispatch( self, true ) --[[ @ 0]]
	elseif not IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalScrollbar( f1_arg0, self.ActiveCamoList ) --[[ @ 0]]
	end
	f1_local4 = ActiveCamoList --[[ @ 0]]
	if IsPC() then
		CoD.WeaponOptionsUtility.SetReactiveCamoCateogry( f1_arg0, f1_local4 ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local4, f1_arg1, "name", "", "" ) --[[ @ 0]]
	else
		CoD.WeaponOptionsUtility.SetReactiveCamoCateogry( f1_arg0, f1_local4 ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ActiveCamoGrid.__resetProperties = function ( f30_arg0 )
	f30_arg0.CamosWillAppearHereText:completeAnimation() --[[ @ 0]]
	f30_arg0.CamosWillAppearHereText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ActiveCamoGrid.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f31_arg0.CamosWillAppearHereText:completeAnimation() --[[ @ 0]]
			f31_arg0.CamosWillAppearHereText:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.CamosWillAppearHereText ) --[[ @ 0]]
		end
	},
	ListEmpty = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ActiveCamoGrid.__onClose = function ( f33_arg0 )
	f33_arg0.ActiveCamoList:close() --[[ @ 0]]
end
 --[[ @ 0]]
