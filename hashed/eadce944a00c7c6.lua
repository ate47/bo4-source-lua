-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:55f8cf56752aa71b" ) --[[ @ 0]]
require( "x64:2266118fa96f77c8" ) --[[ @ 0]]
require( "x64:73c21aa1a96202c9" ) --[[ @ 0]]
require( "x64:2a52bba85c50cc57" ) --[[ @ 0]]
require( "x64:44dd810316f738ee" ) --[[ @ 0]]
require( "x64:368036bda8abbe94" ) --[[ @ 0]]
require( "x64:7d18f710d30d4ebf" ) --[[ @ 0]]
require( "x64:67935bd4c2250126" ) --[[ @ 0]]
require( "x64:1f285538eb3b9640" ) --[[ @ 0]]

CoD.ContractItemInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ContractItemInternal.__defaultWidth = 418 --[[ @ 0]]
CoD.ContractItemInternal.__defaultHeight = 189 --[[ @ 0]]
CoD.ContractItemInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ContractItemInternal ) --[[ @ 0]]
	self.id = "ContractItemInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backer = CoD.ContractItemBacker.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Backer:linkToElementModel( self, "rarity", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			Backer:setRGB( CoD.BlackMarketUtility.LootRarityToColor( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Backer ) --[[ @ 0]]
	self.Backer = Backer --[[ @ 0]]
	
	local Desat = LUI.UIImage.new( 0, 0, 1, 417, 0, 0, 1, 188 ) --[[ @ 0]]
	Desat:setRGB( 0.27, 0.27, 0.27 ) --[[ @ 0]]
	Desat:setAlpha( 0.24 ) --[[ @ 0]]
	self:addElement( Desat ) --[[ @ 0]]
	self.Desat = Desat --[[ @ 0]]
	
	local ContractRarityBar = LUI.UIImage.new( 0, 0, -6, -1, 0.5, 0.5, -79, 79 ) --[[ @ 0]]
	ContractRarityBar:setAlpha( 0 ) --[[ @ 0]]
	ContractRarityBar:linkToElementModel( self, "rarity", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ContractRarityBar:setRGB( CoD.BlackMarketUtility.LootRarityToColor( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractRarityBar ) --[[ @ 0]]
	self.ContractRarityBar = ContractRarityBar --[[ @ 0]]
	
	local LED2 = LUI.UIImage.new( 0, 1, 3, -1, 0, 1, 3, -1 ) --[[ @ 0]]
	LED2:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED2:setImage( RegisterImage( @"uie_ui_menu_store_repeat_dot_pattern" ) ) --[[ @ 0]]
	LED2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	LED2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	LED2:setupNineSliceShader( 24, 24 ) --[[ @ 0]]
	self:addElement( LED2 ) --[[ @ 0]]
	self.LED2 = LED2 --[[ @ 0]]
	
	local ContractIcon = LUI.UIImage.new( 0, 0, 1, 417, 0, 0, 1, 187 ) --[[ @ 0]]
	ContractIcon:linkToElementModel( self, "icon", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ContractIcon:setImage( RegisterImage( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractIcon ) --[[ @ 0]]
	self.ContractIcon = ContractIcon --[[ @ 0]]
	
	local TileDots = LUI.UIImage.new( 0, 0, 1, 417, 0, 0, 125, 189 ) --[[ @ 0]]
	TileDots:setAlpha( 0 ) --[[ @ 0]]
	TileDots:setImage( RegisterImage( @"hash_3C8D2DBD72EBF38" ) ) --[[ @ 0]]
	TileDots:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TileDots:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TileDots:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	TileDots:linkToElementModel( self, "rarity", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			TileDots:setRGB( CoD.BlackMarketUtility.LootRarityToColor( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TileDots ) --[[ @ 0]]
	self.TileDots = TileDots --[[ @ 0]]
	
	local ContractRarityHeaderBackground = LUI.UIImage.new( 0, 0, 1, 401, 0, 0, 10.5, 31.5 ) --[[ @ 0]]
	ContractRarityHeaderBackground:setAlpha( 0.96 ) --[[ @ 0]]
	ContractRarityHeaderBackground:linkToElementModel( self, "rarity", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ContractRarityHeaderBackground:setRGB( CoD.BlackMarketUtility.LootRarityToColorDark( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeaderBackground ) --[[ @ 0]]
	self.ContractRarityHeaderBackground = ContractRarityHeaderBackground --[[ @ 0]]
	
	local PixelGridTiledBacking = LUI.UIImage.new( 0, 0, 1, 401, 0, 0, 12.5, 29.5 ) --[[ @ 0]]
	PixelGridTiledBacking:setAlpha( 0.05 ) --[[ @ 0]]
	PixelGridTiledBacking:setImage( RegisterImage( @"uie_ui_hud_notifications_pixelpattern" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	PixelGridTiledBacking:setupNineSliceShader( 128, 128 ) --[[ @ 0]]
	self:addElement( PixelGridTiledBacking ) --[[ @ 0]]
	self.PixelGridTiledBacking = PixelGridTiledBacking --[[ @ 0]]
	
	local SpecialistName = LUI.UIText.new( 0, 0, 15, 403, 0, 0, 107, 121 ) --[[ @ 0]]
	SpecialistName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	SpecialistName:setAlpha( 0.8 ) --[[ @ 0]]
	SpecialistName:setTTF( "default" ) --[[ @ 0]]
	SpecialistName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_3336C1AE82B1520A" ) ) --[[ @ 0]]
	SpecialistName:setLetterSpacing( 2 ) --[[ @ 0]]
	SpecialistName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	SpecialistName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	SpecialistName:linkToElementModel( self, "relatedItemName", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			SpecialistName:setText( LocalizeToUpperString( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SpecialistName ) --[[ @ 0]]
	self.SpecialistName = SpecialistName --[[ @ 0]]
	
	local ThemeName = LUI.UIText.new( 0, 0, 15, 403, 0, 0, 83, 97 ) --[[ @ 0]]
	ThemeName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	ThemeName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ThemeName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	ThemeName:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	ThemeName:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	ThemeName:setShaderVector( 2, 0, 0, 0, 0.6 ) --[[ @ 0]]
	ThemeName:setLetterSpacing( 2 ) --[[ @ 0]]
	ThemeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ThemeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	ThemeName:linkToElementModel( self, "mainExtraText", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			ThemeName:setText( ToUpper( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ThemeName ) --[[ @ 0]]
	self.ThemeName = ThemeName --[[ @ 0]]
	
	local OutfitName = LUI.UIText.new( 0, 0, 14, 400, 0, 0, 47, 73 ) --[[ @ 0]]
	OutfitName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	OutfitName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	OutfitName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	OutfitName:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	OutfitName:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	OutfitName:setShaderVector( 2, 0, 0, 0, 0.6 ) --[[ @ 0]]
	OutfitName:setLetterSpacing( 3 ) --[[ @ 0]]
	OutfitName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	OutfitName:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	OutfitName:linkToElementModel( self, "name", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			OutfitName:setText( LocalizeToUpperString( f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( OutfitName ) --[[ @ 0]]
	self.OutfitName = OutfitName --[[ @ 0]]
	
	local ActiveBanner = CoD.ContractActiveBanner.new( f1_arg0, f1_arg1, 0, 0, 22, 172, 0, 0, 132, 157 ) --[[ @ 0]]
	ActiveBanner:linkToElementModel( self, nil, false, function ( model )
		ActiveBanner:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ActiveBanner ) --[[ @ 0]]
	self.ActiveBanner = ActiveBanner --[[ @ 0]]
	
	local ProgressBarBacking = CoD.ContractProgressBar.new( f1_arg0, f1_arg1, 0, 0, 15, 359, 0, 0, 164.5, 182.5 ) --[[ @ 0]]
	ProgressBarBacking:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "complete" )
			end
		}
	} ) --[[ @ 0]]
	ProgressBarBacking:linkToElementModel( ProgressBarBacking, "complete", true, function ( model )
		f1_arg0:updateElementState( ProgressBarBacking, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ProgressBarBacking:linkToElementModel( self, nil, false, function ( model )
		ProgressBarBacking:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ProgressBarBacking ) --[[ @ 0]]
	self.ProgressBarBacking = ProgressBarBacking --[[ @ 0]]
	
	local ContractRarityHeaderTile = CoD.ContractRarityHeaderTile.new( f1_arg0, f1_arg1, 0, 0, 15, 215, 0, 0, 12.5, 29.5 ) --[[ @ 0]]
	ContractRarityHeaderTile.Contract:setText( LocalizeToUpperString( @"hash_0" ) ) --[[ @ 0]]
	ContractRarityHeaderTile:linkToElementModel( self, nil, false, function ( model )
		ContractRarityHeaderTile:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeaderTile ) --[[ @ 0]]
	self.ContractRarityHeaderTile = ContractRarityHeaderTile --[[ @ 0]]
	
	local CommonButtonOutline = CoD.CommonButtonOutline.new( f1_arg0, f1_arg1, 0, 1, 0, 0, -0, 1, 0, 0 ) --[[ @ 0]]
	CommonButtonOutline:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "Purchased" )
			end
		}
	} ) --[[ @ 0]]
	local PurchasedBanner = CommonButtonOutline --[[ @ 0]]
	local Darken = CommonButtonOutline.subscribeToModel --[[ @ 0]]
	local CompeletedBanner = Engine[@"getglobalmodel"]() --[[ @ 0]]
	Darken( PurchasedBanner, CompeletedBanner["lobbyRoot.lobbyNav"], function ( f16_arg0 )
		f1_arg0:updateElementState( CommonButtonOutline, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CommonButtonOutline.Lines:setAlpha( 0 ) --[[ @ 0]]
	CommonButtonOutline:linkToElementModel( self, nil, false, function ( model )
		CommonButtonOutline:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonButtonOutline ) --[[ @ 0]]
	self.CommonButtonOutline = CommonButtonOutline --[[ @ 0]]
	
	Darken = LUI.UIImage.new( 0, 0, 1, 417, 0, 0, 1, 187 ) --[[ @ 0]]
	Darken:setRGB( 0.09, 0.09, 0.09 ) --[[ @ 0]]
	Darken:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Darken ) --[[ @ 0]]
	self.Darken = Darken --[[ @ 0]]
	
	PurchasedBanner = CoD.ContractPurchasedBanner.new( f1_arg0, f1_arg1, 0, 0, 22, 172, 0, 0, 154, 179 ) --[[ @ 0]]
	PurchasedBanner:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( PurchasedBanner ) --[[ @ 0]]
	self.PurchasedBanner = PurchasedBanner --[[ @ 0]]
	
	CompeletedBanner = CoD.ContractCompleteBanner.new( f1_arg0, f1_arg1, 0, 0, 22, 172, 0, 0, 154, 179 ) --[[ @ 0]]
	CompeletedBanner:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	CompeletedBanner:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CompeletedBanner ) --[[ @ 0]]
	self.CompeletedBanner = CompeletedBanner --[[ @ 0]]
	
	local SeasonalOverlay = CoD.ContractSeasonalOverlay.new( f1_arg0, f1_arg1, 0, 0, 0, 418, 0, 0, 0, 189 ) --[[ @ 0]]
	SeasonalOverlay:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "seasonal" )
			end
		}
	} ) --[[ @ 0]]
	SeasonalOverlay:linkToElementModel( SeasonalOverlay, "seasonal", true, function ( model )
		f1_arg0:updateElementState( SeasonalOverlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "seasonal"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SeasonalOverlay:linkToElementModel( self, nil, false, function ( model )
		SeasonalOverlay:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SeasonalOverlay ) --[[ @ 0]]
	self.SeasonalOverlay = SeasonalOverlay --[[ @ 0]]
	
	local ContractCost = CoD.ContractItemCost.new( f1_arg0, f1_arg1, 0, 0, 24, 209, 0, 0, 158, 179 ) --[[ @ 0]]
	ContractCost:linkToElementModel( self, nil, false, function ( model )
		ContractCost:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractCost ) --[[ @ 0]]
	self.ContractCost = ContractCost --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Purchased",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" )
			end
		},
		{
			stateName = "Completed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "complete" )
			end
		},
		{
			stateName = "Owned",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "purchased", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "purchased"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "complete", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f28_arg2, f28_arg3, f28_arg4 )
		UpdateSelfElementState( f1_arg0, self.CommonButtonOutline, controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonButtonOutline.id = "CommonButtonOutline" --[[ @ 0]]
	self.__defaultFocus = CommonButtonOutline --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ContractItemInternal.__resetProperties = function ( f29_arg0 )
	f29_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
	f29_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.PurchasedBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.Darken:completeAnimation() --[[ @ 0]]
	f29_arg0.ContractCost:completeAnimation() --[[ @ 0]]
	f29_arg0.CompeletedBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.ProgressBarBacking:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ActiveBanner:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.PurchasedBanner:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.Darken:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ContractCost:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.CompeletedBanner:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ContractItemInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f30_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f30_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ActiveBanner ) --[[ @ 0]]
			f30_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f30_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ProgressBarBacking ) --[[ @ 0]]
		end
	},
	Purchased = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f31_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f31_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ActiveBanner ) --[[ @ 0]]
			f31_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ProgressBarBacking ) --[[ @ 0]]
			f31_arg0.Darken:completeAnimation() --[[ @ 0]]
			f31_arg0.Darken:setAlpha( 0.88 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.Darken ) --[[ @ 0]]
			f31_arg0.PurchasedBanner:completeAnimation() --[[ @ 0]]
			f31_arg0.PurchasedBanner:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.PurchasedBanner ) --[[ @ 0]]
			f31_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f31_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ContractCost ) --[[ @ 0]]
		end
	},
	Completed = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f32_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f32_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ActiveBanner ) --[[ @ 0]]
			f32_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f32_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ProgressBarBacking ) --[[ @ 0]]
			f32_arg0.CompeletedBanner:completeAnimation() --[[ @ 0]]
			f32_arg0.CompeletedBanner:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.CompeletedBanner ) --[[ @ 0]]
			f32_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f32_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ContractCost ) --[[ @ 0]]
		end
	},
	Owned = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f33_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f33_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.ContractCost ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ContractItemInternal.__onClose = function ( f34_arg0 )
	f34_arg0.Backer:close() --[[ @ 0]]
	f34_arg0.ContractRarityBar:close() --[[ @ 0]]
	f34_arg0.ContractIcon:close() --[[ @ 0]]
	f34_arg0.TileDots:close() --[[ @ 0]]
	f34_arg0.ContractRarityHeaderBackground:close() --[[ @ 0]]
	f34_arg0.SpecialistName:close() --[[ @ 0]]
	f34_arg0.ThemeName:close() --[[ @ 0]]
	f34_arg0.OutfitName:close() --[[ @ 0]]
	f34_arg0.ActiveBanner:close() --[[ @ 0]]
	f34_arg0.ProgressBarBacking:close() --[[ @ 0]]
	f34_arg0.ContractRarityHeaderTile:close() --[[ @ 0]]
	f34_arg0.CommonButtonOutline:close() --[[ @ 0]]
	f34_arg0.PurchasedBanner:close() --[[ @ 0]]
	f34_arg0.CompeletedBanner:close() --[[ @ 0]]
	f34_arg0.SeasonalOverlay:close() --[[ @ 0]]
	f34_arg0.ContractCost:close() --[[ @ 0]]
end
 --[[ @ 0]]
