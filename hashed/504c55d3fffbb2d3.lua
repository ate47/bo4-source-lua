-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:55609625e0a9984a" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointcenter" ) --[[ @ 0]]
require( "x64:576c14e1bc07cd98" ) --[[ @ 0]]

CoD.ScoreNotificationWaypoint = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ScoreNotificationWaypoint.__defaultWidth = 80 --[[ @ 0]]
CoD.ScoreNotificationWaypoint.__defaultHeight = 78 --[[ @ 0]]
CoD.ScoreNotificationWaypoint.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ScoreNotificationWaypoint ) --[[ @ 0]]
	self.id = "ScoreNotificationWaypoint" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local baseglow = LUI.UIImage.new( 0.5, 0.5, -32, 32, 0.5, 0.5, -32, 32 ) --[[ @ 0]]
	baseglow:setAlpha( 0 ) --[[ @ 0]]
	baseglow:setImage( RegisterImage( @"uie_t7_hud_waypoints_baseglow" ) ) --[[ @ 0]]
	baseglow.__Color = function ( f2_arg0 )
		local f2_local0 = f2_arg0:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			baseglow:setRGB( CoD.HUDUtility.GetFriendlyOrEnemyColorByObjId( f1_arg1, f2_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	baseglow:linkToElementModel( self, "objId", true, baseglow.__Color ) --[[ @ 0]]
	baseglow.__Color_FullPath = function ()
		local f3_local0 = self:getModel() --[[ @ 0]]
		if f3_local0 then
			f3_local0 = self:getModel() --[[ @ 0]]
			f3_local0 = f3_local0.objId --[[ @ 0]]
		end
		if f3_local0 then
			baseglow.__Color( f3_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	self:addElement( baseglow ) --[[ @ 0]]
	self.baseglow = baseglow --[[ @ 0]]
	
	local WaypointBacker = LUI.UIImage.new( 0.5, 0.5, -25, 27, 0.5, 0.5, -27, 25 ) --[[ @ 0]]
	WaypointBacker:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
	WaypointBacker:linkToElementModel( self, "waypointBacking01", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			WaypointBacker:setImage( RegisterImage( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointBacker ) --[[ @ 0]]
	self.WaypointBacker = WaypointBacker --[[ @ 0]]
	
	local WaypointPattern = LUI.UIImage.new( 0.5, 0.5, -37, 39, 0.5, 0.5, -38.5, 37.5 ) --[[ @ 0]]
	WaypointPattern:setAlpha( 0.7 ) --[[ @ 0]]
	WaypointPattern:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_led_small" ) ) --[[ @ 0]]
	WaypointPattern:linkToElementModel( self, "color", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			WaypointPattern:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointPattern ) --[[ @ 0]]
	self.WaypointPattern = WaypointPattern --[[ @ 0]]
	
	local ProgressMeterBacking = LUI.UIImage.new( 0.5, 0.5, -25, 27, 0.5, 0.5, -27, 25 ) --[[ @ 0]]
	ProgressMeterBacking:setRGB( 1, 0.98, 0.91 ) --[[ @ 0]]
	ProgressMeterBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	ProgressMeterBacking:setShaderVector( 0, 1.13, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBacking:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBacking:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBacking:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBacking:linkToElementModel( self, "waypointBacking02", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ProgressMeterBacking:setImage( RegisterImage( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressMeterBacking:linkToElementModel( self, "objId", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			ProgressMeterBacking:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f7_local0, 1 ), CoD.GetVectorComponentFromString( f7_local0, 2 ), CoD.GetVectorComponentFromString( f7_local0, 3 ), CoD.GetVectorComponentFromString( f7_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressMeterBacking ) --[[ @ 0]]
	self.ProgressMeterBacking = ProgressMeterBacking --[[ @ 0]]
	
	local ProgressMeterBackingFill = LUI.UIImage.new( 0.5, 0.5, -25, 27, 0.5, 0.5, -27, 25 ) --[[ @ 0]]
	ProgressMeterBackingFill:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_fill_02" ) ) --[[ @ 0]]
	ProgressMeterBackingFill:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	ProgressMeterBackingFill:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBackingFill:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBackingFill:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ProgressMeterBackingFill:linkToElementModel( self, "progress", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			ProgressMeterBackingFill:setShaderVector( 0, CoD.GetVectorComponentFromString( f8_local0, 1 ), CoD.GetVectorComponentFromString( f8_local0, 2 ), CoD.GetVectorComponentFromString( f8_local0, 3 ), CoD.GetVectorComponentFromString( f8_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressMeterBackingFill:linkToElementModel( self, "objId", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			ProgressMeterBackingFill:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f9_local0, 1 ), CoD.GetVectorComponentFromString( f9_local0, 2 ), CoD.GetVectorComponentFromString( f9_local0, 3 ), CoD.GetVectorComponentFromString( f9_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressMeterBackingFill ) --[[ @ 0]]
	self.ProgressMeterBackingFill = ProgressMeterBackingFill --[[ @ 0]]
	
	local progressMeter = CoD.WaypointProgressRing.new( f1_arg0, f1_arg1, 0.5, 0.5, -25, 27, 0.5, 0.5, -27, 25 ) --[[ @ 0]]
	progressMeter:linkToElementModel( self, nil, false, function ( model )
		progressMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	progressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			progressMeter.progressMeter:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f11_local0, 1 ), CoD.GetVectorComponentFromString( f11_local0, 2 ), CoD.GetVectorComponentFromString( f11_local0, 3 ), CoD.GetVectorComponentFromString( f11_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	progressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			progressMeter.progressMeterColoredByUsing:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f12_local0, 1 ), CoD.GetVectorComponentFromString( f12_local0, 2 ), CoD.GetVectorComponentFromString( f12_local0, 3 ), CoD.GetVectorComponentFromString( f12_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( progressMeter ) --[[ @ 0]]
	self.progressMeter = progressMeter --[[ @ 0]]
	
	local CaptureIcon = CoD.ScoreNotificationWaypoint_Capture.new( f1_arg0, f1_arg1, 0.5, 0.5, -18.5, 19.5, 0.5, 0.5, -19.5, 18.5 ) --[[ @ 0]]
	CaptureIcon:mergeStateConditions( {
		{
			stateName = "AttackTeam",
			condition = function ( menu, element, event )
				return IsAttackingTeam( f1_arg1 )
			end
		},
		{
			stateName = "DefendTeam",
			condition = function ( menu, element, event )
				return not IsAttackingTeam( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = CaptureIcon --[[ @ 0]]
	local WaypointCenter = CaptureIcon.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	WaypointCenter( f1_local8, f1_local10["hudItems.war.attackingTeam"], function ( f15_arg0 )
		f1_arg0:updateElementState( CaptureIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "hudItems.war.attackingTeam"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = CaptureIcon --[[ @ 0]]
	WaypointCenter = CaptureIcon.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	WaypointCenter( f1_local8, f1_local10.profileSettingsUpdated, function ( f16_arg0 )
		f1_arg0:updateElementState( CaptureIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CaptureIcon:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CaptureIcon ) --[[ @ 0]]
	self.CaptureIcon = CaptureIcon --[[ @ 0]]
	
	WaypointCenter = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -37, 39, 0.5, 0.5, -39, 37 ) --[[ @ 0]]
	WaypointCenter:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointCenter:setScale( 0.7, 0.7 ) --[[ @ 0]]
	WaypointCenter:linkToElementModel( self, nil, false, function ( model )
		WaypointCenter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenter ) --[[ @ 0]]
	self.WaypointCenter = WaypointCenter --[[ @ 0]]
	
	f1_local10 = baseglow --[[ @ 0]]
	f1_local8 = baseglow.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local10, f1_local11["factions.playerFactionTeamEnum"], baseglow.__Color_FullPath ) --[[ @ 0]]
	baseglow:linkToElementModel( self, "clientUseMask", true, baseglow.__Color_FullPath ) --[[ @ 0]]
	f1_local10 = baseglow --[[ @ 0]]
	f1_local8 = baseglow.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local10, f1_local11["profile.colorblindMode"], baseglow.__Color_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Captured",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsGameTypeEqualToString( "control" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "state", Enum[@"objectivestate_t"][@"objst_done"] )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "NoFrame",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowProgressOnIcon( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "objId", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "objId"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "objectiveModel", true, function ( model )
		local f23_local0 = self --[[ @ 0]]
		SetElementModelToSelfModelValue( self, self, f1_arg1, "objectiveModel" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ScoreNotificationWaypoint.__resetProperties = function ( f24_arg0 )
	f24_arg0.WaypointCenter:completeAnimation() --[[ @ 0]]
	f24_arg0.progressMeter:completeAnimation() --[[ @ 0]]
	f24_arg0.ProgressMeterBacking:completeAnimation() --[[ @ 0]]
	f24_arg0.CaptureIcon:completeAnimation() --[[ @ 0]]
	f24_arg0.baseglow:completeAnimation() --[[ @ 0]]
	f24_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
	f24_arg0.ProgressMeterBackingFill:completeAnimation() --[[ @ 0]]
	f24_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
	f24_arg0.WaypointCenter:setAlpha( 0.95 ) --[[ @ 0]]
	f24_arg0.WaypointCenter:setScale( 0.7, 0.7 ) --[[ @ 0]]
	f24_arg0.progressMeter:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.ProgressMeterBacking:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.CaptureIcon:setLeftRight( 0.5, 0.5, -18.5, 19.5 ) --[[ @ 0]]
	f24_arg0.CaptureIcon:setTopBottom( 0.5, 0.5, -19.5, 18.5 ) --[[ @ 0]]
	f24_arg0.CaptureIcon:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.baseglow:setAlpha( 0 ) --[[ @ 0]]
	f24_arg0.baseglow:setScale( 1, 1 ) --[[ @ 0]]
	f24_arg0.WaypointPattern:setAlpha( 0.7 ) --[[ @ 0]]
	f24_arg0.ProgressMeterBackingFill:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ScoreNotificationWaypoint.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f25_arg0.ProgressMeterBacking:completeAnimation() --[[ @ 0]]
			f25_arg0.ProgressMeterBacking:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.ProgressMeterBacking ) --[[ @ 0]]
			f25_arg0.progressMeter:completeAnimation() --[[ @ 0]]
			f25_arg0.progressMeter:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.progressMeter ) --[[ @ 0]]
			f25_arg0.CaptureIcon:completeAnimation() --[[ @ 0]]
			f25_arg0.CaptureIcon:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.CaptureIcon ) --[[ @ 0]]
			f25_arg0.WaypointCenter:completeAnimation() --[[ @ 0]]
			f25_arg0.WaypointCenter:setAlpha( 0.95 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.WaypointCenter ) --[[ @ 0]]
		end,
		Captured = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f26_local0 = function ( f27_arg0 )
				local f27_local0 = function ( f28_arg0 )
					local f28_local0 = function ( f29_arg0 )
						f29_arg0:beginAnimation( 560 ) --[[ @ 0]]
						f29_arg0:setAlpha( 0 ) --[[ @ 0]]
						f29_arg0:setScale( 1.7, 1.7 ) --[[ @ 0]]
						f29_arg0:registerEventHandler( "transition_complete_keyframe", f26_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f28_arg0:beginAnimation( 230 ) --[[ @ 0]]
					f28_arg0:setAlpha( 0.62 ) --[[ @ 0]]
					f28_arg0:setScale( 1.2, 1.2 ) --[[ @ 0]]
					f28_arg0:registerEventHandler( "transition_complete_keyframe", f28_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f26_arg0.baseglow:beginAnimation( 20 ) --[[ @ 0]]
				f26_arg0.baseglow:setAlpha( 1 ) --[[ @ 0]]
				f26_arg0.baseglow:registerEventHandler( "interrupted_keyframe", f26_arg0.clipInterrupted ) --[[ @ 0]]
				f26_arg0.baseglow:registerEventHandler( "transition_complete_keyframe", f27_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f26_arg0.baseglow:completeAnimation() --[[ @ 0]]
			f26_arg0.baseglow:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.baseglow:setScale( 1, 1 ) --[[ @ 0]]
			f26_local0( f26_arg0.baseglow ) --[[ @ 0]]
		end
	},
	Captured = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f30_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f30_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.WaypointPattern ) --[[ @ 0]]
			f30_arg0.ProgressMeterBacking:completeAnimation() --[[ @ 0]]
			f30_arg0.ProgressMeterBacking:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ProgressMeterBacking ) --[[ @ 0]]
			f30_arg0.progressMeter:completeAnimation() --[[ @ 0]]
			f30_arg0.progressMeter:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.progressMeter ) --[[ @ 0]]
			f30_arg0.CaptureIcon:completeAnimation() --[[ @ 0]]
			f30_arg0.CaptureIcon:setLeftRight( 0.5, 0.5, -17.5, 20.5 ) --[[ @ 0]]
			f30_arg0.CaptureIcon:setTopBottom( 0.5, 0.5, -20, 18 ) --[[ @ 0]]
			f30_arg0.CaptureIcon:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.CaptureIcon ) --[[ @ 0]]
			f30_arg0.WaypointCenter:completeAnimation() --[[ @ 0]]
			f30_arg0.WaypointCenter:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.WaypointCenter ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f31_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f31_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.WaypointBacker ) --[[ @ 0]]
			f31_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f31_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.WaypointPattern ) --[[ @ 0]]
			f31_arg0.ProgressMeterBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.ProgressMeterBacking:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ProgressMeterBacking ) --[[ @ 0]]
			f31_arg0.ProgressMeterBackingFill:completeAnimation() --[[ @ 0]]
			f31_arg0.ProgressMeterBackingFill:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ProgressMeterBackingFill ) --[[ @ 0]]
			f31_arg0.progressMeter:completeAnimation() --[[ @ 0]]
			f31_arg0.progressMeter:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.progressMeter ) --[[ @ 0]]
			f31_arg0.WaypointCenter:completeAnimation() --[[ @ 0]]
			f31_arg0.WaypointCenter:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.WaypointCenter ) --[[ @ 0]]
		end
	},
	NoFrame = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f32_arg0.ProgressMeterBacking:completeAnimation() --[[ @ 0]]
			f32_arg0.ProgressMeterBacking:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ProgressMeterBacking ) --[[ @ 0]]
			f32_arg0.ProgressMeterBackingFill:completeAnimation() --[[ @ 0]]
			f32_arg0.ProgressMeterBackingFill:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ProgressMeterBackingFill ) --[[ @ 0]]
			f32_arg0.progressMeter:completeAnimation() --[[ @ 0]]
			f32_arg0.progressMeter:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.progressMeter ) --[[ @ 0]]
			f32_arg0.CaptureIcon:completeAnimation() --[[ @ 0]]
			f32_arg0.CaptureIcon:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.CaptureIcon ) --[[ @ 0]]
			f32_arg0.WaypointCenter:completeAnimation() --[[ @ 0]]
			f32_arg0.WaypointCenter:setAlpha( 0.95 ) --[[ @ 0]]
			f32_arg0.WaypointCenter:setScale( 1.2, 1.2 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.WaypointCenter ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ScoreNotificationWaypoint.__onClose = function ( f33_arg0 )
	f33_arg0.baseglow:close() --[[ @ 0]]
	f33_arg0.WaypointBacker:close() --[[ @ 0]]
	f33_arg0.WaypointPattern:close() --[[ @ 0]]
	f33_arg0.ProgressMeterBacking:close() --[[ @ 0]]
	f33_arg0.ProgressMeterBackingFill:close() --[[ @ 0]]
	f33_arg0.progressMeter:close() --[[ @ 0]]
	f33_arg0.CaptureIcon:close() --[[ @ 0]]
	f33_arg0.WaypointCenter:close() --[[ @ 0]]
end
 --[[ @ 0]]
