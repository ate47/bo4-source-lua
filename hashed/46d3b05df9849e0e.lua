-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]
require( "x64:39d92dce1e4291ce" ) --[[ @ 0]]
require( "x64:733ec8b4b2fb3c47" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/core_ammowidget/ammowidget_equipmentempty" ) --[[ @ 0]]

CoD.AmmoWidgetZM_AbilityItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.__defaultWidth = 72 --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.__defaultHeight = 59 --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetZM_AbilityItem ) --[[ @ 0]]
	self.id = "AmmoWidgetZM_AbilityItem" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SecondaryWeaponBGBlur = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0, 0, -7, 73 ) --[[ @ 0]]
	SecondaryWeaponBGBlur:setImage( RegisterImage( @"hash_1FE9388BE79636F7" ) ) --[[ @ 0]]
	SecondaryWeaponBGBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SecondaryWeaponBGBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SecondaryWeaponBGBlur ) --[[ @ 0]]
	self.SecondaryWeaponBGBlur = SecondaryWeaponBGBlur --[[ @ 0]]
	
	local SecondaryWeaponBG = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0, 0, -7, 73 ) --[[ @ 0]]
	SecondaryWeaponBG:setImage( RegisterImage( @"hash_46E5BECCF89F9216" ) ) --[[ @ 0]]
	self:addElement( SecondaryWeaponBG ) --[[ @ 0]]
	self.SecondaryWeaponBG = SecondaryWeaponBG --[[ @ 0]]
	
	local SecondaryWeaponMeterBGBlur = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0, 0, -16, 12 ) --[[ @ 0]]
	SecondaryWeaponMeterBGBlur:setImage( RegisterImage( @"hash_20BCE5D90EBC1F88" ) ) --[[ @ 0]]
	SecondaryWeaponMeterBGBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SecondaryWeaponMeterBGBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SecondaryWeaponMeterBGBlur ) --[[ @ 0]]
	self.SecondaryWeaponMeterBGBlur = SecondaryWeaponMeterBGBlur --[[ @ 0]]
	
	local SecondaryWeaponMeterBG = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0, 0, -16, 12 ) --[[ @ 0]]
	SecondaryWeaponMeterBG:setImage( RegisterImage( @"hash_27A319569188B535" ) ) --[[ @ 0]]
	self:addElement( SecondaryWeaponMeterBG ) --[[ @ 0]]
	self.SecondaryWeaponMeterBG = SecondaryWeaponMeterBG --[[ @ 0]]
	
	local ClockMeter = LUI.UIImage.new( 0.5, 0.5, -47, 47, 0.5, 0.5, -45.5, 48.5 ) --[[ @ 0]]
	ClockMeter:setAlpha( 0 ) --[[ @ 0]]
	ClockMeter:setImage( RegisterImage( @"hash_FE05CC9C49C7C7E" ) ) --[[ @ 0]]
	ClockMeter:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	ClockMeter:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeter:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeter:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeter:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeter:linkToElementModel( self, "powerRatio", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ClockMeter:setShaderVector( 0, AddToVector( 0.38, 0, 0.5, 0, ScaleVectorComponents( 0.25, 1, 1, 1, SetVectorComponent( 2, 0.38, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClockMeter ) --[[ @ 0]]
	self.ClockMeter = ClockMeter --[[ @ 0]]
	
	local ClockMeterAdd = LUI.UIImage.new( 0.5, 0.5, -47, 47, 0.5, 0.5, -45.5, 48.5 ) --[[ @ 0]]
	ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
	ClockMeterAdd:setImage( RegisterImage( @"hash_FE05CC9C49C7C7E" ) ) --[[ @ 0]]
	ClockMeterAdd:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_add" ) ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:linkToElementModel( self, "powerRatio", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ClockMeterAdd:setShaderVector( 0, AddToVector( 0.38, 0, 0.5, 0, ScaleVectorComponents( 0.25, 1, 1, 1, SetVectorComponent( 2, 0.38, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClockMeterAdd ) --[[ @ 0]]
	self.ClockMeterAdd = ClockMeterAdd --[[ @ 0]]
	
	local FlareBack = LUI.UIImage.new( 0, 0, -45.5, 114.5, 0, 0, -40, 100 ) --[[ @ 0]]
	FlareBack:setAlpha( 0 ) --[[ @ 0]]
	FlareBack:setImage( RegisterImage( @"uie_abeq_flare_back" ) ) --[[ @ 0]]
	FlareBack:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FlareBack ) --[[ @ 0]]
	self.FlareBack = FlareBack --[[ @ 0]]
	
	local Glow = LUI.UIImage.new( 0, 0, 9, 61, 0, 0, 7, 59 ) --[[ @ 0]]
	Glow:setAlpha( 0 ) --[[ @ 0]]
	Glow:setImage( RegisterImage( @"hash_3613317835FD35EB" ) ) --[[ @ 0]]
	Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Glow ) --[[ @ 0]]
	self.Glow = Glow --[[ @ 0]]
	
	local AmmoWidgetAbilityContainer = CoD.AmmoWidget_AbilityContainer.new( f1_arg0, f1_arg1, 0, 0, -23, 69, 0, 0, -9, 35 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setScale( 1.4, 1.4 ) --[[ @ 0]]
	self:addElement( AmmoWidgetAbilityContainer ) --[[ @ 0]]
	self.AmmoWidgetAbilityContainer = AmmoWidgetAbilityContainer --[[ @ 0]]
	
	local FullBackingDeployed = LUI.UIImage.new( 0, 0, 8, 64, 0, 0, 2, 58 ) --[[ @ 0]]
	FullBackingDeployed:setRGB( 0.84, 0.83, 0.77 ) --[[ @ 0]]
	FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	FullBackingDeployed:setZRot( 180 ) --[[ @ 0]]
	FullBackingDeployed:setImage( RegisterImage( @"hash_6040221656249477" ) ) --[[ @ 0]]
	FullBackingDeployed:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FullBackingDeployed ) --[[ @ 0]]
	self.FullBackingDeployed = FullBackingDeployed --[[ @ 0]]
	
	local EquipmentBacking = LUI.UIImage.new( 0, 0, 5, 67, 0, 0, -1, 61 ) --[[ @ 0]]
	EquipmentBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	EquipmentBacking:setAlpha( 0.6 ) --[[ @ 0]]
	EquipmentBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_elliptical_ring_normal" ) ) --[[ @ 0]]
	EquipmentBacking:setShaderVector( 0, 50, 1, 0, 0 ) --[[ @ 0]]
	EquipmentBacking:setShaderVector( 1, 100, 100, 0, 0 ) --[[ @ 0]]
	EquipmentBacking:setShaderVector( 2, 0, 0.81, 0, 0 ) --[[ @ 0]]
	self:addElement( EquipmentBacking ) --[[ @ 0]]
	self.EquipmentBacking = EquipmentBacking --[[ @ 0]]
	
	local PowerBasedImageAvailable = LUI.UIImage.new( 0, 0, 9, 64, 0, 0, 3.5, 58.5 ) --[[ @ 0]]
	PowerBasedImageAvailable:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	PowerBasedImageAvailable:setScale( 0.86, 0.86 ) --[[ @ 0]]
	PowerBasedImageAvailable:linkToElementModel( self, "id", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			PowerBasedImageAvailable:setImage( GetWeaponGadgetIconAvailable( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageAvailable ) --[[ @ 0]]
	self.PowerBasedImageAvailable = PowerBasedImageAvailable --[[ @ 0]]
	
	local PowerBasedImageUnavailable = LUI.UIImage.new( 0, 0, 9, 64, 0, 0, 3.5, 58.5 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setScale( 0.86, 0.86 ) --[[ @ 0]]
	PowerBasedImageUnavailable:linkToElementModel( self, "id", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			PowerBasedImageUnavailable:setImage( GetWeaponGadgetIconUnavailable( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageUnavailable ) --[[ @ 0]]
	self.PowerBasedImageUnavailable = PowerBasedImageUnavailable --[[ @ 0]]
	
	local NotAvailable = CoD.AmmoWidget_EquipmentEmpty.new( f1_arg0, f1_arg1, 0.5, 0.5, -26, 26, 0.5, 0.5, -18.5, 23.5 ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, nil, false, function ( model )
		NotAvailable:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			NotAvailable.ImgIcon:setImage( GetWeaponGadgetIconAvailable( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			NotAvailable.ImgIconGrow:setImage( GetWeaponGadgetIconAvailable( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotAvailable ) --[[ @ 0]]
	self.NotAvailable = NotAvailable --[[ @ 0]]
	
	local HeroAbilityUseString = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -50, 50, 0, 0, -33, -9 ) --[[ @ 0]]
	HeroAbilityUseString:mergeStateConditions( {
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbilityWZ",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseZM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local HeroAbilityHoldStringPC = HeroAbilityUseString --[[ @ 0]]
	local HeroAbilityHoldString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	local f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, f1_local18["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f15_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldStringPC = HeroAbilityUseString --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, f1_local18["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f16_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:appendEventHandler( "input_source_changed", function ( f17_arg0, f17_arg1 )
		f17_arg1.menu = f17_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( HeroAbilityUseString, f17_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	HeroAbilityHoldStringPC = HeroAbilityUseString --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, f1_local18.LastInput, function ( f18_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:setScale( LanguageOverrideNumberForScale( "arabic", 0.65, 1, 1 ) ) --[[ @ 0]]
	HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2EC61C43D90FCF56" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_29E6A8D0F83F4FC6" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	self:addElement( HeroAbilityUseString ) --[[ @ 0]]
	self.HeroAbilityUseString = HeroAbilityUseString --[[ @ 0]]
	
	HeroAbilityHoldString = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, -100, 100, 0, 0, -78, -29 ) --[[ @ 0]]
	HeroAbilityHoldString:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityHoldString:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldString ) --[[ @ 0]]
	self.HeroAbilityHoldString = HeroAbilityHoldString --[[ @ 0]]
	
	HeroAbilityHoldStringPC = nil --[[ @ 0]]
	
	HeroAbilityHoldStringPC = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, -100, 100, 0, 0, -93, -44 ) --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha = function ()
		HeroAbilityHoldStringPC:setAlpha( CoD.HUDUtility.GetAbilityHoldToActivateAlpha( f1_arg1, self, 1 ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha() --[[ @ 0]]
	HeroAbilityHoldStringPC:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityHoldStringPC:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldStringPC ) --[[ @ 0]]
	self.HeroAbilityHoldStringPC = HeroAbilityHoldStringPC --[[ @ 0]]
	
	HeroAbilityHoldStringPC:linkToElementModel( self, "powerRatio", true, HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	local f1_local19 = HeroAbilityHoldStringPC --[[ @ 0]]
	f1_local18 = HeroAbilityHoldStringPC.subscribeToModel --[[ @ 0]]
	local f1_local20 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local19, f1_local20["GameplayFeedbackSettings.hideRadiationHold"], HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "id" )
			end
		},
		{
			stateName = "InUse",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_inuse"] )
			end
		},
		{
			stateName = "Deployed",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "PowerBasedEmptyCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 0 )
			end
		},
		{
			stateName = "PowerBasedCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and not IsWarzone()
			end
		},
		{
			stateName = "PowerBased",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_hidden"] )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local19 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local20 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local18( f1_local19, f1_local20["lobbyRoot.lobbyNav"], function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f32_arg2, f32_arg3, f32_arg4 )
		if CoD.HUDUtility.ShouldPulseNewAmmo( self ) and IsSelfInState( self, "PowerBased" ) then
			PlayClip( self, "Pulse", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		local f33_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "PowerBased" ) and CoD.HUDUtility.ShouldPulseNewAmmo( self ) then
			PlayClip( self, "Pulse", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local18 = self --[[ @ 0]]
	f1_local18 = HeroAbilityUseString --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.EnableShrinkToFit( f1_local18 ) --[[ @ 0]]
	end
	f1_local18 = HeroAbilityHoldString --[[ @ 0]]
	if IsPC() then
		HideWidget( self.HeroAbilityHoldString ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.__resetProperties = function ( f34_arg0 )
	f34_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
	f34_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
	f34_arg0.FlareBack:completeAnimation() --[[ @ 0]]
	f34_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
	f34_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
	f34_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
	f34_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
	f34_arg0.Glow:completeAnimation() --[[ @ 0]]
	f34_arg0.SecondaryWeaponBG:completeAnimation() --[[ @ 0]]
	f34_arg0.SecondaryWeaponMeterBG:completeAnimation() --[[ @ 0]]
	f34_arg0.SecondaryWeaponMeterBGBlur:completeAnimation() --[[ @ 0]]
	f34_arg0.SecondaryWeaponBGBlur:completeAnimation() --[[ @ 0]]
	f34_arg0.EquipmentBacking:completeAnimation() --[[ @ 0]]
	f34_arg0.ClockMeter:completeAnimation() --[[ @ 0]]
	f34_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
	f34_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f34_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.FlareBack:setScale( 1, 1 ) --[[ @ 0]]
	f34_arg0.PowerBasedImageUnavailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f34_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.FullBackingDeployed:setRGB( 0.84, 0.83, 0.77 ) --[[ @ 0]]
	f34_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	f34_arg0.SecondaryWeaponBG:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.SecondaryWeaponMeterBG:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.SecondaryWeaponMeterBGBlur:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.SecondaryWeaponBGBlur:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.EquipmentBacking:setAlpha( 0.6 ) --[[ @ 0]]
	f34_arg0.ClockMeter:setAlpha( 0 ) --[[ @ 0]]
	f34_arg0.ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f35_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f35_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.FlareBack ) --[[ @ 0]]
			f35_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f35_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.NotAvailable ) --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f35_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f35_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f36_arg0.SecondaryWeaponBGBlur:completeAnimation() --[[ @ 0]]
			f36_arg0.SecondaryWeaponBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.SecondaryWeaponBGBlur ) --[[ @ 0]]
			f36_arg0.SecondaryWeaponBG:completeAnimation() --[[ @ 0]]
			f36_arg0.SecondaryWeaponBG:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.SecondaryWeaponBG ) --[[ @ 0]]
			f36_arg0.SecondaryWeaponMeterBGBlur:completeAnimation() --[[ @ 0]]
			f36_arg0.SecondaryWeaponMeterBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.SecondaryWeaponMeterBGBlur ) --[[ @ 0]]
			f36_arg0.SecondaryWeaponMeterBG:completeAnimation() --[[ @ 0]]
			f36_arg0.SecondaryWeaponMeterBG:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.SecondaryWeaponMeterBG ) --[[ @ 0]]
			f36_arg0.Glow:completeAnimation() --[[ @ 0]]
			f36_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Glow ) --[[ @ 0]]
			f36_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
			f36_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.AmmoWidgetAbilityContainer ) --[[ @ 0]]
			f36_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f36_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.FullBackingDeployed ) --[[ @ 0]]
			f36_arg0.EquipmentBacking:completeAnimation() --[[ @ 0]]
			f36_arg0.EquipmentBacking:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.EquipmentBacking ) --[[ @ 0]]
			f36_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f36_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f36_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f36_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f36_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f36_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.NotAvailable ) --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	InUse = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f37_arg0.ClockMeter:completeAnimation() --[[ @ 0]]
			f37_arg0.ClockMeter:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.ClockMeter ) --[[ @ 0]]
			f37_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f37_arg0.ClockMeterAdd:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.ClockMeterAdd ) --[[ @ 0]]
			f37_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f37_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.NotAvailable ) --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f37_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Deployed = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f38_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f38_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.NotAvailable ) --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedEmptyCharging = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f39_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f39_arg0.FullBackingDeployed:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f39_arg0.FullBackingDeployed:setAlpha( 0.03 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.FullBackingDeployed ) --[[ @ 0]]
			f39_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f39_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f39_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f39_arg0.PowerBasedImageUnavailable:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f39_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f39_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.NotAvailable ) --[[ @ 0]]
			f39_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f39_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedCharging = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f40_arg0.ClockMeter:completeAnimation() --[[ @ 0]]
			f40_arg0.ClockMeter:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ClockMeter ) --[[ @ 0]]
			f40_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f40_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.FullBackingDeployed ) --[[ @ 0]]
			f40_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f40_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f40_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f40_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.NotAvailable ) --[[ @ 0]]
			f40_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f40_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBased = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f41_arg0.ClockMeter:completeAnimation() --[[ @ 0]]
			f41_arg0.ClockMeter:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.ClockMeter ) --[[ @ 0]]
			local f41_local0 = function ( f42_arg0 )
				local f42_local0 = function ( f43_arg0 )
					local f43_local0 = function ( f44_arg0 )
						f44_arg0:beginAnimation( 2320 ) --[[ @ 0]]
						f44_arg0:registerEventHandler( "transition_complete_keyframe", f41_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f43_arg0:beginAnimation( 340 ) --[[ @ 0]]
					f43_arg0:setAlpha( 0 ) --[[ @ 0]]
					f43_arg0:registerEventHandler( "transition_complete_keyframe", f43_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f41_arg0.ClockMeterAdd:beginAnimation( 340 ) --[[ @ 0]]
				f41_arg0.ClockMeterAdd:setAlpha( 1 ) --[[ @ 0]]
				f41_arg0.ClockMeterAdd:registerEventHandler( "interrupted_keyframe", f41_arg0.clipInterrupted ) --[[ @ 0]]
				f41_arg0.ClockMeterAdd:registerEventHandler( "transition_complete_keyframe", f42_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f41_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f41_arg0.ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
			f41_local0( f41_arg0.ClockMeterAdd ) --[[ @ 0]]
			f41_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f41_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.FlareBack:setScale( 0.5, 0.5 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.FlareBack ) --[[ @ 0]]
			f41_arg0.Glow:completeAnimation() --[[ @ 0]]
			f41_arg0.Glow:setAlpha( 0.1 ) --[[ @ 0]]
			f41_arg0.Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Glow ) --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:setRGB( 0.74, 0.69, 0.42 ) --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f41_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f41_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.NotAvailable ) --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f41_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end,
		Pulse = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f45_arg0.ClockMeter:completeAnimation() --[[ @ 0]]
			f45_arg0.ClockMeter:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.ClockMeter ) --[[ @ 0]]
			local f45_local0 = function ( f46_arg0 )
				local f46_local0 = function ( f47_arg0 )
					local f47_local0 = function ( f48_arg0 )
						f48_arg0:beginAnimation( 2320 ) --[[ @ 0]]
						f48_arg0:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f47_arg0:beginAnimation( 340 ) --[[ @ 0]]
					f47_arg0:setAlpha( 0 ) --[[ @ 0]]
					f47_arg0:registerEventHandler( "transition_complete_keyframe", f47_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f45_arg0.ClockMeterAdd:beginAnimation( 340 ) --[[ @ 0]]
				f45_arg0.ClockMeterAdd:setAlpha( 1 ) --[[ @ 0]]
				f45_arg0.ClockMeterAdd:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
				f45_arg0.ClockMeterAdd:registerEventHandler( "transition_complete_keyframe", f46_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f45_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f45_arg0.ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
			f45_local0( f45_arg0.ClockMeterAdd ) --[[ @ 0]]
			f45_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f45_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.NotAvailable ) --[[ @ 0]]
			f45_arg0.nextClip = "Pulse" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetZM_AbilityItem.__onClose = function ( f49_arg0 )
	f49_arg0.ClockMeter:close() --[[ @ 0]]
	f49_arg0.ClockMeterAdd:close() --[[ @ 0]]
	f49_arg0.AmmoWidgetAbilityContainer:close() --[[ @ 0]]
	f49_arg0.PowerBasedImageAvailable:close() --[[ @ 0]]
	f49_arg0.PowerBasedImageUnavailable:close() --[[ @ 0]]
	f49_arg0.NotAvailable:close() --[[ @ 0]]
	f49_arg0.HeroAbilityUseString:close() --[[ @ 0]]
	f49_arg0.HeroAbilityHoldString:close() --[[ @ 0]]
	f49_arg0.HeroAbilityHoldStringPC:close() --[[ @ 0]]
end
 --[[ @ 0]]
