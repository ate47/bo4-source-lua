-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:6e6df4068375d284" ) --[[ @ 0]]
require( "x64:2b64d9dfa5911bd2" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsbackground" ) --[[ @ 0]]
require( "x64:12190adaba331dcb" ) --[[ @ 0]]

CoD.ChooseSpecialistMidMatch = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ChooseSpecialistMidMatch = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ChooseSpecialistMidMatch", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.StartMenuUtility.SetupMidMatchClassSelect( f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.ChooseSpecialistMidMatch ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local StartMenuOptionsBackground = CoD.StartMenuOptionsBackground.new( f1_local1, f1_arg0, 0, 1, 0, 0, -0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( StartMenuOptionsBackground ) --[[ @ 0]]
	self.StartMenuOptionsBackground = StartMenuOptionsBackground --[[ @ 0]]
	
	local specialistRespawnDesc = LUI.UIText.new( 0.5, 0.5, -281.5, 281.5, 0, 0, 256, 289 ) --[[ @ 0]]
	specialistRespawnDesc:setZoom( 10 ) --[[ @ 0]]
	specialistRespawnDesc:setText( LocalizeToUpperString( @"hash_4AC6339F7CCE11C4" ) ) --[[ @ 0]]
	specialistRespawnDesc:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	specialistRespawnDesc:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	specialistRespawnDesc:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( specialistRespawnDesc ) --[[ @ 0]]
	self.specialistRespawnDesc = specialistRespawnDesc --[[ @ 0]]
	
	local Characters = LUI.UIList.new( f1_local1, f1_arg0, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	Characters:mergeStateConditions( {
		{
			stateName = "ViewSelectedPlayer_Searching",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	local SignatureEquipment = Characters --[[ @ 0]]
	local SignatureAbility = Characters.subscribeToModel --[[ @ 0]]
	local ChangeClassButton = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	SignatureAbility( SignatureEquipment, ChangeClassButton["PositionEditLoadout.SelectedCharacterIndex"], function ( f3_arg0 )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f3_arg0:get(),
			modelName = "PositionEditLoadout.SelectedCharacterIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "characterIndex", true, function ( model )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "characterIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "isBMLocked", true, function ( model )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "isBMLocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "disabled", true, function ( model )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "unavailable", true, function ( model )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SignatureEquipment = Characters --[[ @ 0]]
	SignatureAbility = Characters.subscribeToModel --[[ @ 0]]
	ChangeClassButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	SignatureAbility( SignatureEquipment, ChangeClassButton["hudItems.specialistSwitchIsLethal"], function ( f8_arg0 )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f8_arg0:get(),
			modelName = "hudItems.specialistSwitchIsLethal"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SignatureEquipment = Characters --[[ @ 0]]
	SignatureAbility = Characters.subscribeToModel --[[ @ 0]]
	ChangeClassButton = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	SignatureAbility( SignatureEquipment, ChangeClassButton["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]], function ( f9_arg0 )
		f1_local1:updateElementState( Characters, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Characters:setLeftRight( 0.5, 0.5, -594, 594 ) --[[ @ 0]]
	Characters:setTopBottom( 0, 0, 384, 696 ) --[[ @ 0]]
	Characters:setWidgetType( CoD.PositionDraft_Character ) --[[ @ 0]]
	Characters:setHorizontalCount( 7 ) --[[ @ 0]]
	Characters:setVerticalCount( 2 ) --[[ @ 0]]
	Characters:setBalanceGridRows( true ) --[[ @ 0]]
	Characters:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Characters:setDataSource( "PositionDraftCharacters" ) --[[ @ 0]]
	Characters:registerEventHandler( "lose_list_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.UpdateDataSource( self.Characters, false, false, false ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	Characters:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( Characters, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsInDefaultState( element ) then
			CoD.PlayerRoleUtility.InGameChangeSpecialist( element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_start_char_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsInDefaultState( element ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( Characters ) --[[ @ 0]]
	self.Characters = Characters --[[ @ 0]]
	
	SignatureAbility = CoD.StartMenu_SignatureItem.new( f1_local1, f1_arg0, 0.5, 0.5, -27.5, 512.5, 1, 1, -237, -122 ) --[[ @ 0]]
	SignatureAbility:setZoom( 10 ) --[[ @ 0]]
	SignatureAbility:setScale( 0.8, 0.8 ) --[[ @ 0]]
	self:addElement( SignatureAbility ) --[[ @ 0]]
	self.SignatureAbility = SignatureAbility --[[ @ 0]]
	
	SignatureEquipment = CoD.StartMenu_SignatureItem.new( f1_local1, f1_arg0, 0.5, 0.5, -489, 51, 1, 1, -237, -122 ) --[[ @ 0]]
	SignatureEquipment:setZoom( 10 ) --[[ @ 0]]
	SignatureEquipment:setScale( 0.8, 0.8 ) --[[ @ 0]]
	self:addElement( SignatureEquipment ) --[[ @ 0]]
	self.SignatureEquipment = SignatureEquipment --[[ @ 0]]
	
	ChangeClassButton = CoD.DirectorGenericButton.new( f1_local1, f1_arg0, 0.5, 0.5, -125, 125, 1, 1, -356, -264 ) --[[ @ 0]]
	ChangeClassButton:setScale( 0.8, 0.8 ) --[[ @ 0]]
	ChangeClassButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"hash_783E3BA6F8C2DB04" ) ) --[[ @ 0]]
	ChangeClassButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"hash_783E3BA6F8C2DB04" ) ) --[[ @ 0]]
	ChangeClassButton:registerEventHandler( "gain_focus", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f14_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f14_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f14_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( ChangeClassButton, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.StartMenuUtility.ShowClassSelectSlideout( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( ChangeClassButton ) --[[ @ 0]]
	self.ChangeClassButton = ChangeClassButton --[[ @ 0]]
	
	SignatureAbility:linkToElementModel( Characters, "equipment", false, function ( model )
		SignatureAbility:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SignatureEquipment:linkToElementModel( Characters, "ability", false, function ( model )
		SignatureEquipment:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "PositionDraft.stage", function ( model )
		local f19_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToEnum( model, CoD.PlayerRoleUtility.DraftStage.DRAFT_STAGE_NONE ) then
			GoBack( self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Characters.id = "Characters" --[[ @ 0]]
	ChangeClassButton.id = "ChangeClassButton" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = Characters --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local8 = self --[[ @ 0]]
	CoD.StartMenuUtility.AddClassSelectSlideout( f1_local1, f1_arg0 ) --[[ @ 0]]
	SetElementPropertyEnum( Characters, "tooltipArchetype", CoD.FreeCursorUtility.TooltipArchetypes.DEFAULT ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.ChooseSpecialistMidMatch.__onClose = function ( f20_arg0 )
	f20_arg0.SignatureAbility:close() --[[ @ 0]]
	f20_arg0.SignatureEquipment:close() --[[ @ 0]]
	f20_arg0.StartMenuOptionsBackground:close() --[[ @ 0]]
	f20_arg0.Characters:close() --[[ @ 0]]
	f20_arg0.ChangeClassButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
