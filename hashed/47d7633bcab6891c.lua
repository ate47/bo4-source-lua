-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/demo/lightmancolorelement" ) --[[ @ 0]]

local PostLoadFunc = function ( f1_arg0, f1_arg1 )
	f1_arg0.disableBlur = true --[[ @ 0]]
end
 --[[ @ 0]]
LUI.hudMenuType.LightmanColorPicker = "hud" --[[ @ 0]]
CoD.LightmanColorPicker = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.LightmanColorPicker = function ( f2_arg0, f2_arg1 )
	local self = CoD.Menu.NewForUIEditor( "LightmanColorPicker", f2_arg0 ) --[[ @ 0]]
	local f2_local1 = self --[[ @ 0]]
	self:setClass( CoD.LightmanColorPicker ) --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self:setOwner( f2_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f2_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( 0.5, 0.5, -299, 299, 1, 1, -463, -225 ) --[[ @ 0]]
	SceneBlur:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SceneBlur:setAlpha( 0.9 ) --[[ @ 0]]
	SceneBlur:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_backing" ) ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_381EEB1F96D4BE0A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local BGTint = LUI.UIImage.new( 0.5, 0.5, -299, 299, 1, 1, -463, -225 ) --[[ @ 0]]
	BGTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BGTint:setAlpha( 0.5 ) --[[ @ 0]]
	BGTint:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_backing" ) ) --[[ @ 0]]
	BGTint:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	BGTint:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BGTint ) --[[ @ 0]]
	self.BGTint = BGTint --[[ @ 0]]
	
	local PixelGridTiledBacking = LUI.UIImage.new( 0.5, 0.5, -295, 295, 1, 1, -459, -229 ) --[[ @ 0]]
	PixelGridTiledBacking:setAlpha( 0.1 ) --[[ @ 0]]
	PixelGridTiledBacking:setImage( RegisterImage( @"uie_ui_hud_notifications_pixelpattern" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	PixelGridTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	PixelGridTiledBacking:setupNineSliceShader( 128, 128 ) --[[ @ 0]]
	self:addElement( PixelGridTiledBacking ) --[[ @ 0]]
	self.PixelGridTiledBacking = PixelGridTiledBacking --[[ @ 0]]
	
	local InnerFrameTL = LUI.UIImage.new( 0.5, 0.5, -300, 0, 1, 1, -464, -344 ) --[[ @ 0]]
	InnerFrameTL:setRGB( 0, 0, 0 ) --[[ @ 0]]
	InnerFrameTL:setAlpha( 0.9 ) --[[ @ 0]]
	InnerFrameTL:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_inner" ) ) --[[ @ 0]]
	InnerFrameTL:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	InnerFrameTL:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( InnerFrameTL ) --[[ @ 0]]
	self.InnerFrameTL = InnerFrameTL --[[ @ 0]]
	
	local InnerFrameTR = LUI.UIImage.new( 0.5, 0.5, 0, 300, 1, 1, -464, -344 ) --[[ @ 0]]
	InnerFrameTR:setRGB( 0, 0, 0 ) --[[ @ 0]]
	InnerFrameTR:setAlpha( 0.9 ) --[[ @ 0]]
	InnerFrameTR:setYRot( 180 ) --[[ @ 0]]
	InnerFrameTR:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_inner" ) ) --[[ @ 0]]
	InnerFrameTR:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	InnerFrameTR:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( InnerFrameTR ) --[[ @ 0]]
	self.InnerFrameTR = InnerFrameTR --[[ @ 0]]
	
	local InnerFrameBR = LUI.UIImage.new( 0.5, 0.5, 0, 300, 1, 1, -345, -225 ) --[[ @ 0]]
	InnerFrameBR:setRGB( 0, 0, 0 ) --[[ @ 0]]
	InnerFrameBR:setAlpha( 0.9 ) --[[ @ 0]]
	InnerFrameBR:setXRot( 180 ) --[[ @ 0]]
	InnerFrameBR:setYRot( 180 ) --[[ @ 0]]
	InnerFrameBR:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_inner" ) ) --[[ @ 0]]
	InnerFrameBR:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	InnerFrameBR:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( InnerFrameBR ) --[[ @ 0]]
	self.InnerFrameBR = InnerFrameBR --[[ @ 0]]
	
	local InnerFrameBR2 = LUI.UIImage.new( 0.5, 0.5, -300, 0, 1, 1, -345, -225 ) --[[ @ 0]]
	InnerFrameBR2:setRGB( 0, 0, 0 ) --[[ @ 0]]
	InnerFrameBR2:setAlpha( 0.9 ) --[[ @ 0]]
	InnerFrameBR2:setXRot( 180 ) --[[ @ 0]]
	InnerFrameBR2:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_inner" ) ) --[[ @ 0]]
	InnerFrameBR2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	InnerFrameBR2:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( InnerFrameBR2 ) --[[ @ 0]]
	self.InnerFrameBR2 = InnerFrameBR2 --[[ @ 0]]
	
	local OutterFrameTL = LUI.UIImage.new( 0.5, 0.5, -300, 0, 1, 1, -464, -344 ) --[[ @ 0]]
	OutterFrameTL:setAlpha( 0.9 ) --[[ @ 0]]
	OutterFrameTL:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_outter" ) ) --[[ @ 0]]
	OutterFrameTL:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	OutterFrameTL:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( OutterFrameTL ) --[[ @ 0]]
	self.OutterFrameTL = OutterFrameTL --[[ @ 0]]
	
	local OutterFrameTL2 = LUI.UIImage.new( 0.5, 0.5, -300, 0, 1, 1, -345, -225 ) --[[ @ 0]]
	OutterFrameTL2:setAlpha( 0.9 ) --[[ @ 0]]
	OutterFrameTL2:setYRot( 180 ) --[[ @ 0]]
	OutterFrameTL2:setZRot( 180 ) --[[ @ 0]]
	OutterFrameTL2:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_outter" ) ) --[[ @ 0]]
	OutterFrameTL2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	OutterFrameTL2:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( OutterFrameTL2 ) --[[ @ 0]]
	self.OutterFrameTL2 = OutterFrameTL2 --[[ @ 0]]
	
	local OutterFrameTL3 = LUI.UIImage.new( 0.5, 0.5, 0, 300, 1, 1, -345, -225 ) --[[ @ 0]]
	OutterFrameTL3:setAlpha( 0.9 ) --[[ @ 0]]
	OutterFrameTL3:setZRot( 180 ) --[[ @ 0]]
	OutterFrameTL3:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_outter" ) ) --[[ @ 0]]
	OutterFrameTL3:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	OutterFrameTL3:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( OutterFrameTL3 ) --[[ @ 0]]
	self.OutterFrameTL3 = OutterFrameTL3 --[[ @ 0]]
	
	local OutterFrameTR = LUI.UIImage.new( 0.5, 0.5, 0, 300, 1, 1, -464, -344 ) --[[ @ 0]]
	OutterFrameTR:setAlpha( 0.9 ) --[[ @ 0]]
	OutterFrameTR:setYRot( 180 ) --[[ @ 0]]
	OutterFrameTR:setImage( RegisterImage( @"uie_ui_hud_theater_playbackcontrol_colorpicker_frame_outter" ) ) --[[ @ 0]]
	OutterFrameTR:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	OutterFrameTR:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( OutterFrameTR ) --[[ @ 0]]
	self.OutterFrameTR = OutterFrameTR --[[ @ 0]]
	
	local ColorPicker = LUI.UIList.new( f2_local1, f2_arg0, 6, 0, nil, false, false, false, false ) --[[ @ 0]]
	ColorPicker:setLeftRight( 0.5, 0.5, -296, 296 ) --[[ @ 0]]
	ColorPicker:setTopBottom( 1, 1, -458, -230 ) --[[ @ 0]]
	ColorPicker:setScale( 0.97, 0.95 ) --[[ @ 0]]
	ColorPicker:setWidgetType( CoD.LightmanColorElement ) --[[ @ 0]]
	ColorPicker:setHorizontalCount( 13 ) --[[ @ 0]]
	ColorPicker:setVerticalCount( 9 ) --[[ @ 0]]
	ColorPicker:setSpacing( 6 ) --[[ @ 0]]
	ColorPicker:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	ColorPicker:setDataSource( "EmblemColorList" ) --[[ @ 0]]
	ColorPicker:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.DemoUtility.SelectLightmanColor( self, element, f2_arg0, f2_local1 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	ColorPicker:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f2_local1, f2_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f2_local1, f2_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( ColorPicker, f2_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.DemoUtility.SelectLightmanColor( self, element, controller, menu ) --[[ @ 0]]
		GoBack( self, controller ) --[[ @ 0]]
		SetGlobalModelValueFalse( "demo.showLightmanColorPicker" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( ColorPicker, f2_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"], nil, function ( element, menu, controller, model )
		CoD.DemoUtility.SelectLightmanColor( self, element, controller, menu ) --[[ @ 0]]
		GoBack( self, controller ) --[[ @ 0]]
		SetGlobalModelValueFalse( "demo.showLightmanColorPicker" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( ColorPicker ) --[[ @ 0]]
	self.ColorPicker = ColorPicker --[[ @ 0]]
	
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f9_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f9_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f9_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		CoD.DemoUtility.StoreCurrentLightmanColor( self, self, f2_arg0, f2_local1 ) --[[ @ 0]]
		if not f9_local0 then
			f9_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( self, f2_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		CoD.DemoUtility.CancelLightmanColorSelection( self, element, controller, menu ) --[[ @ 0]]
		GoBack( self, controller ) --[[ @ 0]]
		SetGlobalModelValueFalse( "demo.showLightmanColorPicker" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	ColorPicker.id = "ColorPicker" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f2_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = ColorPicker --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f2_arg0 ) or self.ignoreCursor) then
		self:restoreState( f2_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f2_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LightmanColorPicker.__onClose = function ( f12_arg0 )
	f12_arg0.ColorPicker:close() --[[ @ 0]]
end
 --[[ @ 0]]
