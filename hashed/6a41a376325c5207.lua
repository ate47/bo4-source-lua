-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/hud/zm_revive/zm_reviveclampedarrow" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/zm_revive/zm_revivewidget" ) --[[ @ 0]]

CoD.ZM_Revive = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZM_Revive.__defaultWidth = 1 --[[ @ 0]]
CoD.ZM_Revive.__defaultHeight = 1 --[[ @ 0]]
CoD.ZM_Revive.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZM_Revive ) --[[ @ 0]]
	self.id = "ZM_Revive" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local playerName = LUI.UIText.new( 0, 0, 134, 402, 0, 0, -66, 9 ) --[[ @ 0]]
	playerName:setRGB( 1, 0.75, 0.44 ) --[[ @ 0]]
	playerName:setTTF( "notosans_regular" ) --[[ @ 0]]
	playerName:setLetterSpacing( 1 ) --[[ @ 0]]
	playerName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	playerName:linkToElementModel( self, "playerName", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			playerName:setText( CoD.SocialUtility.CleanGamerTag( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( playerName ) --[[ @ 0]]
	self.playerName = playerName --[[ @ 0]]
	
	local prompt = LUI.UIText.new( 0, 0, 133, 267, 0, 0, 4, 64 ) --[[ @ 0]]
	prompt:setTTF( "dinnext_regular" ) --[[ @ 0]]
	prompt:setLetterSpacing( 1 ) --[[ @ 0]]
	prompt:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	prompt:linkToElementModel( self, "prompt", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( prompt ) --[[ @ 0]]
	self.prompt = prompt --[[ @ 0]]
	
	local ZMReviveWidget = CoD.ZM_ReviveWidget.new( f1_arg0, f1_arg1, 0, 0, -164, 166, 0, 0, -165, 165 ) --[[ @ 0]]
	ZMReviveWidget:linkToElementModel( self, nil, false, function ( model )
		ZMReviveWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ZMReviveWidget ) --[[ @ 0]]
	self.ZMReviveWidget = ZMReviveWidget --[[ @ 0]]
	
	local ZMReviveClampedArrow = CoD.ZM_ReviveClampedArrow.new( f1_arg0, f1_arg1, 0.5, 0.5, -178, 212, 0.5, 0.5, -48, 48 ) --[[ @ 0]]
	ZMReviveClampedArrow:linkToElementModel( self, "arrowAngle", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			ZMReviveClampedArrow:setZRot( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ZMReviveClampedArrow ) --[[ @ 0]]
	self.ZMReviveClampedArrow = ZMReviveClampedArrow --[[ @ 0]]
	
	local revivingText = LUI.UIText.new( 0, 0, -300, 300, 0, 0, 180, 260 ) --[[ @ 0]]
	revivingText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"zombie/reviving" ) ) --[[ @ 0]]
	revivingText:setTTF( "notosans_bold" ) --[[ @ 0]]
	revivingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	revivingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( revivingText ) --[[ @ 0]]
	self.revivingText = revivingText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hide",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "hide", 1 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f7_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
				if f7_local0 then
					f7_local0 = CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) --[[ @ 0]]
					if f7_local0 then
						f7_local0 = not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) --[[ @ 0]]
					end
				end
				return f7_local0
			end
		},
		{
			stateName = "Clamped",
			condition = function ( menu, element, event )
				local f8_local0 = IsBleedOutVisible( element, f1_arg1 ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = CoD.ModelUtility.IsSelfModelValueEnumBitSet( element, f1_arg1, "stateFlags", Enum[@"bleedoutstateflags"][@"bleedout_state_flag_clamped"] ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = not CoD.HUDUtility.IsGameTypeEqualToString( "zstandard" ) --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "Visible_Reviving",
			condition = function ( menu, element, event )
				local f9_local0 = IsBleedOutVisible( element, f1_arg1 ) --[[ @ 0]]
				if f9_local0 then
					f9_local0 = CoD.ModelUtility.IsSelfModelValueEnumBitSet( element, f1_arg1, "stateFlags", Enum[@"bleedoutstateflags"][@"bleedout_state_flag_being_revived"] ) --[[ @ 0]]
					if f9_local0 then
						f9_local0 = not CoD.HUDUtility.IsGameTypeEqualToString( "zstandard" ) --[[ @ 0]]
					end
				end
				return f9_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return IsBleedOutVisible( element, f1_arg1 ) and not CoD.HUDUtility.IsGameTypeEqualToString( "zstandard" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "hide", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hide"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["ZMHudGlobal.trials.hudDeactivated"], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "ZMHudGlobal.trials.hudDeactivated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["ZMHudGlobal.trials.infoHidden"], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "bleedingOut", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bleedingOut"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "beingRevived", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "beingRevived"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "stateFlags", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stateFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZM_Revive.__resetProperties = function ( f18_arg0 )
	f18_arg0.playerName:completeAnimation() --[[ @ 0]]
	f18_arg0.prompt:completeAnimation() --[[ @ 0]]
	f18_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
	f18_arg0.revivingText:completeAnimation() --[[ @ 0]]
	f18_arg0.ZMReviveWidget:completeAnimation() --[[ @ 0]]
	f18_arg0.playerName:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.prompt:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.ZMReviveClampedArrow:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.revivingText:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.ZMReviveWidget:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZM_Revive.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f19_arg0.playerName:completeAnimation() --[[ @ 0]]
			f19_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.playerName ) --[[ @ 0]]
			f19_arg0.prompt:completeAnimation() --[[ @ 0]]
			f19_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.prompt ) --[[ @ 0]]
			f19_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
			f19_arg0.ZMReviveClampedArrow:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.ZMReviveClampedArrow ) --[[ @ 0]]
			f19_arg0.revivingText:completeAnimation() --[[ @ 0]]
			f19_arg0.revivingText:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.revivingText ) --[[ @ 0]]
		end
	},
	Hide = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f20_arg0.playerName:completeAnimation() --[[ @ 0]]
			f20_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.playerName ) --[[ @ 0]]
			f20_arg0.prompt:completeAnimation() --[[ @ 0]]
			f20_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.prompt ) --[[ @ 0]]
			f20_arg0.ZMReviveWidget:completeAnimation() --[[ @ 0]]
			f20_arg0.ZMReviveWidget:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ZMReviveWidget ) --[[ @ 0]]
			f20_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
			f20_arg0.ZMReviveClampedArrow:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ZMReviveClampedArrow ) --[[ @ 0]]
			f20_arg0.revivingText:completeAnimation() --[[ @ 0]]
			f20_arg0.revivingText:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.revivingText ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f21_arg0.playerName:completeAnimation() --[[ @ 0]]
			f21_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.playerName ) --[[ @ 0]]
			f21_arg0.prompt:completeAnimation() --[[ @ 0]]
			f21_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.prompt ) --[[ @ 0]]
			f21_arg0.ZMReviveWidget:completeAnimation() --[[ @ 0]]
			f21_arg0.ZMReviveWidget:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ZMReviveWidget ) --[[ @ 0]]
			f21_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
			f21_arg0.ZMReviveClampedArrow:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ZMReviveClampedArrow ) --[[ @ 0]]
			f21_arg0.revivingText:completeAnimation() --[[ @ 0]]
			f21_arg0.revivingText:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.revivingText ) --[[ @ 0]]
		end
	},
	Clamped = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f22_arg0.playerName:completeAnimation() --[[ @ 0]]
			f22_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.playerName ) --[[ @ 0]]
			f22_arg0.prompt:completeAnimation() --[[ @ 0]]
			f22_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.prompt ) --[[ @ 0]]
			f22_arg0.revivingText:completeAnimation() --[[ @ 0]]
			f22_arg0.revivingText:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.revivingText ) --[[ @ 0]]
		end
	},
	Visible_Reviving = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f23_arg0.playerName:completeAnimation() --[[ @ 0]]
			f23_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.playerName ) --[[ @ 0]]
			f23_arg0.prompt:completeAnimation() --[[ @ 0]]
			f23_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.prompt ) --[[ @ 0]]
			f23_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
			f23_arg0.ZMReviveClampedArrow:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.ZMReviveClampedArrow ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f24_arg0.ZMReviveClampedArrow:completeAnimation() --[[ @ 0]]
			f24_arg0.ZMReviveClampedArrow:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.ZMReviveClampedArrow ) --[[ @ 0]]
			f24_arg0.revivingText:completeAnimation() --[[ @ 0]]
			f24_arg0.revivingText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.revivingText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZM_Revive.__onClose = function ( f25_arg0 )
	f25_arg0.playerName:close() --[[ @ 0]]
	f25_arg0.prompt:close() --[[ @ 0]]
	f25_arg0.ZMReviveWidget:close() --[[ @ 0]]
	f25_arg0.ZMReviveClampedArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
