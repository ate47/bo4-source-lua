-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:3e7c4814f0e345b8" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/filesharespinner" ) --[[ @ 0]]

CoD.FileshareCategoryContentListMini = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.FileshareCategoryContentListMini.__defaultWidth = 678 --[[ @ 0]]
CoD.FileshareCategoryContentListMini.__defaultHeight = 430 --[[ @ 0]]
CoD.FileshareCategoryContentListMini.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.FileshareCategoryContentListMini ) --[[ @ 0]]
	self.id = "FileshareCategoryContentListMini" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local MiddleText = LUI.UIText.new( 0, 1, 3, -3, 0.5, 0.5, -212.5, -187.5 ) --[[ @ 0]]
	MiddleText:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	MiddleText:setText( LocalizeToUpperString( @"hash_A43B10D9DA121A" ) ) --[[ @ 0]]
	MiddleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MiddleText:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	MiddleText:setLetterSpacing( 3 ) --[[ @ 0]]
	MiddleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MiddleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_middle"] ) --[[ @ 0]]
	self:addElement( MiddleText ) --[[ @ 0]]
	self.MiddleText = MiddleText --[[ @ 0]]
	
	local FileshareSpinner = CoD.FileshareSpinner.new( f1_arg0, f1_arg1, 0.5, 0.5, -48, 48, 0.55, 0.55, -48, 48 ) --[[ @ 0]]
	self:addElement( FileshareSpinner ) --[[ @ 0]]
	self.FileshareSpinner = FileshareSpinner --[[ @ 0]]
	
	local EmptyText = LUI.UIText.new( 0.01, 0.49, 0, 0, 0.5, 0.5, -90, -70 ) --[[ @ 0]]
	EmptyText:setRGB( 0.36, 0.35, 0.35 ) --[[ @ 0]]
	EmptyText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/not_available" ) ) --[[ @ 0]]
	EmptyText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	EmptyText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	EmptyText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( EmptyText ) --[[ @ 0]]
	self.EmptyText = EmptyText --[[ @ 0]]
	
	local FrameBorder1 = LUI.UIImage.new( 0.91, 0.91, -611, -282, 0.29, 0.29, -81, 105 ) --[[ @ 0]]
	FrameBorder1:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	FrameBorder1:setAlpha( 0.15 ) --[[ @ 0]]
	FrameBorder1:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrameBorder1:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrameBorder1:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrameBorder1:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrameBorder1 ) --[[ @ 0]]
	self.FrameBorder1 = FrameBorder1 --[[ @ 0]]
	
	local FrameBorder2 = LUI.UIImage.new( 0.91, 0.91, -264, 65, 0.29, 0.29, -81, 105 ) --[[ @ 0]]
	FrameBorder2:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	FrameBorder2:setAlpha( 0.15 ) --[[ @ 0]]
	FrameBorder2:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrameBorder2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrameBorder2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrameBorder2:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrameBorder2 ) --[[ @ 0]]
	self.FrameBorder2 = FrameBorder2 --[[ @ 0]]
	
	local FrameBorder3 = LUI.UIImage.new( 0.91, 0.91, -611, -282, 0.29, 0.29, 125, 311 ) --[[ @ 0]]
	FrameBorder3:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	FrameBorder3:setAlpha( 0.15 ) --[[ @ 0]]
	FrameBorder3:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrameBorder3:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrameBorder3:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrameBorder3:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrameBorder3 ) --[[ @ 0]]
	self.FrameBorder3 = FrameBorder3 --[[ @ 0]]
	
	local FrameBorder4 = LUI.UIImage.new( 0.91, 0.91, -264, 65, 0.29, 0.29, 125, 311 ) --[[ @ 0]]
	FrameBorder4:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	FrameBorder4:setAlpha( 0.15 ) --[[ @ 0]]
	FrameBorder4:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrameBorder4:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrameBorder4:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrameBorder4:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrameBorder4 ) --[[ @ 0]]
	self.FrameBorder4 = FrameBorder4 --[[ @ 0]]
	
	local contentList = LUI.UIList.new( f1_arg0, f1_arg1, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	contentList:setLeftRight( 0, 0, 4, 678 ) --[[ @ 0]]
	contentList:setTopBottom( 0, 0, 42, 434 ) --[[ @ 0]]
	contentList:setWidgetType( CoD.FileshareSelectorItemWide ) --[[ @ 0]]
	contentList:setHorizontalCount( 2 ) --[[ @ 0]]
	contentList:setVerticalCount( 2 ) --[[ @ 0]]
	contentList:setSpacing( 20 ) --[[ @ 0]]
	contentList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	contentList:setDataSource( "FilesharePublishedList" ) --[[ @ 0]]
	contentList:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if FileshareIsCommunityMode( element, f1_arg1 ) then
			
		else
			
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	contentList:registerEventHandler( "gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f3_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f3_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		if not ListElementHasElements( self.contentList ) then
			SetLoseFocusToElement( self, "contentList", f1_arg1 ) --[[ @ 0]]
		else
			CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
			CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	contentList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		FileshareSetSelectedItem( self, element, f1_arg1, "" ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	contentList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		return nil
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( contentList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( contentList, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], nil, function ( element, menu, controller, model )
		if FileshareCanShowOptionsMenu( controller ) then
			PreserveThumbnails( controller, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if FileshareCanShowOptionsMenu( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"menu/options", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	contentList:subscribeToGlobalModel( f1_arg1, "FileshareRoot", "dirty", function ( model )
		UpdateDataSource( self, contentList, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	contentList:subscribeToGlobalModel( f1_arg1, "FileshareRoot", "ready", function ( model )
		local f11_local0 = contentList --[[ @ 0]]
		if FileshareIsReady( f1_arg1 ) then
			UpdateDataSource( self, f11_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( contentList ) --[[ @ 0]]
	self.contentList = contentList --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Busy",
			condition = function ( menu, element, event )
				return not FileshareIsReady( f1_arg1 )
			end
		},
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				local f13_local0 = FileshareIsReady( f1_arg1 ) --[[ @ 0]]
				if f13_local0 then
					if not CoD.ModelUtility.IsGlobalModelValueTrue( "fileshareRoot.dirty" ) then
						f13_local0 = not ListElementHasElements( self.contentList ) --[[ @ 0]]
					else
						f13_local0 = false --[[ @ 0]]
					end
				end
				return f13_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local9 = self --[[ @ 0]]
	local f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["fileshareRoot.ready"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "fileshareRoot.ready"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["fileshareRoot.dirty"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "fileshareRoot.dirty"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FileshareRoot", "itemsCount", function ( model )
		local f17_local0 = self --[[ @ 0]]
		ShowWidget( self.contentList ) --[[ @ 0]]
		EnableNavigation( self, "contentList" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	contentList.id = "contentList" --[[ @ 0]]
	self.__defaultFocus = contentList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.FileshareCategoryContentListMini.__resetProperties = function ( f18_arg0 )
	f18_arg0.contentList:completeAnimation() --[[ @ 0]]
	f18_arg0.FileshareSpinner:completeAnimation() --[[ @ 0]]
	f18_arg0.EmptyText:completeAnimation() --[[ @ 0]]
	f18_arg0.contentList:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.FileshareSpinner:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.EmptyText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.FileshareCategoryContentListMini.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f19_arg0.FileshareSpinner:completeAnimation() --[[ @ 0]]
			f19_arg0.FileshareSpinner:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.FileshareSpinner ) --[[ @ 0]]
			f19_arg0.EmptyText:completeAnimation() --[[ @ 0]]
			f19_arg0.EmptyText:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.EmptyText ) --[[ @ 0]]
			f19_arg0.contentList:completeAnimation() --[[ @ 0]]
			f19_arg0.contentList:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.contentList ) --[[ @ 0]]
		end
	},
	Busy = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f20_arg0.FileshareSpinner:completeAnimation() --[[ @ 0]]
			f20_arg0.FileshareSpinner:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.FileshareSpinner ) --[[ @ 0]]
			f20_arg0.EmptyText:completeAnimation() --[[ @ 0]]
			f20_arg0.EmptyText:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.EmptyText ) --[[ @ 0]]
			f20_arg0.contentList:completeAnimation() --[[ @ 0]]
			f20_arg0.contentList:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.contentList ) --[[ @ 0]]
		end
	},
	Empty = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f21_arg0.FileshareSpinner:completeAnimation() --[[ @ 0]]
			f21_arg0.FileshareSpinner:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.FileshareSpinner ) --[[ @ 0]]
			f21_arg0.EmptyText:completeAnimation() --[[ @ 0]]
			f21_arg0.EmptyText:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.EmptyText ) --[[ @ 0]]
			f21_arg0.contentList:completeAnimation() --[[ @ 0]]
			f21_arg0.contentList:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.contentList ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.FileshareCategoryContentListMini.__onClose = function ( f22_arg0 )
	f22_arg0.FileshareSpinner:close() --[[ @ 0]]
	f22_arg0.contentList:close() --[[ @ 0]]
end
 --[[ @ 0]]
