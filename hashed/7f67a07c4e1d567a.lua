-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
CoD.self_revive_visuals = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.self_revive_visuals = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "self_revive_visuals", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.self_revive_visuals ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local self_revive_progress_bar_fill = LUI.UIImage.new( 0.5, 0.5, -348, 348, 0.5, 0.5, 52.5, 86.5 ) --[[ @ 0]]
	self_revive_progress_bar_fill:setRGB( 0.45, 1, 0 ) --[[ @ 0]]
	self_revive_progress_bar_fill:setImage( RegisterImage( @"uie_progress_bar_background" ) ) --[[ @ 0]]
	self_revive_progress_bar_fill:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	self_revive_progress_bar_fill:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	self_revive_progress_bar_fill:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	self_revive_progress_bar_fill:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	self_revive_progress_bar_fill:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self_revive_progress_bar_fill:linkToElementModel( self, "revive_progress", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			self_revive_progress_bar_fill:setShaderVector( 0, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( self_revive_progress_bar_fill ) --[[ @ 0]]
	self.self_revive_progress_bar_fill = self_revive_progress_bar_fill --[[ @ 0]]
	
	local self_revive_progress_text = LUI.UIText.new( 0.5, 0.5, -218.5, 218.5, 0.5, 0.5, 15.5, 52.5 ) --[[ @ 0]]
	self_revive_progress_text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3923A71AA4A500E1" ) ) --[[ @ 0]]
	self_revive_progress_text:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	self_revive_progress_text:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self_revive_progress_text:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	self:addElement( self_revive_progress_text ) --[[ @ 0]]
	self.self_revive_progress_text = self_revive_progress_text --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f3_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg0, Enum[@"UIVisibilityBit"][@"hash_29BF57CE75A8755E"] ) --[[ @ 0]]
				if not f3_local0 then
					f3_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg0, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) --[[ @ 0]]
					if not f3_local0 then
						f3_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg0, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local4 = self --[[ @ 0]]
	local f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_29BF57CE75A8755E"]], function ( f4_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f4_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_29BF57CE75A8755E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f5_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f5_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]], function ( f6_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.self_revive_visuals.__resetProperties = function ( f7_arg0 )
	f7_arg0.self_revive_progress_text:completeAnimation() --[[ @ 0]]
	f7_arg0.self_revive_progress_bar_fill:completeAnimation() --[[ @ 0]]
	f7_arg0.self_revive_progress_text:setAlpha( 1 ) --[[ @ 0]]
	f7_arg0.self_revive_progress_bar_fill:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.self_revive_visuals.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f9_arg0.self_revive_progress_bar_fill:completeAnimation() --[[ @ 0]]
			f9_arg0.self_revive_progress_bar_fill:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.self_revive_progress_bar_fill ) --[[ @ 0]]
			f9_arg0.self_revive_progress_text:completeAnimation() --[[ @ 0]]
			f9_arg0.self_revive_progress_text:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.self_revive_progress_text ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.self_revive_visuals.__onClose = function ( f10_arg0 )
	f10_arg0.self_revive_progress_bar_fill:close() --[[ @ 0]]
end
 --[[ @ 0]]
