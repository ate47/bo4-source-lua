-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:be52530c0ca57a1" ) --[[ @ 0]]
require( "x64:5ebfe24f09f3e978" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "x64:3653436f735bfecb" ) --[[ @ 0]]
require( "x64:7b069d6d764abdd2" ) --[[ @ 0]]
require( "x64:66cb3870b4c898db" ) --[[ @ 0]]
require( "x64:7696ab33f7a68b16" ) --[[ @ 0]]
require( "x64:a796fe42e082379" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebutton" ) --[[ @ 0]]
require( "x64:46ee653ade3452f5" ) --[[ @ 0]]

CoD.Laboratory = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.Laboratory = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "Laboratory", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, true ) --[[ @ 0]]
	CoD.ZMLaboratoryUtility.SetupLaboratoryMenu( f1_arg0, f1_local1 ) --[[ @ 0]]
	PlayMenuMusic( f1_arg0, "None" ) --[[ @ 0]]
	CoD.LobbyUtility.SetMenuControllerRestriction( self, f1_arg0, 1 ) --[[ @ 0]]
	SetPerControllerTableProperty( f1_arg0, "inLaboratory", true ) --[[ @ 0]]
	self:setClass( CoD.Laboratory ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local ScorestreakAspectRatioFix = nil --[[ @ 0]]
	
	ScorestreakAspectRatioFix = CoD.Scorestreak_AspectRatioFix.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ScorestreakAspectRatioFix:mergeStateConditions( {
		{
			stateName = "Warzone",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( ScorestreakAspectRatioFix ) --[[ @ 0]]
	self.ScorestreakAspectRatioFix = ScorestreakAspectRatioFix --[[ @ 0]]
	
	local SpecialOffers = CoD.LaboratorySpecialOffers.new( f1_local1, f1_arg0, 0.5, 0.5, -833, -353, 0.5, 0.5, -94, 256 ) --[[ @ 0]]
	self:addElement( SpecialOffers ) --[[ @ 0]]
	self.SpecialOffers = SpecialOffers --[[ @ 0]]
	
	local LaboratoryRegularOffers = CoD.LaboratoryRegularOffers.new( f1_local1, f1_arg0, 0.5, 0.5, -833, -353, 0.5, 0.5, -368.5, -18.5 ) --[[ @ 0]]
	self:addElement( LaboratoryRegularOffers ) --[[ @ 0]]
	self.LaboratoryRegularOffers = LaboratoryRegularOffers --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local LaboratoryBottleLabelList = CoD.LaboratoryBottleLabelList.new( f1_local1, f1_arg0, 0.5, 0.5, -741, 601, 0, 0, 907.5, 967.5 ) --[[ @ 0]]
	LaboratoryBottleLabelList:setScale( 0.88, 0.88 ) --[[ @ 0]]
	self:addElement( LaboratoryBottleLabelList ) --[[ @ 0]]
	self.LaboratoryBottleLabelList = LaboratoryBottleLabelList --[[ @ 0]]
	
	local LaboratorySafeAreaContainer = CoD.Laboratory_SafeAreaContainer.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	LaboratorySafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( LaboratorySafeAreaContainer ) --[[ @ 0]]
	self.LaboratorySafeAreaContainer = LaboratorySafeAreaContainer --[[ @ 0]]
	
	local TransactionDeepLinkButton = nil --[[ @ 0]]
	
	TransactionDeepLinkButton = CoD.DirectorPreGameButton.new( f1_local1, f1_arg0, 0.88, 0.88, -200, 30, 0, 0, 845.5, 915.5 ) --[[ @ 0]]
	TransactionDeepLinkButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.PCKoreaUtility.ShowTransactionHistoryButton()
			end
		}
	} ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleText:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleTextFocus:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		if CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkLab( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkLab( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( TransactionDeepLinkButton ) --[[ @ 0]]
	self.TransactionDeepLinkButton = TransactionDeepLinkButton --[[ @ 0]]
	
	local MixAgain = CoD.Laboratory_SafeAreaContainer_Mixagain.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	MixAgain:registerEventHandler( "menu_loaded", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f11_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f11_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f11_local0 then
			f11_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	self:addElement( MixAgain ) --[[ @ 0]]
	self.MixAgain = MixAgain --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "AnimStateMixAgain",
			condition = function ( menu, element, event )
				return CoD.ZMLaboratoryUtility.IsInAnimState1( f1_arg0, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN )
			end
		},
		{
			stateName = "AnimStateMixAgainToNotPlaying",
			condition = function ( menu, element, event )
				return CoD.ZMLaboratoryUtility.IsInAnimState1( f1_arg0, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN_TO_NOT_PLAYING )
			end
		},
		{
			stateName = "AnimStatePlaying",
			condition = function ( menu, element, event )
				return not CoD.ZMLaboratoryUtility.IsInAnimState1( f1_arg0, CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING )
			end
		}
	} ) --[[ @ 0]]
	local f1_local10 = self --[[ @ 0]]
	local f1_local11 = self.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["Laboratory.animState"], function ( f15_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f15_arg0:get(),
			modelName = "Laboratory.animState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["Laboratory.animState"], function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["Laboratory.disableInput"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12["Laboratory.skipReady"], function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f19_arg0, f19_arg1 )
		f19_arg1.menu = f19_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local11( f1_local10, f1_local12.LastInput, function ( f20_arg0, f20_arg1 )
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f21_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f21_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f21_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		UpdateAllMenuButtonPrompts( f1_local1, f1_arg0 ) --[[ @ 0]]
		if not f21_local0 then
			f21_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f21_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], "ESCAPE", function ( element, menu, controller, model )
		if CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			DelayGoBack( menu, controller, 200 ) --[[ @ 0]]
			SetControllerModelValue( controller, "Laboratory.disableInput", 1 ) --[[ @ 0]]
			return true
		elseif CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN ) then
			SendClientScriptNotify( controller, "mix_again", "0" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			SendClientScriptNotify( controller, "skip_to_reveal", "" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"menu/back", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"menu/back", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"zmui/skip", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			DelayGoBack( menu, controller, 200 ) --[[ @ 0]]
			SetControllerModelValue( controller, "Laboratory.disableInput", 1 ) --[[ @ 0]]
			return true
		elseif CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN ) then
			SendClientScriptNotify( controller, "mix_again", "0" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		if CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			return true
		elseif CoD.ZMLaboratoryUtility.IsInAnimState1( controller, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN ) then
			return true
		else
			return false
		end
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsPC() and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			SendClientScriptNotify( controller, "skip_to_reveal", "" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"zmui/skip", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			OpenPopup( self, "PurchaseCodPoints", controller, nil ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_263D5409DEC36DFA", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_contextual_2", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			OpenPopup( self, "PurchasePlasma", controller, nil ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			SendClientScriptNotify( controller, "skip_to_reveal", "" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_29616DF01C4B70B", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"zmui/skip", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() and not IsGamepad( controller ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			SendClientScriptNotify( controller, "skip_to_reveal", "" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and not IsGamepad( controller ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.PLAYING ) and CoD.ModelUtility.IsModelValueTrue( controller, "Laboratory.skipReady" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"zmui/skip", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
		CoD.ZMLaboratoryUtility.CleanUpLaboratoryMenu( f1_arg0 ) --[[ @ 0]]
		ResetFrontendMusic( f1_arg0 ) --[[ @ 0]]
		CoD.LobbyUtility.SetMenuControllerRestriction( self, f1_arg0, 0 ) --[[ @ 0]]
		SendClientScriptNotify( f1_arg0, "invalidate_controller_model", "" ) --[[ @ 0]]
		SetPerControllerTableProperty( f1_arg0, "inLaboratory", false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f35_arg2, f35_arg3, f35_arg4 )
		if IsPC() and IsSelfInState( self, "DefaultState" ) then
			CoD.PCUtility.UnlockUIShortcutInput( f1_local1, controller ) --[[ @ 0]]
		elseif IsPC() and not IsSelfInState( self, "DefaultState" ) then
			CoD.PCUtility.LockUIShortcutInput( f1_local1, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "laboratory.animState", function ( model )
		local f36_local0 = self --[[ @ 0]]
		if CoD.ZMLaboratoryUtility.IsInAnimState3( f1_arg0, CoD.ZMLaboratoryUtility.LabAnimState.PLAYING, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN_TO_PLAYING, CoD.ZMLaboratoryUtility.LabAnimState.MIX_AGAIN_TO_NOT_PLAYING ) then
			MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "Laboratory.unhideFreeCursor", function ( model )
		local f37_local0 = self --[[ @ 0]]
		if IsMenuInState( f1_local1, "AnimStateMixAgain" ) then
			MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.FreeCursorUtility.GiveFocusToElementsDefaultFocus( f1_local1, self.MixAgain, f1_arg0 ) --[[ @ 0]]
		else
			MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.ZMLaboratoryUtility.RestoreFocusToCachedOfferButton( f1_arg0, f1_local1 ) --[[ @ 0]]
			SetMenuProperty( f1_local1, "lastSelectedOfferButton", nil ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "Laboratory.timedOut", function ( model )
		local f38_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueEqualTo( f1_arg0, "Laboratory.timedOut", 1 ) then
			OpenSystemOverlay( self, f1_local1, f1_arg0, "LaboratoryTimedOutPopup", {} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	SpecialOffers.id = "SpecialOffers" --[[ @ 0]]
	LaboratoryRegularOffers.id = "LaboratoryRegularOffers" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	LaboratoryBottleLabelList.id = "LaboratoryBottleLabelList" --[[ @ 0]]
	LaboratorySafeAreaContainer.id = "LaboratorySafeAreaContainer" --[[ @ 0]]
	if CoD.isPC then
		TransactionDeepLinkButton.id = "TransactionDeepLinkButton" --[[ @ 0]]
	end
	MixAgain.id = "MixAgain" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = LaboratoryRegularOffers --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local11 = self --[[ @ 0]]
	CoD.FTUEUtility.ShowFTUESequenceIfNotSeen( self, f1_arg0, "ZMLaboratoryIntroduction" ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.Laboratory.__resetProperties = function ( f39_arg0 )
	f39_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
	f39_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
	f39_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
	f39_arg0.SpecialOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
	f39_arg0.SpecialOffers:setAlpha( 1 ) --[[ @ 0]]
	f39_arg0.LaboratoryRegularOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
	f39_arg0.LaboratoryRegularOffers:setTopBottom( 0.5, 0.5, -368.5, -18.5 ) --[[ @ 0]]
	f39_arg0.LaboratoryRegularOffers:setAlpha( 1 ) --[[ @ 0]]
	f39_arg0.TransactionDeepLinkButton:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Laboratory.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		AnimStatePlaying = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f41_local0 = function ( f42_arg0 )
				f41_arg0.SpecialOffers:beginAnimation( 350 ) --[[ @ 0]]
				f41_arg0.SpecialOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
				f41_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
				f41_arg0.SpecialOffers:registerEventHandler( "interrupted_keyframe", f41_arg0.clipInterrupted ) --[[ @ 0]]
				f41_arg0.SpecialOffers:registerEventHandler( "transition_complete_keyframe", f41_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f41_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f41_arg0.SpecialOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
			f41_arg0.SpecialOffers:setAlpha( 1 ) --[[ @ 0]]
			f41_local0( f41_arg0.SpecialOffers ) --[[ @ 0]]
			local f41_local1 = function ( f43_arg0 )
				f41_arg0.LaboratoryRegularOffers:beginAnimation( 350 ) --[[ @ 0]]
				f41_arg0.LaboratoryRegularOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
				f41_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
				f41_arg0.LaboratoryRegularOffers:registerEventHandler( "interrupted_keyframe", f41_arg0.clipInterrupted ) --[[ @ 0]]
				f41_arg0.LaboratoryRegularOffers:registerEventHandler( "transition_complete_keyframe", f41_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f41_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f41_arg0.LaboratoryRegularOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
			f41_arg0.LaboratoryRegularOffers:setAlpha( 1 ) --[[ @ 0]]
			f41_local1( f41_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
		end
	},
	AnimStateMixAgain = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f44_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f44_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.SpecialOffers ) --[[ @ 0]]
			f44_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f44_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f44_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f44_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end,
		AnimStatePlaying = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f45_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f45_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.SpecialOffers ) --[[ @ 0]]
			f45_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f45_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f45_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f45_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end,
		AnimStateMixAgainToNotPlaying = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f46_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f46_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.SpecialOffers ) --[[ @ 0]]
			f46_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f46_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f46_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f46_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end
	},
	AnimStateMixAgainToNotPlaying = {
		DefaultClip = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f47_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f47_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.SpecialOffers ) --[[ @ 0]]
			f47_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f47_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f47_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f47_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end,
		DefaultState = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f48_local0 = function ( f49_arg0 )
				f48_arg0.SpecialOffers:beginAnimation( 350 ) --[[ @ 0]]
				f48_arg0.SpecialOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
				f48_arg0.SpecialOffers:setAlpha( 1 ) --[[ @ 0]]
				f48_arg0.SpecialOffers:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.SpecialOffers:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f48_arg0.SpecialOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
			f48_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f48_local0( f48_arg0.SpecialOffers ) --[[ @ 0]]
			local f48_local1 = function ( f50_arg0 )
				f48_arg0.LaboratoryRegularOffers:beginAnimation( 350 ) --[[ @ 0]]
				f48_arg0.LaboratoryRegularOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
				f48_arg0.LaboratoryRegularOffers:setAlpha( 1 ) --[[ @ 0]]
				f48_arg0.LaboratoryRegularOffers:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.LaboratoryRegularOffers:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f48_arg0.LaboratoryRegularOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
			f48_arg0.LaboratoryRegularOffers:setTopBottom( 0, 0, 176.5, 526.5 ) --[[ @ 0]]
			f48_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f48_local1( f48_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f48_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f48_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end
	},
	AnimStatePlaying = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f51_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f51_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.SpecialOffers ) --[[ @ 0]]
			f51_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f51_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f51_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f51_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end,
		DefaultState = function ( f52_arg0, f52_arg1 )
			f52_arg0:__resetProperties() --[[ @ 0]]
			f52_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f52_local0 = function ( f53_arg0 )
				f52_arg0.SpecialOffers:beginAnimation( 350 ) --[[ @ 0]]
				f52_arg0.SpecialOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
				f52_arg0.SpecialOffers:setAlpha( 1 ) --[[ @ 0]]
				f52_arg0.SpecialOffers:registerEventHandler( "interrupted_keyframe", f52_arg0.clipInterrupted ) --[[ @ 0]]
				f52_arg0.SpecialOffers:registerEventHandler( "transition_complete_keyframe", f52_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f52_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f52_arg0.SpecialOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
			f52_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f52_local0( f52_arg0.SpecialOffers ) --[[ @ 0]]
			local f52_local1 = function ( f54_arg0 )
				f52_arg0.LaboratoryRegularOffers:beginAnimation( 350 ) --[[ @ 0]]
				f52_arg0.LaboratoryRegularOffers:setLeftRight( 0.5, 0.5, -833, -353 ) --[[ @ 0]]
				f52_arg0.LaboratoryRegularOffers:setAlpha( 1 ) --[[ @ 0]]
				f52_arg0.LaboratoryRegularOffers:registerEventHandler( "interrupted_keyframe", f52_arg0.clipInterrupted ) --[[ @ 0]]
				f52_arg0.LaboratoryRegularOffers:registerEventHandler( "transition_complete_keyframe", f52_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f52_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f52_arg0.LaboratoryRegularOffers:setLeftRight( 0, 0, -546.5, -66.5 ) --[[ @ 0]]
			f52_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f52_local1( f52_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f52_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f52_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end,
		AnimStateMixAgain = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f55_arg0.SpecialOffers:completeAnimation() --[[ @ 0]]
			f55_arg0.SpecialOffers:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.SpecialOffers ) --[[ @ 0]]
			f55_arg0.LaboratoryRegularOffers:completeAnimation() --[[ @ 0]]
			f55_arg0.LaboratoryRegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.LaboratoryRegularOffers ) --[[ @ 0]]
			f55_arg0.TransactionDeepLinkButton:completeAnimation() --[[ @ 0]]
			f55_arg0.TransactionDeepLinkButton:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.TransactionDeepLinkButton ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Laboratory.__onClose = function ( f56_arg0 )
	f56_arg0.ScorestreakAspectRatioFix:close() --[[ @ 0]]
	f56_arg0.SpecialOffers:close() --[[ @ 0]]
	f56_arg0.LaboratoryRegularOffers:close() --[[ @ 0]]
	f56_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f56_arg0.LaboratoryBottleLabelList:close() --[[ @ 0]]
	f56_arg0.LaboratorySafeAreaContainer:close() --[[ @ 0]]
	f56_arg0.TransactionDeepLinkButton:close() --[[ @ 0]]
	f56_arg0.MixAgain:close() --[[ @ 0]]
end
 --[[ @ 0]]
