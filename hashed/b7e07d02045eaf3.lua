-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
CoD.ZMPerkVaporPhDSliderEffect = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.__defaultWidth = 50 --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.__defaultHeight = 50 --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMPerkVaporPhDSliderEffect ) --[[ @ 0]]
	self.id = "ZMPerkVaporPhDSliderEffect" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PhDSliderEffect = LUI.UIImage.new( 0, 0, 0, 50, 0, 0, 0, 50 ) --[[ @ 0]]
	PhDSliderEffect:setAlpha( 0 ) --[[ @ 0]]
	PhDSliderEffect:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	PhDSliderEffect:setShaderVector( 0, 3, 0, 0, 0 ) --[[ @ 0]]
	PhDSliderEffect:linkToElementModel( self, "itemIndex", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			PhDSliderEffect:setImage( RegisterImage( GetItemImageFromIndex( Enum[@"hash_6EB546760F890D2"][@"hash_49AF82A21BAD026D"], f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PhDSliderEffect ) --[[ @ 0]]
	self.PhDSliderEffect = PhDSliderEffect --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Ready",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "specialEffectActive", 1 ) and CoD.ZMPerkUtility.IsPerkSpecificItem( element, f1_arg1, @"perk_slider" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "specialEffectActive", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "specialEffectActive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.__resetProperties = function ( f6_arg0 )
	f6_arg0.PhDSliderEffect:completeAnimation() --[[ @ 0]]
	f6_arg0.PhDSliderEffect:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Ready = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f8_local0 = function ( f9_arg0 )
				local f9_local0 = function ( f10_arg0 )
					f10_arg0:beginAnimation( 310 ) --[[ @ 0]]
					f10_arg0:setAlpha( 0 ) --[[ @ 0]]
					f10_arg0:registerEventHandler( "transition_complete_keyframe", f8_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f8_arg0.PhDSliderEffect:beginAnimation( 300 ) --[[ @ 0]]
				f8_arg0.PhDSliderEffect:setAlpha( 1 ) --[[ @ 0]]
				f8_arg0.PhDSliderEffect:registerEventHandler( "interrupted_keyframe", f8_arg0.clipInterrupted ) --[[ @ 0]]
				f8_arg0.PhDSliderEffect:registerEventHandler( "transition_complete_keyframe", f9_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f8_arg0.PhDSliderEffect:completeAnimation() --[[ @ 0]]
			f8_arg0.PhDSliderEffect:setAlpha( 0 ) --[[ @ 0]]
			f8_local0( f8_arg0.PhDSliderEffect ) --[[ @ 0]]
			f8_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZMPerkVaporPhDSliderEffect.__onClose = function ( f11_arg0 )
	f11_arg0.PhDSliderEffect:close() --[[ @ 0]]
end
 --[[ @ 0]]
