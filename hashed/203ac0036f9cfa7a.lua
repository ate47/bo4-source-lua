-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
CoD.zm_tut_hint_text = InheritFrom( CoD.Menu ) --[[ @ 0]]
CoD.zm_tut_hint_text.__stateMap = {
	"DefaultState",
	"Visible"
} --[[ @ 0]]
LUI.createMenu.zm_tut_hint_text = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "zm_tut_hint_text", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.zm_tut_hint_text ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local txtHintText = LUI.UIText.new( 0, 1, 96, -96, 0.5, 0.5, -58.5, -25.5 ) --[[ @ 0]]
	txtHintText:setTTF( "skorzhen" ) --[[ @ 0]]
	txtHintText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	txtHintText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	txtHintText:setBackingType( 2 ) --[[ @ 0]]
	txtHintText:setBackingColor( ColorSet.BadgeText.r, ColorSet.BadgeText.g, ColorSet.BadgeText.b ) --[[ @ 0]]
	txtHintText:setBackingAlpha( 0.4 ) --[[ @ 0]]
	txtHintText:setBackingXPadding( 8 ) --[[ @ 0]]
	txtHintText:setBackingYPadding( 4 ) --[[ @ 0]]
	txtHintText.__String_Reference = function ( f2_arg0 )
		local f2_local0 = f2_arg0:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			txtHintText:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.ZombieUtility.SetTutorialHintStringControllerDependant( self, f1_arg0, f2_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	txtHintText:linkToElementModel( self, "text", true, txtHintText.__String_Reference ) --[[ @ 0]]
	txtHintText.__String_Reference_FullPath = function ()
		local f3_local0 = self:getModel() --[[ @ 0]]
		if f3_local0 then
			f3_local0 = self:getModel() --[[ @ 0]]
			f3_local0 = f3_local0.text --[[ @ 0]]
		end
		if f3_local0 then
			txtHintText.__String_Reference( f3_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	self:addElement( txtHintText ) --[[ @ 0]]
	self.txtHintText = txtHintText --[[ @ 0]]
	
	txtHintText:appendEventHandler( "input_source_changed", txtHintText.__String_Reference_FullPath ) --[[ @ 0]]
	local f1_local3 = txtHintText --[[ @ 0]]
	local f1_local4 = txtHintText.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5.LastInput, txtHintText.__String_Reference_FullPath ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.zm_tut_hint_text.__resetProperties = function ( f4_arg0 )
	f4_arg0.txtHintText:completeAnimation() --[[ @ 0]]
	f4_arg0.txtHintText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.zm_tut_hint_text.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f5_arg0, f5_arg1 )
			f5_arg0:__resetProperties() --[[ @ 0]]
			f5_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f5_arg0.txtHintText:completeAnimation() --[[ @ 0]]
			f5_arg0.txtHintText:setAlpha( 0 ) --[[ @ 0]]
			f5_arg0.clipFinished( f5_arg0.txtHintText ) --[[ @ 0]]
		end,
		Visible = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f6_local0 = function ( f7_arg0 )
				f6_arg0.txtHintText:beginAnimation( 250 ) --[[ @ 0]]
				f6_arg0.txtHintText:setAlpha( 1 ) --[[ @ 0]]
				f6_arg0.txtHintText:registerEventHandler( "interrupted_keyframe", f6_arg0.clipInterrupted ) --[[ @ 0]]
				f6_arg0.txtHintText:registerEventHandler( "transition_complete_keyframe", f6_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f6_arg0.txtHintText:completeAnimation() --[[ @ 0]]
			f6_arg0.txtHintText:setAlpha( 0 ) --[[ @ 0]]
			f6_local0( f6_arg0.txtHintText ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		DefaultState = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f9_local0 = function ( f10_arg0 )
				f9_arg0.txtHintText:beginAnimation( 250 ) --[[ @ 0]]
				f9_arg0.txtHintText:setAlpha( 0 ) --[[ @ 0]]
				f9_arg0.txtHintText:registerEventHandler( "interrupted_keyframe", f9_arg0.clipInterrupted ) --[[ @ 0]]
				f9_arg0.txtHintText:registerEventHandler( "transition_complete_keyframe", f9_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f9_arg0.txtHintText:completeAnimation() --[[ @ 0]]
			f9_arg0.txtHintText:setAlpha( 1 ) --[[ @ 0]]
			f9_local0( f9_arg0.txtHintText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.zm_tut_hint_text.__onClose = function ( f11_arg0 )
	f11_arg0.txtHintText:close() --[[ @ 0]]
end
 --[[ @ 0]]
