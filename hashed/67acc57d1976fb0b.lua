-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/cac/cac_buttonboxlrginactivestroke" ) --[[ @ 0]]
require( "x64:214cf3f0705aae36" ) --[[ @ 0]]
require( "x64:5c23f7217f33f15c" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopchooseside" ) --[[ @ 0]]

CoD.EmblemEditorMaterialInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorMaterialInfo.__defaultWidth = 540 --[[ @ 0]]
CoD.EmblemEditorMaterialInfo.__defaultHeight = 68 --[[ @ 0]]
CoD.EmblemEditorMaterialInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorMaterialInfo ) --[[ @ 0]]
	self.id = "EmblemEditorMaterialInfo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0.5, 0.5, -270, 270, 0.5, 0.5, -34, 34 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local cacButtonBoxLrgInactiveStroke0 = CoD.cac_ButtonBoxLrgInactiveStroke.new( f1_arg0, f1_arg1, 0, 1, -3, 3, 0, 1, 42, 2 ) --[[ @ 0]]
	cacButtonBoxLrgInactiveStroke0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( cacButtonBoxLrgInactiveStroke0 ) --[[ @ 0]]
	self.cacButtonBoxLrgInactiveStroke0 = cacButtonBoxLrgInactiveStroke0 --[[ @ 0]]
	
	local layerUsedValue = CoD.GroupFractionLabel.new( f1_arg0, f1_arg1, 0, 0, 5, 239, 0, 0, 33, 68 ) --[[ @ 0]]
	layerUsedValue:mergeStateConditions( {
		{
			stateName = "GroupsFull",
			condition = function ( menu, element, event )
				return not IsEmptyLayerAvailable( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local choosePaintSide = layerUsedValue --[[ @ 0]]
	local TextBox4 = layerUsedValue.subscribeToModel --[[ @ 0]]
	local PaintshopChooseSide = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	TextBox4( choosePaintSide, PaintshopChooseSide["Emblem.EmblemProperties.layersUsed"], function ( f3_arg0 )
		f1_arg0:updateElementState( layerUsedValue, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerUsedValue:subscribeToGlobalModel( f1_arg1, "EmblemProperties", "layersUsedFraction", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			layerUsedValue.groupsUsedValue:setText( Engine[@"hash_4F9F1239CFD921FE"]( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( layerUsedValue ) --[[ @ 0]]
	self.layerUsedValue = layerUsedValue --[[ @ 0]]
	
	TextBox4 = LUI.UIText.new( 0, 0, 5, 225, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	TextBox4:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	TextBox4:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3357A304FD698FC" ) ) --[[ @ 0]]
	TextBox4:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	TextBox4:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	TextBox4:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( TextBox4 ) --[[ @ 0]]
	self.TextBox4 = TextBox4 --[[ @ 0]]
	
	choosePaintSide = CoD.PaintshopChoosePaintSide.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 40 ) --[[ @ 0]]
	choosePaintSide:mergeStateConditions( {
		{
			stateName = "BrowseModeControlsState",
			condition = function ( menu, element, event )
				return IsPaintshop( f1_arg1 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.editorMode", Enum[@"customizationeditormode"][@"customization_editor_mode_edit"] )
			end
		}
	} ) --[[ @ 0]]
	local rotationText = choosePaintSide --[[ @ 0]]
	PaintshopChooseSide = choosePaintSide.subscribeToModel --[[ @ 0]]
	local rotationValue = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	PaintshopChooseSide( rotationText, rotationValue["Emblem.EmblemProperties.editorMode"], function ( f6_arg0 )
		f1_arg0:updateElementState( choosePaintSide, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "Emblem.EmblemProperties.editorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	choosePaintSide:setAlpha( 0 ) --[[ @ 0]]
	choosePaintSide:subscribeToGlobalModel( f1_arg1, "Customization", "view_string_ref", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			choosePaintSide.PaintshopChooseSide.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( choosePaintSide ) --[[ @ 0]]
	self.choosePaintSide = choosePaintSide --[[ @ 0]]
	
	PaintshopChooseSide = CoD.PaintshopChooseSide.new( f1_arg0, f1_arg1, 0, 0, 7, 327, 0, 0, 5, 37 ) --[[ @ 0]]
	PaintshopChooseSide:setAlpha( 0 ) --[[ @ 0]]
	PaintshopChooseSide:setScale( LanguageOverrideNumberForScale( "korean", 0.8, LanguageOverrideNumberForScale( "japanese", 0.8, LanguageOverrideNumberForScale( "chinese", 0.8, 1, 1 ) ) ) ) --[[ @ 0]]
	PaintshopChooseSide.text:setText( LocalizeToUpperString( @"hash_5F5CA503839CA925" ) ) --[[ @ 0]]
	self:addElement( PaintshopChooseSide ) --[[ @ 0]]
	self.PaintshopChooseSide = PaintshopChooseSide --[[ @ 0]]
	
	rotationText = LUI.UIText.new( 0, 0, 345.5, 541.5, 0, 0, 3, 28 ) --[[ @ 0]]
	rotationText:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	rotationText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_925F93629C148F6" ) ) --[[ @ 0]]
	rotationText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	rotationText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	rotationText:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( rotationText ) --[[ @ 0]]
	self.rotationText = rotationText --[[ @ 0]]
	
	rotationValue = LUI.UIText.new( 0, 0, 345.5, 534.5, 0, 0, 36, 64 ) --[[ @ 0]]
	rotationValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	rotationValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	rotationValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	rotationValue:linkToElementModel( self, "material_angle", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			rotationValue:setText( f8_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( rotationValue ) --[[ @ 0]]
	self.rotationValue = rotationValue --[[ @ 0]]
	
	local scaleText = LUI.UIText.new( 0, 0, 172.5, 391.5, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	scaleText:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	scaleText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_339B482734C22440" ) ) --[[ @ 0]]
	scaleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	scaleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	scaleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( scaleText ) --[[ @ 0]]
	self.scaleText = scaleText --[[ @ 0]]
	
	local xScaleValue = LUI.UIText.new( 0, 0, 192.5, 250.5, 0, 0, 38, 63 ) --[[ @ 0]]
	xScaleValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	xScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	xScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	xScaleValue:linkToElementModel( self, "material_xscale", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			xScaleValue:setText( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( xScaleValue ) --[[ @ 0]]
	self.xScaleValue = xScaleValue --[[ @ 0]]
	
	local yScaleValue = LUI.UIText.new( 0, 0, 269, 488, 0, 0, 38, 63 ) --[[ @ 0]]
	yScaleValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	yScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	yScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	yScaleValue:linkToElementModel( self, "material_yscale", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			yScaleValue:setText( f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( yScaleValue ) --[[ @ 0]]
	self.yScaleValue = yScaleValue --[[ @ 0]]
	
	local scaleX = LUI.UIText.new( 0, 0, 173, 245, 0, 0, 37.5, 62.5 ) --[[ @ 0]]
	scaleX:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	scaleX:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79BAB2C368028BBC" ) ) --[[ @ 0]]
	scaleX:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	scaleX:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	scaleX:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( scaleX ) --[[ @ 0]]
	self.scaleX = scaleX --[[ @ 0]]
	
	local scaleY = LUI.UIText.new( 0, 0, 250, 390, 0, 0, 37.5, 62.5 ) --[[ @ 0]]
	scaleY:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	scaleY:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C8E669F24C21949" ) ) --[[ @ 0]]
	scaleY:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	scaleY:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	scaleY:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( scaleY ) --[[ @ 0]]
	self.scaleY = scaleY --[[ @ 0]]
	
	local dividerH = LUI.UIImage.new( 0, 0, 0, 539, 0, 0, 29, 33 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 0, -1, 540, 0, 0, -1, 69 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local Divider01 = LUI.UIImage.new( 0, 0, 166, 170, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider01:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider01:setAlpha( 0.1 ) --[[ @ 0]]
	Divider01:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider01:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider01:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider01:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider01 ) --[[ @ 0]]
	self.Divider01 = Divider01 --[[ @ 0]]
	
	local Divider = LUI.UIImage.new( 0, 0, 339.5, 343.5, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider:setAlpha( 0.1 ) --[[ @ 0]]
	Divider:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider ) --[[ @ 0]]
	self.Divider = Divider --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorMaterialInfo.__onClose = function ( f11_arg0 )
	f11_arg0.cacButtonBoxLrgInactiveStroke0:close() --[[ @ 0]]
	f11_arg0.layerUsedValue:close() --[[ @ 0]]
	f11_arg0.choosePaintSide:close() --[[ @ 0]]
	f11_arg0.PaintshopChooseSide:close() --[[ @ 0]]
	f11_arg0.rotationValue:close() --[[ @ 0]]
	f11_arg0.xScaleValue:close() --[[ @ 0]]
	f11_arg0.yScaleValue:close() --[[ @ 0]]
end
 --[[ @ 0]]
