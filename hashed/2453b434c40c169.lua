-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:4ba65cee910aef8b" ) --[[ @ 0]]
require( "x64:33fb470eb47879e8" ) --[[ @ 0]]
require( "ui/uieditor/widgets/lobby/common/vodpreviewwidget" ) --[[ @ 0]]

CoD.ArchivesVoDPreview = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ArchivesVoDPreview.__defaultWidth = 510 --[[ @ 0]]
CoD.ArchivesVoDPreview.__defaultHeight = 500 --[[ @ 0]]
CoD.ArchivesVoDPreview.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ArchivesVoDPreview ) --[[ @ 0]]
	self.id = "ArchivesVoDPreview" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local VoDPreview = CoD.VoDPreviewWidget.new( f1_arg0, f1_arg1, 0, 0, 0, 510, 0, 0, 0, 293 ) --[[ @ 0]]
	VoDPreview:mergeStateConditions( {
		{
			stateName = "NoMovie",
			condition = function ( menu, element, event )
				return CoD.PlayerRoleUtility.DisableVideoPlayer( element, f1_arg1 )
			end
		},
		{
			stateName = "NoFocus",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	VoDPreview:linkToElementModel( VoDPreview, "lowResVideo.movieName", true, function ( model )
		f1_arg0:updateElementState( VoDPreview, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lowResVideo.movieName"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	VoDPreview:linkToElementModel( self, "video", false, function ( model )
		VoDPreview:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( VoDPreview ) --[[ @ 0]]
	self.VoDPreview = VoDPreview --[[ @ 0]]
	
	local Play = CoD.VodButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 0, 200, 1, 1, -33, 0 ) --[[ @ 0]]
	Play:setAlpha( 0 ) --[[ @ 0]]
	Play.Play:setText( LocalizeToUpperString( @"hash_D31D493AE40DA0F" ) ) --[[ @ 0]]
	Play:subscribeToGlobalModel( f1_arg1, "Controller", "primary_button_image", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			Play.buttonPromptImage:setImage( RegisterImage( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Play ) --[[ @ 0]]
	self.Play = Play --[[ @ 0]]
	
	local Fullscreen = CoD.VodButtonPrompt.new( f1_arg0, f1_arg1, 1, 1, -200, 0, 1, 1, -33, 0 ) --[[ @ 0]]
	Fullscreen:setAlpha( 0 ) --[[ @ 0]]
	Fullscreen.Play:setText( LocalizeToUpperString( @"hash_323594B6BDE14144" ) ) --[[ @ 0]]
	Fullscreen:subscribeToGlobalModel( f1_arg1, "Controller", "alt2_button_image", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			Fullscreen.buttonPromptImage:setImage( RegisterImage( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Fullscreen ) --[[ @ 0]]
	self.Fullscreen = Fullscreen --[[ @ 0]]
	
	local ArchivesVoDDescription = CoD.ArchivesVoDDescription.new( f1_arg0, f1_arg1, 0, 0, 3, 505, 0, 0, 305, 365 ) --[[ @ 0]]
	ArchivesVoDDescription:linkToElementModel( self, "title", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			ArchivesVoDDescription.Title:setText( Engine[@"hash_4F9F1239CFD921FE"]( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ArchivesVoDDescription:linkToElementModel( self, "desc", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			ArchivesVoDDescription.Desc:setText( Engine[@"hash_4F9F1239CFD921FE"]( f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ArchivesVoDDescription ) --[[ @ 0]]
	self.ArchivesVoDDescription = ArchivesVoDDescription --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "MatureContentFiltered",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "matureContent" ) and not CoD.CTUtility.IsMatureContent( f1_arg1 )
			end
		},
		{
			stateName = "Classified",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "unlocked" )
			end
		},
		{
			stateName = "KeyboardMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "matureContent", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "matureContent"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["storageGlobalRoot.user_settings"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "storageGlobalRoot.user_settings"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "unlocked", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unlocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	VoDPreview.id = "VoDPreview" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ArchivesVoDPreview.__resetProperties = function ( f18_arg0 )
	f18_arg0.Play:completeAnimation() --[[ @ 0]]
	f18_arg0.Fullscreen:completeAnimation() --[[ @ 0]]
	f18_arg0.VoDPreview:completeAnimation() --[[ @ 0]]
	f18_arg0.ArchivesVoDDescription:completeAnimation() --[[ @ 0]]
	f18_arg0.Play:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.Fullscreen:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.VoDPreview:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.ArchivesVoDDescription:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ArchivesVoDPreview.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	MatureContentFiltered = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f20_arg0.VoDPreview:completeAnimation() --[[ @ 0]]
			f20_arg0.VoDPreview:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.VoDPreview ) --[[ @ 0]]
			f20_arg0.Play:completeAnimation() --[[ @ 0]]
			f20_arg0.Play:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Play ) --[[ @ 0]]
			f20_arg0.Fullscreen:completeAnimation() --[[ @ 0]]
			f20_arg0.Fullscreen:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Fullscreen ) --[[ @ 0]]
			f20_arg0.ArchivesVoDDescription:completeAnimation() --[[ @ 0]]
			f20_arg0.ArchivesVoDDescription:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ArchivesVoDDescription ) --[[ @ 0]]
		end
	},
	Classified = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.Play:completeAnimation() --[[ @ 0]]
			f21_arg0.Play:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Play ) --[[ @ 0]]
			f21_arg0.Fullscreen:completeAnimation() --[[ @ 0]]
			f21_arg0.Fullscreen:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Fullscreen ) --[[ @ 0]]
		end
	},
	KeyboardMouse = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f22_arg0.Play:completeAnimation() --[[ @ 0]]
			f22_arg0.Play:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.Play ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ArchivesVoDPreview.__onClose = function ( f23_arg0 )
	f23_arg0.VoDPreview:close() --[[ @ 0]]
	f23_arg0.Play:close() --[[ @ 0]]
	f23_arg0.Fullscreen:close() --[[ @ 0]]
	f23_arg0.ArchivesVoDDescription:close() --[[ @ 0]]
end
 --[[ @ 0]]
