-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]
require( "x64:39d92dce1e4291ce" ) --[[ @ 0]]
require( "x64:11ebda7298b79984" ) --[[ @ 0]]
require( "x64:127890fc3c34fd7e" ) --[[ @ 0]]

CoD.AmmoWidgetWZ_AbilityItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.__defaultWidth = 72 --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.__defaultHeight = 59 --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetWZ_AbilityItem ) --[[ @ 0]]
	self.id = "AmmoWidgetWZ_AbilityItem" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Glow = LUI.UIImage.new( 0, 0, 9, 61, 0, 0, 7, 59 ) --[[ @ 0]]
	Glow:setAlpha( 0 ) --[[ @ 0]]
	Glow:setImage( RegisterImage( @"hash_3613317835FD35EB" ) ) --[[ @ 0]]
	Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Glow ) --[[ @ 0]]
	self.Glow = Glow --[[ @ 0]]
	
	local ClockMeterAdd = LUI.UIImage.new( 0.5, 0.5, -35, 31, 0.5, 0.5, -29, 29 ) --[[ @ 0]]
	ClockMeterAdd:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
	ClockMeterAdd:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	ClockMeterAdd:linkToElementModel( self, "powerRatio", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ClockMeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClockMeterAdd ) --[[ @ 0]]
	self.ClockMeterAdd = ClockMeterAdd --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, -1, 69, 0, 0, -5, 65 ) --[[ @ 0]]
	Box:setImage( RegisterImage( @"uie_ui_hud_core_abeg_widget_box" ) ) --[[ @ 0]]
	Box:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	Box:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local PowerBasedImageAvailable = LUI.UIImage.new( 0, 0, 6, 61, 0, 0, 2, 57 ) --[[ @ 0]]
	PowerBasedImageAvailable:setScale( 0.9, 0.9 ) --[[ @ 0]]
	PowerBasedImageAvailable:linkToElementModel( self, "id", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			PowerBasedImageAvailable:setImage( GetWeaponGadgetIconAvailable( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageAvailable ) --[[ @ 0]]
	self.PowerBasedImageAvailable = PowerBasedImageAvailable --[[ @ 0]]
	
	local PowerBasedImageUnavailable = LUI.UIImage.new( 0, 0, 6, 61, 0, 0, -1, 54 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setScale( 0.86, 0.86 ) --[[ @ 0]]
	PowerBasedImageUnavailable:linkToElementModel( self, "id", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			PowerBasedImageUnavailable:setImage( GetWeaponGadgetIconUnavailable( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageUnavailable ) --[[ @ 0]]
	self.PowerBasedImageUnavailable = PowerBasedImageUnavailable --[[ @ 0]]
	
	local NotAvailable = CoD.AmmoWidgetWZ_EquipmentEmpty.new( f1_arg0, f1_arg1, 0.5, 0.5, -30, 26, 0.5, 0.5, -19.5, 22.5 ) --[[ @ 0]]
	NotAvailable:mergeStateConditions( {
		{
			stateName = "IconHidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, f1_arg1, "count", 0 )
			end
		}
	} ) --[[ @ 0]]
	NotAvailable:linkToElementModel( NotAvailable, "count", true, function ( model )
		f1_arg0:updateElementState( NotAvailable, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, nil, false, function ( model )
		NotAvailable:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			NotAvailable.ImgIcon:setImage( GetWeaponGadgetIconAvailable( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			NotAvailable.ImgIconGrow:setImage( GetWeaponGadgetIconAvailable( f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotAvailable ) --[[ @ 0]]
	self.NotAvailable = NotAvailable --[[ @ 0]]
	
	local HeroAbilityUseString = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -36, 36, 0, 0, 67, 91 ) --[[ @ 0]]
	HeroAbilityUseString:mergeStateConditions( {
		{
			stateName = "HiddenPreference",
			condition = function ( menu, element, event )
				return CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f11_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) --[[ @ 0]]
				if not f11_local0 then
					f11_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ) --[[ @ 0]]
					if not f11_local0 then
						f11_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"] ) --[[ @ 0]]
					end
				end
				return f11_local0
			end
		},
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbilityWZ",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	local HeroAbilityHoldString = HeroAbilityUseString --[[ @ 0]]
	local QuickEquipCycleString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	local HeroAbilityHoldStringPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	QuickEquipCycleString( HeroAbilityHoldString, HeroAbilityHoldStringPC.PlayerSettingsUpdate, function ( f17_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString --[[ @ 0]]
	QuickEquipCycleString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	HeroAbilityHoldStringPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	QuickEquipCycleString( HeroAbilityHoldString, HeroAbilityHoldStringPC["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]], function ( f18_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString --[[ @ 0]]
	QuickEquipCycleString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	HeroAbilityHoldStringPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	QuickEquipCycleString( HeroAbilityHoldString, HeroAbilityHoldStringPC["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"]], function ( f19_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString --[[ @ 0]]
	QuickEquipCycleString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	HeroAbilityHoldStringPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	QuickEquipCycleString( HeroAbilityHoldString, HeroAbilityHoldStringPC["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"]], function ( f20_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5C57360571B0917E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:appendEventHandler( "input_source_changed", function ( f21_arg0, f21_arg1 )
		f21_arg1.menu = f21_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( HeroAbilityUseString, f21_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	HeroAbilityHoldString = HeroAbilityUseString --[[ @ 0]]
	QuickEquipCycleString = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	HeroAbilityHoldStringPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	QuickEquipCycleString( HeroAbilityHoldString, HeroAbilityHoldStringPC.LastInput, function ( f22_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2EC61C43D90FCF56" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_29E6A8D0F83F4FC6" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( HeroAbilityUseString ) --[[ @ 0]]
	self.HeroAbilityUseString = HeroAbilityUseString --[[ @ 0]]
	
	QuickEquipCycleString = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -262, -23, 0, 0, 70, 88 ) --[[ @ 0]]
	QuickEquipCycleString:mergeStateConditions( {
		{
			stateName = "HiddenPreference",
			condition = function ( menu, element, event )
				return CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.OptionsUtility.IsProfileIntValue( f1_arg1, "warzoneCycleItems", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		},
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	HeroAbilityHoldStringPC = QuickEquipCycleString --[[ @ 0]]
	HeroAbilityHoldString = QuickEquipCycleString.subscribeToModel --[[ @ 0]]
	local LED = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, LED.PlayerSettingsUpdate, function ( f30_arg0 )
		f1_arg0:updateElementState( QuickEquipCycleString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldStringPC = QuickEquipCycleString --[[ @ 0]]
	HeroAbilityHoldString = QuickEquipCycleString.subscribeToModel --[[ @ 0]]
	LED = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, LED["storageGlobalRoot.user_settings"], function ( f31_arg0 )
		f1_arg0:updateElementState( QuickEquipCycleString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "storageGlobalRoot.user_settings"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityHoldStringPC = QuickEquipCycleString --[[ @ 0]]
	HeroAbilityHoldString = QuickEquipCycleString.subscribeToModel --[[ @ 0]]
	LED = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, LED["hudItems.inventory.open"], function ( f32_arg0 )
		f1_arg0:updateElementState( QuickEquipCycleString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f32_arg0:get(),
			modelName = "hudItems.inventory.open"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickEquipCycleString:appendEventHandler( "input_source_changed", function ( f33_arg0, f33_arg1 )
		f33_arg1.menu = f33_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( QuickEquipCycleString, f33_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	HeroAbilityHoldStringPC = QuickEquipCycleString --[[ @ 0]]
	HeroAbilityHoldString = QuickEquipCycleString.subscribeToModel --[[ @ 0]]
	LED = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HeroAbilityHoldString( HeroAbilityHoldStringPC, LED.LastInput, function ( f34_arg0 )
		f1_arg0:updateElementState( QuickEquipCycleString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	QuickEquipCycleString.KBMText:setText( "" ) --[[ @ 0]]
	QuickEquipCycleString.KBMText:setLetterSpacing( 2 ) --[[ @ 0]]
	QuickEquipCycleString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4FB00D233B6DAFE4" ) ) --[[ @ 0]]
	QuickEquipCycleString.GamepadText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	QuickEquipCycleString.GamepadText:setLetterSpacing( 2 ) --[[ @ 0]]
	QuickEquipCycleString.GamepadText:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( QuickEquipCycleString ) --[[ @ 0]]
	self.QuickEquipCycleString = QuickEquipCycleString --[[ @ 0]]
	
	HeroAbilityHoldString = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, -100, 100, 0, 0, -50, -1 ) --[[ @ 0]]
	HeroAbilityHoldString:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityHoldString:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldString ) --[[ @ 0]]
	self.HeroAbilityHoldString = HeroAbilityHoldString --[[ @ 0]]
	
	HeroAbilityHoldStringPC = nil --[[ @ 0]]
	
	HeroAbilityHoldStringPC = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, -100, 100, 0, 0, -65.5, -16.5 ) --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha = function ()
		HeroAbilityHoldStringPC:setAlpha( CoD.HUDUtility.GetAbilityHoldToActivateAlpha( f1_arg1, self, 1 ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha() --[[ @ 0]]
	HeroAbilityHoldStringPC:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityHoldStringPC:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldStringPC ) --[[ @ 0]]
	self.HeroAbilityHoldStringPC = HeroAbilityHoldStringPC --[[ @ 0]]
	
	LED = LUI.UIImage.new( 0, 0, 0.5, 68.5, 0, 0, -4.5, 63.5 ) --[[ @ 0]]
	LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED:setAlpha( 0.2 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_player_widget_led_heal" ) ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local stackCount = CoD.WarzoneAbilityItemCounter.new( f1_arg0, f1_arg1, 0, 0, 38.5, 72.5, 0, 0, 38, 60 ) --[[ @ 0]]
	stackCount:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueLessThan( f1_arg1, "HUDItems", "equipmentStackCount", 1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local13 = stackCount --[[ @ 0]]
	local f1_local14 = stackCount.subscribeToModel --[[ @ 0]]
	local f1_local15 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local14( f1_local13, f1_local15.equipmentStackCount, function ( f39_arg0 )
		f1_arg0:updateElementState( stackCount, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f39_arg0:get(),
			modelName = "equipmentStackCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	stackCount:linkToElementModel( stackCount, "id", true, function ( model )
		f1_arg0:updateElementState( stackCount, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	stackCount:subscribeToGlobalModel( f1_arg1, "HUDItems", "equipmentStackCount", function ( model )
		local f41_local0 = model:get() --[[ @ 0]]
		if f41_local0 ~= nil then
			stackCount.Quantity:setText( CoD.BaseUtility.AlreadyLocalized( f41_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	stackCount:linkToElementModel( self, nil, false, function ( model )
		stackCount:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( stackCount ) --[[ @ 0]]
	self.stackCount = stackCount --[[ @ 0]]
	
	HeroAbilityHoldStringPC:linkToElementModel( self, "powerRatio", true, HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	f1_local13 = HeroAbilityHoldStringPC --[[ @ 0]]
	f1_local14 = HeroAbilityHoldStringPC.subscribeToModel --[[ @ 0]]
	f1_local15 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local14( f1_local13, f1_local15["GameplayFeedbackSettings.hideRadiationHold"], HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueLessThan( f1_arg1, "HUDItems", "equipmentStackCount", 1 )
			end
		},
		{
			stateName = "InUse",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] )
			end
		},
		{
			stateName = "Deployed",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "PowerBasedEmptyCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_958A6962CA8F9B7"] ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 0 )
			end
		},
		{
			stateName = "PowerBasedCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_958A6962CA8F9B7"] )
			end
		},
		{
			stateName = "PowerBased",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_29529861EAA8D1C"] )
			end
		}
	} ) --[[ @ 0]]
	f1_local13 = self --[[ @ 0]]
	f1_local14 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local14( f1_local13, f1_local15.equipmentStackCount, function ( f49_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f49_arg0:get(),
			modelName = "equipmentStackCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f52_arg2, f52_arg3, f52_arg4 )
		if CoD.HUDUtility.ShouldPulseNewAmmo( self ) and IsSelfInState( self, "PowerBased" ) then
			PlayClip( self, "Pulse", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		local f53_local0 = self --[[ @ 0]]
		if CoD.OptionsUtility.IsProfileIntValue( f1_arg1, "warzoneCycleItems", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) then
			PlayClip( self, "FadeIn", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		local f54_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "PowerBased" ) and CoD.HUDUtility.ShouldPulseNewAmmo( self ) then
			PlayClip( self, "Pulse", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local14 = self --[[ @ 0]]
	f1_local14 = HeroAbilityHoldString --[[ @ 0]]
	if IsPC() then
		HideWidget( self.HeroAbilityHoldString ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.__resetProperties = function ( f55_arg0 )
	f55_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
	f55_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
	f55_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
	f55_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
	f55_arg0.Glow:completeAnimation() --[[ @ 0]]
	f55_arg0.Box:completeAnimation() --[[ @ 0]]
	f55_arg0.LED:completeAnimation() --[[ @ 0]]
	f55_arg0.QuickEquipCycleString:completeAnimation() --[[ @ 0]]
	f55_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
	f55_arg0.stackCount:completeAnimation() --[[ @ 0]]
	f55_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
	f55_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f55_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
	f55_arg0.PowerBasedImageUnavailable:setTopBottom( 0, 0, -1, 54 ) --[[ @ 0]]
	f55_arg0.PowerBasedImageUnavailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f55_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	f55_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
	f55_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
	f55_arg0.Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	f55_arg0.Box:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f55_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
	f55_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f55_arg0.LED:setAlpha( 0.2 ) --[[ @ 0]]
	f55_arg0.QuickEquipCycleString:setAlpha( 1 ) --[[ @ 0]]
	f55_arg0.ClockMeterAdd:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f55_arg0.ClockMeterAdd:setAlpha( 0 ) --[[ @ 0]]
	f55_arg0.stackCount:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f56_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f56_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.NotAvailable ) --[[ @ 0]]
			f56_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f56_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f56_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f56_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f57_arg0, f57_arg1 )
			f57_arg0:__resetProperties() --[[ @ 0]]
			f57_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f57_arg0.Glow:completeAnimation() --[[ @ 0]]
			f57_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.Glow ) --[[ @ 0]]
			f57_arg0.Box:completeAnimation() --[[ @ 0]]
			f57_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.Box ) --[[ @ 0]]
			f57_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f57_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f57_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f57_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f57_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f57_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.NotAvailable ) --[[ @ 0]]
			f57_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f57_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f57_arg0.QuickEquipCycleString:completeAnimation() --[[ @ 0]]
			f57_arg0.QuickEquipCycleString:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.QuickEquipCycleString ) --[[ @ 0]]
			f57_arg0.LED:completeAnimation() --[[ @ 0]]
			f57_arg0.LED:setAlpha( 0.2 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.LED ) --[[ @ 0]]
		end
	},
	InUse = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f58_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f58_arg0.ClockMeterAdd:setAlpha( 0.8 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ClockMeterAdd ) --[[ @ 0]]
			f58_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f58_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.NotAvailable ) --[[ @ 0]]
			f58_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f58_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f58_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Deployed = {
		DefaultClip = function ( f59_arg0, f59_arg1 )
			f59_arg0:__resetProperties() --[[ @ 0]]
			f59_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f59_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f59_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.NotAvailable ) --[[ @ 0]]
			f59_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f59_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f59_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedEmptyCharging = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f60_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f60_arg0.ClockMeterAdd:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f60_arg0.ClockMeterAdd:setAlpha( 0.8 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ClockMeterAdd ) --[[ @ 0]]
			f60_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f60_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f60_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f60_arg0.PowerBasedImageUnavailable:setTopBottom( 0, 0, 0, 55 ) --[[ @ 0]]
			f60_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f60_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f60_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.NotAvailable ) --[[ @ 0]]
			f60_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f60_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f60_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedCharging = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f61_arg0.ClockMeterAdd:completeAnimation() --[[ @ 0]]
			f61_arg0.ClockMeterAdd:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f61_arg0.ClockMeterAdd:setAlpha( 0.8 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ClockMeterAdd ) --[[ @ 0]]
			f61_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f61_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f61_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f61_arg0.PowerBasedImageUnavailable:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f61_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f61_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.NotAvailable ) --[[ @ 0]]
			f61_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f61_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBased = {
		DefaultClip = function ( f62_arg0, f62_arg1 )
			f62_arg0:__resetProperties() --[[ @ 0]]
			f62_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f62_arg0.Glow:completeAnimation() --[[ @ 0]]
			f62_arg0.Glow:setAlpha( 0.1 ) --[[ @ 0]]
			f62_arg0.Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.Glow ) --[[ @ 0]]
			f62_arg0.Box:completeAnimation() --[[ @ 0]]
			f62_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f62_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.Box ) --[[ @ 0]]
			f62_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f62_arg0.PowerBasedImageUnavailable:setRGB( 0.74, 0.69, 0.42 ) --[[ @ 0]]
			f62_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f62_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f62_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.NotAvailable ) --[[ @ 0]]
			f62_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f62_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f62_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f62_arg0.LED:completeAnimation() --[[ @ 0]]
			f62_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f62_arg0.LED:setAlpha( 0.2 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LED ) --[[ @ 0]]
		end,
		Pulse = function ( f63_arg0, f63_arg1 )
			f63_arg0:__resetProperties() --[[ @ 0]]
			f63_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f63_arg0.Box:completeAnimation() --[[ @ 0]]
			f63_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f63_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.Box ) --[[ @ 0]]
			f63_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f63_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.NotAvailable ) --[[ @ 0]]
			f63_arg0.LED:completeAnimation() --[[ @ 0]]
			f63_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f63_arg0.LED:setAlpha( 0.2 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.LED ) --[[ @ 0]]
			f63_arg0.nextClip = "Pulse" --[[ @ 0]]
		end,
		FadeIn = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f64_arg0.Glow:completeAnimation() --[[ @ 0]]
			f64_arg0.Glow:setAlpha( 0.1 ) --[[ @ 0]]
			f64_arg0.Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.Glow ) --[[ @ 0]]
			f64_arg0.Box:completeAnimation() --[[ @ 0]]
			f64_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f64_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.Box ) --[[ @ 0]]
			local f64_local0 = function ( f65_arg0 )
				local f65_local0 = function ( f66_arg0 )
					f66_arg0:beginAnimation( 200 ) --[[ @ 0]]
					f66_arg0:setAlpha( 1 ) --[[ @ 0]]
					f66_arg0:registerEventHandler( "transition_complete_keyframe", f64_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f64_arg0.PowerBasedImageAvailable:beginAnimation( 200 ) --[[ @ 0]]
				f64_arg0.PowerBasedImageAvailable:registerEventHandler( "interrupted_keyframe", f64_arg0.clipInterrupted ) --[[ @ 0]]
				f64_arg0.PowerBasedImageAvailable:registerEventHandler( "transition_complete_keyframe", f65_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f64_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f64_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f64_local0( f64_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f64_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f64_arg0.PowerBasedImageUnavailable:setRGB( 0.74, 0.69, 0.42 ) --[[ @ 0]]
			f64_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f64_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f64_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.NotAvailable ) --[[ @ 0]]
			f64_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f64_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f64_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f64_arg0.LED:completeAnimation() --[[ @ 0]]
			f64_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f64_arg0.LED:setAlpha( 0.2 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.LED ) --[[ @ 0]]
			local f64_local1 = function ( f67_arg0 )
				local f67_local0 = function ( f68_arg0 )
					f68_arg0:beginAnimation( 200 ) --[[ @ 0]]
					f68_arg0:setAlpha( 1 ) --[[ @ 0]]
					f68_arg0:registerEventHandler( "transition_complete_keyframe", f64_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f64_arg0.stackCount:beginAnimation( 200 ) --[[ @ 0]]
				f64_arg0.stackCount:registerEventHandler( "interrupted_keyframe", f64_arg0.clipInterrupted ) --[[ @ 0]]
				f64_arg0.stackCount:registerEventHandler( "transition_complete_keyframe", f67_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f64_arg0.stackCount:completeAnimation() --[[ @ 0]]
			f64_arg0.stackCount:setAlpha( 0 ) --[[ @ 0]]
			f64_local1( f64_arg0.stackCount ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetWZ_AbilityItem.__onClose = function ( f69_arg0 )
	f69_arg0.ClockMeterAdd:close() --[[ @ 0]]
	f69_arg0.PowerBasedImageAvailable:close() --[[ @ 0]]
	f69_arg0.PowerBasedImageUnavailable:close() --[[ @ 0]]
	f69_arg0.NotAvailable:close() --[[ @ 0]]
	f69_arg0.HeroAbilityUseString:close() --[[ @ 0]]
	f69_arg0.QuickEquipCycleString:close() --[[ @ 0]]
	f69_arg0.HeroAbilityHoldString:close() --[[ @ 0]]
	f69_arg0.HeroAbilityHoldStringPC:close() --[[ @ 0]]
	f69_arg0.stackCount:close() --[[ @ 0]]
end
 --[[ @ 0]]
