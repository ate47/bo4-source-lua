-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/pc/hud/hud_keypromptframe" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/hud/keypromptbacking" ) --[[ @ 0]]

CoD.ControllerDependent_TextBoxLargeGamepad = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ControllerDependent_TextBoxLargeGamepad.__defaultWidth = 89 --[[ @ 0]]
CoD.ControllerDependent_TextBoxLargeGamepad.__defaultHeight = 22 --[[ @ 0]]
CoD.ControllerDependent_TextBoxLargeGamepad.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ControllerDependent_TextBoxLargeGamepad ) --[[ @ 0]]
	self.id = "ControllerDependent_TextBoxLargeGamepad" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local Frame = nil --[[ @ 0]]
	
	Frame = CoD.HUD_KeyPromptFrame.new( f1_arg0, f1_arg1, 0.5, 0.5, -50, 22, 0.5, 0.5, -20, 20 ) --[[ @ 0]]
	Frame:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local KBMText = nil --[[ @ 0]]
	
	KBMText = LUI.UIText.new( 0.5, 0.5, -46.5, 18.5, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	KBMText:setAlpha( 0 ) --[[ @ 0]]
	KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	KBMText:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	KBMText:setLetterSpacing( -2 ) --[[ @ 0]]
	KBMText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	KBMText:setAlignment( Enum[@"luialignment"][@"lui_alignment_middle"] ) --[[ @ 0]]
	self:addElement( KBMText ) --[[ @ 0]]
	self.KBMText = KBMText --[[ @ 0]]
	
	local GamepadText = LUI.UIText.new( -0.2, 1.2, 0, 0, -0.2, 1.2, 0, 0 ) --[[ @ 0]]
	GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	GamepadText:setTTF( "default" ) --[[ @ 0]]
	GamepadText:setLetterSpacing( -1 ) --[[ @ 0]]
	GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( GamepadText ) --[[ @ 0]]
	self.GamepadText = GamepadText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) --[[ @ 0]]
				if not f2_local0 then
					f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
				end
				return f2_local0
			end
		},
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local4 = self --[[ @ 0]]
	local f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f5_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f6_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6.LastInput, function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ControllerDependent_TextBoxLargeGamepad.__resetProperties = function ( f8_arg0 )
	f8_arg0.GamepadText:completeAnimation() --[[ @ 0]]
	f8_arg0.KBMText:completeAnimation() --[[ @ 0]]
	f8_arg0.Frame:completeAnimation() --[[ @ 0]]
	f8_arg0.GamepadText:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.KBMText:setAlpha( 0 ) --[[ @ 0]]
	f8_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ControllerDependent_TextBoxLargeGamepad.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.GamepadText:completeAnimation() --[[ @ 0]]
			f10_arg0.GamepadText:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.GamepadText ) --[[ @ 0]]
		end
	},
	KeyboardAndMouse = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f11_arg0.Frame:completeAnimation() --[[ @ 0]]
			f11_arg0.Frame:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Frame ) --[[ @ 0]]
			f11_arg0.KBMText:completeAnimation() --[[ @ 0]]
			f11_arg0.KBMText:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.KBMText ) --[[ @ 0]]
			f11_arg0.GamepadText:completeAnimation() --[[ @ 0]]
			f11_arg0.GamepadText:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.GamepadText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.ControllerDependent_TextBoxLargeGamepad.__clipsPerState.KeyboardAndMouse.DefaultClip = nil --[[ @ 0]]
end
CoD.ControllerDependent_TextBoxLargeGamepad.__onClose = function ( f12_arg0 )
	f12_arg0.Frame:close() --[[ @ 0]]
end
 --[[ @ 0]]
