-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "x64:118d56e190302ee4" ) --[[ @ 0]]

CoD.ReportDropdown_Container = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReportDropdown_Container.__defaultWidth = 348 --[[ @ 0]]
CoD.ReportDropdown_Container.__defaultHeight = 65 --[[ @ 0]]
CoD.ReportDropdown_Container.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.PCWidgetUtility.PrepareReportPlayerDropdownProperties( self, f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.ReportDropdown_Container ) --[[ @ 0]]
	self.id = "ReportDropdown_Container" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BG = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BG:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BG:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( BG ) --[[ @ 0]]
	self.BG = BG --[[ @ 0]]
	
	local emptyFocusable = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	emptyFocusable:linkToElementModel( emptyFocusable, "refreshWidget", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f3_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f3_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( emptyFocusable, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.PCUtility.IsUnavailable( self, controller ) then
			CoD.PCWidgetUtility.CreateDropdown( self, self.DropdownList, controller, menu, "DropDown_ItemList" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.PCUtility.IsUnavailable( self, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	local DropdownList = CoD.Dropdown_LeftAlign.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	DropdownList:mergeStateConditions( {
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return CoD.PCUtility.IsUnavailable( self, f1_arg1 )
			end
		},
		{
			stateName = "Open",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOpen" )
			end
		},
		{
			stateName = "Close",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOpen" )
			end
		}
	} ) --[[ @ 0]]
	DropdownList:linkToElementModel( DropdownList, "refreshWidget", true, function ( model )
		f1_arg0:updateElementState( DropdownList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "refreshWidget"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropdownList:linkToElementModel( DropdownList, "isOpen", true, function ( model )
		f1_arg0:updateElementState( DropdownList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOpen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropdownList:linkToElementModel( self, nil, false, function ( model )
		DropdownList:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropdownList:linkToElementModel( self, "currentValue", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			DropdownList.TextBox:setText( CoD.BaseUtility.LocalizeIfXHash( CoD.PCWidgetUtility.ReportReasonToText( f1_arg1, f12_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DropdownList ) --[[ @ 0]]
	self.DropdownList = DropdownList --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return CoD.PCUtility.IsUnavailable( self, f1_arg1 )
			end
		},
		{
			stateName = "FadedOut",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "refreshWidget", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "refreshWidget"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setModel", function ( element, controller )
		CoD.PCWidgetUtility.PrepareDropdownList( self, f1_arg1, f1_arg0, controller, self.DropdownList ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.PCWidgetUtility.ResetReportModel( f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "currentValue", true, function ( model )
		local f18_local0 = self --[[ @ 0]]
		CoD.PCUtility.CallValueUpdateIfExist( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	DropdownList.id = "DropdownList" --[[ @ 0]]
	self.__defaultFocus = emptyFocusable --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReportDropdown_Container.__onClose = function ( f19_arg0 )
	f19_arg0.emptyFocusable:close() --[[ @ 0]]
	f19_arg0.DropdownList:close() --[[ @ 0]]
end
 --[[ @ 0]]
