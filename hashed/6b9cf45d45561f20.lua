-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/hud/console/console" ) --[[ @ 0]]
require( "x64:323710fb31eadccf" ) --[[ @ 0]]
require( "x64:5af90004de91405b" ) --[[ @ 0]]
require( "x64:699e7576eaf0080d" ) --[[ @ 0]]
require( "x64:54ebdd3d2109ac41" ) --[[ @ 0]]
require( "x64:3dbd6d94d6d6e50d" ) --[[ @ 0]]
require( "x64:4da9c2f647b260e" ) --[[ @ 0]]
require( "x64:12ec7be473eb96f8" ) --[[ @ 0]]
require( "x64:206e1e74cf1a468c" ) --[[ @ 0]]
require( "x64:138c0de72b02c6c9" ) --[[ @ 0]]
require( "x64:6fed80f8bacb80c6" ) --[[ @ 0]]
require( "x64:338f9b9d5c33f37c" ) --[[ @ 0]]
require( "x64:ef01558771b78bf" ) --[[ @ 0]]
require( "x64:61c7b1234e765fdf" ) --[[ @ 0]]
require( "x64:ede8e88e434fa50" ) --[[ @ 0]]
require( "x64:48d640ca32ca4eb1" ) --[[ @ 0]]
require( "x64:36df9b99bf1fe29a" ) --[[ @ 0]]
require( "x64:148557ed02af231c" ) --[[ @ 0]]
require( "x64:4f6ad2204228134e" ) --[[ @ 0]]
require( "x64:376cc25e6b842a01" ) --[[ @ 0]]
require( "x64:3aff3575643485d1" ) --[[ @ 0]]
require( "x64:32bb3abd458dbdfe" ) --[[ @ 0]]
require( "x64:46ef65e27bfc904b" ) --[[ @ 0]]
require( "x64:1c19c0be11dd9bd3" ) --[[ @ 0]]

CoD.Hud_WZ_SafeAreaContainer_Back = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.__defaultWidth = 1920 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.__defaultHeight = 1080 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Hud_WZ_SafeAreaContainer_Back ) --[[ @ 0]]
	self.id = "Hud_WZ_SafeAreaContainer_Back" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local InventoryVignette = CoD.WarzoneQuickInventoryVignette.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -173, -45 ) --[[ @ 0]]
	self:addElement( InventoryVignette ) --[[ @ 0]]
	self.InventoryVignette = InventoryVignette --[[ @ 0]]
	
	local WZTeamList = CoD.WZTeamList.new( f1_arg0, f1_arg1, 0, 0, -2.5, 382.5, 1, 1, -522, -264 ) --[[ @ 0]]
	self:addElement( WZTeamList ) --[[ @ 0]]
	self.WZTeamList = WZTeamList --[[ @ 0]]
	
	local PlayerWidgetContainer = CoD.PlayerWidgetWZContainer.new( f1_arg0, f1_arg1, 0, 0, -14, 576, 1, 1, -145.5, 40.5 ) --[[ @ 0]]
	self:addElement( PlayerWidgetContainer ) --[[ @ 0]]
	self.PlayerWidgetContainer = PlayerWidgetContainer --[[ @ 0]]
	
	local InventoryLine = CoD.WarzoneInventoryLine.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 1, 1, -214, -86 ) --[[ @ 0]]
	InventoryLine:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( InventoryLine ) --[[ @ 0]]
	self.InventoryLine = InventoryLine --[[ @ 0]]
	
	local AmmoWidgetContainer = CoD.AmmoWidgetWZContainer.new( f1_arg0, f1_arg1, 1, 1, -586, 4, 1, 1, -145.5, 40.5 ) --[[ @ 0]]
	self:addElement( AmmoWidgetContainer ) --[[ @ 0]]
	self.AmmoWidgetContainer = AmmoWidgetContainer --[[ @ 0]]
	
	local EMPWeaponInfo = CoD.Warzone_EMP_Ammo.new( f1_arg0, f1_arg1, 1, 1, -450, 62, 1, 1, -124, -14 ) --[[ @ 0]]
	self:addElement( EMPWeaponInfo ) --[[ @ 0]]
	self.EMPWeaponInfo = EMPWeaponInfo --[[ @ 0]]
	
	local MPHardcoreInventoryWidget = CoD.MP_HardcoreInventoryWidget.new( f1_arg0, f1_arg1, 1, 1, -642.5, -525.5, 1, 1, -257, -117 ) --[[ @ 0]]
	self:addElement( MPHardcoreInventoryWidget ) --[[ @ 0]]
	self.MPHardcoreInventoryWidget = MPHardcoreInventoryWidget --[[ @ 0]]
	
	local DeployableNotifications = CoD.DeployableNotifications.new( f1_arg0, f1_arg1, 0.5, 0.5, -400, 400, 0.5, 0.5, -219.5, 180.5 ) --[[ @ 0]]
	DeployableNotifications:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.SpawnSelectionUtility.IsSpawnSelectActive( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local GameUpdateNotification = DeployableNotifications --[[ @ 0]]
	local WaypointCloseMessage = DeployableNotifications.subscribeToModel --[[ @ 0]]
	local ObituaryCallout = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	WaypointCloseMessage( GameUpdateNotification, ObituaryCallout["hudItems.showSpawnSelect"], function ( f3_arg0 )
		f1_arg0:updateElementState( DeployableNotifications, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "hudItems.showSpawnSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( DeployableNotifications ) --[[ @ 0]]
	self.DeployableNotifications = DeployableNotifications --[[ @ 0]]
	
	WaypointCloseMessage = CoD.WaypointCloseMessage.new( f1_arg0, f1_arg1, 0.5, 0.5, -192, 192, 0.5, 0.5, -292.5, -271.5 ) --[[ @ 0]]
	WaypointCloseMessage.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	self:addElement( WaypointCloseMessage ) --[[ @ 0]]
	self.WaypointCloseMessage = WaypointCloseMessage --[[ @ 0]]
	
	GameUpdateNotification = CoD.WZGameUpdateNotification.new( f1_arg0, f1_arg1, 0.5, 0.5, -250, 250, 0.5, 0.5, -354.5, -306.5 ) --[[ @ 0]]
	GameUpdateNotification:subscribeToGlobalModel( f1_arg1, "GameUpdateNotification", nil, function ( model )
		GameUpdateNotification:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( GameUpdateNotification ) --[[ @ 0]]
	self.GameUpdateNotification = GameUpdateNotification --[[ @ 0]]
	
	ObituaryCallout = CoD.WZObituaryCallout.new( f1_arg0, f1_arg1, 0.5, 0.5, -140, 140, 1, 1, -246, -206 ) --[[ @ 0]]
	self:addElement( ObituaryCallout ) --[[ @ 0]]
	self.ObituaryCallout = ObituaryCallout --[[ @ 0]]
	
	local KillcamCompass = CoD.WZKillcamCompass.new( f1_arg0, f1_arg1, 0, 0, -31, 319, 0, 0, 0, 350 ) --[[ @ 0]]
	KillcamCompass:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_5C212964B40FA826" ) ) --[[ @ 0]]
	self:addElement( KillcamCompass ) --[[ @ 0]]
	self.KillcamCompass = KillcamCompass --[[ @ 0]]
	
	local DeathCamContainer = CoD.DeathCamContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -300, 300, 0.85, 0.85, -187.5, 112.5 ) --[[ @ 0]]
	DeathCamContainer:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_player_dead"] ) --[[ @ 0]]
				if f5_local0 then
					if not CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "hudItems.hacked", 0 ) then
						f5_local0 = not CoD.SpawnSelectionUtility.IsSpawnSelectActive( f1_arg1 ) --[[ @ 0]]
					else
						f5_local0 = false --[[ @ 0]]
					end
				end
				return f5_local0
			end
		}
	} ) --[[ @ 0]]
	local WZCollapseTimer = DeathCamContainer --[[ @ 0]]
	local Console = DeathCamContainer.subscribeToModel --[[ @ 0]]
	local WarzoneWingsuitOverlay = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Console( WZCollapseTimer, WarzoneWingsuitOverlay["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]], function ( f6_arg0 )
		f1_arg0:updateElementState( DeathCamContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WZCollapseTimer = DeathCamContainer --[[ @ 0]]
	Console = DeathCamContainer.subscribeToModel --[[ @ 0]]
	WarzoneWingsuitOverlay = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Console( WZCollapseTimer, WarzoneWingsuitOverlay["hudItems.hacked"], function ( f7_arg0 )
		f1_arg0:updateElementState( DeathCamContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WZCollapseTimer = DeathCamContainer --[[ @ 0]]
	Console = DeathCamContainer.subscribeToModel --[[ @ 0]]
	WarzoneWingsuitOverlay = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Console( WZCollapseTimer, WarzoneWingsuitOverlay["hudItems.showSpawnSelect"], function ( f8_arg0 )
		f1_arg0:updateElementState( DeathCamContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "hudItems.showSpawnSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DeathCamContainer:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DeathCamContainer ) --[[ @ 0]]
	self.DeathCamContainer = DeathCamContainer --[[ @ 0]]
	
	Console = CoD.Console.new( f1_arg0, f1_arg1, 0, 0, -1, 1019, 1, 1, -556.5, -491.5 ) --[[ @ 0]]
	self:addElement( Console ) --[[ @ 0]]
	self.Console = Console --[[ @ 0]]
	
	WZCollapseTimer = CoD.WZCollapseTimer.new( f1_arg0, f1_arg1, 0, 1, 5, 5, 0.01, 1.01, -6.5, -6.5 ) --[[ @ 0]]
	self:addElement( WZCollapseTimer ) --[[ @ 0]]
	self.WZCollapseTimer = WZCollapseTimer --[[ @ 0]]
	
	WarzoneWingsuitOverlay = CoD.WarzoneWingsuitOverlay.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 1, 1 ) --[[ @ 0]]
	self:addElement( WarzoneWingsuitOverlay ) --[[ @ 0]]
	self.WarzoneWingsuitOverlay = WarzoneWingsuitOverlay --[[ @ 0]]
	
	local HorizontalCompass = CoD.WZHorizontalCompass.new( f1_arg0, f1_arg1, 0.5, 0.5, -394, 394, 0, 0, 1, 81 ) --[[ @ 0]]
	self:addElement( HorizontalCompass ) --[[ @ 0]]
	self.HorizontalCompass = HorizontalCompass --[[ @ 0]]
	
	local UseTimer = CoD.WarzoneUseTimer.new( f1_arg0, f1_arg1, 0.5, 0.5, -300, 300, 1, 1, -370, -290 ) --[[ @ 0]]
	self:addElement( UseTimer ) --[[ @ 0]]
	self.UseTimer = UseTimer --[[ @ 0]]
	
	local FallMeter = CoD.FallMeter.new( f1_arg0, f1_arg1, 1, 1, -33, -1, 0.5, 0.5, -269.5, 230.5 ) --[[ @ 0]]
	self:addElement( FallMeter ) --[[ @ 0]]
	self.FallMeter = FallMeter --[[ @ 0]]
	
	local KilledBy = CoD.WarzoneKilledByName.new( f1_arg0, f1_arg1, 0.5, 0.5, -400, 400, 0, 0, 91, 136 ) --[[ @ 0]]
	KilledBy:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( KilledBy ) --[[ @ 0]]
	self.KilledBy = KilledBy --[[ @ 0]]
	
	local WarzoneKillerIdentity = CoD.WarzoneKillerIdentity.new( f1_arg0, f1_arg1, 0.5, 0.5, -400, 400, 0.5, 0.5, 373, 453 ) --[[ @ 0]]
	WarzoneKillerIdentity:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] )
			end
		}
	} ) --[[ @ 0]]
	local EMPcompass = WarzoneKillerIdentity --[[ @ 0]]
	local WZReinsertionPassengerCount = WarzoneKillerIdentity.subscribeToModel --[[ @ 0]]
	local EMPplayer = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	WZReinsertionPassengerCount( EMPcompass, EMPplayer["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f11_arg0 )
		f1_arg0:updateElementState( WarzoneKillerIdentity, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WarzoneKillerIdentity.KillerLabel:setText( LocalizeToUpperString( @"hash_698E1E885ED068B4" ) ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", nil, function ( model )
		WarzoneKillerIdentity:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", "xuid", function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			WarzoneKillerIdentity.AttackerEmblem:setupPlayerEmblemByXUID( f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", nil, function ( model )
		WarzoneKillerIdentity.CallingCardsFrameWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", "clientNum", function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			WarzoneKillerIdentity.PlayerName:setText( GetClientName( f1_arg1, f15_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", "clientNum", function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			WarzoneKillerIdentity.ClanName:setText( CoD.SocialUtility.CleanGamerTag( GetClientClantag( f1_arg1, f16_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", "rank", function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			WarzoneKillerIdentity.Rank:setText( f17_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneKillerIdentity:subscribeToGlobalModel( f1_arg1, "Attacker", "rankIcon", function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			WarzoneKillerIdentity.RankIcon:setImage( RegisterImage( f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WarzoneKillerIdentity ) --[[ @ 0]]
	self.WarzoneKillerIdentity = WarzoneKillerIdentity --[[ @ 0]]
	
	WZReinsertionPassengerCount = CoD.WZReinsertionPassengerCount.new( f1_arg0, f1_arg1, 0, 0, -106, 1814, 0, 0, 390, 502 ) --[[ @ 0]]
	self:addElement( WZReinsertionPassengerCount ) --[[ @ 0]]
	self.WZReinsertionPassengerCount = WZReinsertionPassengerCount --[[ @ 0]]
	
	EMPcompass = CoD.Warzone_EMP_Compass.new( f1_arg0, f1_arg1, 0.5, 0.5, -376, 396, 0, 0, -16, 84 ) --[[ @ 0]]
	self:addElement( EMPcompass ) --[[ @ 0]]
	self.EMPcompass = EMPcompass --[[ @ 0]]
	
	EMPplayer = CoD.Warzone_EMP_Player.new( f1_arg0, f1_arg1, 0, 0, -16, 312, 1, 1, -108, -20 ) --[[ @ 0]]
	self:addElement( EMPplayer ) --[[ @ 0]]
	self.EMPplayer = EMPplayer --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HideForCodCaster",
			condition = function ( menu, element, event )
				return IsCodCaster( f1_arg1 ) and not IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_qs_playerhud", 1 )
			end
		},
		{
			stateName = "HideForSpawnSelect",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.showSpawnSelect", 1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local25 = self --[[ @ 0]]
	local f1_local26 = self.subscribeToModel --[[ @ 0]]
	local f1_local27 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["factions.isCoDCaster"], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27.profileSettingsUpdated, function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["hudItems.showSpawnSelect"], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "hudItems.showSpawnSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WZTeamList.id = "WZTeamList" --[[ @ 0]]
	PlayerWidgetContainer.id = "PlayerWidgetContainer" --[[ @ 0]]
	AmmoWidgetContainer.id = "AmmoWidgetContainer" --[[ @ 0]]
	ObituaryCallout.id = "ObituaryCallout" --[[ @ 0]]
	HorizontalCompass.id = "HorizontalCompass" --[[ @ 0]]
	WarzoneKillerIdentity.id = "WarzoneKillerIdentity" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.__resetProperties = function ( f24_arg0 )
	f24_arg0.AmmoWidgetContainer:completeAnimation() --[[ @ 0]]
	f24_arg0.PlayerWidgetContainer:completeAnimation() --[[ @ 0]]
	f24_arg0.DeathCamContainer:completeAnimation() --[[ @ 0]]
	f24_arg0.AmmoWidgetContainer:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.PlayerWidgetContainer:setLeftRight( 0, 0, -14, 576 ) --[[ @ 0]]
	f24_arg0.PlayerWidgetContainer:setTopBottom( 1, 1, -145.5, 40.5 ) --[[ @ 0]]
	f24_arg0.PlayerWidgetContainer:setAlpha( 1 ) --[[ @ 0]]
	f24_arg0.DeathCamContainer:setLeftRight( 0.5, 0.5, -300, 300 ) --[[ @ 0]]
	f24_arg0.DeathCamContainer:setTopBottom( 0.85, 0.85, -187.5, 112.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HideForCodCaster = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f26_arg0.AmmoWidgetContainer:completeAnimation() --[[ @ 0]]
			f26_arg0.AmmoWidgetContainer:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.AmmoWidgetContainer ) --[[ @ 0]]
		end
	},
	HideForSpawnSelect = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f27_arg0.PlayerWidgetContainer:completeAnimation() --[[ @ 0]]
			f27_arg0.PlayerWidgetContainer:setLeftRight( 0, 0, 31, 628 ) --[[ @ 0]]
			f27_arg0.PlayerWidgetContainer:setTopBottom( 1, 1, -127.6, 58.4 ) --[[ @ 0]]
			f27_arg0.PlayerWidgetContainer:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.PlayerWidgetContainer ) --[[ @ 0]]
			f27_arg0.AmmoWidgetContainer:completeAnimation() --[[ @ 0]]
			f27_arg0.AmmoWidgetContainer:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.AmmoWidgetContainer ) --[[ @ 0]]
			f27_arg0.DeathCamContainer:completeAnimation() --[[ @ 0]]
			f27_arg0.DeathCamContainer:setLeftRight( 0.5, 0.5, -251, 349 ) --[[ @ 0]]
			f27_arg0.DeathCamContainer:setTopBottom( 0.85, 0.85, -117.31, 182.69 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.DeathCamContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Back.__onClose = function ( f28_arg0 )
	f28_arg0.InventoryVignette:close() --[[ @ 0]]
	f28_arg0.WZTeamList:close() --[[ @ 0]]
	f28_arg0.PlayerWidgetContainer:close() --[[ @ 0]]
	f28_arg0.InventoryLine:close() --[[ @ 0]]
	f28_arg0.AmmoWidgetContainer:close() --[[ @ 0]]
	f28_arg0.EMPWeaponInfo:close() --[[ @ 0]]
	f28_arg0.MPHardcoreInventoryWidget:close() --[[ @ 0]]
	f28_arg0.DeployableNotifications:close() --[[ @ 0]]
	f28_arg0.WaypointCloseMessage:close() --[[ @ 0]]
	f28_arg0.GameUpdateNotification:close() --[[ @ 0]]
	f28_arg0.ObituaryCallout:close() --[[ @ 0]]
	f28_arg0.KillcamCompass:close() --[[ @ 0]]
	f28_arg0.DeathCamContainer:close() --[[ @ 0]]
	f28_arg0.Console:close() --[[ @ 0]]
	f28_arg0.WZCollapseTimer:close() --[[ @ 0]]
	f28_arg0.WarzoneWingsuitOverlay:close() --[[ @ 0]]
	f28_arg0.HorizontalCompass:close() --[[ @ 0]]
	f28_arg0.UseTimer:close() --[[ @ 0]]
	f28_arg0.FallMeter:close() --[[ @ 0]]
	f28_arg0.KilledBy:close() --[[ @ 0]]
	f28_arg0.WarzoneKillerIdentity:close() --[[ @ 0]]
	f28_arg0.WZReinsertionPassengerCount:close() --[[ @ 0]]
	f28_arg0.EMPcompass:close() --[[ @ 0]]
	f28_arg0.EMPplayer:close() --[[ @ 0]]
end
 --[[ @ 0]]
