-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:54b31e839f22a9f3" ) --[[ @ 0]]
require( "x64:31bbde4283bb35f8" ) --[[ @ 0]]
require( "x64:12d64ca9d3c705ce" ) --[[ @ 0]]
require( "x64:6131b51676141877" ) --[[ @ 0]]
require( "x64:617d3422e33a0d58" ) --[[ @ 0]]
require( "x64:1ea788cab9c8c2f2" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorselectbutton" ) --[[ @ 0]]
require( "x64:772675e4fd5488ad" ) --[[ @ 0]]
require( "x64:1b4ca9804aae519a" ) --[[ @ 0]]
require( "x64:224e2d03e4415acb" ) --[[ @ 0]]
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "x64:71f331b3b9d7ec0d" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/bnetstore/pc_bnetstore_purchasebutton" ) --[[ @ 0]]
require( "x64:300d5a6dd418ced5" ) --[[ @ 0]]

CoD.directorSelect = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorSelect.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorSelect.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorSelect.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.directorSelect ) --[[ @ 0]]
	self.id = "directorSelect" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local BackgroundImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BackgroundImage:setAlpha( 0.85 ) --[[ @ 0]]
	BackgroundImage:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BackgroundImage ) --[[ @ 0]]
	self.BackgroundImage = BackgroundImage --[[ @ 0]]
	
	local FramingCornerBrackets = CoD.CommonCornerBrackets01.new( f1_arg0, f1_arg1, 0.5, 0.5, -516.5, 516.5, 0, 0, 222, 796 ) --[[ @ 0]]
	FramingCornerBrackets:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( FramingCornerBrackets ) --[[ @ 0]]
	self.FramingCornerBrackets = FramingCornerBrackets --[[ @ 0]]
	
	local DotLineBottom = LUI.UIImage.new( 0.5, 0.5, -474.5, 474.5, 0, 0, 777, 781 ) --[[ @ 0]]
	DotLineBottom:setAlpha( 0.4 ) --[[ @ 0]]
	DotLineBottom:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline" ) ) --[[ @ 0]]
	DotLineBottom:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	DotLineBottom:setShaderVector( 0, 1.2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( DotLineBottom ) --[[ @ 0]]
	self.DotLineBottom = DotLineBottom --[[ @ 0]]
	
	local DotLineTop = LUI.UIImage.new( 0.5, 0.5, -474.5, 474.5, 0, 0, 238, 242 ) --[[ @ 0]]
	DotLineTop:setAlpha( 0.4 ) --[[ @ 0]]
	DotLineTop:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline" ) ) --[[ @ 0]]
	DotLineTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	DotLineTop:setShaderVector( 0, 1.2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( DotLineTop ) --[[ @ 0]]
	self.DotLineTop = DotLineTop --[[ @ 0]]
	
	local f1_local6 = nil --[[ @ 0]]
	self.Header = LUI.UIElement.createFake() --[[ @ 0]]
	local HeaderPC = nil --[[ @ 0]]
	
	HeaderPC = CoD.DirectorScreenHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -553, 81, 0.5, 0.5, -394, -297 ) --[[ @ 0]]
	HeaderPC:setAlpha( 0 ) --[[ @ 0]]
	HeaderPC:setZoom( 75 ) --[[ @ 0]]
	HeaderPC.Header:setText( LocalizeToUpperString( @"menu/local" ) ) --[[ @ 0]]
	self:addElement( HeaderPC ) --[[ @ 0]]
	self.HeaderPC = HeaderPC --[[ @ 0]]
	
	local DirectorLeaderActivitySelect = CoD.DirectorLeaderActivitySelect.new( f1_arg0, f1_arg1, 0.5, 0.5, -622.5, -322.5, 1, 1, -197, -147 ) --[[ @ 0]]
	DirectorLeaderActivitySelect:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( DirectorLeaderActivitySelect ) --[[ @ 0]]
	self.DirectorLeaderActivitySelect = DirectorLeaderActivitySelect --[[ @ 0]]
	
	local pckeyboardNavigationRedirector2 = nil --[[ @ 0]]
	
	pckeyboardNavigationRedirector2 = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0.7, 1, 0, 0, 0.27, 0.32, -35, -35 ) --[[ @ 0]]
	self:addElement( pckeyboardNavigationRedirector2 ) --[[ @ 0]]
	self.pckeyboardNavigationRedirector2 = pckeyboardNavigationRedirector2 --[[ @ 0]]
	
	local LogoBO4 = nil --[[ @ 0]]
	
	LogoBO4 = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -945, -641, 0.5, 0.5, -525, -373 ) --[[ @ 0]]
	LogoBO4:setAlpha( 0 ) --[[ @ 0]]
	LogoBO4:setScale( 0.8, 0.8 ) --[[ @ 0]]
	LogoBO4:setImage( RegisterImage( @"hash_3A921D8110F2D3BD" ) ) --[[ @ 0]]
	self:addElement( LogoBO4 ) --[[ @ 0]]
	self.LogoBO4 = LogoBO4 --[[ @ 0]]
	
	local ButtonListLeft = LUI.UIList.new( f1_arg0, f1_arg1, 15, 0, nil, false, false, false, false ) --[[ @ 0]]
	ButtonListLeft:setLeftRight( 0.5, 0.5, -725, -513 ) --[[ @ 0]]
	ButtonListLeft:setTopBottom( 0, 0, 265, 510 ) --[[ @ 0]]
	ButtonListLeft:setWidgetType( CoD.DirectorPreGameButtonLeftJustified ) --[[ @ 0]]
	ButtonListLeft:setVerticalCount( 4 ) --[[ @ 0]]
	ButtonListLeft:setSpacing( 15 ) --[[ @ 0]]
	ButtonListLeft:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ButtonListLeft:setFilter( function ( f3_arg0 )
		return f3_arg0.showOnLeft:get() == true
	end ) --[[ @ 0]]
	ButtonListLeft:setDataSource( "DirectorExtraHomeButtons" ) --[[ @ 0]]
	ButtonListLeft:linkToElementModel( ButtonListLeft, "trialLocked", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonListLeft:linkToElementModel( ButtonListLeft, "locked", true, function ( model, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ButtonFeatured = ButtonListLeft --[[ @ 0]]
	local ButtonListRight = ButtonListLeft.subscribeToModel --[[ @ 0]]
	local ButtonModes = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonListRight( ButtonFeatured, ButtonModes["lobbyRoot.lobbyNav"], function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonFeatured = ButtonListLeft --[[ @ 0]]
	ButtonListRight = ButtonListLeft.subscribeToModel --[[ @ 0]]
	ButtonModes = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonListRight( ButtonFeatured, ButtonModes["lobbyRoot.gameClient.update"], function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonFeatured = ButtonListLeft --[[ @ 0]]
	ButtonListRight = ButtonListLeft.subscribeToModel --[[ @ 0]]
	ButtonModes = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonListRight( ButtonFeatured, ButtonModes["lobbyRoot.privateClient.update"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonListLeft:linkToElementModel( ButtonListLeft, "showForAllClients", true, function ( model, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonListLeft:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		CoD.DirectorUtility.UpdateDescriptionTextFromSelectMenu( f1_arg1, element ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	ButtonListLeft:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ButtonListLeft, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) and AlwaysFalse() then
			OpenOverlay( self, "Store", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) and AlwaysFalse() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4191CDDA584B4408", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ButtonListLeft ) --[[ @ 0]]
	self.ButtonListLeft = ButtonListLeft --[[ @ 0]]
	
	ButtonListRight = LUI.UIList.new( f1_arg0, f1_arg1, 15, 0, nil, false, false, false, false ) --[[ @ 0]]
	ButtonListRight:setLeftRight( 0.5, 0.5, 500, 712 ) --[[ @ 0]]
	ButtonListRight:setTopBottom( 0, 0, 265, 510 ) --[[ @ 0]]
	ButtonListRight:setWidgetType( CoD.DirectorPreGameButtonLeftJustified ) --[[ @ 0]]
	ButtonListRight:setVerticalCount( 4 ) --[[ @ 0]]
	ButtonListRight:setSpacing( 15 ) --[[ @ 0]]
	ButtonListRight:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ButtonListRight:setFilter( function ( f14_arg0 )
		return f14_arg0.showOnLeft:get() == false
	end ) --[[ @ 0]]
	ButtonListRight:setDataSource( "DirectorExtraHomeButtons" ) --[[ @ 0]]
	ButtonListRight:linkToElementModel( ButtonListRight, "locked", true, function ( model, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonModes = ButtonListRight --[[ @ 0]]
	ButtonFeatured = ButtonListRight.subscribeToModel --[[ @ 0]]
	local SafeAreaContainer = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonFeatured( ButtonModes, SafeAreaContainer["lobbyRoot.lobbyNav"], function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonModes = ButtonListRight --[[ @ 0]]
	ButtonFeatured = ButtonListRight.subscribeToModel --[[ @ 0]]
	SafeAreaContainer = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonFeatured( ButtonModes, SafeAreaContainer["lobbyRoot.gameClient.update"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonModes = ButtonListRight --[[ @ 0]]
	ButtonFeatured = ButtonListRight.subscribeToModel --[[ @ 0]]
	SafeAreaContainer = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonFeatured( ButtonModes, SafeAreaContainer["lobbyRoot.privateClient.update"], function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonListRight:linkToElementModel( ButtonListRight, "showForAllClients", true, function ( model, f19_arg1 )
		CoD.Menu.UpdateButtonShownState( f19_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonListRight:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		CoD.DirectorUtility.UpdateDescriptionTextFromSelectMenu( f1_arg1, element ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	ButtonListRight:registerEventHandler( "gain_focus", function ( element, event )
		local f21_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f21_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f21_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f21_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ButtonListRight, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ButtonListRight ) --[[ @ 0]]
	self.ButtonListRight = ButtonListRight --[[ @ 0]]
	
	ButtonFeatured = LUI.UIList.new( f1_arg0, f1_arg1, 25, 0, nil, false, false, false, false ) --[[ @ 0]]
	ButtonFeatured:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	ButtonFeatured:setTopBottom( 0, 0, 265, 659 ) --[[ @ 0]]
	ButtonFeatured:setWidgetType( CoD.DirectorSelectButton ) --[[ @ 0]]
	ButtonFeatured:setHorizontalCount( 3 ) --[[ @ 0]]
	ButtonFeatured:setSpacing( 25 ) --[[ @ 0]]
	ButtonFeatured:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ButtonFeatured:setStaggeredIntroTime( 100 ) --[[ @ 0]]
	ButtonFeatured:setDataSource( "DirectorFeaturedButtons" ) --[[ @ 0]]
	ButtonFeatured:linkToElementModel( ButtonFeatured, "trialLocked", true, function ( model, f24_arg1 )
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SafeAreaContainer = ButtonFeatured --[[ @ 0]]
	ButtonModes = ButtonFeatured.subscribeToModel --[[ @ 0]]
	local IGRPerksDirectorButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonModes( SafeAreaContainer, IGRPerksDirectorButton["lobbyRoot.lobbyNav"], function ( f25_arg0, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SafeAreaContainer = ButtonFeatured --[[ @ 0]]
	ButtonModes = ButtonFeatured.subscribeToModel --[[ @ 0]]
	IGRPerksDirectorButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonModes( SafeAreaContainer, IGRPerksDirectorButton["lobbyRoot.gameClient.update"], function ( f26_arg0, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SafeAreaContainer = ButtonFeatured --[[ @ 0]]
	ButtonModes = ButtonFeatured.subscribeToModel --[[ @ 0]]
	IGRPerksDirectorButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ButtonModes( SafeAreaContainer, IGRPerksDirectorButton["lobbyRoot.privateClient.update"], function ( f27_arg0, f27_arg1 )
		CoD.Menu.UpdateButtonShownState( f27_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonFeatured:linkToElementModel( ButtonFeatured, "showForAllClients", true, function ( model, f28_arg1 )
		CoD.Menu.UpdateButtonShownState( f28_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonFeatured:linkToElementModel( ButtonFeatured, "locked", true, function ( model, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonFeatured:linkToElementModel( ButtonFeatured, "lockState", true, function ( model, f30_arg1 )
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonFeatured:linkToElementModel( ButtonFeatured, "mode", true, function ( model, f31_arg1 )
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonFeatured:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f32_local0 = nil --[[ @ 0]]
		CoD.DirectorUtility.UpdateDescriptionTextFromSelectMenu( f1_arg1, element ) --[[ @ 0]]
		CoD.BlackMarketUtility.ShowTierSkipNotification( f1_arg1, element, f1_arg0 ) --[[ @ 0]]
		return f32_local0
	end ) --[[ @ 0]]
	ButtonFeatured:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f33_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.HideTierSkipNotification( f1_arg1, element, f1_arg0 ) --[[ @ 0]]
		return f33_local0
	end ) --[[ @ 0]]
	ButtonFeatured:registerEventHandler( "gain_focus", function ( element, event )
		local f34_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f34_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f34_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f34_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ButtonFeatured, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			OpenOverlay( self, "Store", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_featured_playlist" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"pls_required_dlc_not_available"] ) then
			OpenSystemOverlay( self, menu, controller, "DownloadDLC", {
				_model = element:getModel()
			} ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"hash_4BDEB566326AC98"] ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "mode", Enum[@"lobbymainmode"][@"lobby_mainmode_zm"] ) then
			CoD.StoreUtility.OpenStoreToDLCPack( self, element, controller, "DirectorSelect", menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"hash_4BDEB566326AC98"] ) then
			OpenSystemOverlay( self, menu, controller, "SeasonPassUpsell", {
				_model = element:getModel(),
				_description = @"hash_475EE3FCE54AF260"
			} ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowForAllClients( element, controller ) and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			ProcessListLockedAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4191CDDA584B4408", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"pls_required_dlc_not_available"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"hash_4BDEB566326AC98"] ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "mode", Enum[@"lobbymainmode"][@"lobby_mainmode_zm"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lockState", Enum[@"playlistlockstate"][@"hash_4BDEB566326AC98"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowForAllClients( element, controller ) and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ButtonFeatured ) --[[ @ 0]]
	self.ButtonFeatured = ButtonFeatured --[[ @ 0]]
	
	ButtonModes = LUI.UIList.new( f1_arg0, f1_arg1, 25, 0, nil, false, false, false, false ) --[[ @ 0]]
	ButtonModes:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	ButtonModes:setTopBottom( 0, 0, 684, 754 ) --[[ @ 0]]
	ButtonModes:setWidgetType( CoD.DirectorSelectButtonGameType ) --[[ @ 0]]
	ButtonModes:setHorizontalCount( 3 ) --[[ @ 0]]
	ButtonModes:setSpacing( 25 ) --[[ @ 0]]
	ButtonModes:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ButtonModes:setDataSource( "DirectorPlayButtons" ) --[[ @ 0]]
	ButtonModes:linkToElementModel( ButtonModes, "trialLocked", true, function ( model, f37_arg1 )
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonModes:linkToElementModel( ButtonModes, "locked", true, function ( model, f38_arg1 )
		CoD.Menu.UpdateButtonShownState( f38_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	IGRPerksDirectorButton = ButtonModes --[[ @ 0]]
	SafeAreaContainer = ButtonModes.subscribeToModel --[[ @ 0]]
	local selectionDescription = Engine[@"getglobalmodel"]() --[[ @ 0]]
	SafeAreaContainer( IGRPerksDirectorButton, selectionDescription["lobbyRoot.lobbyNav"], function ( f39_arg0, f39_arg1 )
		CoD.Menu.UpdateButtonShownState( f39_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	IGRPerksDirectorButton = ButtonModes --[[ @ 0]]
	SafeAreaContainer = ButtonModes.subscribeToModel --[[ @ 0]]
	selectionDescription = Engine[@"getglobalmodel"]() --[[ @ 0]]
	SafeAreaContainer( IGRPerksDirectorButton, selectionDescription["lobbyRoot.gameClient.update"], function ( f40_arg0, f40_arg1 )
		CoD.Menu.UpdateButtonShownState( f40_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	IGRPerksDirectorButton = ButtonModes --[[ @ 0]]
	SafeAreaContainer = ButtonModes.subscribeToModel --[[ @ 0]]
	selectionDescription = Engine[@"getglobalmodel"]() --[[ @ 0]]
	SafeAreaContainer( IGRPerksDirectorButton, selectionDescription["lobbyRoot.privateClient.update"], function ( f41_arg0, f41_arg1 )
		CoD.Menu.UpdateButtonShownState( f41_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonModes:linkToElementModel( ButtonModes, "showForAllClients", true, function ( model, f42_arg1 )
		CoD.Menu.UpdateButtonShownState( f42_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonModes:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f43_local0 = nil --[[ @ 0]]
		CoD.DirectorUtility.UpdateDescriptionTextFromSelectMenu( f1_arg1, element ) --[[ @ 0]]
		CoD.BlackMarketUtility.ShowTierSkipNotification( f1_arg1, element, f1_arg0 ) --[[ @ 0]]
		return f43_local0
	end ) --[[ @ 0]]
	ButtonModes:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f44_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.HideTierSkipNotification( f1_arg1, element, f1_arg0 ) --[[ @ 0]]
		return f44_local0
	end ) --[[ @ 0]]
	ButtonModes:registerEventHandler( "gain_focus", function ( element, event )
		local f45_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f45_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f45_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f45_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ButtonModes, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) and AlwaysFalse() then
			OpenOverlay( self, "Store", controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) then
			ProcessListLockedAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) and AlwaysFalse() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4191CDDA584B4408", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "locked" ) and CoD.DirectorUtility.ShowForAllClients( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ButtonModes ) --[[ @ 0]]
	self.ButtonModes = ButtonModes --[[ @ 0]]
	
	SafeAreaContainer = CoD.DirectorSelectSafeAreaContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 1080 ) --[[ @ 0]]
	SafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f48_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f48_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f48_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f48_local0 then
			f48_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f48_local0
	end ) --[[ @ 0]]
	self:addElement( SafeAreaContainer ) --[[ @ 0]]
	self.SafeAreaContainer = SafeAreaContainer --[[ @ 0]]
	
	IGRPerksDirectorButton = nil --[[ @ 0]]
	
	IGRPerksDirectorButton = CoD.IGRPerksDirectorButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 265, 985, 0.5, 0.5, 239, 303 ) --[[ @ 0]]
	IGRPerksDirectorButton:setScale( 0.9, 0.9 ) --[[ @ 0]]
	self:addElement( IGRPerksDirectorButton ) --[[ @ 0]]
	self.IGRPerksDirectorButton = IGRPerksDirectorButton --[[ @ 0]]
	
	selectionDescription = LUI.UIText.new( 0.5, 0.5, -473, 473, 0, 0, 793, 823 ) --[[ @ 0]]
	selectionDescription:setTTF( "dinnext_regular" ) --[[ @ 0]]
	selectionDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	selectionDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	selectionDescription:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "selectScreenDescription", function ( model )
		local f49_local0 = model:get() --[[ @ 0]]
		if f49_local0 ~= nil then
			selectionDescription:setText( Engine[@"hash_4F9F1239CFD921FE"]( f49_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( selectionDescription ) --[[ @ 0]]
	self.selectionDescription = selectionDescription --[[ @ 0]]
	
	local PurchaseButton2 = nil --[[ @ 0]]
	
	PurchaseButton2 = CoD.PC_BnetStore_PurchaseButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -272.5, 273.5, 0, 0, 829, 890 ) --[[ @ 0]]
	PurchaseButton2:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return HideKoreaEventButton( f1_arg1 )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	PurchaseButton2:setAlpha( 0 ) --[[ @ 0]]
	PurchaseButton2.ButtonTitle:setText( LocalizeToUpperString( @"hash_648B6358827FB817" ) ) --[[ @ 0]]
	PurchaseButton2:registerEventHandler( "gain_focus", function ( element, event )
		local f52_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f52_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f52_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f52_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PurchaseButton2, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "PC_Korea_Event_Menu", controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PurchaseButton2 ) --[[ @ 0]]
	self.PurchaseButton2 = PurchaseButton2 --[[ @ 0]]
	
	local f1_local19 = nil --[[ @ 0]]
	self.DirectorTierSkipNotification = LUI.UIElement.createFake() --[[ @ 0]]
	local DirectorTierSkipNotification2 = nil --[[ @ 0]]
	
	DirectorTierSkipNotification2 = CoD.DirectorTierSkipNotification.new( f1_arg0, f1_arg1, 0.5, 0.5, -400, 400, 0, 0, 143, 233 ) --[[ @ 0]]
	self:addElement( DirectorTierSkipNotification2 ) --[[ @ 0]]
	self.DirectorTierSkipNotification2 = DirectorTierSkipNotification2 --[[ @ 0]]
	
	local IGREventButton = nil --[[ @ 0]]
	
	IGREventButton = CoD.PC_Korea_Event_DirectorButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -225, 225, 0.5, 0.5, 293, 423 ) --[[ @ 0]]
	IGREventButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return HideKoreaEventButton( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	IGREventButton.SpecialEvent:setText( LocalizeToUpperString( @"hash_648B6358827FB817" ) ) --[[ @ 0]]
	IGREventButton.EventName:setText( LocalizeToUpperString( @"hash_47CD2396EF33FB1" ) ) --[[ @ 0]]
	IGREventButton:registerEventHandler( "gain_focus", function ( element, event )
		local f56_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f56_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f56_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f56_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( IGREventButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsKoreaProgressionSpecialEventActive( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			OpenOverlay( self, "PC_Korea_Event_Menu", controller ) --[[ @ 0]]
			return true
		elseif IsKoreaBonusXPSpecialEventActive( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.FTUEUtility.ShowFTUESequence( self, controller, "KoreaSpecialEvent" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsKoreaProgressionSpecialEventActive( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif IsKoreaBonusXPSpecialEventActive( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( IGREventButton ) --[[ @ 0]]
	self.IGREventButton = IGREventButton --[[ @ 0]]
	
	local pckeyboardNavigationRedirector = nil --[[ @ 0]]
	
	pckeyboardNavigationRedirector = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0.7, 1, 0, 0, 0.74, 0.79, -35, -35 ) --[[ @ 0]]
	self:addElement( pckeyboardNavigationRedirector ) --[[ @ 0]]
	self.pckeyboardNavigationRedirector = pckeyboardNavigationRedirector --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "OnlineOnlyDemo",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLive() and CoD.DirectorUtility.IsOnlineOnlyDemo()
			end
		},
		{
			stateName = "OnlineWithArena",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLive() and CoD.DirectorUtility.HasArena()
			end
		},
		{
			stateName = "Online",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLive()
			end
		},
		{
			stateName = "OfflineRevealEvent",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLAN() and CoD.DirectorUtility.IsOfflineOnlyDemo()
			end
		},
		{
			stateName = "OfflineWithArena",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLAN() and CoD.DirectorUtility.HasArena()
			end
		},
		{
			stateName = "Offline",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLAN()
			end
		}
	} ) --[[ @ 0]]
	local f1_local23 = self --[[ @ 0]]
	local f1_local24 = self.subscribeToModel --[[ @ 0]]
	local f1_local25 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local24( f1_local23, f1_local25["lobbyRoot.lobbyNav"], function ( f65_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f65_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f66_arg2, f66_arg3, f66_arg4 )
		if IsPC() then
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "childFocusLost", function ( element )
		CoD.DirectorUtility.UpdateDescriptionTextFromSelectMenu( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	if CoD.isPC then
		pckeyboardNavigationRedirector2.id = "pckeyboardNavigationRedirector2" --[[ @ 0]]
	end
	ButtonListLeft.id = "ButtonListLeft" --[[ @ 0]]
	ButtonListRight.id = "ButtonListRight" --[[ @ 0]]
	ButtonFeatured.id = "ButtonFeatured" --[[ @ 0]]
	ButtonModes.id = "ButtonModes" --[[ @ 0]]
	SafeAreaContainer.id = "SafeAreaContainer" --[[ @ 0]]
	if CoD.isPC then
		IGRPerksDirectorButton.id = "IGRPerksDirectorButton" --[[ @ 0]]
	end
	if CoD.isPC then
		PurchaseButton2.id = "PurchaseButton2" --[[ @ 0]]
	end
	if CoD.isPC then
		IGREventButton.id = "IGREventButton" --[[ @ 0]]
	end
	if CoD.isPC then
		pckeyboardNavigationRedirector.id = "pckeyboardNavigationRedirector" --[[ @ 0]]
	end
	self.__defaultFocus = ButtonFeatured --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local24 = self --[[ @ 0]]
	CoD.BaseUtility.SetUpPassCustomFunctionToChild( self, self.SafeAreaContainer, f1_arg1, f1_arg0, "_activateFeaturedWidget" ) --[[ @ 0]]
	CoD.CraftUtility.ValidateEquippedUGC( f1_arg1 ) --[[ @ 0]]
	CoD.WZUtility.PlayWZTrialVideo( f1_arg0, f1_arg1 ) --[[ @ 0]]
	f1_local24 = pckeyboardNavigationRedirector2 --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetAsRedirectItem( f1_local24 ) --[[ @ 0]]
		CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.down, f1_local24, self.Loadouts ) --[[ @ 0]]
	end
	f1_local24 = pckeyboardNavigationRedirector --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetAsRedirectItem( f1_local24 ) --[[ @ 0]]
		CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local24, self.Loadouts ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.directorSelect.__resetProperties = function ( f68_arg0 )
	f68_arg0.Header:completeAnimation() --[[ @ 0]]
	f68_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
	f68_arg0.ButtonFeatured:completeAnimation() --[[ @ 0]]
	f68_arg0.ButtonModes:completeAnimation() --[[ @ 0]]
	f68_arg0.FramingCornerBrackets:completeAnimation() --[[ @ 0]]
	f68_arg0.ButtonListRight:completeAnimation() --[[ @ 0]]
	f68_arg0.ButtonListLeft:completeAnimation() --[[ @ 0]]
	f68_arg0.DotLineTop:completeAnimation() --[[ @ 0]]
	f68_arg0.DotLineBottom:completeAnimation() --[[ @ 0]]
	f68_arg0.Header:setLeftRight( 0, 0, 407, 1050 ) --[[ @ 0]]
	f68_arg0.Header:setTopBottom( 0, 0, 146, 246 ) --[[ @ 0]]
	f68_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
	f68_arg0.HeaderPC:setLeftRight( 0.5, 0.5, -553, 81 ) --[[ @ 0]]
	f68_arg0.HeaderPC:setAlpha( 0 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setAutoScaleContent( false ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setWidgetType( CoD.DirectorSelectButton ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setHorizontalCount( 3 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setVerticalCount( 1 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setSpacing( 25 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setFirstElementXOffset( 0 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setFirstElementYOffset( 0 ) --[[ @ 0]]
	f68_arg0.ButtonFeatured:setBalanceGridRows( false ) --[[ @ 0]]
	f68_arg0.ButtonModes:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setAutoScaleContent( false ) --[[ @ 0]]
	f68_arg0.ButtonModes:setWidgetType( CoD.DirectorSelectButtonGameType ) --[[ @ 0]]
	f68_arg0.ButtonModes:setHorizontalCount( 3 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setVerticalCount( 1 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setSpacing( 25 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setFirstElementXOffset( 0 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setFirstElementYOffset( 0 ) --[[ @ 0]]
	f68_arg0.ButtonModes:setBalanceGridRows( false ) --[[ @ 0]]
	f68_arg0.FramingCornerBrackets:setLeftRight( 0.5, 0.5, -516.5, 516.5 ) --[[ @ 0]]
	f68_arg0.FramingCornerBrackets:setTopBottom( 0, 0, 222, 796 ) --[[ @ 0]]
	f68_arg0.ButtonListRight:setLeftRight( 0.5, 0.5, 500, 712 ) --[[ @ 0]]
	f68_arg0.ButtonListRight:setTopBottom( 0, 0, 265, 510 ) --[[ @ 0]]
	f68_arg0.ButtonListLeft:setLeftRight( 0.5, 0.5, -725, -513 ) --[[ @ 0]]
	f68_arg0.DotLineTop:setLeftRight( 0.5, 0.5, -474.5, 474.5 ) --[[ @ 0]]
	f68_arg0.DotLineBottom:setLeftRight( 0.5, 0.5, -474.5, 474.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.directorSelect.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f69_arg0, f69_arg1 )
			f69_arg0:__resetProperties() --[[ @ 0]]
			f69_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	OnlineOnlyDemo = {
		DefaultClip = function ( f70_arg0, f70_arg1 )
			f70_arg0:__resetProperties() --[[ @ 0]]
			f70_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f70_arg0.Header:completeAnimation() --[[ @ 0]]
			f70_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.Header ) --[[ @ 0]]
			f70_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f70_arg0.HeaderPC:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.HeaderPC ) --[[ @ 0]]
		end
	},
	OnlineWithArena = {
		DefaultClip = function ( f71_arg0, f71_arg1 )
			f71_arg0:__resetProperties() --[[ @ 0]]
			f71_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f71_arg0.FramingCornerBrackets:completeAnimation() --[[ @ 0]]
			f71_arg0.FramingCornerBrackets:setLeftRight( 0.5, 0.5, -691.5, 689.5 ) --[[ @ 0]]
			f71_arg0.FramingCornerBrackets:setTopBottom( 0, 0, 224, 796 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.FramingCornerBrackets ) --[[ @ 0]]
			f71_arg0.DotLineBottom:completeAnimation() --[[ @ 0]]
			f71_arg0.DotLineBottom:setLeftRight( 0.5, 0.5, -638, 638 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.DotLineBottom ) --[[ @ 0]]
			f71_arg0.DotLineTop:completeAnimation() --[[ @ 0]]
			f71_arg0.DotLineTop:setLeftRight( 0.5, 0.5, -638, 638 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.DotLineTop ) --[[ @ 0]]
			f71_arg0.Header:completeAnimation() --[[ @ 0]]
			f71_arg0.Header:setLeftRight( 0, 0, 186, 829 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.Header ) --[[ @ 0]]
			f71_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f71_arg0.HeaderPC:setLeftRight( 0.5, 0.5, -765, -131 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.HeaderPC ) --[[ @ 0]]
			f71_arg0.ButtonListLeft:completeAnimation() --[[ @ 0]]
			f71_arg0.ButtonListLeft:setLeftRight( 0.5, 0.5, -887, -675 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ButtonListLeft ) --[[ @ 0]]
			f71_arg0.ButtonListRight:completeAnimation() --[[ @ 0]]
			f71_arg0.ButtonListRight:setLeftRight( 0.5, 0.5, 674, 886 ) --[[ @ 0]]
			f71_arg0.ButtonListRight:setTopBottom( 0, 0, 265, 510 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ButtonListRight ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:completeAnimation() --[[ @ 0]]
			f71_arg0.ButtonFeatured:setLeftRight( 0.5, 0.5, -637.5, 637.5 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setAutoScaleContent( false ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setWidgetType( CoD.DirectorSelectButton ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setHorizontalCount( 4 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setVerticalCount( 1 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setSpacing( 25 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setFirstElementXOffset( 0 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setFirstElementYOffset( 0 ) --[[ @ 0]]
			f71_arg0.ButtonFeatured:setBalanceGridRows( false ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ButtonFeatured ) --[[ @ 0]]
			f71_arg0.ButtonModes:completeAnimation() --[[ @ 0]]
			f71_arg0.ButtonModes:setLeftRight( 0.5, 0.5, -637.5, 637.5 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setAutoScaleContent( false ) --[[ @ 0]]
			f71_arg0.ButtonModes:setWidgetType( CoD.DirectorSelectButtonGameType ) --[[ @ 0]]
			f71_arg0.ButtonModes:setHorizontalCount( 4 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setVerticalCount( 1 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setSpacing( 25 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setFirstElementXOffset( 0 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setFirstElementYOffset( 0 ) --[[ @ 0]]
			f71_arg0.ButtonModes:setBalanceGridRows( false ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ButtonModes ) --[[ @ 0]]
		end
	},
	Online = {
		DefaultClip = function ( f72_arg0, f72_arg1 )
			f72_arg0:__resetProperties() --[[ @ 0]]
			f72_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f72_arg0.Header:completeAnimation() --[[ @ 0]]
			f72_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.Header ) --[[ @ 0]]
			f72_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f72_arg0.HeaderPC:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.HeaderPC ) --[[ @ 0]]
			f72_arg0.ButtonFeatured:completeAnimation() --[[ @ 0]]
			f72_arg0.ButtonFeatured:setAlpha( 1 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ButtonFeatured ) --[[ @ 0]]
		end
	},
	OfflineRevealEvent = {
		DefaultClip = function ( f73_arg0, f73_arg1 )
			f73_arg0:__resetProperties() --[[ @ 0]]
			f73_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f73_arg0.Header:completeAnimation() --[[ @ 0]]
			f73_arg0.Header:setLeftRight( 0, 0, 360, 1003 ) --[[ @ 0]]
			f73_arg0.Header:setTopBottom( 0, 0, 183, 283 ) --[[ @ 0]]
			f73_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.Header ) --[[ @ 0]]
			f73_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f73_arg0.HeaderPC:setAlpha( 1 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.HeaderPC ) --[[ @ 0]]
		end
	},
	OfflineWithArena = {
		DefaultClip = function ( f74_arg0, f74_arg1 )
			f74_arg0:__resetProperties() --[[ @ 0]]
			f74_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f74_arg0.FramingCornerBrackets:completeAnimation() --[[ @ 0]]
			f74_arg0.FramingCornerBrackets:setLeftRight( 0.5, 0.5, -691.5, 689.5 ) --[[ @ 0]]
			f74_arg0.FramingCornerBrackets:setTopBottom( 0, 0, 224, 796 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.FramingCornerBrackets ) --[[ @ 0]]
			f74_arg0.DotLineBottom:completeAnimation() --[[ @ 0]]
			f74_arg0.DotLineBottom:setLeftRight( 0.5, 0.5, -637.5, 610.5 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.DotLineBottom ) --[[ @ 0]]
			f74_arg0.DotLineTop:completeAnimation() --[[ @ 0]]
			f74_arg0.DotLineTop:setLeftRight( 0.5, 0.5, -637, 637 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.DotLineTop ) --[[ @ 0]]
			f74_arg0.Header:completeAnimation() --[[ @ 0]]
			f74_arg0.Header:setLeftRight( 0, 0, 186, 829 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.Header ) --[[ @ 0]]
			f74_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f74_arg0.HeaderPC:setLeftRight( 0.5, 0.5, -765, -131 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.HeaderPC ) --[[ @ 0]]
			f74_arg0.ButtonListLeft:completeAnimation() --[[ @ 0]]
			f74_arg0.ButtonListLeft:setLeftRight( 0.5, 0.5, -887, -675 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ButtonListLeft ) --[[ @ 0]]
			f74_arg0.ButtonListRight:completeAnimation() --[[ @ 0]]
			f74_arg0.ButtonListRight:setLeftRight( 0.5, 0.5, 674, 886 ) --[[ @ 0]]
			f74_arg0.ButtonListRight:setTopBottom( 0, 0, 265, 510 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ButtonListRight ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:completeAnimation() --[[ @ 0]]
			f74_arg0.ButtonFeatured:setLeftRight( 0.5, 0.5, -637.5, 637.5 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setAutoScaleContent( false ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setWidgetType( CoD.DirectorSelectButton ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setHorizontalCount( 4 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setVerticalCount( 1 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setSpacing( 25 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setFirstElementXOffset( 0 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setFirstElementYOffset( 0 ) --[[ @ 0]]
			f74_arg0.ButtonFeatured:setBalanceGridRows( false ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ButtonFeatured ) --[[ @ 0]]
			f74_arg0.ButtonModes:completeAnimation() --[[ @ 0]]
			f74_arg0.ButtonModes:setLeftRight( 0.5, 0.5, -637.5, 637.5 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setAutoScaleContent( false ) --[[ @ 0]]
			f74_arg0.ButtonModes:setWidgetType( CoD.DirectorSelectButtonGameType ) --[[ @ 0]]
			f74_arg0.ButtonModes:setHorizontalCount( 4 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setVerticalCount( 1 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setSpacing( 25 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setFirstElementXOffset( 0 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setFirstElementYOffset( 0 ) --[[ @ 0]]
			f74_arg0.ButtonModes:setBalanceGridRows( false ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ButtonModes ) --[[ @ 0]]
		end
	},
	Offline = {
		DefaultClip = function ( f75_arg0, f75_arg1 )
			f75_arg0:__resetProperties() --[[ @ 0]]
			f75_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f75_arg0.Header:completeAnimation() --[[ @ 0]]
			f75_arg0.Header:setLeftRight( 0, 0, 360, 1003 ) --[[ @ 0]]
			f75_arg0.Header:setTopBottom( 0, 0, 183, 283 ) --[[ @ 0]]
			f75_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
			f75_arg0.clipFinished( f75_arg0.Header ) --[[ @ 0]]
			f75_arg0.HeaderPC:completeAnimation() --[[ @ 0]]
			f75_arg0.HeaderPC:setAlpha( 1 ) --[[ @ 0]]
			f75_arg0.clipFinished( f75_arg0.HeaderPC ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.directorSelect.__onClose = function ( f76_arg0 )
	f76_arg0.FramingCornerBrackets:close() --[[ @ 0]]
	f76_arg0.Header:close() --[[ @ 0]]
	f76_arg0.HeaderPC:close() --[[ @ 0]]
	f76_arg0.DirectorLeaderActivitySelect:close() --[[ @ 0]]
	f76_arg0.pckeyboardNavigationRedirector2:close() --[[ @ 0]]
	f76_arg0.ButtonListLeft:close() --[[ @ 0]]
	f76_arg0.ButtonListRight:close() --[[ @ 0]]
	f76_arg0.ButtonFeatured:close() --[[ @ 0]]
	f76_arg0.ButtonModes:close() --[[ @ 0]]
	f76_arg0.SafeAreaContainer:close() --[[ @ 0]]
	f76_arg0.IGRPerksDirectorButton:close() --[[ @ 0]]
	f76_arg0.selectionDescription:close() --[[ @ 0]]
	f76_arg0.PurchaseButton2:close() --[[ @ 0]]
	f76_arg0.DirectorTierSkipNotification:close() --[[ @ 0]]
	f76_arg0.DirectorTierSkipNotification2:close() --[[ @ 0]]
	f76_arg0.IGREventButton:close() --[[ @ 0]]
	f76_arg0.pckeyboardNavigationRedirector:close() --[[ @ 0]]
end
 --[[ @ 0]]
