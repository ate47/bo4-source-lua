-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "ui/uieditor/widgets/common/commonwipemeterwithglow" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsmainframe" ) --[[ @ 0]]

CoD.SpecialEventTaskWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SpecialEventTaskWidget.__defaultWidth = 453 --[[ @ 0]]
CoD.SpecialEventTaskWidget.__defaultHeight = 100 --[[ @ 0]]
CoD.SpecialEventTaskWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SpecialEventTaskWidget ) --[[ @ 0]]
	self.id = "SpecialEventTaskWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local bgKill = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	bgKill:setRGB( 0.23, 0.23, 0.23 ) --[[ @ 0]]
	bgKill:setAlpha( 0.25 ) --[[ @ 0]]
	self:addElement( bgKill ) --[[ @ 0]]
	self.bgKill = bgKill --[[ @ 0]]
	
	local IconFrame = CoD.StartMenuOptionsMainFrame.new( f1_arg0, f1_arg1, 0, 0, 3.5, 85.5, 0, 0, 3, 85 ) --[[ @ 0]]
	IconFrame:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	IconFrame:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( IconFrame ) --[[ @ 0]]
	self.IconFrame = IconFrame --[[ @ 0]]
	
	local CallingIcon = LUI.UIImage.new( 0, 0, 5.5, 83.5, 0, 0, 5, 83 ) --[[ @ 0]]
	CallingIcon:linkToElementModel( self, "taskIcon", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			CallingIcon:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CallingIcon ) --[[ @ 0]]
	self.CallingIcon = CallingIcon --[[ @ 0]]
	
	local TaskName = LUI.UIText.new( 0, 0, 107, 444, 0, 0, 5, 25 ) --[[ @ 0]]
	TaskName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	TaskName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	TaskName:setLetterSpacing( 2 ) --[[ @ 0]]
	TaskName:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	TaskName:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	TaskName:linkToElementModel( self, "taskName", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			TaskName:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TaskName ) --[[ @ 0]]
	self.TaskName = TaskName --[[ @ 0]]
	
	local TaskDescription = LUI.UIText.new( 0, 0, 107, 444, 0, 0, 29, 44 ) --[[ @ 0]]
	TaskDescription:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	TaskDescription:setTTF( "dinnext_regular" ) --[[ @ 0]]
	TaskDescription:setLetterSpacing( 1 ) --[[ @ 0]]
	TaskDescription:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	TaskDescription:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	TaskDescription:linkToElementModel( self, "taskDescription", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			TaskDescription:setText( Engine[@"hash_4F9F1239CFD921FE"]( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TaskDescription ) --[[ @ 0]]
	self.TaskDescription = TaskDescription --[[ @ 0]]
	
	local TaskProgressString = LUI.UIText.new( 0, 0, 94, 448, 0, 0, 70, 85 ) --[[ @ 0]]
	TaskProgressString:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	TaskProgressString:setTTF( "dinnext_regular" ) --[[ @ 0]]
	TaskProgressString:setLetterSpacing( 1 ) --[[ @ 0]]
	TaskProgressString:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	TaskProgressString:linkToElementModel( self, "taskProgressString", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			TaskProgressString:setText( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TaskProgressString ) --[[ @ 0]]
	self.TaskProgressString = TaskProgressString --[[ @ 0]]
	
	local TaskProgress = LUI.UIImage.new( 0, 0, 1, 444, 1, 1, -10, -6 ) --[[ @ 0]]
	TaskProgress:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	TaskProgress:setAlpha( 0 ) --[[ @ 0]]
	TaskProgress:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	TaskProgress:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	TaskProgress:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	TaskProgress:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	TaskProgress:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	TaskProgress:linkToElementModel( self, "taskProgress", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			TaskProgress:setShaderVector( 0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TaskProgress ) --[[ @ 0]]
	self.TaskProgress = TaskProgress --[[ @ 0]]
	
	local LevelMeterBg = LUI.UIImage.new( 0, 1.12, -2, -54, 0.5, 0.5, 33.5, 51.5 ) --[[ @ 0]]
	LevelMeterBg:setImage( RegisterImage( @"uie_ui_menu_inspection_level_meter_bg" ) ) --[[ @ 0]]
	LevelMeterBg:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	LevelMeterBg:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LevelMeterBg ) --[[ @ 0]]
	self.LevelMeterBg = LevelMeterBg --[[ @ 0]]
	
	local CurrentXPMeter = CoD.CommonWipeMeterWithGlow.new( f1_arg0, f1_arg1, 0, 1.12, 0, -56, 0, 0, 86.5, 98.5 ) --[[ @ 0]]
	CurrentXPMeter.Meter:setRGB( 1, 0.73, 0 ) --[[ @ 0]]
	CurrentXPMeter.Meter:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	CurrentXPMeter.MeterAdd:setAlpha( 0.3 ) --[[ @ 0]]
	CurrentXPMeter.MeterAdd:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	CurrentXPMeter.MeterGlow:setRGB( 0.39, 0.18, 0 ) --[[ @ 0]]
	CurrentXPMeter.MeterGlow:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar_glow" ) ) --[[ @ 0]]
	CurrentXPMeter.MeterGlow:setShaderVector( 0, 0.25, 0, 0, 0 ) --[[ @ 0]]
	CurrentXPMeter:linkToElementModel( self, "taskProgress", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			CurrentXPMeter.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f7_local0, 1 ), CoD.GetVectorComponentFromString( f7_local0, 2 ), CoD.GetVectorComponentFromString( f7_local0, 3 ), CoD.GetVectorComponentFromString( f7_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CurrentXPMeter ) --[[ @ 0]]
	self.CurrentXPMeter = CurrentXPMeter --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "AsianLanguage",
			condition = function ( menu, element, event )
				return CoD.BaseUtility.IsCurrentLanguageAsian()
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.SpecialEventTaskWidget.__resetProperties = function ( f9_arg0 )
	f9_arg0.TaskName:completeAnimation() --[[ @ 0]]
	f9_arg0.TaskDescription:completeAnimation() --[[ @ 0]]
	f9_arg0.TaskName:setTopBottom( 0, 0, 5, 25 ) --[[ @ 0]]
	f9_arg0.TaskDescription:setTopBottom( 0, 0, 29, 44 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SpecialEventTaskWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	AsianLanguage = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.TaskName:completeAnimation() --[[ @ 0]]
			f11_arg0.TaskName:setTopBottom( 0, 0, 12, 30 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.TaskName ) --[[ @ 0]]
			f11_arg0.TaskDescription:completeAnimation() --[[ @ 0]]
			f11_arg0.TaskDescription:setTopBottom( 0, 0, 39, 51 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.TaskDescription ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.SpecialEventTaskWidget.__onClose = function ( f12_arg0 )
	f12_arg0.IconFrame:close() --[[ @ 0]]
	f12_arg0.CallingIcon:close() --[[ @ 0]]
	f12_arg0.TaskName:close() --[[ @ 0]]
	f12_arg0.TaskDescription:close() --[[ @ 0]]
	f12_arg0.TaskProgressString:close() --[[ @ 0]]
	f12_arg0.TaskProgress:close() --[[ @ 0]]
	f12_arg0.CurrentXPMeter:close() --[[ @ 0]]
end
 --[[ @ 0]]
