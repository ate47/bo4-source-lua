-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:64214f1167c44c4c" ) --[[ @ 0]]
require( "x64:1c598e2c46494586" ) --[[ @ 0]]
require( "x64:43f87e09b354d3dc" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.WeaponBribeDetails = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponBribeDetails.__defaultWidth = 600 --[[ @ 0]]
CoD.WeaponBribeDetails.__defaultHeight = 1080 --[[ @ 0]]
CoD.WeaponBribeDetails.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponBribeDetails ) --[[ @ 0]]
	self.id = "WeaponBribeDetails" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_arg0, f1_arg1, 0, 0, -4, 596, 0, 0, 0, 1080 ) --[[ @ 0]]
	XCamMouseControl:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.BlackMarketUtility.ItemUses3DPreview( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	XCamMouseControl:linkToElementModel( XCamMouseControl, "character", true, function ( model )
		f1_arg0:updateElementState( XCamMouseControl, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XCamMouseControl:linkToElementModel( XCamMouseControl, "weaponRef", true, function ( model )
		f1_arg0:updateElementState( XCamMouseControl, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	local FixedAspectRatioImage = CoD.SupplyChainDetailImage3d.new( f1_arg0, f1_arg1, 0, 0, 85, 529, 0, 0, 273, 717 ) --[[ @ 0]]
	FixedAspectRatioImage:mergeStateConditions( {
		{
			stateName = "Show3DModel",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		},
		{
			stateName = "Decal",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	FixedAspectRatioImage:linkToElementModel( self, nil, false, function ( model )
		FixedAspectRatioImage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( FixedAspectRatioImage ) --[[ @ 0]]
	self.FixedAspectRatioImage = FixedAspectRatioImage --[[ @ 0]]
	
	local SetBonusWidget = CoD.SupplyChainDetails_InfoPanel.new( f1_arg0, f1_arg1, 0, 0, 30, 588, 0, 0, 794, 1040 ) --[[ @ 0]]
	SetBonusWidget:linkToElementModel( self, nil, false, function ( model )
		SetBonusWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SetBonusWidget ) --[[ @ 0]]
	self.SetBonusWidget = SetBonusWidget --[[ @ 0]]
	
	local WeaponBribeAcquiredCheck = CoD.WeaponBribeAcquiredCheck.new( f1_arg0, f1_arg1, 0, 0, 502, 566, 0, 0, 949, 1013 ) --[[ @ 0]]
	WeaponBribeAcquiredCheck:linkToElementModel( self, nil, false, function ( model )
		WeaponBribeAcquiredCheck:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WeaponBribeAcquiredCheck ) --[[ @ 0]]
	self.WeaponBribeAcquiredCheck = WeaponBribeAcquiredCheck --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" )
			end
		},
		{
			stateName = "NoInfoPanel",
			condition = function ( menu, element, event )
				return not IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "Show3DModelMouseOrKB",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and CoD.BlackMarketUtility.ItemUses3DPreview( element, f1_arg1 )
			end
		},
		{
			stateName = "Show3DModel",
			condition = function ( menu, element, event )
				return CoD.BlackMarketUtility.ItemUses3DPreview( element, f1_arg1 )
			end
		},
		{
			stateName = "DefaultStateMouseOrKB",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "name", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "name"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "character", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "weaponRef", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WeaponBribeDetails.__resetProperties = function ( f20_arg0 )
	f20_arg0.XCamMouseControl:completeAnimation() --[[ @ 0]]
	f20_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
	f20_arg0.SetBonusWidget:completeAnimation() --[[ @ 0]]
	f20_arg0.XCamMouseControl:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.FixedAspectRatioImage:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.SetBonusWidget:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WeaponBribeDetails.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f21_arg0.XCamMouseControl:completeAnimation() --[[ @ 0]]
			f21_arg0.XCamMouseControl:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.XCamMouseControl ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
			f22_arg0.FixedAspectRatioImage:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.FixedAspectRatioImage ) --[[ @ 0]]
			f22_arg0.SetBonusWidget:completeAnimation() --[[ @ 0]]
			f22_arg0.SetBonusWidget:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.SetBonusWidget ) --[[ @ 0]]
		end
	},
	NoInfoPanel = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f23_arg0.XCamMouseControl:completeAnimation() --[[ @ 0]]
			f23_arg0.XCamMouseControl:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.XCamMouseControl ) --[[ @ 0]]
			f23_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
			f23_arg0.FixedAspectRatioImage:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.FixedAspectRatioImage ) --[[ @ 0]]
			f23_arg0.SetBonusWidget:completeAnimation() --[[ @ 0]]
			f23_arg0.SetBonusWidget:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.SetBonusWidget ) --[[ @ 0]]
		end
	},
	Show3DModelMouseOrKB = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Show3DModel = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.XCamMouseControl:completeAnimation() --[[ @ 0]]
			f25_arg0.XCamMouseControl:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.XCamMouseControl ) --[[ @ 0]]
		end
	},
	DefaultStateMouseOrKB = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WeaponBribeDetails.__onClose = function ( f27_arg0 )
	f27_arg0.XCamMouseControl:close() --[[ @ 0]]
	f27_arg0.FixedAspectRatioImage:close() --[[ @ 0]]
	f27_arg0.SetBonusWidget:close() --[[ @ 0]]
	f27_arg0.WeaponBribeAcquiredCheck:close() --[[ @ 0]]
end
 --[[ @ 0]]
