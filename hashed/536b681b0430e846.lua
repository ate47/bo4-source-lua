-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/lobby/common/fe_buttonpanel" ) --[[ @ 0]]

CoD.CancelChargeShot = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CancelChargeShot.__defaultWidth = 300 --[[ @ 0]]
CoD.CancelChargeShot.__defaultHeight = 39 --[[ @ 0]]
CoD.CancelChargeShot.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CancelChargeShot ) --[[ @ 0]]
	self.id = "CancelChargeShot" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local NotificationText = LUI.UIText.new( 0, 0, 0, 300, 0, 0, 0, 30 ) --[[ @ 0]]
	NotificationText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_103D8A0C512FDAAE" ) ) --[[ @ 0]]
	NotificationText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	NotificationText:setLetterSpacing( 1 ) --[[ @ 0]]
	NotificationText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	NotificationText:setBackingType( 1 ) --[[ @ 0]]
	NotificationText:setBackingWidget( CoD.FE_ButtonPanel, f1_arg0, f1_arg1 ) --[[ @ 0]]
	NotificationText:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	NotificationText:setBackingAlpha( 0.61 ) --[[ @ 0]]
	NotificationText:setBackingXPadding( 12 ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( NotificationText, "setText", function ( element, controller )
		ScaleWidgetToLabelCentered( self, self.text, 10 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( NotificationText ) --[[ @ 0]]
	self.NotificationText = NotificationText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "CurrentWeapon", "currentShotCharge", 0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = self --[[ @ 0]]
	local f1_local3 = self.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.currentShotCharge, function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "currentShotCharge"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CancelChargeShot.__resetProperties = function ( f5_arg0 )
	f5_arg0.NotificationText:completeAnimation() --[[ @ 0]]
	f5_arg0.NotificationText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CancelChargeShot.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f6_arg0.NotificationText:completeAnimation() --[[ @ 0]]
			f6_arg0.NotificationText:setAlpha( 0 ) --[[ @ 0]]
			f6_arg0.clipFinished( f6_arg0.NotificationText ) --[[ @ 0]]
		end,
		Visible = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f7_local0 = function ( f8_arg0 )
				local f8_local0 = function ( f9_arg0 )
					f9_arg0:beginAnimation( 200 ) --[[ @ 0]]
					f9_arg0:setAlpha( 1 ) --[[ @ 0]]
					f9_arg0:registerEventHandler( "transition_complete_keyframe", f7_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f7_arg0.NotificationText:beginAnimation( 2000 ) --[[ @ 0]]
				f7_arg0.NotificationText:registerEventHandler( "interrupted_keyframe", f7_arg0.clipInterrupted ) --[[ @ 0]]
				f7_arg0.NotificationText:registerEventHandler( "transition_complete_keyframe", f8_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f7_arg0.NotificationText:completeAnimation() --[[ @ 0]]
			f7_arg0.NotificationText:setAlpha( 0 ) --[[ @ 0]]
			f7_local0( f7_arg0.NotificationText ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.NotificationText:completeAnimation() --[[ @ 0]]
			f10_arg0.NotificationText:setAlpha( 1 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.NotificationText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
