-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:79b528a05aba52d6" ) --[[ @ 0]]
require( "x64:479a2abecba85306" ) --[[ @ 0]]
require( "x64:193604c7b6b216ac" ) --[[ @ 0]]
require( "x64:3137eb392d404a1a" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebutton" ) --[[ @ 0]]

CoD.ItemShopFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ItemShopFrame.__defaultWidth = 1920 --[[ @ 0]]
CoD.ItemShopFrame.__defaultHeight = 1080 --[[ @ 0]]
CoD.ItemShopFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ItemShopFrame ) --[[ @ 0]]
	self.id = "ItemShopFrame" --[[ @ 0]]
	self.soundSet = "ItemShop" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local WeeklyItemsTimer = CoD.ListLabel.new( f1_arg0, f1_arg1, 0.5, 0.5, -835, -593, 0.5, 0.5, -362, -312 ) --[[ @ 0]]
	WeeklyItemsTimer:subscribeToGlobalModel( f1_arg1, "ItemshopRotation", "loot_itemshop_slot1_timer", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			WeeklyItemsTimer.TextBox2:setText( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WeeklyItemsTimer ) --[[ @ 0]]
	self.WeeklyItemsTimer = WeeklyItemsTimer --[[ @ 0]]
	
	local WeeklyItems = LUI.UIList.new( f1_arg0, f1_arg1, 30, 0, nil, false, false, false, false ) --[[ @ 0]]
	WeeklyItems:setLeftRight( 0.5, 0.5, -834, -594 ) --[[ @ 0]]
	WeeklyItems:setTopBottom( 0.5, 0.5, -319, 191 ) --[[ @ 0]]
	WeeklyItems:setWidgetType( CoD.PurchaseableItem ) --[[ @ 0]]
	WeeklyItems:setVerticalCount( 2 ) --[[ @ 0]]
	WeeklyItems:setSpacing( 30 ) --[[ @ 0]]
	WeeklyItems:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	WeeklyItems:setDataSource( "ItemShopFeaturedList" ) --[[ @ 0]]
	WeeklyItems:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	WeeklyItems:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	WeeklyItems:registerEventHandler( "occlusion_change", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f5_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f5_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", false ) then
			CoD.BlackMarketUtility.TriggerItemShopRevealAnimation( f1_arg1, element ) --[[ @ 0]]
		end
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	WeeklyItems:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeeklyItems, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "ItemShopDetails", controller, {
			_model = element:getModel()
		} ) --[[ @ 0]]
		SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	WeeklyItems:subscribeToGlobalModel( f1_arg1, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		local f9_local0 = WeeklyItems --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) then
			CoD.GridAndListUtility.UpdateDataSource( f9_local0, true, true, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WeeklyItems ) --[[ @ 0]]
	self.WeeklyItems = WeeklyItems --[[ @ 0]]
	
	local WeeklyItemsBracket = LUI.UIImage.new( 0.5, 0.5, -841, -586, 0.5, 0.5, -364, -356 ) --[[ @ 0]]
	WeeklyItemsBracket:setRGB( 0.98, 1, 0.89 ) --[[ @ 0]]
	WeeklyItemsBracket:setAlpha( 0.35 ) --[[ @ 0]]
	WeeklyItemsBracket:setZRot( 180 ) --[[ @ 0]]
	WeeklyItemsBracket:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	WeeklyItemsBracket:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	WeeklyItemsBracket:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	WeeklyItemsBracket:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( WeeklyItemsBracket ) --[[ @ 0]]
	self.WeeklyItemsBracket = WeeklyItemsBracket --[[ @ 0]]
	
	local WeeklyItemsLabel = LUI.UIText.new( 0.5, 0.5, -835, -595, 0.5, 0.5, -388, -370 ) --[[ @ 0]]
	WeeklyItemsLabel:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	WeeklyItemsLabel:setText( LocalizeToUpperString( @"hash_75F57FAD08B3728F" ) ) --[[ @ 0]]
	WeeklyItemsLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	WeeklyItemsLabel:setLetterSpacing( 4 ) --[[ @ 0]]
	WeeklyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	WeeklyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( WeeklyItemsLabel ) --[[ @ 0]]
	self.WeeklyItemsLabel = WeeklyItemsLabel --[[ @ 0]]
	
	local BiweeklyItemsTimer = CoD.ListLabel.new( f1_arg0, f1_arg1, 0.5, 0.5, -546, -34, 0.5, 0.5, -362, -312 ) --[[ @ 0]]
	BiweeklyItemsTimer:subscribeToGlobalModel( f1_arg1, "ItemshopRotation", "loot_itemshop_slot2_timer", function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			BiweeklyItemsTimer.TextBox2:setText( f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BiweeklyItemsTimer ) --[[ @ 0]]
	self.BiweeklyItemsTimer = BiweeklyItemsTimer --[[ @ 0]]
	
	local ByweeklyFeatureItems = LUI.UIList.new( f1_arg0, f1_arg1, 30, 0, nil, false, false, false, false ) --[[ @ 0]]
	ByweeklyFeatureItems:setLeftRight( 0.5, 0.5, -545, -305 ) --[[ @ 0]]
	ByweeklyFeatureItems:setTopBottom( 0.5, 0.5, -319, 191 ) --[[ @ 0]]
	ByweeklyFeatureItems:setWidgetType( CoD.PurchaseableItem ) --[[ @ 0]]
	ByweeklyFeatureItems:setVerticalCount( 2 ) --[[ @ 0]]
	ByweeklyFeatureItems:setSpacing( 30 ) --[[ @ 0]]
	ByweeklyFeatureItems:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ByweeklyFeatureItems:setDataSource( "ItemShopBiweeklyFeaturedList" ) --[[ @ 0]]
	ByweeklyFeatureItems:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	ByweeklyFeatureItems:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	ByweeklyFeatureItems:registerEventHandler( "occlusion_change", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f13_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f13_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", false ) then
			CoD.BlackMarketUtility.TriggerItemShopRevealAnimation( f1_arg1, element ) --[[ @ 0]]
		end
		if not f13_local0 then
			f13_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f13_local0
	end ) --[[ @ 0]]
	ByweeklyFeatureItems:registerEventHandler( "gain_focus", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f14_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f14_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f14_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ByweeklyFeatureItems, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "ItemShopDetails", controller, {
			_model = element:getModel()
		} ) --[[ @ 0]]
		SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	ByweeklyFeatureItems:subscribeToGlobalModel( f1_arg1, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		local f17_local0 = ByweeklyFeatureItems --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) then
			CoD.GridAndListUtility.UpdateDataSource( f17_local0, true, true, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ByweeklyFeatureItems ) --[[ @ 0]]
	self.ByweeklyFeatureItems = ByweeklyFeatureItems --[[ @ 0]]
	
	local ByweeklyItems = LUI.UIList.new( f1_arg0, f1_arg1, 30, 0, nil, false, false, false, false ) --[[ @ 0]]
	ByweeklyItems:setLeftRight( 0.5, 0.5, -275, -35 ) --[[ @ 0]]
	ByweeklyItems:setTopBottom( 0.5, 0.5, -319, 191 ) --[[ @ 0]]
	ByweeklyItems:setWidgetType( CoD.PurchaseableItem ) --[[ @ 0]]
	ByweeklyItems:setVerticalCount( 2 ) --[[ @ 0]]
	ByweeklyItems:setSpacing( 30 ) --[[ @ 0]]
	ByweeklyItems:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ByweeklyItems:setDataSource( "ItemShopBiweeklyList" ) --[[ @ 0]]
	ByweeklyItems:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	ByweeklyItems:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	ByweeklyItems:registerEventHandler( "occlusion_change", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f20_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f20_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", false ) then
			CoD.BlackMarketUtility.TriggerItemShopRevealAnimation( f1_arg1, element ) --[[ @ 0]]
		end
		if not f20_local0 then
			f20_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f20_local0
	end ) --[[ @ 0]]
	ByweeklyItems:registerEventHandler( "gain_focus", function ( element, event )
		local f21_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f21_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f21_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f21_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ByweeklyItems, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "ItemShopDetails", controller, {
			_model = element:getModel()
		} ) --[[ @ 0]]
		SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	ByweeklyItems:subscribeToGlobalModel( f1_arg1, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		local f24_local0 = ByweeklyItems --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) then
			CoD.GridAndListUtility.UpdateDataSource( f24_local0, true, true, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ByweeklyItems ) --[[ @ 0]]
	self.ByweeklyItems = ByweeklyItems --[[ @ 0]]
	
	local ByweeklyItemsBracket = LUI.UIImage.new( 0.5, 0.5, -552, -27, 0.5, 0.5, -364, -355 ) --[[ @ 0]]
	ByweeklyItemsBracket:setAlpha( 0.5 ) --[[ @ 0]]
	ByweeklyItemsBracket:setZRot( 180 ) --[[ @ 0]]
	ByweeklyItemsBracket:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	ByweeklyItemsBracket:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	ByweeklyItemsBracket:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	ByweeklyItemsBracket:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( ByweeklyItemsBracket ) --[[ @ 0]]
	self.ByweeklyItemsBracket = ByweeklyItemsBracket --[[ @ 0]]
	
	local BiweeklyItemsLabel = LUI.UIText.new( 0.5, 0.5, -546, -34, 0.5, 0.5, -388, -370 ) --[[ @ 0]]
	BiweeklyItemsLabel:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	BiweeklyItemsLabel:setText( LocalizeToUpperString( @"hash_14A06F9DA99ECD3A" ) ) --[[ @ 0]]
	BiweeklyItemsLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	BiweeklyItemsLabel:setLetterSpacing( 4 ) --[[ @ 0]]
	BiweeklyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	BiweeklyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	self:addElement( BiweeklyItemsLabel ) --[[ @ 0]]
	self.BiweeklyItemsLabel = BiweeklyItemsLabel --[[ @ 0]]
	
	local DailyItemsTimer = CoD.ListLabel.new( f1_arg0, f1_arg1, 0.5, 0.5, 24, 266, 0.5, 0.5, -362, -312 ) --[[ @ 0]]
	DailyItemsTimer:subscribeToGlobalModel( f1_arg1, "ItemshopRotation", "loot_itemshop_slot5_timer", function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			DailyItemsTimer.TextBox2:setText( f25_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DailyItemsTimer ) --[[ @ 0]]
	self.DailyItemsTimer = DailyItemsTimer --[[ @ 0]]
	
	local DailyItems = LUI.UIList.new( f1_arg0, f1_arg1, 30, 0, nil, false, false, false, false ) --[[ @ 0]]
	DailyItems:setLeftRight( 0.5, 0.5, 22, 262 ) --[[ @ 0]]
	DailyItems:setTopBottom( 0.5, 0.5, -319, 191 ) --[[ @ 0]]
	DailyItems:setWidgetType( CoD.PurchaseableItem ) --[[ @ 0]]
	DailyItems:setVerticalCount( 2 ) --[[ @ 0]]
	DailyItems:setSpacing( 30 ) --[[ @ 0]]
	DailyItems:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	DailyItems:setDataSource( "ItemShopList" ) --[[ @ 0]]
	DailyItems:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f26_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f26_local0
	end ) --[[ @ 0]]
	DailyItems:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f27_local0 = nil --[[ @ 0]]
		CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f27_local0
	end ) --[[ @ 0]]
	DailyItems:registerEventHandler( "occlusion_change", function ( element, event )
		local f28_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f28_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f28_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if IsEventPropertyEqualTo( event, "occluded", false ) then
			CoD.BlackMarketUtility.TriggerItemShopRevealAnimation( f1_arg1, element ) --[[ @ 0]]
		end
		if not f28_local0 then
			f28_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f28_local0
	end ) --[[ @ 0]]
	DailyItems:registerEventHandler( "gain_focus", function ( element, event )
		local f29_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f29_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f29_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f29_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DailyItems, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		OpenOverlay( self, "ItemShopDetails", controller, {
			_model = element:getModel()
		} ) --[[ @ 0]]
		SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	DailyItems:subscribeToGlobalModel( f1_arg1, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		local f32_local0 = DailyItems --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) then
			CoD.GridAndListUtility.UpdateDataSource( f32_local0, true, true, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DailyItems ) --[[ @ 0]]
	self.DailyItems = DailyItems --[[ @ 0]]
	
	local DailyItemsBracket = LUI.UIImage.new( 0.5, 0.5, -841, -586, 0.5, 0.5, -364, -355 ) --[[ @ 0]]
	DailyItemsBracket:setAlpha( 0.5 ) --[[ @ 0]]
	DailyItemsBracket:setZRot( 180 ) --[[ @ 0]]
	DailyItemsBracket:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	DailyItemsBracket:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	DailyItemsBracket:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DailyItemsBracket:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DailyItemsBracket ) --[[ @ 0]]
	self.DailyItemsBracket = DailyItemsBracket --[[ @ 0]]
	
	local DailyItemsLabel = LUI.UIText.new( 0.5, 0.5, 22, 262, 0.5, 0.5, -388, -370 ) --[[ @ 0]]
	DailyItemsLabel:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	DailyItemsLabel:setText( LocalizeToUpperString( @"menu/daily_items" ) ) --[[ @ 0]]
	DailyItemsLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	DailyItemsLabel:setLetterSpacing( 4 ) --[[ @ 0]]
	DailyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	DailyItemsLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	self:addElement( DailyItemsLabel ) --[[ @ 0]]
	self.DailyItemsLabel = DailyItemsLabel --[[ @ 0]]
	
	local TransactionDeepLinkButton = nil --[[ @ 0]]
	
	TransactionDeepLinkButton = CoD.DirectorPreGameButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -835, -605, 0, 0, 921, 991 ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleText:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleTextFocus:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton:registerEventHandler( "gain_focus", function ( element, event )
		local f33_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f33_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f33_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f33_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkBlackmarket( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkBlackmarket( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( TransactionDeepLinkButton ) --[[ @ 0]]
	self.TransactionDeepLinkButton = TransactionDeepLinkButton --[[ @ 0]]
	
	local SupplyChainDetails = CoD.ContractSupplyChainDetails.new( f1_arg0, f1_arg1, 0.5, 0.5, 310, 910, 0.5, 0.5, -619, 461 ) --[[ @ 0]]
	SupplyChainDetails:mergeStateConditions( {
		{
			stateName = "NoInfoPanel",
			condition = function ( menu, element, event )
				local f38_local0 --[[ @ 0]]
				if not IsMouseOrKeyboard( f1_arg1 ) then
					f38_local0 = AlwaysFalse() --[[ @ 0]]
				else
					f38_local0 = false --[[ @ 0]]
				end
				return f38_local0
			end
		}
	} ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "name", true, function ( model )
		f1_arg0:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "name"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SupplyChainDetails:appendEventHandler( "input_source_changed", function ( f40_arg0, f40_arg1 )
		f40_arg1.menu = f40_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( SupplyChainDetails, f40_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local16 = SupplyChainDetails --[[ @ 0]]
	local f1_local17 = SupplyChainDetails.subscribeToModel --[[ @ 0]]
	local f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.LastInput, function ( f41_arg0 )
		f1_arg0:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f41_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "character", true, function ( model )
		f1_arg0:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "weaponRef", true, function ( model )
		f1_arg0:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SupplyChainDetails ) --[[ @ 0]]
	self.SupplyChainDetails = SupplyChainDetails --[[ @ 0]]
	
	self:subscribeToGlobalModel( f1_arg1, "GlobalModel", "RefreshDWInventoryMenu", function ( model )
		local f44_local0 = self --[[ @ 0]]
		UpdateDataSource( self, self.DailyItems, f1_arg1 ) --[[ @ 0]]
		UpdateDataSource( self, self.WeeklyItems, f1_arg1 ) --[[ @ 0]]
		UpdateDataSource( self, self.ByweeklyItems, f1_arg1 ) --[[ @ 0]]
		UpdateDataSource( self, self.ByweeklyFeatureItems, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WeeklyItems.id = "WeeklyItems" --[[ @ 0]]
	ByweeklyFeatureItems.id = "ByweeklyFeatureItems" --[[ @ 0]]
	ByweeklyItems.id = "ByweeklyItems" --[[ @ 0]]
	DailyItems.id = "DailyItems" --[[ @ 0]]
	if CoD.isPC then
		TransactionDeepLinkButton.id = "TransactionDeepLinkButton" --[[ @ 0]]
	end
	if CoD.isPC then
		SupplyChainDetails.id = "SupplyChainDetails" --[[ @ 0]]
	end
	self.__defaultFocus = WeeklyItems --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local17 = self --[[ @ 0]]
	SendClientScriptMenuChangeNotifyWithState( f1_arg1, f1_arg0, true, "character" ) --[[ @ 0]]
	SetMenuProperty( f1_arg0, "__hideSupplyChainDetailsButtons", true ) --[[ @ 0]]
	f1_local17 = TransactionDeepLinkButton --[[ @ 0]]
	if IsPC() and not CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
		ReplaceElementWithFake( self, "TransactionDeepLinkButton" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ItemShopFrame.__onClose = function ( f45_arg0 )
	f45_arg0.WeeklyItemsTimer:close() --[[ @ 0]]
	f45_arg0.WeeklyItems:close() --[[ @ 0]]
	f45_arg0.BiweeklyItemsTimer:close() --[[ @ 0]]
	f45_arg0.ByweeklyFeatureItems:close() --[[ @ 0]]
	f45_arg0.ByweeklyItems:close() --[[ @ 0]]
	f45_arg0.DailyItemsTimer:close() --[[ @ 0]]
	f45_arg0.DailyItems:close() --[[ @ 0]]
	f45_arg0.TransactionDeepLinkButton:close() --[[ @ 0]]
	f45_arg0.SupplyChainDetails:close() --[[ @ 0]]
end
 --[[ @ 0]]
