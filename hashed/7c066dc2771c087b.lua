-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:5fc0f7412b0fb282" ) --[[ @ 0]]
require( "ui/uieditor/widgets/backgroundframes/genericmenuframeidentity" ) --[[ @ 0]]
require( "x64:39fb6ca8791129aa" ) --[[ @ 0]]
require( "x64:74277e6cd270f883" ) --[[ @ 0]]
require( "x64:57d7569575c0851f" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.WeaponBribeSelection = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.WeaponBribeSelection = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "WeaponBribeSelection", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BlackMarketUtility.EnableBribeMenuTick( f1_arg0, self ) --[[ @ 0]]
	self:setClass( CoD.WeaponBribeSelection ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local GenericMenuFrameIdentity = CoD.GenericMenuFrameIdentity.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_10C641379064CB7E" ) ) --[[ @ 0]]
	GenericMenuFrameIdentity:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			GenericMenuFrameIdentity.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GenericMenuFrameIdentity ) --[[ @ 0]]
	self.GenericMenuFrameIdentity = GenericMenuFrameIdentity --[[ @ 0]]
	
	local WeaponBribes = LUI.UIList.new( f1_local1, f1_arg0, 5, 0, nil, true, false, false, false ) --[[ @ 0]]
	WeaponBribes:setLeftRight( 0.5, 0.5, -864, 247 ) --[[ @ 0]]
	WeaponBribes:setTopBottom( 0.5, 0.5, -325, 325 ) --[[ @ 0]]
	WeaponBribes:setWidgetType( CoD.WeaponBribeItem ) --[[ @ 0]]
	WeaponBribes:setHorizontalCount( 4 ) --[[ @ 0]]
	WeaponBribes:setVerticalCount( 5 ) --[[ @ 0]]
	WeaponBribes:setSpacing( 5 ) --[[ @ 0]]
	WeaponBribes:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	WeaponBribes:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	WeaponBribes:setDataSource( "WeaponBribeList" ) --[[ @ 0]]
	WeaponBribes:linkToElementModel( WeaponBribes, "purchased", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local WeaponBribeSelectionTimer = WeaponBribes --[[ @ 0]]
	local SupplyChainDetails = WeaponBribes.subscribeToModel --[[ @ 0]]
	local f1_local6 = DataSources.BribeMenuTimer.getModel( f1_arg0 ) --[[ @ 0]]
	SupplyChainDetails( WeaponBribeSelectionTimer, f1_local6.cycled, function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponBribes:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_local1, f1_arg0, element ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg0, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	WeaponBribes:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( WeaponBribes, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "purchased" ) and CoD.BlackMarketUtility.WeaponBribeSelectionAvailable( controller ) then
			OpenOverlay( self, "PurchaseBribeStack", controller, {
				_model = element:getModel(),
				_properties = {
					_isWeaponBribeSelect = true
				}
			} ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "purchased" ) and CoD.BlackMarketUtility.WeaponBribeSelectionAvailable( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( WeaponBribes ) --[[ @ 0]]
	self.WeaponBribes = WeaponBribes --[[ @ 0]]
	
	SupplyChainDetails = CoD.WeaponBribeDetails.new( f1_local1, f1_arg0, 0.5, 0.5, 312, 912, 0.5, 0.5, -619, 461 ) --[[ @ 0]]
	SupplyChainDetails:mergeStateConditions( {
		{
			stateName = "NoInfoPanel",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "name", true, function ( model )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "name"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SupplyChainDetails:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( SupplyChainDetails, f11_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = SupplyChainDetails --[[ @ 0]]
	WeaponBribeSelectionTimer = SupplyChainDetails.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	WeaponBribeSelectionTimer( f1_local6, f1_local7.LastInput, function ( f12_arg0 )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f12_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "character", true, function ( model )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "weaponRef", true, function ( model )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SupplyChainDetails ) --[[ @ 0]]
	self.SupplyChainDetails = SupplyChainDetails --[[ @ 0]]
	
	WeaponBribeSelectionTimer = CoD.WeaponBribeSelectionTimer.new( f1_local1, f1_arg0, 0, 0, 96, 1207, 0, 0, 171, 204 ) --[[ @ 0]]
	self:addElement( WeaponBribeSelectionTimer ) --[[ @ 0]]
	self.WeaponBribeSelectionTimer = WeaponBribeSelectionTimer --[[ @ 0]]
	
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.BlackMarketUtility.ItemShopDetailsClientScriptMenuCloseNotify( f1_arg0, f1_local1 ) --[[ @ 0]]
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	GenericMenuFrameIdentity:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.id = "GenericMenuFrameIdentity" --[[ @ 0]]
	WeaponBribes.id = "WeaponBribes" --[[ @ 0]]
	if CoD.isPC then
		SupplyChainDetails.id = "SupplyChainDetails" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = WeaponBribes --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_local1, f1_arg0, self ) --[[ @ 0]]
	SetMenuProperty( f1_local1, "_skipSignatureWeaponStringOverride", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WeaponBribeSelection.__onClose = function ( f18_arg0 )
	f18_arg0.GenericMenuFrameIdentity:close() --[[ @ 0]]
	f18_arg0.WeaponBribes:close() --[[ @ 0]]
	f18_arg0.SupplyChainDetails:close() --[[ @ 0]]
	f18_arg0.WeaponBribeSelectionTimer:close() --[[ @ 0]]
end
 --[[ @ 0]]
