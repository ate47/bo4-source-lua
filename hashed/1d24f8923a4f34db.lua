-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:5db4b72e7fcf4b55" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commoncheckbox" ) --[[ @ 0]]
require( "ui/uieditor/widgets/systemoverlays/featureoverlay_button_mouseonly" ) --[[ @ 0]]

CoD.EntitlementPopup = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.EntitlementPopup = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "EntitlementPopup", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	if not IsPC() then
		MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		SetGlobalModelValueFalse( "EntitlementAcknowledged" ) --[[ @ 0]]
	elseif IsPC() then
		MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		SetGlobalModelValueFalse( "EntitlementAcknowledged" ) --[[ @ 0]]
		CoD.PCUtility.LockUIShortcutInput( f1_local1, f1_arg0 ) --[[ @ 0]]
	end
	self:setClass( CoD.EntitlementPopup ) --[[ @ 0]]
	self.soundSet = "MultiplayerMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local BackgroundImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BackgroundImage:setAlpha( 0.85 ) --[[ @ 0]]
	BackgroundImage:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BackgroundImage ) --[[ @ 0]]
	self.BackgroundImage = BackgroundImage --[[ @ 0]]
	
	local f1_local4 = nil --[[ @ 0]]
	f1_local4 = LUI.UIElement.createFake() --[[ @ 0]]
	self.FooterContainerFrontendRight = f1_local4 --[[ @ 0]]
	local CommonCheckbox = nil --[[ @ 0]]
	
	CommonCheckbox = CoD.CommonCheckbox.new( f1_local1, f1_arg0, 0.5, 0.5, -512, -472, 0.5, 0.5, 274, 314 ) --[[ @ 0]]
	CommonCheckbox:mergeStateConditions( {
		{
			stateName = "Checked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" )
			end
		}
	} ) --[[ @ 0]]
	local OptionDesc = CommonCheckbox --[[ @ 0]]
	local featureOverlayButtonMouseOnly = CommonCheckbox.subscribeToModel --[[ @ 0]]
	local PCDisclaimer = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	featureOverlayButtonMouseOnly( OptionDesc, PCDisclaimer.EntitlementAcknowledged, function ( f3_arg0 )
		f1_local1:updateElementState( CommonCheckbox, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f3_arg0:get(),
			modelName = "EntitlementAcknowledged"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CommonCheckbox:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( CommonCheckbox, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		ToggleGlobalModelValueBoolean( "EntitlementAcknowledged" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( CommonCheckbox ) --[[ @ 0]]
	self.CommonCheckbox = CommonCheckbox --[[ @ 0]]
	
	featureOverlayButtonMouseOnly = nil --[[ @ 0]]
	
	featureOverlayButtonMouseOnly = CoD.featureOverlay_Button_MouseOnly.new( f1_local1, f1_arg0, 0.5, 0.5, 519.5, 679.5, 0.5, 0.5, 264, 324 ) --[[ @ 0]]
	featureOverlayButtonMouseOnly:mergeStateConditions( {
		{
			stateName = "Hide",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" )
			end
		}
	} ) --[[ @ 0]]
	PCDisclaimer = featureOverlayButtonMouseOnly --[[ @ 0]]
	OptionDesc = featureOverlayButtonMouseOnly.subscribeToModel --[[ @ 0]]
	local CheckboxConfirm = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	OptionDesc( PCDisclaimer, CheckboxConfirm.EntitlementAcknowledged, function ( f8_arg0 )
		f1_local1:updateElementState( featureOverlayButtonMouseOnly, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f8_arg0:get(),
			modelName = "EntitlementAcknowledged"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	featureOverlayButtonMouseOnly.featureOverlayButtonContainer.Title:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_66393FF34EA56966" ) ) --[[ @ 0]]
	PCDisclaimer = featureOverlayButtonMouseOnly --[[ @ 0]]
	OptionDesc = featureOverlayButtonMouseOnly.subscribeToModel --[[ @ 0]]
	CheckboxConfirm = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	OptionDesc( PCDisclaimer, CheckboxConfirm.EntitlementAcknowledged, function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	featureOverlayButtonMouseOnly:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( featureOverlayButtonMouseOnly, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" ) then
			SetGlobalModelValueFalse( "EntitlementAcknowledged" ) --[[ @ 0]]
			CoD.EntitlementUtility.SetCurrentEntitlementViewed( controller ) --[[ @ 0]]
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( featureOverlayButtonMouseOnly ) --[[ @ 0]]
	self.featureOverlayButtonMouseOnly = featureOverlayButtonMouseOnly --[[ @ 0]]
	
	OptionDesc = LUI.UIText.new( 0.5, 0.5, -577.5, 577.5, 0.5, 0.5, -209, -184 ) --[[ @ 0]]
	OptionDesc:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	OptionDesc:setText( LocalizeHash( @"hash_29CE5409F9792E88" ) ) --[[ @ 0]]
	OptionDesc:setTTF( "dinnext_regular" ) --[[ @ 0]]
	OptionDesc:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionDesc:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( OptionDesc ) --[[ @ 0]]
	self.OptionDesc = OptionDesc --[[ @ 0]]
	
	PCDisclaimer = nil --[[ @ 0]]
	
	PCDisclaimer = LUI.UIText.new( 0.5, 0.5, -490.5, 664.5, 0.5, 0.5, 126, 144 ) --[[ @ 0]]
	PCDisclaimer:setRGB( ColorSet.EnemyFlagBg.r, ColorSet.EnemyFlagBg.g, ColorSet.EnemyFlagBg.b ) --[[ @ 0]]
	PCDisclaimer:setText( LocalizeHash( @"hash_426FCD76A799CA42" ) ) --[[ @ 0]]
	PCDisclaimer:setTTF( "dinnext_regular" ) --[[ @ 0]]
	PCDisclaimer:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PCDisclaimer:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( PCDisclaimer ) --[[ @ 0]]
	self.PCDisclaimer = PCDisclaimer --[[ @ 0]]
	
	CheckboxConfirm = nil --[[ @ 0]]
	
	CheckboxConfirm = LUI.UIText.new( 0.5, 0.5, -460, 451, 0.5, 0.5, 284, 306 ) --[[ @ 0]]
	CheckboxConfirm:setRGB( ColorSet.EnemyFlagBg.r, ColorSet.EnemyFlagBg.g, ColorSet.EnemyFlagBg.b ) --[[ @ 0]]
	CheckboxConfirm:setText( LocalizeHash( @"hash_1AF78441D1A89BF8" ) ) --[[ @ 0]]
	CheckboxConfirm:setTTF( "dinnext_regular" ) --[[ @ 0]]
	CheckboxConfirm:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	CheckboxConfirm:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	self:addElement( CheckboxConfirm ) --[[ @ 0]]
	self.CheckboxConfirm = CheckboxConfirm --[[ @ 0]]
	
	local f1_local10 = nil --[[ @ 0]]
	self.ConsoleDisclaimer2 = LUI.UIElement.createFake() --[[ @ 0]]
	
	local Codpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 414, 628, 0.5, 0.5, -302, -253 ) --[[ @ 0]]
	Codpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			Codpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f13_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Codpoints ) --[[ @ 0]]
	self.Codpoints = Codpoints --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0.5, 0.5, -577.5, 391.5, 0.5, 0.5, -315, -240 ) --[[ @ 0]]
	Title:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	Title:setText( LocalizeToUpperString( @"hash_11FACEF786749CBA" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local BoundaryBot2 = LUI.UIImage.new( 0.5, 0.5, -880.5, -319.5, 0.5, 0.5, -61, -45 ) --[[ @ 0]]
	BoundaryBot2:setAlpha( 0.15 ) --[[ @ 0]]
	BoundaryBot2:setZRot( -90 ) --[[ @ 0]]
	BoundaryBot2:setImage( RegisterImage( @"uie_ui_hud_tak5_player_layout_bracket" ) ) --[[ @ 0]]
	BoundaryBot2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	BoundaryBot2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BoundaryBot2:setupNineSliceShader( 66, 8 ) --[[ @ 0]]
	self:addElement( BoundaryBot2 ) --[[ @ 0]]
	self.BoundaryBot2 = BoundaryBot2 --[[ @ 0]]
	
	local BoundaryBot = LUI.UIImage.new( 0.5, 0.5, 319.5, 880.5, 0.5, 0.5, -61, -45 ) --[[ @ 0]]
	BoundaryBot:setAlpha( 0.15 ) --[[ @ 0]]
	BoundaryBot:setZRot( 90 ) --[[ @ 0]]
	BoundaryBot:setImage( RegisterImage( @"uie_ui_hud_tak5_player_layout_bracket" ) ) --[[ @ 0]]
	BoundaryBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	BoundaryBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BoundaryBot:setupNineSliceShader( 66, 8 ) --[[ @ 0]]
	self:addElement( BoundaryBot ) --[[ @ 0]]
	self.BoundaryBot = BoundaryBot --[[ @ 0]]
	
	local EntitlementItemList = CoD.EntitlementListContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -555, 555, 0.5, 0.5, -155, 85 ) --[[ @ 0]]
	self:addElement( EntitlementItemList ) --[[ @ 0]]
	self.EntitlementItemList = EntitlementItemList --[[ @ 0]]
	
	local Banner = LUI.UIImage.new( 0.5, 0.5, -600, 600, 0.5, 0.5, -464.5, -344.5 ) --[[ @ 0]]
	Banner:setImage( RegisterImage( CoD.EntitlementUtility.GetBannerImage( f1_arg0, @"blacktransparent" ) ) ) --[[ @ 0]]
	self:addElement( Banner ) --[[ @ 0]]
	self.Banner = Banner --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "hidecodpoints",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsModelValueTrue( f1_arg0, "EntitlementData.addsCODPoints" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local17 = self --[[ @ 0]]
	local f1_local18 = self.subscribeToModel --[[ @ 0]]
	local f1_local19 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19["EntitlementData.addsCODPoints"], function ( f15_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f15_arg0:get(),
			modelName = "EntitlementData.addsCODPoints"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local17 = self --[[ @ 0]]
	f1_local18 = self.subscribeToModel --[[ @ 0]]
	f1_local19 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local18( f1_local17, f1_local19.EntitlementAcknowledged, function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not IsPC() and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.EntitlementUtility.SetCurrentEntitlementViewed( controller ) --[[ @ 0]]
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.EntitlementUtility.SetCurrentEntitlementViewed( controller ) --[[ @ 0]]
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_25BE4A02B20F31F1", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 750 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsPC() and CoD.ModelUtility.IsGlobalModelValueTrue( "EntitlementAcknowledged" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_25BE4A02B20F31F1", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local4:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		CommonCheckbox.id = "CommonCheckbox" --[[ @ 0]]
	end
	if CoD.isPC then
		featureOverlayButtonMouseOnly.id = "featureOverlayButtonMouseOnly" --[[ @ 0]]
	end
	EntitlementItemList.id = "EntitlementItemList" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = CommonCheckbox --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EntitlementPopup.__resetProperties = function ( f19_arg0 )
	f19_arg0.Codpoints:completeAnimation() --[[ @ 0]]
	f19_arg0.PCDisclaimer:completeAnimation() --[[ @ 0]]
	f19_arg0.ConsoleDisclaimer2:completeAnimation() --[[ @ 0]]
	f19_arg0.Codpoints:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.PCDisclaimer:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.ConsoleDisclaimer2:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EntitlementPopup.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	hidecodpoints = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.PCDisclaimer:completeAnimation() --[[ @ 0]]
			f21_arg0.PCDisclaimer:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.PCDisclaimer ) --[[ @ 0]]
			f21_arg0.ConsoleDisclaimer2:completeAnimation() --[[ @ 0]]
			f21_arg0.ConsoleDisclaimer2:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ConsoleDisclaimer2 ) --[[ @ 0]]
			f21_arg0.Codpoints:completeAnimation() --[[ @ 0]]
			f21_arg0.Codpoints:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Codpoints ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EntitlementPopup.__onClose = function ( f22_arg0 )
	f22_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f22_arg0.CommonCheckbox:close() --[[ @ 0]]
	f22_arg0.featureOverlayButtonMouseOnly:close() --[[ @ 0]]
	f22_arg0.Codpoints:close() --[[ @ 0]]
	f22_arg0.EntitlementItemList:close() --[[ @ 0]]
end
 --[[ @ 0]]
