-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:7a0ea5c4d6136584" ) --[[ @ 0]]
require( "x64:7d6fc714e834102b" ) --[[ @ 0]]
require( "x64:5520ac0ef70d2063" ) --[[ @ 0]]

CoD.BM_ActiveContractRewards = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BM_ActiveContractRewards.__defaultWidth = 440 --[[ @ 0]]
CoD.BM_ActiveContractRewards.__defaultHeight = 50 --[[ @ 0]]
CoD.BM_ActiveContractRewards.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIHorizontalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 20, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Center ) --[[ @ 0]]
	self:setClass( CoD.BM_ActiveContractRewards ) --[[ @ 0]]
	self.id = "BM_ActiveContractRewards" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BMActiveContractXpReward = CoD.BM_ActiveContractXpReward.new( f1_arg0, f1_arg1, 0, 0, 5, 135, 0, 0, 0, 50 ) --[[ @ 0]]
	BMActiveContractXpReward:linkToElementModel( self, "xpReward", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			BMActiveContractXpReward.RewardsAmount:setText( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BMActiveContractXpReward ) --[[ @ 0]]
	self.BMActiveContractXpReward = BMActiveContractXpReward --[[ @ 0]]
	
	local GenericReward = CoD.BM_ActiveContractItemReward.new( f1_arg0, f1_arg1, 0, 0, 155, 285, 0, 0, 0, 50 ) --[[ @ 0]]
	GenericReward:linkToElementModel( self, "rewardIcon", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			GenericReward.RewardIcon:setImage( RegisterImage( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	GenericReward:linkToElementModel( self, "rewardAmount", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			GenericReward.RewardsAmount:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GenericReward ) --[[ @ 0]]
	self.GenericReward = GenericReward --[[ @ 0]]
	
	local ZMTierSkip = CoD.BM_ActiveContractRewards_ZMTierSkip.new( f1_arg0, f1_arg1, 0, 0, 305, 435, 0, 0, 0, 50 ) --[[ @ 0]]
	ZMTierSkip:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ZMTierSkip ) --[[ @ 0]]
	self.ZMTierSkip = ZMTierSkip --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "All",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isDailyZombies" ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "rewardAmount", 0 )
			end
		},
		{
			stateName = "TierSkip",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isDailyZombies" )
			end
		},
		{
			stateName = "XPOnly",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "rewardAmount", 0 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isDailyZombies", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isDailyZombies"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "rewardAmount", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rewardAmount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BM_ActiveContractRewards.__resetProperties = function ( f10_arg0 )
	f10_arg0.ZMTierSkip:completeAnimation() --[[ @ 0]]
	f10_arg0.GenericReward:completeAnimation() --[[ @ 0]]
	f10_arg0.ZMTierSkip:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.GenericReward:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BM_ActiveContractRewards.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	All = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f12_arg0.ZMTierSkip:completeAnimation() --[[ @ 0]]
			f12_arg0.ZMTierSkip:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.ZMTierSkip ) --[[ @ 0]]
		end
	},
	TierSkip = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.GenericReward:completeAnimation() --[[ @ 0]]
			f13_arg0.GenericReward:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.GenericReward ) --[[ @ 0]]
			f13_arg0.ZMTierSkip:completeAnimation() --[[ @ 0]]
			f13_arg0.ZMTierSkip:setAlpha( 1 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.ZMTierSkip ) --[[ @ 0]]
		end
	},
	XPOnly = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f14_arg0.GenericReward:completeAnimation() --[[ @ 0]]
			f14_arg0.GenericReward:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.GenericReward ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BM_ActiveContractRewards.__onClose = function ( f15_arg0 )
	f15_arg0.BMActiveContractXpReward:close() --[[ @ 0]]
	f15_arg0.GenericReward:close() --[[ @ 0]]
	f15_arg0.ZMTierSkip:close() --[[ @ 0]]
end
 --[[ @ 0]]
