-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/common/common_tabbar_center" ) --[[ @ 0]]
require( "x64:181a24c5340caa1e" ) --[[ @ 0]]
require( "x64:7c7ee4ce0a7a0397" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]

CoD.ItemShopTabBarContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ItemShopTabBarContainer.__defaultWidth = 1920 --[[ @ 0]]
CoD.ItemShopTabBarContainer.__defaultHeight = 1080 --[[ @ 0]]
CoD.ItemShopTabBarContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ItemShopTabBarContainer ) --[[ @ 0]]
	self.id = "ItemShopTabBarContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TabBacking = CoD.CommonTabBarBacking.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 52, 89 ) --[[ @ 0]]
	TabBacking.TabBackingBlur:setAlpha( 0 ) --[[ @ 0]]
	TabBacking:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( TabBacking ) --[[ @ 0]]
	self.TabBacking = TabBacking --[[ @ 0]]
	
	local FETabBar = CoD.Common_Tabbar_Center.new( f1_arg0, f1_arg1, 0.5, 0.5, -1650, 1650, 0, 0, 36, 97 ) --[[ @ 0]]
	FETabBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.IsOfflineOnlyDemo() and InFrontend()
			end
		}
	} ) --[[ @ 0]]
	FETabBar:appendEventHandler( "grid_updated", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( FETabBar, f4_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FETabBar:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( FETabBar, f5_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = FETabBar --[[ @ 0]]
	local StartMenuCODpoints = FETabBar.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	StartMenuCODpoints( f1_local3, f1_local5.LastInput, function ( f6_arg0 )
		f1_arg0:updateElementState( FETabBar, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FETabBar.Tabs.grid:setWidgetType( CoD.QuarterMasterTab ) --[[ @ 0]]
	FETabBar.Tabs.grid:setDataSource( "QuarterMasterCategoryList" ) --[[ @ 0]]
	self:addElement( FETabBar ) --[[ @ 0]]
	self.FETabBar = FETabBar --[[ @ 0]]
	
	StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_arg0, f1_arg1, 0.5, 0.5, 550, 654, 0, 0, -11, 69 ) --[[ @ 0]]
	StartMenuCODpoints:setAlpha( 0 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg1, "LootStreamProgress", "codPoints", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not AreCodPointsEnabled( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local5, f1_local6["lobbyRoot.lobbyNetworkMode"], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "lobbyRoot.lobbyNetworkMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FETabBar.id = "FETabBar" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local3 = self --[[ @ 0]]
	DisableKeyboardNavigationByElement( FETabBar ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.ItemShopTabBarContainer.__resetProperties = function ( f10_arg0 )
	f10_arg0.FETabBar:completeAnimation() --[[ @ 0]]
	f10_arg0.TabBacking:completeAnimation() --[[ @ 0]]
	f10_arg0.FETabBar:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.TabBacking:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ItemShopTabBarContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.TabBacking:completeAnimation() --[[ @ 0]]
			f11_arg0.TabBacking:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.TabBacking ) --[[ @ 0]]
			f11_arg0.FETabBar:completeAnimation() --[[ @ 0]]
			f11_arg0.FETabBar:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.FETabBar ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f12_arg0.TabBacking:completeAnimation() --[[ @ 0]]
			f12_arg0.TabBacking:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.TabBacking ) --[[ @ 0]]
			f12_arg0.FETabBar:completeAnimation() --[[ @ 0]]
			f12_arg0.FETabBar:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.FETabBar ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ItemShopTabBarContainer.__onClose = function ( f13_arg0 )
	f13_arg0.TabBacking:close() --[[ @ 0]]
	f13_arg0.FETabBar:close() --[[ @ 0]]
	f13_arg0.StartMenuCODpoints:close() --[[ @ 0]]
end
 --[[ @ 0]]
