-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:5097e3c43ee11670" ) --[[ @ 0]]
require( "x64:59c073fbbcfd61b3" ) --[[ @ 0]]
require( "ui/uieditor/menus/lobby/common/popups/vodviewer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]
require( "x64:7c8666fff462a645" ) --[[ @ 0]]
require( "x64:f5d49602f55b483" ) --[[ @ 0]]
require( "x64:3fbaed9d1bf93d4c" ) --[[ @ 0]]
require( "x64:19d86ea4c820510d" ) --[[ @ 0]]
require( "x64:4e757ecab77bdc64" ) --[[ @ 0]]
require( "x64:5b5905d805906315" ) --[[ @ 0]]
require( "x64:5aa5c97c296aded6" ) --[[ @ 0]]
require( "x64:283b8db1dd36662e" ) --[[ @ 0]]
require( "x64:6c354b0a26f3b5f9" ) --[[ @ 0]]
require( "x64:43921bc3d09ef7fd" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebutton" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/bnetstore/pc_bnetstore_purchasebutton" ) --[[ @ 0]]

CoD.SupplyChainFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SupplyChainFrame.__defaultWidth = 1920 --[[ @ 0]]
CoD.SupplyChainFrame.__defaultHeight = 1080 --[[ @ 0]]
CoD.SupplyChainFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	if not IsBooleanDvarSet( "loot_sunsetBlackjackShopActive" ) then
		SetFocusedTierModelValue( f1_arg1, "0", "" ) --[[ @ 0]]
		SetControllerModelValue( f1_arg1, "MaxTier", CoD.BlackMarketUtility.SupplyChainMaxTiers ) --[[ @ 0]]
		SetPerControllerTableProperty( f1_arg1, "haveActiveContractInStream", nil ) --[[ @ 0]]
		CoD.FTUEUtility.ShowFTUESequenceIfNotSeen( self, f1_arg1, "BlackMarketSeasonThreeIntroduction" ) --[[ @ 0]]
	else
		SetFocusedTierModelValue( f1_arg1, "0", "" ) --[[ @ 0]]
		SetControllerModelValue( f1_arg1, "MaxTier", CoD.BlackMarketUtility.SupplyChainMaxTiers ) --[[ @ 0]]
		SetPerControllerTableProperty( f1_arg1, "haveActiveContractInStream", nil ) --[[ @ 0]]
	end
	self:setClass( CoD.SupplyChainFrame ) --[[ @ 0]]
	self.id = "SupplyChainFrame" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local CurrentSeasonText = LUI.UIText.new( 0.5, 0.5, -814, 310, 0, 0, 135, 172 ) --[[ @ 0]]
	CurrentSeasonText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	CurrentSeasonText:setAlpha( 0 ) --[[ @ 0]]
	CurrentSeasonText:setText( LocalizeToUpperString( @"hash_26CBF773605247A2" ) ) --[[ @ 0]]
	CurrentSeasonText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	CurrentSeasonText:setLetterSpacing( 8 ) --[[ @ 0]]
	CurrentSeasonText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	CurrentSeasonText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( CurrentSeasonText ) --[[ @ 0]]
	self.CurrentSeasonText = CurrentSeasonText --[[ @ 0]]
	
	local ItemList = LUI.UIList.new( f1_arg0, f1_arg1, 4, 0, nil, false, false, false, false ) --[[ @ 0]]
	ItemList:setLeftRight( 0.5, 0.5, -483, 233 ) --[[ @ 0]]
	ItemList:setTopBottom( 0, 0, 169, 975 ) --[[ @ 0]]
	ItemList:setWidgetType( CoD.SupplyChainItem ) --[[ @ 0]]
	ItemList:setHorizontalCount( 5 ) --[[ @ 0]]
	ItemList:setVerticalCount( 5 ) --[[ @ 0]]
	ItemList:setSpacing( 4 ) --[[ @ 0]]
	ItemList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	ItemList:setDataSource( "LootTierItems" ) --[[ @ 0]]
	ItemList:appendEventHandler( "input_source_changed", function ( f2_arg0, f2_arg1 )
		f2_arg1.menu = f2_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local CurrentTier = ItemList --[[ @ 0]]
	local SupplyChainDetails = ItemList.subscribeToModel --[[ @ 0]]
	local PurchaseTiers = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	SupplyChainDetails( CurrentTier, PurchaseTiers.LastInput, function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ItemList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if not IsPC() then
			SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			SetPerControllerTableProperty( f1_arg1, "allowTierPurchase", true ) --[[ @ 0]]
		elseif IsPC() and IsGamepadOrKeyboardNavigation( f1_arg1 ) then
			SetCurrentElementAsActive( self, element, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	ItemList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if not IsPC() then
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	ItemList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if not IsPC() then
			CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		elseif not IsPC() then
			CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	ItemList:registerEventHandler( "occlusion_change", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.OcclusionChange then
			f7_local0 = element:OcclusionChange( event ) --[[ @ 0]]
		elseif element.super.OcclusionChange then
			f7_local0 = element.super:OcclusionChange( event ) --[[ @ 0]]
		end
		if CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "LootStreamProgress.playAnimation" ) and not CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "playContrabandReveal" ) and IsPerControllerTablePropertyValue( f1_arg1, "offScreenPurchase", true ) and not IsPerControllerTablePropertyValue( f1_arg1, "redeemingTierBundleItem", true ) then
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( element ) --[[ @ 0]]
			CoD.BlackMarketUtility.CacheContrabandRevealTier( element, f1_arg1 ) --[[ @ 0]]
			UpdateDataSource( self, element, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerContrabandReveal( f1_arg1, element, self.SupplyChainDetails ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerRevealAnimation( f1_arg1, element ) --[[ @ 0]]
			UpdateElementState( self, "DiscountDetailsWidget", f1_arg1 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "LootStreamProgress.playAnimation" ) and not CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "playContrabandReveal" ) and not IsPerControllerTablePropertyValue( f1_arg1, "redeemingTierBundleItem", true ) then
			CoD.BlackMarketUtility.CacheContrabandRevealTier( element, f1_arg1 ) --[[ @ 0]]
			UpdateDataSource( self, element, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerContrabandReveal( f1_arg1, element, self.SupplyChainDetails ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerRevealAnimation( f1_arg1, element ) --[[ @ 0]]
			UpdateElementState( self, "DiscountDetailsWidget", f1_arg1 ) --[[ @ 0]]
		end
		if not f7_local0 then
			f7_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	ItemList:registerEventHandler( "list_active_changed", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if IsPC() then
			PlaySoundAlias( "cac_grid_nav" ) --[[ @ 0]]
			SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( f1_arg0, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.SetHighlightedPurchaseTierFromItemList( f1_arg1, element ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			SetPerControllerTableProperty( f1_arg1, "allowTierPurchase", true ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerRevealAnimation( f1_arg1, element ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	ItemList:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ItemList, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( menu, element, controller ) --[[ @ 0]]
			return true
		elseif AlwaysFalse() then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			OpenOverlay( self, "ReservesPromoImagePopup", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif AlwaysFalse() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2871519113740169", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ItemList, f1_arg1, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], nil, function ( element, menu, controller, model )
		if IsDpadButton( model ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 1 ) and not CoD.BlackMarketUtility.IsTierItemInUpsellRow( controller, element ) and not IsMenuInState( menu, "Processing" ) then
			SetFocusedTierModelValue( controller, "1", "decrement" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDpadButton( nil ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 1 ) and not CoD.BlackMarketUtility.IsTierItemInUpsellRow( controller, element ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ItemList, f1_arg1, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], nil, function ( element, menu, controller, model )
		if IsDpadButton( model ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 5 ) and not IsMenuInState( menu, "Processing" ) then
			SetFocusedTierModelValue( controller, "1", "increment" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDpadButton( nil ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 5 ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( ItemList, "childFocusGained", function ( element )
		if not IsPC() then
			SetElementModelToFocusedElementModel( f1_arg1, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( ItemList, "setModel", function ( element, controller )
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( ItemList, "setDataSource", function ( element, controller )
		SetCurrentElementAsActive( self, element, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemList:subscribeToGlobalModel( f1_arg1, "PerController", "FocusedTier", function ( model )
		local f19_local0 = ItemList --[[ @ 0]]
		if CoD.BlackMarketUtility.HasFocusedTierValue( f1_arg1, f1_arg0 ) and not CoD.BlackMarketUtility.IsMenuOccluded( f1_arg0 ) then
			UpdateDataSource( self, f19_local0, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.UpdateSupplyChainFocus( f1_arg1, f19_local0 ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ItemList:subscribeToGlobalModel( f1_arg1, "GlobalModel", "ContractsForceUpdate", function ( model )
		UpdateDataSource( self, ItemList, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemList:subscribeToGlobalModel( f1_arg1, "PerController", "LootStreamProgress", function ( model )
		UpdateDataSource( self, ItemList, f1_arg1 ) --[[ @ 0]]
		CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemList:subscribeToGlobalModel( f1_arg1, "PerController", "playContrabandReveal", function ( model )
		local f22_local0 = ItemList --[[ @ 0]]
		if CoD.ModelUtility.IsControllerModelValueTrue( f1_arg1, "playContrabandReveal" ) then
			SetControllerModelValue( f1_arg1, "playContrabandReveal", false ) --[[ @ 0]]
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( f22_local0 ) --[[ @ 0]]
			CoD.BlackMarketUtility.CacheContrabandRevealTier( f22_local0, f1_arg1 ) --[[ @ 0]]
			UpdateDataSource( self, f22_local0, f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlaceCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerContrabandReveal( f1_arg1, f22_local0, self.SupplyChainDetails ) --[[ @ 0]]
			CoD.BlackMarketUtility.TriggerRevealAnimation( f1_arg1, f22_local0 ) --[[ @ 0]]
			UpdateElementState( self, "DiscountDetailsWidget", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ItemList ) --[[ @ 0]]
	self.ItemList = ItemList --[[ @ 0]]
	
	SupplyChainDetails = CoD.SupplyChainDetails.new( f1_arg0, f1_arg1, 0.5, 0.5, 310, 910, 0, 0, -79, 1001 ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( SupplyChainDetails, "setModel", function ( element, controller )
		UpdateElementState( self, "PurchaseButton", f1_arg1 ) --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "TrialWidget" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SupplyChainDetails ) --[[ @ 0]]
	self.SupplyChainDetails = SupplyChainDetails --[[ @ 0]]
	
	CurrentTier = CoD.CurrentTier.new( f1_arg0, f1_arg1, 0, 0, 450, 630, 0, 0, 975, 1065 ) --[[ @ 0]]
	CurrentTier:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CurrentTier ) --[[ @ 0]]
	self.CurrentTier = CurrentTier --[[ @ 0]]
	
	PurchaseTiers = CoD.PurchaseTiers.new( f1_arg0, f1_arg1, 0, 0, 126, 306, 0, 0, 975, 1065 ) --[[ @ 0]]
	PurchaseTiers:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( PurchaseTiers ) --[[ @ 0]]
	self.PurchaseTiers = PurchaseTiers --[[ @ 0]]
	
	local RightPageOver = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, 236.5, 303.5, 0, 0, 194, 239 ) --[[ @ 0]]
	RightPageOver.KeyMouseImage:setImage( RegisterImage( @"uie_bumperright" ) ) --[[ @ 0]]
	RightPageOver:subscribeToGlobalModel( f1_arg1, "Controller", "right_trigger_button_image", function ( model )
		local f24_local0 = model:get() --[[ @ 0]]
		if f24_local0 ~= nil then
			RightPageOver.ControllerImage:setImage( RegisterImage( f24_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightPageOver:registerEventHandler( "gain_focus", function ( element, event )
		local f25_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f25_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f25_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f25_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightPageOver, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
		SetFocusedTierModelValue( controller, "5", "increment" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightPageOver ) --[[ @ 0]]
	self.RightPageOver = RightPageOver --[[ @ 0]]
	
	local RightPageOver2 = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, -904, -837, 0, 0, 194, 239 ) --[[ @ 0]]
	RightPageOver2:subscribeToGlobalModel( f1_arg1, "Controller", "left_trigger_button_image", function ( model )
		local f28_local0 = model:get() --[[ @ 0]]
		if f28_local0 ~= nil then
			RightPageOver2.ControllerImage:setImage( RegisterImage( f28_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightPageOver2:registerEventHandler( "gain_focus", function ( element, event )
		local f29_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f29_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f29_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f29_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightPageOver2, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
		SetFocusedTierModelValue( controller, "5", "decrement" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightPageOver2 ) --[[ @ 0]]
	self.RightPageOver2 = RightPageOver2 --[[ @ 0]]
	
	local pointer = CoD.SupplyChainBumperPointers.new( f1_arg0, f1_arg1, 0.5, 0.5, -858.5, -826.5, 0, 0, 165, 245 ) --[[ @ 0]]
	pointer:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( pointer ) --[[ @ 0]]
	self.pointer = pointer --[[ @ 0]]
	
	local pointer2 = CoD.SupplyChainBumperPointers.new( f1_arg0, f1_arg1, 0.5, 0.5, 226.5, 258.5, 0, 0, 165, 245 ) --[[ @ 0]]
	pointer2:setAlpha( 0.8 ) --[[ @ 0]]
	pointer2:setYRot( 180 ) --[[ @ 0]]
	self:addElement( pointer2 ) --[[ @ 0]]
	self.pointer2 = pointer2 --[[ @ 0]]
	
	local infoBracketBot = LUI.UIImage.new( 0.5, 0.5, -841, 240, 0, 0, 176, 184 ) --[[ @ 0]]
	infoBracketBot:setRGB( 0.98, 1, 0.89 ) --[[ @ 0]]
	infoBracketBot:setAlpha( 0.35 ) --[[ @ 0]]
	infoBracketBot:setZRot( 180 ) --[[ @ 0]]
	infoBracketBot:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	infoBracketBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	infoBracketBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	infoBracketBot:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( infoBracketBot ) --[[ @ 0]]
	self.infoBracketBot = infoBracketBot --[[ @ 0]]
	
	local PurchaseButton = nil --[[ @ 0]]
	
	PurchaseButton = CoD.PC_BnetStore_PurchaseButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 346, 892, 0, 0, 950, 1011 ) --[[ @ 0]]
	PurchaseButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return HideSupplyChainPurchaseButton( f1_arg1, self.SupplyChainDetails )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	local StartMenuSmallTierLevel = PurchaseButton --[[ @ 0]]
	local TransactionDeepLinkButton = PurchaseButton.subscribeToModel --[[ @ 0]]
	local StreamList = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	TransactionDeepLinkButton( StartMenuSmallTierLevel, StreamList["lobbyRoot.lobbyNetworkMode"], function ( f34_arg0 )
		f1_arg0:updateElementState( PurchaseButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "lobbyRoot.lobbyNetworkMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PurchaseButton:appendEventHandler( "input_source_changed", function ( f35_arg0, f35_arg1 )
		f35_arg1.menu = f35_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( PurchaseButton, f35_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	StartMenuSmallTierLevel = PurchaseButton --[[ @ 0]]
	TransactionDeepLinkButton = PurchaseButton.subscribeToModel --[[ @ 0]]
	StreamList = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	TransactionDeepLinkButton( StartMenuSmallTierLevel, StreamList.LastInput, function ( f36_arg0 )
		f1_arg0:updateElementState( PurchaseButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PurchaseButton.ButtonTitle:setText( LocalizeToUpperString( @"hash_685952ACC6D0C1B0" ) ) --[[ @ 0]]
	PurchaseButton:registerEventHandler( "gain_focus", function ( element, event )
		local f37_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f37_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f37_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f37_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PurchaseButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.BlackMarketUtility.SetHighlightedPurchaseTierFromItemList( controller, self.ItemList ) --[[ @ 0]]
		CoD.BlackMarketUtility.PCOpenPurchaseTiersConfirmation( self, "PurchaseTiersConfirmation", controller, self.ItemList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PurchaseButton ) --[[ @ 0]]
	self.PurchaseButton = PurchaseButton --[[ @ 0]]
	
	TransactionDeepLinkButton = nil --[[ @ 0]]
	
	TransactionDeepLinkButton = CoD.DirectorPreGameButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -835, -605, 0.5, 0.5, 363, 435 ) --[[ @ 0]]
	TransactionDeepLinkButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not IsCommerceEnabledOnPC()
			end
		}
	} ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleText:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton.DirectorCustomStartButton.MiddleTextFocus:setText( LocalizeToUpperString( @"hash_44031C820A02E7BA" ) ) --[[ @ 0]]
	TransactionDeepLinkButton:registerEventHandler( "gain_focus", function ( element, event )
		local f41_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f41_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f41_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f41_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkBlackmarket( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( TransactionDeepLinkButton, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.PCKoreaUtility.OpenTransactionsDeepLinkBlackmarket( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.PCKoreaUtility.IsInKorea() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( TransactionDeepLinkButton ) --[[ @ 0]]
	self.TransactionDeepLinkButton = TransactionDeepLinkButton --[[ @ 0]]
	
	StartMenuSmallTierLevel = CoD.StartMenu_SmallTierLevel.new( f1_arg0, f1_arg1, 0.5, 0.5, -835, -486, 0, 0, 170, 250 ) --[[ @ 0]]
	self:addElement( StartMenuSmallTierLevel ) --[[ @ 0]]
	self.StartMenuSmallTierLevel = StartMenuSmallTierLevel --[[ @ 0]]
	
	StreamList = CoD.SupplyChainFrameContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -835, -486, 0, 0, 254, 954 ) --[[ @ 0]]
	StreamList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f46_local0 = nil --[[ @ 0]]
		if CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isContract" ) then
			SetElementModelToFocusedElementSubModel( self, f1_arg1, element, self.SupplyChainDetails, "contractModels" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		end
		return f46_local0
	end ) --[[ @ 0]]
	self:addElement( StreamList ) --[[ @ 0]]
	self.StreamList = StreamList --[[ @ 0]]
	
	local SpecialDeal = CoD.SpecialDeal.new( f1_arg0, f1_arg1, 0.5, 0.5, -849, -133, 0, 0, 680.5, 808.5 ) --[[ @ 0]]
	SpecialDeal:registerEventHandler( "gain_focus", function ( element, event )
		local f47_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f47_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f47_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f47_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( SpecialDeal, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsElementInState( element, "HasAction" ) then
			CoD.BlackMarketUtility.SpecialDealAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( element, "HasAction" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( SpecialDeal ) --[[ @ 0]]
	self.SpecialDeal = SpecialDeal --[[ @ 0]]
	
	local TrialWidget = CoD.BlackMarketTrialInfoBannerWidget.new( f1_arg0, f1_arg1, 0, 0, 172.5, 719.5, 0, 0, 890, 925 ) --[[ @ 0]]
	TrialWidget:setScale( 1.2, 1.2 ) --[[ @ 0]]
	TrialWidget:linkToElementModel( self, nil, false, function ( model )
		TrialWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TrialWidget ) --[[ @ 0]]
	self.TrialWidget = TrialWidget --[[ @ 0]]
	
	local DiscountTiersWidget = CoD.DiscountTiersContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	DiscountTiersWidget:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f51_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, element ) --[[ @ 0]]
		return f51_local0
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( DiscountTiersWidget, "childFocusGained", function ( element )
		SetElementState( self, self.SupplyChainDetails, f1_arg1, "Hidden" ) --[[ @ 0]]
		SetPerControllerTableProperty( f1_arg1, "allowTierPurchase", false ) --[[ @ 0]]
		CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( DiscountTiersWidget, "childFocusLost", function ( element )
		SetPerControllerTableProperty( f1_arg1, "allowTierPurchase", true ) --[[ @ 0]]
		CoD.BlackMarketUtility.MovePurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
		UpdateElementState( self, "SupplyChainDetails", f1_arg1 ) --[[ @ 0]]
		UpdateElementState( self, "DiscountTiersWidget", f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DiscountTiersWidget ) --[[ @ 0]]
	self.DiscountTiersWidget = DiscountTiersWidget --[[ @ 0]]
	
	self:linkToElementModel( self, "movieName", true, function ( model, f54_arg1 )
		CoD.Menu.UpdateButtonShownState( f54_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f55_arg0, f55_arg1 )
		f55_arg1.menu = f55_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f55_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local18 = self --[[ @ 0]]
	local f1_local19 = self.subscribeToModel --[[ @ 0]]
	local f1_local20 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local19( f1_local18, f1_local20.LastInput, function ( f56_arg0, f56_arg1 )
		CoD.Menu.UpdateButtonShownState( f56_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "ui_remove", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueNonEmptyString( self.ItemList, controller, "movieName" ) and IsMouseOrKeyboard( controller ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			CoD.VideoStreamingUtility.SetupVoDMovie( controller, self.ItemList, "" ) --[[ @ 0]]
			DelayOpenOverlay( menu, "VoDViewer", controller, {
				fullscreen = true
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueNonEmptyString( self.ItemList, controller, "movieName" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f59_arg0, f59_arg1, f59_arg2, f59_arg3 )
		if IsElementReceivingMenuOpenEventForTheFirstTime( self ) and IsPC() then
			CoD.GridAndListUtility.ActivateListPCSelectionBehavior( self.ItemList ) --[[ @ 0]]
			CoD.GridAndListUtility.DisableListActiveOnFocus( self.ItemList ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LootStreamProgress", nil, function ( model )
		local f60_local0 = self --[[ @ 0]]
		if not CoD.BlackMarketUtility.IsMenuOccluded( f1_arg0 ) then
			CoD.BlackMarketUtility.ShowPostseasonPopup( f1_arg0, f1_arg1, nil ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ItemList.id = "ItemList" --[[ @ 0]]
	if CoD.isPC then
		SupplyChainDetails.id = "SupplyChainDetails" --[[ @ 0]]
	end
	if CoD.isPC then
		RightPageOver.id = "RightPageOver" --[[ @ 0]]
	end
	if CoD.isPC then
		RightPageOver2.id = "RightPageOver2" --[[ @ 0]]
	end
	if CoD.isPC then
		PurchaseButton.id = "PurchaseButton" --[[ @ 0]]
	end
	if CoD.isPC then
		TransactionDeepLinkButton.id = "TransactionDeepLinkButton" --[[ @ 0]]
	end
	StreamList.id = "StreamList" --[[ @ 0]]
	SpecialDeal.id = "SpecialDeal" --[[ @ 0]]
	DiscountTiersWidget.id = "DiscountTiersWidget" --[[ @ 0]]
	self.__defaultFocus = ItemList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local19 = self --[[ @ 0]]
	SetMenuProperty( f1_arg0, "_isFirstElementActive", false ) --[[ @ 0]]
	SendClientScriptMenuChangeNotifyWithState( f1_arg1, f1_arg0, true, "character" ) --[[ @ 0]]
	SetFocusedTierModelValue( f1_arg1, "0", "" ) --[[ @ 0]]
	SetControllerModelValue( f1_arg1, "MaxTier", CoD.BlackMarketUtility.SupplyChainMaxTiers ) --[[ @ 0]]
	CoD.BlackMarketUtility.ShowAllRNGPopup( f1_arg0, f1_arg1, nil ) --[[ @ 0]]
	CoD.BlackMarketUtility.SetActiveOnFirstSupplyChainElement( f1_arg1, self.ItemList, f1_arg0 ) --[[ @ 0]]
	CoD.BlackMarketUtility.InitTiersWidgetNextFrame( f1_arg1, self, f1_arg0 ) --[[ @ 0]]
	SetMenuProperty( f1_arg0, "__hideSupplyChainDetailsButtons", false ) --[[ @ 0]]
	CoD.BlackMarketUtility.RegisterCurrentTiersWidget( f1_arg1, self, "CurrentTier" ) --[[ @ 0]]
	CoD.BlackMarketUtility.RegisterPurchaseTiersWidget( f1_arg1, self, "PurchaseTiers" ) --[[ @ 0]]
	SetElementState( self, self.SupplyChainDetails, f1_arg1, "Hidden" ) --[[ @ 0]]
	CoD.BlackMarketUtility.EnableItemshopTick( f1_arg1, self ) --[[ @ 0]]
	f1_local19 = PurchaseButton --[[ @ 0]]
	if IsGameTrial() then
		ReplaceElementWithFake( self, "PurchaseButton" ) --[[ @ 0]]
	end
	f1_local19 = TransactionDeepLinkButton --[[ @ 0]]
	if IsPC() and not CoD.PCKoreaUtility.ShowTransactionHistoryButton() then
		ReplaceElementWithFake( self, "TransactionDeepLinkButton" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.SupplyChainFrame.__onClose = function ( f62_arg0 )
	f62_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f62_arg0.ItemList:close() --[[ @ 0]]
	f62_arg0.SupplyChainDetails:close() --[[ @ 0]]
	f62_arg0.CurrentTier:close() --[[ @ 0]]
	f62_arg0.PurchaseTiers:close() --[[ @ 0]]
	f62_arg0.RightPageOver:close() --[[ @ 0]]
	f62_arg0.RightPageOver2:close() --[[ @ 0]]
	f62_arg0.pointer:close() --[[ @ 0]]
	f62_arg0.pointer2:close() --[[ @ 0]]
	f62_arg0.PurchaseButton:close() --[[ @ 0]]
	f62_arg0.TransactionDeepLinkButton:close() --[[ @ 0]]
	f62_arg0.StartMenuSmallTierLevel:close() --[[ @ 0]]
	f62_arg0.StreamList:close() --[[ @ 0]]
	f62_arg0.SpecialDeal:close() --[[ @ 0]]
	f62_arg0.TrialWidget:close() --[[ @ 0]]
	f62_arg0.DiscountTiersWidget:close() --[[ @ 0]]
end
 --[[ @ 0]]
