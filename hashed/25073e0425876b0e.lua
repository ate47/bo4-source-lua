-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
CoD.PaintCanCount = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PaintCanCount.__defaultWidth = 180 --[[ @ 0]]
CoD.PaintCanCount.__defaultHeight = 132 --[[ @ 0]]
CoD.PaintCanCount.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PaintCanCount ) --[[ @ 0]]
	self.id = "PaintCanCount" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 0, 0.5, 218.5, 0, 0, 33, 132 ) --[[ @ 0]]
	backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 0.5, 180.5, 0.09, 0.09, 41.5, 120.5 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.8 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local StatLabel = LUI.UIText.new( 0, 0, 0.5, 162.5, 0, 0, 30, 51 ) --[[ @ 0]]
	StatLabel:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	StatLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_49FE863E6425C8CE" ) ) --[[ @ 0]]
	StatLabel:setTTF( "dinnext_regular" ) --[[ @ 0]]
	StatLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	StatLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( StatLabel ) --[[ @ 0]]
	self.StatLabel = StatLabel --[[ @ 0]]
	
	local maxedLabel = LUI.UIText.new( 0, 0, 0.5, 162.5, 0, 0, 136, 157 ) --[[ @ 0]]
	maxedLabel:setRGB( 1, 0, 0 ) --[[ @ 0]]
	maxedLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4F3D13CF35DD7B2A" ) ) --[[ @ 0]]
	maxedLabel:setTTF( "dinnext_regular" ) --[[ @ 0]]
	maxedLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	maxedLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( maxedLabel ) --[[ @ 0]]
	self.maxedLabel = maxedLabel --[[ @ 0]]
	
	local StatValue = LUI.UIText.new( 0, 0, 65.5, 168.5, 0, 0, 71.5, 116.5 ) --[[ @ 0]]
	StatValue:setRGB( 0.93, 0.91, 0.84 ) --[[ @ 0]]
	StatValue:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	StatValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	StatValue:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	StatValue:subscribeToGlobalModel( f1_arg1, "PerController", "paintCanCount", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			StatValue:setText( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StatValue ) --[[ @ 0]]
	self.StatValue = StatValue --[[ @ 0]]
	
	local PaintCanImage = LUI.UIImage.new( 0, 0, 0, 80, 0, 0, 54, 134 ) --[[ @ 0]]
	PaintCanImage:setImage( RegisterImage( @"ui_icon_inventory_spray_can" ) ) --[[ @ 0]]
	self:addElement( PaintCanImage ) --[[ @ 0]]
	self.PaintCanImage = PaintCanImage --[[ @ 0]]
	
	local infoBracketBot = LUI.UIImage.new( 0, 0, 0, 181, 0, 0, 124, 132 ) --[[ @ 0]]
	infoBracketBot:setAlpha( 0.26 ) --[[ @ 0]]
	infoBracketBot:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	infoBracketBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	infoBracketBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	infoBracketBot:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( infoBracketBot ) --[[ @ 0]]
	self.infoBracketBot = infoBracketBot --[[ @ 0]]
	
	local infoBracketBot2 = LUI.UIImage.new( 0, 0, 0, 181, 0, 0, 52.5, 60.5 ) --[[ @ 0]]
	infoBracketBot2:setAlpha( 0.16 ) --[[ @ 0]]
	infoBracketBot2:setZRot( 180 ) --[[ @ 0]]
	infoBracketBot2:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	infoBracketBot2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	infoBracketBot2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	infoBracketBot2:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( infoBracketBot2 ) --[[ @ 0]]
	self.infoBracketBot2 = infoBracketBot2 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "VisibleMaxed",
			condition = function ( menu, element, event )
				local f3_local0 = CoD.WeaponOptionsUtility.IsWarzoneCamoFilter( menu, self, f1_arg1 ) --[[ @ 0]]
				if f3_local0 then
					if not IsLocal() then
						f3_local0 = CoD.WZUtility.IsPaintCansMaxed( f1_arg1 ) --[[ @ 0]]
					else
						f3_local0 = false --[[ @ 0]]
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.WeaponOptionsUtility.IsWarzoneCamoFilter( menu, self, f1_arg1 ) and not IsLocal()
			end
		}
	} ) --[[ @ 0]]
	local f1_local9 = self --[[ @ 0]]
	local f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["WeaponPersonalization.listUpdate"], function ( f5_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "WeaponPersonalization.listUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["lobbyRoot.lobbyNetworkMode"], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "lobbyRoot.lobbyNetworkMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["lobbyRoot.lobbyNav"], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.PerController.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11.paintCanCount, function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "paintCanCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PaintCanCount.__resetProperties = function ( f9_arg0 )
	f9_arg0.StatLabel:completeAnimation() --[[ @ 0]]
	f9_arg0.StatValue:completeAnimation() --[[ @ 0]]
	f9_arg0.PaintCanImage:completeAnimation() --[[ @ 0]]
	f9_arg0.infoBracketBot2:completeAnimation() --[[ @ 0]]
	f9_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
	f9_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f9_arg0.maxedLabel:completeAnimation() --[[ @ 0]]
	f9_arg0.StatLabel:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.StatValue:setTopBottom( 0, 0, 71.5, 116.5 ) --[[ @ 0]]
	f9_arg0.StatValue:setRGB( 0.93, 0.91, 0.84 ) --[[ @ 0]]
	f9_arg0.StatValue:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.PaintCanImage:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.infoBracketBot2:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.infoBracketBot2:setAlpha( 0.16 ) --[[ @ 0]]
	f9_arg0.infoBracketBot:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.infoBracketBot:setAlpha( 0.26 ) --[[ @ 0]]
	f9_arg0.NoiseTiledBacking:setAlpha( 0.8 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setLeftRight( 0, 0, 0.5, 162.5 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setTopBottom( 0, 0, 136, 157 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setRGB( 1, 0, 0 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	f9_arg0.maxedLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PaintCanCount.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f10_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f10_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f10_arg0.StatLabel:completeAnimation() --[[ @ 0]]
			f10_arg0.StatLabel:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.StatLabel ) --[[ @ 0]]
			f10_arg0.maxedLabel:completeAnimation() --[[ @ 0]]
			f10_arg0.maxedLabel:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.maxedLabel ) --[[ @ 0]]
			f10_arg0.StatValue:completeAnimation() --[[ @ 0]]
			f10_arg0.StatValue:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.StatValue ) --[[ @ 0]]
			f10_arg0.PaintCanImage:completeAnimation() --[[ @ 0]]
			f10_arg0.PaintCanImage:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.PaintCanImage ) --[[ @ 0]]
			f10_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
			f10_arg0.infoBracketBot:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.infoBracketBot ) --[[ @ 0]]
			f10_arg0.infoBracketBot2:completeAnimation() --[[ @ 0]]
			f10_arg0.infoBracketBot2:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.infoBracketBot2 ) --[[ @ 0]]
		end
	},
	VisibleMaxed = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f11_arg0.maxedLabel:completeAnimation() --[[ @ 0]]
			f11_arg0.maxedLabel:setLeftRight( 0, 0, 59, 175 ) --[[ @ 0]]
			f11_arg0.maxedLabel:setTopBottom( 0, 0, 106.5, 120.5 ) --[[ @ 0]]
			f11_arg0.maxedLabel:setRGB( 1, 0, 0 ) --[[ @ 0]]
			f11_arg0.maxedLabel:setLetterSpacing( 0 ) --[[ @ 0]]
			f11_arg0.maxedLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
			f11_arg0.maxedLabel:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.maxedLabel ) --[[ @ 0]]
			f11_arg0.StatValue:completeAnimation() --[[ @ 0]]
			f11_arg0.StatValue:setTopBottom( 0, 0, 60.5, 105.5 ) --[[ @ 0]]
			f11_arg0.StatValue:setRGB( 0.92, 0.09, 0.09 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.StatValue ) --[[ @ 0]]
			f11_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
			f11_arg0.infoBracketBot:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f11_arg0.infoBracketBot:setAlpha( 0.26 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.infoBracketBot ) --[[ @ 0]]
			f11_arg0.infoBracketBot2:completeAnimation() --[[ @ 0]]
			f11_arg0.infoBracketBot2:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f11_arg0.infoBracketBot2:setAlpha( 0.16 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.infoBracketBot2 ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f12_arg0.maxedLabel:completeAnimation() --[[ @ 0]]
			f12_arg0.maxedLabel:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.maxedLabel ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PaintCanCount.__onClose = function ( f13_arg0 )
	f13_arg0.StatValue:close() --[[ @ 0]]
end
 --[[ @ 0]]
