-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:51de9b3de837a34c" ) --[[ @ 0]]
require( "x64:154118f37219653d" ) --[[ @ 0]]
require( "x64:490bfa8fd4b71a33" ) --[[ @ 0]]
require( "x64:22e06eec4ea38539" ) --[[ @ 0]]
require( "x64:2298bd344d764bb6" ) --[[ @ 0]]

CoD.MultiItemPickupWaypoint = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.MultiItemPickupWaypoint.__defaultWidth = 1100 --[[ @ 0]]
CoD.MultiItemPickupWaypoint.__defaultHeight = 250 --[[ @ 0]]
CoD.MultiItemPickupWaypoint.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.MultiItemPickupWaypoint ) --[[ @ 0]]
	self.id = "MultiItemPickupWaypoint" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0, 0, 385, 715, 0, 0, 54, 106 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local LineImage = LUI.UIImage.new( 0.5, 0.5, -4, 4, 1, 1, -180, 0 ) --[[ @ 0]]
	LineImage:setAlpha( 0.25 ) --[[ @ 0]]
	LineImage:setImage( RegisterImage( @"hash_56C9564494BB3117" ) ) --[[ @ 0]]
	self:addElement( LineImage ) --[[ @ 0]]
	self.LineImage = LineImage --[[ @ 0]]
	
	local ArrowImage = LUI.UIImage.new( 0.5, 0.5, -22.5, 22.5, 1, 1, -57.5, -12.5 ) --[[ @ 0]]
	ArrowImage:setImage( RegisterImage( @"uie_ui_hud_weaponpickup_arrow" ) ) --[[ @ 0]]
	self:addElement( ArrowImage ) --[[ @ 0]]
	self.ArrowImage = ArrowImage --[[ @ 0]]
	
	local GridBacking = CoD.WeaponPickupPrompt_Backing.new( f1_arg0, f1_arg1, 0.5, 0.5, -165, 165, 0, 0, 54, 106 ) --[[ @ 0]]
	self:addElement( GridBacking ) --[[ @ 0]]
	self.GridBacking = GridBacking --[[ @ 0]]
	
	local ItemPickupGrid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, -18, 100, nil, nil, false, true, false, false ) --[[ @ 0]]
	ItemPickupGrid:setLeftRight( 0, 0, 334, 766 ) --[[ @ 0]]
	ItemPickupGrid:setTopBottom( 0, 0, 39.5, 120.5 ) --[[ @ 0]]
	ItemPickupGrid:setWidgetType( CoD.MultiItemPickupWaypointItem ) --[[ @ 0]]
	ItemPickupGrid:setHorizontalCount( 3 ) --[[ @ 0]]
	ItemPickupGrid:setSpacing( -18 ) --[[ @ 0]]
	ItemPickupGrid:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ItemPickupGrid:setDataSource( "MultiItemPickup" ) --[[ @ 0]]
	ItemPickupGrid:registerEventHandler( "list_active_changed", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if IsGamepad( f1_arg1 ) and not IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
			CoD.HUDUtility.SetAsCurrentMultiItemPickup( f1_arg1, element ) --[[ @ 0]]
			ForceNotifyControllerModel( f1_arg1, "hudItems.multiItemPickup.forceNotifyActive" ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	ItemPickupGrid:subscribeToGlobalModel( f1_arg1, "MultiItemPickup", "status", function ( model )
		local f3_local0 = ItemPickupGrid --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) and IsGamepad( f1_arg1 ) and not IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
			CoD.BaseUtility.EnableNavigation( f3_local0 ) --[[ @ 0]]
		elseif IsGamepad( f1_arg1 ) and not IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( f3_local0 ) --[[ @ 0]]
			CoD.BaseUtility.DisableNavigation( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ItemPickupGrid:subscribeToGlobalModel( f1_arg1, "PerController", "scriptNotify", function ( model )
		local f4_local0 = ItemPickupGrid --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_415EF5E7734C15F5" ) and IsGamepad( f1_arg1 ) and not IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
			CoD.WZUtility.SendInventoryPickUpNotify( f1_arg1, f4_local0 ) --[[ @ 0]]
			CoD.GridAndListUtility.SelectNextItemOrPrevious( f4_local0 ) --[[ @ 0]]
			BlockGameFromKeyEvent( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ItemPickupGrid ) --[[ @ 0]]
	self.ItemPickupGrid = ItemPickupGrid --[[ @ 0]]
	
	local ItemHeader = CoD.MultiItemPickupWaypoint_Header.new( f1_arg0, f1_arg1, 0.5, 0.5, -150, 150, 0, 0, -9, 31 ) --[[ @ 0]]
	self:addElement( ItemHeader ) --[[ @ 0]]
	self.ItemHeader = ItemHeader --[[ @ 0]]
	
	local HoldButtonIcon = CoD.WZHoldButtonPrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -44, 45, 0, 0, 44, 86 ) --[[ @ 0]]
	HoldButtonIcon:mergeStateConditions( {
		{
			stateName = "HideHold",
			condition = function ( menu, element, event )
				return CoD.OptionsUtility.IsProfileIntValue( f1_arg1, "warzoneInstantPickups", 1 )
			end
		}
	} ) --[[ @ 0]]
	HoldButtonIcon:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( HoldButtonIcon, f6_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local NavigationPrompt = HoldButtonIcon --[[ @ 0]]
	local OpenPromptText = HoldButtonIcon.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	OpenPromptText( NavigationPrompt, f1_local10.LastInput, function ( f7_arg0 )
		f1_arg0:updateElementState( HoldButtonIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	NavigationPrompt = HoldButtonIcon --[[ @ 0]]
	OpenPromptText = HoldButtonIcon.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	OpenPromptText( NavigationPrompt, f1_local10["storageGlobalRoot.user_settings"], function ( f8_arg0 )
		f1_arg0:updateElementState( HoldButtonIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "storageGlobalRoot.user_settings"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HoldButtonIcon:setScale( 1.5, 1.5 ) --[[ @ 0]]
	HoldButtonIcon.ControllerDependentTextBox.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+activate}]" ) ) --[[ @ 0]]
	HoldButtonIcon.ControllerDependentTextBox.GamepadText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+usereload}]" ) ) --[[ @ 0]]
	HoldButtonIcon:subscribeToGlobalModel( f1_arg1, "HUDItems", "useHoldProgress", function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			HoldButtonIcon.ButtonProgressRing.progressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f9_local0, 1 ), CoD.GetVectorComponentFromString( f9_local0, 2 ), CoD.GetVectorComponentFromString( f9_local0, 3 ), CoD.GetVectorComponentFromString( f9_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HoldButtonIcon ) --[[ @ 0]]
	self.HoldButtonIcon = HoldButtonIcon --[[ @ 0]]
	
	OpenPromptText = LUI.UIText.new( 0.5, 0.5, 29.5, 106.5, 0, 0, 57.5, 82.5 ) --[[ @ 0]]
	OpenPromptText:setRGB( 0.79, 0.76, 0.58 ) --[[ @ 0]]
	OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/open_stash" ) ) --[[ @ 0]]
	OpenPromptText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	OpenPromptText:setLetterSpacing( 0.5 ) --[[ @ 0]]
	OpenPromptText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	OpenPromptText:setBackingType( 1 ) --[[ @ 0]]
	OpenPromptText:setBackingWidget( CoD.WeaponPickupPrompt_Backing, f1_arg0, f1_arg1 ) --[[ @ 0]]
	OpenPromptText:setBackingXPadding( 4 ) --[[ @ 0]]
	OpenPromptText:setBackingYPadding( 2 ) --[[ @ 0]]
	self:addElement( OpenPromptText ) --[[ @ 0]]
	self.OpenPromptText = OpenPromptText --[[ @ 0]]
	
	NavigationPrompt = CoD.MultiItemPickupWaypoint_NavigationPrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -232, -168, 0, 0, 48, 112 ) --[[ @ 0]]
	NavigationPrompt:mergeStateConditions( {
		{
			stateName = "AtLeftAndRight",
			condition = function ( menu, element, event )
				return CoD.GridAndListUtility.IsActiveElementWithinIndexOfFirstElement( self.ItemPickupGrid, 0 ) and CoD.GridAndListUtility.IsActiveElementWithinIndexOfLastElement( self.ItemPickupGrid, 0 )
			end
		},
		{
			stateName = "AtLeft",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "AtRight",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	NavigationPrompt:subscribeToGlobalModel( f1_arg1, "MultiItemPickup", "forceNotifyActive", function ( model )
		local f13_local0 = NavigationPrompt --[[ @ 0]]
		if IsGamepad( f1_arg1 ) then
			UpdateSelfElementState( f1_arg0, f13_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NavigationPrompt ) --[[ @ 0]]
	self.NavigationPrompt = NavigationPrompt --[[ @ 0]]
	
	ItemHeader:linkToElementModel( ItemPickupGrid, nil, false, function ( model )
		ItemHeader:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ActiveKBM",
			condition = function ( menu, element, event )
				local f15_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
				if f15_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
						f15_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
						if f15_local0 then
							if not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) then
								f15_local0 = not IsIntDvarNonZero( "tabbedMultiItemPickup" ) --[[ @ 0]]
							else
								f15_local0 = false --[[ @ 0]]
							end
						else
							return f15_local0
						end
					end
					f15_local0 = false --[[ @ 0]]
				end
				return f15_local0
			end
		},
		{
			stateName = "ActiveSnap",
			condition = function ( menu, element, event )
				local f16_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
				if f16_local0 then
					f16_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOffscreen" ) --[[ @ 0]]
					if f16_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) then
							f16_local0 = not IsIntDvarNonZero( "tabbedMultiItemPickup" ) --[[ @ 0]]
						else
							f16_local0 = false --[[ @ 0]]
						end
					end
				end
				return f16_local0
			end
		},
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				local f17_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
				if f17_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) then
						f17_local0 = not IsIntDvarNonZero( "tabbedMultiItemPickup" ) --[[ @ 0]]
					else
						f17_local0 = false --[[ @ 0]]
					end
				end
				return f17_local0
			end
		},
		{
			stateName = "LockedPromptSnap",
			condition = function ( menu, element, event )
				local f18_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1C2DA8D07C271C53"] ) --[[ @ 0]]
				if f18_local0 then
					f18_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOffscreen" ) --[[ @ 0]]
					if f18_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
							f18_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
						else
							f18_local0 = false --[[ @ 0]]
						end
					end
				end
				return f18_local0
			end
		},
		{
			stateName = "LockedPrompt",
			condition = function ( menu, element, event )
				local f19_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1C2DA8D07C271C53"] ) --[[ @ 0]]
				if f19_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
						f19_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
					else
						f19_local0 = false --[[ @ 0]]
					end
				end
				return f19_local0
			end
		},
		{
			stateName = "OpenPromptSnap",
			condition = function ( menu, element, event )
				local f20_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_BAD3011A800B6D8"] ) --[[ @ 0]]
				if f20_local0 then
					f20_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOffscreen" ) --[[ @ 0]]
					if f20_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
							f20_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
						else
							f20_local0 = false --[[ @ 0]]
						end
					end
				end
				return f20_local0
			end
		},
		{
			stateName = "OpenPrompt",
			condition = function ( menu, element, event )
				local f21_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_BAD3011A800B6D8"] ) --[[ @ 0]]
				if f21_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
						f21_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
					else
						f21_local0 = false --[[ @ 0]]
					end
				end
				return f21_local0
			end
		},
		{
			stateName = "UnlockPromptSnap",
			condition = function ( menu, element, event )
				local f22_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1576D416952948D5"] ) --[[ @ 0]]
				if f22_local0 then
					f22_local0 = CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isOffscreen" ) --[[ @ 0]]
					if f22_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
							f22_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
						else
							f22_local0 = false --[[ @ 0]]
						end
					end
				end
				return f22_local0
			end
		},
		{
			stateName = "UnlockPrompt",
			condition = function ( menu, element, event )
				local f23_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1576D416952948D5"] ) --[[ @ 0]]
				if f23_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) then
						f23_local0 = not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) --[[ @ 0]]
					else
						f23_local0 = false --[[ @ 0]]
					end
				end
				return f23_local0
			end
		},
		{
			stateName = "InRange",
			condition = function ( menu, element, event )
				local f24_local0 = CoD.WaypointUtility.IsWeaponPickupInRange( f1_arg1, self ) --[[ @ 0]]
				if f24_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_final_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and not CoD.WZUtility.IsQuickInventoryOpen( f1_arg1 ) then
						f24_local0 = not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
					else
						f24_local0 = false --[[ @ 0]]
					end
				end
				return f24_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local12 = DataSources.MultiItemPickup.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.status, function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "status"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_final_killcam"]], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_final_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]], function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_missile"]], function ( f32_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f32_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f33_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f33_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_demo_playing"]], function ( f34_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_demo_playing"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f35_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"]], function ( f36_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_nemesis_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f37_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f37_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_round_end_killcam"]], function ( f38_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f38_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_round_end_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f39_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f39_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]], function ( f40_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f40_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f41_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f41_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]], function ( f42_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f42_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f43_arg0, f43_arg1 )
		f43_arg1.menu = f43_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f43_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.LastInput, function ( f44_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f44_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["hudItems.inventory.open"], function ( f45_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f45_arg0:get(),
			modelName = "hudItems.inventory.open"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.showPickupHint, function ( f47_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f47_arg0:get(),
			modelName = "showPickupHint"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["inventory.open"], function ( f48_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f48_arg0:get(),
			modelName = "inventory.open"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["interactivePrompt.activeObjectiveID"], function ( f49_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f49_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ItemPickupGrid.id = "ItemPickupGrid" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local10 = self --[[ @ 0]]
	f1_local10 = ItemPickupGrid --[[ @ 0]]
	if not IsIntDvarNonZero( "tabbedMultiItemPickup" ) then
		CoD.GridAndListUtility.KeepSelectedItemCentered( f1_local10, true ) --[[ @ 0]]
		CoD.FreeCursorUtility.SetListFocusIgnoresFreeCursor( f1_local10, f1_arg1 ) --[[ @ 0]]
		CoD.GridAndListUtility.AddActiveLeftRightNavigation( f1_arg0, f1_local10, f1_arg1, true ) --[[ @ 0]]
		SetElementProperty( f1_local10, "__selectFromEndIfLastElementRemoved", true ) --[[ @ 0]]
		SetElementProperty( f1_local10, "__isForGamepad", true ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.MultiItemPickupWaypoint.__resetProperties = function ( f50_arg0 )
	f50_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
	f50_arg0.LineImage:completeAnimation() --[[ @ 0]]
	f50_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
	f50_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
	f50_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
	f50_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
	f50_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
	f50_arg0.GridBacking:completeAnimation() --[[ @ 0]]
	f50_arg0.Blur:completeAnimation() --[[ @ 0]]
	f50_arg0.ItemPickupGrid:setTopBottom( 0, 0, 39.5, 120.5 ) --[[ @ 0]]
	f50_arg0.ItemPickupGrid:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.LineImage:setTopBottom( 1, 1, -180, 0 ) --[[ @ 0]]
	f50_arg0.LineImage:setAlpha( 0.25 ) --[[ @ 0]]
	f50_arg0.ArrowImage:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.HoldButtonIcon:setTopBottom( 0, 0, 44, 86 ) --[[ @ 0]]
	f50_arg0.HoldButtonIcon:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.ItemHeader:setTopBottom( 0, 0, -9, 31 ) --[[ @ 0]]
	f50_arg0.ItemHeader:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.OpenPromptText:setLeftRight( 0.5, 0.5, 29.5, 106.5 ) --[[ @ 0]]
	f50_arg0.OpenPromptText:setTopBottom( 0, 0, 57.5, 82.5 ) --[[ @ 0]]
	f50_arg0.OpenPromptText:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/open_stash" ) ) --[[ @ 0]]
	f50_arg0.OpenPromptText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	f50_arg0.NavigationPrompt:setTopBottom( 0, 0, 48, 112 ) --[[ @ 0]]
	f50_arg0.NavigationPrompt:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.GridBacking:setTopBottom( 0, 0, 54, 106 ) --[[ @ 0]]
	f50_arg0.GridBacking:setAlpha( 1 ) --[[ @ 0]]
	f50_arg0.Blur:setTopBottom( 0, 0, 54, 106 ) --[[ @ 0]]
	f50_arg0.Blur:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.MultiItemPickupWaypoint.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f51_arg0.Blur:completeAnimation() --[[ @ 0]]
			f51_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.Blur ) --[[ @ 0]]
			f51_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f51_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.LineImage ) --[[ @ 0]]
			f51_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f51_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.ArrowImage ) --[[ @ 0]]
			f51_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f51_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.GridBacking ) --[[ @ 0]]
			f51_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f51_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.ItemPickupGrid ) --[[ @ 0]]
			f51_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f51_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.ItemHeader ) --[[ @ 0]]
			f51_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f51_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.HoldButtonIcon ) --[[ @ 0]]
			f51_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f51_arg0.OpenPromptText:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.OpenPromptText ) --[[ @ 0]]
			f51_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f51_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	ActiveKBM = {
		DefaultClip = function ( f52_arg0, f52_arg1 )
			f52_arg0:__resetProperties() --[[ @ 0]]
			f52_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f52_arg0.Blur:completeAnimation() --[[ @ 0]]
			f52_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.Blur ) --[[ @ 0]]
			f52_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f52_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.LineImage ) --[[ @ 0]]
			f52_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f52_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.ArrowImage ) --[[ @ 0]]
			f52_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f52_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.GridBacking ) --[[ @ 0]]
			f52_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f52_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.ItemPickupGrid ) --[[ @ 0]]
			f52_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f52_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.ItemHeader ) --[[ @ 0]]
			f52_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f52_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.HoldButtonIcon ) --[[ @ 0]]
			f52_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f52_arg0.OpenPromptText:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.OpenPromptText ) --[[ @ 0]]
			f52_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f52_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f52_arg0.clipFinished( f52_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	ActiveSnap = {
		DefaultClip = function ( f53_arg0, f53_arg1 )
			f53_arg0:__resetProperties() --[[ @ 0]]
			f53_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f53_arg0.Blur:completeAnimation() --[[ @ 0]]
			f53_arg0.Blur:setTopBottom( 0, 0, 79, 131 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.Blur ) --[[ @ 0]]
			f53_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f53_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.LineImage ) --[[ @ 0]]
			f53_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f53_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.ArrowImage ) --[[ @ 0]]
			f53_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f53_arg0.GridBacking:setTopBottom( 0, 0, 79, 131 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.GridBacking ) --[[ @ 0]]
			f53_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f53_arg0.ItemPickupGrid:setTopBottom( 0, 0, 65, 146 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.ItemPickupGrid ) --[[ @ 0]]
			f53_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f53_arg0.ItemHeader:setTopBottom( 0, 0, 25, 65 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.ItemHeader ) --[[ @ 0]]
			f53_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f53_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.HoldButtonIcon ) --[[ @ 0]]
			f53_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f53_arg0.OpenPromptText:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.OpenPromptText ) --[[ @ 0]]
			f53_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f53_arg0.NavigationPrompt:setTopBottom( 0, 0, 73, 137 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f54_arg0, f54_arg1 )
			f54_arg0:__resetProperties() --[[ @ 0]]
			f54_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f54_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f54_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.ArrowImage ) --[[ @ 0]]
			f54_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f54_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.HoldButtonIcon ) --[[ @ 0]]
			f54_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f54_arg0.OpenPromptText:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.OpenPromptText ) --[[ @ 0]]
		end
	},
	LockedPromptSnap = {
		DefaultClip = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f55_arg0.Blur:completeAnimation() --[[ @ 0]]
			f55_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.Blur ) --[[ @ 0]]
			f55_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f55_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.LineImage ) --[[ @ 0]]
			f55_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f55_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.ArrowImage ) --[[ @ 0]]
			f55_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f55_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.GridBacking ) --[[ @ 0]]
			f55_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f55_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.ItemPickupGrid ) --[[ @ 0]]
			f55_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f55_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.ItemHeader ) --[[ @ 0]]
			f55_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f55_arg0.HoldButtonIcon:setTopBottom( 0, 0, 96, 146 ) --[[ @ 0]]
			f55_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.HoldButtonIcon ) --[[ @ 0]]
			f55_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f55_arg0.OpenPromptText:setLeftRight( 0.5, 0.5, -38.5, 38.5 ) --[[ @ 0]]
			f55_arg0.OpenPromptText:setTopBottom( 0, 0, 108.5, 133.5 ) --[[ @ 0]]
			f55_arg0.OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/locked_stash" ) ) --[[ @ 0]]
			f55_arg0.OpenPromptText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.OpenPromptText ) --[[ @ 0]]
			f55_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f55_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	LockedPrompt = {
		DefaultClip = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f56_arg0.Blur:completeAnimation() --[[ @ 0]]
			f56_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.Blur ) --[[ @ 0]]
			f56_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f56_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.ArrowImage ) --[[ @ 0]]
			f56_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f56_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.GridBacking ) --[[ @ 0]]
			f56_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f56_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.ItemPickupGrid ) --[[ @ 0]]
			f56_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f56_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.ItemHeader ) --[[ @ 0]]
			f56_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f56_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.HoldButtonIcon ) --[[ @ 0]]
			f56_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f56_arg0.OpenPromptText:setLeftRight( 0.5, 0.5, -38.5, 38.5 ) --[[ @ 0]]
			f56_arg0.OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/locked_stash" ) ) --[[ @ 0]]
			f56_arg0.OpenPromptText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.OpenPromptText ) --[[ @ 0]]
			f56_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f56_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	OpenPromptSnap = {
		DefaultClip = function ( f57_arg0, f57_arg1 )
			f57_arg0:__resetProperties() --[[ @ 0]]
			f57_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f57_arg0.Blur:completeAnimation() --[[ @ 0]]
			f57_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.Blur ) --[[ @ 0]]
			f57_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f57_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.LineImage ) --[[ @ 0]]
			f57_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f57_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.ArrowImage ) --[[ @ 0]]
			f57_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f57_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.GridBacking ) --[[ @ 0]]
			f57_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f57_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.ItemPickupGrid ) --[[ @ 0]]
			f57_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f57_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.ItemHeader ) --[[ @ 0]]
			f57_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f57_arg0.HoldButtonIcon:setTopBottom( 0, 0, 96, 146 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.HoldButtonIcon ) --[[ @ 0]]
			f57_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f57_arg0.OpenPromptText:setTopBottom( 0, 0, 108.5, 133.5 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.OpenPromptText ) --[[ @ 0]]
			f57_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f57_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	OpenPrompt = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f58_arg0.Blur:completeAnimation() --[[ @ 0]]
			f58_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.Blur ) --[[ @ 0]]
			f58_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f58_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ArrowImage ) --[[ @ 0]]
			f58_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f58_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.GridBacking ) --[[ @ 0]]
			f58_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f58_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ItemPickupGrid ) --[[ @ 0]]
			f58_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f58_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.ItemHeader ) --[[ @ 0]]
			f58_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f58_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	UnlockPromptSnap = {
		DefaultClip = function ( f59_arg0, f59_arg1 )
			f59_arg0:__resetProperties() --[[ @ 0]]
			f59_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f59_arg0.Blur:completeAnimation() --[[ @ 0]]
			f59_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.Blur ) --[[ @ 0]]
			f59_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f59_arg0.LineImage:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.LineImage ) --[[ @ 0]]
			f59_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f59_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ArrowImage ) --[[ @ 0]]
			f59_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f59_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.GridBacking ) --[[ @ 0]]
			f59_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f59_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ItemPickupGrid ) --[[ @ 0]]
			f59_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f59_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.ItemHeader ) --[[ @ 0]]
			f59_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f59_arg0.HoldButtonIcon:setTopBottom( 0, 0, 96, 146 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.HoldButtonIcon ) --[[ @ 0]]
			f59_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f59_arg0.OpenPromptText:setTopBottom( 0, 0, 108.5, 133.5 ) --[[ @ 0]]
			f59_arg0.OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/unlock_stash" ) ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.OpenPromptText ) --[[ @ 0]]
			f59_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f59_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	UnlockPrompt = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f60_arg0.Blur:completeAnimation() --[[ @ 0]]
			f60_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.Blur ) --[[ @ 0]]
			f60_arg0.ArrowImage:completeAnimation() --[[ @ 0]]
			f60_arg0.ArrowImage:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ArrowImage ) --[[ @ 0]]
			f60_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f60_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.GridBacking ) --[[ @ 0]]
			f60_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f60_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ItemPickupGrid ) --[[ @ 0]]
			f60_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f60_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.ItemHeader ) --[[ @ 0]]
			f60_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f60_arg0.OpenPromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"wz/unlock_stash" ) ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.OpenPromptText ) --[[ @ 0]]
			f60_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f60_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	},
	InRange = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f61_arg0.Blur:completeAnimation() --[[ @ 0]]
			f61_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.Blur ) --[[ @ 0]]
			f61_arg0.LineImage:completeAnimation() --[[ @ 0]]
			f61_arg0.LineImage:setTopBottom( 1, 1, -20, 0 ) --[[ @ 0]]
			f61_arg0.LineImage:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LineImage ) --[[ @ 0]]
			f61_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f61_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.GridBacking ) --[[ @ 0]]
			f61_arg0.ItemPickupGrid:completeAnimation() --[[ @ 0]]
			f61_arg0.ItemPickupGrid:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ItemPickupGrid ) --[[ @ 0]]
			f61_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f61_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.ItemHeader ) --[[ @ 0]]
			f61_arg0.HoldButtonIcon:completeAnimation() --[[ @ 0]]
			f61_arg0.HoldButtonIcon:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.HoldButtonIcon ) --[[ @ 0]]
			f61_arg0.OpenPromptText:completeAnimation() --[[ @ 0]]
			f61_arg0.OpenPromptText:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.OpenPromptText ) --[[ @ 0]]
			f61_arg0.NavigationPrompt:completeAnimation() --[[ @ 0]]
			f61_arg0.NavigationPrompt:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.NavigationPrompt ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.MultiItemPickupWaypoint.__onClose = function ( f62_arg0 )
	f62_arg0.ItemHeader:close() --[[ @ 0]]
	f62_arg0.GridBacking:close() --[[ @ 0]]
	f62_arg0.ItemPickupGrid:close() --[[ @ 0]]
	f62_arg0.HoldButtonIcon:close() --[[ @ 0]]
	f62_arg0.NavigationPrompt:close() --[[ @ 0]]
end
 --[[ @ 0]]
