-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:4aebff75d2008873" ) --[[ @ 0]]
require( "x64:438477061097d02f" ) --[[ @ 0]]

CoD.ZmAmmo_BGBCarouselItemInternalFactory = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.__defaultWidth = 30 --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.__defaultHeight = 30 --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZmAmmo_BGBCarouselItemInternalFactory ) --[[ @ 0]]
	self.id = "ZmAmmo_BGBCarouselItemInternalFactory" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local icon = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	icon:setYRot( 360 ) --[[ @ 0]]
	icon:setScale( 0.85, 0.85 ) --[[ @ 0]]
	icon:linkToElementModel( self, "gum_idx", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			icon:setImage( RegisterImage( GetItemImageFromIndex( Enum[@"statindexoffset"][@"hash_648CD0338EE0B3AE"], f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( icon ) --[[ @ 0]]
	self.icon = icon --[[ @ 0]]
	
	local clockOverlay = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	clockOverlay:setRGB( 0.83, 0.83, 0.83 ) --[[ @ 0]]
	clockOverlay:setAlpha( 0 ) --[[ @ 0]]
	clockOverlay:setScale( 0.79, 0.79 ) --[[ @ 0]]
	clockOverlay:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	clockOverlay:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	clockOverlay:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	clockOverlay:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	clockOverlay:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	clockOverlay:linkToElementModel( self, "gum_idx", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			clockOverlay:setImage( RegisterImage( GetItemImageFromIndex( Enum[@"statindexoffset"][@"hash_648CD0338EE0B3AE"], f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	clockOverlay:linkToElementModel( self, "cooldown_perc", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			clockOverlay:setShaderVector( 2, CoD.BGBUtility.CooldownToWideDelta( CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( clockOverlay ) --[[ @ 0]]
	self.clockOverlay = clockOverlay --[[ @ 0]]
	
	local RingTimer = CoD.ZmAmmo_BGBRingTimerFactory.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( RingTimer ) --[[ @ 0]]
	self.RingTimer = RingTimer --[[ @ 0]]
	
	local Cross = LUI.UIImage.new( -0.03, 1.13, -2, -2, -0.03, 1.13, -2, -2 ) --[[ @ 0]]
	Cross:setAlpha( 0 ) --[[ @ 0]]
	Cross:setImage( RegisterImage( @"hash_469BEFB7E55FBA50" ) ) --[[ @ 0]]
	self:addElement( Cross ) --[[ @ 0]]
	self.Cross = Cross --[[ @ 0]]
	
	local ZMConsumableItemCountInGame = CoD.ZMConsumableItemCountInGame.new( f1_arg0, f1_arg1, 0.6, 1.07, 0, 0, 0.6, 1.07, 0, 0 ) --[[ @ 0]]
	ZMConsumableItemCountInGame:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.BGBUtility.IsBGBConsumableInGame( menu, element )
			end
		},
		{
			stateName = "Spectator",
			condition = function ( menu, element, event )
				local f6_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) --[[ @ 0]]
				if not f6_local0 then
					f6_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) --[[ @ 0]]
					if not f6_local0 then
						f6_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) --[[ @ 0]]
					end
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	ZMConsumableItemCountInGame:linkToElementModel( ZMConsumableItemCountInGame, "gum_idx", true, function ( model )
		f1_arg0:updateElementState( ZMConsumableItemCountInGame, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gum_idx"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = ZMConsumableItemCountInGame --[[ @ 0]]
	local f1_local7 = ZMConsumableItemCountInGame.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]], function ( f8_arg0 )
		f1_arg0:updateElementState( ZMConsumableItemCountInGame, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = ZMConsumableItemCountInGame --[[ @ 0]]
	f1_local7 = ZMConsumableItemCountInGame.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f9_arg0 )
		f1_arg0:updateElementState( ZMConsumableItemCountInGame, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = ZMConsumableItemCountInGame --[[ @ 0]]
	f1_local7 = ZMConsumableItemCountInGame.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]], function ( f10_arg0 )
		f1_arg0:updateElementState( ZMConsumableItemCountInGame, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ZMConsumableItemCountInGame:linkToElementModel( self, nil, false, function ( model )
		ZMConsumableItemCountInGame:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ZMConsumableItemCountInGame:linkToElementModel( self, "count", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			ZMConsumableItemCountInGame.Count:setText( CoD.BGBUtility.LimitToRangeWithPlus( 0, 9, f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ZMConsumableItemCountInGame ) --[[ @ 0]]
	self.ZMConsumableItemCountInGame = ZMConsumableItemCountInGame --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Available_Unavailable",
			condition = function ( menu, element, event )
				return CoD.BGBUtility.IsBGBDisabled( f1_arg1, self )
			end
		},
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", CoD.BGBUtility.BGBCarouselStates.ACTIVE )
			end
		},
		{
			stateName = "CoolingDown_LockedDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", CoD.BGBUtility.BGBCarouselStates.COOLING_DOWN ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "lockdown", 1 )
			end
		},
		{
			stateName = "CoolingDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", CoD.BGBUtility.BGBCarouselStates.COOLING_DOWN )
			end
		},
		{
			stateName = "GlobalCooldown_LockedDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "lockdown", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueLessThan( f1_arg1, "BGBCarousel", "global_cooldown", 1 )
			end
		},
		{
			stateName = "GlobalCooldown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueLessThan( f1_arg1, "BGBCarousel", "global_cooldown", 1 )
			end
		},
		{
			stateName = "Available_LockedDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "lockdown", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "unavailable", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "<selfModelValue>state", function ( f21_arg0, f21_arg1 )
		f21_arg1.menu = f21_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f21_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "lockdown", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lockdown"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.BGBCarousel.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.global_cooldown, function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "global_cooldown"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "gum_idx", true, function ( model )
		if CoD.BGBUtility.IsBGBConsumableInGame( f1_arg0, self ) then
			CoD.BGBUtility.SetupBGBConsumableCounts( f1_arg1, self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "scriptNotify", function ( model )
		local f26_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"zombie_bgb_used" ) and not IsSelfPropertyValue( self, "isKBMElixir", 1 ) then
			CoD.BGBUtility.UpdateBGBConsumableCounts( f1_arg1, model, self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.__resetProperties = function ( f27_arg0 )
	f27_arg0.RingTimer:completeAnimation() --[[ @ 0]]
	f27_arg0.icon:completeAnimation() --[[ @ 0]]
	f27_arg0.Cross:completeAnimation() --[[ @ 0]]
	f27_arg0.clockOverlay:completeAnimation() --[[ @ 0]]
	f27_arg0.RingTimer:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.icon:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f27_arg0.icon:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.Cross:setAlpha( 0 ) --[[ @ 0]]
	f27_arg0.clockOverlay:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f28_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f28_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.RingTimer ) --[[ @ 0]]
		end
	},
	Available_Unavailable = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f29_arg0.icon:completeAnimation() --[[ @ 0]]
			f29_arg0.icon:setRGB( 0.33, 0.33, 0.33 ) --[[ @ 0]]
			f29_arg0.icon:setAlpha( 0.75 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.icon ) --[[ @ 0]]
			f29_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f29_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.RingTimer ) --[[ @ 0]]
			f29_arg0.Cross:completeAnimation() --[[ @ 0]]
			f29_arg0.Cross:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.Cross ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	CoolingDown_LockedDown = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f31_arg0.icon:completeAnimation() --[[ @ 0]]
			f31_arg0.icon:setRGB( 0.2, 0.2, 0.2 ) --[[ @ 0]]
			f31_arg0.icon:setAlpha( 0.7 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.icon ) --[[ @ 0]]
			f31_arg0.clockOverlay:completeAnimation() --[[ @ 0]]
			f31_arg0.clockOverlay:setAlpha( 0.7 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.clockOverlay ) --[[ @ 0]]
			f31_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f31_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.RingTimer ) --[[ @ 0]]
		end
	},
	CoolingDown = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f32_arg0.icon:completeAnimation() --[[ @ 0]]
			f32_arg0.icon:setRGB( 0.2, 0.2, 0.2 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.icon ) --[[ @ 0]]
			f32_arg0.clockOverlay:completeAnimation() --[[ @ 0]]
			f32_arg0.clockOverlay:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.clockOverlay ) --[[ @ 0]]
			f32_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f32_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.RingTimer ) --[[ @ 0]]
		end
	},
	GlobalCooldown_LockedDown = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f33_arg0.icon:completeAnimation() --[[ @ 0]]
			f33_arg0.icon:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f33_arg0.icon:setAlpha( 0.7 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.icon ) --[[ @ 0]]
			f33_arg0.clockOverlay:completeAnimation() --[[ @ 0]]
			f33_arg0.clockOverlay:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.clockOverlay ) --[[ @ 0]]
			f33_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f33_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.RingTimer ) --[[ @ 0]]
		end
	},
	GlobalCooldown = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f34_arg0.icon:completeAnimation() --[[ @ 0]]
			f34_arg0.icon:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.icon ) --[[ @ 0]]
			f34_arg0.clockOverlay:completeAnimation() --[[ @ 0]]
			f34_arg0.clockOverlay:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.clockOverlay ) --[[ @ 0]]
			f34_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f34_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.RingTimer ) --[[ @ 0]]
		end
	},
	Available_LockedDown = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f35_arg0.icon:completeAnimation() --[[ @ 0]]
			f35_arg0.icon:setRGB( 0.33, 0.33, 0.33 ) --[[ @ 0]]
			f35_arg0.icon:setAlpha( 0.75 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.icon ) --[[ @ 0]]
			f35_arg0.RingTimer:completeAnimation() --[[ @ 0]]
			f35_arg0.RingTimer:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.RingTimer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZmAmmo_BGBCarouselItemInternalFactory.__onClose = function ( f36_arg0 )
	f36_arg0.icon:close() --[[ @ 0]]
	f36_arg0.clockOverlay:close() --[[ @ 0]]
	f36_arg0.RingTimer:close() --[[ @ 0]]
	f36_arg0.ZMConsumableItemCountInGame:close() --[[ @ 0]]
end
 --[[ @ 0]]
