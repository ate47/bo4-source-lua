-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/cpsystems/revive/bleedout/bleedoutclampedarrow" ) --[[ @ 0]]
require( "x64:39b3bd854cbba790" ) --[[ @ 0]]

CoD.wz_revive_prompt = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.wz_revive_prompt = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "wz_revive_prompt", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.HUDUtility.InitLuiElemSelfModel( self, "clamped", false ) --[[ @ 0]]
	CoD.HUDUtility.InitLuiElemSelfModel( self, "direction", 0 ) --[[ @ 0]]
	self:setClass( CoD.wz_revive_prompt ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local playerName = LUI.UIText.new( 0.5, 0.5, -134, 134, 0, 0, -177, -147 ) --[[ @ 0]]
	playerName:setTTF( "notosans_bold" ) --[[ @ 0]]
	playerName:setLetterSpacing( 1 ) --[[ @ 0]]
	playerName:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	playerName:linkToElementModel( self, "clientnum", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			playerName:setText( GetClientNameAndClanTag( f1_arg0, f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( playerName ) --[[ @ 0]]
	self.playerName = playerName --[[ @ 0]]
	
	local bleedOutHealth0 = CoD.bleedOutHealthWZ.new( f1_local1, f1_arg0, 0, 1, -105, 105, 0, 1, -187.5, 22.5 ) --[[ @ 0]]
	bleedOutHealth0:setScale( 0.5, 0.5 ) --[[ @ 0]]
	bleedOutHealth0:linkToElementModel( self, nil, false, function ( model )
		bleedOutHealth0:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( bleedOutHealth0 ) --[[ @ 0]]
	self.bleedOutHealth0 = bleedOutHealth0 --[[ @ 0]]
	
	local clamparrow = CoD.bleedOutClampedArrow.new( f1_local1, f1_arg0, 0.5, 0.5, -195, 195, 0.5, 0.5, -143.5, -47.5 ) --[[ @ 0]]
	clamparrow:setAlpha( 0.4 ) --[[ @ 0]]
	clamparrow:setScale( 0.5, 0.5 ) --[[ @ 0]]
	clamparrow:linkToElementModel( self, "direction", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			clamparrow:setZRot( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( clamparrow ) --[[ @ 0]]
	self.clamparrow = clamparrow --[[ @ 0]]
	
	local iconarrow = LUI.UIImage.new( 0.5, 0.5, -32, 32, 0.5, 0.5, -48, 16 ) --[[ @ 0]]
	iconarrow:setAlpha( 0.55 ) --[[ @ 0]]
	iconarrow:setScale( 0.75, 0.75 ) --[[ @ 0]]
	iconarrow:setImage( RegisterImage( @"uie_ui_hud_revive_arrow" ) ) --[[ @ 0]]
	self:addElement( iconarrow ) --[[ @ 0]]
	self.iconarrow = iconarrow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden_Self",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToClientModelValue( f1_arg0, element, "clientnum", "clientNum" )
			end
		},
		{
			stateName = "Clamped",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg0, "clamped" ) --[[ @ 0]]
				if f6_local0 then
					if not CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( element, f1_arg0, "hudItems.laststand.revivingClientNum", "clientNum" ) and not Engine[@"isvisibilitybitset"]( f1_arg0, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) then
						f6_local0 = not Engine[@"isvisibilitybitset"]( f1_arg0, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
					else
						f6_local0 = false --[[ @ 0]]
					end
				end
				return f6_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f7_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( element, f1_arg0, "hudItems.laststand.revivingClientNum", "clientNum" ) and not Engine[@"isvisibilitybitset"]( f1_arg0, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) then
					f7_local0 = not Engine[@"isvisibilitybitset"]( f1_arg0, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
				else
					f7_local0 = false --[[ @ 0]]
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "clientnum", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "clientnum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforclient"]( Engine[@"getclientnum"]( f1_arg0 ) ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.clientNum, function ( f9_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f9_arg0:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "clamped", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.laststand.revivingClientNum"], function ( f11_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f11_arg0:get(),
			modelName = "hudItems.laststand.revivingClientNum"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "clientNum", true, function ( model )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]], function ( f13_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f14_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local7 = self --[[ @ 0]]
	CoD.HUDUtility.LinkSetupEntityContainerToModel( self, "clientnum", true, true, 0, 0, 25 ) --[[ @ 0]]
	CoD.WZUtility.SetupLastStandClientModelUpdate( f1_local1, self, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.wz_revive_prompt.__resetProperties = function ( f15_arg0 )
	f15_arg0.playerName:completeAnimation() --[[ @ 0]]
	f15_arg0.bleedOutHealth0:completeAnimation() --[[ @ 0]]
	f15_arg0.clamparrow:completeAnimation() --[[ @ 0]]
	f15_arg0.iconarrow:completeAnimation() --[[ @ 0]]
	f15_arg0.playerName:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.bleedOutHealth0:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.clamparrow:setAlpha( 0.4 ) --[[ @ 0]]
	f15_arg0.iconarrow:setAlpha( 0.55 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.wz_revive_prompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f16_arg0.playerName:completeAnimation() --[[ @ 0]]
			f16_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.playerName ) --[[ @ 0]]
			f16_arg0.bleedOutHealth0:completeAnimation() --[[ @ 0]]
			f16_arg0.bleedOutHealth0:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.bleedOutHealth0 ) --[[ @ 0]]
			f16_arg0.clamparrow:completeAnimation() --[[ @ 0]]
			f16_arg0.clamparrow:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.clamparrow ) --[[ @ 0]]
			f16_arg0.iconarrow:completeAnimation() --[[ @ 0]]
			f16_arg0.iconarrow:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.iconarrow ) --[[ @ 0]]
		end
	},
	Hidden_Self = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f17_arg0.playerName:completeAnimation() --[[ @ 0]]
			f17_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.playerName ) --[[ @ 0]]
			f17_arg0.bleedOutHealth0:completeAnimation() --[[ @ 0]]
			f17_arg0.bleedOutHealth0:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.bleedOutHealth0 ) --[[ @ 0]]
			f17_arg0.clamparrow:completeAnimation() --[[ @ 0]]
			f17_arg0.clamparrow:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.clamparrow ) --[[ @ 0]]
			f17_arg0.iconarrow:completeAnimation() --[[ @ 0]]
			f17_arg0.iconarrow:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.iconarrow ) --[[ @ 0]]
		end
	},
	Clamped = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.playerName:completeAnimation() --[[ @ 0]]
			f18_arg0.playerName:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.playerName ) --[[ @ 0]]
			f18_arg0.iconarrow:completeAnimation() --[[ @ 0]]
			f18_arg0.iconarrow:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.iconarrow ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.clamparrow:completeAnimation() --[[ @ 0]]
			f19_arg0.clamparrow:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.clamparrow ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.wz_revive_prompt.__onClose = function ( f20_arg0 )
	f20_arg0.playerName:close() --[[ @ 0]]
	f20_arg0.bleedOutHealth0:close() --[[ @ 0]]
	f20_arg0.clamparrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
