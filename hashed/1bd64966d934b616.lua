-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:ca5faac82324b65" ) --[[ @ 0]]
require( "x64:1af2dff4ae61e4b5" ) --[[ @ 0]]
require( "x64:c96de52191fe142" ) --[[ @ 0]]
require( "x64:750b038c79ef8c66" ) --[[ @ 0]]
require( "x64:54a5097aa463512f" ) --[[ @ 0]]
require( "x64:564d08790fc84eef" ) --[[ @ 0]]
require( "x64:703ab95527d1d578" ) --[[ @ 0]]
require( "x64:12d64ca9d3c705ce" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "x64:443a18b0c952dcc0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/lobby/common/layoutelements/commonsearchingbar" ) --[[ @ 0]]
require( "x64:40c7e896ee4bc3f8" ) --[[ @ 0]]

CoD.AARTierReward = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.AARTierReward = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "AARTierReward", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.AARUtility.SetupTierRewardModels( f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.BlackMarketUtility.UpdateAllRngUnlockedModel( f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.AARTierReward ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local BackgroundImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BackgroundImage:setAlpha( 0.85 ) --[[ @ 0]]
	BackgroundImage:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BackgroundImage ) --[[ @ 0]]
	self.BackgroundImage = BackgroundImage --[[ @ 0]]
	
	local EmptySlots = CoD.AARTierRewardSlotEmptyContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -842.5, 842.5, 0, 0, 170, 801 ) --[[ @ 0]]
	EmptySlots:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( EmptySlots ) --[[ @ 0]]
	self.EmptySlots = EmptySlots --[[ @ 0]]
	
	local FramingCornerBrackets = CoD.CommonCornerBrackets01.new( f1_local1, f1_arg0, 0.5, 0.5, -851, 851, 0, 0, 122, 850 ) --[[ @ 0]]
	FramingCornerBrackets:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( FramingCornerBrackets ) --[[ @ 0]]
	self.FramingCornerBrackets = FramingCornerBrackets --[[ @ 0]]
	
	local DottedLineBtm = LUI.UIImage.new( 0.5, 0.5, -832, 832, 0, 0, 831, 835 ) --[[ @ 0]]
	DottedLineBtm:setAlpha( 0.35 ) --[[ @ 0]]
	DottedLineBtm:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DottedLineBtm:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DottedLineBtm:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DottedLineBtm:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DottedLineBtm ) --[[ @ 0]]
	self.DottedLineBtm = DottedLineBtm --[[ @ 0]]
	
	local DottedLineTop = LUI.UIImage.new( 0.5, 0.5, -832, 832, 0, 0, 137, 141 ) --[[ @ 0]]
	DottedLineTop:setAlpha( 0.35 ) --[[ @ 0]]
	DottedLineTop:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DottedLineTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DottedLineTop:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DottedLineTop:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DottedLineTop ) --[[ @ 0]]
	self.DottedLineTop = DottedLineTop --[[ @ 0]]
	
	local NoiseTiledBackingLeft = LUI.UIImage.new( 0.5, 0.5, -818, -566, 0.5, 0.5, -393.5, 269.5 ) --[[ @ 0]]
	NoiseTiledBackingLeft:setAlpha( 0.4 ) --[[ @ 0]]
	NoiseTiledBackingLeft:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBackingLeft:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBackingLeft:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBackingLeft:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBackingLeft ) --[[ @ 0]]
	self.NoiseTiledBackingLeft = NoiseTiledBackingLeft --[[ @ 0]]
	
	local NoiseTiledBackingRight = LUI.UIImage.new( 0.5, 0.5, -544, 825, 0.5, 0.5, -393.5, 269.5 ) --[[ @ 0]]
	NoiseTiledBackingRight:setAlpha( 0.4 ) --[[ @ 0]]
	NoiseTiledBackingRight:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBackingRight:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBackingRight:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBackingRight:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBackingRight ) --[[ @ 0]]
	self.NoiseTiledBackingRight = NoiseTiledBackingRight --[[ @ 0]]
	
	local TierBar = CoD.AARTierBar.new( f1_local1, f1_arg0, 0.5, 0.5, -675, 675, 1, 1, -143, -123 ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", nil, function ( model )
		TierBar:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "earnedBarProgress", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			TierBar.EarnedXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "earnedBarProgress", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			TierBar.EarnedXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "earnedBarProgress", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			TierBar.EarnedXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "previousBarProgress", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			TierBar.PreviousXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "previousBarProgress", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			TierBar.PreviousXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f7_local0, 1 ), CoD.GetVectorComponentFromString( f7_local0, 2 ), CoD.GetVectorComponentFromString( f7_local0, 3 ), CoD.GetVectorComponentFromString( f7_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:subscribeToGlobalModel( f1_arg0, "AARTierReward", "previousBarProgress", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			TierBar.PreviousXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f8_local0, 1 ), CoD.GetVectorComponentFromString( f8_local0, 2 ), CoD.GetVectorComponentFromString( f8_local0, 3 ), CoD.GetVectorComponentFromString( f8_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:linkToElementModel( self, "barCurrentTier", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			TierBar.CurrentTier:setText( LocalizeStringWithParameter( @"hash_1E743A7E5D0C37CD", f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierBar:linkToElementModel( self, "barNextTier", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			TierBar.NextTier:setText( LocalizeStringWithParameter( @"hash_1E743A7E5D0C37CD", f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TierBar ) --[[ @ 0]]
	self.TierBar = TierBar --[[ @ 0]]
	
	local ThinBarBG = LUI.UIImage.new( 0.5, 0.5, -802, -584, 0, 0, 158, 159 ) --[[ @ 0]]
	ThinBarBG:setRGB( 0.88, 0.9, 0.79 ) --[[ @ 0]]
	ThinBarBG:setAlpha( 0.4 ) --[[ @ 0]]
	self:addElement( ThinBarBG ) --[[ @ 0]]
	self.ThinBarBG = ThinBarBG --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f11_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f11_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f11_local0 then
			f11_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local CurrentTier = CoD.AARTierRewardColumn.new( f1_local1, f1_arg0, 0.5, 0.5, -808.5, -693.5, 0, 0, 162, 794 ) --[[ @ 0]]
	CurrentTier:subscribeToGlobalModel( f1_arg0, "AARTierReward", "currentTier", function ( model )
		CurrentTier:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CurrentTier ) --[[ @ 0]]
	self.CurrentTier = CurrentTier --[[ @ 0]]
	
	local NextTier = CoD.AARTierRewardColumn.new( f1_local1, f1_arg0, 0.5, 0.5, -693.5, -578.5, 0, 0, 162, 794 ) --[[ @ 0]]
	NextTier:subscribeToGlobalModel( f1_arg0, "AARTierReward", "nextTier", function ( model )
		NextTier:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( NextTier ) --[[ @ 0]]
	self.NextTier = NextTier --[[ @ 0]]
	
	local ShowcaseList = LUI.UIList.new( f1_local1, f1_arg0, 30, 0, nil, false, false, false, false ) --[[ @ 0]]
	ShowcaseList:setLeftRight( 0.5, 0.5, -525.5, 804.5 ) --[[ @ 0]]
	ShowcaseList:setTopBottom( 0, 0, 163.5, 794.5 ) --[[ @ 0]]
	ShowcaseList:setWidgetType( CoD.AARTierRewardShowcase ) --[[ @ 0]]
	ShowcaseList:setHorizontalCount( 4 ) --[[ @ 0]]
	ShowcaseList:setSpacing( 30 ) --[[ @ 0]]
	ShowcaseList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ShowcaseList:subscribeToGlobalModel( f1_arg0, "AARTierReward", "showcaseDataSource", function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			ShowcaseList:setDataSource( f14_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ShowcaseList:subscribeToGlobalModel( f1_arg0, "AARTierReward", "currentTier.triggerUnlock", function ( model )
		local f15_local0 = ShowcaseList --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueTrue( f1_arg0, "AAR.tierReward.currentTier.triggerUnlock" ) then
			CoD.AARUtility.UnlockTierRewardShowcase( f1_arg0, f15_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ShowcaseList:subscribeToGlobalModel( f1_arg0, "AARTierReward", "currentTier.tier", function ( model )
		CoD.AARUtility.UnlockTierRewardShowcase( f1_arg0, ShowcaseList ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ShowcaseList:subscribeToGlobalModel( f1_arg0, "AARTierReward", "lootCaseEarned", function ( model )
		local f17_local0 = ShowcaseList --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg0, "AARTierReward", "lootCaseEarned" ) then
			CoD.AARUtility.UnlockTierRewardShowcase( f1_arg0, f17_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ShowcaseList ) --[[ @ 0]]
	self.ShowcaseList = ShowcaseList --[[ @ 0]]
	
	local Title = CoD.AARTierRewardTitle.new( f1_local1, f1_arg0, 0.5, 0.5, -729, 71, 0, 0, 75, 125 ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local CommonSearchingBar = CoD.CommonSearchingBar.new( f1_local1, f1_arg0, 0.5, 0.5, 774, 896, 0, 0, 113, 135 ) --[[ @ 0]]
	CommonSearchingBar:setAlpha( 0.5 ) --[[ @ 0]]
	CommonSearchingBar:setScale( 0.5, 0.5 ) --[[ @ 0]]
	self:addElement( CommonSearchingBar ) --[[ @ 0]]
	self.CommonSearchingBar = CommonSearchingBar --[[ @ 0]]
	
	local DupeMeter = CoD.DupeMeter.new( f1_local1, f1_arg0, 0.5, 0.5, -818, -452, 1, 1, -230, -196 ) --[[ @ 0]]
	self:addElement( DupeMeter ) --[[ @ 0]]
	self.DupeMeter = DupeMeter --[[ @ 0]]
	
	local BlackMarketIcon = LUI.UIImage.new( 0.5, 0.5, -840, -740, 0, 0, 35, 135 ) --[[ @ 0]]
	BlackMarketIcon:setImage( RegisterImage( @"ui_icon_blackmarket_lockskull_256" ) ) --[[ @ 0]]
	self:addElement( BlackMarketIcon ) --[[ @ 0]]
	self.BlackMarketIcon = BlackMarketIcon --[[ @ 0]]
	
	local Rewards = LUI.UIText.new( 0.5, 0.5, -728, -266, 0, 0, 54, 74 ) --[[ @ 0]]
	Rewards:setRGB( 0.86, 0.74, 0.25 ) --[[ @ 0]]
	Rewards:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/black_market" ) ) --[[ @ 0]]
	Rewards:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Rewards:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	Rewards:setShaderVector( 0, 0.77, 0, 0, 0 ) --[[ @ 0]]
	Rewards:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	Rewards:setShaderVector( 2, 1, 0.31, 0, 0.3 ) --[[ @ 0]]
	Rewards:setLetterSpacing( 8 ) --[[ @ 0]]
	Rewards:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Rewards:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Rewards ) --[[ @ 0]]
	self.Rewards = Rewards --[[ @ 0]]
	
	local AARTierSkipNotification = CoD.AARTierSkipNotification.new( f1_local1, f1_arg0, 0.5, 0.5, 11.5, 269.5, 0, 0, 850, 930 ) --[[ @ 0]]
	AARTierSkipNotification:subscribeToGlobalModel( f1_arg0, "AARTierReward", nil, function ( model )
		AARTierSkipNotification:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AARTierSkipNotification ) --[[ @ 0]]
	self.AARTierSkipNotification = AARTierSkipNotification --[[ @ 0]]
	
	local TrialInfoBannerWidget = CoD.TrialInfoBannerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -723, 0, 0.5, 0.5, 425, 460 ) --[[ @ 0]]
	TrialInfoBannerWidget:mergeStateConditions( {
		{
			stateName = "Shown",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysFalse()
			end
		},
		{
			stateName = "ShownLarge",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	TrialInfoBannerWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6C0FFDDCA009994B" ) ) --[[ @ 0]]
	self:addElement( TrialInfoBannerWidget ) --[[ @ 0]]
	self.TrialInfoBannerWidget = TrialInfoBannerWidget --[[ @ 0]]
	
	local LootCaseMeter = CoD.AARTierRewardLootCaseMeter.new( f1_local1, f1_arg0, 0.5, 0.5, 700, 850, 0, 0, 10, 160 ) --[[ @ 0]]
	LootCaseMeter:setScale( 0.7, 0.7 ) --[[ @ 0]]
	LootCaseMeter:subscribeToGlobalModel( f1_arg0, "AARTierReward", "lootCaseProgress", function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			LootCaseMeter.CurrentProgressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f21_local0, 1 ), CoD.GetVectorComponentFromString( f21_local0, 2 ), CoD.GetVectorComponentFromString( f21_local0, 3 ), CoD.GetVectorComponentFromString( f21_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LootCaseMeter:subscribeToGlobalModel( f1_arg0, "AARTierReward", "previousLootCaseProgress", function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			LootCaseMeter.PreviousProgressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f22_local0, 1 ), CoD.GetVectorComponentFromString( f22_local0, 2 ), CoD.GetVectorComponentFromString( f22_local0, 3 ), CoD.GetVectorComponentFromString( f22_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LootCaseMeter:subscribeToGlobalModel( f1_arg0, "AARTierReward", "lootCaseCount", function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			LootCaseMeter.CaseCount:setText( f23_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LootCaseMeter:subscribeToGlobalModel( f1_arg0, "AARTierReward", "lootCaseEarned", function ( model )
		local f24_local0 = LootCaseMeter --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg0, "AARTierReward", "lootCaseEarned" ) then
			PlayClipOnElement( self, {
				elementName = "LootCaseMeter",
				clipName = "GetCase"
			}, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( LootCaseMeter ) --[[ @ 0]]
	self.LootCaseMeter = LootCaseMeter --[[ @ 0]]
	
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.AARUtility.CloseTierRewardOverlay( menu, controller ) --[[ @ 0]]
		PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], "ESCAPE", function ( element, menu, controller, model )
		if IsPC() then
			CoD.AARUtility.CloseTierRewardOverlay( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "AARTierReward", "allAnimationsFinished", function ( model )
		local f29_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueTrue( f1_arg0, "AAR.tierReward.allAnimationsFinished" ) then
			CoD.AARUtility.SetShowcaseInputState( self, f1_arg0 ) --[[ @ 0]]
			CoD.AARUtility.SetShowcaseInputState( self.ShowcaseList, f1_arg0 ) --[[ @ 0]]
			CoD.AARUtility.AddHorizontalCounterToList( self.ShowcaseList, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	CurrentTier.id = "CurrentTier" --[[ @ 0]]
	NextTier.id = "NextTier" --[[ @ 0]]
	ShowcaseList.id = "ShowcaseList" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = ShowcaseList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local24 = self --[[ @ 0]]
	SetMenuProperty( f1_local1, "m_disableNavigation", true ) --[[ @ 0]]
	SetElementProperty( self.ShowcaseList, "m_disableNavigation", true ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "hasAnimatedLootCaseProgress", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.AARTierReward.__onClose = function ( f30_arg0 )
	f30_arg0.EmptySlots:close() --[[ @ 0]]
	f30_arg0.FramingCornerBrackets:close() --[[ @ 0]]
	f30_arg0.TierBar:close() --[[ @ 0]]
	f30_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f30_arg0.CurrentTier:close() --[[ @ 0]]
	f30_arg0.NextTier:close() --[[ @ 0]]
	f30_arg0.ShowcaseList:close() --[[ @ 0]]
	f30_arg0.Title:close() --[[ @ 0]]
	f30_arg0.CommonSearchingBar:close() --[[ @ 0]]
	f30_arg0.DupeMeter:close() --[[ @ 0]]
	f30_arg0.AARTierSkipNotification:close() --[[ @ 0]]
	f30_arg0.TrialInfoBannerWidget:close() --[[ @ 0]]
	f30_arg0.LootCaseMeter:close() --[[ @ 0]]
end
 --[[ @ 0]]
