-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:16ec0690014b8ff0" ) --[[ @ 0]]
require( "x64:51f3dba742640cfa" ) --[[ @ 0]]
require( "x64:298de092f5b8db48" ) --[[ @ 0]]
require( "x64:7c373b5a993aef46" ) --[[ @ 0]]
require( "x64:2e7c33fa6fce93e4" ) --[[ @ 0]]
require( "x64:694e166fa0d10785" ) --[[ @ 0]]

CoD.HealthInfoZM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.HealthInfoZM.__defaultWidth = 238 --[[ @ 0]]
CoD.HealthInfoZM.__defaultHeight = 112 --[[ @ 0]]
CoD.HealthInfoZM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.HealthInfoZM ) --[[ @ 0]]
	self.id = "HealthInfoZM" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ArmorPortrait = CoD.ArmorPortraitZM.new( f1_arg0, f1_arg1, 0, 0, 264, 314, 0, 0, 11.5, 61.5 ) --[[ @ 0]]
	ArmorPortrait:linkToElementModel( self, nil, false, function ( model )
		ArmorPortrait:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArmorPortrait ) --[[ @ 0]]
	self.ArmorPortrait = ArmorPortrait --[[ @ 0]]
	
	local HealCooldown = CoD.HealCooldown.new( f1_arg0, f1_arg1, 0, 0, 107, 179, 0, 0, 35, 75 ) --[[ @ 0]]
	HealCooldown:setAlpha( 0 ) --[[ @ 0]]
	HealCooldown:subscribeToGlobalModel( f1_arg1, "PlayerAbilities", "playerGadget1", function ( model )
		HealCooldown:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HealCooldown ) --[[ @ 0]]
	self.HealCooldown = HealCooldown --[[ @ 0]]
	
	local ArmorBar = CoD.ArmorBarZM.new( f1_arg0, f1_arg1, 0, 0, 132, 266, 0, 0, 25.5, 29.5 ) --[[ @ 0]]
	ArmorBar:linkToElementModel( self, nil, false, function ( model )
		ArmorBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArmorBar ) --[[ @ 0]]
	self.ArmorBar = ArmorBar --[[ @ 0]]
	
	local HealthBar = CoD.HealthBarWidgetZM.new( f1_arg0, f1_arg1, 0, 0, 123, 275, 0, 0, 32.5, 43.5 ) --[[ @ 0]]
	HealthBar:setScale( 0.9, 0.9 ) --[[ @ 0]]
	HealthBar:linkToElementModel( self, "health", false, function ( model )
		HealthBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HealthBar ) --[[ @ 0]]
	self.HealthBar = HealthBar --[[ @ 0]]
	
	local HealthValue = LUI.UIText.new( 0, 0, 64, 128, 0, 0, 30, 50 ) --[[ @ 0]]
	HealthValue:setTTF( "skorzhen" ) --[[ @ 0]]
	HealthValue:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	HealthValue:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
	HealthValue:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	HealthValue:setShaderVector( 2, 1, 1, 1, 0.55 ) --[[ @ 0]]
	HealthValue:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	HealthValue:setLetterSpacing( 2 ) --[[ @ 0]]
	HealthValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	HealthValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	HealthValue:linkToElementModel( self, "health.healthValue", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			HealthValue:setText( CoD.BaseUtility.AlreadyLocalized( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HealthValue ) --[[ @ 0]]
	self.HealthValue = HealthValue --[[ @ 0]]
	
	local GlowBlueOver = LUI.UIImage.new( 0, 0, 86, 134, 0, 0, 14.5, 282.5 ) --[[ @ 0]]
	GlowBlueOver:setAlpha( 0 ) --[[ @ 0]]
	GlowBlueOver:setZRot( 90 ) --[[ @ 0]]
	GlowBlueOver:setImage( RegisterImage( @"uie_t7_core_hud_mapwidget_panelglow" ) ) --[[ @ 0]]
	GlowBlueOver:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( GlowBlueOver ) --[[ @ 0]]
	self.GlowBlueOver = GlowBlueOver --[[ @ 0]]
	
	local HealthDOT = CoD.HealthDOT.new( f1_arg0, f1_arg1, 0, 0, 267, 367, 0, 0, 66, 94 ) --[[ @ 0]]
	HealthDOT:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( HealthDOT ) --[[ @ 0]]
	self.HealthDOT = HealthDOT --[[ @ 0]]
	
	local HealthBoostNotificationContainer = CoD.HealthBoostNotificationContainer.new( f1_arg0, f1_arg1, 0, 0, 67, 131, 0, 0, 30, 50 ) --[[ @ 0]]
	self:addElement( HealthBoostNotificationContainer ) --[[ @ 0]]
	self.HealthBoostNotificationContainer = HealthBoostNotificationContainer --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsAnyGameType( f1_arg1, "zstandard" ) and CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "dead" )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "zstandard" ) --[[ @ 0]]
				if f8_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) then
						f8_local0 = not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) --[[ @ 0]]
					else
						f8_local0 = false --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				local f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) --[[ @ 0]]
				if not f9_local0 then
					f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) --[[ @ 0]]
					if not f9_local0 then
						f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
						if not f9_local0 then
							f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) --[[ @ 0]]
							if not f9_local0 then
								if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) then
									f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) --[[ @ 0]]
									if not f9_local0 then
										f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) --[[ @ 0]]
										if not f9_local0 then
											f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) --[[ @ 0]]
											if not f9_local0 then
												f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) --[[ @ 0]]
												if not f9_local0 then
													f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) --[[ @ 0]]
													if not f9_local0 then
														f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) --[[ @ 0]]
														if not f9_local0 then
															f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) --[[ @ 0]]
															if not f9_local0 then
																f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
																if not f9_local0 then
																	f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
																	if not f9_local0 then
																		f9_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) --[[ @ 0]]
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								else
									f9_local0 = true --[[ @ 0]]
								end
							end
						end
					end
				end
				return f9_local0
			end
		},
		{
			stateName = "LowHealth",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsCharacterInCriticalState( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "dead", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "dead"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local9 = self --[[ @ 0]]
	local f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local9, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "health.healthValue", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "health.healthValue"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local10 = self --[[ @ 0]]
	if IsMultiplayer() then
		CoD.HUDUtility.UpdateClientHealth( self, f1_arg1 ) --[[ @ 0]]
		CoD.HealthUtility.InitHealthBarLossPulse( self, self.HealthBar, f1_arg1, CoD.HealthBarWidgetPulse, f1_arg0 ) --[[ @ 0]]
	elseif IsZombies() then
		CoD.HUDUtility.UpdateClientHealth( self, f1_arg1 ) --[[ @ 0]]
		CoD.HealthUtility.InitHealthBarLossPulse( self, self.HealthBar, f1_arg1, CoD.HealthBarWidgetPulse, f1_arg0 ) --[[ @ 0]]
	else
		CoD.HUDUtility.UpdateClientHealth( self, f1_arg1 ) --[[ @ 0]]
	end
	f1_local10 = HealthBoostNotificationContainer --[[ @ 0]]
	if IsMultiplayer() then
		CoD.HUDUtility.InitHealthBoostNotification( self, f1_local10, f1_arg1, f1_arg0, CoD.HealthBoostNotification ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.HealthInfoZM.__resetProperties = function ( f28_arg0 )
	f28_arg0.HealthValue:completeAnimation() --[[ @ 0]]
	f28_arg0.GlowBlueOver:completeAnimation() --[[ @ 0]]
	f28_arg0.HealthDOT:completeAnimation() --[[ @ 0]]
	f28_arg0.HealthBar:completeAnimation() --[[ @ 0]]
	f28_arg0.ArmorPortrait:completeAnimation() --[[ @ 0]]
	f28_arg0.HealthBoostNotificationContainer:completeAnimation() --[[ @ 0]]
	f28_arg0.ArmorBar:completeAnimation() --[[ @ 0]]
	f28_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
	f28_arg0.HealthValue:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f28_arg0.HealthValue:setAlpha( 1 ) --[[ @ 0]]
	f28_arg0.HealthValue:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	f28_arg0.HealthValue:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
	f28_arg0.HealthValue:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f28_arg0.HealthValue:setShaderVector( 2, 1, 1, 1, 0.55 ) --[[ @ 0]]
	f28_arg0.HealthValue:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	f28_arg0.HealthValue:setBackingMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
	f28_arg0.HealthValue:setBackingMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	f28_arg0.GlowBlueOver:setAlpha( 0 ) --[[ @ 0]]
	f28_arg0.HealthDOT:setAlpha( 0 ) --[[ @ 0]]
	f28_arg0.HealthBar:setAlpha( 1 ) --[[ @ 0]]
	f28_arg0.ArmorPortrait:setAlpha( 1 ) --[[ @ 0]]
	f28_arg0.HealthBoostNotificationContainer:setAlpha( 1 ) --[[ @ 0]]
	f28_arg0.ArmorBar:setAlpha( 1 ) --[[ @ 0]]
	f28_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.HealthInfoZM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f30_arg0.ArmorPortrait:completeAnimation() --[[ @ 0]]
			f30_arg0.ArmorPortrait:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ArmorPortrait ) --[[ @ 0]]
			f30_arg0.ArmorBar:completeAnimation() --[[ @ 0]]
			f30_arg0.ArmorBar:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ArmorBar ) --[[ @ 0]]
			f30_arg0.HealthBar:completeAnimation() --[[ @ 0]]
			f30_arg0.HealthBar:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.HealthBar ) --[[ @ 0]]
			f30_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f30_arg0.HealthValue:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.HealthValue ) --[[ @ 0]]
			f30_arg0.GlowBlueOver:completeAnimation() --[[ @ 0]]
			f30_arg0.GlowBlueOver:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.GlowBlueOver ) --[[ @ 0]]
			f30_arg0.HealthDOT:completeAnimation() --[[ @ 0]]
			f30_arg0.HealthDOT:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.HealthDOT ) --[[ @ 0]]
			f30_arg0.HealthBoostNotificationContainer:completeAnimation() --[[ @ 0]]
			f30_arg0.HealthBoostNotificationContainer:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.HealthBoostNotificationContainer ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f32_arg0.ArmorBar:completeAnimation() --[[ @ 0]]
			f32_arg0.ArmorBar:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ArmorBar ) --[[ @ 0]]
			f32_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f32_arg0.HealthValue:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.HealthValue ) --[[ @ 0]]
			f32_arg0.GlowBlueOver:completeAnimation() --[[ @ 0]]
			f32_arg0.GlowBlueOver:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.GlowBlueOver ) --[[ @ 0]]
			f32_arg0.HealthDOT:completeAnimation() --[[ @ 0]]
			f32_arg0.HealthDOT:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.HealthDOT ) --[[ @ 0]]
		end
	},
	LowHealth = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f33_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
			f33_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.HealCooldown ) --[[ @ 0]]
			local f33_local0 = function ( f34_arg0 )
				local f34_local0 = function ( f35_arg0 )
					local f35_local0 = function ( f36_arg0 )
						local f36_local0 = function ( f37_arg0 )
							f37_arg0:beginAnimation( 350 ) --[[ @ 0]]
							f37_arg0:setRGB( 1, 0.42, 0.42 ) --[[ @ 0]]
							f37_arg0:registerEventHandler( "transition_complete_keyframe", f33_arg0.clipFinished ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f36_arg0:beginAnimation( 440 ) --[[ @ 0]]
						f36_arg0:registerEventHandler( "transition_complete_keyframe", f36_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f35_arg0:beginAnimation( 460 ) --[[ @ 0]]
					f35_arg0:setRGB( 1, 0, 0 ) --[[ @ 0]]
					f35_arg0:registerEventHandler( "transition_complete_keyframe", f35_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f33_arg0.HealthValue:beginAnimation( 330 ) --[[ @ 0]]
				f33_arg0.HealthValue:setRGB( 1, 0.42, 0.42 ) --[[ @ 0]]
				f33_arg0.HealthValue:registerEventHandler( "interrupted_keyframe", f33_arg0.clipInterrupted ) --[[ @ 0]]
				f33_arg0.HealthValue:registerEventHandler( "transition_complete_keyframe", f34_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f33_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f33_arg0.HealthValue:setRGB( 1, 0.04, 0.04 ) --[[ @ 0]]
			f33_arg0.HealthValue:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
			f33_arg0.HealthValue:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
			f33_arg0.HealthValue:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f33_arg0.HealthValue:setShaderVector( 2, 1, 0, 0, 0.55 ) --[[ @ 0]]
			f33_arg0.HealthValue:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
			f33_arg0.HealthValue:setBackingMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
			f33_arg0.HealthValue:setBackingMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
			f33_local0( f33_arg0.HealthValue ) --[[ @ 0]]
			f33_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.HealthInfoZM.__onClose = function ( f38_arg0 )
	f38_arg0.ArmorPortrait:close() --[[ @ 0]]
	f38_arg0.HealCooldown:close() --[[ @ 0]]
	f38_arg0.ArmorBar:close() --[[ @ 0]]
	f38_arg0.HealthBar:close() --[[ @ 0]]
	f38_arg0.HealthValue:close() --[[ @ 0]]
	f38_arg0.HealthDOT:close() --[[ @ 0]]
	f38_arg0.HealthBoostNotificationContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
