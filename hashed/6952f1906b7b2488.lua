-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/vehiclehuds/buttons/vhud_button_backing_lines" ) --[[ @ 0]]
require( "x64:7e09bcc7e0af69ad" ) --[[ @ 0]]

CoD.vhud_ms_ButtonWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.__defaultWidth = 129 --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.__defaultHeight = 163 --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_ms_ButtonWidget ) --[[ @ 0]]
	self.id = "vhud_ms_ButtonWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backinglines = CoD.vhud_button_backing_lines.new( f1_arg0, f1_arg1, 0.5, 0.5, -55, 55, 0.5, 0.5, -59, 51 ) --[[ @ 0]]
	backinglines:subscribeToGlobalModel( f1_arg1, "PerController", "vehicle.bindings.color", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			backinglines:setRGB( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( backinglines ) --[[ @ 0]]
	self.backinglines = backinglines --[[ @ 0]]
	
	local prompt = LUI.UIText.new( 0.5, 0.5, -150, 150, 0.5, 0.5, 40, 64 ) --[[ @ 0]]
	prompt:setTTF( "dinnext_regular" ) --[[ @ 0]]
	prompt:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	prompt:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	prompt:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	prompt:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	prompt:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	prompt:setLetterSpacing( 0.5 ) --[[ @ 0]]
	prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	prompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	prompt:linkToElementModel( self, "text", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( prompt ) --[[ @ 0]]
	self.prompt = prompt --[[ @ 0]]
	
	local button0 = LUI.UIImage.new( 0.5, 0.5, -20, 21, 0.5, 0.5, -16, 23 ) --[[ @ 0]]
	button0:setAlpha( 0.1 ) --[[ @ 0]]
	button0:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_scanlines_add" ) ) --[[ @ 0]]
	button0:setShaderVector( 0, 2.91, 0, 0, 0 ) --[[ @ 0]]
	button0:setShaderVector( 1, 1, 0, 0, 0 ) --[[ @ 0]]
	button0:setShaderVector( 2, 0.03, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( button0 ) --[[ @ 0]]
	self.button0 = button0 --[[ @ 0]]
	
	local button1 = LUI.UIImage.new( 0.5, 0.5, -20, 21, 0.5, 0.5, -17, 22 ) --[[ @ 0]]
	button1:setAlpha( 0.15 ) --[[ @ 0]]
	button1:setZoom( 15 ) --[[ @ 0]]
	button1:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_multiply" ) ) --[[ @ 0]]
	self:addElement( button1 ) --[[ @ 0]]
	self.button1 = button1 --[[ @ 0]]
	
	local button = LUI.UIImage.new( 0.5, 0.5, -20, 21, 0.5, 0.5, -17, 22 ) --[[ @ 0]]
	button:setAlpha( 0.65 ) --[[ @ 0]]
	button:setZoom( 15 ) --[[ @ 0]]
	button:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( button ) --[[ @ 0]]
	self.button = button --[[ @ 0]]
	
	local bind = LUI.UIText.new( 0.5, 0.5, -20, 20, 0.5, 0.5, -20, 20 ) --[[ @ 0]]
	bind:setTTF( "default" ) --[[ @ 0]]
	bind:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	bind:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	bind:linkToElementModel( self, "bind", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			bind:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( bind ) --[[ @ 0]]
	self.bind = bind --[[ @ 0]]
	
	local backing = CoD.vhud_ms_ButtonWidgetCooldown.new( f1_arg0, f1_arg1, 0.5, 0.5, -50, 50, 0, 0, 145.5, 155.5 ) --[[ @ 0]]
	backing:linkToElementModel( self, "cooldown", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			backing:setModel( f5_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NotInUse",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "text" )
			end
		},
		{
			stateName = "CoolingDownHideButton",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "bind" ) and CoD.ModelUtility.IsSelfModelPathValueLessThan( element, f1_arg1, "cooldown->cooldown", 1 )
			end
		},
		{
			stateName = "hideButtonImage",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "bind" )
			end
		},
		{
			stateName = "CoolingDown",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueLessThan( element, f1_arg1, "cooldown->cooldown", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "text", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "bind", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "cooldown", true, function ( model )
		if self["__stateValidation_cooldown->cooldown"] then
			self:removeSubscription( self["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			self["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f12_local0 = model:get() --[[ @ 0]]
			local f12_local1 = model:get() --[[ @ 0]]
			model = f12_local0 and f12_local1.cooldown --[[ @ 0]]
		end
		if model then
			self["__stateValidation_cooldown->cooldown"] = self:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( self, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.__resetProperties = function ( f14_arg0 )
	f14_arg0.prompt:completeAnimation() --[[ @ 0]]
	f14_arg0.button0:completeAnimation() --[[ @ 0]]
	f14_arg0.button1:completeAnimation() --[[ @ 0]]
	f14_arg0.button:completeAnimation() --[[ @ 0]]
	f14_arg0.backinglines:completeAnimation() --[[ @ 0]]
	f14_arg0.backing:completeAnimation() --[[ @ 0]]
	f14_arg0.bind:completeAnimation() --[[ @ 0]]
	f14_arg0.prompt:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f14_arg0.prompt:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.button0:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f14_arg0.button0:setAlpha( 0.1 ) --[[ @ 0]]
	f14_arg0.button1:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f14_arg0.button1:setAlpha( 0.15 ) --[[ @ 0]]
	f14_arg0.button:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f14_arg0.button:setAlpha( 0.65 ) --[[ @ 0]]
	f14_arg0.button:setScale( 1, 1 ) --[[ @ 0]]
	f14_arg0.backinglines:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.backing:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.bind:setRGB( 1, 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NotInUse = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f16_arg0.backinglines:completeAnimation() --[[ @ 0]]
			f16_arg0.backinglines:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.backinglines ) --[[ @ 0]]
			f16_arg0.prompt:completeAnimation() --[[ @ 0]]
			f16_arg0.prompt:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.prompt ) --[[ @ 0]]
			f16_arg0.button0:completeAnimation() --[[ @ 0]]
			f16_arg0.button0:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.button0 ) --[[ @ 0]]
			f16_arg0.button1:completeAnimation() --[[ @ 0]]
			f16_arg0.button1:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.button1 ) --[[ @ 0]]
			f16_arg0.button:completeAnimation() --[[ @ 0]]
			f16_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.button ) --[[ @ 0]]
			f16_arg0.backing:completeAnimation() --[[ @ 0]]
			f16_arg0.backing:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.backing ) --[[ @ 0]]
		end
	},
	CoolingDownHideButton = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f17_arg0.prompt:completeAnimation() --[[ @ 0]]
			f17_arg0.prompt:setRGB( 0.4, 0.4, 0.4 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.prompt ) --[[ @ 0]]
			f17_arg0.button0:completeAnimation() --[[ @ 0]]
			f17_arg0.button0:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.button0 ) --[[ @ 0]]
			f17_arg0.button1:completeAnimation() --[[ @ 0]]
			f17_arg0.button1:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.button1 ) --[[ @ 0]]
			f17_arg0.button:completeAnimation() --[[ @ 0]]
			f17_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.button ) --[[ @ 0]]
			f17_arg0.bind:completeAnimation() --[[ @ 0]]
			f17_arg0.bind:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.bind ) --[[ @ 0]]
		end
	},
	hideButtonImage = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f18_arg0.button0:completeAnimation() --[[ @ 0]]
			f18_arg0.button0:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.button0 ) --[[ @ 0]]
			f18_arg0.button1:completeAnimation() --[[ @ 0]]
			f18_arg0.button1:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.button1 ) --[[ @ 0]]
			f18_arg0.button:completeAnimation() --[[ @ 0]]
			f18_arg0.button:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.button ) --[[ @ 0]]
		end
	},
	CoolingDown = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f19_arg0.prompt:completeAnimation() --[[ @ 0]]
			f19_arg0.prompt:setRGB( 0.4, 0.4, 0.4 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.prompt ) --[[ @ 0]]
			f19_arg0.button0:completeAnimation() --[[ @ 0]]
			f19_arg0.button0:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.button0 ) --[[ @ 0]]
			f19_arg0.button1:completeAnimation() --[[ @ 0]]
			f19_arg0.button1:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.button1 ) --[[ @ 0]]
			f19_arg0.button:completeAnimation() --[[ @ 0]]
			f19_arg0.button:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.button ) --[[ @ 0]]
			f19_arg0.bind:completeAnimation() --[[ @ 0]]
			f19_arg0.bind:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.bind ) --[[ @ 0]]
		end,
		DefaultState = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f20_local0 = function ( f21_arg0 )
				local f21_local0 = function ( f22_arg0 )
					f22_arg0:beginAnimation( 99 ) --[[ @ 0]]
					f22_arg0:setAlpha( 0 ) --[[ @ 0]]
					f22_arg0:registerEventHandler( "transition_complete_keyframe", f20_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f20_arg0.button:beginAnimation( 300 ) --[[ @ 0]]
				f20_arg0.button:setAlpha( 0.3 ) --[[ @ 0]]
				f20_arg0.button:setScale( 2.25, 2.25 ) --[[ @ 0]]
				f20_arg0.button:registerEventHandler( "interrupted_keyframe", f20_arg0.clipInterrupted ) --[[ @ 0]]
				f20_arg0.button:registerEventHandler( "transition_complete_keyframe", f21_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f20_arg0.button:completeAnimation() --[[ @ 0]]
			f20_arg0.button:setRGB( 0.92, 0.91, 0.04 ) --[[ @ 0]]
			f20_arg0.button:setAlpha( 0.8 ) --[[ @ 0]]
			f20_arg0.button:setScale( 1, 1 ) --[[ @ 0]]
			f20_local0( f20_arg0.button ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.vhud_ms_ButtonWidget.__onClose = function ( f23_arg0 )
	f23_arg0.backinglines:close() --[[ @ 0]]
	f23_arg0.prompt:close() --[[ @ 0]]
	f23_arg0.bind:close() --[[ @ 0]]
	f23_arg0.backing:close() --[[ @ 0]]
end
 --[[ @ 0]]
