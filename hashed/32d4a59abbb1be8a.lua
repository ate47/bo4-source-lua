-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:5a0ca55b30183dbe" ) --[[ @ 0]]
require( "x64:1ca18cd922a43cfe" ) --[[ @ 0]]
require( "x64:4454254f1f309175" ) --[[ @ 0]]
require( "x64:6afb0fdb9191a2d2" ) --[[ @ 0]]
require( "x64:1f0aafbf6db03300" ) --[[ @ 0]]
require( "x64:7b6a65293a391f98" ) --[[ @ 0]]
require( "x64:579177e5d8aa2dec" ) --[[ @ 0]]
require( "x64:50e8dbd840828bc3" ) --[[ @ 0]]
require( "x64:7b710bc406e458bd" ) --[[ @ 0]]
require( "x64:31fc064d090be5f5" ) --[[ @ 0]]
require( "x64:4633abb056df5b28" ) --[[ @ 0]]
require( "x64:4f06de25bce86377" ) --[[ @ 0]]
require( "x64:27a7a2327a1d8657" ) --[[ @ 0]]

CoD.StartMenu_Inventory = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_Inventory.__defaultWidth = 1920 --[[ @ 0]]
CoD.StartMenu_Inventory.__defaultHeight = 1080 --[[ @ 0]]
CoD.StartMenu_Inventory.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	if IsInGame() then
		CoD.PlayerRoleUtility.SetPositionDraftSelectedCharacterIndex( f1_arg1 ) --[[ @ 0]]
	end
	self:setUseCylinderMapping( false ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Inventory ) --[[ @ 0]]
	self.id = "StartMenu_Inventory" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local f1_local1 = nil --[[ @ 0]]
	f1_local1 = LUI.UIElement.createFake() --[[ @ 0]]
	self.CurrentWeaponImage = f1_local1 --[[ @ 0]]
	local CurrentWeaponImagePC = nil --[[ @ 0]]
	
	CurrentWeaponImagePC = CoD.StartMenu_Inventory_CurrentWeaponPC.new( f1_arg0, f1_arg1, 0.5, 0.5, 493, 943, 0.5, 0.5, -423, -210 ) --[[ @ 0]]
	CurrentWeaponImagePC:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", nil, function ( model )
		CurrentWeaponImagePC:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentWeaponImagePC:linkToElementModel( CurrentWeaponImagePC, "id", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CurrentWeaponImagePC:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local AmmoList = CurrentWeaponImagePC --[[ @ 0]]
	local InventoryList = CurrentWeaponImagePC.subscribeToModel --[[ @ 0]]
	local inventoryDescription = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	InventoryList( AmmoList, inventoryDescription.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AmmoList = CurrentWeaponImagePC --[[ @ 0]]
	InventoryList = CurrentWeaponImagePC.subscribeToModel --[[ @ 0]]
	inventoryDescription = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	InventoryList( AmmoList, inventoryDescription.currentWeaponIndex, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AmmoList = CurrentWeaponImagePC --[[ @ 0]]
	InventoryList = CurrentWeaponImagePC.subscribeToModel --[[ @ 0]]
	inventoryDescription = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	InventoryList( AmmoList, inventoryDescription["weapon0.hasAttachments"], function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AmmoList = CurrentWeaponImagePC --[[ @ 0]]
	InventoryList = CurrentWeaponImagePC.subscribeToModel --[[ @ 0]]
	inventoryDescription = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	InventoryList( AmmoList, inventoryDescription["weapon1.hasAttachments"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CurrentWeaponImagePC:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CurrentWeaponImagePC, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponNotify( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CurrentWeaponImagePC, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponNotify( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CurrentWeaponImagePC, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "F", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 0 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon0.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon1.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 0 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon0.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_294D6AF2F50BEFEF", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "F" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon1.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_294D6AF2F50BEFEF", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CurrentWeaponImagePC, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"], "F", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 0 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon0.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon1.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 0 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon0.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_294D6AF2F50BEFEF", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "F" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "currentWeaponIndex", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "WarzoneInventory", "weapon1.hasAttachments", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_294D6AF2F50BEFEF", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( CurrentWeaponImagePC, "childFocusGained", function ( element )
		CoD.WZUtility.SetElementModelToCurrentWeaponModel( f1_arg1, self.inventoryDescription ) --[[ @ 0]]
		CoD.WZUtility.SetElementModelValueToCurrentWeaponModel( f1_arg1, element, "currentWeaponModel" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( CurrentWeaponImagePC, "childFocusLost", function ( element )
		if IsPC() then
			CoD.BaseUtility.SetElementModelToNil( f1_arg1, self.inventoryDescription ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CurrentWeaponImagePC:subscribeToGlobalModel( f1_arg1, "WarzoneInventory", "currentWeaponIndex", function ( model )
		local f20_local0 = CurrentWeaponImagePC --[[ @ 0]]
		if CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "CurrentWeaponImagePC" ) then
			CoD.WZUtility.SetElementModelToCurrentWeaponModel( f1_arg1, self.inventoryDescription ) --[[ @ 0]]
			CoD.WZUtility.SetElementModelValueToCurrentWeaponModel( f1_arg1, f20_local0, "currentWeaponModel" ) --[[ @ 0]]
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, f20_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CurrentWeaponImagePC:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f21_arg0, f21_arg1, f21_arg2, f21_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f21_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f21_arg0, f21_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f22_arg0, f22_arg1, f22_arg2, f22_arg3 )
				CoD.WZUtility.SendInventoryDropCurrentWeaponNotify( f22_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	CurrentWeaponImagePC:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_294D6AF2F50BEFEF", function ( f23_arg0, f23_arg1, f23_arg2, f23_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f23_arg2 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f23_arg2, "WarzoneInventory", "currentWeaponIndex", 0 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f23_arg2, "WarzoneInventory", "weapon0.hasAttachments", 1 ) then
			return function ( f24_arg0, f24_arg1, f24_arg2, f24_arg3 )
				CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( f24_arg2 ) --[[ @ 0]]
			end
			
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f23_arg2 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f23_arg2, "WarzoneInventory", "currentWeaponIndex", 1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f23_arg2, "WarzoneInventory", "weapon1.hasAttachments", 1 ) then
			return function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
				CoD.WZUtility.SendInventoryDropCurrentWeaponAndDetachNotify( f25_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( CurrentWeaponImagePC ) --[[ @ 0]]
	self.CurrentWeaponImagePC = CurrentWeaponImagePC --[[ @ 0]]
	
	InventoryList = CoD.StartMenu_InventoryList.new( f1_arg0, f1_arg1, 0.5, 0.5, -270, 270, 1, 1, -330.5, -91.5 ) --[[ @ 0]]
	InventoryList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f26_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		return f26_local0
	end ) --[[ @ 0]]
	InventoryList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f27_local0 = nil --[[ @ 0]]
		if IsPC() then
			CoD.BaseUtility.SetElementModelToNil( f1_arg1, self.inventoryDescription ) --[[ @ 0]]
		end
		return f27_local0
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( InventoryList, "setModel", function ( element, controller )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( InventoryList ) --[[ @ 0]]
	self.InventoryList = InventoryList --[[ @ 0]]
	
	AmmoList = CoD.StartMenu_AmmoList.new( f1_arg0, f1_arg1, 0, 0, 52, 272, 0.5, 0.5, -423, 51 ) --[[ @ 0]]
	AmmoList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f29_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		return f29_local0
	end ) --[[ @ 0]]
	self:addElement( AmmoList ) --[[ @ 0]]
	self.AmmoList = AmmoList --[[ @ 0]]
	
	inventoryDescription = CoD.StartMenu_InventoryDescription.new( f1_arg0, f1_arg1, 1, 1, -367, -55, 0.5, 0.5, -211, -11 ) --[[ @ 0]]
	self:addElement( inventoryDescription ) --[[ @ 0]]
	self.inventoryDescription = inventoryDescription --[[ @ 0]]
	
	local WeaponAttachments = CoD.StartMenu_AttachmentList.new( f1_arg0, f1_arg1, 0.5, 0.5, -326, 326, 0.5, 0.5, -31, 93 ) --[[ @ 0]]
	WeaponAttachments:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f30_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		return f30_local0
	end ) --[[ @ 0]]
	self:addElement( WeaponAttachments ) --[[ @ 0]]
	self.WeaponAttachments = WeaponAttachments --[[ @ 0]]
	
	local Health = CoD.WarzoneInventoryMenuItem.new( f1_arg0, f1_arg1, 0.5, 0.5, -626, -534, 1, 1, -227.5, -137.5 ) --[[ @ 0]]
	Health:setScale( 1.3, 1.3 ) --[[ @ 0]]
	Health:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "health", function ( model )
		Health:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Health:appendEventHandler( "input_source_changed", function ( f32_arg0, f32_arg1 )
		f32_arg1.menu = f32_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local Storage = Health --[[ @ 0]]
	local Gear = Health.subscribeToModel --[[ @ 0]]
	local Equipment = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Gear( Storage, Equipment.LastInput, function ( f33_arg0, f33_arg1 )
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Health:linkToElementModel( Health, "id", true, function ( model, f34_arg1 )
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Health:linkToElementModel( Health, "stackCount", true, function ( model, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Health:registerEventHandler( "list_active_changed", function ( element, event )
		local f36_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.AlignElementToListItem2D( f1_arg1, self.HealthInventorySplitter, element ) --[[ @ 0]]
		return f36_local0
	end ) --[[ @ 0]]
	Health:registerEventHandler( "gain_focus", function ( element, event )
		local f37_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f37_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f37_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		return f37_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Health, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		elseif not IsPC() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SetupSplitCount( controller, element ) --[[ @ 0]]
			MenuHidesFreeCursor( menu, controller ) --[[ @ 0]]
			SetElementState( self, self.HealthInventorySplitter, controller, "Open" ) --[[ @ 0]]
			SetLoseFocusToElement( self, "Health", controller ) --[[ @ 0]]
			SetFocusToElement( self, "HealthInventorySplitter", controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not IsPC() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Health, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Health, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], "F", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Health, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Health, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( Health, "childFocusGained", function ( element )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Health:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f49_arg0, f49_arg1, f49_arg2, f49_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f49_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f49_arg0, f49_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f50_arg0, f50_arg1, f50_arg2, f50_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f50_arg2, f50_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	Health:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/split", function ( f51_arg0, f51_arg1, f51_arg2, f51_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f51_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f51_arg0, f51_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( f51_arg0, f51_arg2, "stackCount", 1 ) then
			return function ( f52_arg0, f52_arg1, f52_arg2, f52_arg3 )
				CoD.WZUtility.OpenPCSplitterWidgetForElement( self, f52_arg1, f52_arg2, f52_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Health ) --[[ @ 0]]
	self.Health = Health --[[ @ 0]]
	
	Gear = CoD.WarzoneInventoryMenuItem.new( f1_arg0, f1_arg1, 0.5, 0.5, -486, -394, 1, 1, -227.5, -137.5 ) --[[ @ 0]]
	Gear:setScale( 1.3, 1.3 ) --[[ @ 0]]
	Gear:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "gear", function ( model )
		Gear:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Gear:appendEventHandler( "input_source_changed", function ( f54_arg0, f54_arg1 )
		f54_arg1.menu = f54_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f54_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f54_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f54_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment = Gear --[[ @ 0]]
	Storage = Gear.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Storage( Equipment, f1_local11.LastInput, function ( f55_arg0, f55_arg1 )
		CoD.Menu.UpdateButtonShownState( f55_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f55_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f55_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Gear:linkToElementModel( Gear, "id", true, function ( model, f56_arg1 )
		CoD.Menu.UpdateButtonShownState( f56_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f56_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f56_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Gear:registerEventHandler( "gain_focus", function ( element, event )
		local f57_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f57_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f57_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f57_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Gear, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Gear, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Gear, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( Gear, "childFocusGained", function ( element )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Gear:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f65_arg0, f65_arg1, f65_arg2, f65_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f65_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f65_arg0, f65_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f66_arg0, f66_arg1, f66_arg2, f66_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f66_arg2, f66_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Gear ) --[[ @ 0]]
	self.Gear = Gear --[[ @ 0]]
	
	Storage = CoD.WarzoneInventoryMenuItem.new( f1_arg0, f1_arg1, 0.5, 0.5, 395, 487, 1, 1, -227.5, -137.5 ) --[[ @ 0]]
	Storage:setScale( 1.3, 1.3 ) --[[ @ 0]]
	Storage:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "storage", function ( model )
		Storage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Storage:appendEventHandler( "input_source_changed", function ( f68_arg0, f68_arg1 )
		f68_arg1.menu = f68_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local11 = Storage --[[ @ 0]]
	Equipment = Storage.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Equipment( f1_local11, f1_local12.LastInput, function ( f69_arg0, f69_arg1 )
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Storage:linkToElementModel( Storage, "id", true, function ( model, f70_arg1 )
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Storage:registerEventHandler( "gain_focus", function ( element, event )
		local f71_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f71_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f71_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f71_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Storage, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Storage, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Storage, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( Storage, "childFocusGained", function ( element )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Storage:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f79_arg0, f79_arg1, f79_arg2, f79_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f79_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f79_arg0, f79_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f80_arg0, f80_arg1, f80_arg2, f80_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f80_arg2, f80_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Storage ) --[[ @ 0]]
	self.Storage = Storage --[[ @ 0]]
	
	Equipment = CoD.WarzoneInventoryMenuItem.new( f1_arg0, f1_arg1, 0.5, 0.5, 534, 626, 1, 1, -227.5, -137.5 ) --[[ @ 0]]
	Equipment:setScale( 1.3, 1.3 ) --[[ @ 0]]
	Equipment:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "equipment", function ( model )
		Equipment:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment:linkToElementModel( Equipment, "id", true, function ( model, f82_arg1 )
		CoD.Menu.UpdateButtonShownState( f82_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f82_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f82_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f82_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f82_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment:appendEventHandler( "input_source_changed", function ( f83_arg0, f83_arg1 )
		f83_arg1.menu = f83_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f83_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f83_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f83_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f83_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f83_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local12 = Equipment --[[ @ 0]]
	f1_local11 = Equipment.subscribeToModel --[[ @ 0]]
	local ResourceList = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local11( f1_local12, ResourceList.LastInput, function ( f84_arg0, f84_arg1 )
		CoD.Menu.UpdateButtonShownState( f84_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f84_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f84_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f84_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f84_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Equipment:linkToElementModel( Equipment, "stackCount", true, function ( model, f85_arg1 )
		CoD.Menu.UpdateButtonShownState( f85_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f85_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f85_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment:registerEventHandler( "list_active_changed", function ( element, event )
		local f86_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.AlignElementToListItem2D( f1_arg1, self.EquipmentInventorySplitter, element ) --[[ @ 0]]
		return f86_local0
	end ) --[[ @ 0]]
	Equipment:registerEventHandler( "gain_focus", function ( element, event )
		local f87_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f87_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f87_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		return f87_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Equipment, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		elseif not IsPC() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SetupSplitCount( controller, element ) --[[ @ 0]]
			MenuHidesFreeCursor( menu, controller ) --[[ @ 0]]
			SetElementState( self, self.EquipmentInventorySplitter, controller, "Open" ) --[[ @ 0]]
			SetLoseFocusToElement( self, "Equipment", controller ) --[[ @ 0]]
			SetFocusToElement( self, "EquipmentInventorySplitter", controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not IsPC() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Equipment, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Equipment, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], "F", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Equipment, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Equipment, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( Equipment, "childFocusGained", function ( element )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f99_arg0, f99_arg1, f99_arg2, f99_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f99_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f99_arg0, f99_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f100_arg0, f100_arg1, f100_arg2, f100_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f100_arg2, f100_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	Equipment:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/split", function ( f101_arg0, f101_arg1, f101_arg2, f101_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f101_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f101_arg0, f101_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( f101_arg0, f101_arg2, "stackCount", 1 ) then
			return function ( f102_arg0, f102_arg1, f102_arg2, f102_arg3 )
				CoD.WZUtility.OpenPCSplitterWidgetForElement( self, f102_arg1, f102_arg2, f102_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Equipment ) --[[ @ 0]]
	self.Equipment = Equipment --[[ @ 0]]
	
	f1_local11 = nil --[[ @ 0]]
	f1_local11 = LUI.UIElement.createFake() --[[ @ 0]]
	self.EquipmentInventorySplitter = f1_local11 --[[ @ 0]]
	f1_local12 = nil --[[ @ 0]]
	f1_local12 = LUI.UIElement.createFake() --[[ @ 0]]
	self.HealthInventorySplitter = f1_local12 --[[ @ 0]]
	
	ResourceList = CoD.StartMenu_ResourceList.new( f1_arg0, f1_arg1, 1, 1, -367, -147, 0.5, 0.5, -423, -279 ) --[[ @ 0]]
	ResourceList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f103_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		return f103_local0
	end ) --[[ @ 0]]
	self:addElement( ResourceList ) --[[ @ 0]]
	self.ResourceList = ResourceList --[[ @ 0]]
	
	local PCKoreaContentDescriptorsContainer = nil --[[ @ 0]]
	
	PCKoreaContentDescriptorsContainer = CoD.PC_Korea_ContentDescriptors_Container.new( f1_arg0, f1_arg1, 0.5, 0.5, 758, 947, 0.5, 0.5, 261, 597 ) --[[ @ 0]]
	self:addElement( PCKoreaContentDescriptorsContainer ) --[[ @ 0]]
	self.PCKoreaContentDescriptorsContainer = PCKoreaContentDescriptorsContainer --[[ @ 0]]
	
	local ItemPickupList = nil --[[ @ 0]]
	
	ItemPickupList = CoD.PC_MultiItemPickup.new( f1_arg0, f1_arg1, 0.5, 0.5, -438.5, 438.5, 0.5, 0.5, -413.5, 171.5 ) --[[ @ 0]]
	ItemPickupList:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ItemPickupList ) --[[ @ 0]]
	self.ItemPickupList = ItemPickupList --[[ @ 0]]
	
	local WarzoneGameStatusIndicatorDisplayLeft = CoD.WarzoneGameStatusIndicatorDisplay.new( f1_arg0, f1_arg1, 0, 0, 52.5, 397.5, 0, 0, 33, 77 ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft:mergeStateConditions( {
		{
			stateName = "Right",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Left",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft.GameStatusIndicatorsRightSolo:setFilter( function ( f106_arg0 )
		return f106_arg0.type:get() == "gameInformation"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft.GameStatusIndicatorsRightSolo:setDataSource( "WarzoneGameStatusIndicatorListInventoryLeft" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft.GameStatusIndicatorsLeftSolo:setFilter( function ( f107_arg0 )
		return f107_arg0.type:get() == "hudGameStat"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft.GameStatusIndicatorsLeftSolo:setDataSource( "WarzoneGameStatusIndicatorListInventoryLeft" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft.GameStatusIndicators:setDataSource( "WarzoneGameStatusIndicatorListInventoryLeft" ) --[[ @ 0]]
	self:addElement( WarzoneGameStatusIndicatorDisplayLeft ) --[[ @ 0]]
	self.WarzoneGameStatusIndicatorDisplayLeft = WarzoneGameStatusIndicatorDisplayLeft --[[ @ 0]]
	
	local f1_local17 = nil --[[ @ 0]]
	f1_local17 = LUI.UIElement.createFake() --[[ @ 0]]
	self.QuitButton = f1_local17 --[[ @ 0]]
	
	local WarzoneGameStatusIndicatorDisplayLeft2 = CoD.WarzoneGameStatusIndicatorDisplay.new( f1_arg0, f1_arg1, 0, 0, 1536.5, 1881.5, 0, 0, 33, 77 ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2:mergeStateConditions( {
		{
			stateName = "Right",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		},
		{
			stateName = "Left",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.GameStatusIndicatorsRightSolo:setFilter( function ( f110_arg0 )
		return f110_arg0.type:get() == "gameInformation"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.GameStatusIndicatorsRightSolo:setDataSource( "WarzoneGameStatusIndicatorListInventoryRight" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.GameStatusIndicatorsLeftSolo:setFilter( function ( f111_arg0 )
		return f111_arg0.type:get() == "hudGameStat"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.GameStatusIndicatorsLeftSolo:setDataSource( "WarzoneGameStatusIndicatorListInventoryRight" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.GameStatusIndicators:setDataSource( "WarzoneGameStatusIndicatorListInventoryRight" ) --[[ @ 0]]
	self:addElement( WarzoneGameStatusIndicatorDisplayLeft2 ) --[[ @ 0]]
	self.WarzoneGameStatusIndicatorDisplayLeft2 = WarzoneGameStatusIndicatorDisplayLeft2 --[[ @ 0]]
	
	local StartMenuArmorPlatesList = CoD.StartMenu_ArmorPlatesList.new( f1_arg0, f1_arg1, 0, 0, 52, 267, 0.5, 0.5, -15, 117 ) --[[ @ 0]]
	StartMenuArmorPlatesList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f112_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		return f112_local0
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( StartMenuArmorPlatesList, "setModel", function ( element, controller )
		SetElementModelToFocusedElementModel( f1_arg1, self, element, "inventoryDescription" ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( StartMenuArmorPlatesList ) --[[ @ 0]]
	self.StartMenuArmorPlatesList = StartMenuArmorPlatesList --[[ @ 0]]
	
	local InventorySplitterPC = nil --[[ @ 0]]
	
	InventorySplitterPC = CoD.WarzoneSplitInventory_PC.new( f1_arg0, f1_arg1, 0, 0, 225, 325, 0, 0, 650, 750 ) --[[ @ 0]]
	self:addElement( InventorySplitterPC ) --[[ @ 0]]
	self.InventorySplitterPC = InventorySplitterPC --[[ @ 0]]
	
	local StartMenuInventoryDualWeapons = nil --[[ @ 0]]
	
	StartMenuInventoryDualWeapons = CoD.StartMenu_InventoryDualWeapons.new( f1_arg0, f1_arg1, 0.5, 0.5, 493, 943, 0, 0, 96, 996 ) --[[ @ 0]]
	self:addElement( StartMenuInventoryDualWeapons ) --[[ @ 0]]
	self.StartMenuInventoryDualWeapons = StartMenuInventoryDualWeapons --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "MultiPick_ShowAttachments",
			condition = function ( menu, element, event )
				local f114_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
				if f114_local0 then
					f114_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.showAttachments", true ) --[[ @ 0]]
					if f114_local0 then
						f114_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
					end
				end
				return f114_local0
			end
		},
		{
			stateName = "MultiPick",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] )
			end
		},
		{
			stateName = "PCShowAttachments",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.showAttachments", true ) and IsPC()
			end
		},
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		},
		{
			stateName = "ShowAttachments",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.showAttachments", true )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f119_arg0, f119_arg1 )
		f119_arg1.menu = f119_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f119_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local22 = self --[[ @ 0]]
	local f1_local23 = self.subscribeToModel --[[ @ 0]]
	local f1_local24 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24.LastInput, function ( f120_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f120_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24["hudItems.inventory.showAttachments"], function ( f121_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f121_arg0:get(),
			modelName = "hudItems.inventory.showAttachments"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local22 = self --[[ @ 0]]
	f1_local23 = self.subscribeToModel --[[ @ 0]]
	f1_local24 = DataSources.MultiItemPickup.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local23( f1_local22, f1_local24.status, function ( f122_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f122_arg0:get(),
			modelName = "status"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self.__on_onStartMenuOpened_self = function ( f123_arg0, f123_arg1 )
		local f123_local0 = self --[[ @ 0]]
		CoD.WZUtility.SetInventoryIsOpen( f123_arg1, true ) --[[ @ 0]]
		CoD.WZUtility.ClearInventoryNag( f123_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
	self.__on_onStartMenuClosed_self = function ( f124_arg0, f124_arg1 )
		local f124_local0 = self --[[ @ 0]]
		CoD.WZUtility.SetInventoryIsOpen( f124_arg1, false ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "childFocusGained", function ( element )
		if IsPC() then
			CoD.WZUtility.SetPCSplitterWidgetElement( self, f1_arg0, f1_arg1, self.InventorySplitterPC ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.WZUtility.SetInventoryIsOpen( f1_arg1, false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "scriptNotify", function ( model )
		local f127_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_2DDDF8559F5B304D" ) and CoD.ModelUtility.IsScriptNotifyDataArgEqualTo( model, 1, 1 ) then
			CoD.ModelUtility.SetScriptNotifyDataArg( model, 1, 0 ) --[[ @ 0]]
			StartMenuGoBack( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local1.id = "CurrentWeaponImage" --[[ @ 0]]
	if CoD.isPC then
		CurrentWeaponImagePC.id = "CurrentWeaponImagePC" --[[ @ 0]]
	end
	InventoryList.id = "InventoryList" --[[ @ 0]]
	AmmoList.id = "AmmoList" --[[ @ 0]]
	WeaponAttachments.id = "WeaponAttachments" --[[ @ 0]]
	Health.id = "Health" --[[ @ 0]]
	Gear.id = "Gear" --[[ @ 0]]
	Storage.id = "Storage" --[[ @ 0]]
	Equipment.id = "Equipment" --[[ @ 0]]
	f1_local11.id = "EquipmentInventorySplitter" --[[ @ 0]]
	f1_local12.id = "HealthInventorySplitter" --[[ @ 0]]
	ResourceList.id = "ResourceList" --[[ @ 0]]
	if CoD.isPC then
		ItemPickupList.id = "ItemPickupList" --[[ @ 0]]
	end
	WarzoneGameStatusIndicatorDisplayLeft.id = "WarzoneGameStatusIndicatorDisplayLeft" --[[ @ 0]]
	f1_local17:appendEventHandler( "menu_loaded", function ()
		f1_local17:setModel( f1_arg0.buttonModel, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local17.id = "QuitButton" --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplayLeft2.id = "WarzoneGameStatusIndicatorDisplayLeft2" --[[ @ 0]]
	StartMenuArmorPlatesList.id = "StartMenuArmorPlatesList" --[[ @ 0]]
	if CoD.isPC then
		InventorySplitterPC.id = "InventorySplitterPC" --[[ @ 0]]
	end
	if CoD.isPC then
		StartMenuInventoryDualWeapons.id = "StartMenuInventoryDualWeapons" --[[ @ 0]]
	end
	self.__defaultFocus = InventoryList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_self ) --[[ @ 0]]
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_EquipmentInventorySplitter ) --[[ @ 0]]
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_HealthInventorySplitter ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local23 = self --[[ @ 0]]
	f1_local23 = f1_local1 --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "currentWeaponModel->name", "", "" ) --[[ @ 0]]
	end
	f1_local23 = CurrentWeaponImagePC --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local23 = Health --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local23 = Gear --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local23 = Storage --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local23 = Equipment --[[ @ 0]]
	if IsPC() then
		DisableAutoButtonCallback( f1_arg0, f1_local23, f1_arg1 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local23, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	DisableKeyboardNavigationByElement( InventorySplitterPC ) --[[ @ 0]]
	f1_local23 = StartMenuInventoryDualWeapons --[[ @ 0]]
	if CoD.WZUtility.IsDualWeaponUIDisabled() then
		ReplaceElementWithFake( self, "StartMenuInventoryDualWeapons" ) --[[ @ 0]]
	elseif not CoD.WZUtility.IsDualWeaponUIDisabled() then
		ReplaceElementWithFake( self, "CurrentWeaponImagePC" ) --[[ @ 0]]
		ReplaceElementWithFake( self, "WeaponAttachments" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Inventory.__resetProperties = function ( f130_arg0 )
	f130_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
	f130_arg0.CurrentWeaponImage:completeAnimation() --[[ @ 0]]
	f130_arg0.AmmoList:completeAnimation() --[[ @ 0]]
	f130_arg0.ResourceList:completeAnimation() --[[ @ 0]]
	f130_arg0.inventoryDescription:completeAnimation() --[[ @ 0]]
	f130_arg0.HealthInventorySplitter:completeAnimation() --[[ @ 0]]
	f130_arg0.EquipmentInventorySplitter:completeAnimation() --[[ @ 0]]
	f130_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
	f130_arg0.CurrentWeaponImagePC:completeAnimation() --[[ @ 0]]
	f130_arg0.StartMenuArmorPlatesList:completeAnimation() --[[ @ 0]]
	f130_arg0.WeaponAttachments:setLeftRight( 0.5, 0.5, -326, 326 ) --[[ @ 0]]
	f130_arg0.WeaponAttachments:setTopBottom( 0.5, 0.5, -31, 93 ) --[[ @ 0]]
	f130_arg0.WeaponAttachments:setAlpha( 1 ) --[[ @ 0]]
	f130_arg0.CurrentWeaponImage:setTopBottom( 0.5, 0.5, -423, -103 ) --[[ @ 0]]
	f130_arg0.CurrentWeaponImage:setAlpha( 1 ) --[[ @ 0]]
	f130_arg0.AmmoList:setLeftRight( 0, 0, 52, 272 ) --[[ @ 0]]
	f130_arg0.AmmoList:setTopBottom( 0.5, 0.5, -423, 51 ) --[[ @ 0]]
	f130_arg0.ResourceList:setLeftRight( 1, 1, -367, -147 ) --[[ @ 0]]
	f130_arg0.ResourceList:setTopBottom( 0.5, 0.5, -423, -279 ) --[[ @ 0]]
	f130_arg0.inventoryDescription:setLeftRight( 1, 1, -367, -55 ) --[[ @ 0]]
	f130_arg0.inventoryDescription:setTopBottom( 0.5, 0.5, -211, -11 ) --[[ @ 0]]
	f130_arg0.inventoryDescription:setAlpha( 1 ) --[[ @ 0]]
	f130_arg0.HealthInventorySplitter:setAlpha( 1 ) --[[ @ 0]]
	f130_arg0.EquipmentInventorySplitter:setAlpha( 1 ) --[[ @ 0]]
	f130_arg0.ItemPickupList:setTopBottom( 0.5, 0.5, -413.5, 171.5 ) --[[ @ 0]]
	f130_arg0.ItemPickupList:setAlpha( 0 ) --[[ @ 0]]
	f130_arg0.CurrentWeaponImagePC:setTopBottom( 0.5, 0.5, -423, -210 ) --[[ @ 0]]
	f130_arg0.StartMenuArmorPlatesList:setLeftRight( 0, 0, 52, 267 ) --[[ @ 0]]
	f130_arg0.StartMenuArmorPlatesList:setTopBottom( 0.5, 0.5, -15, 117 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Inventory.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f131_arg0, f131_arg1 )
			f131_arg0:__resetProperties() --[[ @ 0]]
			f131_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f131_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f131_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.WeaponAttachments ) --[[ @ 0]]
		end
	},
	MultiPick_ShowAttachments = {
		DefaultClip = function ( f132_arg0, f132_arg1 )
			f132_arg0:__resetProperties() --[[ @ 0]]
			f132_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f132_arg0.CurrentWeaponImage:completeAnimation() --[[ @ 0]]
			f132_arg0.CurrentWeaponImage:setTopBottom( 0.5, 0.5, -540, -220 ) --[[ @ 0]]
			f132_arg0.CurrentWeaponImage:setAlpha( 0 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.CurrentWeaponImage ) --[[ @ 0]]
			f132_arg0.CurrentWeaponImagePC:completeAnimation() --[[ @ 0]]
			f132_arg0.CurrentWeaponImagePC:setTopBottom( 0, 0, 96, 309 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.CurrentWeaponImagePC ) --[[ @ 0]]
			f132_arg0.AmmoList:completeAnimation() --[[ @ 0]]
			f132_arg0.AmmoList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f132_arg0.AmmoList:setTopBottom( 0, 0, 96, 848 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.AmmoList ) --[[ @ 0]]
			f132_arg0.inventoryDescription:completeAnimation() --[[ @ 0]]
			f132_arg0.inventoryDescription:setLeftRight( 1, 1, -1627, -1315 ) --[[ @ 0]]
			f132_arg0.inventoryDescription:setTopBottom( 0.5, 0.5, -376, -176 ) --[[ @ 0]]
			f132_arg0.inventoryDescription:setAlpha( 0 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.inventoryDescription ) --[[ @ 0]]
			f132_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f132_arg0.WeaponAttachments:setLeftRight( 0.5, 0.5, 392, 1044 ) --[[ @ 0]]
			f132_arg0.WeaponAttachments:setTopBottom( 0, 0, 340, 464 ) --[[ @ 0]]
			f132_arg0.WeaponAttachments:setAlpha( 1 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.WeaponAttachments ) --[[ @ 0]]
			f132_arg0.EquipmentInventorySplitter:completeAnimation() --[[ @ 0]]
			f132_arg0.EquipmentInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.EquipmentInventorySplitter ) --[[ @ 0]]
			f132_arg0.HealthInventorySplitter:completeAnimation() --[[ @ 0]]
			f132_arg0.HealthInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.HealthInventorySplitter ) --[[ @ 0]]
			f132_arg0.ResourceList:completeAnimation() --[[ @ 0]]
			f132_arg0.ResourceList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f132_arg0.ResourceList:setTopBottom( 0.5, 0.5, 289, 431 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.ResourceList ) --[[ @ 0]]
			f132_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f132_arg0.ItemPickupList:setTopBottom( 0, 0, 96, 386 ) --[[ @ 0]]
			f132_arg0.ItemPickupList:setAlpha( 1 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.ItemPickupList ) --[[ @ 0]]
			f132_arg0.StartMenuArmorPlatesList:completeAnimation() --[[ @ 0]]
			f132_arg0.StartMenuArmorPlatesList:setLeftRight( 0.5, 0.5, -908, -693 ) --[[ @ 0]]
			f132_arg0.StartMenuArmorPlatesList:setTopBottom( 0.5, 0.5, 55, 187 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.StartMenuArmorPlatesList ) --[[ @ 0]]
		end
	},
	MultiPick = {
		DefaultClip = function ( f133_arg0, f133_arg1 )
			f133_arg0:__resetProperties() --[[ @ 0]]
			f133_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f133_arg0.CurrentWeaponImage:completeAnimation() --[[ @ 0]]
			f133_arg0.CurrentWeaponImage:setTopBottom( 0.5, 0.5, -540, -220 ) --[[ @ 0]]
			f133_arg0.CurrentWeaponImage:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.CurrentWeaponImage ) --[[ @ 0]]
			f133_arg0.CurrentWeaponImagePC:completeAnimation() --[[ @ 0]]
			f133_arg0.CurrentWeaponImagePC:setTopBottom( 0, 0, 96, 309 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.CurrentWeaponImagePC ) --[[ @ 0]]
			f133_arg0.AmmoList:completeAnimation() --[[ @ 0]]
			f133_arg0.AmmoList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f133_arg0.AmmoList:setTopBottom( 0, 0, 96, 848 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.AmmoList ) --[[ @ 0]]
			f133_arg0.inventoryDescription:completeAnimation() --[[ @ 0]]
			f133_arg0.inventoryDescription:setLeftRight( 1, 1, -1627, -1315 ) --[[ @ 0]]
			f133_arg0.inventoryDescription:setTopBottom( 0.5, 0.5, -376, -176 ) --[[ @ 0]]
			f133_arg0.inventoryDescription:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.inventoryDescription ) --[[ @ 0]]
			f133_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f133_arg0.WeaponAttachments:setLeftRight( 0.5, 0.5, 392, 1044 ) --[[ @ 0]]
			f133_arg0.WeaponAttachments:setTopBottom( 0, 0, 340, 464 ) --[[ @ 0]]
			f133_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.WeaponAttachments ) --[[ @ 0]]
			f133_arg0.EquipmentInventorySplitter:completeAnimation() --[[ @ 0]]
			f133_arg0.EquipmentInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.EquipmentInventorySplitter ) --[[ @ 0]]
			f133_arg0.HealthInventorySplitter:completeAnimation() --[[ @ 0]]
			f133_arg0.HealthInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.HealthInventorySplitter ) --[[ @ 0]]
			f133_arg0.ResourceList:completeAnimation() --[[ @ 0]]
			f133_arg0.ResourceList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f133_arg0.ResourceList:setTopBottom( 0.5, 0.5, 289, 431 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.ResourceList ) --[[ @ 0]]
			f133_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f133_arg0.ItemPickupList:setTopBottom( 0, 0, 96, 386 ) --[[ @ 0]]
			f133_arg0.ItemPickupList:setAlpha( 1 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.ItemPickupList ) --[[ @ 0]]
			f133_arg0.StartMenuArmorPlatesList:completeAnimation() --[[ @ 0]]
			f133_arg0.StartMenuArmorPlatesList:setLeftRight( 0.5, 0.5, -908, -693 ) --[[ @ 0]]
			f133_arg0.StartMenuArmorPlatesList:setTopBottom( 0.5, 0.5, 55, 187 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.StartMenuArmorPlatesList ) --[[ @ 0]]
		end
	},
	PCShowAttachments = {
		DefaultClip = function ( f134_arg0, f134_arg1 )
			f134_arg0:__resetProperties() --[[ @ 0]]
			f134_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f134_arg0.CurrentWeaponImage:completeAnimation() --[[ @ 0]]
			f134_arg0.CurrentWeaponImage:setAlpha( 0 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.CurrentWeaponImage ) --[[ @ 0]]
			f134_arg0.CurrentWeaponImagePC:completeAnimation() --[[ @ 0]]
			f134_arg0.CurrentWeaponImagePC:setTopBottom( 0, 0, 96, 309 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.CurrentWeaponImagePC ) --[[ @ 0]]
			f134_arg0.AmmoList:completeAnimation() --[[ @ 0]]
			f134_arg0.AmmoList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f134_arg0.AmmoList:setTopBottom( 0, 0, 96, 848 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.AmmoList ) --[[ @ 0]]
			f134_arg0.inventoryDescription:completeAnimation() --[[ @ 0]]
			f134_arg0.inventoryDescription:setLeftRight( 0.5, 0.5, -657, -345 ) --[[ @ 0]]
			f134_arg0.inventoryDescription:setTopBottom( 0.5, 0.5, -376, -176 ) --[[ @ 0]]
			f134_arg0.inventoryDescription:setAlpha( 1 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.inventoryDescription ) --[[ @ 0]]
			f134_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f134_arg0.WeaponAttachments:setLeftRight( 0.5, 0.5, 392, 1044 ) --[[ @ 0]]
			f134_arg0.WeaponAttachments:setTopBottom( 0, 0, 340, 464 ) --[[ @ 0]]
			f134_arg0.WeaponAttachments:setAlpha( 1 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.WeaponAttachments ) --[[ @ 0]]
			f134_arg0.EquipmentInventorySplitter:completeAnimation() --[[ @ 0]]
			f134_arg0.EquipmentInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.EquipmentInventorySplitter ) --[[ @ 0]]
			f134_arg0.HealthInventorySplitter:completeAnimation() --[[ @ 0]]
			f134_arg0.HealthInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.HealthInventorySplitter ) --[[ @ 0]]
			f134_arg0.ResourceList:completeAnimation() --[[ @ 0]]
			f134_arg0.ResourceList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f134_arg0.ResourceList:setTopBottom( 0.5, 0.5, 289, 431 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.ResourceList ) --[[ @ 0]]
			f134_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f134_arg0.ItemPickupList:setTopBottom( 0, 0, 96, 386 ) --[[ @ 0]]
			f134_arg0.ItemPickupList:setAlpha( 0 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.ItemPickupList ) --[[ @ 0]]
			f134_arg0.StartMenuArmorPlatesList:completeAnimation() --[[ @ 0]]
			f134_arg0.StartMenuArmorPlatesList:setLeftRight( 0.5, 0.5, -908, -693 ) --[[ @ 0]]
			f134_arg0.StartMenuArmorPlatesList:setTopBottom( 0.5, 0.5, 55, 187 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.StartMenuArmorPlatesList ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f135_arg0, f135_arg1 )
			f135_arg0:__resetProperties() --[[ @ 0]]
			f135_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f135_arg0.CurrentWeaponImage:completeAnimation() --[[ @ 0]]
			f135_arg0.CurrentWeaponImage:setAlpha( 0 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.CurrentWeaponImage ) --[[ @ 0]]
			f135_arg0.CurrentWeaponImagePC:completeAnimation() --[[ @ 0]]
			f135_arg0.CurrentWeaponImagePC:setTopBottom( 0, 0, 96, 309 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.CurrentWeaponImagePC ) --[[ @ 0]]
			f135_arg0.AmmoList:completeAnimation() --[[ @ 0]]
			f135_arg0.AmmoList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f135_arg0.AmmoList:setTopBottom( 0, 0, 96, 848 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.AmmoList ) --[[ @ 0]]
			f135_arg0.inventoryDescription:completeAnimation() --[[ @ 0]]
			f135_arg0.inventoryDescription:setLeftRight( 0.5, 0.5, -657, -345 ) --[[ @ 0]]
			f135_arg0.inventoryDescription:setTopBottom( 0.5, 0.5, -376, -176 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.inventoryDescription ) --[[ @ 0]]
			f135_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f135_arg0.WeaponAttachments:setLeftRight( 0.5, 0.5, 392, 1044 ) --[[ @ 0]]
			f135_arg0.WeaponAttachments:setTopBottom( 0, 0, 340, 464 ) --[[ @ 0]]
			f135_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.WeaponAttachments ) --[[ @ 0]]
			f135_arg0.EquipmentInventorySplitter:completeAnimation() --[[ @ 0]]
			f135_arg0.EquipmentInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.EquipmentInventorySplitter ) --[[ @ 0]]
			f135_arg0.HealthInventorySplitter:completeAnimation() --[[ @ 0]]
			f135_arg0.HealthInventorySplitter:setAlpha( 0 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.HealthInventorySplitter ) --[[ @ 0]]
			f135_arg0.ResourceList:completeAnimation() --[[ @ 0]]
			f135_arg0.ResourceList:setLeftRight( 0.5, 0.5, -908, -688 ) --[[ @ 0]]
			f135_arg0.ResourceList:setTopBottom( 0.5, 0.5, 289, 431 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.ResourceList ) --[[ @ 0]]
			f135_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f135_arg0.ItemPickupList:setTopBottom( 0, 0, 96, 386 ) --[[ @ 0]]
			f135_arg0.ItemPickupList:setAlpha( 0 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.ItemPickupList ) --[[ @ 0]]
			f135_arg0.StartMenuArmorPlatesList:completeAnimation() --[[ @ 0]]
			f135_arg0.StartMenuArmorPlatesList:setLeftRight( 0.5, 0.5, -908, -693 ) --[[ @ 0]]
			f135_arg0.StartMenuArmorPlatesList:setTopBottom( 0.5, 0.5, 55, 187 ) --[[ @ 0]]
			f135_arg0.clipFinished( f135_arg0.StartMenuArmorPlatesList ) --[[ @ 0]]
		end
	},
	ShowAttachments = {
		DefaultClip = function ( f136_arg0, f136_arg1 )
			f136_arg0:__resetProperties() --[[ @ 0]]
			f136_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Inventory.__onClose = function ( f137_arg0 )
	f137_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f137_arg0.CurrentWeaponImage:close() --[[ @ 0]]
	f137_arg0.CurrentWeaponImagePC:close() --[[ @ 0]]
	f137_arg0.InventoryList:close() --[[ @ 0]]
	f137_arg0.AmmoList:close() --[[ @ 0]]
	f137_arg0.inventoryDescription:close() --[[ @ 0]]
	f137_arg0.WeaponAttachments:close() --[[ @ 0]]
	f137_arg0.Health:close() --[[ @ 0]]
	f137_arg0.Gear:close() --[[ @ 0]]
	f137_arg0.Storage:close() --[[ @ 0]]
	f137_arg0.Equipment:close() --[[ @ 0]]
	f137_arg0.EquipmentInventorySplitter:close() --[[ @ 0]]
	f137_arg0.HealthInventorySplitter:close() --[[ @ 0]]
	f137_arg0.ResourceList:close() --[[ @ 0]]
	f137_arg0.PCKoreaContentDescriptorsContainer:close() --[[ @ 0]]
	f137_arg0.ItemPickupList:close() --[[ @ 0]]
	f137_arg0.WarzoneGameStatusIndicatorDisplayLeft:close() --[[ @ 0]]
	f137_arg0.QuitButton:close() --[[ @ 0]]
	f137_arg0.WarzoneGameStatusIndicatorDisplayLeft2:close() --[[ @ 0]]
	f137_arg0.StartMenuArmorPlatesList:close() --[[ @ 0]]
	f137_arg0.InventorySplitterPC:close() --[[ @ 0]]
	f137_arg0.StartMenuInventoryDualWeapons:close() --[[ @ 0]]
end
 --[[ @ 0]]
