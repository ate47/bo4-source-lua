-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/director/directorcustomstartbuttoncontainer" ) --[[ @ 0]]

CoD.DirectorTheaterStartButton = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorTheaterStartButton.__defaultWidth = 458 --[[ @ 0]]
CoD.DirectorTheaterStartButton.__defaultHeight = 70 --[[ @ 0]]
CoD.DirectorTheaterStartButton.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorTheaterStartButton ) --[[ @ 0]]
	self.id = "DirectorTheaterStartButton" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonContainer = CoD.DirectorCustomStartButtonContainer.new( f1_arg0, f1_arg1, 0, 0, 0, 520, 0, 0, 0, 70 ) --[[ @ 0]]
	ButtonContainer:mergeStateConditions( {
		{
			stateName = "MatchStartHide",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "LobbyRoot", "hideMenusForGameStart", 1 )
			end
		},
		{
			stateName = "MatchStarting",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsFreeCursorActive( f1_arg1 )
			end
		},
		{
			stateName = "Disabled_DownloadingTheater",
			condition = function ( menu, element, event )
				local f4_local0 --[[ @ 0]]
				if not HasFilmAndFilmDownloaded() then
					f4_local0 = CoD.DirectorUtility.ShowDirectorTheater( f1_arg1 ) --[[ @ 0]]
				else
					f4_local0 = false --[[ @ 0]]
				end
				return f4_local0
			end
		},
		{
			stateName = "Available",
			condition = function ( menu, element, event )
				local f5_local0 = LobbyHasMatchStartButton() --[[ @ 0]]
				if f5_local0 then
					f5_local0 = IsPartyLeader( f1_arg1 ) --[[ @ 0]]
					if f5_local0 then
						f5_local0 = IsFreeCursorActive( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not IsPartyLeader( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = ButtonContainer --[[ @ 0]]
	local f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.hideMenusForGameStart, function ( f7_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "hideMenusForGameStart"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.lobbyTimeRemaining"], function ( f8_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "lobbyRoot.lobbyTimeRemaining"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.usingCursorInput, function ( f9_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.theaterDownloadPercent"], function ( f10_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "lobbyRoot.theaterDownloadPercent"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.theaterDataDownloaded"], function ( f11_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "lobbyRoot.theaterDataDownloaded"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.lobbyNav"], function ( f12_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.privateClient.isHost"], function ( f13_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "lobbyRoot.privateClient.isHost"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonContainer --[[ @ 0]]
	f1_local3 = ButtonContainer.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["lobbyRoot.gameClient.isHost"], function ( f14_arg0 )
		f1_arg0:updateElementState( ButtonContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "lobbyRoot.gameClient.isHost"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( ButtonContainer ) --[[ @ 0]]
	self.ButtonContainer = ButtonContainer --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ButtonContainer.id = "ButtonContainer" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorTheaterStartButton.__resetProperties = function ( f16_arg0 )
	f16_arg0.ButtonContainer:completeAnimation() --[[ @ 0]]
	f16_arg0.ButtonContainer:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f16_arg0.ButtonContainer:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.ButtonContainer:setScale( 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorTheaterStartButton.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		ChildFocus = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f18_arg0.ButtonContainer:completeAnimation() --[[ @ 0]]
			f18_arg0.ButtonContainer:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f18_arg0.ButtonContainer:setScale( 1.05, 1.05 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.ButtonContainer ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f19_local0 = function ( f20_arg0 )
				f19_arg0.ButtonContainer:beginAnimation( 100 ) --[[ @ 0]]
				f19_arg0.ButtonContainer:setScale( 1.05, 1.05 ) --[[ @ 0]]
				f19_arg0.ButtonContainer:registerEventHandler( "interrupted_keyframe", f19_arg0.clipInterrupted ) --[[ @ 0]]
				f19_arg0.ButtonContainer:registerEventHandler( "transition_complete_keyframe", f19_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f19_arg0.ButtonContainer:completeAnimation() --[[ @ 0]]
			f19_arg0.ButtonContainer:setScale( 1, 1 ) --[[ @ 0]]
			f19_local0( f19_arg0.ButtonContainer ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f21_local0 = function ( f22_arg0 )
				f21_arg0.ButtonContainer:beginAnimation( 100 ) --[[ @ 0]]
				f21_arg0.ButtonContainer:setScale( 1, 1 ) --[[ @ 0]]
				f21_arg0.ButtonContainer:registerEventHandler( "interrupted_keyframe", f21_arg0.clipInterrupted ) --[[ @ 0]]
				f21_arg0.ButtonContainer:registerEventHandler( "transition_complete_keyframe", f21_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f21_arg0.ButtonContainer:completeAnimation() --[[ @ 0]]
			f21_arg0.ButtonContainer:setScale( 1.05, 1.05 ) --[[ @ 0]]
			f21_local0( f21_arg0.ButtonContainer ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.ButtonContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.ButtonContainer:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.ButtonContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorTheaterStartButton.__onClose = function ( f24_arg0 )
	f24_arg0.ButtonContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
