-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:3762eec3732db918" ) --[[ @ 0]]

CoD.BGBSelectButtonPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BGBSelectButtonPrompt.__defaultWidth = 70 --[[ @ 0]]
CoD.BGBSelectButtonPrompt.__defaultHeight = 70 --[[ @ 0]]
CoD.BGBSelectButtonPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.BGBSelectButtonPrompt ) --[[ @ 0]]
	self.id = "BGBSelectButtonPrompt" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local Backer = LUI.UIImage.new( 0, 0, 3.5, 71.5, 0, 0, 5, 73 ) --[[ @ 0]]
	Backer:setScale( 1.4, 1.4 ) --[[ @ 0]]
	Backer:setImage( RegisterImage( @"uie_zm_hud_elixirdpadbacking" ) ) --[[ @ 0]]
	self:addElement( Backer ) --[[ @ 0]]
	self.Backer = Backer --[[ @ 0]]
	
	local DownArrow = CoD.ZmAmmo_BGBCarouselButtonFactory.new( f1_arg0, f1_arg1, 0.5, 0.5, -13.5, 18.5, 0.5, 0.5, 7.5, 39.5 ) --[[ @ 0]]
	DownArrow:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, f1_arg1, "BGBLoadout", "selectedIndex", "slotIndex" )
			end
		}
	} ) --[[ @ 0]]
	DownArrow:linkToElementModel( DownArrow, "unavailable", true, function ( model )
		f1_arg0:updateElementState( DownArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local RightArrow = DownArrow --[[ @ 0]]
	local UpArrow = DownArrow.subscribeToModel --[[ @ 0]]
	local LeftArrow = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	UpArrow( RightArrow, LeftArrow.selectedIndex, function ( f4_arg0 )
		f1_arg0:updateElementState( DownArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "selectedIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DownArrow:linkToElementModel( DownArrow, "slotIndex", true, function ( model )
		f1_arg0:updateElementState( DownArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "slotIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DownArrow:linkToElementModel( DownArrow, "gum_idx", true, function ( model )
		f1_arg0:updateElementState( DownArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gum_idx"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DownArrow:linkToElementModel( DownArrow, "lockdown", true, function ( model )
		f1_arg0:updateElementState( DownArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lockdown"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DownArrow:setZRot( 180 ) --[[ @ 0]]
	DownArrow:setScale( 1.4, 1.4 ) --[[ @ 0]]
	DownArrow:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Down", function ( model )
		DownArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DownArrow ) --[[ @ 0]]
	self.DownArrow = DownArrow --[[ @ 0]]
	
	UpArrow = CoD.ZmAmmo_BGBCarouselButtonFactory.new( f1_arg0, f1_arg1, 0.5, 0.5, -13, 19, 0.5, 0.5, -31.5, 0.5 ) --[[ @ 0]]
	UpArrow:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, f1_arg1, "BGBLoadout", "selectedIndex", "slotIndex" )
			end
		}
	} ) --[[ @ 0]]
	UpArrow:linkToElementModel( UpArrow, "unavailable", true, function ( model )
		f1_arg0:updateElementState( UpArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftArrow = UpArrow --[[ @ 0]]
	RightArrow = UpArrow.subscribeToModel --[[ @ 0]]
	local f1_local6 = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	RightArrow( LeftArrow, f1_local6.selectedIndex, function ( f11_arg0 )
		f1_arg0:updateElementState( UpArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "selectedIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	UpArrow:linkToElementModel( UpArrow, "slotIndex", true, function ( model )
		f1_arg0:updateElementState( UpArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "slotIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UpArrow:linkToElementModel( UpArrow, "gum_idx", true, function ( model )
		f1_arg0:updateElementState( UpArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gum_idx"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UpArrow:linkToElementModel( UpArrow, "lockdown", true, function ( model )
		f1_arg0:updateElementState( UpArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lockdown"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UpArrow:setScale( 1.4, 1.4 ) --[[ @ 0]]
	UpArrow:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Up", function ( model )
		UpArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( UpArrow ) --[[ @ 0]]
	self.UpArrow = UpArrow --[[ @ 0]]
	
	RightArrow = CoD.ZmAmmo_BGBCarouselButtonFactory.new( f1_arg0, f1_arg1, 0.5, 0.5, 6, 38, 0.5, 0.5, -12, 20 ) --[[ @ 0]]
	RightArrow:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, f1_arg1, "BGBLoadout", "selectedIndex", "slotIndex" )
			end
		}
	} ) --[[ @ 0]]
	RightArrow:linkToElementModel( RightArrow, "unavailable", true, function ( model )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = RightArrow --[[ @ 0]]
	LeftArrow = RightArrow.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	LeftArrow( f1_local6, f1_local7.selectedIndex, function ( f18_arg0 )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "selectedIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightArrow:linkToElementModel( RightArrow, "slotIndex", true, function ( model )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "slotIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightArrow:linkToElementModel( RightArrow, "gum_idx", true, function ( model )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gum_idx"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightArrow:linkToElementModel( RightArrow, "lockdown", true, function ( model )
		f1_arg0:updateElementState( RightArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lockdown"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightArrow:setZRot( -90 ) --[[ @ 0]]
	RightArrow:setScale( 1.4, 1.4 ) --[[ @ 0]]
	RightArrow:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Right", function ( model )
		RightArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RightArrow ) --[[ @ 0]]
	self.RightArrow = RightArrow --[[ @ 0]]
	
	LeftArrow = CoD.ZmAmmo_BGBCarouselButtonFactory.new( f1_arg0, f1_arg1, 0.5, 0.5, -32.5, -0.5, 0.5, 0.5, -12.5, 19.5 ) --[[ @ 0]]
	LeftArrow:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, f1_arg1, "BGBLoadout", "selectedIndex", "slotIndex" )
			end
		}
	} ) --[[ @ 0]]
	LeftArrow:linkToElementModel( LeftArrow, "unavailable", true, function ( model )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unavailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = LeftArrow --[[ @ 0]]
	f1_local6 = LeftArrow.subscribeToModel --[[ @ 0]]
	local f1_local8 = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local7, f1_local8.selectedIndex, function ( f25_arg0 )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "selectedIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftArrow:linkToElementModel( LeftArrow, "slotIndex", true, function ( model )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "slotIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftArrow:linkToElementModel( LeftArrow, "gum_idx", true, function ( model )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gum_idx"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftArrow:linkToElementModel( LeftArrow, "lockdown", true, function ( model )
		f1_arg0:updateElementState( LeftArrow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lockdown"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftArrow:setZRot( 90 ) --[[ @ 0]]
	LeftArrow:setScale( 1.4, 1.4 ) --[[ @ 0]]
	LeftArrow:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Left", function ( model )
		LeftArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( LeftArrow ) --[[ @ 0]]
	self.LeftArrow = LeftArrow --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BGBSelectButtonPrompt.__onClose = function ( f30_arg0 )
	f30_arg0.DownArrow:close() --[[ @ 0]]
	f30_arg0.UpArrow:close() --[[ @ 0]]
	f30_arg0.RightArrow:close() --[[ @ 0]]
	f30_arg0.LeftArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
