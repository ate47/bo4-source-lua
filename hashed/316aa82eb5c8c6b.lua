-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:195cf4441939020c" ) --[[ @ 0]]

CoD.CodCasterMiniMapPosition = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CodCasterMiniMapPosition.__defaultWidth = 1920 --[[ @ 0]]
CoD.CodCasterMiniMapPosition.__defaultHeight = 400 --[[ @ 0]]
CoD.CodCasterMiniMapPosition.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CodCasterMiniMapPosition ) --[[ @ 0]]
	self.id = "CodCasterMiniMapPosition" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CodCasterMiniMap = CoD.CodCasterMiniMap.new( f1_arg0, f1_arg1, 0, 0, -155, 686, 0, 0, 0, 400 ) --[[ @ 0]]
	CodCasterMiniMap:mergeStateConditions( {
		{
			stateName = "VisibleFull",
			condition = function ( menu, element, event )
				local f2_local0 --[[ @ 0]]
				if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not ScoreboardVisible( f1_arg1 ) and not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "CodCaster.showFullScreenMap" ) and not CoD.CodCasterUtility.CodCasterIsInAerialCam( f1_arg1 ) then
					f2_local0 = CoD.CodCasterUtility.IsCodCasterWithProfileValueEqualTo( f1_arg1, "shoutcaster_ds_minimap", 2 ) --[[ @ 0]]
					if f2_local0 then
						f2_local0 = not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "CodCaster.showKeyboard" ) --[[ @ 0]]
					end
				else
					f2_local0 = false --[[ @ 0]]
				end
				return f2_local0
			end
		},
		{
			stateName = "VisibleStandard",
			condition = function ( menu, element, event )
				local f3_local0 --[[ @ 0]]
				if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not ScoreboardVisible( f1_arg1 ) and not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "CodCaster.showFullScreenMap" ) and not CoD.CodCasterUtility.CodCasterIsInAerialCam( f1_arg1 ) then
					f3_local0 = CoD.CodCasterUtility.IsCodCasterWithProfileValueEqualTo( f1_arg1, "shoutcaster_ds_minimap", 1 ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "CodCaster.showKeyboard" ) --[[ @ 0]]
					end
				else
					f3_local0 = false --[[ @ 0]]
				end
				return f3_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = CodCasterMiniMap --[[ @ 0]]
	local f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]], function ( f4_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.forceScoreboard, function ( f5_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "forceScoreboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f6_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["CodCaster.showFullScreenMap"], function ( f7_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "CodCaster.showFullScreenMap"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_57EAF988DDEB83EA"]], function ( f8_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_57EAF988DDEB83EA"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.profileSettingsUpdated, function ( f9_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = CodCasterMiniMap --[[ @ 0]]
	f1_local3 = CodCasterMiniMap.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["CodCaster.showKeyboard"], function ( f10_arg0 )
		f1_arg0:updateElementState( CodCasterMiniMap, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "CodCaster.showKeyboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CodCasterMiniMap ) --[[ @ 0]]
	self.CodCasterMiniMap = CodCasterMiniMap --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "MiniMapUp",
			condition = function ( menu, element, event )
				return not IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_qs_playerlist", 1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.profileSettingsUpdated, function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CodCasterMiniMapPosition.__resetProperties = function ( f13_arg0 )
	f13_arg0.CodCasterMiniMap:completeAnimation() --[[ @ 0]]
	f13_arg0.CodCasterMiniMap:setTopBottom( 0, 0, 0, 400 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CodCasterMiniMapPosition.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	MiniMapUp = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f15_arg0.CodCasterMiniMap:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterMiniMap:setTopBottom( 0, 0, -260, 140 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterMiniMap ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CodCasterMiniMapPosition.__onClose = function ( f16_arg0 )
	f16_arg0.CodCasterMiniMap:close() --[[ @ 0]]
end
 --[[ @ 0]]
