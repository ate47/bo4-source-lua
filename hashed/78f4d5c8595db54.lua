-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "ui/uieditor/widgets/onofftext" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]
require( "x64:183bf909ab80816a" ) --[[ @ 0]]
require( "x64:1a79cd5379458ac3" ) --[[ @ 0]]
require( "x64:2d13dde082cbfc3a" ) --[[ @ 0]]

local PostLoadFunc = function ( f1_arg0, f1_arg1 )
	if not IsBooleanDvarSet( @"hash_7BAB0CFB192B09C9" ) then
		local f1_local0 = f1_arg0.PerksList --[[ @ 0]]
		f1_local0:setLeftRight( 0.5, 0.5, -486, 486 ) --[[ @ 0]]
		f1_local0:setHorizontalCount( 7 ) --[[ @ 0]]
		f1_local0:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.ZMPerkSelect = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ZMPerkSelect = function ( f2_arg0, f2_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ZMPerkSelect", f2_arg0 ) --[[ @ 0]]
	local f2_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f2_arg1 ) --[[ @ 0]]
	SetControllerModelValue( f2_arg0, "ZMEquippedPerks.inEditMenu", true ) --[[ @ 0]]
	self:setClass( CoD.ZMPerkSelect ) --[[ @ 0]]
	self.soundSet = "ZCAC" --[[ @ 0]]
	self:setOwner( f2_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f2_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f2_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f2_local1, f2_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f2_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local CACHeader = CoD.CommonHeader.new( f2_local1, f2_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CACHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_28BDD7F912E1E764" ) ) --[[ @ 0]]
	CACHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CACHeader:subscribeToGlobalModel( f2_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			CACHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CACHeader:registerEventHandler( "menu_loaded", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f5_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f5_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f2_arg0 ) --[[ @ 0]]
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	self:addElement( CACHeader ) --[[ @ 0]]
	self.CACHeader = CACHeader --[[ @ 0]]
	
	local BackingGrayMediumLeft = CoD.header_container_frontend.new( f2_local1, f2_arg0, 0, 0, 0, 1920, 0, 0, 0, 42 ) --[[ @ 0]]
	BackingGrayMediumLeft:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f2_arg0 ) --[[ @ 0]]
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( BackingGrayMediumLeft ) --[[ @ 0]]
	self.BackingGrayMediumLeft = BackingGrayMediumLeft --[[ @ 0]]
	
	local RestrictedText = CoD.RestrictedItemWarningText.new( f2_local1, f2_arg0, 0.5, 0.5, -247, 247, 0.5, 0.5, 424, 454 ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	local PerksList = LUI.UIList.new( f2_local1, f2_arg0, 8, 0, nil, false, false, false, false ) --[[ @ 0]]
	PerksList:setLeftRight( 0.5, 0.5, -626, 486 ) --[[ @ 0]]
	PerksList:setTopBottom( 0.5, 0.5, 138, 402 ) --[[ @ 0]]
	PerksList:setScale( 0.98, 0.98 ) --[[ @ 0]]
	PerksList:setWidgetType( CoD.ZMPerkOption ) --[[ @ 0]]
	PerksList:setHorizontalCount( 8 ) --[[ @ 0]]
	PerksList:setVerticalCount( 2 ) --[[ @ 0]]
	PerksList:setSpacing( 8 ) --[[ @ 0]]
	PerksList:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	PerksList:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	PerksList:setDataSource( "PerkSelectList" ) --[[ @ 0]]
	local PerkName = PerksList --[[ @ 0]]
	local PerkAltar = PerksList.subscribeToModel --[[ @ 0]]
	local SubHeaderDivider = DataSources.ZMEquippedPerks.getModel( f2_arg0 ) --[[ @ 0]]
	PerkAltar( PerkName, SubHeaderDivider.updateEquipped, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PerksList:linkToElementModel( PerksList, "globalItemIndex", true, function ( model, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkName = PerksList --[[ @ 0]]
	PerkAltar = PerksList.subscribeToModel --[[ @ 0]]
	SubHeaderDivider = DataSources.ZMEquippedPerks.getModel( f2_arg0 ) --[[ @ 0]]
	PerkAltar( PerkName, SubHeaderDivider.currentSlot, function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PerksList:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( PerksList, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.ZMPerkUtility.IsPerkLocked( element, controller, menu ) and not CoD.ZMPerkUtility.IsPerkEquippedInCurrentSlot( element, controller, menu ) then
			CoD.ZMPerkUtility.PerkOptionSelected( element, menu, controller ) --[[ @ 0]]
			CoD.CACUtility.PlayElementXHashSound( element, "equipSound" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ZMPerkUtility.IsPerkLocked( element, controller, menu ) and not CoD.ZMPerkUtility.IsPerkEquippedInCurrentSlot( element, controller, menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( PerksList, "childFocusGained", function ( element )
		ShowWidget( self.UnlockDescription ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f2_arg0, self.ModifierInfo, self.PerkAltar ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PerksList ) --[[ @ 0]]
	self.PerksList = PerksList --[[ @ 0]]
	
	PerkAltar = LUI.GridLayout.new( f2_local1, f2_arg0, false, 0, 0, 10, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	PerkAltar:mergeStateConditions( {
		{
			stateName = "Modifier",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f2_arg0, "isModifierSlot" )
			end
		}
	} ) --[[ @ 0]]
	PerkAltar:linkToElementModel( PerkAltar, "isModifierSlot", true, function ( model )
		f2_local1:updateElementState( PerkAltar, {
			name = "model_validation",
			menu = f2_local1,
			controller = f2_arg0,
			modelValue = model:get(),
			modelName = "isModifierSlot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkAltar:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	PerkAltar:setTopBottom( 0.5, 0.5, -411, 39 ) --[[ @ 0]]
	PerkAltar:setWidgetType( CoD.ZMPerkSlot ) --[[ @ 0]]
	PerkAltar:setHorizontalCount( 4 ) --[[ @ 0]]
	PerkAltar:setSpacing( 10 ) --[[ @ 0]]
	PerkAltar:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PerkAltar:setDataSource( "ZMEquippedPerks" ) --[[ @ 0]]
	SubHeaderDivider = PerkAltar --[[ @ 0]]
	PerkName = PerkAltar.subscribeToModel --[[ @ 0]]
	local PerkDescription = DataSources.ZMEquippedPerks.getModel( f2_arg0 ) --[[ @ 0]]
	PerkName( SubHeaderDivider, PerkDescription.currentSlot, function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PerkAltar:linkToElementModel( PerkAltar, "slotIndex", true, function ( model, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkAltar:registerEventHandler( "list_active_changed", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		CoD.ZMPerkUtility.PerkSlotHighlighted( element, f2_arg0 ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	PerkAltar:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f2_local1, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( PerkAltar, f2_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "ZMEquippedPerks", "currentSlot", "slotIndex" ) then
			SelectItemIfPossible( self, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_zcac_elixir_slot" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "ZMEquippedPerks", "currentSlot", "slotIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( PerkAltar, "childFocusGained", function ( element )
		HideWidget( self.UnlockDescription ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PerkAltar ) --[[ @ 0]]
	self.PerkAltar = PerkAltar --[[ @ 0]]
	
	PerkName = LUI.UIText.new( 0.5, 0.5, 490.5, 850.5, 0.5, 0.5, 156, 183 ) --[[ @ 0]]
	PerkName:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	PerkName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	PerkName:setLetterSpacing( 7 ) --[[ @ 0]]
	PerkName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PerkName:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	self:addElement( PerkName ) --[[ @ 0]]
	self.PerkName = PerkName --[[ @ 0]]
	
	SubHeaderDivider = LUI.UIImage.new( 0.5, 0.5, 492.5, 882.5, 0.5, 0.5, 194, 195 ) --[[ @ 0]]
	SubHeaderDivider:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	SubHeaderDivider:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 1, 0, 1.24, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SubHeaderDivider ) --[[ @ 0]]
	self.SubHeaderDivider = SubHeaderDivider --[[ @ 0]]
	
	PerkDescription = LUI.UIText.new( 0.5, 0.5, 491.5, 851.5, 0.5, 0.5, 204, 221 ) --[[ @ 0]]
	PerkDescription:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	PerkDescription:setTTF( "dinnext_regular" ) --[[ @ 0]]
	PerkDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PerkDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( PerkDescription ) --[[ @ 0]]
	self.PerkDescription = PerkDescription --[[ @ 0]]
	
	local UnlockDescription = CoD.onOffText.new( f2_local1, f2_arg0, 0.5, 0.5, 489.5, 836.5, 0.5, 0.5, 369, 387 ) --[[ @ 0]]
	UnlockDescription:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return not CoD.ZMPerkUtility.IsPerkLocked( self.PerksList, f2_arg0, menu )
			end
		}
	} ) --[[ @ 0]]
	local RB = UnlockDescription --[[ @ 0]]
	local ModifierInfo = UnlockDescription.subscribeToModel --[[ @ 0]]
	local LB = DataSources.ZMEquippedPerks.getModel( f2_arg0 ) --[[ @ 0]]
	ModifierInfo( RB, LB.updateEquipped, function ( f24_arg0 )
		f2_local1:updateElementState( UnlockDescription, {
			name = "model_validation",
			menu = f2_local1,
			controller = f2_arg0,
			modelValue = f24_arg0:get(),
			modelName = "updateEquipped"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	UnlockDescription:linkToElementModel( UnlockDescription, "globalItemIndex", true, function ( model )
		f2_local1:updateElementState( UnlockDescription, {
			name = "model_validation",
			menu = f2_local1,
			controller = f2_arg0,
			modelValue = model:get(),
			modelName = "globalItemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UnlockDescription:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
	self:addElement( UnlockDescription ) --[[ @ 0]]
	self.UnlockDescription = UnlockDescription --[[ @ 0]]
	
	ModifierInfo = CoD.ZMPerk_ModifierInfo.new( f2_local1, f2_arg0, 0.5, 0.5, 486.5, 886.5, 0.5, 0.5, 12, 76 ) --[[ @ 0]]
	ModifierInfo:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f2_arg0, "isModifierSlot" )
			end
		}
	} ) --[[ @ 0]]
	ModifierInfo:linkToElementModel( ModifierInfo, "isModifierSlot", true, function ( model )
		f2_local1:updateElementState( ModifierInfo, {
			name = "model_validation",
			menu = f2_local1,
			controller = f2_arg0,
			modelValue = model:get(),
			modelName = "isModifierSlot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ModifierInfo ) --[[ @ 0]]
	self.ModifierInfo = ModifierInfo --[[ @ 0]]
	
	RB = CoD.BumperButtonWithKeyMouseText.new( f2_local1, f2_arg0, 0, 0, 1435, 1635, 0, 0, 160, 194 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	LB = CoD.BumperButtonWithKeyMouseText.new( f2_local1, f2_arg0, 0, 0, 285, 485, 0, 0, 160, 194 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	RestrictedText:linkToElementModel( PerksList, nil, false, function ( model )
		RestrictedText:setModel( model, f2_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkName:linkToElementModel( PerksList, "displayName", true, function ( model )
		local f29_local0 = model:get() --[[ @ 0]]
		if f29_local0 ~= nil then
			PerkName:setText( LocalizeToUpperString( f29_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PerkDescription:linkToElementModel( PerksList, "description", true, function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			PerkDescription:setText( Engine[@"hash_4F9F1239CFD921FE"]( f30_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	UnlockDescription:linkToElementModel( PerksList, nil, false, function ( model )
		UnlockDescription:setModel( model, f2_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UnlockDescription:linkToElementModel( PerksList, "itemIndex", true, function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= nil then
			UnlockDescription.TextBox:setText( CoD.BaseUtility.AlreadyLocalized( CoD.CACUtility.GetUnlockDescription( f2_local1, f2_arg0, f32_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ModifierInfo:linkToElementModel( PerkAltar, nil, false, function ( model )
		ModifierInfo:setModel( model, f2_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ModifierInfo:linkToElementModel( PerksList, "modifierDesc", true, function ( model )
		local f34_local0 = model:get() --[[ @ 0]]
		if f34_local0 ~= nil then
			ModifierInfo.ModifierDescription:setText( Engine[@"hash_4F9F1239CFD921FE"]( f34_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ModifierInfo:linkToElementModel( PerksList, "modifierName", true, function ( model )
		local f35_local0 = model:get() --[[ @ 0]]
		if f35_local0 ~= nil then
			ModifierInfo.ModifierName:setText( ConvertToUpperString( f35_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	f2_local1:AddButtonCallbackFunction( self, f2_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SetControllerModelValue( f2_arg0, "ZMEquippedPerks.inEditMenu", false ) --[[ @ 0]]
		ClearMenuSavedState( f2_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f2_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	PerksList.id = "PerksList" --[[ @ 0]]
	PerkAltar.id = "PerkAltar" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f2_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = PerksList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f2_arg0 ) or self.ignoreCursor) then
		self:restoreState( f2_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f2_arg0 ) --[[ @ 0]]
	end
	
	local f2_local15 = self --[[ @ 0]]
	CoD.GridAndListUtility.AddBumperNavigation( f2_local1, PerkAltar, f2_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.ZMPerkSelect.__resetProperties = function ( f40_arg0 )
	f40_arg0.LB:completeAnimation() --[[ @ 0]]
	f40_arg0.RB:completeAnimation() --[[ @ 0]]
	f40_arg0.LB:setLeftRight( 0, 0, 285, 485 ) --[[ @ 0]]
	f40_arg0.RB:setLeftRight( 0, 0, 1435, 1635 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMPerkSelect.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f42_arg0.RB:completeAnimation() --[[ @ 0]]
			f42_arg0.RB:setLeftRight( 0.5, 0.5, 482, 682 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.RB ) --[[ @ 0]]
			f42_arg0.LB:completeAnimation() --[[ @ 0]]
			f42_arg0.LB:setLeftRight( 0.5, 0.5, -682, -482 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.LB ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZMPerkSelect.__onClose = function ( f43_arg0 )
	f43_arg0.RestrictedText:close() --[[ @ 0]]
	f43_arg0.PerkName:close() --[[ @ 0]]
	f43_arg0.PerkDescription:close() --[[ @ 0]]
	f43_arg0.UnlockDescription:close() --[[ @ 0]]
	f43_arg0.ModifierInfo:close() --[[ @ 0]]
	f43_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f43_arg0.CACHeader:close() --[[ @ 0]]
	f43_arg0.BackingGrayMediumLeft:close() --[[ @ 0]]
	f43_arg0.PerksList:close() --[[ @ 0]]
	f43_arg0.PerkAltar:close() --[[ @ 0]]
	f43_arg0.RB:close() --[[ @ 0]]
	f43_arg0.LB:close() --[[ @ 0]]
end
 --[[ @ 0]]
