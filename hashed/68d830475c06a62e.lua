-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:18c66c9b1178245f" ) --[[ @ 0]]
require( "x64:2da90e0b8527aec8" ) --[[ @ 0]]
require( "x64:6472f3d8b96b551a" ) --[[ @ 0]]
require( "x64:6b40a50c0581f80a" ) --[[ @ 0]]
require( "x64:62a518d2492c1197" ) --[[ @ 0]]
require( "x64:3e52957b45821d12" ) --[[ @ 0]]

CoD.Hud_ZM_TrialsContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.__defaultWidth = 1920 --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.__defaultHeight = 1080 --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Hud_ZM_TrialsContainer ) --[[ @ 0]]
	self.id = "Hud_ZM_TrialsContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HudZMTrialCompleted = CoD.Hud_ZM_Trial_Completed.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -284, 16 ) --[[ @ 0]]
	self:addElement( HudZMTrialCompleted ) --[[ @ 0]]
	self.HudZMTrialCompleted = HudZMTrialCompleted --[[ @ 0]]
	
	local TrialRoundFailed = CoD.HUD_ZM_Trial_Round_Failed.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -360, -60 ) --[[ @ 0]]
	self:addElement( TrialRoundFailed ) --[[ @ 0]]
	self.TrialRoundFailed = TrialRoundFailed --[[ @ 0]]
	
	local TrialStrikes = CoD.Hud_ZM_Trial_Strikes.new( f1_arg0, f1_arg1, 1, 1, -267.5, -43.5, 0, 0, 83, 163 ) --[[ @ 0]]
	self:addElement( TrialStrikes ) --[[ @ 0]]
	self.TrialStrikes = TrialStrikes --[[ @ 0]]
	
	local HudZMTrialMedal = CoD.Hud_ZM_Trial_Medal.new( f1_arg0, f1_arg1, 0.5, 0.5, -384, 384, 0.5, 0.5, -134, 134 ) --[[ @ 0]]
	self:addElement( HudZMTrialMedal ) --[[ @ 0]]
	self.HudZMTrialMedal = HudZMTrialMedal --[[ @ 0]]
	
	local HudZMTrialObjective = CoD.Hud_ZM_Trial_Objective.new( f1_arg0, f1_arg1, 0, 0, 0, 1895, 0, 0, 73, 303 ) --[[ @ 0]]
	self:addElement( HudZMTrialObjective ) --[[ @ 0]]
	self.HudZMTrialObjective = HudZMTrialObjective --[[ @ 0]]
	
	local HudZMTimer = CoD.Hud_ZM_Timer.new( f1_arg0, f1_arg1, 1, 1, -255.5, -55.5, 0, 0, 33, 75 ) --[[ @ 0]]
	HudZMTimer:setRGB( 0.96, 0.66, 0 ) --[[ @ 0]]
	self:addElement( HudZMTimer ) --[[ @ 0]]
	self.HudZMTimer = HudZMTimer --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				local f2_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
				if f2_local0 then
					f2_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
					if f2_local0 then
						f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) --[[ @ 0]]
						if not f2_local0 then
							f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) --[[ @ 0]]
							if not f2_local0 then
								f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
								if not f2_local0 then
									f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) --[[ @ 0]]
									if not f2_local0 then
										f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
										if not f2_local0 then
											f2_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
										end
									end
								end
							end
						end
					end
				end
				return f2_local0
			end
		},
		{
			stateName = "Trials_HUDDeactivated",
			condition = function ( menu, element, event )
				local f3_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["hudItems.playerSpawned"], function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "hudItems.playerSpawned"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]], function ( f5_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["ZMHudGlobal.trials.hudDeactivated"], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "ZMHudGlobal.trials.hudDeactivated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["ZMHudGlobal.trials.infoHidden"], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.__resetProperties = function ( f13_arg0 )
	f13_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
	f13_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
	f13_arg0.HudZMTrialObjective:completeAnimation() --[[ @ 0]]
	f13_arg0.TrialStrikes:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.HudZMTimer:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.HudZMTrialObjective:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Trials_HUDDeactivated = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f15_local0 = function ( f16_arg0 )
				f15_arg0.TrialStrikes:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.TrialStrikes:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.TrialStrikes:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.TrialStrikes:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
			f15_arg0.TrialStrikes:setAlpha( 1 ) --[[ @ 0]]
			f15_local0( f15_arg0.TrialStrikes ) --[[ @ 0]]
			local f15_local1 = function ( f17_arg0 )
				f15_arg0.HudZMTimer:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.HudZMTimer:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.HudZMTimer:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.HudZMTimer:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
			f15_arg0.HudZMTimer:setAlpha( 1 ) --[[ @ 0]]
			f15_local1( f15_arg0.HudZMTimer ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f18_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
			f18_arg0.TrialStrikes:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.TrialStrikes ) --[[ @ 0]]
			f18_arg0.HudZMTrialObjective:completeAnimation() --[[ @ 0]]
			f18_arg0.HudZMTrialObjective:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.HudZMTrialObjective ) --[[ @ 0]]
			f18_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
			f18_arg0.HudZMTimer:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.HudZMTimer ) --[[ @ 0]]
		end,
		DefaultState = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f19_local0 = function ( f20_arg0 )
				f19_arg0.TrialStrikes:beginAnimation( 200 ) --[[ @ 0]]
				f19_arg0.TrialStrikes:setAlpha( 1 ) --[[ @ 0]]
				f19_arg0.TrialStrikes:registerEventHandler( "interrupted_keyframe", f19_arg0.clipInterrupted ) --[[ @ 0]]
				f19_arg0.TrialStrikes:registerEventHandler( "transition_complete_keyframe", f19_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f19_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
			f19_arg0.TrialStrikes:setAlpha( 0 ) --[[ @ 0]]
			f19_local0( f19_arg0.TrialStrikes ) --[[ @ 0]]
			local f19_local1 = function ( f21_arg0 )
				f19_arg0.HudZMTrialObjective:beginAnimation( 200 ) --[[ @ 0]]
				f19_arg0.HudZMTrialObjective:setAlpha( 1 ) --[[ @ 0]]
				f19_arg0.HudZMTrialObjective:registerEventHandler( "interrupted_keyframe", f19_arg0.clipInterrupted ) --[[ @ 0]]
				f19_arg0.HudZMTrialObjective:registerEventHandler( "transition_complete_keyframe", f19_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f19_arg0.HudZMTrialObjective:completeAnimation() --[[ @ 0]]
			f19_arg0.HudZMTrialObjective:setAlpha( 0 ) --[[ @ 0]]
			f19_local1( f19_arg0.HudZMTrialObjective ) --[[ @ 0]]
			local f19_local2 = function ( f22_arg0 )
				f19_arg0.HudZMTimer:beginAnimation( 200 ) --[[ @ 0]]
				f19_arg0.HudZMTimer:setAlpha( 1 ) --[[ @ 0]]
				f19_arg0.HudZMTimer:registerEventHandler( "interrupted_keyframe", f19_arg0.clipInterrupted ) --[[ @ 0]]
				f19_arg0.HudZMTimer:registerEventHandler( "transition_complete_keyframe", f19_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f19_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
			f19_arg0.HudZMTimer:setAlpha( 0 ) --[[ @ 0]]
			f19_local2( f19_arg0.HudZMTimer ) --[[ @ 0]]
		end
	},
	Trials_HUDDeactivated = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f23_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
			f23_arg0.TrialStrikes:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.TrialStrikes ) --[[ @ 0]]
			f23_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
			f23_arg0.HudZMTimer:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.HudZMTimer ) --[[ @ 0]]
		end,
		DefaultState = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f24_local0 = function ( f25_arg0 )
				f24_arg0.TrialStrikes:beginAnimation( 1000 ) --[[ @ 0]]
				f24_arg0.TrialStrikes:setAlpha( 1 ) --[[ @ 0]]
				f24_arg0.TrialStrikes:registerEventHandler( "interrupted_keyframe", f24_arg0.clipInterrupted ) --[[ @ 0]]
				f24_arg0.TrialStrikes:registerEventHandler( "transition_complete_keyframe", f24_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f24_arg0.TrialStrikes:completeAnimation() --[[ @ 0]]
			f24_arg0.TrialStrikes:setAlpha( 0 ) --[[ @ 0]]
			f24_local0( f24_arg0.TrialStrikes ) --[[ @ 0]]
			local f24_local1 = function ( f26_arg0 )
				f24_arg0.HudZMTimer:beginAnimation( 1000 ) --[[ @ 0]]
				f24_arg0.HudZMTimer:setAlpha( 1 ) --[[ @ 0]]
				f24_arg0.HudZMTimer:registerEventHandler( "interrupted_keyframe", f24_arg0.clipInterrupted ) --[[ @ 0]]
				f24_arg0.HudZMTimer:registerEventHandler( "transition_complete_keyframe", f24_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f24_arg0.HudZMTimer:completeAnimation() --[[ @ 0]]
			f24_arg0.HudZMTimer:setAlpha( 0 ) --[[ @ 0]]
			f24_local1( f24_arg0.HudZMTimer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Hud_ZM_TrialsContainer.__onClose = function ( f27_arg0 )
	f27_arg0.HudZMTrialCompleted:close() --[[ @ 0]]
	f27_arg0.TrialRoundFailed:close() --[[ @ 0]]
	f27_arg0.TrialStrikes:close() --[[ @ 0]]
	f27_arg0.HudZMTrialMedal:close() --[[ @ 0]]
	f27_arg0.HudZMTrialObjective:close() --[[ @ 0]]
	f27_arg0.HudZMTimer:close() --[[ @ 0]]
end
 --[[ @ 0]]
