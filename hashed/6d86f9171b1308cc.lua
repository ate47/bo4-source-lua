-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:351793fe51beaa2" ) --[[ @ 0]]
require( "x64:2bf776923c7291f4" ) --[[ @ 0]]

CoD.StartMenu_InventoryList = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_InventoryList.__defaultWidth = 540 --[[ @ 0]]
CoD.StartMenu_InventoryList.__defaultHeight = 239 --[[ @ 0]]
CoD.StartMenu_InventoryList.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_InventoryList ) --[[ @ 0]]
	self.id = "StartMenu_InventoryList" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, -0.1, 0.9, 37, 5 ) --[[ @ 0]]
	Backing:setRGB( 0.45, 0.45, 0.45 ) --[[ @ 0]]
	Backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local BottomBracket9Slice = LUI.UIImage.new( 0, 0, 1, 560, 0, 0, -7, 2 ) --[[ @ 0]]
	BottomBracket9Slice:setRGB( 0.55, 0.54, 0.49 ) --[[ @ 0]]
	BottomBracket9Slice:setZRot( 180 ) --[[ @ 0]]
	BottomBracket9Slice:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	BottomBracket9Slice:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	BottomBracket9Slice:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BottomBracket9Slice:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( BottomBracket9Slice ) --[[ @ 0]]
	self.BottomBracket9Slice = BottomBracket9Slice --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0, 0, 17.5, 117.5, 0, 0, -4.5, 17.5 ) --[[ @ 0]]
	Title:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Title:setText( LocalizeToUpperString( @"warzone/inventory" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setLetterSpacing( 4 ) --[[ @ 0]]
	Title:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Title:setBackingType( 1 ) --[[ @ 0]]
	Title:setBackingWidget( CoD.WZBox9Slice, f1_arg0, f1_arg1 ) --[[ @ 0]]
	Title:setBackingColor( 0.55, 0.54, 0.49 ) --[[ @ 0]]
	Title:setBackingXPadding( 16 ) --[[ @ 0]]
	Title:setBackingYPadding( 2 ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local List = LUI.UIList.new( f1_arg0, f1_arg1, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	List:setLeftRight( 0, 0, 0, 560 ) --[[ @ 0]]
	List:setTopBottom( 0, 0, 27, 239 ) --[[ @ 0]]
	List:setWidgetType( CoD.WarzoneInventoryMenuItemSmall ) --[[ @ 0]]
	List:setHorizontalCount( 5 ) --[[ @ 0]]
	List:setVerticalCount( 2 ) --[[ @ 0]]
	List:setSpacing( 20 ) --[[ @ 0]]
	List:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	List:setDataSource( "WarzoneInventory" ) --[[ @ 0]]
	List:linkToElementModel( List, "id", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:linkToElementModel( List, "availableAction", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:linkToElementModel( List, "type", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = List --[[ @ 0]]
	local f1_local6 = List.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"getmodelforclient"]( Engine[@"getclientnum"]( f1_arg1 ) ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.isInVehicle, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.0"], function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.1"], function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.2"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.3"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.4"], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:linkToElementModel( List, "castTime", true, function ( model, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.showAttachments, function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:linkToElementModel( List, "stackCount", true, function ( model, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:appendEventHandler( "input_source_changed", function ( f14_arg0, f14_arg1 )
		f14_arg1.menu = f14_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:linkToElementModel( List, "stowedAvailableAction", true, function ( model, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["hudItems.inventory.quickConsumeNetworkId"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:registerEventHandler( "list_active_changed", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.AlignElementToListItem2D( f1_arg1, element, self.InventorySplitter ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		CoD.WZUtility.SendInventoryItemFocusNotify( f1_arg1, element ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f1_arg1, self, element ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "lose_list_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		CoD.WZUtility.SendInventoryItemFocusNoneNotify( f1_arg1 ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "gain_focus", function ( element, event )
		local f21_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f21_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f21_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f21_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "killstreak" ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "killstreak" ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 500 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 1000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 1000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 2000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 1500 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 3000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 2000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 4000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 2500 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 5000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"specialty_consumer" ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 3000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 6000 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"warzone/attach", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/swap", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"warzone/equip", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not IsPC() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SetupSplitCount( controller, element ) --[[ @ 0]]
			MenuHidesFreeCursor( menu, controller ) --[[ @ 0]]
			SetElementState( self, self.InventorySplitter, controller, "Open" ) --[[ @ 0]]
			SetLoseFocusToElement( self, "List", controller ) --[[ @ 0]]
			SetFocusToElement( self, "InventorySplitter", controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not IsPC() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_144DB3A08BE7FB92", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_144DB3A08BE7FB92", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] | Enum[@"luibuttonpromptflags"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], "F", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_144DB3A08BE7FB92", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_144DB3A08BE7FB92", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			CoD.WZUtility.SendInventoryConsumeNotify( controller, element ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"menu/equip", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"warzone/attach", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"menu/use", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"menu/swap", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			CoD.WZUtility.SendInventoryConsumeNotify( controller, element ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( controller, "WarzoneInventory", "showAttachments" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_pckey_2"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and not CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( self, controller, "hudItems.inventory.quickConsumeNetworkId", "id" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "generic" ) then
			CoD.WZUtility.SendInventoryEquipCurrentConsumable( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"warzone/split", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"wz/swap_stowed", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"wz/transfer_stowed", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and not CoD.ModelUtility.IsControllerModelValueEqualToSelfModelValue( self, controller, "hudItems.inventory.quickConsumeNetworkId", "id" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "generic" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_pckey_2"], @"hash_42900747B42A56BA", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"hash_64D2505E19049444"], @"warzone/drop", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], "ui_contextual_1", function ( element, menu, controller, model )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"wz/swap_stowed", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"wz/transfer_stowed", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/use", function ( f40_arg0, f40_arg1, f40_arg2, f40_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f40_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f40_arg0, f40_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f40_arg0, f40_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			return function ( f41_arg0, f41_arg1, f41_arg2, f41_arg3 )
				CoD.WZUtility.SendInventoryConsumeNotify( f41_arg2, f41_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/attach", function ( f42_arg0, f42_arg1, f42_arg2, f42_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f42_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f42_arg0, f42_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f42_arg0, f42_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f42_arg2, "WarzoneInventory", "showAttachments" ) then
			return function ( f43_arg0, f43_arg1, f43_arg2, f43_arg3 )
				CoD.WZUtility.SendInventoryEquipNotify( f43_arg2, f43_arg0, f43_arg1, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/swap", function ( f44_arg0, f44_arg1, f44_arg2, f44_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f44_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f44_arg0, f44_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f44_arg0, f44_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			return function ( f45_arg0, f45_arg1, f45_arg2, f45_arg3 )
				CoD.WZUtility.SendInventoryEquipNotify( f45_arg2, f45_arg0, f45_arg1, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/equip", function ( f46_arg0, f46_arg1, f46_arg2, f46_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f46_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f46_arg0, f46_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f46_arg0, f46_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.EQUIP ) then
			return function ( f47_arg0, f47_arg1, f47_arg2, f47_arg3 )
				CoD.WZUtility.SendInventoryEquipNotify( f47_arg2, f47_arg0, f47_arg1, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_144DB3A08BE7FB92", function ( f48_arg0, f48_arg1, f48_arg2, f48_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f48_arg0, f48_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f48_arg0, f48_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f48_arg2 ) then
			return function ( f49_arg0, f49_arg1, f49_arg2, f49_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f49_arg2, f49_arg0 ) --[[ @ 0]]
				CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/drop", function ( f50_arg0, f50_arg1, f50_arg2, f50_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f50_arg0, f50_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f50_arg0, f50_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f50_arg2 ) then
			return function ( f51_arg0, f51_arg1, f51_arg2, f51_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f51_arg2, f51_arg0 ) --[[ @ 0]]
				CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"warzone/split", function ( f52_arg0, f52_arg1, f52_arg2, f52_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f52_arg0, f52_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( f52_arg0, f52_arg2, "stackCount", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f52_arg2 ) then
			return function ( f53_arg0, f53_arg1, f53_arg2, f53_arg3 )
				CoD.WZUtility.OpenPCSplitterWidgetForElement( self, f53_arg1, f53_arg2, f53_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"wz/swap_stowed", function ( f54_arg0, f54_arg1, f54_arg2, f54_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f54_arg0, f54_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f54_arg2 ) and IsMouseOrKeyboard( f54_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualTo( f54_arg0, f54_arg2, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f54_arg0, f54_arg2, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			return function ( f55_arg0, f55_arg1, f55_arg2, f55_arg3 )
				CoD.WZUtility.SendInventoryEquipOnWeaponNotify( f55_arg2, f55_arg0, f55_arg1, false, true ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"wz/transfer_stowed", function ( f56_arg0, f56_arg1, f56_arg2, f56_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f56_arg0, f56_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f56_arg2 ) and IsMouseOrKeyboard( f56_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualTo( f56_arg0, f56_arg2, "type", "attachment" ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f56_arg0, f56_arg2, "stowedAvailableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			return function ( f57_arg0, f57_arg1, f57_arg2, f57_arg3 )
				CoD.WZUtility.SendInventoryEquipOnWeaponNotify( f57_arg2, f57_arg0, f57_arg1, false, true ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( List ) --[[ @ 0]]
	self.List = List --[[ @ 0]]
	
	f1_local6 = nil --[[ @ 0]]
	f1_local6 = LUI.UIElement.createFake() --[[ @ 0]]
	self.InventorySplitter = f1_local6 --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ExtraStorageVisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "hudItems.inventory.count", CoD.WZUtility.InventorySize.ITEM_WORLD_PLAYER_INVENTORY_SIZE )
			end
		}
	} ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8["hudItems.inventory.count"], function ( f59_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f59_arg0:get(),
			modelName = "hudItems.inventory.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self.__on_onStartMenuOpened_self = function ( f60_arg0, f60_arg1 )
		local f60_local0 = self --[[ @ 0]]
		CoD.GridAndListUtility.UpdateDataSource( self.List, false, false, true ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f61_arg2, f61_arg3, f61_arg4 )
		CoD.GridAndListUtility.UpdateDataSource( self.List, false, false, true ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List.id = "List" --[[ @ 0]]
	f1_local6.id = "InventorySplitter" --[[ @ 0]]
	self.__defaultFocus = List --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_InventorySplitter ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local5 = self --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local5, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_InventoryList.__resetProperties = function ( f63_arg0 )
	f63_arg0.List:completeAnimation() --[[ @ 0]]
	f63_arg0.Title:completeAnimation() --[[ @ 0]]
	f63_arg0.BottomBracket9Slice:completeAnimation() --[[ @ 0]]
	f63_arg0.InventorySplitter:completeAnimation() --[[ @ 0]]
	f63_arg0.Backing:completeAnimation() --[[ @ 0]]
	f63_arg0.List:setTopBottom( 0, 0, 27, 239 ) --[[ @ 0]]
	f63_arg0.Title:setTopBottom( 0, 0, -4.5, 17.5 ) --[[ @ 0]]
	f63_arg0.Title:setText( LocalizeToUpperString( @"warzone/inventory" ) ) --[[ @ 0]]
	f63_arg0.BottomBracket9Slice:setTopBottom( 0, 0, -7, 2 ) --[[ @ 0]]
	f63_arg0.InventorySplitter:setTopBottom( 0, 0, 0, 50 ) --[[ @ 0]]
	f63_arg0.Backing:setTopBottom( -0.1, 0.9, 37, 5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_InventoryList.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f64_arg0.Backing:completeAnimation() --[[ @ 0]]
			f64_arg0.Backing:setTopBottom( -0.1, 0.9, 73, 41 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.Backing ) --[[ @ 0]]
			f64_arg0.BottomBracket9Slice:completeAnimation() --[[ @ 0]]
			f64_arg0.BottomBracket9Slice:setTopBottom( 0, 0, 73, 82 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.BottomBracket9Slice ) --[[ @ 0]]
			f64_arg0.Title:completeAnimation() --[[ @ 0]]
			f64_arg0.Title:setTopBottom( 0, 0, 76, 100 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.Title ) --[[ @ 0]]
			f64_arg0.List:completeAnimation() --[[ @ 0]]
			f64_arg0.List:setTopBottom( 0, 0, 115.5, 211.5 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.List ) --[[ @ 0]]
			f64_arg0.InventorySplitter:completeAnimation() --[[ @ 0]]
			f64_arg0.InventorySplitter:setTopBottom( 0, 0, 97.5, 147.5 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.InventorySplitter ) --[[ @ 0]]
		end
	},
	ExtraStorageVisible = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f65_arg0.BottomBracket9Slice:completeAnimation() --[[ @ 0]]
			f65_arg0.BottomBracket9Slice:setTopBottom( 0, 0, -13, -4 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.BottomBracket9Slice ) --[[ @ 0]]
			f65_arg0.Title:completeAnimation() --[[ @ 0]]
			f65_arg0.Title:setTopBottom( 0, 0, -10.5, 11.5 ) --[[ @ 0]]
			f65_arg0.Title:setText( LocalizeToUpperString( @"warzone/backpack" ) ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.Title ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_InventoryList.__onClose = function ( f66_arg0 )
	f66_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f66_arg0.List:close() --[[ @ 0]]
	f66_arg0.InventorySplitter:close() --[[ @ 0]]
end
 --[[ @ 0]]
