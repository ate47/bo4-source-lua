-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:4e983712ed0b95d3" ) --[[ @ 0]]
require( "ui/uieditor/widgets/notifications/notificationqueuewidgets/notificationrewardqueuewidgets/notification2xpreward" ) --[[ @ 0]]

CoD.DoubleXPPromotionalIcon = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.__defaultWidth = 72 --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.__defaultHeight = 72 --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DoubleXPPromotionalIcon ) --[[ @ 0]]
	self.id = "DoubleXPPromotionalIcon" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local DoubleXPIcon = CoD.Notification2xpReward.new( f1_arg0, f1_arg1, 0, 0, 0, 72, 0, 0, 0, 72 ) --[[ @ 0]]
	DoubleXPIcon:mergeStateConditions( {
		{
			stateName = "VisibleWZ",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasDoubleXP( f1_arg1, element ) and CoD.DoubleXPUtility.HasMainMode( f1_arg1, element, Enum[@"emodes"][@"mode_warzone"] )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasDoubleXP( f1_arg1, element )
			end
		}
	} ) --[[ @ 0]]
	DoubleXPIcon:linkToElementModel( DoubleXPIcon, "hasDoubleXP", true, function ( model )
		f1_arg0:updateElementState( DoubleXPIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasDoubleXP"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DoubleXPIcon:linkToElementModel( self, nil, false, function ( model )
		DoubleXPIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DoubleXPIcon ) --[[ @ 0]]
	self.DoubleXPIcon = DoubleXPIcon --[[ @ 0]]
	
	local PromotionalDoubleXPIcon = CoD.DirectorFindGamePlaylistInfoTimed2xp.new( f1_arg0, f1_arg1, 0, 0, 0, 72, 0, 0, 0, 106 ) --[[ @ 0]]
	PromotionalDoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
	PromotionalDoubleXPIcon:linkToElementModel( self, nil, false, function ( model )
		PromotionalDoubleXPIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PromotionalDoubleXPIcon ) --[[ @ 0]]
	self.PromotionalDoubleXPIcon = PromotionalDoubleXPIcon --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasDoubleXP( f1_arg1, element )
			end
		},
		{
			stateName = "Promotional",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasPromotionalDoubleXP( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "hasDoubleXP", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasDoubleXP"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = self --[[ @ 0]]
	local f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = DataSources.PromotionalDoubleXP.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5.dailyDoubleXPTimeLeft, function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "dailyDoubleXPTimeLeft"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f11_arg2, f11_arg3, f11_arg4 )
		if not CoD.BaseUtility.IsSelfInEitherState( self, "Visible", "Promotional" ) then
			HideWidget( self ) --[[ @ 0]]
		else
			ShowWidget( self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.__resetProperties = function ( f12_arg0 )
	f12_arg0.DoubleXPIcon:completeAnimation() --[[ @ 0]]
	f12_arg0.PromotionalDoubleXPIcon:completeAnimation() --[[ @ 0]]
	f12_arg0.DoubleXPIcon:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.PromotionalDoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.DoubleXPIcon:completeAnimation() --[[ @ 0]]
			f13_arg0.DoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.DoubleXPIcon ) --[[ @ 0]]
			f13_arg0.PromotionalDoubleXPIcon:completeAnimation() --[[ @ 0]]
			f13_arg0.PromotionalDoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.PromotionalDoubleXPIcon ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f14_arg0.DoubleXPIcon:completeAnimation() --[[ @ 0]]
			f14_arg0.DoubleXPIcon:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.DoubleXPIcon ) --[[ @ 0]]
			f14_arg0.PromotionalDoubleXPIcon:completeAnimation() --[[ @ 0]]
			f14_arg0.PromotionalDoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.PromotionalDoubleXPIcon ) --[[ @ 0]]
		end
	},
	Promotional = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f15_arg0.DoubleXPIcon:completeAnimation() --[[ @ 0]]
			f15_arg0.DoubleXPIcon:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.DoubleXPIcon ) --[[ @ 0]]
			f15_arg0.PromotionalDoubleXPIcon:completeAnimation() --[[ @ 0]]
			f15_arg0.PromotionalDoubleXPIcon:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.PromotionalDoubleXPIcon ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DoubleXPPromotionalIcon.__onClose = function ( f16_arg0 )
	f16_arg0.DoubleXPIcon:close() --[[ @ 0]]
	f16_arg0.PromotionalDoubleXPIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
