-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/zmfrontend/zmaargenericalltimestatwidget" ) --[[ @ 0]]

CoD.ZMAARAllTimePerfWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.__defaultWidth = 1165 --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.__defaultHeight = 406 --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMAARAllTimePerfWidget ) --[[ @ 0]]
	self.id = "ZMAARAllTimePerfWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PerformBracketBlur = LUI.UIImage.new( 0, 1, -3.5, 4.5, 1, 1, -72, -52 ) --[[ @ 0]]
	PerformBracketBlur:setAlpha( 0.3 ) --[[ @ 0]]
	PerformBracketBlur:setImage( RegisterImage( @"uie_ui_menu_aar_perform_botline_blur" ) ) --[[ @ 0]]
	PerformBracketBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	PerformBracketBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	PerformBracketBlur:setupNineSliceShader( 174, 10 ) --[[ @ 0]]
	self:addElement( PerformBracketBlur ) --[[ @ 0]]
	self.PerformBracketBlur = PerformBracketBlur --[[ @ 0]]
	
	local ZmMapImage = LUI.UIImage.new( 0, 0, 0, 1165, 0, 0, 36, 348 ) --[[ @ 0]]
	ZmMapImage:subscribeToGlobalModel( f1_arg1, "AARSummaryStats", "mapName", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ZmMapImage:setImage( RegisterImage( CoD.MapUtility.MapNameToMapAARImage( CoD.MapUtility.ConvertMapNameToXHash( f2_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ZmMapImage ) --[[ @ 0]]
	self.ZmMapImage = ZmMapImage --[[ @ 0]]
	
	local infoBracketBot = LUI.UIImage.new( 0, 1, -1, 1, 1, 1, -65, -57 ) --[[ @ 0]]
	infoBracketBot:setAlpha( 0.5 ) --[[ @ 0]]
	infoBracketBot:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	infoBracketBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	infoBracketBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	infoBracketBot:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( infoBracketBot ) --[[ @ 0]]
	self.infoBracketBot = infoBracketBot --[[ @ 0]]
	
	local DotPipR = LUI.UIImage.new( 1, 1, -2, 2, 1, 1, -70.5, -66.5 ) --[[ @ 0]]
	DotPipR:setAlpha( 0.5 ) --[[ @ 0]]
	DotPipR:setImage( RegisterImage( @"hash_73854665C02218EF" ) ) --[[ @ 0]]
	DotPipR:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( DotPipR ) --[[ @ 0]]
	self.DotPipR = DotPipR --[[ @ 0]]
	
	local DotPipL = LUI.UIImage.new( 0, 0, -2, 2, 1, 1, -70.5, -66.5 ) --[[ @ 0]]
	DotPipL:setAlpha( 0.5 ) --[[ @ 0]]
	DotPipL:setImage( RegisterImage( @"hash_73854665C02218EF" ) ) --[[ @ 0]]
	DotPipL:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( DotPipL ) --[[ @ 0]]
	self.DotPipL = DotPipL --[[ @ 0]]
	
	local ImageCover = LUI.UIImage.new( 0, 0, 0, 1165, 0, 0, 36, 348 ) --[[ @ 0]]
	ImageCover:setRGB( ColorSet.BadgeText.r, ColorSet.BadgeText.g, ColorSet.BadgeText.b ) --[[ @ 0]]
	ImageCover:setAlpha( 0.35 ) --[[ @ 0]]
	self:addElement( ImageCover ) --[[ @ 0]]
	self.ImageCover = ImageCover --[[ @ 0]]
	
	local ZMMapName = LUI.UIText.new( 0, 0, 21.5, 801.5, 0, 0, 318.5, 339.5 ) --[[ @ 0]]
	ZMMapName:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	ZMMapName:setTTF( "skorzhen" ) --[[ @ 0]]
	ZMMapName:setLetterSpacing( 4 ) --[[ @ 0]]
	ZMMapName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ZMMapName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	ZMMapName:linkToElementModel( self, "mapName", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ZMMapName:setText( CoD.MapUtility.MapNameToLocalizedToUpperName( CoD.MapUtility.ConvertMapNameToLocalizedXHash( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ZMMapName ) --[[ @ 0]]
	self.ZMMapName = ZMMapName --[[ @ 0]]
	
	local ZMModeName = LUI.UIText.new( 0, 0, 20.5, 620.5, 0, 0, 280.5, 313.5 ) --[[ @ 0]]
	ZMModeName:setRGB( ColorSet.PlayerYellow.r, ColorSet.PlayerYellow.g, ColorSet.PlayerYellow.b ) --[[ @ 0]]
	ZMModeName:setTTF( "skorzhen" ) --[[ @ 0]]
	ZMModeName:setLetterSpacing( 10 ) --[[ @ 0]]
	ZMModeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ZMModeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	ZMModeName:linkToElementModel( self, "gametype", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ZMModeName:setText( CoD.GameTypeUtility.GameTypeToLocalizeToUpperName( CoD.GameTypeUtility.ConvertMapNameToLocalizedXHash( f4_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ZMModeName ) --[[ @ 0]]
	self.ZMModeName = ZMModeName --[[ @ 0]]
	
	local ZmGenericAllTimeList = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 4, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	ZmGenericAllTimeList:setLeftRight( 0, 0, -1, 1164 ) --[[ @ 0]]
	ZmGenericAllTimeList:setTopBottom( 0, 0, 14, 128 ) --[[ @ 0]]
	ZmGenericAllTimeList:setAlpha( 0 ) --[[ @ 0]]
	ZmGenericAllTimeList:setWidgetType( CoD.ZMAARGenericAllTimeStatWidget ) --[[ @ 0]]
	ZmGenericAllTimeList:setHorizontalCount( 7 ) --[[ @ 0]]
	ZmGenericAllTimeList:setSpacing( 4 ) --[[ @ 0]]
	ZmGenericAllTimeList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ZmGenericAllTimeList:setDataSource( "ZMAllTimeSummaryListGeneric" ) --[[ @ 0]]
	self:addElement( ZmGenericAllTimeList ) --[[ @ 0]]
	self.ZmGenericAllTimeList = ZmGenericAllTimeList --[[ @ 0]]
	
	local ZMAllTimePerformanceLabel = LUI.UIText.new( 0, 0, 0, 855, 0, 0, -47, -9 ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setRGB( 0.9, 0.89, 0.78 ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setAlpha( 0 ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setText( LocalizeToUpperString( @"hash_7D902FA6C6DDD217" ) ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setTTF( "skorzhen" ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setLetterSpacing( 10 ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ZMAllTimePerformanceLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ZMAllTimePerformanceLabel ) --[[ @ 0]]
	self.ZMAllTimePerformanceLabel = ZMAllTimePerformanceLabel --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "PublicOnline",
			condition = function ( menu, element, event )
				return IsPublicOnlineGame()
			end
		}
	} ) --[[ @ 0]]
	ZmGenericAllTimeList.id = "ZmGenericAllTimeList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.__resetProperties = function ( f6_arg0 )
	f6_arg0.ZmGenericAllTimeList:completeAnimation() --[[ @ 0]]
	f6_arg0.ZMAllTimePerformanceLabel:completeAnimation() --[[ @ 0]]
	f6_arg0.ZmGenericAllTimeList:setAlpha( 0 ) --[[ @ 0]]
	f6_arg0.ZMAllTimePerformanceLabel:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	PublicOnline = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f8_arg0.ZmGenericAllTimeList:completeAnimation() --[[ @ 0]]
			f8_arg0.ZmGenericAllTimeList:setAlpha( 1 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.ZmGenericAllTimeList ) --[[ @ 0]]
			f8_arg0.ZMAllTimePerformanceLabel:completeAnimation() --[[ @ 0]]
			f8_arg0.ZMAllTimePerformanceLabel:setAlpha( 1 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.ZMAllTimePerformanceLabel ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZMAARAllTimePerfWidget.__onClose = function ( f9_arg0 )
	f9_arg0.ZmMapImage:close() --[[ @ 0]]
	f9_arg0.ZMMapName:close() --[[ @ 0]]
	f9_arg0.ZMModeName:close() --[[ @ 0]]
	f9_arg0.ZmGenericAllTimeList:close() --[[ @ 0]]
end
 --[[ @ 0]]
