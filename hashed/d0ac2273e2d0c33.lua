-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:44dfe5c6b3fbb32a" ) --[[ @ 0]]
require( "x64:4e1a4ff2280da16d" ) --[[ @ 0]]
require( "x64:75e684e2d39669cd" ) --[[ @ 0]]
require( "x64:2e5724ea40c9bd4e" ) --[[ @ 0]]

CoD.ScoreboardMapWZInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ScoreboardMapWZInternal.__defaultWidth = 967 --[[ @ 0]]
CoD.ScoreboardMapWZInternal.__defaultHeight = 966 --[[ @ 0]]
CoD.ScoreboardMapWZInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelEnumIfNotSet( f1_arg1, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.ALLOW_PLACEMENT ) --[[ @ 0]]
	InitDataSourceModel( f1_arg1, "WarzonePerController" ) --[[ @ 0]]
	CoD.WZUtility.InitWidgetForScaleAndPan( f1_arg1, self ) --[[ @ 0]]
	CoD.WZUtility.InitWidgetForMouseDrag( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.ScoreboardMapWZInternal ) --[[ @ 0]]
	self.id = "ScoreboardMapWZInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BlurBG = LUI.UIImage.new( 0.5, 1.5, -474, -484, 0.49, 1.49, -473, -483 ) --[[ @ 0]]
	BlurBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	BlurBG:setShaderVector( 0, 0.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlurBG ) --[[ @ 0]]
	self.BlurBG = BlurBG --[[ @ 0]]
	
	local BlurBGTint = LUI.UIImage.new( 0.5, 1.5, -475, -483, 0.49, 1.49, -474, -482 ) --[[ @ 0]]
	BlurBGTint:setRGB( 0.11, 0.11, 0.11 ) --[[ @ 0]]
	BlurBGTint:setAlpha( 0.9 ) --[[ @ 0]]
	BlurBGTint:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	BlurBGTint:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlurBGTint ) --[[ @ 0]]
	self.BlurBGTint = BlurBGTint --[[ @ 0]]
	
	local ScoreboardGameStatusMap = CoD.ScoreboardGameStatusMapWZ.new( f1_arg0, f1_arg1, 0.5, 0.5, -436, 460, 0.5, 0.5, -436, 460 ) --[[ @ 0]]
	self:addElement( ScoreboardGameStatusMap ) --[[ @ 0]]
	self.ScoreboardGameStatusMap = ScoreboardGameStatusMap --[[ @ 0]]
	
	local MapGrid02 = LUI.UIImage.new( 0.46, 1.46, -402, -474, 0.47, 1.47, -403, -469 ) --[[ @ 0]]
	MapGrid02:setImage( RegisterImage( @"uie_ui_menu_mp_scoreboard_map_grid01" ) ) --[[ @ 0]]
	MapGrid02:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_17EA4827662D4CD4" ) ) --[[ @ 0]]
	MapGrid02:setShaderVector( 0, 4, 5.92, 0, 0 ) --[[ @ 0]]
	MapGrid02:setShaderVector( 1, 0, 1, 0, 1 ) --[[ @ 0]]
	self:addElement( MapGrid02 ) --[[ @ 0]]
	self.MapGrid02 = MapGrid02 --[[ @ 0]]
	
	local ColumnHeadingBG = LUI.UIImage.new( 0.5, 1.47, -479, -479, 0, 0, 5, 47 ) --[[ @ 0]]
	ColumnHeadingBG:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ColumnHeadingBG:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ColumnHeadingBG ) --[[ @ 0]]
	self.ColumnHeadingBG = ColumnHeadingBG --[[ @ 0]]
	
	local RowHeadingBG = LUI.UIImage.new( 0, 0, 4.5, 46.5, 0.5, 1.47, -478, -478 ) --[[ @ 0]]
	RowHeadingBG:setRGB( 0, 0, 0 ) --[[ @ 0]]
	RowHeadingBG:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( RowHeadingBG ) --[[ @ 0]]
	self.RowHeadingBG = RowHeadingBG --[[ @ 0]]
	
	local ColumnHeadings = CoD.ScoreboardMapColumnHeadingsContainer.new( f1_arg0, f1_arg1, 0.5, 1.43, -436, -436, 0, 0, 6, 46 ) --[[ @ 0]]
	self:addElement( ColumnHeadings ) --[[ @ 0]]
	self.ColumnHeadings = ColumnHeadings --[[ @ 0]]
	
	local TopLeftCornerElement = LUI.UIImage.new( 0, 0, 5.5, 45.5, 0, 0, 6, 46 ) --[[ @ 0]]
	TopLeftCornerElement:setRGB( 0, 0, 0 ) --[[ @ 0]]
	TopLeftCornerElement:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	TopLeftCornerElement:setShaderVector( 0, 0, 0.5, 0, 0 ) --[[ @ 0]]
	self:addElement( TopLeftCornerElement ) --[[ @ 0]]
	self.TopLeftCornerElement = TopLeftCornerElement --[[ @ 0]]
	
	local RowHeadings = CoD.ScoreboardMapRowHeadingsContainer.new( f1_arg0, f1_arg1, 0, 0, 5.5, 45.5, 0.5, 1.43, -435, -435 ) --[[ @ 0]]
	self:addElement( RowHeadings ) --[[ @ 0]]
	self.RowHeadings = RowHeadings --[[ @ 0]]
	
	local BlurBgTLCorner = LUI.UIImage.new( 0, 0, 5.5, 46.5, 0, 0, 6, 47 ) --[[ @ 0]]
	BlurBgTLCorner:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BlurBgTLCorner:setAlpha( 0.8 ) --[[ @ 0]]
	BlurBgTLCorner:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	BlurBgTLCorner:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlurBgTLCorner ) --[[ @ 0]]
	self.BlurBgTLCorner = BlurBgTLCorner --[[ @ 0]]
	
	local BoundaryLine01 = LUI.UIImage.new( 0.5, 1.47, -479, -479, 1, 1, -24, -22 ) --[[ @ 0]]
	BoundaryLine01:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BoundaryLine01 ) --[[ @ 0]]
	self.BoundaryLine01 = BoundaryLine01 --[[ @ 0]]
	
	local BoundaryLine03 = LUI.UIImage.new( 0, 0, 45.5, 47.5, 0.5, 1.47, -477, -477 ) --[[ @ 0]]
	BoundaryLine03:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BoundaryLine03 ) --[[ @ 0]]
	self.BoundaryLine03 = BoundaryLine03 --[[ @ 0]]
	
	local BoundaryLine02 = LUI.UIImage.new( 0.5, 1.47, -478, -478, 0, 0, 46, 48 ) --[[ @ 0]]
	BoundaryLine02:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BoundaryLine02 ) --[[ @ 0]]
	self.BoundaryLine02 = BoundaryLine02 --[[ @ 0]]
	
	local BoundaryLine04 = LUI.UIImage.new( 1, 1, -25.5, -23.5, 0.5, 1.47, -478, -478 ) --[[ @ 0]]
	BoundaryLine04:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BoundaryLine04 ) --[[ @ 0]]
	self.BoundaryLine04 = BoundaryLine04 --[[ @ 0]]
	
	local TiledDotRight = LUI.UIImage.new( 1, 1, -25, -5, 0.5, 1.49, -476, -476 ) --[[ @ 0]]
	TiledDotRight:setAlpha( 0.02 ) --[[ @ 0]]
	TiledDotRight:setImage( RegisterImage( @"hash_71D86AD0278EBECC" ) ) --[[ @ 0]]
	TiledDotRight:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	TiledDotRight:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledDotRight:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( TiledDotRight ) --[[ @ 0]]
	self.TiledDotRight = TiledDotRight --[[ @ 0]]
	
	local TiledDotBot = LUI.UIImage.new( 0.5, 0.5, -477.5, 458.5, 0.5, 0.5, 460, 478 ) --[[ @ 0]]
	TiledDotBot:setAlpha( 0.02 ) --[[ @ 0]]
	TiledDotBot:setImage( RegisterImage( @"hash_71D86AD0278EBECC" ) ) --[[ @ 0]]
	TiledDotBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	TiledDotBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledDotBot:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( TiledDotBot ) --[[ @ 0]]
	self.TiledDotBot = TiledDotBot --[[ @ 0]]
	
	local MapFrame = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	MapFrame:setImage( RegisterImage( @"hash_33D54BC53A40189A" ) ) --[[ @ 0]]
	MapFrame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	MapFrame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	MapFrame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( MapFrame ) --[[ @ 0]]
	self.MapFrame = MapFrame --[[ @ 0]]
	
	local MarkerImage = CoD.WarzonePlayerMarker.new( f1_arg0, f1_arg1, 0.5, 0.5, -6, 26, 0.5, 0.5, -5, 27 ) --[[ @ 0]]
	MarkerImage:subscribeToGlobalModel( f1_arg1, "PerController", "clientModel", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MarkerImage:setModel( f2_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	MarkerImage:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		CoD.WZUtility.InitPlayerMarker( self, element, self.ScoreboardGameStatusMap, f1_arg1 ) --[[ @ 0]]
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	MarkerImage:registerEventHandler( "input_source_changed", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) then
			HideWidget( element ) --[[ @ 0]]
		elseif not IsMouseOrKeyboard( f1_arg1 ) then
			ShowWidget( element ) --[[ @ 0]]
		end
		MarkerImage:updateState( MarkerImage, {
			name = "update_state",
			controller = f1_arg1,
			menu = f1_arg0
		} ) --[[ @ 0]]
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( MarkerImage ) --[[ @ 0]]
	self.MarkerImage = MarkerImage --[[ @ 0]]
	
	local f1_local19 = self --[[ @ 0]]
	local f1_local20 = self.subscribeToModel --[[ @ 0]]
	local f1_local21 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local20( f1_local19, f1_local21["hudItems.waypointStatus"], function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "deadSpectator.playerIndex", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local19 = self --[[ @ 0]]
	f1_local20 = self.subscribeToModel --[[ @ 0]]
	f1_local21 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local20( f1_local19, f1_local21.LastInput, function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.POST_PLACEMENT_DELAY ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.POST_DELETION_DELAY ) and not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) then
			CoD.WZUtility.PlaceMarker( controller, self.MarkerImage, self.ScoreboardGameStatusMap ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) and IsGamepad( controller ) then
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.POST_PLACEMENT_DELAY ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.POST_DELETION_DELAY ) and not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rb"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		elseif not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rb"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"], "MOUSE3", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.ALLOW_DELETION ) and not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) then
			CoD.WZUtility.RemoveMarker( controller, self.MarkerImage ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) and IsGamepad( controller ) then
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "hudItems.waypointStatus", CoD.WZUtility.WaypointStatus.ALLOW_DELETION ) and not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_lb"], @"hash_0", nil, "MOUSE3" ) --[[ @ 0]]
			return false
		elseif not CoD.WZUtility.IsControllerDeadAndNotRespawning( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_lb"], @"hash_0", nil, "MOUSE3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.WZUtility.ZoomMap( controller, false, self.ScoreboardGameStatusMap ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.WZUtility.ZoomMap( controller, true, self.ScoreboardGameStatusMap ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_lstick_pressed"], nil, function ( element, menu, controller, model )
		CoD.WZUtility.CenterCursorOnPlayer( controller, self.ScoreboardGameStatusMap ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_lstick_pressed"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local20 = self --[[ @ 0]]
	f1_local20 = MarkerImage --[[ @ 0]]
	if IsPC() and IsMouseOrKeyboard( f1_arg1 ) then
		HideWidget( f1_local20 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ScoreboardMapWZInternal.__resetProperties = function ( f19_arg0 )
	f19_arg0.MarkerImage:completeAnimation() --[[ @ 0]]
	f19_arg0.MarkerImage:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ScoreboardMapWZInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Focus = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f21_arg0.MarkerImage:completeAnimation() --[[ @ 0]]
			f21_arg0.MarkerImage:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.MarkerImage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ScoreboardMapWZInternal.__onClose = function ( f22_arg0 )
	f22_arg0.ScoreboardGameStatusMap:close() --[[ @ 0]]
	f22_arg0.ColumnHeadings:close() --[[ @ 0]]
	f22_arg0.RowHeadings:close() --[[ @ 0]]
	f22_arg0.MarkerImage:close() --[[ @ 0]]
end
 --[[ @ 0]]
