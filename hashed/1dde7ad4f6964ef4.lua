-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/common/commonwipemeterwithglow" ) --[[ @ 0]]
require( "x64:41f06e98239ff754" ) --[[ @ 0]]
require( "x64:51cd7f68136f9cc0" ) --[[ @ 0]]

CoD.ProgressBar_Rank = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ProgressBar_Rank.__defaultWidth = 1725 --[[ @ 0]]
CoD.ProgressBar_Rank.__defaultHeight = 97 --[[ @ 0]]
CoD.ProgressBar_Rank.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ProgressBar_Rank ) --[[ @ 0]]
	self.id = "ProgressBar_Rank" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LevelMeterDarkTint = LUI.UIImage.new( 0, 0, 181.5, 1548.5, 0.5, 0.5, -4.5, 11.5 ) --[[ @ 0]]
	LevelMeterDarkTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LevelMeterDarkTint:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( LevelMeterDarkTint ) --[[ @ 0]]
	self.LevelMeterDarkTint = LevelMeterDarkTint --[[ @ 0]]
	
	local StoneTiledBacking = LUI.UIImage.new( 0, 0, 178.5, 1548.5, 0.5, 0.5, -4.5, 11.5 ) --[[ @ 0]]
	StoneTiledBacking:setAlpha( 0.4 ) --[[ @ 0]]
	StoneTiledBacking:setImage( RegisterImage( @"uie_ui_zm_laboratory_buttonbgtile" ) ) --[[ @ 0]]
	StoneTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	StoneTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	StoneTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( StoneTiledBacking ) --[[ @ 0]]
	self.StoneTiledBacking = StoneTiledBacking --[[ @ 0]]
	
	local curRank = LUI.UIText.new( 0, 0, 106, 151, 0.5, 0.5, -11.5, 24.5 ) --[[ @ 0]]
	curRank:setTTF( "skorzhen" ) --[[ @ 0]]
	curRank:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	curRank:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "currentRank", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			curRank:setRGB( SetToParagonColorIfPrestigeMasterByRank( 255, 255, 255, f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	curRank:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "currentRank", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			curRank:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( curRank ) --[[ @ 0]]
	self.curRank = curRank --[[ @ 0]]
	
	local curRankImg = LUI.UIImage.new( 0, 0, -12, 84, 0.5, 0.5, -42.5, 41.5 ) --[[ @ 0]]
	curRankImg:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "currentRankIcon", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			curRankImg:setImage( RegisterImage( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( curRankImg ) --[[ @ 0]]
	self.curRankImg = curRankImg --[[ @ 0]]
	
	local EarnedXP = CoD.CommonWipeMeterWithGlow.new( f1_arg0, f1_arg1, 0, 0, 181, 1548, 0.5, 0.5, -16.5, 22.5 ) --[[ @ 0]]
	EarnedXP.Meter:setRGB( 1, 0.73, 0 ) --[[ @ 0]]
	EarnedXP.Meter:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	EarnedXP.MeterAdd:setAlpha( 0.3 ) --[[ @ 0]]
	EarnedXP.MeterAdd:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	EarnedXP.MeterGlow:setRGB( 0.39, 0.18, 0 ) --[[ @ 0]]
	EarnedXP.MeterGlow:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar_glow" ) ) --[[ @ 0]]
	EarnedXP:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "progress", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			EarnedXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	EarnedXP:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "progress", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			EarnedXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	EarnedXP:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "progress", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			EarnedXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f7_local0, 1 ), CoD.GetVectorComponentFromString( f7_local0, 2 ), CoD.GetVectorComponentFromString( f7_local0, 3 ), CoD.GetVectorComponentFromString( f7_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( EarnedXP ) --[[ @ 0]]
	self.EarnedXP = EarnedXP --[[ @ 0]]
	
	local nextRank = LUI.UIText.new( 1, 1, -147, -102, 0.5, 0.5, -11.5, 24.5 ) --[[ @ 0]]
	nextRank:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	nextRank:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	nextRank:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "nextRank", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			nextRank:setRGB( SetToParagonColorIfPrestigeMasterByRank( 255, 255, 255, f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	nextRank:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "nextRank", function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			nextRank:setText( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( nextRank ) --[[ @ 0]]
	self.nextRank = nextRank --[[ @ 0]]
	
	local nextRankImage = LUI.UIImage.new( 1, 1, -84, 12, 0.5, 0.5, -42.5, 41.5 ) --[[ @ 0]]
	nextRankImage:subscribeToGlobalModel( f1_arg1, "XPProgressionBar", "nextRankIcon", function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			nextRankImage:setImage( RegisterImage( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( nextRankImage ) --[[ @ 0]]
	self.nextRankImage = nextRankImage --[[ @ 0]]
	
	local nextRankDescInfo = CoD.ProgressBar_RankInfo.new( f1_arg0, f1_arg1, 0, 0, 1222, 1548, 0, 0, 6, 36 ) --[[ @ 0]]
	self:addElement( nextRankDescInfo ) --[[ @ 0]]
	self.nextRankDescInfo = nextRankDescInfo --[[ @ 0]]
	
	local maxRankTextBox = LUI.UIText.new( 1, 1, -156, -40, 1, 1, -62, -26 ) --[[ @ 0]]
	maxRankTextBox:setAlpha( 0 ) --[[ @ 0]]
	maxRankTextBox:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_404EF66575DDB929" ) ) --[[ @ 0]]
	maxRankTextBox:setTTF( "skorzhen" ) --[[ @ 0]]
	maxRankTextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	maxRankTextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( maxRankTextBox ) --[[ @ 0]]
	self.maxRankTextBox = maxRankTextBox --[[ @ 0]]
	
	local BotOrnament = CoD.zm_LaboratoryDescriptionDividerSecondary.new( f1_arg0, f1_arg1, 0, 0, 178.5, 1548.5, 0, 0, 54, 80 ) --[[ @ 0]]
	self:addElement( BotOrnament ) --[[ @ 0]]
	self.BotOrnament = BotOrnament --[[ @ 0]]
	
	local TopOrnament = CoD.zm_LaboratoryDescriptionDividerSecondary.new( f1_arg0, f1_arg1, 0, 0, 178.5, 1548.5, 0, 0, 23, 49 ) --[[ @ 0]]
	self:addElement( TopOrnament ) --[[ @ 0]]
	self.TopOrnament = TopOrnament --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsLobbyNetworkModeLAN()
			end
		},
		{
			stateName = "MaxLevelCP",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueGreaterThanOrEqualTo( f1_arg1, "XPProgressionBar.nextRank", CoD.RankUtility.GetRankCap() + 1 ) and IsCampaign()
			end
		},
		{
			stateName = "MaxLevel",
			condition = function ( menu, element, event )
				local f13_local0 --[[ @ 0]]
				if not IsMaxPrestigeLevel( f1_arg1 ) then
					f13_local0 = CoD.ModelUtility.IsModelValueGreaterThanOrEqualTo( f1_arg1, "XPProgressionBar.nextRank", CoD.RankUtility.GetRankCap() + 1 ) --[[ @ 0]]
				else
					f13_local0 = false --[[ @ 0]]
				end
				return f13_local0
			end
		},
		{
			stateName = "MaxParagonLevel",
			condition = function ( menu, element, event )
				local f14_local0 = IsInParagonCapableGameMode() --[[ @ 0]]
				if f14_local0 then
					f14_local0 = IsMaxPrestigeLevel( f1_arg1 ) --[[ @ 0]]
					if f14_local0 then
						f14_local0 = CoD.ModelUtility.IsModelValueGreaterThanOrEqualTo( f1_arg1, "XPProgressionBar.nextRank", CoD.RankUtility.GetParagonRankCap() + 1 ) --[[ @ 0]]
					end
				end
				return f14_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local12 = self --[[ @ 0]]
	local f1_local13 = self.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local13( f1_local12, f1_local14["lobbyRoot.lobbyNav"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local12 = self --[[ @ 0]]
	f1_local13 = self.subscribeToModel --[[ @ 0]]
	f1_local14 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local12, f1_local14["XPProgressionBar.nextRank"], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "XPProgressionBar.nextRank"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ProgressBar_Rank.__resetProperties = function ( f17_arg0 )
	f17_arg0.nextRankImage:completeAnimation() --[[ @ 0]]
	f17_arg0.nextRank:completeAnimation() --[[ @ 0]]
	f17_arg0.curRankImg:completeAnimation() --[[ @ 0]]
	f17_arg0.curRank:completeAnimation() --[[ @ 0]]
	f17_arg0.nextRankDescInfo:completeAnimation() --[[ @ 0]]
	f17_arg0.TopOrnament:completeAnimation() --[[ @ 0]]
	f17_arg0.BotOrnament:completeAnimation() --[[ @ 0]]
	f17_arg0.LevelMeterDarkTint:completeAnimation() --[[ @ 0]]
	f17_arg0.StoneTiledBacking:completeAnimation() --[[ @ 0]]
	f17_arg0.EarnedXP:completeAnimation() --[[ @ 0]]
	f17_arg0.maxRankTextBox:completeAnimation() --[[ @ 0]]
	f17_arg0.nextRankImage:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.nextRank:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.curRankImg:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.curRank:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.nextRankDescInfo:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.TopOrnament:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.BotOrnament:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.LevelMeterDarkTint:setAlpha( 0.1 ) --[[ @ 0]]
	f17_arg0.StoneTiledBacking:setAlpha( 0.4 ) --[[ @ 0]]
	f17_arg0.EarnedXP:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.maxRankTextBox:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ProgressBar_Rank.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f19_arg0.LevelMeterDarkTint:completeAnimation() --[[ @ 0]]
			f19_arg0.LevelMeterDarkTint:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.LevelMeterDarkTint ) --[[ @ 0]]
			f19_arg0.StoneTiledBacking:completeAnimation() --[[ @ 0]]
			f19_arg0.StoneTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.StoneTiledBacking ) --[[ @ 0]]
			f19_arg0.curRank:completeAnimation() --[[ @ 0]]
			f19_arg0.curRank:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.curRank ) --[[ @ 0]]
			f19_arg0.curRankImg:completeAnimation() --[[ @ 0]]
			f19_arg0.curRankImg:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.curRankImg ) --[[ @ 0]]
			f19_arg0.EarnedXP:completeAnimation() --[[ @ 0]]
			f19_arg0.EarnedXP:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.EarnedXP ) --[[ @ 0]]
			f19_arg0.nextRank:completeAnimation() --[[ @ 0]]
			f19_arg0.nextRank:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.nextRank ) --[[ @ 0]]
			f19_arg0.nextRankImage:completeAnimation() --[[ @ 0]]
			f19_arg0.nextRankImage:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.nextRankImage ) --[[ @ 0]]
			f19_arg0.nextRankDescInfo:completeAnimation() --[[ @ 0]]
			f19_arg0.nextRankDescInfo:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.nextRankDescInfo ) --[[ @ 0]]
			f19_arg0.BotOrnament:completeAnimation() --[[ @ 0]]
			f19_arg0.BotOrnament:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.BotOrnament ) --[[ @ 0]]
			f19_arg0.TopOrnament:completeAnimation() --[[ @ 0]]
			f19_arg0.TopOrnament:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.TopOrnament ) --[[ @ 0]]
		end
	},
	MaxLevelCP = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f20_arg0.nextRank:completeAnimation() --[[ @ 0]]
			f20_arg0.nextRank:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.nextRank ) --[[ @ 0]]
			f20_arg0.nextRankImage:completeAnimation() --[[ @ 0]]
			f20_arg0.nextRankImage:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.nextRankImage ) --[[ @ 0]]
			f20_arg0.nextRankDescInfo:completeAnimation() --[[ @ 0]]
			f20_arg0.nextRankDescInfo:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.nextRankDescInfo ) --[[ @ 0]]
		end
	},
	MaxLevel = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f21_arg0.nextRank:completeAnimation() --[[ @ 0]]
			f21_arg0.nextRank:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.nextRank ) --[[ @ 0]]
			f21_arg0.nextRankImage:completeAnimation() --[[ @ 0]]
			f21_arg0.nextRankImage:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.nextRankImage ) --[[ @ 0]]
			f21_arg0.nextRankDescInfo:completeAnimation() --[[ @ 0]]
			f21_arg0.nextRankDescInfo:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.nextRankDescInfo ) --[[ @ 0]]
			f21_arg0.maxRankTextBox:completeAnimation() --[[ @ 0]]
			f21_arg0.maxRankTextBox:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.maxRankTextBox ) --[[ @ 0]]
		end
	},
	MaxParagonLevel = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f22_arg0.LevelMeterDarkTint:completeAnimation() --[[ @ 0]]
			f22_arg0.LevelMeterDarkTint:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.LevelMeterDarkTint ) --[[ @ 0]]
			f22_arg0.StoneTiledBacking:completeAnimation() --[[ @ 0]]
			f22_arg0.StoneTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.StoneTiledBacking ) --[[ @ 0]]
			f22_arg0.curRank:completeAnimation() --[[ @ 0]]
			f22_arg0.curRank:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.curRank ) --[[ @ 0]]
			f22_arg0.curRankImg:completeAnimation() --[[ @ 0]]
			f22_arg0.curRankImg:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.curRankImg ) --[[ @ 0]]
			f22_arg0.EarnedXP:completeAnimation() --[[ @ 0]]
			f22_arg0.EarnedXP:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.EarnedXP ) --[[ @ 0]]
			f22_arg0.nextRank:completeAnimation() --[[ @ 0]]
			f22_arg0.nextRank:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.nextRank ) --[[ @ 0]]
			f22_arg0.nextRankImage:completeAnimation() --[[ @ 0]]
			f22_arg0.nextRankImage:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.nextRankImage ) --[[ @ 0]]
			f22_arg0.nextRankDescInfo:completeAnimation() --[[ @ 0]]
			f22_arg0.nextRankDescInfo:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.nextRankDescInfo ) --[[ @ 0]]
			f22_arg0.BotOrnament:completeAnimation() --[[ @ 0]]
			f22_arg0.BotOrnament:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.BotOrnament ) --[[ @ 0]]
			f22_arg0.TopOrnament:completeAnimation() --[[ @ 0]]
			f22_arg0.TopOrnament:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.TopOrnament ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ProgressBar_Rank.__onClose = function ( f23_arg0 )
	f23_arg0.curRank:close() --[[ @ 0]]
	f23_arg0.curRankImg:close() --[[ @ 0]]
	f23_arg0.EarnedXP:close() --[[ @ 0]]
	f23_arg0.nextRank:close() --[[ @ 0]]
	f23_arg0.nextRankImage:close() --[[ @ 0]]
	f23_arg0.nextRankDescInfo:close() --[[ @ 0]]
	f23_arg0.BotOrnament:close() --[[ @ 0]]
	f23_arg0.TopOrnament:close() --[[ @ 0]]
end
 --[[ @ 0]]
