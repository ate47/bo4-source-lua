-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_options_safearea_container" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_options_safearea_hints" ) --[[ @ 0]]
require( "x64:779d9438392ec34e" ) --[[ @ 0]]

CoD.DirectorFirstTimeSafeArea = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.DirectorFirstTimeSafeArea = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "DirectorFirstTimeSafeArea", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.DirectorFirstTimeSafeArea ) --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local background = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	background:setRGB( 0, 0, 0 ) --[[ @ 0]]
	self:addElement( background ) --[[ @ 0]]
	self.background = background --[[ @ 0]]
	
	local StartMenuOptionsSafeAreaHints = CoD.StartMenu_Options_SafeArea_Hints.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( StartMenuOptionsSafeAreaHints ) --[[ @ 0]]
	self.StartMenuOptionsSafeAreaHints = StartMenuOptionsSafeAreaHints --[[ @ 0]]
	
	local emptyFocusable = CoD.emptyFocusable.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	emptyFocusable:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	local safeArea = CoD.StartMenu_Options_SafeArea_Container.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	safeArea:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( safeArea ) --[[ @ 0]]
	self.safeArea = safeArea --[[ @ 0]]
	
	local HUDBounds = nil --[[ @ 0]]
	
	HUDBounds = CoD.PC_StartMenu_Options_HUDBounds_Hints.new( f1_local1, f1_arg0, 0.5, 0.5, -381, 381, 0, 0, 0, 1080 ) --[[ @ 0]]
	self:addElement( HUDBounds ) --[[ @ 0]]
	self.HUDBounds = HUDBounds --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		DispatchEventToRoot( element, "update_safe_area", controller ) --[[ @ 0]]
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		DispatchEventToRoot( element, "update_safe_area", controller ) --[[ @ 0]]
		CoD.LobbyUtility.CompleteFirstTimeSafeArea( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], "ui_navleft", function ( element, menu, controller, model )
		if IsPC() then
			DecreaseSafeAreaHorizontal( self, element, controller, "HUDBoundsTweakable_horizontal", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( element, "update_safe_area", controller ) --[[ @ 0]]
			return true
		else
			DecreaseSafeAreaHorizontal( self, element, controller, "safeAreaTweakable_horizontal", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( self, "update_safe_area", controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, "ui_navleft" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], "ui_navup", function ( element, menu, controller, model )
		if IsPC() then
			IncreaseSafeAreaVertical( self, element, controller, "HUDBoundsTweakable_vertical", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( element, "update_safe_area", controller ) --[[ @ 0]]
			return true
		else
			IncreaseSafeAreaVertical( self, element, controller, "safeAreaTweakable_vertical", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( self, "update_safe_area", controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], @"hash_0", nil, "ui_navup" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], "ui_navright", function ( element, menu, controller, model )
		if IsPC() then
			IncreaseSafeAreaHorizontal( self, element, controller, "HUDBoundsTweakable_horizontal", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( element, "update_safe_area", controller ) --[[ @ 0]]
			return true
		else
			IncreaseSafeAreaHorizontal( self, element, controller, "safeAreaTweakable_horizontal", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( self, "update_safe_area", controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, "ui_navright" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], "ui_navdown", function ( element, menu, controller, model )
		if IsPC() then
			DecreaseSafeAreaVertical( self, element, controller, "HUDBoundsTweakable_vertical", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( element, "update_safe_area", controller ) --[[ @ 0]]
			return true
		else
			DecreaseSafeAreaVertical( self, element, controller, "safeAreaTweakable_vertical", CoD.SafeArea.AdjustAmount ) --[[ @ 0]]
			DispatchEventToChildren( self, "update_safe_area", controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, "ui_navdown" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	if CoD.isPC then
		safeArea.id = "safeArea" --[[ @ 0]]
	end
	if CoD.isPC then
		HUDBounds.id = "HUDBounds" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local7 = self --[[ @ 0]]
	if IsPC() then
		MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		CoD.PCUtility.DisableKeyboardNavigationInMenu( f1_local1 ) --[[ @ 0]]
		CoD.PCUtility.SetupSafeAreaBorders( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	else
		MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		SetProperty( self, "disableKeyboardNavigation", true ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.DirectorFirstTimeSafeArea.__resetProperties = function ( f16_arg0 )
	f16_arg0.HUDBounds:completeAnimation() --[[ @ 0]]
	f16_arg0.StartMenuOptionsSafeAreaHints:completeAnimation() --[[ @ 0]]
	f16_arg0.HUDBounds:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.StartMenuOptionsSafeAreaHints:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorFirstTimeSafeArea.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.HUDBounds:completeAnimation() --[[ @ 0]]
			f17_arg0.HUDBounds:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.HUDBounds ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.StartMenuOptionsSafeAreaHints:completeAnimation() --[[ @ 0]]
			f18_arg0.StartMenuOptionsSafeAreaHints:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.StartMenuOptionsSafeAreaHints ) --[[ @ 0]]
			f18_arg0.HUDBounds:completeAnimation() --[[ @ 0]]
			f18_arg0.HUDBounds:setAlpha( 1 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.HUDBounds ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorFirstTimeSafeArea.__onClose = function ( f19_arg0 )
	f19_arg0.StartMenuOptionsSafeAreaHints:close() --[[ @ 0]]
	f19_arg0.emptyFocusable:close() --[[ @ 0]]
	f19_arg0.safeArea:close() --[[ @ 0]]
	f19_arg0.HUDBounds:close() --[[ @ 0]]
end
 --[[ @ 0]]
