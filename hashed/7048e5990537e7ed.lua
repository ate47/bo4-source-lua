-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]

CoD.horizontalCounterTriggerPrompts = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.__defaultWidth = 300 --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.__defaultHeight = 37 --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.horizontalCounterTriggerPrompts ) --[[ @ 0]]
	self.id = "horizontalCounterTriggerPrompts" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local currentItem = LUI.UIText.new( 0.5, 0.5, -57, -12, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	currentItem:setAlpha( 0.65 ) --[[ @ 0]]
	currentItem:setText( "" ) --[[ @ 0]]
	currentItem:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	currentItem:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	currentItem:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( currentItem ) --[[ @ 0]]
	self.currentItem = currentItem --[[ @ 0]]
	
	local dividor = LUI.UIText.new( 0.5, 0.5, -4.5, 4.5, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	dividor:setAlpha( 0.65 ) --[[ @ 0]]
	dividor:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6993C1A7DD3452BA" ) ) --[[ @ 0]]
	dividor:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	dividor:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( dividor ) --[[ @ 0]]
	self.dividor = dividor --[[ @ 0]]
	
	local count = LUI.UIText.new( 0.5, 0.5, 12, 57, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	count:setAlpha( 0.65 ) --[[ @ 0]]
	count:setText( 200 ) --[[ @ 0]]
	count:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	count:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	count:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( count ) --[[ @ 0]]
	self.count = count --[[ @ 0]]
	
	local RightPageOver = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, 34.5, 101.5, 0, 0, -4, 31 ) --[[ @ 0]]
	RightPageOver.KeyMouseImage:setImage( RegisterImage( @"uie_bumperright" ) ) --[[ @ 0]]
	RightPageOver:subscribeToGlobalModel( f1_arg1, "Controller", "right_trigger_button_image", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			RightPageOver.ControllerImage:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightPageOver:appendEventHandler( "input_source_changed", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = RightPageOver --[[ @ 0]]
	local LeftPageOver = RightPageOver.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	LeftPageOver( f1_local5, f1_local7.LastInput, function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightPageOver:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightPageOver, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if IsGamepad( controller ) then
			NavigateScrollButtonRight( self ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( self, controller, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( RightPageOver ) --[[ @ 0]]
	self.RightPageOver = RightPageOver --[[ @ 0]]
	
	LeftPageOver = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, -101.5, -34.5, 0, 0, -4, 31 ) --[[ @ 0]]
	LeftPageOver:subscribeToGlobalModel( f1_arg1, "Controller", "left_trigger_button_image", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			LeftPageOver.ControllerImage:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeftPageOver:appendEventHandler( "input_source_changed", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f9_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = LeftPageOver --[[ @ 0]]
	f1_local5 = LeftPageOver.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.LastInput, function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftPageOver:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftPageOver, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if IsGamepad( controller ) then
			NavigateScrollButtonLeft( self ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( self, controller, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( LeftPageOver ) --[[ @ 0]]
	self.LeftPageOver = LeftPageOver --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "AtLeftAndRight",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtLeftAndRight" )
			end
		},
		{
			stateName = "AtLeft",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtLeft" )
			end
		},
		{
			stateName = "AtRight",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtRight" )
			end
		},
		{
			stateName = "NoItems",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "NoItems" )
			end
		},
		{
			stateName = "NoPrompts",
			condition = function ( menu, element, event )
				return true
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f19_arg2, f19_arg3, f19_arg4 )
		UpdateElementState( self, "leftArrowBtn", controller ) --[[ @ 0]]
		UpdateElementState( self, "rightArrowBtn", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	if CoD.isPC then
		RightPageOver.id = "RightPageOver" --[[ @ 0]]
	end
	if CoD.isPC then
		LeftPageOver.id = "LeftPageOver" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.__resetProperties = function ( f20_arg0 )
	f20_arg0.currentItem:completeAnimation() --[[ @ 0]]
	f20_arg0.dividor:completeAnimation() --[[ @ 0]]
	f20_arg0.count:completeAnimation() --[[ @ 0]]
	f20_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
	f20_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
	f20_arg0.currentItem:setAlpha( 0.65 ) --[[ @ 0]]
	f20_arg0.dividor:setAlpha( 0.65 ) --[[ @ 0]]
	f20_arg0.count:setAlpha( 0.65 ) --[[ @ 0]]
	f20_arg0.LeftPageOver:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.RightPageOver:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f21_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f21_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.currentItem ) --[[ @ 0]]
			f21_arg0.dividor:completeAnimation() --[[ @ 0]]
			f21_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.dividor ) --[[ @ 0]]
			f21_arg0.count:completeAnimation() --[[ @ 0]]
			f21_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.count ) --[[ @ 0]]
		end
	},
	AtLeftAndRight = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f22_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f22_arg0.currentItem:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.currentItem ) --[[ @ 0]]
			f22_arg0.dividor:completeAnimation() --[[ @ 0]]
			f22_arg0.dividor:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.dividor ) --[[ @ 0]]
			f22_arg0.count:completeAnimation() --[[ @ 0]]
			f22_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.count ) --[[ @ 0]]
			f22_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
			f22_arg0.RightPageOver:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.RightPageOver ) --[[ @ 0]]
			f22_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
			f22_arg0.LeftPageOver:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.LeftPageOver ) --[[ @ 0]]
		end
	},
	AtLeft = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f23_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f23_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.currentItem ) --[[ @ 0]]
			f23_arg0.dividor:completeAnimation() --[[ @ 0]]
			f23_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.dividor ) --[[ @ 0]]
			f23_arg0.count:completeAnimation() --[[ @ 0]]
			f23_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.count ) --[[ @ 0]]
		end
	},
	AtRight = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f24_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f24_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.currentItem ) --[[ @ 0]]
			f24_arg0.dividor:completeAnimation() --[[ @ 0]]
			f24_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.dividor ) --[[ @ 0]]
			f24_arg0.count:completeAnimation() --[[ @ 0]]
			f24_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.count ) --[[ @ 0]]
		end
	},
	NoItems = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f25_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f25_arg0.currentItem:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.currentItem ) --[[ @ 0]]
			f25_arg0.dividor:completeAnimation() --[[ @ 0]]
			f25_arg0.dividor:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.dividor ) --[[ @ 0]]
			f25_arg0.count:completeAnimation() --[[ @ 0]]
			f25_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.count ) --[[ @ 0]]
			f25_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
			f25_arg0.RightPageOver:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.RightPageOver ) --[[ @ 0]]
			f25_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
			f25_arg0.LeftPageOver:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.LeftPageOver ) --[[ @ 0]]
		end
	},
	NoPrompts = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f26_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
			f26_arg0.RightPageOver:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.RightPageOver ) --[[ @ 0]]
			f26_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
			f26_arg0.LeftPageOver:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.LeftPageOver ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.horizontalCounterTriggerPrompts.__onClose = function ( f27_arg0 )
	f27_arg0.RightPageOver:close() --[[ @ 0]]
	f27_arg0.LeftPageOver:close() --[[ @ 0]]
end
 --[[ @ 0]]
