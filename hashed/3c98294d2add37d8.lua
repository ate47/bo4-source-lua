-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:3e5f54652701b2df" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.directorTraining = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorTraining.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorTraining.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorTraining.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.directorTraining ) --[[ @ 0]]
	self.id = "directorTraining" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_arg0, f1_arg1, 0.5, 0.5, -375, 375, 0.5, 0.5, -465, 235 ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	local CommonHeader = CoD.CommonHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"menu/specialist_hub" ) ) --[[ @ 0]]
	CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyTitle", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	local SpecialistHeadquarters = CoD.SpecialistHeadquarters.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( SpecialistHeadquarters ) --[[ @ 0]]
	self.SpecialistHeadquarters = SpecialistHeadquarters --[[ @ 0]]
	
	local FullScreenBlack = LUI.UIImage.new( 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	FullScreenBlack:setRGB( 0, 0, 0 ) --[[ @ 0]]
	FullScreenBlack:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( FullScreenBlack ) --[[ @ 0]]
	self.FullScreenBlack = FullScreenBlack --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "StartFullScreenBlack",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "StartFullscreenBlack" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.StartFullscreenBlack, function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "StartFullscreenBlack"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f5_arg2, f5_arg3, f5_arg4 )
		if IsSelfInState( self, "StartFullScreenBlack" ) then
			MenuHidesFreeCursor( f1_arg0, controller ) --[[ @ 0]]
		elseif not IsSelfInState( self, "StartFullScreenBlack" ) then
			CoD.CTUtility.UnhideFreeCursor( f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	SpecialistHeadquarters.id = "SpecialistHeadquarters" --[[ @ 0]]
	self.__defaultFocus = SpecialistHeadquarters --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local6 = self --[[ @ 0]]
	CoD.CTUtility.SubscribeForDefaultSpecialistSelection( f1_arg0, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.directorTraining.__resetProperties = function ( f6_arg0 )
	f6_arg0.FullScreenBlack:completeAnimation() --[[ @ 0]]
	f6_arg0.FullScreenBlack:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.directorTraining.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	StartFullScreenBlack = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f8_arg0.FullScreenBlack:completeAnimation() --[[ @ 0]]
			f8_arg0.FullScreenBlack:setAlpha( 1 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.FullScreenBlack ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.directorTraining.__onClose = function ( f9_arg0 )
	f9_arg0.XCamMouseControl:close() --[[ @ 0]]
	f9_arg0.CommonHeader:close() --[[ @ 0]]
	f9_arg0.SpecialistHeadquarters:close() --[[ @ 0]]
end
 --[[ @ 0]]
