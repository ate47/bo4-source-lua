-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/cac/itemnamedescunlocktext" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]
require( "x64:25b3f12fb71c1346" ) --[[ @ 0]]
require( "x64:51417b7fe0a0948" ) --[[ @ 0]]
require( "x64:77046b0d9f3594f1" ) --[[ @ 0]]
require( "x64:20602298da419f4f" ) --[[ @ 0]]

CoD.BubblegumBuffSelect = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.BubblegumBuffSelect = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "BubblegumBuffSelect", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "BubbleGumBuffUpdated", 0 ) --[[ @ 0]]
	self:setClass( CoD.BubblegumBuffSelect ) --[[ @ 0]]
	self.soundSet = "ZCAC" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local selectionList = LUI.UIList.new( f1_local1, f1_arg0, 16, 0, nil, false, false, false, false ) --[[ @ 0]]
	selectionList:setLeftRight( 0.5, 0.5, -387, 387 ) --[[ @ 0]]
	selectionList:setTopBottom( 0, 0, 203, 803 ) --[[ @ 0]]
	selectionList:setWidgetType( CoD.BGBListItem ) --[[ @ 0]]
	selectionList:setHorizontalCount( 5 ) --[[ @ 0]]
	selectionList:setVerticalCount( 4 ) --[[ @ 0]]
	selectionList:setSpacing( 16 ) --[[ @ 0]]
	selectionList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	selectionList:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	selectionList:setDataSource( "Unlockables" ) --[[ @ 0]]
	selectionList:linkToElementModel( selectionList, "globalItemIndex", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	selectionList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_local1, self, element, f1_arg0 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	selectionList:registerEventHandler( "gain_list_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		SetElementModelToFocusedElementModel( f1_arg0, self, element, "ItemInfo" ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	selectionList:registerEventHandler( "used_permanent_unlock_token", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_local1, self, element, f1_arg0 ) --[[ @ 0]]
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	selectionList:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.EquipBubblegumBuff( menu, element, controller ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.UpdateBubbleGumPackForCurrentClass( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "usebgb1", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetBubblegumBuffLoadoutSelectedIndexWithPromptSlot( controller, "up" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.EquipBubblegumBuff( menu, element, controller ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.UpdateBubbleGumPackForCurrentClass( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "usebgb1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "usebgb2", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetBubblegumBuffLoadoutSelectedIndexWithPromptSlot( controller, "right" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.EquipBubblegumBuff( menu, element, controller ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.UpdateBubbleGumPackForCurrentClass( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "usebgb2" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "usebgb3", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetBubblegumBuffLoadoutSelectedIndexWithPromptSlot( controller, "down" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.EquipBubblegumBuff( menu, element, controller ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.UpdateBubbleGumPackForCurrentClass( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "usebgb3" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "usebgb4", function ( element, menu, controller, model )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetBubblegumBuffLoadoutSelectedIndexWithPromptSlot( controller, "left" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.EquipBubblegumBuff( menu, element, controller ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.UpdateBubbleGumPackForCurrentClass( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "usebgb4" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( selectionList ) --[[ @ 0]]
	self.selectionList = selectionList --[[ @ 0]]
	
	local RestrictedText = CoD.RestrictedItemWarningText.new( f1_local1, f1_arg0, 0.5, 0.5, -247, 247, 0.5, 0.5, 424, 454 ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	local ItemInfo = CoD.ItemNameDescUnlockText.new( f1_local1, f1_arg0, 0.5, 0.5, 411, 911, 0.5, 0.5, 76, 183 ) --[[ @ 0]]
	ItemInfo:mergeStateConditions( {
		{
			stateName = "ZombieCompact",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( ItemInfo ) --[[ @ 0]]
	self.ItemInfo = ItemInfo --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f18_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f18_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f18_local0 then
			f18_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local EquippedBGBContainer = CoD.EquippedBGBContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -899, -549, 0.5, 0.5, -289, 61 ) --[[ @ 0]]
	self:addElement( EquippedBGBContainer ) --[[ @ 0]]
	self.EquippedBGBContainer = EquippedBGBContainer --[[ @ 0]]
	
	local PCEquippedBGBContainer = nil --[[ @ 0]]
	
	PCEquippedBGBContainer = CoD.PC_EquippedBGBContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -795, -668, 0.5, 0.5, -334, 130 ) --[[ @ 0]]
	self:addElement( PCEquippedBGBContainer ) --[[ @ 0]]
	self.PCEquippedBGBContainer = PCEquippedBGBContainer --[[ @ 0]]
	
	local TopBar = LUI.UIImage.new( -0.1, 1.1, 0, 0, 0.5, 0.5, 283, 286 ) --[[ @ 0]]
	TopBar:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	TopBar:setAlpha( 0.5 ) --[[ @ 0]]
	TopBar:setZoom( 2 ) --[[ @ 0]]
	TopBar:setImage( RegisterImage( @"uie_ui_menu_cac_primary_button_top_bar" ) ) --[[ @ 0]]
	TopBar:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	local hint = LUI.UIText.new( 0.5, 0.5, -960, 960, 0.5, 0.5, 312, 330 ) --[[ @ 0]]
	hint:setRGB( 0.58, 0.58, 0.58 ) --[[ @ 0]]
	hint:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C3CD6A380B2DAA3" ) ) --[[ @ 0]]
	hint:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	hint:setLetterSpacing( 2 ) --[[ @ 0]]
	hint:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	hint:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( hint ) --[[ @ 0]]
	self.hint = hint --[[ @ 0]]
	
	local TopBar2 = LUI.UIImage.new( -0.1, 1.1, 0, 0, 0.5, 0.5, 356, 359 ) --[[ @ 0]]
	TopBar2:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	TopBar2:setAlpha( 0.5 ) --[[ @ 0]]
	TopBar2:setZoom( 2 ) --[[ @ 0]]
	TopBar2:setImage( RegisterImage( @"uie_ui_menu_cac_primary_button_top_bar" ) ) --[[ @ 0]]
	TopBar2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TopBar2 ) --[[ @ 0]]
	self.TopBar2 = TopBar2 --[[ @ 0]]
	
	local BGBSelectSafeAreaContainer = CoD.BGBSelectSafeAreaContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	BGBSelectSafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f19_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f19_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f19_local0 then
			f19_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f19_local0
	end ) --[[ @ 0]]
	BGBSelectSafeAreaContainer:registerEventHandler( "list_active_changed", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		SetProperty( self, "__itemGroup", element.filter ) --[[ @ 0]]
		SetProperty( self, "__rarity", element.rarity ) --[[ @ 0]]
		UpdateDataSource( self, self.selectionList, f1_arg0 ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	self:addElement( BGBSelectSafeAreaContainer ) --[[ @ 0]]
	self.BGBSelectSafeAreaContainer = BGBSelectSafeAreaContainer --[[ @ 0]]
	
	RestrictedText:linkToElementModel( selectionList, nil, false, function ( model )
		RestrictedText:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemInfo:linkToElementModel( selectionList, nil, false, function ( model )
		ItemInfo:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "DefaultStateKeyboard",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f24_arg0, f24_arg1 )
		f24_arg1.menu = f24_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( self, f24_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local12 = self --[[ @ 0]]
	local f1_local13 = self.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local13( f1_local12, f1_local14.LastInput, function ( f25_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f25_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local12 = self --[[ @ 0]]
	f1_local13 = self.subscribeToModel --[[ @ 0]]
	f1_local14 = DataSources.BGBLoadout.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local13( f1_local12, f1_local14.selectedIndex, function ( f26_arg0, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f27_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f27_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f27_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		ShowHeaderIconOnly( f1_local1 ) --[[ @ 0]]
		SetElementStateByElementName( self, "GenericMenuFrame0", f1_arg0, "Update" ) --[[ @ 0]]
		PlayClipOnElement( self, {
			elementName = "GenericMenuFrame0",
			clipName = "intro"
		}, f1_arg0 ) --[[ @ 0]]
		PlayClip( self, "into", f1_arg0 ) --[[ @ 0]]
		if not f27_local0 then
			f27_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f27_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "list_active_changed", function ( self, event )
		local f28_local0 = nil --[[ @ 0]]
		CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_local1, self, self.selectionList, f1_arg0 ) --[[ @ 0]]
		return f28_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		PlaySoundSetSound( self, "menu_no_selection" ) --[[ @ 0]]
		SendClientScriptMenuChangeNotify( controller, menu, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 0 ) then
			SetControllerModelValue( controller, "BGBLoadout.selectedIndex", 0 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_24B11D2B20C75A7F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 1 ) then
			SetControllerModelValue( controller, "BGBLoadout.selectedIndex", 1 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 2 ) then
			SetControllerModelValue( controller, "BGBLoadout.selectedIndex", 2 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 2 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6D4C15FE32148D3A"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 3 ) then
			SetControllerModelValue( controller, "BGBLoadout.selectedIndex", 3 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "BGBLoadout", "selectedIndex", 3 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f39_arg0, f39_arg1, f39_arg2, f39_arg3 )
		local f39_local0 = self --[[ @ 0]]
		SendClientScriptMenuChangeNotify( f39_arg1, f39_arg2, true ) --[[ @ 0]]
		SetPerControllerTableProperty( f39_arg1, "weaponCategory", "bubblegum" ) --[[ @ 0]]
		SetGlobalModelValueTrue( "inBubblegumBuffSelectMenu" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SetGlobalModelValueFalse( "inBubblegumBuffSelectMenu" ) --[[ @ 0]]
		SetControllerModelValue( f1_arg0, "BGBLoadout.selectedIndex", -1 ) --[[ @ 0]]
		CoD.CACUtility.ClearClassWeaponModel( f1_local1, f1_arg0 ) --[[ @ 0]]
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	selectionList.id = "selectionList" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	EquippedBGBContainer.id = "EquippedBGBContainer" --[[ @ 0]]
	if CoD.isPC then
		PCEquippedBGBContainer.id = "PCEquippedBGBContainer" --[[ @ 0]]
	end
	BGBSelectSafeAreaContainer.id = "BGBSelectSafeAreaContainer" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = selectionList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local13 = self --[[ @ 0]]
	CoD.BaseUtility.SetMenuSessionMode( f1_local1, Enum[@"eModes"][@"hash_73723205FAE52C4A"] ) --[[ @ 0]]
	CoD.ZMLoadoutUtility.AddBGBSelectMenuControls( f1_local1, self.CategoryTabs, self.EquippedBGBContainer, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.BubblegumBuffSelect.__resetProperties = function ( f42_arg0 )
	f42_arg0.PCEquippedBGBContainer:completeAnimation() --[[ @ 0]]
	f42_arg0.EquippedBGBContainer:completeAnimation() --[[ @ 0]]
	f42_arg0.PCEquippedBGBContainer:setAlpha( 1 ) --[[ @ 0]]
	f42_arg0.EquippedBGBContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BubblegumBuffSelect.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f43_arg0.PCEquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f43_arg0.PCEquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.PCEquippedBGBContainer ) --[[ @ 0]]
		end
	},
	DefaultStateKeyboard = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f44_arg0.EquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f44_arg0.EquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.EquippedBGBContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BubblegumBuffSelect.__onClose = function ( f45_arg0 )
	f45_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f45_arg0.RestrictedText:close() --[[ @ 0]]
	f45_arg0.ItemInfo:close() --[[ @ 0]]
	f45_arg0.selectionList:close() --[[ @ 0]]
	f45_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f45_arg0.EquippedBGBContainer:close() --[[ @ 0]]
	f45_arg0.PCEquippedBGBContainer:close() --[[ @ 0]]
	f45_arg0.BGBSelectSafeAreaContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
