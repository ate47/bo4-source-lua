-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/hud/gameendscore/gameendscoreroundpip" ) --[[ @ 0]]

CoD.GameEndScoreRoundList = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.GameEndScoreRoundList.__defaultWidth = 316 --[[ @ 0]]
CoD.GameEndScoreRoundList.__defaultHeight = 74 --[[ @ 0]]
CoD.GameEndScoreRoundList.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.GameEndScoreRoundList ) --[[ @ 0]]
	self.id = "GameEndScoreRoundList" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local RoundPipList = LUI.UIList.new( f1_arg0, f1_arg1, 47, 0, nil, false, false, false, false ) --[[ @ 0]]
	RoundPipList:mergeStateConditions( {
		{
			stateName = "JustComplete",
			condition = function ( menu, element, event )
				local f2_local0 = CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "justComplete" ) --[[ @ 0]]
				if f2_local0 then
					f2_local0 = CoD.GameEndScoreUtility.IsGameScoreCurrentState( f1_arg1, "outcome_with_score" ) --[[ @ 0]]
					if f2_local0 then
						f2_local0 = not CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "GameScore", "showSwitchingSides" ) --[[ @ 0]]
					end
				end
				return f2_local0
			end
		}
	} ) --[[ @ 0]]
	RoundPipList:linkToElementModel( RoundPipList, "justComplete", true, function ( model )
		f1_arg0:updateElementState( RoundPipList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "justComplete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = RoundPipList --[[ @ 0]]
	local Score = RoundPipList.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Score( f1_local2, f1_local4["gameScore.currentState"], function ( f4_arg0 )
		f1_arg0:updateElementState( RoundPipList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "gameScore.currentState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = RoundPipList --[[ @ 0]]
	Score = RoundPipList.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.GameScore.getModel( f1_arg1 ) --[[ @ 0]]
	Score( f1_local2, f1_local4.showSwitchingSides, function ( f5_arg0 )
		f1_arg0:updateElementState( RoundPipList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "showSwitchingSides"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RoundPipList:linkToElementModel( RoundPipList, "isComplete", true, function ( model )
		f1_arg0:updateElementState( RoundPipList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isComplete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RoundPipList:setLeftRight( 0.5, 0.5, -119, 119 ) --[[ @ 0]]
	RoundPipList:setTopBottom( 0, 0, 13, 61 ) --[[ @ 0]]
	RoundPipList:setWidgetType( CoD.GameEndScoreRoundPip ) --[[ @ 0]]
	RoundPipList:setSpacing( 47 ) --[[ @ 0]]
	RoundPipList:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	RoundPipList:subscribeToGlobalModel( f1_arg1, "GameScore", "roundWinLimit", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			RoundPipList:setHorizontalCount( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RoundPipList ) --[[ @ 0]]
	self.RoundPipList = RoundPipList --[[ @ 0]]
	
	Score = LUI.UIText.new( 0.5, 0.5, -158, 158, 0, 0, -5, 85 ) --[[ @ 0]]
	Score:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Score:setText( 4 ) --[[ @ 0]]
	Score:setTTF( "0arame_mono_stencil" ) --[[ @ 0]]
	Score:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	Score:setLetterSpacing( 10 ) --[[ @ 0]]
	Score:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Score:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Score ) --[[ @ 0]]
	self.Score = Score --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ShowNumber",
			condition = function ( menu, element, event )
				return CoD.GameEndScoreUtility.ShowScoreInsteadOfPips( f1_arg1 ) and CoD.GameEndScoreUtility.ShowOutcomeWithScoreOrTimeTransition( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["gameScore.roundWinLimit"], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "gameScore.roundWinLimit"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.forceScoreboard, function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "forceScoreboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["gameScore.currentState"], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "gameScore.currentState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_final_killcam"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_final_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RoundPipList.id = "RoundPipList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.GameEndScoreRoundList.__resetProperties = function ( f16_arg0 )
	f16_arg0.RoundPipList:completeAnimation() --[[ @ 0]]
	f16_arg0.Score:completeAnimation() --[[ @ 0]]
	f16_arg0.RoundPipList:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.Score:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.Score:setZoom( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.GameEndScoreRoundList.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f17_arg0.RoundPipList:completeAnimation() --[[ @ 0]]
			f17_arg0.RoundPipList:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.RoundPipList ) --[[ @ 0]]
			f17_arg0.Score:completeAnimation() --[[ @ 0]]
			f17_arg0.Score:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Score ) --[[ @ 0]]
		end
	},
	ShowNumber = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.RoundPipList:completeAnimation() --[[ @ 0]]
			f18_arg0.RoundPipList:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.RoundPipList ) --[[ @ 0]]
			local f18_local0 = function ( f19_arg0 )
				f18_arg0.Score:beginAnimation( 300 ) --[[ @ 0]]
				f18_arg0.Score:setZoom( 0 ) --[[ @ 0]]
				f18_arg0.Score:registerEventHandler( "interrupted_keyframe", f18_arg0.clipInterrupted ) --[[ @ 0]]
				f18_arg0.Score:registerEventHandler( "transition_complete_keyframe", f18_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f18_arg0.Score:completeAnimation() --[[ @ 0]]
			f18_arg0.Score:setZoom( 750 ) --[[ @ 0]]
			f18_local0( f18_arg0.Score ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.GameEndScoreRoundList.__onClose = function ( f20_arg0 )
	f20_arg0.RoundPipList:close() --[[ @ 0]]
end
 --[[ @ 0]]
