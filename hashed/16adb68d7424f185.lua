-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "x64:42c271d2907ed290" ) --[[ @ 0]]
require( "x64:16ccfbdb45a2f1a0" ) --[[ @ 0]]

CoD.AARTierRewardColumn = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARTierRewardColumn.__defaultWidth = 115 --[[ @ 0]]
CoD.AARTierRewardColumn.__defaultHeight = 632 --[[ @ 0]]
CoD.AARTierRewardColumn.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARTierRewardColumn ) --[[ @ 0]]
	self.id = "AARTierRewardColumn" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Header = CoD.AARTierRewardColumnHeader.new( f1_arg0, f1_arg1, 0, 0, 5, 110, 0, 0, 0, 40 ) --[[ @ 0]]
	Header:mergeStateConditions( {
		{
			stateName = "Locked",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsTierColumnLocked( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = Header --[[ @ 0]]
	local TierRewardGrid = Header.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	TierRewardGrid( f1_local2, f1_local4["AAR.tierReward.highlightedTier"], function ( f3_arg0 )
		f1_arg0:updateElementState( Header, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "AAR.tierReward.highlightedTier"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Header:linkToElementModel( Header, "tier", true, function ( model )
		f1_arg0:updateElementState( Header, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Header:linkToElementModel( self, nil, false, function ( model )
		Header:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Header:linkToElementModel( self, "tier", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			Header.Tier:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Header:linkToElementModel( self, "tier", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			Header.HighlightedHeader.Tier:setText( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Header ) --[[ @ 0]]
	self.Header = Header --[[ @ 0]]
	
	TierRewardGrid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 11, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	TierRewardGrid:setLeftRight( 0, 0, 5, 110 ) --[[ @ 0]]
	TierRewardGrid:setTopBottom( 0, 0, 54, 631 ) --[[ @ 0]]
	TierRewardGrid:setWidgetType( CoD.AARTierRewardItem ) --[[ @ 0]]
	TierRewardGrid:setVerticalCount( 4 ) --[[ @ 0]]
	TierRewardGrid:setSpacing( 11 ) --[[ @ 0]]
	TierRewardGrid:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	TierRewardGrid:linkToElementModel( self, "tierRewardDatasource", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			TierRewardGrid:setDataSource( f8_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierRewardGrid:linkToElementModel( self, "triggerUnlock", true, function ( model )
		local f9_local0 = TierRewardGrid --[[ @ 0]]
		if CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "triggerUnlock" ) then
			CoD.AARUtility.UnlockTierRewards( f1_arg1, f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	TierRewardGrid:linkToElementModel( self, "tier", true, function ( model )
		UpdateDataSource( self, TierRewardGrid, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TierRewardGrid ) --[[ @ 0]]
	self.TierRewardGrid = TierRewardGrid --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThan( element, f1_arg1, "tier", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "tier", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TierRewardGrid.id = "TierRewardGrid" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AARTierRewardColumn.__resetProperties = function ( f13_arg0 )
	f13_arg0.TierRewardGrid:completeAnimation() --[[ @ 0]]
	f13_arg0.Header:completeAnimation() --[[ @ 0]]
	f13_arg0.TierRewardGrid:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.Header:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARTierRewardColumn.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f15_arg0.Header:completeAnimation() --[[ @ 0]]
			f15_arg0.Header:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.Header ) --[[ @ 0]]
			f15_arg0.TierRewardGrid:completeAnimation() --[[ @ 0]]
			f15_arg0.TierRewardGrid:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.TierRewardGrid ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARTierRewardColumn.__onClose = function ( f16_arg0 )
	f16_arg0.Header:close() --[[ @ 0]]
	f16_arg0.TierRewardGrid:close() --[[ @ 0]]
end
 --[[ @ 0]]
