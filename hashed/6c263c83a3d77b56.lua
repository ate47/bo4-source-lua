-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:12322cb4555c55d" ) --[[ @ 0]]
require( "x64:39d92dce1e4291ce" ) --[[ @ 0]]
require( "x64:733ec8b4b2fb3c47" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/core_ammowidget/ammowidget_equipmentempty" ) --[[ @ 0]]
require( "x64:107175f021a6edb5" ) --[[ @ 0]]
require( "x64:32e88ac782aef92c" ) --[[ @ 0]]
require( "x64:24b789df27433d6" ) --[[ @ 0]]
require( "x64:2485f9df271d384" ) --[[ @ 0]]

CoD.AmmoWidgetMP_AbilityItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.__defaultWidth = 72 --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.__defaultHeight = 59 --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetMP_AbilityItem ) --[[ @ 0]]
	self.id = "AmmoWidgetMP_AbilityItem" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local AmmoWidgetAbilityContainer = CoD.AmmoWidget_AbilityContainer.new( f1_arg0, f1_arg1, 0, 0, -23, 69, 0, 0, -9, 35 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setScale( 1.4, 1.4 ) --[[ @ 0]]
	self:addElement( AmmoWidgetAbilityContainer ) --[[ @ 0]]
	self.AmmoWidgetAbilityContainer = AmmoWidgetAbilityContainer --[[ @ 0]]
	
	local AmmoWidgetMPAbilityFlare = CoD.AmmoWidgetMP_Ability_Flare.new( f1_arg0, f1_arg1, 0, 0, -1394, 352, 0, 0, -973, 101 ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:linkToElementModel( self, nil, false, function ( model )
		AmmoWidgetMPAbilityFlare:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
	self.AmmoWidgetMPAbilityFlare = AmmoWidgetMPAbilityFlare --[[ @ 0]]
	
	local LED = LUI.UIImage.new( 0, 0, -0.5, 69.5, 0, 0, -4.5, 65.5 ) --[[ @ 0]]
	LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED:setAlpha( 0.3 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_outer" ) ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local BackingFillAnim = LUI.UIImage.new( 0, 0, 4, 68, 0, 0, 1, 61 ) --[[ @ 0]]
	BackingFillAnim:setRGB( 0.13, 0.13, 0.13 ) --[[ @ 0]]
	BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
	BackingFillAnim:setZRot( 180 ) --[[ @ 0]]
	BackingFillAnim:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 3, 0.05, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:linkToElementModel( self, "powerRatio", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			BackingFillAnim:setShaderVector( 2, AddToVector( 0.15, 0, 0, 0, ScaleVectorComponents( 0.7, 1, 1, 1, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BackingFillAnim ) --[[ @ 0]]
	self.BackingFillAnim = BackingFillAnim --[[ @ 0]]
	
	local PowerBasedxNum = CoD.AmmoWidget_PowerBasedCount.new( f1_arg0, f1_arg1, 0, 0, 2.5, 66.5, 0, 0, 72, 92 ) --[[ @ 0]]
	PowerBasedxNum:linkToElementModel( self, nil, false, function ( model )
		PowerBasedxNum:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PowerBasedxNum ) --[[ @ 0]]
	self.PowerBasedxNum = PowerBasedxNum --[[ @ 0]]
	
	local FullBackingDeployed = LUI.UIImage.new( 0, 0, 8, 64, 0, 0, 2, 58 ) --[[ @ 0]]
	FullBackingDeployed:setRGB( 0.84, 0.83, 0.77 ) --[[ @ 0]]
	FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	FullBackingDeployed:setZRot( 180 ) --[[ @ 0]]
	FullBackingDeployed:setImage( RegisterImage( @"hash_6040221656249477" ) ) --[[ @ 0]]
	FullBackingDeployed:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FullBackingDeployed ) --[[ @ 0]]
	self.FullBackingDeployed = FullBackingDeployed --[[ @ 0]]
	
	local AbilityPulse = CoD.AmmoWidgetMP_Ability_Flash.new( f1_arg0, f1_arg1, 0, 0, 1.5, 67.5, 0, 0, 2.5, 58.5 ) --[[ @ 0]]
	AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
	AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( self, nil, false, function ( model )
		AbilityPulse:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( self, "powerRatio", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			AbilityPulse:setShaderVector( 2, SetVectorComponent( 2, 1, SubtractVectorComponentFrom( 1, 1, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AbilityPulse ) --[[ @ 0]]
	self.AbilityPulse = AbilityPulse --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, -0.5, 69.5, 0, 0, -4.5, 65.5 ) --[[ @ 0]]
	Box:setImage( RegisterImage( @"uie_ui_hud_core_abeg_widget_box" ) ) --[[ @ 0]]
	Box:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	Box:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local PowerBasedImageUnavailable = LUI.UIImage.new( 0, 0, -4.5, 75.5, 0, 0, -10, 70 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setRGB( 0.65, 0.65, 0.65 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	PowerBasedImageUnavailable:linkToElementModel( self, "id", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			PowerBasedImageUnavailable:setImage( GetWeaponGadgetIconUnavailable( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageUnavailable ) --[[ @ 0]]
	self.PowerBasedImageUnavailable = PowerBasedImageUnavailable --[[ @ 0]]
	
	local PowerBasedImageAvailable = LUI.UIImage.new( 0, 0, -5.5, 74.5, 0, 0, -9.5, 70.5 ) --[[ @ 0]]
	PowerBasedImageAvailable:linkToElementModel( self, "id", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			PowerBasedImageAvailable:setImage( GetWeaponGadgetIconAvailable( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PowerBasedImageAvailable ) --[[ @ 0]]
	self.PowerBasedImageAvailable = PowerBasedImageAvailable --[[ @ 0]]
	
	local NotAvailable = CoD.AmmoWidget_EquipmentEmpty.new( f1_arg0, f1_arg1, 0.5, 0.5, -27, 25, 0.5, 0.5, -18.5, 23.5 ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, nil, false, function ( model )
		NotAvailable:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			NotAvailable.ImgIcon:setImage( GetWeaponGadgetIconAvailable( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, "id", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			NotAvailable.ImgIconGrow:setImage( GetWeaponGadgetIconAvailable( f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotAvailable ) --[[ @ 0]]
	self.NotAvailable = NotAvailable --[[ @ 0]]
	
	local Line = LUI.UIImage.new( 0, 0, 1, 67, 0.35, 0.35, -2, 3 ) --[[ @ 0]]
	Line:setRGB( 0.89, 0.89, 0.89 ) --[[ @ 0]]
	Line:setAlpha( 0 ) --[[ @ 0]]
	Line:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_feather_edges" ) ) --[[ @ 0]]
	Line:setShaderVector( 0, 0, 0.41, 0, 0.4 ) --[[ @ 0]]
	Line:linkToElementModel( self, "powerRatio", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			Line:setTopPct( Add( 0, Multiple( 1, Negate( f12_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Line ) --[[ @ 0]]
	self.Line = Line --[[ @ 0]]
	
	local f1_local13 = nil --[[ @ 0]]
	self.HeroAbilityHoldString = LUI.UIElement.createFake() --[[ @ 0]]
	local HeroAbilityHoldStringPC = nil --[[ @ 0]]
	
	HeroAbilityHoldStringPC = CoD.AbilityHoldToActivate.new( f1_arg0, f1_arg1, 0.5, 0.5, -100, 100, 0, 0, -93, -44 ) --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha = function ()
		HeroAbilityHoldStringPC:setAlpha( CoD.HUDUtility.GetAbilityHoldToActivateAlpha( f1_arg1, self, 1 ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	HeroAbilityHoldStringPC.__Alpha() --[[ @ 0]]
	HeroAbilityHoldStringPC:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityHoldStringPC:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityHoldStringPC ) --[[ @ 0]]
	self.HeroAbilityHoldStringPC = HeroAbilityHoldStringPC --[[ @ 0]]
	
	local GlowRing = LUI.UIImage.new( 0, 0, -5, 75, 0, 0, -9.5, 70.5 ) --[[ @ 0]]
	GlowRing:setRGB( 1, 0.44, 0 ) --[[ @ 0]]
	GlowRing:setAlpha( 0 ) --[[ @ 0]]
	GlowRing:setImage( RegisterImage( @"uie_hex_flare_ring" ) ) --[[ @ 0]]
	GlowRing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	GlowRing:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( GlowRing ) --[[ @ 0]]
	self.GlowRing = GlowRing --[[ @ 0]]
	
	local FlareBack = LUI.UIImage.new( 0, 0, -45.5, 114.5, 0, 0, -40, 100 ) --[[ @ 0]]
	FlareBack:setAlpha( 0 ) --[[ @ 0]]
	FlareBack:setScale( 1.16, 1.16 ) --[[ @ 0]]
	FlareBack:setImage( RegisterImage( @"uie_abeq_flare_back" ) ) --[[ @ 0]]
	FlareBack:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FlareBack ) --[[ @ 0]]
	self.FlareBack = FlareBack --[[ @ 0]]
	
	local CodCasterLoadoutSelection = CoD.CodCasterLoadoutSelectionHeal.new( f1_arg0, f1_arg1, 0, 0, -2, 70, 0, 0, 2, 62 ) --[[ @ 0]]
	CodCasterLoadoutSelection:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CodCasterLoadoutSelection ) --[[ @ 0]]
	self.CodCasterLoadoutSelection = CodCasterLoadoutSelection --[[ @ 0]]
	
	local HeroAbilityUseString = CoD.AmmoWidgetEquipmentText.new( f1_arg0, f1_arg1, 0, 0, 0, 72, 0, 0, -31, -7 ) --[[ @ 0]]
	HeroAbilityUseString:linkToElementModel( self, nil, false, function ( model )
		HeroAbilityUseString:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HeroAbilityUseString ) --[[ @ 0]]
	self.HeroAbilityUseString = HeroAbilityUseString --[[ @ 0]]
	
	HeroAbilityHoldStringPC:linkToElementModel( self, "powerRatio", true, HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	local f1_local19 = HeroAbilityHoldStringPC --[[ @ 0]]
	local f1_local20 = HeroAbilityHoldStringPC.subscribeToModel --[[ @ 0]]
	local f1_local21 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local20( f1_local19, f1_local21["GameplayFeedbackSettings.hideRadiationHold"], HeroAbilityHoldStringPC.__Alpha ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "id" )
			end
		},
		{
			stateName = "Restricted",
			condition = function ( menu, element, event )
				return CoD.AmmoWidgetUtility.IsAbilityRestricted( self )
			end
		},
		{
			stateName = "InUse",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] )
			end
		},
		{
			stateName = "Deployed",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "PowerBasedEmptyCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_958A6962CA8F9B7"] ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 0 )
			end
		},
		{
			stateName = "PowerBasedChargingAndReady",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_61CF78BFE5F942F1"] ) and not IsWarzone()
			end
		},
		{
			stateName = "PowerBasedCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_958A6962CA8F9B7"] ) and not IsWarzone()
			end
		},
		{
			stateName = "PowerBased",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"hash_F0447219F15F7F3"][@"hash_29529861EAA8D1C"] )
			end
		},
		{
			stateName = "Bounty",
			condition = function ( menu, element, event )
				return CoD.BountyHunterUtility.GameTypeIsBounty( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local19 = self --[[ @ 0]]
	f1_local20 = self.subscribeToModel --[[ @ 0]]
	f1_local21 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local20( f1_local19, f1_local21["lobbyRoot.lobbyNav"], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f29_arg2, f29_arg3, f29_arg4 )
		if CoD.HUDUtility.ShouldPulseNewAmmo( self ) and IsSelfInState( self, "PowerBased" ) then
			PlayClip( self, "Pulse", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		local f30_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "PowerBased" ) and CoD.HUDUtility.ShouldPulseNewAmmo( self ) then
			PlayClip( self, "Pulse", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.__resetProperties = function ( f31_arg0, f31_arg1 )
	f31_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
	f31_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
	f31_arg0.Line:completeAnimation() --[[ @ 0]]
	f31_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
	f31_arg0.FlareBack:completeAnimation() --[[ @ 0]]
	f31_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
	f31_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
	f31_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
	f31_arg0.PowerBasedxNum:completeAnimation() --[[ @ 0]]
	f31_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
	f31_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
	f31_arg0.Box:completeAnimation() --[[ @ 0]]
	f31_arg0.LED:completeAnimation() --[[ @ 0]]
	f31_arg0.HeroAbilityHoldStringPC:completeAnimation() --[[ @ 0]]
	f31_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
	f31_arg0.GlowRing:completeAnimation() --[[ @ 0]]
	f31_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setLeftRight( 0, 0, 1.5, 67.5 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setTopBottom( 0, 0, 2.5, 58.5 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f31_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f31_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.FlareBack:setScale( 1.16, 1.16 ) --[[ @ 0]]
	f31_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.PowerBasedImageAvailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f31_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.FullBackingDeployed:setRGB( 0.84, 0.83, 0.77 ) --[[ @ 0]]
	f31_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.PowerBasedxNum:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.Box:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f31_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f31_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
	f31_arg0.HeroAbilityHoldStringPC:setAlpha( CoD.HUDUtility.GetAbilityHoldToActivateAlpha( f31_arg1, f31_arg0, 1 ) ) --[[ @ 0]]
	f31_arg0.HeroAbilityHoldString:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.GlowRing:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties( f32_arg1 ) --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f32_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f32_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f32_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f32_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.AbilityPulse ) --[[ @ 0]]
			f32_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f32_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.NotAvailable ) --[[ @ 0]]
			f32_arg0.Line:completeAnimation() --[[ @ 0]]
			f32_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Line ) --[[ @ 0]]
			f32_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f32_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.FlareBack ) --[[ @ 0]]
			f32_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties( f33_arg1 ) --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f33_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
			f33_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.AmmoWidgetAbilityContainer ) --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f33_arg0.LED:completeAnimation() --[[ @ 0]]
			f33_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.LED ) --[[ @ 0]]
			f33_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
			f33_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.BackingFillAnim ) --[[ @ 0]]
			f33_arg0.PowerBasedxNum:completeAnimation() --[[ @ 0]]
			f33_arg0.PowerBasedxNum:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.PowerBasedxNum ) --[[ @ 0]]
			f33_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f33_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.FullBackingDeployed ) --[[ @ 0]]
			f33_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f33_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.AbilityPulse ) --[[ @ 0]]
			f33_arg0.Box:completeAnimation() --[[ @ 0]]
			f33_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.Box ) --[[ @ 0]]
			f33_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f33_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f33_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f33_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f33_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f33_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.NotAvailable ) --[[ @ 0]]
			f33_arg0.Line:completeAnimation() --[[ @ 0]]
			f33_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.Line ) --[[ @ 0]]
		end
	},
	Restricted = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties( f34_arg1 ) --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f34_arg0.LED:completeAnimation() --[[ @ 0]]
			f34_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.LED ) --[[ @ 0]]
			f34_arg0.PowerBasedxNum:completeAnimation() --[[ @ 0]]
			f34_arg0.PowerBasedxNum:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.PowerBasedxNum ) --[[ @ 0]]
			f34_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f34_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.AbilityPulse ) --[[ @ 0]]
			f34_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f34_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f34_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f34_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.NotAvailable ) --[[ @ 0]]
			f34_arg0.HeroAbilityHoldString:completeAnimation() --[[ @ 0]]
			f34_arg0.HeroAbilityHoldString:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.HeroAbilityHoldString ) --[[ @ 0]]
			f34_arg0.HeroAbilityHoldStringPC:completeAnimation() --[[ @ 0]]
			f34_arg0.HeroAbilityHoldStringPC:setAlpha( CoD.HUDUtility.GetAbilityHoldToActivateAlpha( f34_arg1, f34_arg0, 0 ) ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.HeroAbilityHoldStringPC ) --[[ @ 0]]
		end
	},
	InUse = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties( f35_arg1 ) --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f35_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f35_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f35_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f35_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.AbilityPulse ) --[[ @ 0]]
			f35_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f35_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.NotAvailable ) --[[ @ 0]]
			f35_arg0.Line:completeAnimation() --[[ @ 0]]
			f35_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.Line ) --[[ @ 0]]
			f35_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Deployed = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties( f36_arg1 ) --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f36_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f36_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f36_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f36_arg0.AbilityPulse:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.AbilityPulse ) --[[ @ 0]]
			f36_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f36_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.NotAvailable ) --[[ @ 0]]
			f36_arg0.Line:completeAnimation() --[[ @ 0]]
			f36_arg0.Line:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Line ) --[[ @ 0]]
		end
	},
	PowerBasedEmptyCharging = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties( f37_arg1 ) --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f37_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f37_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f37_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f37_arg0.FullBackingDeployed:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f37_arg0.FullBackingDeployed:setAlpha( 0.03 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.FullBackingDeployed ) --[[ @ 0]]
			f37_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f37_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
			f37_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f37_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f37_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f37_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.AbilityPulse ) --[[ @ 0]]
			f37_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f37_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f37_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f37_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f37_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f37_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.NotAvailable ) --[[ @ 0]]
			f37_arg0.Line:completeAnimation() --[[ @ 0]]
			f37_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.Line ) --[[ @ 0]]
		end
	},
	PowerBasedChargingAndReady = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties( f38_arg1 ) --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f38_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f38_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f38_arg0.LED:completeAnimation() --[[ @ 0]]
			f38_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f38_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.LED ) --[[ @ 0]]
			f38_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f38_arg0.AbilityPulse:setAlpha( 0.8 ) --[[ @ 0]]
			f38_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f38_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f38_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f38_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AbilityPulse ) --[[ @ 0]]
			f38_arg0.Box:completeAnimation() --[[ @ 0]]
			f38_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f38_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.Box ) --[[ @ 0]]
			f38_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f38_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f38_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f38_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f38_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f38_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.NotAvailable ) --[[ @ 0]]
			f38_arg0.Line:completeAnimation() --[[ @ 0]]
			f38_arg0.Line:setAlpha( 0.57 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.Line ) --[[ @ 0]]
			f38_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f38_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.GlowRing ) --[[ @ 0]]
			local f38_local0 = function ( f39_arg0 )
				local f39_local0 = function ( f40_arg0 )
					f40_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f40_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f40_arg0:registerEventHandler( "transition_complete_keyframe", f38_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f38_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f38_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f38_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f38_arg0.clipInterrupted ) --[[ @ 0]]
				f38_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f39_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f38_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f38_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f38_arg0.FlareBack:setScale( 1, 1 ) --[[ @ 0]]
			f38_local0( f38_arg0.FlareBack ) --[[ @ 0]]
			f38_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end,
		Pulse = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties( f41_arg1 ) --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f41_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f41_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f41_arg0.LED:completeAnimation() --[[ @ 0]]
			f41_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.LED ) --[[ @ 0]]
			f41_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
			f41_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.BackingFillAnim ) --[[ @ 0]]
			f41_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f41_arg0.AbilityPulse:setLeftRight( 0, 0, 3, 68 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setTopBottom( 0, 0, 0, 59 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AbilityPulse ) --[[ @ 0]]
			f41_arg0.Box:completeAnimation() --[[ @ 0]]
			f41_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Box ) --[[ @ 0]]
			f41_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f41_arg0.PowerBasedImageAvailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f41_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f41_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.NotAvailable ) --[[ @ 0]]
			f41_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f41_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.GlowRing ) --[[ @ 0]]
			local f41_local0 = function ( f42_arg0 )
				local f42_local0 = function ( f43_arg0 )
					f43_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f43_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f43_arg0:registerEventHandler( "transition_complete_keyframe", f41_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f41_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f41_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f41_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f41_arg0.clipInterrupted ) --[[ @ 0]]
				f41_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f42_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f41_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f41_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f41_arg0.FlareBack:setScale( 0.5, 0.5 ) --[[ @ 0]]
			f41_local0( f41_arg0.FlareBack ) --[[ @ 0]]
			f41_arg0.nextClip = "Pulse" --[[ @ 0]]
		end
	},
	PowerBasedCharging = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties( f44_arg1 ) --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f44_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f44_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f44_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f44_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.FullBackingDeployed ) --[[ @ 0]]
			f44_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f44_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
			f44_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f44_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f44_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f44_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.AbilityPulse ) --[[ @ 0]]
			f44_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f44_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f44_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f44_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f44_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f44_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.NotAvailable ) --[[ @ 0]]
			f44_arg0.Line:completeAnimation() --[[ @ 0]]
			f44_arg0.Line:setAlpha( 0.57 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.Line ) --[[ @ 0]]
		end
	},
	PowerBased = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties( f45_arg1 ) --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f45_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f45_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f45_arg0.LED:completeAnimation() --[[ @ 0]]
			f45_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f45_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.LED ) --[[ @ 0]]
			f45_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f45_arg0.AbilityPulse:setAlpha( 0.8 ) --[[ @ 0]]
			f45_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f45_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f45_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f45_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.AbilityPulse ) --[[ @ 0]]
			f45_arg0.Box:completeAnimation() --[[ @ 0]]
			f45_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f45_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.Box ) --[[ @ 0]]
			f45_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f45_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f45_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f45_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f45_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f45_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.NotAvailable ) --[[ @ 0]]
			f45_arg0.Line:completeAnimation() --[[ @ 0]]
			f45_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.Line ) --[[ @ 0]]
			f45_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f45_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.GlowRing ) --[[ @ 0]]
			local f45_local0 = function ( f46_arg0 )
				local f46_local0 = function ( f47_arg0 )
					f47_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f47_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f47_arg0:registerEventHandler( "transition_complete_keyframe", f45_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f45_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f45_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f45_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f45_arg0.clipInterrupted ) --[[ @ 0]]
				f45_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f46_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f45_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f45_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f45_arg0.FlareBack:setScale( 1, 1 ) --[[ @ 0]]
			f45_local0( f45_arg0.FlareBack ) --[[ @ 0]]
			f45_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end,
		Pulse = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties( f48_arg1 ) --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f48_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f48_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f48_arg0.LED:completeAnimation() --[[ @ 0]]
			f48_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f48_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.LED ) --[[ @ 0]]
			f48_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
			f48_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.BackingFillAnim ) --[[ @ 0]]
			f48_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f48_arg0.AbilityPulse:setLeftRight( 0, 0, 3, 68 ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setTopBottom( 0, 0, 0, 59 ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setAlpha( 1 ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f48_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.AbilityPulse ) --[[ @ 0]]
			f48_arg0.Box:completeAnimation() --[[ @ 0]]
			f48_arg0.Box:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f48_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.Box ) --[[ @ 0]]
			f48_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f48_arg0.PowerBasedImageAvailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f48_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f48_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.NotAvailable ) --[[ @ 0]]
			f48_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f48_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.GlowRing ) --[[ @ 0]]
			local f48_local0 = function ( f49_arg0 )
				local f49_local0 = function ( f50_arg0 )
					f50_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f50_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f50_arg0:registerEventHandler( "transition_complete_keyframe", f48_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f48_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f48_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f48_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f48_arg0.clipInterrupted ) --[[ @ 0]]
				f48_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f49_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f48_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f48_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f48_arg0.FlareBack:setScale( 0.5, 0.5 ) --[[ @ 0]]
			f48_local0( f48_arg0.FlareBack ) --[[ @ 0]]
			f48_arg0.nextClip = "Pulse" --[[ @ 0]]
		end
	},
	Bounty = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties( f51_arg1 ) --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f51_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f51_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f51_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f51_arg0.FullBackingDeployed:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f51_arg0.FullBackingDeployed:setAlpha( 0.03 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.FullBackingDeployed ) --[[ @ 0]]
			f51_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f51_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
			f51_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f51_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f51_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f51_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.AbilityPulse ) --[[ @ 0]]
			f51_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f51_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f51_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f51_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f51_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f51_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.NotAvailable ) --[[ @ 0]]
			f51_arg0.Line:completeAnimation() --[[ @ 0]]
			f51_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.Line ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetMP_AbilityItem.__onClose = function ( f52_arg0 )
	f52_arg0.AmmoWidgetAbilityContainer:close() --[[ @ 0]]
	f52_arg0.AmmoWidgetMPAbilityFlare:close() --[[ @ 0]]
	f52_arg0.BackingFillAnim:close() --[[ @ 0]]
	f52_arg0.PowerBasedxNum:close() --[[ @ 0]]
	f52_arg0.AbilityPulse:close() --[[ @ 0]]
	f52_arg0.PowerBasedImageUnavailable:close() --[[ @ 0]]
	f52_arg0.PowerBasedImageAvailable:close() --[[ @ 0]]
	f52_arg0.NotAvailable:close() --[[ @ 0]]
	f52_arg0.Line:close() --[[ @ 0]]
	f52_arg0.HeroAbilityHoldString:close() --[[ @ 0]]
	f52_arg0.HeroAbilityHoldStringPC:close() --[[ @ 0]]
	f52_arg0.CodCasterLoadoutSelection:close() --[[ @ 0]]
	f52_arg0.HeroAbilityUseString:close() --[[ @ 0]]
end
 --[[ @ 0]]
