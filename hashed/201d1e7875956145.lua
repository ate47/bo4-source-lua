-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:1b62ba0298ebda7a" ) --[[ @ 0]]
require( "x64:453aa92712af1594" ) --[[ @ 0]]
require( "x64:789ba7fe93e9e723" ) --[[ @ 0]]

CoD.ReticleGroupContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReticleGroupContainer.__defaultWidth = 1920 --[[ @ 0]]
CoD.ReticleGroupContainer.__defaultHeight = 350 --[[ @ 0]]
CoD.ReticleGroupContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReticleGroupContainer ) --[[ @ 0]]
	self.id = "ReticleGroupContainer" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CycleColorPrompt = CoD.ReticleCycleColorPrompt.new( f1_arg0, f1_arg1, 0, 0, 860, 1060, 0, 0, 41, 91 ) --[[ @ 0]]
	CycleColorPrompt:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.WeaponOptionsUtility.ShouldShowReticleCycleColorPrompt( f1_arg1, element, menu )
			end
		},
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	CycleColorPrompt:linkToElementModel( CycleColorPrompt, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( CycleColorPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CycleColorPrompt:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( CycleColorPrompt, f5_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ReticlesList = CycleColorPrompt --[[ @ 0]]
	local Label = CycleColorPrompt.subscribeToModel --[[ @ 0]]
	local ReticleColors = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Label( ReticlesList, ReticleColors.LastInput, function ( f6_arg0 )
		f1_arg0:updateElementState( CycleColorPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CycleColorPrompt ) --[[ @ 0]]
	self.CycleColorPrompt = CycleColorPrompt --[[ @ 0]]
	
	Label = LUI.UIText.new( 0, 1, 0, 0, 0, 0, 104, 122 ) --[[ @ 0]]
	Label:setRGB( 0.39, 0.39, 0.39 ) --[[ @ 0]]
	Label:setText( LocalizeToUpperString( @"hash_6E44ADD3E8DA4E08" ) ) --[[ @ 0]]
	Label:setTTF( "default" ) --[[ @ 0]]
	Label:setLetterSpacing( 4 ) --[[ @ 0]]
	Label:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Label:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Label ) --[[ @ 0]]
	self.Label = Label --[[ @ 0]]
	
	ReticlesList = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	ReticlesList:mergeStateConditions( {
		{
			stateName = "Equipped",
			condition = function ( menu, element, event )
				return CoD.WeaponOptionsUtility.IsWeaponOptionEquipped( menu, element, f1_arg1, "reticleIndex" )
			end
		},
		{
			stateName = "Locked",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.CACUtility.IsProgressionWithWarzoneEnabledForMenu( menu ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, f1_arg1 ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = not CoD.WeaponOptionsUtility.IsItemLootReticle( menu, element, f1_arg1 ) --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "LootLocked",
			condition = function ( menu, element, event )
				return IsElementPropertyValue( element, "isLootLocked", true )
			end
		},
		{
			stateName = "New",
			condition = function ( menu, element, event )
				return CoD.BreadcrumbUtility.IsWeaponOpticNew( menu, element, f1_arg1 ) and not IsZombies()
			end
		}
	} ) --[[ @ 0]]
	ReticlesList:linkToElementModel( ReticlesList, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( ReticlesList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ReticlesWillAppearHereText = ReticlesList --[[ @ 0]]
	ReticleColors = ReticlesList.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ReticleColors( ReticlesWillAppearHereText, f1_local6["lobbyRoot.lobbyNav"], function ( f12_arg0 )
		f1_arg0:updateElementState( ReticlesList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ReticlesList:setLeftRight( 0.5, 0.5, -475, 475 ) --[[ @ 0]]
	ReticlesList:setTopBottom( 0, 0, 127, 297 ) --[[ @ 0]]
	ReticlesList:setWidgetType( CoD.ReticleSlot ) --[[ @ 0]]
	ReticlesList:setHorizontalCount( 8 ) --[[ @ 0]]
	ReticlesList:setVerticalCount( 2 ) --[[ @ 0]]
	ReticlesList:setSpacing( 10 ) --[[ @ 0]]
	ReticlesList:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ReticlesList:setDataSource( "WeaponReticles" ) --[[ @ 0]]
	ReticlesList:linkToElementModel( ReticlesList, "itemIndex", true, function ( model, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ReticlesList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		CoD.WeaponOptionsUtility.UpdateWeaponReticle( f1_arg0, element, f1_arg1, false ) --[[ @ 0]]
		CoD.GridAndListUtility.UpdateDataSource( self.ReticleColors, true, true, true ) --[[ @ 0]]
		return f14_local0
	end ) --[[ @ 0]]
	ReticlesList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if IsElementInState( element, "New" ) then
			CoD.BreadcrumbUtility.SetWeaponOpticOld( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.BreadcrumbUtility.UpdateWeaponOpticBreadcrumbs( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
		return f15_local0
	end ) --[[ @ 0]]
	ReticlesList:registerEventHandler( "gain_focus", function ( element, event )
		local f16_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f16_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f16_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f16_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ReticlesList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.WeaponOptionsUtility.CanEquipWeaponOption( menu, element, controller ) and CoD.WeaponOptionsUtility.IsReticlePreviewing( controller, element, menu ) and not IsElementPropertyValue( element, "isLootLocked", true ) then
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.SetWeaponOptionClassItemHelper( self, element, controller, menu ) --[[ @ 0]]
			CoD.WeaponOptionsUtility.UpdateWeaponReticle( menu, element, controller, true ) --[[ @ 0]]
			UpdateElementState( self, "ReticlesList", controller ) --[[ @ 0]]
			UpdateElementState( self, "ReticleColors", controller ) --[[ @ 0]]
			UpdateElementState( self, "CycleColorPrompt", controller ) --[[ @ 0]]
			CoD.GridAndListUtility.UpdateDataSource( self.ReticleColors, true, true, true ) --[[ @ 0]]
			PlaySoundAlias( "uin_cac_attach_base" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WeaponOptionsUtility.CanEquipWeaponOption( menu, element, controller ) and CoD.WeaponOptionsUtility.IsReticlePreviewing( controller, element, menu ) and not IsElementPropertyValue( element, "isLootLocked", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	ReticlesList:subscribeToGlobalModel( f1_arg1, "PerController", "WeaponPersonalization.reticleListUpdate", function ( model )
		UpdateDataSource( self, ReticlesList, f1_arg1 ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ReticlesList ) --[[ @ 0]]
	self.ReticlesList = ReticlesList --[[ @ 0]]
	
	ReticleColors = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 10, 0, nil, nil, true, false, false, false ) --[[ @ 0]]
	ReticleColors:mergeStateConditions( {
		{
			stateName = "Locked",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ReticleColors:linkToElementModel( ReticleColors, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( ReticleColors, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ReticleColors:appendEventHandler( "input_source_changed", function ( f22_arg0, f22_arg1 )
		f22_arg1.menu = f22_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ReticleColors, f22_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = ReticleColors --[[ @ 0]]
	ReticlesWillAppearHereText = ReticleColors.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ReticlesWillAppearHereText( f1_local6, f1_local7.LastInput, function ( f23_arg0 )
		f1_arg0:updateElementState( ReticleColors, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ReticleColors:setLeftRight( 0.5, 0.5, -295, 295 ) --[[ @ 0]]
	ReticleColors:setTopBottom( 0, 0, -47, 33 ) --[[ @ 0]]
	ReticleColors:setScale( 0.9, 0.9 ) --[[ @ 0]]
	ReticleColors:setWidgetType( CoD.ReticleColorSlot ) --[[ @ 0]]
	ReticleColors:setHorizontalCount( 5 ) --[[ @ 0]]
	ReticleColors:setSpacing( 10 ) --[[ @ 0]]
	ReticleColors:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ReticleColors:setDataSource( "WeaponReticleColor" ) --[[ @ 0]]
	ReticleColors:registerEventHandler( "list_active_changed", function ( element, event )
		local f24_local0 = nil --[[ @ 0]]
		CoD.WeaponOptionsUtility.SetWeaponOptionClassItemHelper( self, element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		CoD.WeaponOptionsUtility.UpdateWeaponReticleImage( f1_arg0, element, self.ReticlesList, f1_arg1 ) --[[ @ 0]]
		ForceCheckDefaultPCFocus( element, f1_arg0, f1_arg1 ) --[[ @ 0]]
		return f24_local0
	end ) --[[ @ 0]]
	ReticleColors:registerEventHandler( "gain_focus", function ( element, event )
		local f25_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f25_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f25_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f25_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ReticleColors, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_ReticleColors = function ( f28_arg0, f28_arg1, f28_arg2, f28_arg3 )
		local f28_local0 = ReticleColors --[[ @ 0]]
		SetElementProperty( f28_local0, "_receivedMenuOpen", true ) --[[ @ 0]]
		SetElementProperty( f28_local0, "__loopOnSameRow", true ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_ReticleColors ) --[[ @ 0]]
	ReticleColors:subscribeToGlobalModel( f1_arg1, "PerController", "WeaponPersonalization.reticleListUpdate", function ( model )
		UpdateDataSource( self, ReticleColors, f1_arg1 ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ReticleColors ) --[[ @ 0]]
	self.ReticleColors = ReticleColors --[[ @ 0]]
	
	ReticlesWillAppearHereText = LUI.UIText.new( 0.5, 0.5, -615, 615, 0, 0, 150, 180 ) --[[ @ 0]]
	ReticlesWillAppearHereText:setAlpha( 0 ) --[[ @ 0]]
	ReticlesWillAppearHereText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_213D359FE54DC768" ) ) --[[ @ 0]]
	ReticlesWillAppearHereText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	ReticlesWillAppearHereText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ReticlesWillAppearHereText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ReticlesWillAppearHereText ) --[[ @ 0]]
	self.ReticlesWillAppearHereText = ReticlesWillAppearHereText --[[ @ 0]]
	
	CycleColorPrompt:linkToElementModel( ReticlesList, nil, false, function ( model )
		CycleColorPrompt:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "ListEmpty",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.ReticlesList )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f33_arg0, f33_arg1 )
		f33_arg1.menu = f33_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f33_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local7, f1_local8.LastInput, function ( f34_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f35_arg0, f35_arg1 )
		f35_arg1.menu = f35_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f35_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f36_arg0, f36_arg1 )
		f36_arg1.menu = f36_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f36_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local7, f1_local8.LastInput, function ( f37_arg0, f37_arg1 )
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if not IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.NavigateGridItemInChild( self, controller, "ReticleColors", true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		ClearMenuSavedState( f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f41_arg2, f41_arg3, f41_arg4 )
		if IsElementInState( element, "ListEmpty" ) then
			SetLoseFocusToElement( self, "ReticlesList", controller ) --[[ @ 0]]
			ClearRecordedFocus( f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "WeaponPersonalization.reticleListUpdate", function ( model )
		if not IsPC() and not IsElementInState( self, "ListEmpty" ) then
			DelaySetFocusToElement( self, "ReticlesList", f1_arg1, 50 ) --[[ @ 0]]
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( self.ReticlesList ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ReticlesList.id = "ReticlesList" --[[ @ 0]]
	ReticleColors.id = "ReticleColors" --[[ @ 0]]
	self.__defaultFocus = ReticlesList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_ReticleColors ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local6 = self --[[ @ 0]]
	f1_local6 = ReticleColors --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.DisableListActiveOnFocus( f1_local6 ) --[[ @ 0]]
		CoD.GridAndListUtility.ActivateListPCSelectionBehavior( f1_local6 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ReticleGroupContainer.__resetProperties = function ( f44_arg0 )
	f44_arg0.ReticleColors:completeAnimation() --[[ @ 0]]
	f44_arg0.ReticlesWillAppearHereText:completeAnimation() --[[ @ 0]]
	f44_arg0.ReticleColors:setTopBottom( 0, 0, -47, 33 ) --[[ @ 0]]
	f44_arg0.ReticlesWillAppearHereText:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReticleGroupContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f46_arg0.ReticleColors:completeAnimation() --[[ @ 0]]
			f46_arg0.ReticleColors:setTopBottom( 0, 0, 0, 80 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.ReticleColors ) --[[ @ 0]]
		end
	},
	ListEmpty = {
		DefaultClip = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f47_arg0.ReticlesWillAppearHereText:completeAnimation() --[[ @ 0]]
			f47_arg0.ReticlesWillAppearHereText:setAlpha( 1 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.ReticlesWillAppearHereText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReticleGroupContainer.__onClose = function ( f48_arg0 )
	f48_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f48_arg0.CycleColorPrompt:close() --[[ @ 0]]
	f48_arg0.ReticlesList:close() --[[ @ 0]]
	f48_arg0.ReticleColors:close() --[[ @ 0]]
end
 --[[ @ 0]]
