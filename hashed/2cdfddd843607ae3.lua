-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/menus/lobby/directorfindgamewz" ) --[[ @ 0]]
require( "x64:6260c7a8e3737127" ) --[[ @ 0]]
require( "x64:751ef3a2adbd471e" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directormapandgametypecontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpregamebuttonoption" ) --[[ @ 0]]
require( "x64:500e3efc70851381" ) --[[ @ 0]]
require( "x64:37b2e5c29b34a47e" ) --[[ @ 0]]
require( "x64:4bfdd9a330518b28" ) --[[ @ 0]]
require( "x64:146b093e7d34ea80" ) --[[ @ 0]]
require( "x64:2a155eac5398a2a3" ) --[[ @ 0]]
require( "ui/uieditor/widgets/dynamiccontainerwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "x64:1429ef25909713fe" ) --[[ @ 0]]
require( "x64:34632a684587e313" ) --[[ @ 0]]
require( "ui/uieditor/widgets/notifications/publiclobbystagenotification/stagenotificationcontainer" ) --[[ @ 0]]
require( "x64:445928c36e455a1" ) --[[ @ 0]]

CoD.directorPublic = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorPublic.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorPublic.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorPublic.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.DirectorUtility.InitPublicLobbyModels( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.CreateGlobalModel( "MapVote.mapVoteMapPreviousGametype" ) --[[ @ 0]]
	self:setClass( CoD.directorPublic ) --[[ @ 0]]
	self.id = "directorPublic" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HeaderWZ = CoD.StageNotificationContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 120 ) --[[ @ 0]]
	HeaderWZ:setAlpha( 0 ) --[[ @ 0]]
	HeaderWZ.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"menu/warzone" ) ) --[[ @ 0]]
	HeaderWZ.CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	HeaderWZ:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "publicLobby.stageDetails", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			HeaderWZ.CommonHeader.subtitle.subtitle:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HeaderWZ ) --[[ @ 0]]
	self.HeaderWZ = HeaderWZ --[[ @ 0]]
	
	local HeaderWZDeploying = CoD.StageNotificationContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 120 ) --[[ @ 0]]
	HeaderWZDeploying:setAlpha( 0 ) --[[ @ 0]]
	HeaderWZDeploying.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle = function ( f3_arg0 )
		local f3_local0 = f3_arg0:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			HeaderWZDeploying.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.DirectorUtility.PlaylistIDToPlaylistName( f3_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	HeaderWZDeploying:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", HeaderWZDeploying.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle ) --[[ @ 0]]
	HeaderWZDeploying.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle_FullPath = function ()
		local f4_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f4_local0 = f4_local0.playlistId --[[ @ 0]]
		if f4_local0 then
			HeaderWZDeploying.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle( f4_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	HeaderWZDeploying:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "publicLobby.stageDetails", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			HeaderWZDeploying.CommonHeader.subtitle.subtitle:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f5_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HeaderWZDeploying ) --[[ @ 0]]
	self.HeaderWZDeploying = HeaderWZDeploying --[[ @ 0]]
	
	local HeaderMP = CoD.StageNotificationContainer.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 120 ) --[[ @ 0]]
	HeaderMP:subscribeToGlobalModel( f1_arg1, "MapVote", "mapVoteGameModeNext", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			HeaderMP.CommonHeader.subtitle.StageTitle:setText( CoD.GameTypeUtility.GameTypeToLocalizeToUpperName( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	HeaderMP:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "publicLobby.stageDetails", function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			HeaderMP.CommonHeader.subtitle.subtitle:setText( ConvertToUpperString( CoD.BaseUtility.AlreadyLocalized( f7_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HeaderMP ) --[[ @ 0]]
	self.HeaderMP = HeaderMP --[[ @ 0]]
	
	local WarzoneHostPlayButton = CoD.DirectorPublicWzPlayButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	WarzoneHostPlayButton:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f8_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "lobbyRoot.publicLobby.stage", LuaEnum.PUBLIC_LOBBY.INVALID ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = CoD.BaseUtility.IsCurrentSessionModeEqualTo( Enum[@"emodes"][@"mode_warzone"] ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = IsLobbyPrivateHost() --[[ @ 0]]
						if f8_local0 then
							f8_local0 = IsWarzone() --[[ @ 0]]
							if f8_local0 then
								f8_local0 = CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) --[[ @ 0]]
								if f8_local0 then
									f8_local0 = CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] ) --[[ @ 0]]
									if f8_local0 then
										f8_local0 = CoD.LobbyUtility.AllMembersInFrontend() --[[ @ 0]]
									end
								end
							end
						end
					end
				end
				return f8_local0
			end
		}
	} ) --[[ @ 0]]
	local DirectorTogglePartyFill = WarzoneHostPlayButton --[[ @ 0]]
	local WarzoneClientPlayButton = WarzoneHostPlayButton.subscribeToModel --[[ @ 0]]
	local CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	WarzoneClientPlayButton( DirectorTogglePartyFill, CustomGamesButton["lobbyRoot.publicLobby.stage"], function ( f9_arg0 )
		f1_arg0:updateElementState( WarzoneHostPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneHostPlayButton --[[ @ 0]]
	WarzoneClientPlayButton = WarzoneHostPlayButton.subscribeToModel --[[ @ 0]]
	CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	WarzoneClientPlayButton( DirectorTogglePartyFill, CustomGamesButton["lobbyRoot.privateClient.update"], function ( f10_arg0 )
		f1_arg0:updateElementState( WarzoneHostPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneHostPlayButton --[[ @ 0]]
	WarzoneClientPlayButton = WarzoneHostPlayButton.subscribeToModel --[[ @ 0]]
	CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	WarzoneClientPlayButton( DirectorTogglePartyFill, CustomGamesButton["lobbyRoot.lobbyNav"], function ( f11_arg0 )
		f1_arg0:updateElementState( WarzoneHostPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneHostPlayButton --[[ @ 0]]
	WarzoneClientPlayButton = WarzoneHostPlayButton.subscribeToModel --[[ @ 0]]
	CustomGamesButton = Engine[@"getglobalmodel"]() --[[ @ 0]]
	WarzoneClientPlayButton( DirectorTogglePartyFill, CustomGamesButton["lobbyRoot.lobbyMainMode"], function ( f12_arg0 )
		f1_arg0:updateElementState( WarzoneHostPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "lobbyRoot.lobbyMainMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WarzoneHostPlayButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"menu/deploy" ) ) --[[ @ 0]]
	WarzoneHostPlayButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/deploy" ) ) --[[ @ 0]]
	WarzoneHostPlayButton:registerEventHandler( "gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f13_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f13_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WarzoneHostPlayButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		LobbyOnlineStartMatchMaking( menu, self, element, controller ) --[[ @ 0]]
		PlaySoundAlias( "uin_wz_deploy" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( WarzoneHostPlayButton ) --[[ @ 0]]
	self.WarzoneHostPlayButton = WarzoneHostPlayButton --[[ @ 0]]
	
	WarzoneClientPlayButton = CoD.DirectorPublicWzPlayButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	WarzoneClientPlayButton:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f16_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "lobbyRoot.publicLobby.stage", LuaEnum.PUBLIC_LOBBY.INVALID ) --[[ @ 0]]
				if f16_local0 then
					f16_local0 = CoD.BaseUtility.IsCurrentSessionModeEqualTo( Enum[@"emodes"][@"mode_warzone"] ) --[[ @ 0]]
					if f16_local0 then
						if not IsLobbyPrivateHost() then
							f16_local0 = IsWarzone() --[[ @ 0]]
							if f16_local0 then
								f16_local0 = CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) --[[ @ 0]]
								if f16_local0 then
									f16_local0 = CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] ) --[[ @ 0]]
									if f16_local0 then
										f16_local0 = CoD.LobbyUtility.AllMembersInFrontend() --[[ @ 0]]
									end
								end
							end
						else
							f16_local0 = false --[[ @ 0]]
						end
					end
				end
				return f16_local0
			end
		}
	} ) --[[ @ 0]]
	CustomGamesButton = WarzoneClientPlayButton --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneClientPlayButton.subscribeToModel --[[ @ 0]]
	local DirectorWarningMessage = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorTogglePartyFill( CustomGamesButton, DirectorWarningMessage["lobbyRoot.publicLobby.stage"], function ( f17_arg0 )
		f1_arg0:updateElementState( WarzoneClientPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = WarzoneClientPlayButton --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneClientPlayButton.subscribeToModel --[[ @ 0]]
	DirectorWarningMessage = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorTogglePartyFill( CustomGamesButton, DirectorWarningMessage["lobbyRoot.privateClient.update"], function ( f18_arg0 )
		f1_arg0:updateElementState( WarzoneClientPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = WarzoneClientPlayButton --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneClientPlayButton.subscribeToModel --[[ @ 0]]
	DirectorWarningMessage = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorTogglePartyFill( CustomGamesButton, DirectorWarningMessage["lobbyRoot.lobbyNav"], function ( f19_arg0 )
		f1_arg0:updateElementState( WarzoneClientPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton = WarzoneClientPlayButton --[[ @ 0]]
	DirectorTogglePartyFill = WarzoneClientPlayButton.subscribeToModel --[[ @ 0]]
	DirectorWarningMessage = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorTogglePartyFill( CustomGamesButton, DirectorWarningMessage["lobbyRoot.lobbyMainMode"], function ( f20_arg0 )
		f1_arg0:updateElementState( WarzoneClientPlayButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "lobbyRoot.lobbyMainMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WarzoneClientPlayButton:subscribeToGlobalModel( f1_arg1, "LobbyRoot", nil, function ( model )
		WarzoneClientPlayButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WarzoneClientPlayButton:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "leaderActivity", function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			WarzoneClientPlayButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( f22_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneClientPlayButton:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "leaderActivity", function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			WarzoneClientPlayButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( f23_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WarzoneClientPlayButton ) --[[ @ 0]]
	self.WarzoneClientPlayButton = WarzoneClientPlayButton --[[ @ 0]]
	
	DirectorTogglePartyFill = CoD.DirectorTogglePartyFill.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -434, -388 ) --[[ @ 0]]
	self:addElement( DirectorTogglePartyFill ) --[[ @ 0]]
	self.DirectorTogglePartyFill = DirectorTogglePartyFill --[[ @ 0]]
	
	CustomGamesButton = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -500, -454 ) --[[ @ 0]]
	CustomGamesButton:mergeStateConditions( {
		{
			stateName = "VisibleTrialLocked",
			condition = function ( menu, element, event )
				return CoD.WZUtility.AllowWZOffline() and IsGameTrial()
			end
		},
		{
			stateName = "VisibleZmOffline",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f26_local0 = CoD.WZUtility.AllowWZOffline() --[[ @ 0]]
				if f26_local0 then
					if not IsGameTrial() then
						f26_local0 = CoD.BaseUtility.IsDvarEnabled( "ui_showWZCustomGameOption" ) --[[ @ 0]]
					else
						f26_local0 = false --[[ @ 0]]
					end
				end
				return f26_local0
			end
		}
	} ) --[[ @ 0]]
	CustomGamesButton:setAlpha( 0 ) --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference = function ()
		CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( CoD.DirectorUtility.GetCustomGamesName( @"menu/custom_games" ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference() --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String = function ()
		CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( CoD.DirectorUtility.GetCustomGamesName( @"menu/custom_games" ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String() --[[ @ 0]]
	CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	local TopBar = CustomGamesButton --[[ @ 0]]
	DirectorWarningMessage = CustomGamesButton.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorWarningMessage( TopBar, f1_local10["lobbyRoot.lobbyNav"], function ( f29_arg0, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CustomGamesButton:registerEventHandler( "gain_focus", function ( element, event )
		local f30_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f30_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f30_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f30_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( CustomGamesButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.WZUtility.AllowWZOffline() and not IsGameTrial() and IsWarzone() and not IsPC() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			OpenSystemOverlay( self, menu, controller, "CustomGamesNotification" ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.AllowWZOffline() and not IsGameTrial() and IsWarzone() and IsPC() then
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.NavigateToCustomLobbyForCurrentMode( menu, controller ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WZUtility.AllowWZOffline() and not IsGameTrial() and IsWarzone() and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.AllowWZOffline() and not IsGameTrial() and IsWarzone() and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( CustomGamesButton ) --[[ @ 0]]
	self.CustomGamesButton = CustomGamesButton --[[ @ 0]]
	
	DirectorWarningMessage = CoD.DirectorWarningMessage.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -575, -520 ) --[[ @ 0]]
	self:addElement( DirectorWarningMessage ) --[[ @ 0]]
	self.DirectorWarningMessage = DirectorWarningMessage --[[ @ 0]]
	
	TopBar = CoD.header_container_frontend.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	f1_local10 = nil --[[ @ 0]]
	f1_local10 = LUI.UIElement.createFake() --[[ @ 0]]
	self.MapVote = f1_local10 --[[ @ 0]]
	local MapVotePC = nil --[[ @ 0]]
	
	MapVotePC = CoD.MapVote.new( f1_arg0, f1_arg1, 0.5, 0.5, -505, 406, 1, 1, -399, -184 ) --[[ @ 0]]
	self:addElement( MapVotePC ) --[[ @ 0]]
	self.MapVotePC = MapVotePC --[[ @ 0]]
	
	local MapVoteZM = CoD.MapVoteZM.new( f1_arg0, f1_arg1, 0.5, 0.5, 510, 904, 1, 1, -580, -225 ) --[[ @ 0]]
	self:addElement( MapVoteZM ) --[[ @ 0]]
	self.MapVoteZM = MapVoteZM --[[ @ 0]]
	
	local MapAndGameType = CoD.DirectorMapAndGameTypeContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -368, -188 ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.GamemodeIcon:setImage( RegisterImage( @"blacktransparent" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label:setText( "" ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5890976738B1D859" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5890976738B1D859" ) ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image = function ( f33_arg0 )
		local f33_local0 = f33_arg0:get() --[[ @ 0]]
		if f33_local0 ~= nil then
			MapAndGameType.DirectorMapAndGameInternal.MapImage:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToPlaylistImageTileSideInfo( f33_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath = function ()
		local f34_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f34_local0 = f34_local0.playlistId --[[ @ 0]]
		if f34_local0 then
			MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image( f34_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title = function ( f35_arg0 )
		local f35_local0 = f35_arg0:get() --[[ @ 0]]
		if f35_local0 ~= nil then
			MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle:setText( LocalizeToUpperString( CoD.DirectorUtility.PlaylistIDToPlaylistName( f35_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	MapAndGameType:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title ) --[[ @ 0]]
	MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath = function ()
		local f36_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f36_local0 = f36_local0.playlistId --[[ @ 0]]
		if f36_local0 then
			MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title( f36_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local DirectorLobbyPoseMembers = MapAndGameType --[[ @ 0]]
	local DirectorReadyButton = MapAndGameType.subscribeToModel --[[ @ 0]]
	local DirectorLobbyPoseMembersZM = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( DirectorLobbyPoseMembers, DirectorLobbyPoseMembersZM["lobbyRoot.lobbyNav"], function ( f37_arg0, f37_arg1 )
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorLobbyPoseMembers = MapAndGameType --[[ @ 0]]
	DirectorReadyButton = MapAndGameType.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembersZM = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( DirectorLobbyPoseMembers, DirectorLobbyPoseMembersZM["lobbyRoot.privateClient.isHost"], function ( f38_arg0, f38_arg1 )
		CoD.Menu.UpdateButtonShownState( f38_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DirectorLobbyPoseMembers = MapAndGameType --[[ @ 0]]
	DirectorReadyButton = MapAndGameType.subscribeToModel --[[ @ 0]]
	DirectorLobbyPoseMembersZM = Engine[@"getglobalmodel"]() --[[ @ 0]]
	DirectorReadyButton( DirectorLobbyPoseMembers, DirectorLobbyPoseMembersZM["lobbyRoot.gameClient.isHost"], function ( f39_arg0, f39_arg1 )
		CoD.Menu.UpdateButtonShownState( f39_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MapAndGameType:registerEventHandler( "gain_focus", function ( element, event )
		local f40_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f40_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f40_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f40_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MapAndGameType, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsZombies() and IsPartyLeader( controller ) then
			CoD.DirectorUtility.DirectorOpenOverlayWithCurrentMenuMode( menu, controller, "DirectorFindGameWZ" ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsZombies() and IsPartyLeader( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( MapAndGameType ) --[[ @ 0]]
	self.MapAndGameType = MapAndGameType --[[ @ 0]]
	
	DirectorReadyButton = CoD.DirectorReadyButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	DirectorReadyButton:setAlpha( 0 ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.PlayText:setText( LocalizeToUpperString( @"menu/ready" ) ) --[[ @ 0]]
	DirectorReadyButton:subscribeToGlobalModel( f1_arg1, "PerController", "ButtonBits." .. Enum[@"luibutton"][@"lui_key_xba_pscross"], function ( model )
		DirectorReadyButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectorReadyButton ) --[[ @ 0]]
	self.DirectorReadyButton = DirectorReadyButton --[[ @ 0]]
	
	DirectorLobbyPoseMembers = CoD.DirectorLobbyPoseMembers.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( DirectorLobbyPoseMembers ) --[[ @ 0]]
	self.DirectorLobbyPoseMembers = DirectorLobbyPoseMembers --[[ @ 0]]
	
	DirectorLobbyPoseMembersZM = CoD.DirectorLobbyPoseMembersZM.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 30, 30 ) --[[ @ 0]]
	DirectorLobbyPoseMembersZM:setAlpha( 0 ) --[[ @ 0]]
	DirectorLobbyPoseMembersZM:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewWidgetPublic", function ( model )
		local f44_local0 = model:get() --[[ @ 0]]
		if f44_local0 ~= nil then
			DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:changeFrameWidget( f44_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DirectorLobbyPoseMembersZM ) --[[ @ 0]]
	self.DirectorLobbyPoseMembersZM = DirectorLobbyPoseMembersZM --[[ @ 0]]
	
	local overheadNameContainer = CoD.DynamicContainerWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 1080 ) --[[ @ 0]]
	self:addElement( overheadNameContainer ) --[[ @ 0]]
	self.overheadNameContainer = overheadNameContainer --[[ @ 0]]
	
	local ZMLoadoutPreviewInfo = CoD.ZMLoadoutPreviewInfo.new( f1_arg0, f1_arg1, 0.5, 0.5, -506, 428, 1, 1, -333, -207 ) --[[ @ 0]]
	self:addElement( ZMLoadoutPreviewInfo ) --[[ @ 0]]
	self.ZMLoadoutPreviewInfo = ZMLoadoutPreviewInfo --[[ @ 0]]
	
	local TrialCountdown = CoD.TrialCountdownSmallWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -896, -614, 0, 0, 87, 132 ) --[[ @ 0]]
	self:addElement( TrialCountdown ) --[[ @ 0]]
	self.TrialCountdown = TrialCountdown --[[ @ 0]]
	
	local f1_local20 = HeaderWZDeploying --[[ @ 0]]
	local f1_local21 = HeaderWZDeploying.subscribeToModel --[[ @ 0]]
	local f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNetworkMode"], HeaderWZDeploying.CommonHeader.subtitle.StageTitle.__CommonHeader_subtitle_ScreenTitle_FullPath ) --[[ @ 0]]
	f1_local20 = CustomGamesButton --[[ @ 0]]
	f1_local21 = CustomGamesButton.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNav"], CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference ) --[[ @ 0]]
	f1_local20 = CustomGamesButton --[[ @ 0]]
	f1_local21 = CustomGamesButton.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNav"], CustomGamesButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String ) --[[ @ 0]]
	f1_local20 = MapAndGameType --[[ @ 0]]
	f1_local21 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNetworkMode"], MapAndGameType.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath ) --[[ @ 0]]
	f1_local20 = MapAndGameType --[[ @ 0]]
	f1_local21 = MapAndGameType.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNetworkMode"], MapAndGameType.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "WarzoneNotDeployed_isPC",
			condition = function ( menu, element, event )
				local f45_local0 = IsPC() --[[ @ 0]]
				if f45_local0 then
					f45_local0 = CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] ) --[[ @ 0]]
					if f45_local0 then
						f45_local0 = CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "lobbyRoot.publicLobby.stage", LuaEnum.PUBLIC_LOBBY.INVALID ) --[[ @ 0]]
					end
				end
				return f45_local0
			end
		},
		{
			stateName = "WarzoneNotDeployed",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] ) and CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "lobbyRoot.publicLobby.stage", LuaEnum.PUBLIC_LOBBY.INVALID )
			end
		},
		{
			stateName = "WarzoneDeploying_isPC",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] ) and IsPC()
			end
		},
		{
			stateName = "WarzoneDeploying",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.IsMainMode( f1_arg1, Enum[@"lobbymainmode"][@"lobby_mainmode_wz"] )
			end
		},
		{
			stateName = "Zombies_isPC",
			condition = function ( menu, element, event )
				return IsZombies() and IsPC()
			end
		},
		{
			stateName = "Zombies",
			condition = function ( menu, element, event )
				return IsZombies()
			end
		},
		{
			stateName = "NotWarzone_isPC",
			condition = function ( menu, element, event )
				return AlwaysTrue() and IsPC()
			end
		},
		{
			stateName = "NotWarzone",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	f1_local20 = self --[[ @ 0]]
	f1_local21 = self.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyMainMode"], function ( f53_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f53_arg0:get(),
			modelName = "lobbyRoot.lobbyMainMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local20 = self --[[ @ 0]]
	f1_local21 = self.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.lobbyNav"], function ( f54_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f54_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local20 = self --[[ @ 0]]
	f1_local21 = self.subscribeToModel --[[ @ 0]]
	f1_local22 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local21( f1_local20, f1_local22["lobbyRoot.publicLobby.stage"], function ( f55_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f55_arg0:get(),
			modelName = "lobbyRoot.publicLobby.stage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f56_arg2, f56_arg3, f56_arg4 )
		if CoD.BaseUtility.IsSelfInEitherState( self, "WarzoneNotDeployed", "WarzoneNotDeployed_isPC" ) and IsLobbyHost() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.WarzoneHostPlayButton ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		elseif not CoD.BaseUtility.IsSelfInEitherState( self, "WarzoneNotDeployed", "WarzoneNotDeployed_isPC" ) and IsLobbyHost() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.HomeOrPlayList ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		elseif not IsLobbyHost() then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.HomeOrPlayList ) --[[ @ 0]]
			ForceCheckDefaultPCFocus( element, f1_arg0, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "gameClientDataUpdate", function ( model )
		local f57_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "CharacterSelection", "clientUpdated", function ( model )
		local f58_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyNav", function ( model )
		local f59_local0 = self --[[ @ 0]]
		if CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.InitializeLootStreamTier( f1_arg1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneHostPlayButton.id = "WarzoneHostPlayButton" --[[ @ 0]]
	WarzoneClientPlayButton.id = "WarzoneClientPlayButton" --[[ @ 0]]
	DirectorTogglePartyFill.id = "DirectorTogglePartyFill" --[[ @ 0]]
	CustomGamesButton.id = "CustomGamesButton" --[[ @ 0]]
	f1_local10.id = "MapVote" --[[ @ 0]]
	if CoD.isPC then
		MapVotePC.id = "MapVotePC" --[[ @ 0]]
	end
	MapVoteZM.id = "MapVoteZM" --[[ @ 0]]
	MapAndGameType.id = "MapAndGameType" --[[ @ 0]]
	DirectorReadyButton.id = "DirectorReadyButton" --[[ @ 0]]
	DirectorLobbyPoseMembersZM.id = "DirectorLobbyPoseMembersZM" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local21 = self --[[ @ 0]]
	CoD.LobbyUtility.InitOverheadNamesPreLobby( f1_arg0, f1_arg1, overheadNameContainer ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.directorPublic.__resetProperties = function ( f60_arg0 )
	f60_arg0.MapVote:completeAnimation() --[[ @ 0]]
	f60_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
	f60_arg0.HeaderMP:completeAnimation() --[[ @ 0]]
	f60_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
	f60_arg0.CustomGamesButton:completeAnimation() --[[ @ 0]]
	f60_arg0.HeaderWZ:completeAnimation() --[[ @ 0]]
	f60_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
	f60_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
	f60_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
	f60_arg0.HeaderWZDeploying:completeAnimation() --[[ @ 0]]
	f60_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
	f60_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
	f60_arg0.TrialCountdown:completeAnimation() --[[ @ 0]]
	f60_arg0.DirectorReadyButton:completeAnimation() --[[ @ 0]]
	f60_arg0.overheadNameContainer:completeAnimation() --[[ @ 0]]
	f60_arg0.MapVote:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.MapVoteZM:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.HeaderMP:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.HeaderMP.CommonHeader.subtitle.subtitle:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.MapVotePC:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.CustomGamesButton:setAlpha( 0 ) --[[ @ 0]]
	f60_arg0.HeaderWZ:setAlpha( 0 ) --[[ @ 0]]
	f60_arg0.MapAndGameType:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.WarzoneHostPlayButton:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.DirectorTogglePartyFill:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.HeaderWZDeploying:setAlpha( 0 ) --[[ @ 0]]
	f60_arg0.DirectorLobbyPoseMembersZM:setAlpha( 0 ) --[[ @ 0]]
	f60_arg0.ZMLoadoutPreviewInfo:setLeftRight( 0.5, 0.5, -506, 428 ) --[[ @ 0]]
	f60_arg0.ZMLoadoutPreviewInfo:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.TrialCountdown:setAlpha( 1 ) --[[ @ 0]]
	f60_arg0.DirectorReadyButton:setAlpha( 0 ) --[[ @ 0]]
	f60_arg0.overheadNameContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.directorPublic.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	WarzoneNotDeployed_isPC = {
		DefaultClip = function ( f62_arg0, f62_arg1 )
			f62_arg0:__resetProperties() --[[ @ 0]]
			f62_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f62_arg0.HeaderWZ:completeAnimation() --[[ @ 0]]
			f62_arg0.HeaderWZ:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.HeaderWZ ) --[[ @ 0]]
			f62_arg0.HeaderMP:completeAnimation() --[[ @ 0]]
			f62_arg0.HeaderMP.CommonHeader.subtitle.subtitle:completeAnimation() --[[ @ 0]]
			f62_arg0.HeaderMP:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.HeaderMP.CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.HeaderMP ) --[[ @ 0]]
			f62_arg0.CustomGamesButton:completeAnimation() --[[ @ 0]]
			f62_arg0.CustomGamesButton:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.CustomGamesButton ) --[[ @ 0]]
			f62_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f62_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.MapVote ) --[[ @ 0]]
			f62_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
			f62_arg0.MapVotePC:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.MapVotePC ) --[[ @ 0]]
			f62_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f62_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.MapVoteZM ) --[[ @ 0]]
		end
	},
	WarzoneNotDeployed = {
		DefaultClip = function ( f63_arg0, f63_arg1 )
			f63_arg0:__resetProperties() --[[ @ 0]]
			f63_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f63_arg0.HeaderWZ:completeAnimation() --[[ @ 0]]
			f63_arg0.HeaderWZ:setAlpha( 1 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.HeaderWZ ) --[[ @ 0]]
			f63_arg0.HeaderMP:completeAnimation() --[[ @ 0]]
			f63_arg0.HeaderMP.CommonHeader.subtitle.subtitle:completeAnimation() --[[ @ 0]]
			f63_arg0.HeaderMP:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.HeaderMP.CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.HeaderMP ) --[[ @ 0]]
			f63_arg0.CustomGamesButton:completeAnimation() --[[ @ 0]]
			f63_arg0.CustomGamesButton:setAlpha( 1 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.CustomGamesButton ) --[[ @ 0]]
			f63_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f63_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.MapVote ) --[[ @ 0]]
			f63_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f63_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.MapVoteZM ) --[[ @ 0]]
		end
	},
	WarzoneDeploying_isPC = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f64_arg0.HeaderWZDeploying:completeAnimation() --[[ @ 0]]
			f64_arg0.HeaderWZDeploying:setAlpha( 1 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.HeaderWZDeploying ) --[[ @ 0]]
			f64_arg0.HeaderMP:completeAnimation() --[[ @ 0]]
			f64_arg0.HeaderMP:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.HeaderMP ) --[[ @ 0]]
			f64_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f64_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f64_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f64_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f64_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f64_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.MapVote ) --[[ @ 0]]
			f64_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
			f64_arg0.MapVotePC:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.MapVotePC ) --[[ @ 0]]
			f64_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f64_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.MapVoteZM ) --[[ @ 0]]
			f64_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f64_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.MapAndGameType ) --[[ @ 0]]
		end
	},
	WarzoneDeploying = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f65_arg0.HeaderWZDeploying:completeAnimation() --[[ @ 0]]
			f65_arg0.HeaderWZDeploying:setAlpha( 1 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.HeaderWZDeploying ) --[[ @ 0]]
			f65_arg0.HeaderMP:completeAnimation() --[[ @ 0]]
			f65_arg0.HeaderMP:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.HeaderMP ) --[[ @ 0]]
			f65_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f65_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f65_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f65_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f65_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f65_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.MapVote ) --[[ @ 0]]
			f65_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
			f65_arg0.MapVotePC:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.MapVotePC ) --[[ @ 0]]
			f65_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f65_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.MapVoteZM ) --[[ @ 0]]
			f65_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f65_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.MapAndGameType ) --[[ @ 0]]
		end
	},
	Zombies_isPC = {
		DefaultClip = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f66_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f66_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f66_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f66_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f66_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f66_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.MapVote ) --[[ @ 0]]
			f66_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
			f66_arg0.MapVotePC:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.MapVotePC ) --[[ @ 0]]
			f66_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f66_arg0.MapVoteZM:setAlpha( 1 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.MapVoteZM ) --[[ @ 0]]
			f66_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f66_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.MapAndGameType ) --[[ @ 0]]
			f66_arg0.DirectorReadyButton:completeAnimation() --[[ @ 0]]
			f66_arg0.DirectorReadyButton:setAlpha( 1 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DirectorReadyButton ) --[[ @ 0]]
			f66_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
			f66_arg0.DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:completeAnimation() --[[ @ 0]]
			f66_arg0.DirectorLobbyPoseMembersZM:setAlpha( 1 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.DirectorLobbyPoseMembersZM ) --[[ @ 0]]
			f66_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
			f66_arg0.ZMLoadoutPreviewInfo:setLeftRight( 0.5, 0.5, -769, 491 ) --[[ @ 0]]
			f66_arg0.ZMLoadoutPreviewInfo:setAlpha( 1 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.ZMLoadoutPreviewInfo ) --[[ @ 0]]
			f66_arg0.TrialCountdown:completeAnimation() --[[ @ 0]]
			f66_arg0.TrialCountdown:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.TrialCountdown ) --[[ @ 0]]
		end
	},
	Zombies = {
		DefaultClip = function ( f67_arg0, f67_arg1 )
			f67_arg0:__resetProperties() --[[ @ 0]]
			f67_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f67_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f67_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f67_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f67_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f67_arg0.MapVote:completeAnimation() --[[ @ 0]]
			f67_arg0.MapVote:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.MapVote ) --[[ @ 0]]
			f67_arg0.MapVotePC:completeAnimation() --[[ @ 0]]
			f67_arg0.MapVotePC:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.MapVotePC ) --[[ @ 0]]
			f67_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f67_arg0.MapVoteZM:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.MapVoteZM ) --[[ @ 0]]
			f67_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f67_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.MapAndGameType ) --[[ @ 0]]
			f67_arg0.DirectorReadyButton:completeAnimation() --[[ @ 0]]
			f67_arg0.DirectorReadyButton:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DirectorReadyButton ) --[[ @ 0]]
			f67_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
			f67_arg0.DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:completeAnimation() --[[ @ 0]]
			f67_arg0.DirectorLobbyPoseMembersZM:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.DirectorLobbyPoseMembersZM ) --[[ @ 0]]
			f67_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
			f67_arg0.ZMLoadoutPreviewInfo:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.ZMLoadoutPreviewInfo ) --[[ @ 0]]
			f67_arg0.TrialCountdown:completeAnimation() --[[ @ 0]]
			f67_arg0.TrialCountdown:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.TrialCountdown ) --[[ @ 0]]
		end
	},
	NotWarzone_isPC = {
		DefaultClip = function ( f68_arg0, f68_arg1 )
			f68_arg0:__resetProperties() --[[ @ 0]]
			f68_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f68_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f68_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f68_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f68_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f68_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f68_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.MapVoteZM ) --[[ @ 0]]
			f68_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f68_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.MapAndGameType ) --[[ @ 0]]
			f68_arg0.overheadNameContainer:completeAnimation() --[[ @ 0]]
			f68_arg0.overheadNameContainer:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.overheadNameContainer ) --[[ @ 0]]
			f68_arg0.TrialCountdown:completeAnimation() --[[ @ 0]]
			f68_arg0.TrialCountdown:setAlpha( 0 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.TrialCountdown ) --[[ @ 0]]
		end
	},
	NotWarzone = {
		DefaultClip = function ( f69_arg0, f69_arg1 )
			f69_arg0:__resetProperties() --[[ @ 0]]
			f69_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f69_arg0.WarzoneHostPlayButton:completeAnimation() --[[ @ 0]]
			f69_arg0.WarzoneHostPlayButton:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.WarzoneHostPlayButton ) --[[ @ 0]]
			f69_arg0.DirectorTogglePartyFill:completeAnimation() --[[ @ 0]]
			f69_arg0.DirectorTogglePartyFill:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.DirectorTogglePartyFill ) --[[ @ 0]]
			f69_arg0.MapVoteZM:completeAnimation() --[[ @ 0]]
			f69_arg0.MapVoteZM:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.MapVoteZM ) --[[ @ 0]]
			f69_arg0.MapAndGameType:completeAnimation() --[[ @ 0]]
			f69_arg0.MapAndGameType:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.MapAndGameType ) --[[ @ 0]]
			f69_arg0.overheadNameContainer:completeAnimation() --[[ @ 0]]
			f69_arg0.overheadNameContainer:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.overheadNameContainer ) --[[ @ 0]]
			f69_arg0.TrialCountdown:completeAnimation() --[[ @ 0]]
			f69_arg0.TrialCountdown:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.TrialCountdown ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.directorPublic.__onClose = function ( f70_arg0 )
	f70_arg0.HeaderWZ:close() --[[ @ 0]]
	f70_arg0.HeaderWZDeploying:close() --[[ @ 0]]
	f70_arg0.HeaderMP:close() --[[ @ 0]]
	f70_arg0.WarzoneHostPlayButton:close() --[[ @ 0]]
	f70_arg0.WarzoneClientPlayButton:close() --[[ @ 0]]
	f70_arg0.DirectorTogglePartyFill:close() --[[ @ 0]]
	f70_arg0.CustomGamesButton:close() --[[ @ 0]]
	f70_arg0.DirectorWarningMessage:close() --[[ @ 0]]
	f70_arg0.TopBar:close() --[[ @ 0]]
	f70_arg0.MapVote:close() --[[ @ 0]]
	f70_arg0.MapVotePC:close() --[[ @ 0]]
	f70_arg0.MapVoteZM:close() --[[ @ 0]]
	f70_arg0.MapAndGameType:close() --[[ @ 0]]
	f70_arg0.DirectorReadyButton:close() --[[ @ 0]]
	f70_arg0.DirectorLobbyPoseMembers:close() --[[ @ 0]]
	f70_arg0.DirectorLobbyPoseMembersZM:close() --[[ @ 0]]
	f70_arg0.overheadNameContainer:close() --[[ @ 0]]
	f70_arg0.ZMLoadoutPreviewInfo:close() --[[ @ 0]]
	f70_arg0.TrialCountdown:close() --[[ @ 0]]
end
 --[[ @ 0]]
