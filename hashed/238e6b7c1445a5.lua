-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/backgroundframes/genericmenuframe" ) --[[ @ 0]]
require( "x64:15ad87449c5d7553" ) --[[ @ 0]]
require( "ui/uieditor/widgets/helperwidgets/textwithbg" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_background" ) --[[ @ 0]]

CoD.TimelineEditor = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.TimelineEditor = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "TimelineEditor", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.InitGlobalModel( "demo.showFilmOptionsSidebar", false ) --[[ @ 0]]
	self:setClass( CoD.TimelineEditor ) --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BGBlur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BGBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	BGBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BGBlur ) --[[ @ 0]]
	self.BGBlur = BGBlur --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.9 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local BGTint = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BGTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BGTint:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( BGTint ) --[[ @ 0]]
	self.BGTint = BGTint --[[ @ 0]]
	
	local StartMenuBackground0 = CoD.StartMenu_Background.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	StartMenuBackground0:mergeStateConditions( {
		{
			stateName = "InGame",
			condition = function ( menu, element, event )
				return IsInGame()
			end
		}
	} ) --[[ @ 0]]
	StartMenuBackground0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( StartMenuBackground0 ) --[[ @ 0]]
	self.StartMenuBackground0 = StartMenuBackground0 --[[ @ 0]]
	
	local BlackBG = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BlackBG:setAlpha( 0 ) --[[ @ 0]]
	BlackBG:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BlackBG ) --[[ @ 0]]
	self.BlackBG = BlackBG --[[ @ 0]]
	
	local SegmentButtonList = LUI.UIList.new( f1_local1, f1_arg0, 28, 0, nil, false, false, false, false ) --[[ @ 0]]
	SegmentButtonList:setLeftRight( 0.5, 0.5, -859.5, 857.5 ) --[[ @ 0]]
	SegmentButtonList:setTopBottom( 0, 0, 88, 892 ) --[[ @ 0]]
	SegmentButtonList:setScale( 0.99, 0.99 ) --[[ @ 0]]
	SegmentButtonList:setWidgetType( CoD.SegmentButton ) --[[ @ 0]]
	SegmentButtonList:setHorizontalCount( 5 ) --[[ @ 0]]
	SegmentButtonList:setVerticalCount( 4 ) --[[ @ 0]]
	SegmentButtonList:setSpacing( 28 ) --[[ @ 0]]
	SegmentButtonList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	SegmentButtonList:setDataSource( "DemoSegments" ) --[[ @ 0]]
	SegmentButtonList:linkToElementModel( SegmentButtonList, "disabled", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ClipStartTime = SegmentButtonList --[[ @ 0]]
	local GenericMenuFrame0 = SegmentButtonList.subscribeToModel --[[ @ 0]]
	local ClipEndTime = Engine[@"getglobalmodel"]() --[[ @ 0]]
	GenericMenuFrame0( ClipStartTime, ClipEndTime["demo.showFilmOptionsSidebar"], function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipStartTime = SegmentButtonList --[[ @ 0]]
	GenericMenuFrame0 = SegmentButtonList.subscribeToModel --[[ @ 0]]
	ClipEndTime = Engine[@"getglobalmodel"]() --[[ @ 0]]
	GenericMenuFrame0( ClipStartTime, ClipEndTime["demo.segmentCount"], function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SegmentButtonList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if not IsTimelineEditorInMoveState( f1_arg0 ) then
			CoD.DemoUtility.TimelineEditorUpdateTimeline( self, element, f1_arg0, "gain_focus", f1_local1 ) --[[ @ 0]]
			TimelineEditorUpdateHighlightedSegmentModel( self, element, f1_arg0, "gain_focus", f1_local1 ) --[[ @ 0]]
		elseif IsTimelineEditorInMoveState( f1_arg0 ) then
			CoD.DemoUtility.TimelineEditorUpdateTimeline( self, element, f1_arg0, "gain_focus", f1_local1 ) --[[ @ 0]]
			TimelineEditorUpdateHighlightedSegmentModel( self, element, f1_arg0, "gain_focus", f1_local1 ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( f1_local1, f1_arg0 ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	SegmentButtonList:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if not IsTimelineEditorInMoveState( f1_arg0 ) then
			CoD.DemoUtility.TimelineEditorUpdateTimeline( self, element, f1_arg0, "lose_focus", f1_local1 ) --[[ @ 0]]
			TimelineEditorUpdateHighlightedSegmentModel( self, element, f1_arg0, "lose_focus", f1_local1 ) --[[ @ 0]]
		elseif IsTimelineEditorInMoveState( f1_arg0 ) then
			CoD.DemoUtility.TimelineEditorUpdateTimeline( self, element, f1_arg0, "lose_focus", f1_local1 ) --[[ @ 0]]
			TimelineEditorUpdateHighlightedSegmentModel( self, element, f1_arg0, "lose_focus", f1_local1 ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	SegmentButtonList:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( SegmentButtonList, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsDisabled( element, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.DemoUtility.TimelineEditorSetupMoveSegment( self, element, controller, menu ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		elseif not IsDisabled( element, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and IsTimelineEditorInMoveState( controller ) then
			CoD.DemoUtility.TimelineEditorPlaceSegment( self, element, controller, true, menu ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsDisabled( element, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_38851419C3D83BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsDisabled( element, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_7EDE476A5BD7AB24", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( SegmentButtonList, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and CanChangeSegmentTransition( element, controller ) and IsSegmentTransition( element, controller, Enum[@"democliptransition"][@"demo_clip_transition_none"] ) and not IsTimelineEditorInMoveState( controller ) then
			TimelineEditorChangeTransition( self, element, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		elseif SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and CanChangeSegmentTransition( element, controller ) and IsSegmentTransition( element, controller, Enum[@"democliptransition"][@"demo_clip_transition_fade"] ) and not IsTimelineEditorInMoveState( controller ) then
			TimelineEditorChangeTransition( self, element, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and CanChangeSegmentTransition( element, controller ) and IsSegmentTransition( element, controller, Enum[@"democliptransition"][@"demo_clip_transition_none"] ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_4E2C45A307C8FAB7", nil, nil ) --[[ @ 0]]
			return true
		elseif SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and CanChangeSegmentTransition( element, controller ) and IsSegmentTransition( element, controller, Enum[@"democliptransition"][@"demo_clip_transition_fade"] ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_5793A2303FCB2877", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( SegmentButtonList ) --[[ @ 0]]
	self.SegmentButtonList = SegmentButtonList --[[ @ 0]]
	
	GenericMenuFrame0 = CoD.GenericMenuFrame.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	GenericMenuFrame0.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_518BBCA8DA8FE171" ) ) --[[ @ 0]]
	GenericMenuFrame0:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			GenericMenuFrame0.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f13_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GenericMenuFrame0 ) --[[ @ 0]]
	self.GenericMenuFrame0 = GenericMenuFrame0 --[[ @ 0]]
	
	ClipStartTime = CoD.TextWithBg.new( f1_local1, f1_arg0, 0, 0, 59.5, 147.5, 1, 1, -155, -125 ) --[[ @ 0]]
	ClipStartTime.Bg:setAlpha( 0 ) --[[ @ 0]]
	ClipStartTime.Text:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	ClipStartTime.Text:setText( "" ) --[[ @ 0]]
	self:addElement( ClipStartTime ) --[[ @ 0]]
	self.ClipStartTime = ClipStartTime --[[ @ 0]]
	
	ClipEndTime = CoD.TextWithBg.new( f1_local1, f1_arg0, 1, 1, -150.5, -62.5, 1, 1, -155, -125 ) --[[ @ 0]]
	ClipEndTime.Bg:setAlpha( 0 ) --[[ @ 0]]
	ClipEndTime.Text:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	ClipEndTime.Text:setText( "" ) --[[ @ 0]]
	self:addElement( ClipEndTime ) --[[ @ 0]]
	self.ClipEndTime = ClipEndTime --[[ @ 0]]
	
	local EmptyTimelineEditorText = LUI.UIText.new( 0, 1, 0, 0, 0.5, 0.5, -19, 19 ) --[[ @ 0]]
	EmptyTimelineEditorText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_72C31F7CC245990E" ) ) --[[ @ 0]]
	EmptyTimelineEditorText:setTTF( "default" ) --[[ @ 0]]
	EmptyTimelineEditorText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	EmptyTimelineEditorText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( EmptyTimelineEditorText ) --[[ @ 0]]
	self.EmptyTimelineEditorText = EmptyTimelineEditorText --[[ @ 0]]
	
	local TimelineContainerController = LUI.UIImage.new( 0.5, 0.5, -858.5, 858.5, 0, 0, 976, 988 ) --[[ @ 0]]
	TimelineContainerController:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	TimelineContainerController:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( TimelineContainerController ) --[[ @ 0]]
	self.TimelineContainerController = TimelineContainerController --[[ @ 0]]
	
	local TimeLine = LUI.UIImage.new( 0.5, 0.5, -861, 861, 0, 0, 900, 1010 ) --[[ @ 0]]
	TimeLine:setAlpha( 0.05 ) --[[ @ 0]]
	TimeLine:setImage( RegisterImage( @"uie_ui_theater_timelinemeter" ) ) --[[ @ 0]]
	TimeLine:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_tile_scroll_normal" ) ) --[[ @ 0]]
	TimeLine:setShaderVector( 0, 2, 1, 0, 0 ) --[[ @ 0]]
	TimeLine:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( TimeLine ) --[[ @ 0]]
	self.TimeLine = TimeLine --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return not SegmentCountGreaterThan( f1_arg0, 0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local14 = self --[[ @ 0]]
	local f1_local15 = self.subscribeToModel --[[ @ 0]]
	local f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local15( f1_local14, f1_local16["demo.segmentCount"], function ( f15_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f15_arg0:get(),
			modelName = "demo.segmentCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local15 = self.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local15( f1_local14, f1_local16["demo.showFilmOptionsSidebar"], function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local15 = self.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local15( f1_local14, f1_local16["demo.segmentCount"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "ui_keyboard_input", function ( self, event )
		local f18_local0 = nil --[[ @ 0]]
		TimelineEditorKeyboardComplete( self, self, f1_arg0, event ) --[[ @ 0]]
		if not f18_local0 then
			f18_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if not IsTimelineEditorInMoveState( controller ) then
			GoBack( self, controller ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			return true
		elseif IsTimelineEditorInMoveState( controller ) then
			CoD.DemoUtility.TimelineEditorPlaceSegment( self, element, controller, false, menu ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		elseif IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/cancel", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) then
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_start"], nil, function ( element, menu, controller, model )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			SetGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) --[[ @ 0]]
			TimelineEditorFilmOptions( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"menu/options", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			TimelineEditorPreviewClip( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if SegmentCountGreaterThan( controller, 0 ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.showFilmOptionsSidebar" ) and not IsTimelineEditorInMoveState( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"menu/preview_clip", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	SegmentButtonList.id = "SegmentButtonList" --[[ @ 0]]
	GenericMenuFrame0:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		GenericMenuFrame0.id = "GenericMenuFrame0" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = SegmentButtonList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local15 = self --[[ @ 0]]
	CoD.DemoUtility.TimelineEditorPostLoad( self, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.TimelineEditor.__resetProperties = function ( f27_arg0 )
	f27_arg0.EmptyTimelineEditorText:completeAnimation() --[[ @ 0]]
	f27_arg0.ClipEndTime:completeAnimation() --[[ @ 0]]
	f27_arg0.ClipStartTime:completeAnimation() --[[ @ 0]]
	f27_arg0.SegmentButtonList:completeAnimation() --[[ @ 0]]
	f27_arg0.EmptyTimelineEditorText:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.ClipEndTime:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.ClipStartTime:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.SegmentButtonList:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.TimelineEditor.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f28_arg0.EmptyTimelineEditorText:completeAnimation() --[[ @ 0]]
			f28_arg0.EmptyTimelineEditorText:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.EmptyTimelineEditorText ) --[[ @ 0]]
		end
	},
	Empty = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f29_arg0.SegmentButtonList:completeAnimation() --[[ @ 0]]
			f29_arg0.SegmentButtonList:setAlpha( 0.4 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.SegmentButtonList ) --[[ @ 0]]
			f29_arg0.ClipStartTime:completeAnimation() --[[ @ 0]]
			f29_arg0.ClipStartTime:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.ClipStartTime ) --[[ @ 0]]
			f29_arg0.ClipEndTime:completeAnimation() --[[ @ 0]]
			f29_arg0.ClipEndTime:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.ClipEndTime ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.TimelineEditor.__onClose = function ( f30_arg0 )
	f30_arg0.StartMenuBackground0:close() --[[ @ 0]]
	f30_arg0.SegmentButtonList:close() --[[ @ 0]]
	f30_arg0.GenericMenuFrame0:close() --[[ @ 0]]
	f30_arg0.ClipStartTime:close() --[[ @ 0]]
	f30_arg0.ClipEndTime:close() --[[ @ 0]]
end
 --[[ @ 0]]
