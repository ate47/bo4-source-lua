-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:4d567dad3d4f87ba" ) --[[ @ 0]]
require( "x64:60810ae5389ec6d7" ) --[[ @ 0]]
require( "x64:3431a5037dc89b6f" ) --[[ @ 0]]
require( "x64:13e4f33ba044e8d1" ) --[[ @ 0]]

CoD.BountyHunterBuy = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.BountyHunterBuy = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "BountyHunterBuy", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BountyHunterUtility.SetupBountyHunterModels( self, f1_local1, f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.SetAsPriority( f1_local1, f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.BountyHunterBuy ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BountyHunterBuyInternal = CoD.BountyHunterBuyInternal.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BountyHunterBuyInternal:linkToElementModel( self, nil, false, function ( model )
		BountyHunterBuyInternal:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( BountyHunterBuyInternal ) --[[ @ 0]]
	self.BountyHunterBuyInternal = BountyHunterBuyInternal --[[ @ 0]]
	
	local BountyHunterRadialTimer = CoD.BountyHunterRadialTimer.new( f1_local1, f1_arg0, 0.5, 0.5, 828, 978, 0.5, 0.5, -560, -410 ) --[[ @ 0]]
	self:addElement( BountyHunterRadialTimer ) --[[ @ 0]]
	self.BountyHunterRadialTimer = BountyHunterRadialTimer --[[ @ 0]]
	
	local BountyHunterOpenPrompt = CoD.BountyHunterOpenPrompt.new( f1_local1, f1_arg0, 0.5, 0.5, -150, 150, 0.5, 0.5, 255, 285 ) --[[ @ 0]]
	BountyHunterOpenPrompt:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( BountyHunterOpenPrompt ) --[[ @ 0]]
	self.BountyHunterOpenPrompt = BountyHunterOpenPrompt --[[ @ 0]]
	
	local PCBackButton = nil --[[ @ 0]]
	
	PCBackButton = CoD.PC_BountyHunterBuy_BackButton.new( f1_local1, f1_arg0, 0.5, 0.5, -920, -720, 1, 1, -70, -10 ) --[[ @ 0]]
	PCBackButton.Button.ButtonContainer.Title:setText( LocalizeToUpperString( @"hash_66C253CF816B40B5" ) ) --[[ @ 0]]
	local f1_local6 = PCBackButton --[[ @ 0]]
	local f1_local7 = PCBackButton.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]], function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PCBackButton:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( PCBackButton, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not IsVisibilityBitSet( controller, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and not IsDemoPlaying() then
			CoD.BountyHunterUtility.ToggleBuyMenuVisible( self, controller, self.BountyHunterBuyInternal, self.BountyHunterOpenPrompt, self.PCBackButton ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsVisibilityBitSet( controller, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PCBackButton ) --[[ @ 0]]
	self.PCBackButton = PCBackButton --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Spectating",
			condition = function ( menu, element, event )
				local f7_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg0, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) --[[ @ 0]]
				if not f7_local0 then
					f7_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg0, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) --[[ @ 0]]
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]], function ( f8_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f9_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.LastInput, function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.bountyUndoValid"], function ( f13_arg0, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if not IsVisibilityBitSet( controller, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and not IsMouseOrKeyboard( controller ) and not IsDemoPlaying() then
			CoD.BountyHunterUtility.ToggleBuyMenuVisible( self, controller, self.BountyHunterBuyInternal, self.BountyHunterOpenPrompt, self.PCBackButton ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsVisibilityBitSet( controller, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and not IsMouseOrKeyboard( controller ) and not IsDemoPlaying() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_778D439E1B360368", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if IsBooleanDvarSet( "ui_bounty_undo_enabled" ) and CoD.ModelUtility.IsModelValueTrue( controller, "hudItems.bountyUndoValid" ) then
			SendOwnMenuResponse( menu, controller, "undo_last_purchase" ) --[[ @ 0]]
			SetControllerModelValue( controller, "hudItems.bountyUndoValid", false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsBooleanDvarSet( "ui_bounty_undo_enabled" ) and CoD.ModelUtility.IsModelValueTrue( controller, "hudItems.bountyUndoValid" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_46B7E381CB72DD91", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 750 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f18_arg0, f18_arg1, f18_arg2, f18_arg3 )
		local f18_local0 = self --[[ @ 0]]
		if not IsCodCaster( f18_arg1 ) and IsPC() then
			LockInput( self, f18_arg1, true ) --[[ @ 0]]
			CoD.PCUtility.LockUIShortcutInput( f18_arg2, f18_arg1 ) --[[ @ 0]]
		elseif not IsCodCaster( f18_arg1 ) then
			LockInput( self, f18_arg1, true ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		if IsPC() then
			CoD.BaseUtility.CloseOccludingMenus( self ) --[[ @ 0]]
			LockInput( self, f1_arg0, false ) --[[ @ 0]]
			CoD.BaseUtility.ClearBlur( f1_arg0 ) --[[ @ 0]]
			CoD.PCWidgetUtility.CloseChat( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.PCUtility.UnlockUIShortcutInput( f1_local1, f1_arg0 ) --[[ @ 0]]
		else
			CoD.BaseUtility.CloseOccludingMenus( self ) --[[ @ 0]]
			LockInput( self, f1_arg0, false ) --[[ @ 0]]
			CoD.BaseUtility.ClearBlur( f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	BountyHunterBuyInternal.id = "BountyHunterBuyInternal" --[[ @ 0]]
	if CoD.isPC then
		PCBackButton.id = "PCBackButton" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = BountyHunterBuyInternal --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local7 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.PrepareHeistBuyMenuButtons( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.BountyHunterBuy.__resetProperties = function ( f21_arg0 )
	f21_arg0.BountyHunterBuyInternal:completeAnimation() --[[ @ 0]]
	f21_arg0.BountyHunterBuyInternal:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BountyHunterBuy.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Spectating = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.BountyHunterBuyInternal:completeAnimation() --[[ @ 0]]
			f23_arg0.BountyHunterBuyInternal:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.BountyHunterBuyInternal ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BountyHunterBuy.__onClose = function ( f24_arg0 )
	f24_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f24_arg0.BountyHunterBuyInternal:close() --[[ @ 0]]
	f24_arg0.BountyHunterRadialTimer:close() --[[ @ 0]]
	f24_arg0.BountyHunterOpenPrompt:close() --[[ @ 0]]
	f24_arg0.PCBackButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
