-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]
require( "x64:51de9b3de837a34c" ) --[[ @ 0]]
require( "x64:490bfa8fd4b71a33" ) --[[ @ 0]]
require( "x64:22e06eec4ea38539" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalscrollbar" ) --[[ @ 0]]

CoD.MultiItemPickupKBM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.MultiItemPickupKBM.__defaultWidth = 1920 --[[ @ 0]]
CoD.MultiItemPickupKBM.__defaultHeight = 1080 --[[ @ 0]]
CoD.MultiItemPickupKBM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setUseCylinderMapping( false ) --[[ @ 0]]
	self:setClass( CoD.MultiItemPickupKBM ) --[[ @ 0]]
	self.id = "MultiItemPickupKBM" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local emptyFocusable = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	emptyFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( emptyFocusable, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.ModelUtility.SetGlobalDatasourceModelValueToEnum( controller, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1E16E7DEBC8823D8"] ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	local focusBlocker = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0.5, 0.5, -468, 168, 0.5, 0.5, -160, 160 ) --[[ @ 0]]
	self:addElement( focusBlocker ) --[[ @ 0]]
	self.focusBlocker = focusBlocker --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0.5, 0.5, -468, 168, 0.5, 0.5, -160, 160 ) --[[ @ 0]]
	Blur:setRGB( 0.08, 0.08, 0.08 ) --[[ @ 0]]
	Blur:setAlpha( 0.7 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local GridBacking = CoD.WeaponPickupPrompt_Backing.new( f1_arg0, f1_arg1, 0.5, 0.5, -468, 168, 0.5, 0.5, -160, 160 ) --[[ @ 0]]
	GridBacking:setRGB( 0.08, 0.08, 0.08 ) --[[ @ 0]]
	self:addElement( GridBacking ) --[[ @ 0]]
	self.GridBacking = GridBacking --[[ @ 0]]
	
	local ItemHeader = CoD.MultiItemPickupWaypoint_Header.new( f1_arg0, f1_arg1, 0.5, 0.5, -300, 0, 0.5, 0.5, 120, 160 ) --[[ @ 0]]
	self:addElement( ItemHeader ) --[[ @ 0]]
	self.ItemHeader = ItemHeader --[[ @ 0]]
	
	local ItemPickupList = LUI.UIList.new( f1_arg0, f1_arg1, -15, 100, nil, false, false, false, true ) --[[ @ 0]]
	ItemPickupList:setLeftRight( 0.5, 0.5, -439.5, 139.5 ) --[[ @ 0]]
	ItemPickupList:setTopBottom( 0.5, 0.5, -159, 120 ) --[[ @ 0]]
	ItemPickupList:setWidgetType( CoD.MultiItemPickupWaypointItem ) --[[ @ 0]]
	ItemPickupList:setHorizontalCount( 4 ) --[[ @ 0]]
	ItemPickupList:setVerticalCount( 4 ) --[[ @ 0]]
	ItemPickupList:setSpacing( -15 ) --[[ @ 0]]
	ItemPickupList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	ItemPickupList:setVerticalScrollbar( CoD.verticalScrollbar ) --[[ @ 0]]
	ItemPickupList:setDataSource( "MultiItemPickup" ) --[[ @ 0]]
	ItemPickupList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.HUDUtility.SetAsCurrentMultiItemPickup( f1_arg1, element ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	ItemPickupList:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ItemPickupList, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.WZUtility.SendInventoryPickUpNotify( controller, element ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	ItemPickupList:subscribeToGlobalModel( f1_arg1, "MultiItemPickup", "status", function ( model )
		local f9_local0 = ItemPickupList --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) then
			CoD.BaseUtility.EnableNavigation( f9_local0 ) --[[ @ 0]]
		else
			CoD.BaseUtility.DisableNavigation( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ItemPickupList:subscribeToGlobalModel( f1_arg1, "PerController", "scriptNotify", function ( model )
		local f10_local0 = ItemPickupList --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_415EF5E7734C15F5" ) then
			CoD.WZUtility.SendInventoryPickUpNotify( f1_arg1, f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ItemPickupList ) --[[ @ 0]]
	self.ItemPickupList = ItemPickupList --[[ @ 0]]
	
	ItemHeader:linkToElementModel( ItemPickupList, nil, false, function ( model )
		ItemHeader:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				local f12_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) --[[ @ 0]]
				if f12_local0 then
					if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_669C28E2FCA82769"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_523CD9BAB9B9F4C8"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_47B52A87BC9AA4C7"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_749AC9E07ED19EB6"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_6668F0686232679"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_33AEEAA452536E6E"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_5A77EB9347BE4DFF"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) then
						f12_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
						if f12_local0 then
							f12_local0 = AlwaysFalse() --[[ @ 0]]
						end
					else
						f12_local0 = false --[[ @ 0]]
					end
				end
				return f12_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = DataSources.MultiItemPickup.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.status, function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "status"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_669C28E2FCA82769"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_669C28E2FCA82769"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_523CD9BAB9B9F4C8"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_523CD9BAB9B9F4C8"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_47B52A87BC9AA4C7"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_47B52A87BC9AA4C7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_749AC9E07ED19EB6"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_749AC9E07ED19EB6"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_6668F0686232679"]], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_6668F0686232679"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_33AEEAA452536E6E"]], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_33AEEAA452536E6E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5A77EB9347BE4DFF"]], function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5A77EB9347BE4DFF"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"]], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_624E603C16FCC38F"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"]], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]], function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]], function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f31_arg0, f31_arg1 )
		f31_arg1.menu = f31_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f31_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.LastInput, function ( f32_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f32_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = DataSources.MultiItemPickup.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.status, function ( f33_arg0, f33_arg1 )
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "input_source_changed", function ( self, event )
		local f34_local0 = nil --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) and not IsInDefaultState( self ) then
			LockInput( self, f1_arg1, true ) --[[ @ 0]]
			SetAllowCursorMovement( f1_arg0, true ) --[[ @ 0]]
		elseif not IsMouseOrKeyboard( f1_arg1 ) and not IsInDefaultState( self ) then
			LockInput( self, f1_arg1, false ) --[[ @ 0]]
			SetAllowCursorMovement( f1_arg0, false ) --[[ @ 0]]
		end
		if not f34_local0 then
			f34_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f34_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ESCAPE", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) then
			CoD.ModelUtility.SetGlobalDatasourceModelValueToEnum( controller, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_1E16E7DEBC8823D8"] ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "MultiItemPickup", "status", Enum[@"hash_163CDAE6010C493"][@"hash_5C9FADA56582F80F"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ESCAPE" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f37_arg2, f37_arg3, f37_arg4 )
		if CoD.BaseUtility.IsSelfInState( self, "Active" ) then
			LockInput( self, controller, true ) --[[ @ 0]]
			SetAllowCursorMovement( f1_arg0, true ) --[[ @ 0]]
		else
			LockInput( self, controller, false ) --[[ @ 0]]
			SetAllowCursorMovement( f1_arg0, false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	focusBlocker.id = "focusBlocker" --[[ @ 0]]
	ItemPickupList.id = "ItemPickupList" --[[ @ 0]]
	self.__defaultFocus = ItemPickupList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local8 = self --[[ @ 0]]
	DisableKeyboardNavigationByElement( emptyFocusable ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( focusBlocker ) --[[ @ 0]]
	f1_local8 = ItemPickupList --[[ @ 0]]
	CoD.PCUtility.ActivateListPCSelectionBehavior( f1_local8 ) --[[ @ 0]]
	CoD.GridAndListUtility.AddListUpDownNavigation( f1_arg0, f1_local8, f1_arg1 ) --[[ @ 0]]
	CoD.GridAndListUtility.AddActiveLeftRightNavigation( f1_arg0, f1_local8, f1_arg1, false ) --[[ @ 0]]
	SetElementProperty( self.ItemPickupList, "__isForKBM", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.MultiItemPickupKBM.__resetProperties = function ( f38_arg0 )
	f38_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
	f38_arg0.GridBacking:completeAnimation() --[[ @ 0]]
	f38_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
	f38_arg0.Blur:completeAnimation() --[[ @ 0]]
	f38_arg0.emptyFocusable:completeAnimation() --[[ @ 0]]
	f38_arg0.focusBlocker:completeAnimation() --[[ @ 0]]
	f38_arg0.ItemHeader:setAlpha( 1 ) --[[ @ 0]]
	f38_arg0.GridBacking:setAlpha( 1 ) --[[ @ 0]]
	f38_arg0.ItemPickupList:setAlpha( 1 ) --[[ @ 0]]
	f38_arg0.Blur:setAlpha( 0.7 ) --[[ @ 0]]
	f38_arg0.emptyFocusable:setAlpha( 1 ) --[[ @ 0]]
	f38_arg0.focusBlocker:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.MultiItemPickupKBM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f39_arg0.emptyFocusable:completeAnimation() --[[ @ 0]]
			f39_arg0.emptyFocusable:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.emptyFocusable ) --[[ @ 0]]
			f39_arg0.focusBlocker:completeAnimation() --[[ @ 0]]
			f39_arg0.focusBlocker:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.focusBlocker ) --[[ @ 0]]
			f39_arg0.Blur:completeAnimation() --[[ @ 0]]
			f39_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.Blur ) --[[ @ 0]]
			f39_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f39_arg0.GridBacking:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.GridBacking ) --[[ @ 0]]
			f39_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f39_arg0.ItemHeader:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.ItemHeader ) --[[ @ 0]]
			f39_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f39_arg0.ItemPickupList:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.ItemPickupList ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f40_arg0.emptyFocusable:completeAnimation() --[[ @ 0]]
			f40_arg0.emptyFocusable:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.emptyFocusable ) --[[ @ 0]]
			f40_arg0.Blur:completeAnimation() --[[ @ 0]]
			f40_arg0.Blur:setAlpha( 0.7 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.Blur ) --[[ @ 0]]
			f40_arg0.GridBacking:completeAnimation() --[[ @ 0]]
			f40_arg0.GridBacking:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.GridBacking ) --[[ @ 0]]
			f40_arg0.ItemHeader:completeAnimation() --[[ @ 0]]
			f40_arg0.ItemHeader:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ItemHeader ) --[[ @ 0]]
			f40_arg0.ItemPickupList:completeAnimation() --[[ @ 0]]
			f40_arg0.ItemPickupList:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ItemPickupList ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.MultiItemPickupKBM.__onClose = function ( f41_arg0 )
	f41_arg0.ItemHeader:close() --[[ @ 0]]
	f41_arg0.emptyFocusable:close() --[[ @ 0]]
	f41_arg0.focusBlocker:close() --[[ @ 0]]
	f41_arg0.GridBacking:close() --[[ @ 0]]
	f41_arg0.ItemPickupList:close() --[[ @ 0]]
end
 --[[ @ 0]]
