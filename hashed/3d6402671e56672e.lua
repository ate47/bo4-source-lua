-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:2b1020a5873ba1d6" ) --[[ @ 0]]

CoD.ScoreInfoCTF = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ScoreInfoCTF.__defaultWidth = 222 --[[ @ 0]]
CoD.ScoreInfoCTF.__defaultHeight = 122 --[[ @ 0]]
CoD.ScoreInfoCTF.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	DataSourceHelperGetModel( f1_arg1, "CTFLevelInfo" ) --[[ @ 0]]
	self:setClass( CoD.ScoreInfoCTF ) --[[ @ 0]]
	self.id = "ScoreInfoCTF" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0.5, 0.5, -101.5, 101.5, 0.5, 0.5, -27, 27 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local Panel = LUI.UIImage.new( 0.5, 0.5, -101.5, 101.5, 0.5, 0.5, -27, 27 ) --[[ @ 0]]
	Panel:setRGB( 0.18, 0.17, 0.16 ) --[[ @ 0]]
	Panel:setAlpha( 0.94 ) --[[ @ 0]]
	self:addElement( Panel ) --[[ @ 0]]
	self.Panel = Panel --[[ @ 0]]
	
	local LEDFull = LUI.UIImage.new( 0.5, 0.5, -110.5, 111.5, 0.5, 0.5, -79, 43 ) --[[ @ 0]]
	LEDFull:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LEDFull:setAlpha( 0.2 ) --[[ @ 0]]
	LEDFull:setImage( RegisterImage( @"uie_ui_hud_core_objective_widget_led_screen_03" ) ) --[[ @ 0]]
	self:addElement( LEDFull ) --[[ @ 0]]
	self.LEDFull = LEDFull --[[ @ 0]]
	
	local frame = LUI.UIImage.new( 0.5, 0.5, -104.5, 104.5, 0.5, 0.5, -30, 30 ) --[[ @ 0]]
	frame:setYRot( 180 ) --[[ @ 0]]
	frame:setImage( RegisterImage( @"uie_ui_hud_core_frame_stretchable" ) ) --[[ @ 0]]
	frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( frame ) --[[ @ 0]]
	self.frame = frame --[[ @ 0]]
	
	local Divider = LUI.UIImage.new( 0.5, 0.5, -100, 100, 0.5, 0.5, -2.5, 2.5 ) --[[ @ 0]]
	Divider:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Divider:setImage( RegisterImage( @"hash_5D16B33E79A589C5" ) ) --[[ @ 0]]
	Divider:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_feather_blend" ) ) --[[ @ 0]]
	self:addElement( Divider ) --[[ @ 0]]
	self.Divider = Divider --[[ @ 0]]
	
	local flagStateEnemy = CoD.ScoreInfoCTF_FlagState.new( f1_arg0, f1_arg1, 0, 0, 37, 207, 0.5, 0.5, 2, 24 ) --[[ @ 0]]
	flagStateEnemy:mergeStateConditions( {
		{
			stateName = "Home",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "CTFLevelInfo.flagStateAxis", 0 )
			end
		},
		{
			stateName = "Away",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "CTFLevelInfo.flagStateAxis", 1 )
			end
		}
	} ) --[[ @ 0]]
	local friendlyflag = flagStateEnemy --[[ @ 0]]
	local flagStateFriendly = flagStateEnemy.subscribeToModel --[[ @ 0]]
	local enemyflag = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	flagStateFriendly( friendlyflag, enemyflag["CTFLevelInfo.flagStateAxis"], function ( f4_arg0 )
		f1_arg0:updateElementState( flagStateEnemy, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "CTFLevelInfo.flagStateAxis"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	flagStateEnemy:subscribeToGlobalModel( f1_arg1, "CTFLevelInfo", "flagCarrierAxis", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			flagStateEnemy.FlagStateText:setText( GetClientName( f1_arg1, f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( flagStateEnemy ) --[[ @ 0]]
	self.flagStateEnemy = flagStateEnemy --[[ @ 0]]
	
	flagStateFriendly = CoD.ScoreInfoCTF_FlagState.new( f1_arg0, f1_arg1, 0, 0, 37, 207, 0.5, 0.5, -24, -2 ) --[[ @ 0]]
	flagStateFriendly:mergeStateConditions( {
		{
			stateName = "Home",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "CTFLevelInfo.flagStateAllies", 0 )
			end
		},
		{
			stateName = "Away",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "CTFLevelInfo.flagStateAllies", 1 )
			end
		}
	} ) --[[ @ 0]]
	enemyflag = flagStateFriendly --[[ @ 0]]
	friendlyflag = flagStateFriendly.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	friendlyflag( enemyflag, f1_local10["CTFLevelInfo.flagStateAllies"], function ( f8_arg0 )
		f1_arg0:updateElementState( flagStateFriendly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "CTFLevelInfo.flagStateAllies"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	flagStateFriendly:subscribeToGlobalModel( f1_arg1, "CTFLevelInfo", "flagCarrierAllies", function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			flagStateFriendly.FlagStateText:setText( GetClientName( f1_arg1, f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( flagStateFriendly ) --[[ @ 0]]
	self.flagStateFriendly = flagStateFriendly --[[ @ 0]]
	
	friendlyflag = LUI.UIImage.new( 0.5, 0.5, -97, -77, 0.5, 0.5, -23, -3 ) --[[ @ 0]]
	friendlyflag.__Color = function ()
		friendlyflag:setRGB( GetColorBlindSafeColorFromBase( "FriendlyBlue", f1_arg1, ColorSet.FriendlyBlue.r, ColorSet.FriendlyBlue.g, ColorSet.FriendlyBlue.b ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	friendlyflag.__Color() --[[ @ 0]]
	friendlyflag:setImage( RegisterImage( @"uie_ui_icon_waypoints_ctf_flag" ) ) --[[ @ 0]]
	self:addElement( friendlyflag ) --[[ @ 0]]
	self.friendlyflag = friendlyflag --[[ @ 0]]
	
	enemyflag = LUI.UIImage.new( 0.5, 0.5, -97, -77, 0.5, 0.5, 2.5, 22.5 ) --[[ @ 0]]
	enemyflag.__Color = function ()
		enemyflag:setRGB( GetColorBlindSafeColorFromBase( "EnemyOrange_Base", f1_arg1, ColorSet.EnemyOrange_Base.r, ColorSet.EnemyOrange_Base.g, ColorSet.EnemyOrange_Base.b ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	enemyflag.__Color() --[[ @ 0]]
	enemyflag:setImage( RegisterImage( @"uie_ui_icon_waypoints_ctf_flag" ) ) --[[ @ 0]]
	self:addElement( enemyflag ) --[[ @ 0]]
	self.enemyflag = enemyflag --[[ @ 0]]
	
	local f1_local11 = friendlyflag --[[ @ 0]]
	f1_local10 = friendlyflag.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["profile.colorblindMode"], friendlyflag.__Color ) --[[ @ 0]]
	f1_local11 = enemyflag --[[ @ 0]]
	f1_local10 = enemyflag.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["profile.colorblindMode"], enemyflag.__Color ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "CodCaster",
			condition = function ( menu, element, event )
				return IsCodCaster( f1_arg1 )
			end
		},
		{
			stateName = "Axis",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "factions.actualTeam", Enum[@"team_t"][@"hash_33F83D7CE4BD7B68"] )
			end
		}
	} ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["factions.isCoDCaster"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12["factions.actualTeam"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "factions.actualTeam"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ScoreInfoCTF.__resetProperties = function ( f16_arg0 )
	f16_arg0.flagStateEnemy:completeAnimation() --[[ @ 0]]
	f16_arg0.flagStateFriendly:completeAnimation() --[[ @ 0]]
	f16_arg0.flagStateEnemy:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.flagStateFriendly:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ScoreInfoCTF.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	CodCaster = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.flagStateEnemy:completeAnimation() --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.flagStateEnemy ) --[[ @ 0]]
			f18_arg0.flagStateFriendly:completeAnimation() --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.flagStateFriendly ) --[[ @ 0]]
		end
	},
	Axis = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f19_arg0.flagStateEnemy:completeAnimation() --[[ @ 0]]
			f19_arg0.flagStateEnemy:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.flagStateEnemy ) --[[ @ 0]]
			f19_arg0.flagStateFriendly:completeAnimation() --[[ @ 0]]
			f19_arg0.flagStateFriendly:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.flagStateFriendly ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ScoreInfoCTF.__onClose = function ( f20_arg0 )
	f20_arg0.flagStateEnemy:close() --[[ @ 0]]
	f20_arg0.flagStateFriendly:close() --[[ @ 0]]
	f20_arg0.friendlyflag:close() --[[ @ 0]]
	f20_arg0.enemyflag:close() --[[ @ 0]]
end
 --[[ @ 0]]
