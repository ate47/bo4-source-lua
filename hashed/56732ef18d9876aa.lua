-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:5209a8467f45b10a" ) --[[ @ 0]]
require( "x64:220acfdece814a2a" ) --[[ @ 0]]
require( "x64:3ff2ee65fc4b9370" ) --[[ @ 0]]

CoD.ScoreboardWidgetWZ = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ScoreboardWidgetWZ.__defaultWidth = 1920 --[[ @ 0]]
CoD.ScoreboardWidgetWZ.__defaultHeight = 1080 --[[ @ 0]]
CoD.ScoreboardWidgetWZ.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.ScoreboardUtility.SetScoreboardUIModels( f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg1, "CodCaster" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg1, "CodCaster.showCodCasterScoreboard", false ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_MAP ) --[[ @ 0]]
	SetElementProperty( f1_arg0, "__ignoreContextualMenu", true ) --[[ @ 0]]
	self:setUseCylinderMapping( false ) --[[ @ 0]]
	self:setClass( CoD.ScoreboardWidgetWZ ) --[[ @ 0]]
	self.id = "ScoreboardWidgetWZ" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local WZTeamScoreboard = nil --[[ @ 0]]
	
	WZTeamScoreboard = CoD.StartMenu_WZTeamScoreboard.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	WZTeamScoreboard:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( WZTeamScoreboard ) --[[ @ 0]]
	self.WZTeamScoreboard = WZTeamScoreboard --[[ @ 0]]
	
	local ScoreboardGameMap = CoD.ScoreboardMapWZ.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( ScoreboardGameMap ) --[[ @ 0]]
	self.ScoreboardGameMap = ScoreboardGameMap --[[ @ 0]]
	
	local Background = nil --[[ @ 0]]
	
	Background = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:setRGB( 0.04, 0.04, 0.04 ) --[[ @ 0]]
	Background:setAlpha( 0.4 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local ScoreboardInventory = nil --[[ @ 0]]
	
	ScoreboardInventory = CoD.StartMenu_Inventory.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( ScoreboardInventory ) --[[ @ 0]]
	self.ScoreboardInventory = ScoreboardInventory --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "InventoryVisiblePC",
			condition = function ( menu, element, event )
				local f2_local0 = IsVisibilityBitSet( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
				if f2_local0 then
					f2_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_INVENTORY ) --[[ @ 0]]
					if f2_local0 then
						f2_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f2_local0
			end
		},
		{
			stateName = "MapVisiblePC",
			condition = function ( menu, element, event )
				local f3_local0 = IsVisibilityBitSet( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_MAP ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
						if f3_local0 then
							f3_local0 = not IsGametypeSettingsValue( "wzHardcore", 1 ) --[[ @ 0]]
						end
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "ScoreboardVisiblePC",
			condition = function ( menu, element, event )
				local f4_local0 = IsVisibilityBitSet( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
				if f4_local0 then
					f4_local0 = CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "scoreboardInfo.activeTab", CoD.HUDUtility.GameStatusMode.MODE_SHOW_SCORES ) --[[ @ 0]]
					if f4_local0 then
						f4_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f4_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "ForceVisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "forceScoreboard", 1 ) and not IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["scoreboardInfo.activeTab"], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "scoreboardInfo.activeTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f9_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.forceScoreboard, function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "forceScoreboard"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f13_arg2, f13_arg3, f13_arg4 )
		if IsSelfInState( self, "InventoryVisiblePC" ) then
			EnableMouseLockInputForInventory( f1_arg0, controller, true ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.WZUtility.SetInventoryIsOpen( controller, true ) --[[ @ 0]]
			CoD.WZUtility.ClearInventoryNag( controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.RegisterButtonPromptsForMenu( f1_arg0, controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "MapVisiblePC" ) then
			CoD.WZUtility.SetInventoryIsOpen( controller, false ) --[[ @ 0]]
			SetFocusToElement( self, "ScoreboardGameMap", controller ) --[[ @ 0]]
			EnableMouseLockInputForMap( f1_arg0, controller, true ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.WZUtility.ClearInventoryNag( controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "ScoreboardVisiblePC" ) then
			CoD.WZUtility.SetInventoryIsOpen( controller, false ) --[[ @ 0]]
			SetFocusToElement( self, "WZTeamScoreboard", controller ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, true, false ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.WZUtility.ClearInventoryNag( controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "Visible" ) then
			CoD.WZUtility.SetInventoryIsOpen( controller, false ) --[[ @ 0]]
			SetFocusToElement( self, "ScoreboardGameMap", controller ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, false, true ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
		elseif IsSelfInState( self, "ForceInventoryPC" ) then
			EnableMouseLockInputBinding( f1_arg0, controller, true, true ) --[[ @ 0]]
			CoD.WZUtility.SetInventoryIsOpen( controller, true ) --[[ @ 0]]
			CoD.FreeCursorUtility.RegisterButtonPromptsForMenu( f1_arg0, controller ) --[[ @ 0]]
		else
			CoD.WZUtility.SetInventoryIsOpen( controller, false ) --[[ @ 0]]
			CoD.WZUtility.ClosePCSplitterWidget( self, f1_arg0, controller ) --[[ @ 0]]
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			CoD.HUDUtility.GiveFocusToMenu( f1_arg0, controller ) --[[ @ 0]]
			EnableMouseLockInputBinding( f1_arg0, controller, false, true ) --[[ @ 0]]
			CloseContextualMenu( f1_arg0, controller ) --[[ @ 0]]
			CoD.WZUtility.CloseMultiItemPickup( controller ) --[[ @ 0]]
			CoD.WZUtility.HackCheckWZNeedsCursorMovement( controller, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "MultiItemPickup", "status", function ( model )
		local f14_local0 = self --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) then
			CoD.WZUtility.UpdateMultiItemPickupInventoryVisibilityPC( f1_arg0, self, f1_arg1, model ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		WZTeamScoreboard.id = "WZTeamScoreboard" --[[ @ 0]]
	end
	ScoreboardGameMap.id = "ScoreboardGameMap" --[[ @ 0]]
	if CoD.isPC then
		ScoreboardInventory.id = "ScoreboardInventory" --[[ @ 0]]
	end
	self.__defaultFocus = ScoreboardGameMap --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local6 = self --[[ @ 0]]
	CoD.HUDUtility.AddCustomGainFocusWidget( self, self.ScoreboardGameMap ) --[[ @ 0]]
	f1_local6 = Background --[[ @ 0]]
	if IsPC() then
		SizeToSafeArea( f1_local6, f1_arg1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ScoreboardWidgetWZ.__resetProperties = function ( f15_arg0 )
	f15_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
	f15_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
	f15_arg0.Background:completeAnimation() --[[ @ 0]]
	f15_arg0.WZTeamScoreboard:completeAnimation() --[[ @ 0]]
	f15_arg0.ScoreboardGameMap:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.ScoreboardInventory:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.Background:setAlpha( 0.4 ) --[[ @ 0]]
	f15_arg0.WZTeamScoreboard:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ScoreboardWidgetWZ.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f16_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
			f16_arg0.ScoreboardGameMap:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ScoreboardGameMap ) --[[ @ 0]]
			f16_arg0.Background:completeAnimation() --[[ @ 0]]
			f16_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Background ) --[[ @ 0]]
			f16_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
			f16_arg0.ScoreboardInventory:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ScoreboardInventory ) --[[ @ 0]]
		end
	},
	InventoryVisiblePC = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
			f17_arg0.ScoreboardGameMap:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.ScoreboardGameMap ) --[[ @ 0]]
		end
	},
	MapVisiblePC = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.Background:completeAnimation() --[[ @ 0]]
			f18_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Background ) --[[ @ 0]]
			f18_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
			f18_arg0.ScoreboardInventory:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.ScoreboardInventory ) --[[ @ 0]]
		end
	},
	ScoreboardVisiblePC = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f19_arg0.WZTeamScoreboard:completeAnimation() --[[ @ 0]]
			f19_arg0.WZTeamScoreboard:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.WZTeamScoreboard ) --[[ @ 0]]
			f19_arg0.ScoreboardGameMap:completeAnimation() --[[ @ 0]]
			f19_arg0.ScoreboardGameMap:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.ScoreboardGameMap ) --[[ @ 0]]
			f19_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
			f19_arg0.ScoreboardInventory:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.ScoreboardInventory ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f20_arg0.Background:completeAnimation() --[[ @ 0]]
			f20_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Background ) --[[ @ 0]]
			f20_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
			f20_arg0.ScoreboardInventory:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ScoreboardInventory ) --[[ @ 0]]
		end
	},
	ForceVisible = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.Background:completeAnimation() --[[ @ 0]]
			f21_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Background ) --[[ @ 0]]
			f21_arg0.ScoreboardInventory:completeAnimation() --[[ @ 0]]
			f21_arg0.ScoreboardInventory:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ScoreboardInventory ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ScoreboardWidgetWZ.__onClose = function ( f22_arg0 )
	f22_arg0.WZTeamScoreboard:close() --[[ @ 0]]
	f22_arg0.ScoreboardGameMap:close() --[[ @ 0]]
	f22_arg0.Background:close() --[[ @ 0]]
	f22_arg0.ScoreboardInventory:close() --[[ @ 0]]
end
 --[[ @ 0]]
