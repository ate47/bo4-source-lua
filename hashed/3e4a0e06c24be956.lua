-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
CoD.genericVHUDReloadPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.genericVHUDReloadPrompt.__defaultWidth = 526 --[[ @ 0]]
CoD.genericVHUDReloadPrompt.__defaultHeight = 37 --[[ @ 0]]
CoD.genericVHUDReloadPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.genericVHUDReloadPrompt ) --[[ @ 0]]
	self.id = "genericVHUDReloadPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ReloadingText = LUI.UIText.new( 0, 1, 0, 0, 1, 2, -10, -10 ) --[[ @ 0]]
	ReloadingText:setText( LocalizeToUpperString( @"hash_73C4EEC8614F780F" ) ) --[[ @ 0]]
	ReloadingText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ReloadingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ReloadingText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ReloadingText ) --[[ @ 0]]
	self.ReloadingText = ReloadingText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Reloading",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "showAmmo" ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "ammoReloading", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "showAmmo", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "showAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammoReloading", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammoReloading"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.genericVHUDReloadPrompt.__resetProperties = function ( f5_arg0 )
	f5_arg0.ReloadingText:completeAnimation() --[[ @ 0]]
	f5_arg0.ReloadingText:setTopBottom( 1, 2, -10, -10 ) --[[ @ 0]]
	f5_arg0.ReloadingText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.genericVHUDReloadPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f6_arg0.ReloadingText:completeAnimation() --[[ @ 0]]
			f6_arg0.ReloadingText:setTopBottom( 0.5, 0.5, -18.5, 18.5 ) --[[ @ 0]]
			f6_arg0.ReloadingText:setAlpha( 0 ) --[[ @ 0]]
			f6_arg0.clipFinished( f6_arg0.ReloadingText ) --[[ @ 0]]
		end
	},
	Reloading = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f7_local0 = function ( f8_arg0 )
				local f8_local0 = function ( f9_arg0 )
					f9_arg0:beginAnimation( 500 ) --[[ @ 0]]
					f9_arg0:setAlpha( 0.5 ) --[[ @ 0]]
					f9_arg0:registerEventHandler( "transition_complete_keyframe", f7_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f7_arg0.ReloadingText:beginAnimation( 500 ) --[[ @ 0]]
				f7_arg0.ReloadingText:setAlpha( 1 ) --[[ @ 0]]
				f7_arg0.ReloadingText:registerEventHandler( "interrupted_keyframe", f7_arg0.clipInterrupted ) --[[ @ 0]]
				f7_arg0.ReloadingText:registerEventHandler( "transition_complete_keyframe", f8_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f7_arg0.ReloadingText:completeAnimation() --[[ @ 0]]
			f7_arg0.ReloadingText:setAlpha( 0.5 ) --[[ @ 0]]
			f7_local0( f7_arg0.ReloadingText ) --[[ @ 0]]
			f7_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
