-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/cac/customization/cacgenericbutton" ) --[[ @ 0]]
require( "x64:4f826b9e108697fc" ) --[[ @ 0]]
require( "ui/uieditor/widgets/systemoverlays/systemoverlay_layout_foregroundmultilinetext" ) --[[ @ 0]]

CoD.DemoCustomizeHighlightReel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DemoCustomizeHighlightReel.__defaultWidth = 1920 --[[ @ 0]]
CoD.DemoCustomizeHighlightReel.__defaultHeight = 630 --[[ @ 0]]
CoD.DemoCustomizeHighlightReel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.DemoUtility.RebuildHighlightReelTimeline( f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.DemoCustomizeHighlightReel ) --[[ @ 0]]
	self.id = "DemoCustomizeHighlightReel" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local categoryTypeImage = LUI.UIImage.new( 0, 0, 571, 616, 0, 0, 41, 86 ) --[[ @ 0]]
	categoryTypeImage:linkToElementModel( self, "categoryType", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			categoryTypeImage:setImage( RegisterImage( GetCategoryIconForOverlayType( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( categoryTypeImage ) --[[ @ 0]]
	self.categoryTypeImage = categoryTypeImage --[[ @ 0]]
	
	local title = LUI.UIText.new( 0, 0, 622, 922, 0, 0, 39, 84 ) --[[ @ 0]]
	title:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	title:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	title:linkToElementModel( self, "title", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			title:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( title ) --[[ @ 0]]
	self.title = title --[[ @ 0]]
	
	local text = CoD.systemOverlay_Layout_ForegroundMultilineText.new( f1_arg0, f1_arg1, 0, 0, 626, 1818, 0, 0, 84, 114 ) --[[ @ 0]]
	text:linkToElementModel( self, "description", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			text.text:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( text ) --[[ @ 0]]
	self.text = text --[[ @ 0]]
	
	local numAvailableHighlights = CoD.systemOverlay_Layout_ForegroundMultilineText.new( f1_arg0, f1_arg1, 0, 0, 626, 1818, 0, 0, 155, 185 ) --[[ @ 0]]
	numAvailableHighlights.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_759812214DCF8E53" ) ) --[[ @ 0]]
	numAvailableHighlights:subscribeToGlobalModel( f1_arg1, "Demo", "numHighlightReelMoments", function ( model )
		CoD.DemoUtility.UpdateNumHighlightReelMomentsElementColor( numAvailableHighlights, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( numAvailableHighlights ) --[[ @ 0]]
	self.numAvailableHighlights = numAvailableHighlights --[[ @ 0]]
	
	local ButtonList = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	ButtonList:setLeftRight( 0, 0, 600, 1410 ) --[[ @ 0]]
	ButtonList:setTopBottom( 1, 1, -428, -112 ) --[[ @ 0]]
	ButtonList:setWidgetType( CoD.demo_options_slider ) --[[ @ 0]]
	ButtonList:setVerticalCount( 6 ) --[[ @ 0]]
	ButtonList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ButtonList:setDataSource( "DemoHighlightReelSettingsButtonList" ) --[[ @ 0]]
	self:addElement( ButtonList ) --[[ @ 0]]
	self.ButtonList = ButtonList --[[ @ 0]]
	
	local btnStartHighlightReel = LUI.UIList.new( f1_arg0, f1_arg1, 4, 0, nil, false, false, false, false ) --[[ @ 0]]
	btnStartHighlightReel:setLeftRight( 0, 0, 309, 1431 ) --[[ @ 0]]
	btnStartHighlightReel:setTopBottom( 1, 1, -94, -46 ) --[[ @ 0]]
	btnStartHighlightReel:setWidgetType( CoD.CACGenericButton ) --[[ @ 0]]
	btnStartHighlightReel:setSpacing( 4 ) --[[ @ 0]]
	btnStartHighlightReel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	btnStartHighlightReel:linkToElementModel( self, "listDatasource", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			btnStartHighlightReel:setDataSource( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	btnStartHighlightReel:linkToElementModel( btnStartHighlightReel, "disabled", true, function ( model, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	btnStartHighlightReel:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( btnStartHighlightReel, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsDisabled( element, controller ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsDisabled( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( btnStartHighlightReel ) --[[ @ 0]]
	self.btnStartHighlightReel = btnStartHighlightReel --[[ @ 0]]
	
	ButtonList.id = "ButtonList" --[[ @ 0]]
	btnStartHighlightReel.id = "btnStartHighlightReel" --[[ @ 0]]
	self.__defaultFocus = ButtonList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DemoCustomizeHighlightReel.__onClose = function ( f11_arg0 )
	f11_arg0.categoryTypeImage:close() --[[ @ 0]]
	f11_arg0.title:close() --[[ @ 0]]
	f11_arg0.text:close() --[[ @ 0]]
	f11_arg0.numAvailableHighlights:close() --[[ @ 0]]
	f11_arg0.ButtonList:close() --[[ @ 0]]
	f11_arg0.btnStartHighlightReel:close() --[[ @ 0]]
end
 --[[ @ 0]]
