-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:be52530c0ca57a1" ) --[[ @ 0]]
require( "ui/uieditor/menus/lobby/common/popups/vodviewer" ) --[[ @ 0]]
require( "x64:b8e2ca68acca1fd" ) --[[ @ 0]]
require( "ui/uieditor/widgets/backgroundframes/genericmenuframeidentity" ) --[[ @ 0]]
require( "x64:2947d85e24668c" ) --[[ @ 0]]
require( "x64:479a2abecba85306" ) --[[ @ 0]]
require( "x64:75f1df1bb13a3d07" ) --[[ @ 0]]
require( "x64:1ce770d9dc6bd82c" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]
require( "x64:5aa5c97c296aded6" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/utility/xcammousecontrol" ) --[[ @ 0]]

CoD.ContractDetails = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ContractDetails = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ContractDetails", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromUserData( f1_arg0, self, f1_arg1._model ) --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1._properties ) --[[ @ 0]]
	SetFocusedTierModelValue( f1_arg0, "1", "set" ) --[[ @ 0]]
	CoD.BaseUtility.SetControllerModelToSelfModelValue( f1_arg0, f1_local1, "MaxTier", "totalRewardCount" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "contractDetailsShowItemInfo", false ) --[[ @ 0]]
	CoD.BlackMarketUtility.ResetSignatureWeaponState( f1_local1 ) --[[ @ 0]]
	self:setClass( CoD.ContractDetails ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local GenericMenuFrameIdentity = CoD.GenericMenuFrameIdentity.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_229C903C6DF90D6F" ) ) --[[ @ 0]]
	GenericMenuFrameIdentity:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			GenericMenuFrameIdentity.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GenericMenuFrameIdentity ) --[[ @ 0]]
	self.GenericMenuFrameIdentity = GenericMenuFrameIdentity --[[ @ 0]]
	
	local ContractDetailsPanel = CoD.ContractDetailsPanel.new( f1_local1, f1_arg0, 0.5, 0.5, -840, -64, 0, 0, 178, 905 ) --[[ @ 0]]
	ContractDetailsPanel:linkToElementModel( self, nil, false, function ( model )
		ContractDetailsPanel:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ContractDetailsPanel:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local4 = ContractDetailsPanel --[[ @ 0]]
	local Strip = ContractDetailsPanel.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	Strip( f1_local4, f1_local6.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ContractDetailsPanel:linkToElementModel( ContractDetailsPanel, "allowFrozenMoment", true, function ( model, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ContractDetailsPanel:linkToElementModel( ContractDetailsPanel, "movieName", true, function ( model, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ContractDetailsPanel:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( ContractDetailsPanel, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouse( controller ) then
			SetElementModelToFocusedElementModel( controller, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( menu, controller, self ) --[[ @ 0]]
			SetControllerModelValue( controller, "contractDetailsShowItemInfo", true ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			SetElementState( self, self.SupplyChainDetails, controller, "DefaultState" ) --[[ @ 0]]
			CoD.BlackMarketUtility.CopySignatureWeaponProperty( controller, menu, self.ContractInfoPanel ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouse( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( ContractDetailsPanel, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_remove", function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "allowFrozenMoment", true ) and IsMouseOrKeyboard( controller ) then
			OpenOverlay( self, "MPSpecialistHUBPreviewMoment", controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, controller, "movieName" ) and IsMouseOrKeyboard( controller ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			CoD.VideoStreamingUtility.SetupVoDMovie( controller, element, "" ) --[[ @ 0]]
			DelayOpenOverlay( menu, "VoDViewer", controller, {
				fullscreen = true
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "allowFrozenMoment", true ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_52FB29ED3A3CA79", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, controller, "movieName" ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_52FB29ED3A3CA79", nil, "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( ContractDetailsPanel, "childFocusGained", function ( element )
		if IsGamepadOrKeyboardNavigation( f1_arg0 ) then
			SetControllerModelValue( f1_arg0, "contractDetailsShowItemInfo", false ) --[[ @ 0]]
			CoD.BlackMarketUtility.CopySignatureWeaponProperty( f1_arg0, f1_local1, self.ContractInfoPanel ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_local1, f1_arg0, self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractDetailsPanel ) --[[ @ 0]]
	self.ContractDetailsPanel = ContractDetailsPanel --[[ @ 0]]
	
	Strip = LUI.UIImage.new( 0.5, 0.5, -839, -65, 0, 0, 676.5, 850.5 ) --[[ @ 0]]
	Strip:setRGB( 0.09, 0.14, 0.19 ) --[[ @ 0]]
	Strip:setAlpha( 0.8 ) --[[ @ 0]]
	Strip:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
	Strip:setShaderVector( 0, 0.7, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Strip ) --[[ @ 0]]
	self.Strip = Strip --[[ @ 0]]
	
	f1_local4 = nil --[[ @ 0]]
	f1_local4 = LUI.UIElement.createFake() --[[ @ 0]]
	self.RewardList = f1_local4 --[[ @ 0]]
	f1_local6 = nil --[[ @ 0]]
	
	local RewardGridPC = LUI.UIList.new( f1_local1, f1_arg0, 11, 0, nil, false, false, false, false ) --[[ @ 0]]
	RewardGridPC:setLeftRight( 0.5, 0.5, -824, -80 ) --[[ @ 0]]
	RewardGridPC:setTopBottom( 0, 0, 684, 842 ) --[[ @ 0]]
	RewardGridPC:setWidgetType( CoD.SupplyChainItem ) --[[ @ 0]]
	RewardGridPC:setHorizontalCount( 5 ) --[[ @ 0]]
	RewardGridPC:setSpacing( 11 ) --[[ @ 0]]
	RewardGridPC:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	RewardGridPC:setDataSource( "ContractTierItems" ) --[[ @ 0]]
	RewardGridPC:appendEventHandler( "input_source_changed", function ( f14_arg0, f14_arg1 )
		f14_arg1.menu = f14_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ContractInfoPanel = RewardGridPC --[[ @ 0]]
	local SupplyChainDetails = RewardGridPC.subscribeToModel --[[ @ 0]]
	local StartMenuCODpoints = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	SupplyChainDetails( ContractInfoPanel, StartMenuCODpoints.LastInput, function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RewardGridPC:linkToElementModel( RewardGridPC, "allowFrozenMoment", true, function ( model, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RewardGridPC:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		if IsGamepadOrKeyboardNavigation( f1_arg0 ) then
			SetElementModelToFocusedElementModel( f1_arg0, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_local1, f1_arg0, element ) --[[ @ 0]]
			SetElementState( self, self.SupplyChainDetails, f1_arg0, "DefaultState" ) --[[ @ 0]]
		end
		return f17_local0
	end ) --[[ @ 0]]
	RewardGridPC:registerEventHandler( "gain_list_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		if IsGamepadOrKeyboardNavigation( f1_arg0 ) then
			SetControllerModelValue( f1_arg0, "contractDetailsShowItemInfo", true ) --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	RewardGridPC:registerEventHandler( "input_source_changed", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if IsMouse( f1_arg0 ) then
			CoD.GridAndListUtility.DisableListActiveOnFocus( element ) --[[ @ 0]]
			CoD.GridAndListUtility.ActivateListPCSelectionBehavior( element ) --[[ @ 0]]
		elseif IsGamepad( f1_arg0 ) then
			CoD.GridAndListUtility.EnableListActiveOnFocus( element ) --[[ @ 0]]
		end
		if not f19_local0 then
			f19_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f19_local0
	end ) --[[ @ 0]]
	RewardGridPC:registerEventHandler( "gain_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f20_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f20_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"] ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( RewardGridPC, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			SetElementModelToFocusedElementModel( controller, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( menu, controller, element ) --[[ @ 0]]
			SetControllerModelValue( controller, "contractDetailsShowItemInfo", true ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( menu, element, controller ) --[[ @ 0]]
			SetElementState( self, self.SupplyChainDetails, controller, "DefaultState" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( RewardGridPC, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			SetElementModelToFocusedElementModel( controller, self, element, "SupplyChainDetails" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( menu, controller, element ) --[[ @ 0]]
			SetControllerModelValue( controller, "contractDetailsShowItemInfo", true ) --[[ @ 0]]
			SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( menu, element, controller ) --[[ @ 0]]
			SetElementState( self, self.SupplyChainDetails, controller, "DefaultState" ) --[[ @ 0]]
			UpdateButtonPromptState( menu, element, controller, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( RewardGridPC, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "allowFrozenMoment" ) and IsGamepad( controller ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			OpenOverlay( self, "MPSpecialistHUBPreviewMoment", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "allowFrozenMoment" ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( RewardGridPC, f1_arg0, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], nil, function ( element, menu, controller, model )
		if IsDpadButton( model ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 1 ) then
			SetFocusedTierModelValue( controller, "1", "decrement" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDpadButton( nil ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1057783F8DA4AAEF"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( RewardGridPC, f1_arg0, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], nil, function ( element, menu, controller, model )
		if IsDpadButton( model ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 5 ) then
			SetFocusedTierModelValue( controller, "1", "increment" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDpadButton( nil ) and CoD.GridAndListUtility.IsElementAtColumnIndex( element, 5 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4571F08AD84807E0"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( RewardGridPC, "childFocusGained", function ( element )
		if IsGamepadOrKeyboardNavigation( f1_arg0 ) then
			SetElementModelToFocusedElementModel( f1_arg0, self, element, "SupplyChainDetails" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RewardGridPC:subscribeToGlobalModel( f1_arg0, "PerController", "FocusedTier", function ( model )
		UpdateDataSource( self, RewardGridPC, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RewardGridPC ) --[[ @ 0]]
	self.RewardGridPC = RewardGridPC --[[ @ 0]]
	
	SupplyChainDetails = CoD.ContractSupplyChainDetails.new( f1_local1, f1_arg0, 0.5, 0.5, 302, 902, 0, 0, -81, 999 ) --[[ @ 0]]
	SupplyChainDetails:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsControllerModelValueTrue( f1_arg0, "contractDetailsShowItemInfo" )
			end
		},
		{
			stateName = "NoInfoPanel",
			condition = function ( menu, element, event )
				local f34_local0 --[[ @ 0]]
				if not IsMouseOrKeyboard( f1_arg0 ) and not CoD.ModelUtility.IsControllerModelValueTrue( f1_arg0, "contractDetailsShowItemInfo" ) then
					f34_local0 = AlwaysFalse() --[[ @ 0]]
				else
					f34_local0 = false --[[ @ 0]]
				end
				return f34_local0
			end
		}
	} ) --[[ @ 0]]
	StartMenuCODpoints = SupplyChainDetails --[[ @ 0]]
	ContractInfoPanel = SupplyChainDetails.subscribeToModel --[[ @ 0]]
	local XCamMouseControl = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ContractInfoPanel( StartMenuCODpoints, XCamMouseControl.contractDetailsShowItemInfo, function ( f35_arg0 )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f35_arg0:get(),
			modelName = "contractDetailsShowItemInfo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SupplyChainDetails:appendEventHandler( "input_source_changed", function ( f36_arg0, f36_arg1 )
		f36_arg1.menu = f36_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( SupplyChainDetails, f36_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	StartMenuCODpoints = SupplyChainDetails --[[ @ 0]]
	ContractInfoPanel = SupplyChainDetails.subscribeToModel --[[ @ 0]]
	XCamMouseControl = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ContractInfoPanel( StartMenuCODpoints, XCamMouseControl.LastInput, function ( f37_arg0 )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f37_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "character", true, function ( model )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SupplyChainDetails:linkToElementModel( SupplyChainDetails, "weaponRef", true, function ( model )
		f1_local1:updateElementState( SupplyChainDetails, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SupplyChainDetails ) --[[ @ 0]]
	self.SupplyChainDetails = SupplyChainDetails --[[ @ 0]]
	
	ContractInfoPanel = CoD.ContractSupplyChainDetails_InfoPanel.new( f1_local1, f1_arg0, 0.5, 0.5, 340, 898, 0, 0, 715, 961 ) --[[ @ 0]]
	ContractInfoPanel:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsControllerModelValueTrue( f1_arg0, "contractDetailsShowItemInfo" )
			end
		}
	} ) --[[ @ 0]]
	XCamMouseControl = ContractInfoPanel --[[ @ 0]]
	StartMenuCODpoints = ContractInfoPanel.subscribeToModel --[[ @ 0]]
	local Prompts = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	StartMenuCODpoints( XCamMouseControl, Prompts.contractDetailsShowItemInfo, function ( f41_arg0 )
		f1_local1:updateElementState( ContractInfoPanel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f41_arg0:get(),
			modelName = "contractDetailsShowItemInfo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ContractInfoPanel:linkToElementModel( ContractInfoPanel, "itemCategory", true, function ( model )
		f1_local1:updateElementState( ContractInfoPanel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "itemCategory"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ContractInfoPanel:appendEventHandler( "input_source_changed", function ( f43_arg0, f43_arg1 )
		f43_arg1.menu = f43_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( ContractInfoPanel, f43_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XCamMouseControl = ContractInfoPanel --[[ @ 0]]
	StartMenuCODpoints = ContractInfoPanel.subscribeToModel --[[ @ 0]]
	Prompts = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	StartMenuCODpoints( XCamMouseControl, Prompts.LastInput, function ( f44_arg0 )
		f1_local1:updateElementState( ContractInfoPanel, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f44_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ContractInfoPanel:linkToElementModel( self, nil, false, function ( model )
		ContractInfoPanel:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractInfoPanel ) --[[ @ 0]]
	self.ContractInfoPanel = ContractInfoPanel --[[ @ 0]]
	
	StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 550, 654, 0, 0, -11, 69 ) --[[ @ 0]]
	StartMenuCODpoints:setAlpha( 0 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f46_local0 = model:get() --[[ @ 0]]
		if f46_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f46_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	XCamMouseControl = nil --[[ @ 0]]
	
	XCamMouseControl = CoD.XCamMouseControl.new( f1_local1, f1_arg0, 0.5, 0.5, 310, 910, 0, 0, 59, 684 ) --[[ @ 0]]
	XCamMouseControl:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f47_local0 --[[ @ 0]]
				if not CoD.BlackMarketUtility.ItemUses3DPreview( self.SupplyChainDetails, f1_arg0 ) then
					f47_local0 = CoD.ModelUtility.IsControllerModelValueTrue( f1_arg0, "contractDetailsShowItemInfo" ) --[[ @ 0]]
				else
					f47_local0 = false --[[ @ 0]]
				end
				return f47_local0
			end
		}
	} ) --[[ @ 0]]
	XCamMouseControl:linkToElementModel( XCamMouseControl, "character", true, function ( model )
		f1_local1:updateElementState( XCamMouseControl, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "character"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XCamMouseControl:linkToElementModel( XCamMouseControl, "weaponRef", true, function ( model )
		f1_local1:updateElementState( XCamMouseControl, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "weaponRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local13 = XCamMouseControl --[[ @ 0]]
	Prompts = XCamMouseControl.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	Prompts( f1_local13, f1_local14.contractDetailsShowItemInfo, function ( f50_arg0 )
		f1_local1:updateElementState( XCamMouseControl, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f50_arg0:get(),
			modelName = "contractDetailsShowItemInfo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( XCamMouseControl ) --[[ @ 0]]
	self.XCamMouseControl = XCamMouseControl --[[ @ 0]]
	
	Prompts = CoD.ItemShopCyclePrompts.new( f1_local1, f1_arg0, 0.5, 0.5, -920, 18, 0, 0, 671, 855 ) --[[ @ 0]]
	Prompts:linkToElementModel( self, nil, false, function ( model )
		Prompts:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Prompts ) --[[ @ 0]]
	self.Prompts = Prompts --[[ @ 0]]
	
	ContractDetailsPanel:linkToElementModel( f1_local4, "tierCount", true, function ( model )
		local f52_local0 = model:get() --[[ @ 0]]
		if f52_local0 ~= nil then
			ContractDetailsPanel.RewardCount:setText( f52_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ContractDetailsPanel:linkToElementModel( RewardGridPC, "tierCount", true, function ( model )
		local f53_local0 = model:get() --[[ @ 0]]
		if f53_local0 ~= nil then
			ContractDetailsPanel.RewardCountPC:setText( f53_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "allowFrozenMoment", true, function ( model, f54_arg1 )
		CoD.Menu.UpdateButtonShownState( f54_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "movieName", true, function ( model, f55_arg1 )
		CoD.Menu.UpdateButtonShownState( f55_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		CoD.BlackMarketUtility.SendItemShopViewEvent( controller, menu, "" ) --[[ @ 0]]
		GoBack( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], "MWHEELDOWN", function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) then
			CoD.BlackMarketUtility.PageStreamHoldUpdateAction( menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "increment" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "MWHEELUP", function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) then
			CoD.BlackMarketUtility.PageStreamHoldUpdateAction( menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "decrement" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELDOWN", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) then
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "increment" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELUP", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) then
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "decrement" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.CanToggleSignatureWeapon( menu ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ToggleSignatureWeapon( menu, controller, menu ) --[[ @ 0]]
			return true
		elseif CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( element, controller, "allowTogglePreview", true ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( element, controller, "itemCategory", @"hash_5CC13B0F8EEFF726" ) then
			CoD.BlackMarketUtility.ToggleCharacterModelCamera( menu, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.CanToggleSignatureWeapon( menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		elseif CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( element, controller, "allowTogglePreview", true ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( element, controller, "itemCategory", @"hash_5CC13B0F8EEFF726" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], "ui_contextual_2", function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.CanPlayGesture( menu ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlayGesture( self, menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.CanPlayGesture( menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_52FB29ED3A3CA79", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_remove", function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( menu, controller, "allowFrozenMoment", true ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			OpenOverlay( self, "MPSpecialistHUBPreviewMoment", controller ) --[[ @ 0]]
			return true
		elseif not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueNil( menu, controller, "movieName" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( menu, controller, "movieName", "" ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			CoD.BlackMarketUtility.SetupSupplyChainMovie( menu, controller, "" ) --[[ @ 0]]
			DelayOpenOverlay( menu, "VoDViewer", controller, {
				fullscreen = true
			} ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "allowFrozenMoment", true ) then
			OpenOverlay( self, "MPSpecialistHUBPreviewMoment", controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, controller, "movieName" ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			CoD.VideoStreamingUtility.SetupVoDMovie( controller, element, "" ) --[[ @ 0]]
			DelayOpenOverlay( menu, "VoDViewer", controller, {
				fullscreen = true
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( menu, controller, "allowFrozenMoment", true ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		elseif not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueNil( menu, controller, "movieName" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( menu, controller, "movieName", "" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		elseif CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "allowFrozenMoment", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_52FB29ED3A3CA79", nil, "ui_remove" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, controller, "movieName" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_52FB29ED3A3CA79", nil, "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], "ui_contextual_3", function ( element, menu, controller, model )
		OpenPopup( self, "PurchaseCodPoints", controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_263D5409DEC36DFA", nil, "ui_contextual_3" ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SetControllerModelValue( f1_arg0, "MaxTier", CoD.BlackMarketUtility.SupplyChainMaxTiers ) --[[ @ 0]]
		SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
		CoD.PlayerRoleUtility.StopGesturePreview( f1_local1, f1_arg0 ) --[[ @ 0]]
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
		SetFocusedTierModelValue( f1_arg0, "0", "" ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) and CoD.ContractUtility.OpenedContractExpired( self, self, f1_arg0 ) then
			GoBack( self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	GenericMenuFrameIdentity:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.id = "GenericMenuFrameIdentity" --[[ @ 0]]
	ContractDetailsPanel.id = "ContractDetailsPanel" --[[ @ 0]]
	f1_local4.id = "RewardList" --[[ @ 0]]
	RewardGridPC.id = "RewardGridPC" --[[ @ 0]]
	if CoD.isPC then
		SupplyChainDetails.id = "SupplyChainDetails" --[[ @ 0]]
	end
	if CoD.isPC then
		XCamMouseControl.id = "XCamMouseControl" --[[ @ 0]]
	end
	if CoD.isPC then
		Prompts.id = "Prompts" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = ContractDetailsPanel --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local13 = self --[[ @ 0]]
	if not CoD.ModelUtility.IsSelfModelValueTrue( f1_local13, f1_arg0, "purchased" ) then
		CoD.BlackMarketUtility.EnableLiveCountDownTimer( self ) --[[ @ 0]]
		CoD.BlackMarketUtility.SetupPageStreamHoldActionReadyCheck( f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
		CoD.BlackMarketUtility.EnableItemshopTick( f1_arg0, self ) --[[ @ 0]]
	else
		CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_local1, f1_arg0, f1_local13 ) --[[ @ 0]]
		CoD.BlackMarketUtility.AutoPlayGestureIfApplicable( f1_local1, f1_local13, f1_arg0 ) --[[ @ 0]]
		CoD.BlackMarketUtility.SetupPageStreamHoldActionReadyCheck( f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end
	f1_local13 = ContractDetailsPanel --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetElementForceMouseEventDispatch( f1_local13, true ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ContractDetails.__resetProperties = function ( f76_arg0 )
	f76_arg0.RewardList:completeAnimation() --[[ @ 0]]
	f76_arg0.Strip:completeAnimation() --[[ @ 0]]
	f76_arg0.RewardList:setAlpha( 1 ) --[[ @ 0]]
	f76_arg0.Strip:setAlpha( 0.8 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ContractDetails.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f77_arg0, f77_arg1 )
			f77_arg0:__resetProperties() --[[ @ 0]]
			f77_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f77_local0 = function ( f78_arg0 )
				local f78_local0 = function ( f79_arg0 )
					f79_arg0:beginAnimation( 530 ) --[[ @ 0]]
					f79_arg0:setAlpha( 0.8 ) --[[ @ 0]]
					f79_arg0:registerEventHandler( "transition_complete_keyframe", f77_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f77_arg0.Strip:beginAnimation( 410 ) --[[ @ 0]]
				f77_arg0.Strip:registerEventHandler( "interrupted_keyframe", f77_arg0.clipInterrupted ) --[[ @ 0]]
				f77_arg0.Strip:registerEventHandler( "transition_complete_keyframe", f78_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f77_arg0.Strip:completeAnimation() --[[ @ 0]]
			f77_arg0.Strip:setAlpha( 0 ) --[[ @ 0]]
			f77_local0( f77_arg0.Strip ) --[[ @ 0]]
			local f77_local1 = function ( f80_arg0 )
				local f80_local0 = function ( f81_arg0 )
					f81_arg0:beginAnimation( 530 ) --[[ @ 0]]
					f81_arg0:setAlpha( 1 ) --[[ @ 0]]
					f81_arg0:registerEventHandler( "transition_complete_keyframe", f77_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f77_arg0.RewardList:beginAnimation( 410 ) --[[ @ 0]]
				f77_arg0.RewardList:registerEventHandler( "interrupted_keyframe", f77_arg0.clipInterrupted ) --[[ @ 0]]
				f77_arg0.RewardList:registerEventHandler( "transition_complete_keyframe", f80_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f77_arg0.RewardList:completeAnimation() --[[ @ 0]]
			f77_arg0.RewardList:setAlpha( 0 ) --[[ @ 0]]
			f77_local1( f77_arg0.RewardList ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ContractDetails.__onClose = function ( f82_arg0 )
	f82_arg0.ContractDetailsPanel:close() --[[ @ 0]]
	f82_arg0.GenericMenuFrameIdentity:close() --[[ @ 0]]
	f82_arg0.RewardList:close() --[[ @ 0]]
	f82_arg0.RewardGridPC:close() --[[ @ 0]]
	f82_arg0.SupplyChainDetails:close() --[[ @ 0]]
	f82_arg0.ContractInfoPanel:close() --[[ @ 0]]
	f82_arg0.StartMenuCODpoints:close() --[[ @ 0]]
	f82_arg0.XCamMouseControl:close() --[[ @ 0]]
	f82_arg0.Prompts:close() --[[ @ 0]]
end
 --[[ @ 0]]
