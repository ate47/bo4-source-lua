-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:79fe6ac43673588" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/filesharebookmarkeditem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/selectedfilmsummaryinformation" ) --[[ @ 0]]

CoD.SelectedFilmInformation = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SelectedFilmInformation.__defaultWidth = 525 --[[ @ 0]]
CoD.SelectedFilmInformation.__defaultHeight = 792 --[[ @ 0]]
CoD.SelectedFilmInformation.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SelectedFilmInformation ) --[[ @ 0]]
	self.id = "SelectedFilmInformation" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TitleBG = CoD.Challenges_FrameWidget_TitleBackground.new( f1_arg0, f1_arg1, -0, 1, -1, 1, 0.5, 0.5, -417, 417 ) --[[ @ 0]]
	TitleBG.HeaderStripeBot:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( TitleBG ) --[[ @ 0]]
	self.TitleBG = TitleBG --[[ @ 0]]
	
	local MapImage = LUI.UIImage.new( 0.5, 0.5, -262, 262, 0, 0, 0, 386 ) --[[ @ 0]]
	MapImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	MapImage:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	MapImage:setShaderVector( 1, 1, 1, 0, 0 ) --[[ @ 0]]
	MapImage:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	MapImage:linkToElementModel( self, "mapName", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MapImage:setImage( RegisterImage( MapNameToMapImage( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MapImage ) --[[ @ 0]]
	self.MapImage = MapImage --[[ @ 0]]
	
	local Thumbnail = LUI.UIElement.new( 0.5, 0.5, -258, 264, 0, 0, 0, 297 ) --[[ @ 0]]
	Thumbnail:linkToElementModel( self, "fileId", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			Thumbnail:setupImageViewer( GetImageViewerParams( "UI_SCREENSHOT_TYPE_THUMBNAIL", f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Thumbnail ) --[[ @ 0]]
	self.Thumbnail = Thumbnail --[[ @ 0]]
	
	local AuthorName = LUI.UIText.new( 0, 1, 16, -16, 1, 1, -410, -374 ) --[[ @ 0]]
	AuthorName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	AuthorName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	AuthorName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	AuthorName:setShaderVector( 0, 0.04, 0, 0, 0 ) --[[ @ 0]]
	AuthorName:setShaderVector( 1, 0.02, 0, 0, 0 ) --[[ @ 0]]
	AuthorName:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	AuthorName:setLetterSpacing( 3 ) --[[ @ 0]]
	AuthorName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	AuthorName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	AuthorName:linkToElementModel( self, "fileAuthorName", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			AuthorName:setText( CoD.SocialUtility.CleanGamerTag( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AuthorName ) --[[ @ 0]]
	self.AuthorName = AuthorName --[[ @ 0]]
	
	local CreateTime = LUI.UIText.new( 0, 1, 17, -17, 1, 1, -370, -352 ) --[[ @ 0]]
	CreateTime:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	CreateTime:setTTF( "dinnext_regular" ) --[[ @ 0]]
	CreateTime:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	CreateTime:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	CreateTime:linkToElementModel( self, "fileCreateTime", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			CreateTime:setText( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CreateTime ) --[[ @ 0]]
	self.CreateTime = CreateTime --[[ @ 0]]
	
	local MatchType = LUI.UIText.new( 0.58, 1.58, -287, -321, 1, 1, -349, -331 ) --[[ @ 0]]
	MatchType:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	MatchType:setTTF( "dinnext_regular" ) --[[ @ 0]]
	MatchType:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MatchType:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	MatchType:linkToElementModel( self, "matchmakingMode", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			MatchType:setText( CoD.FileshareUtility.FileshareGetMatchmakingMode( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MatchType ) --[[ @ 0]]
	self.MatchType = MatchType --[[ @ 0]]
	
	local SelectedFilmSummaryInformation = CoD.SelectedFilmSummaryInformation.new( f1_arg0, f1_arg1, 0, 1, 16, -16, 1, 1, -313, -195 ) --[[ @ 0]]
	SelectedFilmSummaryInformation:linkToElementModel( self, "summary", false, function ( model )
		SelectedFilmSummaryInformation:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SelectedFilmSummaryInformation:subscribeToGlobalModel( f1_arg1, "GlobalModel", "fileshareRoot.summaryDownloadTask.state", function ( model )
		local f8_local0 = SelectedFilmSummaryInformation --[[ @ 0]]
		if CoD.ModelUtility.IsGlobalModelValueEqualToEnum( "fileshareRoot.summaryDownloadTask.state", Enum[@"filesharetaskuistate"][@"fileshare_task_ui_done"] ) and CoD.ModelUtility.IsGlobalModelValueTrue( "fileshareRoot.summaryDownloadTask.success" ) then
			CoD.FileshareUtility.FileshareHandleDownloadSummary( self ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SelectedFilmSummaryInformation ) --[[ @ 0]]
	self.SelectedFilmSummaryInformation = SelectedFilmSummaryInformation --[[ @ 0]]
	
	local BookmarkedItem = CoD.FileshareBookmarkedItem.new( f1_arg0, f1_arg1, 0, 0, 4, 198, 0, 0, 3.5, 29.5 ) --[[ @ 0]]
	BookmarkedItem:mergeStateConditions( {
		{
			stateName = "IconOnly",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "IconWithText",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isBookmarked" )
			end
		}
	} ) --[[ @ 0]]
	BookmarkedItem:linkToElementModel( BookmarkedItem, "isBookmarked", true, function ( model )
		f1_arg0:updateElementState( BookmarkedItem, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isBookmarked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BookmarkedItem:linkToElementModel( self, nil, false, function ( model )
		BookmarkedItem:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( BookmarkedItem ) --[[ @ 0]]
	self.BookmarkedItem = BookmarkedItem --[[ @ 0]]
	
	local GametypeOnMapName = LUI.UIText.new( 0, 1, 20, -20, 1, 1, -451, -433 ) --[[ @ 0]]
	GametypeOnMapName:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	GametypeOnMapName:setTTF( "dinnext_regular" ) --[[ @ 0]]
	GametypeOnMapName:setLetterSpacing( 2 ) --[[ @ 0]]
	GametypeOnMapName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	GametypeOnMapName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	GametypeOnMapName:setBackingType( 2 ) --[[ @ 0]]
	GametypeOnMapName:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	GametypeOnMapName:setBackingAlpha( 0.9 ) --[[ @ 0]]
	GametypeOnMapName:setBackingXPadding( 4 ) --[[ @ 0]]
	GametypeOnMapName:setBackingYPadding( 1 ) --[[ @ 0]]
	GametypeOnMapName:linkToElementModel( self, "fileDescription", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			GametypeOnMapName:setText( f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GametypeOnMapName ) --[[ @ 0]]
	self.GametypeOnMapName = GametypeOnMapName --[[ @ 0]]
	
	local GameModeTitle = LUI.UIText.new( 0, 1, 20, -20, 0, 0, 316, 352 ) --[[ @ 0]]
	GameModeTitle:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	GameModeTitle:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	GameModeTitle:setLetterSpacing( 2 ) --[[ @ 0]]
	GameModeTitle:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	GameModeTitle:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	GameModeTitle:setBackingType( 2 ) --[[ @ 0]]
	GameModeTitle:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	GameModeTitle:setBackingAlpha( 0.9 ) --[[ @ 0]]
	GameModeTitle:setBackingXPadding( 4 ) --[[ @ 0]]
	GameModeTitle:setBackingYPadding( 1 ) --[[ @ 0]]
	GameModeTitle:linkToElementModel( self, "fileName", true, function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			GameModeTitle:setText( f14_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GameModeTitle ) --[[ @ 0]]
	self.GameModeTitle = GameModeTitle --[[ @ 0]]
	
	local GameTypeImage = LUI.UIImage.new( 0, 0, 398.5, 534.5, 0, 0, 260, 396 ) --[[ @ 0]]
	GameTypeImage:linkToElementModel( self, "gameTypeImage", true, function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			GameTypeImage:setImage( RegisterImage( f15_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GameTypeImage ) --[[ @ 0]]
	self.GameTypeImage = GameTypeImage --[[ @ 0]]
	
	local DurationText = LUI.UIText.new( 0, 0, 428, 518, 0, 0, 7.5, 34.5 ) --[[ @ 0]]
	DurationText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	DurationText:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	DurationText:setAlignment( Enum[@"luialignment"][@"lui_alignment_middle"] ) --[[ @ 0]]
	DurationText:setBackingType( 2 ) --[[ @ 0]]
	DurationText:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	DurationText:setBackingAlpha( 0.9 ) --[[ @ 0]]
	DurationText:setBackingXPadding( 2 ) --[[ @ 0]]
	DurationText:linkToElementModel( self, "duration", true, function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			DurationText:setText( MillisecondsAsMinAndSeconds( f16_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DurationText ) --[[ @ 0]]
	self.DurationText = DurationText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Film",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "fileCategory", "film", "recentgames" )
			end
		},
		{
			stateName = "Screenshot",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "fileCategory", "screenshot", "screenshot_private" )
			end
		},
		{
			stateName = "Clip",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "fileCategory", "clip", "clip_private" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "fileCategory", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "fileCategory"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.SelectedFilmInformation.__resetProperties = function ( f21_arg0 )
	f21_arg0.MatchType:completeAnimation() --[[ @ 0]]
	f21_arg0.MapImage:completeAnimation() --[[ @ 0]]
	f21_arg0.GameTypeImage:completeAnimation() --[[ @ 0]]
	f21_arg0.Thumbnail:completeAnimation() --[[ @ 0]]
	f21_arg0.AuthorName:completeAnimation() --[[ @ 0]]
	f21_arg0.DurationText:completeAnimation() --[[ @ 0]]
	f21_arg0.BookmarkedItem:completeAnimation() --[[ @ 0]]
	f21_arg0.SelectedFilmSummaryInformation:completeAnimation() --[[ @ 0]]
	f21_arg0.MatchType:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.MapImage:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.GameTypeImage:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.Thumbnail:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.AuthorName:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.DurationText:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.BookmarkedItem:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.SelectedFilmSummaryInformation:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SelectedFilmInformation.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f22_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f22_arg0.MapImage:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.MapImage ) --[[ @ 0]]
			f22_arg0.Thumbnail:completeAnimation() --[[ @ 0]]
			f22_arg0.Thumbnail:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.Thumbnail ) --[[ @ 0]]
			f22_arg0.MatchType:completeAnimation() --[[ @ 0]]
			f22_arg0.MatchType:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.MatchType ) --[[ @ 0]]
			f22_arg0.GameTypeImage:completeAnimation() --[[ @ 0]]
			f22_arg0.GameTypeImage:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.GameTypeImage ) --[[ @ 0]]
		end
	},
	Film = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f23_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f23_arg0.MapImage:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.MapImage ) --[[ @ 0]]
			f23_arg0.Thumbnail:completeAnimation() --[[ @ 0]]
			f23_arg0.Thumbnail:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Thumbnail ) --[[ @ 0]]
			f23_arg0.AuthorName:completeAnimation() --[[ @ 0]]
			f23_arg0.AuthorName:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.AuthorName ) --[[ @ 0]]
			f23_arg0.MatchType:completeAnimation() --[[ @ 0]]
			f23_arg0.MatchType:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.MatchType ) --[[ @ 0]]
			f23_arg0.GameTypeImage:completeAnimation() --[[ @ 0]]
			f23_arg0.GameTypeImage:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.GameTypeImage ) --[[ @ 0]]
		end
	},
	Screenshot = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f24_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f24_arg0.MapImage:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.MapImage ) --[[ @ 0]]
			f24_arg0.Thumbnail:completeAnimation() --[[ @ 0]]
			f24_arg0.Thumbnail:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Thumbnail ) --[[ @ 0]]
			f24_arg0.AuthorName:completeAnimation() --[[ @ 0]]
			f24_arg0.AuthorName:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.AuthorName ) --[[ @ 0]]
			f24_arg0.MatchType:completeAnimation() --[[ @ 0]]
			f24_arg0.MatchType:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.MatchType ) --[[ @ 0]]
			f24_arg0.SelectedFilmSummaryInformation:completeAnimation() --[[ @ 0]]
			f24_arg0.SelectedFilmSummaryInformation:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.SelectedFilmSummaryInformation ) --[[ @ 0]]
			f24_arg0.BookmarkedItem:completeAnimation() --[[ @ 0]]
			f24_arg0.BookmarkedItem:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.BookmarkedItem ) --[[ @ 0]]
			f24_arg0.GameTypeImage:completeAnimation() --[[ @ 0]]
			f24_arg0.GameTypeImage:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.GameTypeImage ) --[[ @ 0]]
			f24_arg0.DurationText:completeAnimation() --[[ @ 0]]
			f24_arg0.DurationText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.DurationText ) --[[ @ 0]]
		end
	},
	Clip = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f25_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f25_arg0.MapImage:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.MapImage ) --[[ @ 0]]
			f25_arg0.Thumbnail:completeAnimation() --[[ @ 0]]
			f25_arg0.Thumbnail:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Thumbnail ) --[[ @ 0]]
			f25_arg0.AuthorName:completeAnimation() --[[ @ 0]]
			f25_arg0.AuthorName:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.AuthorName ) --[[ @ 0]]
			f25_arg0.MatchType:completeAnimation() --[[ @ 0]]
			f25_arg0.MatchType:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.MatchType ) --[[ @ 0]]
			f25_arg0.SelectedFilmSummaryInformation:completeAnimation() --[[ @ 0]]
			f25_arg0.SelectedFilmSummaryInformation:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.SelectedFilmSummaryInformation ) --[[ @ 0]]
			f25_arg0.BookmarkedItem:completeAnimation() --[[ @ 0]]
			f25_arg0.BookmarkedItem:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.BookmarkedItem ) --[[ @ 0]]
			f25_arg0.GameTypeImage:completeAnimation() --[[ @ 0]]
			f25_arg0.GameTypeImage:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.GameTypeImage ) --[[ @ 0]]
			f25_arg0.DurationText:completeAnimation() --[[ @ 0]]
			f25_arg0.DurationText:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.DurationText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.SelectedFilmInformation.__onClose = function ( f26_arg0 )
	f26_arg0.TitleBG:close() --[[ @ 0]]
	f26_arg0.MapImage:close() --[[ @ 0]]
	f26_arg0.Thumbnail:close() --[[ @ 0]]
	f26_arg0.AuthorName:close() --[[ @ 0]]
	f26_arg0.CreateTime:close() --[[ @ 0]]
	f26_arg0.MatchType:close() --[[ @ 0]]
	f26_arg0.SelectedFilmSummaryInformation:close() --[[ @ 0]]
	f26_arg0.BookmarkedItem:close() --[[ @ 0]]
	f26_arg0.GametypeOnMapName:close() --[[ @ 0]]
	f26_arg0.GameModeTitle:close() --[[ @ 0]]
	f26_arg0.GameTypeImage:close() --[[ @ 0]]
	f26_arg0.DurationText:close() --[[ @ 0]]
end
 --[[ @ 0]]
