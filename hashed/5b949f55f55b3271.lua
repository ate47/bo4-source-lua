-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/common/commoncheckbox" ) --[[ @ 0]]
require( "x64:2f732d1ff8c659ed" ) --[[ @ 0]]

CoD.Social_PlayersListButtonWithCheckbox = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.__defaultWidth = 514 --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.__defaultHeight = 40 --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Social_PlayersListButtonWithCheckbox ) --[[ @ 0]]
	self.id = "Social_PlayersListButtonWithCheckbox" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonInternal = CoD.Social_PlayersListButtonShared.new( f1_arg0, f1_arg1, 0, 0, 27.5, 501.5, 0, 0, 0, 40 ) --[[ @ 0]]
	ButtonInternal:mergeStateConditions( {
		{
			stateName = "LeaderboardsChecked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "socialRoot.leaderboardsPlayerListActive" ) and CoD.ModelUtility.IsSelfModelValueTrue( self.NineSliceShaderImage, f1_arg1, "checked" )
			end
		},
		{
			stateName = "LeaderboardsUncheckable",
			condition = function ( menu, element, event )
				local f3_local0 = CoD.ModelUtility.IsGlobalModelValueTrue( "socialRoot.leaderboardsPlayerListActive" ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = CoD.ModelUtility.IsGlobalModelValueTrue( "socialRoot.playersListFull" ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = not CoD.ModelUtility.IsGlobalModelValueTrue( "socialRoot.showPlayersList" ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "LeaderboardsUnchecked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueTrue( "socialRoot.leaderboardsPlayerListActive" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self.NineSliceShaderImage, f1_arg1, "checked" )
			end
		}
	} ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( ButtonInternal, "primaryPresence", true, function ( model )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "primaryPresence"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = ButtonInternal --[[ @ 0]]
	local NineSliceShaderImage = ButtonInternal.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	NineSliceShaderImage( f1_local2, f1_local4["socialRoot.leaderboardsPlayerListActive"], function ( f6_arg0 )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "socialRoot.leaderboardsPlayerListActive"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( ButtonInternal, "checked", true, function ( model )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "checked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local2 = ButtonInternal --[[ @ 0]]
	NineSliceShaderImage = ButtonInternal.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	NineSliceShaderImage( f1_local2, f1_local4["socialRoot.playersListFull"], function ( f8_arg0 )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "socialRoot.playersListFull"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ButtonInternal --[[ @ 0]]
	NineSliceShaderImage = ButtonInternal.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	NineSliceShaderImage( f1_local2, f1_local4["socialRoot.showPlayersList"], function ( f9_arg0 )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "socialRoot.showPlayersList"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( ButtonInternal, "clientListFlags", true, function ( model )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientListFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local2 = ButtonInternal --[[ @ 0]]
	NineSliceShaderImage = ButtonInternal.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	NineSliceShaderImage( f1_local2, f1_local4["lobbyRoot.lobbyNav"], function ( f11_arg0 )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( ButtonInternal, "xuid", true, function ( model )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "xuid"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( ButtonInternal, "presence", true, function ( model )
		f1_arg0:updateElementState( ButtonInternal, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "presence"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonInternal:linkToElementModel( self, nil, false, function ( model )
		ButtonInternal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ButtonInternal ) --[[ @ 0]]
	self.ButtonInternal = ButtonInternal --[[ @ 0]]
	
	NineSliceShaderImage = CoD.CommonCheckbox.new( f1_arg0, f1_arg1, 0, 0, 0, 40, 0, 0, 0, 40 ) --[[ @ 0]]
	NineSliceShaderImage:mergeStateConditions( {
		{
			stateName = "Checked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "checked" )
			end
		}
	} ) --[[ @ 0]]
	NineSliceShaderImage:linkToElementModel( NineSliceShaderImage, "checked", true, function ( model )
		f1_arg0:updateElementState( NineSliceShaderImage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "checked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	NineSliceShaderImage:linkToElementModel( self, nil, false, function ( model )
		NineSliceShaderImage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( NineSliceShaderImage ) --[[ @ 0]]
	self.NineSliceShaderImage = NineSliceShaderImage --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "xuid", Engine[@"stringtoxuiddecimal"]( "0" ) )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "xuid", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "xuid"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "checked", true, function ( model, f20_arg1 )
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "checked" ) and not IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.SocialUtility.ToggleInviteCheckbox( controller, self ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.SocialUtility.ToggleInviteCheckbox( controller, self ) --[[ @ 0]]
			return true
		elseif IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "checked" ) and IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.SocialUtility.ToggleAddCheckbox( controller, self ) --[[ @ 0]]
			return true
		elseif IsPC() and IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.SocialUtility.ToggleAddCheckbox( controller, self ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "checked" ) and not IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsPC() and not IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsPC() and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "checked" ) and IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsPC() and IsCurrentMenu( menu, "Leaderboards_PlayersList" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	ButtonInternal.id = "ButtonInternal" --[[ @ 0]]
	if CoD.isPC then
		NineSliceShaderImage.id = "NineSliceShaderImage" --[[ @ 0]]
	end
	self.__defaultFocus = ButtonInternal --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local2 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupRightClickableContextualPlayerMenu( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.__resetProperties = function ( f23_arg0 )
	f23_arg0.NineSliceShaderImage:completeAnimation() --[[ @ 0]]
	f23_arg0.NineSliceShaderImage:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Empty = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.NineSliceShaderImage:completeAnimation() --[[ @ 0]]
			f25_arg0.NineSliceShaderImage:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NineSliceShaderImage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Social_PlayersListButtonWithCheckbox.__onClose = function ( f26_arg0 )
	f26_arg0.ButtonInternal:close() --[[ @ 0]]
	f26_arg0.NineSliceShaderImage:close() --[[ @ 0]]
end
 --[[ @ 0]]
