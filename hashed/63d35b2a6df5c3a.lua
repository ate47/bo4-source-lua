-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:57412e6c494ab1c8" ) --[[ @ 0]]
require( "x64:634cd2d86af1385e" ) --[[ @ 0]]
require( "x64:6cf90a501f0cd8ba" ) --[[ @ 0]]
require( "x64:3a3f1c7ee8f95b76" ) --[[ @ 0]]
require( "x64:7e32fe30fe56b49b" ) --[[ @ 0]]

CoD.AmmoWidgetMP_Ultimate = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.__defaultWidth = 268 --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.__defaultHeight = 120 --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetMP_Ultimate ) --[[ @ 0]]
	self.id = "AmmoWidgetMP_Ultimate" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local UltimateRadialMeterwipe = CoD.AmmoWidgetMP_Ultimate_Internal.new( f1_arg0, f1_arg1, 0, 0, 1, 270, 0, 0, 0, 152 ) --[[ @ 0]]
	UltimateRadialMeterwipe:setScale( 1.1, 1.1 ) --[[ @ 0]]
	UltimateRadialMeterwipe:linkToElementModel( self, nil, false, function ( model )
		UltimateRadialMeterwipe:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( UltimateRadialMeterwipe ) --[[ @ 0]]
	self.UltimateRadialMeterwipe = UltimateRadialMeterwipe --[[ @ 0]]
	
	local AmmoWidgetMPAbilityItem = CoD.AmmoWidgetMP_AbilityItem.new( f1_arg0, f1_arg1, 0, 0, 189, 261, 0, 0, 32, 91 ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem.HeroAbilityUseString.HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_260A07A7C41A40AA" ) ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem.HeroAbilityUseString.HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_260A07A7C41A40AA" ) ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem:subscribeToGlobalModel( f1_arg1, "PlayerAbilities", "playerGadget0", function ( model )
		AmmoWidgetMPAbilityItem:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AmmoWidgetMPAbilityItem ) --[[ @ 0]]
	self.AmmoWidgetMPAbilityItem = AmmoWidgetMPAbilityItem --[[ @ 0]]
	
	local HealCooldown = CoD.AmmowidgetMP_HealCooldown.new( f1_arg0, f1_arg1, 0, 0, 8, 80, 0, 0, 31.5, 90.5 ) --[[ @ 0]]
	HealCooldown:subscribeToGlobalModel( f1_arg1, "PlayerAbilities", "playerGadget1", function ( model )
		HealCooldown:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HealCooldown ) --[[ @ 0]]
	self.HealCooldown = HealCooldown --[[ @ 0]]
	
	local CodCasterLoadoutSelection = CoD.CodCasterLoadoutSelectionSpec.new( f1_arg0, f1_arg1, 0.5, 0.5, -30, 30, 0.5, 0.5, -28, 32 ) --[[ @ 0]]
	CodCasterLoadoutSelection:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CodCasterLoadoutSelection ) --[[ @ 0]]
	self.CodCasterLoadoutSelection = CodCasterLoadoutSelection --[[ @ 0]]
	
	local EMPbacker = LUI.UIImage.new( 0, 0, 3, 263, 0, 0, 5, 118 ) --[[ @ 0]]
	EMPbacker:setRGB( 0, 0, 0 ) --[[ @ 0]]
	EMPbacker:setAlpha( 0 ) --[[ @ 0]]
	EMPbacker:setScale( 1.1, 1.1 ) --[[ @ 0]]
	EMPbacker:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_ultimate" ) ) --[[ @ 0]]
	EMPbacker:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( EMPbacker ) --[[ @ 0]]
	self.EMPbacker = EMPbacker --[[ @ 0]]
	
	local UltimateHacked = LUI.UIImage.new( 0, 0, 9, 253, 0, 0, 9, 117 ) --[[ @ 0]]
	UltimateHacked:setAlpha( 0 ) --[[ @ 0]]
	UltimateHacked:setScale( 1.2, 1.2 ) --[[ @ 0]]
	UltimateHacked:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_ultimate" ) ) --[[ @ 0]]
	UltimateHacked:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_emp" ) ) --[[ @ 0]]
	UltimateHacked:setShaderVector( 0, 20, 0, 0, 0 ) --[[ @ 0]]
	UltimateHacked:setShaderVector( 1, 1, 0, 0, 0 ) --[[ @ 0]]
	UltimateHacked:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( UltimateHacked ) --[[ @ 0]]
	self.UltimateHacked = UltimateHacked --[[ @ 0]]
	
	local Hacked = CoD.hud_hacked_hero_widget.new( f1_arg0, f1_arg1, 0, 0, -4, 270, 0, 0, -5.5, 132.5 ) --[[ @ 0]]
	self:addElement( Hacked ) --[[ @ 0]]
	self.Hacked = Hacked --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "EMP",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_weapon_hud_visible"] ) and not IsCodCaster( f1_arg1 ) then
					f5_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
					if f5_local0 then
						f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
					end
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		},
		{
			stateName = "VisiblePC",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
				if f6_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_weapon_hud_visible"] ) and not IsCodCaster( f1_arg1 ) then
						f6_local0 = IsPC() --[[ @ 0]]
						if f6_local0 then
							f6_local0 = not CoD.HUDUtility.IsGameTypeEqualToString( "oic" ) --[[ @ 0]]
						end
					else
						f6_local0 = false --[[ @ 0]]
					end
				end
				return f6_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f7_local0 = CoD.ModelUtility.IsModelValueTrue( f1_arg1, "hudItems.playerSpawned" ) --[[ @ 0]]
				if f7_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) and Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_weapon_hud_visible"] ) and not IsCodCaster( f1_arg1 ) then
						f7_local0 = not CoD.HUDUtility.IsGameTypeEqualToString( "oic" ) --[[ @ 0]]
					else
						f7_local0 = false --[[ @ 0]]
					end
				end
				return f7_local0
			end
		},
		{
			stateName = "EMPCodCaster",
			condition = function ( menu, element, event )
				local f8_local0 = IsCodCaster( f1_arg1 ) --[[ @ 0]]
				if f8_local0 then
					f8_local0 = IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_ds_inventory", 1 ) --[[ @ 0]]
					if f8_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) then
							f8_local0 = IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_qs_playerhud", 1 ) --[[ @ 0]]
							if f8_local0 then
								if not CoD.CodCasterUtility.CodCasterIsInAerialCam( f1_arg1 ) then
									f8_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "HUDItems", "hacked", 1 ) --[[ @ 0]]
								else
									f8_local0 = false --[[ @ 0]]
								end
							else
								return f8_local0
							end
						end
						f8_local0 = false --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "VisibleCodCaster",
			condition = function ( menu, element, event )
				local f9_local0 = IsCodCaster( f1_arg1 ) --[[ @ 0]]
				if f9_local0 then
					f9_local0 = IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_ds_inventory", 1 ) --[[ @ 0]]
					if f9_local0 then
						if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) then
							f9_local0 = IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_qs_playerhud", 1 ) --[[ @ 0]]
							if f9_local0 then
								f9_local0 = not CoD.CodCasterUtility.CodCasterIsInAerialCam( f1_arg1 ) --[[ @ 0]]
							end
						else
							f9_local0 = false --[[ @ 0]]
						end
					end
				end
				return f9_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_weapon_hud_visible"]], function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_weapon_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["factions.isCoDCaster"], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["hudItems.playerSpawned"], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "hudItems.playerSpawned"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.profileSettingsUpdated, function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]], function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_57EAF988DDEB83EA"]], function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_57EAF988DDEB83EA"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.hacked, function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.__resetProperties = function ( f32_arg0 )
	f32_arg0.UltimateRadialMeterwipe:completeAnimation() --[[ @ 0]]
	f32_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
	f32_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
	f32_arg0.UltimateHacked:completeAnimation() --[[ @ 0]]
	f32_arg0.EMPbacker:completeAnimation() --[[ @ 0]]
	f32_arg0.CodCasterLoadoutSelection:completeAnimation() --[[ @ 0]]
	f32_arg0.UltimateRadialMeterwipe:setLeftRight( 0, 0, 1, 270 ) --[[ @ 0]]
	f32_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, 0, 152 ) --[[ @ 0]]
	f32_arg0.UltimateRadialMeterwipe:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.AmmoWidgetMPAbilityItem:setLeftRight( 0, 0, 189, 261 ) --[[ @ 0]]
	f32_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, 32, 91 ) --[[ @ 0]]
	f32_arg0.AmmoWidgetMPAbilityItem:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.HealCooldown:setTopBottom( 0, 0, 31.5, 90.5 ) --[[ @ 0]]
	f32_arg0.HealCooldown:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.UltimateHacked:setAlpha( 0 ) --[[ @ 0]]
	f32_arg0.EMPbacker:setAlpha( 0 ) --[[ @ 0]]
	f32_arg0.CodCasterLoadoutSelection:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f33_arg0.UltimateRadialMeterwipe:completeAnimation() --[[ @ 0]]
			f33_arg0.UltimateRadialMeterwipe:setLeftRight( 0, 0, -28.5, 101.5 ) --[[ @ 0]]
			f33_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, -59, 93 ) --[[ @ 0]]
			f33_arg0.UltimateRadialMeterwipe:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.UltimateRadialMeterwipe ) --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityItem:setLeftRight( 0, 0, 122, 194 ) --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, -29.5, 29.5 ) --[[ @ 0]]
			f33_arg0.AmmoWidgetMPAbilityItem:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.AmmoWidgetMPAbilityItem ) --[[ @ 0]]
			f33_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
			f33_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.HealCooldown ) --[[ @ 0]]
		end
	},
	EMP = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f34_arg0.UltimateRadialMeterwipe:completeAnimation() --[[ @ 0]]
			f34_arg0.UltimateRadialMeterwipe:setLeftRight( 0, 0, -28.5, 101.5 ) --[[ @ 0]]
			f34_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, -59, 93 ) --[[ @ 0]]
			f34_arg0.UltimateRadialMeterwipe:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.UltimateRadialMeterwipe ) --[[ @ 0]]
			f34_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
			f34_arg0.AmmoWidgetMPAbilityItem:setLeftRight( 0, 0, 122, 194 ) --[[ @ 0]]
			f34_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, -29.5, 29.5 ) --[[ @ 0]]
			f34_arg0.AmmoWidgetMPAbilityItem:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.AmmoWidgetMPAbilityItem ) --[[ @ 0]]
			f34_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
			f34_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.HealCooldown ) --[[ @ 0]]
			f34_arg0.EMPbacker:completeAnimation() --[[ @ 0]]
			f34_arg0.EMPbacker:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.EMPbacker ) --[[ @ 0]]
			f34_arg0.UltimateHacked:completeAnimation() --[[ @ 0]]
			f34_arg0.UltimateHacked:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.UltimateHacked ) --[[ @ 0]]
		end,
		Visible = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f35_local0 = function ( f36_arg0 )
				f35_arg0.UltimateRadialMeterwipe:beginAnimation( 600, Enum[@"luitween"][@"luitween_ease_both"] ) --[[ @ 0]]
				f35_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, 0, 152 ) --[[ @ 0]]
				f35_arg0.UltimateRadialMeterwipe:setAlpha( 1 ) --[[ @ 0]]
				f35_arg0.UltimateRadialMeterwipe:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.UltimateRadialMeterwipe:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.UltimateRadialMeterwipe:completeAnimation() --[[ @ 0]]
			f35_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, 20, 20 ) --[[ @ 0]]
			f35_arg0.UltimateRadialMeterwipe:setAlpha( 0 ) --[[ @ 0]]
			f35_local0( f35_arg0.UltimateRadialMeterwipe ) --[[ @ 0]]
			local f35_local1 = function ( f37_arg0 )
				f35_arg0.AmmoWidgetMPAbilityItem:beginAnimation( 600, Enum[@"luitween"][@"luitween_ease_both"] ) --[[ @ 0]]
				f35_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, 32, 91 ) --[[ @ 0]]
				f35_arg0.AmmoWidgetMPAbilityItem:setAlpha( 1 ) --[[ @ 0]]
				f35_arg0.AmmoWidgetMPAbilityItem:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.AmmoWidgetMPAbilityItem:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
			f35_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, 61, 120 ) --[[ @ 0]]
			f35_arg0.AmmoWidgetMPAbilityItem:setAlpha( 0 ) --[[ @ 0]]
			f35_local1( f35_arg0.AmmoWidgetMPAbilityItem ) --[[ @ 0]]
			local f35_local2 = function ( f38_arg0 )
				f35_arg0.HealCooldown:beginAnimation( 600, Enum[@"luitween"][@"luitween_ease_both"] ) --[[ @ 0]]
				f35_arg0.HealCooldown:setTopBottom( 0, 0, 30.5, 89.5 ) --[[ @ 0]]
				f35_arg0.HealCooldown:setAlpha( 1 ) --[[ @ 0]]
				f35_arg0.HealCooldown:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.HealCooldown:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
			f35_arg0.HealCooldown:setTopBottom( 0, 0, 59.5, 118.5 ) --[[ @ 0]]
			f35_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
			f35_local2( f35_arg0.HealCooldown ) --[[ @ 0]]
			f35_arg0.UltimateHacked:completeAnimation() --[[ @ 0]]
			f35_arg0.UltimateHacked:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.UltimateHacked ) --[[ @ 0]]
		end,
		VisiblePC = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f39_local0 = function ( f40_arg0 )
				f39_arg0.UltimateRadialMeterwipe:beginAnimation( 200 ) --[[ @ 0]]
				f39_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, 0, 152 ) --[[ @ 0]]
				f39_arg0.UltimateRadialMeterwipe:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.UltimateRadialMeterwipe:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.UltimateRadialMeterwipe:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.UltimateRadialMeterwipe:completeAnimation() --[[ @ 0]]
			f39_arg0.UltimateRadialMeterwipe:setTopBottom( 0, 0, 20, 20 ) --[[ @ 0]]
			f39_arg0.UltimateRadialMeterwipe:setAlpha( 0 ) --[[ @ 0]]
			f39_local0( f39_arg0.UltimateRadialMeterwipe ) --[[ @ 0]]
			local f39_local1 = function ( f41_arg0 )
				f39_arg0.AmmoWidgetMPAbilityItem:beginAnimation( 200 ) --[[ @ 0]]
				f39_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, 32, 91 ) --[[ @ 0]]
				f39_arg0.AmmoWidgetMPAbilityItem:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.AmmoWidgetMPAbilityItem:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.AmmoWidgetMPAbilityItem:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
			f39_arg0.AmmoWidgetMPAbilityItem:setTopBottom( 0, 0, 61, 120 ) --[[ @ 0]]
			f39_arg0.AmmoWidgetMPAbilityItem:setAlpha( 0 ) --[[ @ 0]]
			f39_local1( f39_arg0.AmmoWidgetMPAbilityItem ) --[[ @ 0]]
			local f39_local2 = function ( f42_arg0 )
				f39_arg0.HealCooldown:beginAnimation( 200 ) --[[ @ 0]]
				f39_arg0.HealCooldown:setTopBottom( 0, 0, 30.5, 89.5 ) --[[ @ 0]]
				f39_arg0.HealCooldown:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.HealCooldown:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.HealCooldown:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.HealCooldown:completeAnimation() --[[ @ 0]]
			f39_arg0.HealCooldown:setTopBottom( 0, 0, 59.5, 118.5 ) --[[ @ 0]]
			f39_arg0.HealCooldown:setAlpha( 0 ) --[[ @ 0]]
			f39_local2( f39_arg0.HealCooldown ) --[[ @ 0]]
		end
	},
	VisiblePC = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f44_arg0.CodCasterLoadoutSelection:completeAnimation() --[[ @ 0]]
			f44_arg0.CodCasterLoadoutSelection:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.CodCasterLoadoutSelection ) --[[ @ 0]]
		end
	},
	EMPCodCaster = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	VisibleCodCaster = {
		DefaultClip = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetMP_Ultimate.__onClose = function ( f47_arg0 )
	f47_arg0.UltimateRadialMeterwipe:close() --[[ @ 0]]
	f47_arg0.AmmoWidgetMPAbilityItem:close() --[[ @ 0]]
	f47_arg0.HealCooldown:close() --[[ @ 0]]
	f47_arg0.CodCasterLoadoutSelection:close() --[[ @ 0]]
	f47_arg0.Hacked:close() --[[ @ 0]]
end
 --[[ @ 0]]
