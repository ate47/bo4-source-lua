-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:25bf4b6f49c15a4c" ) --[[ @ 0]]
require( "x64:63cc932d9389bc48" ) --[[ @ 0]]

CoD.WarzoneInventoryMenuItemAttachmentSmall = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.__defaultWidth = 50 --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.__defaultHeight = 50 --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneInventoryMenuItemAttachmentSmall ) --[[ @ 0]]
	self.id = "WarzoneInventoryMenuItemAttachmentSmall" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local WarzoneQuickInventoryMenuItemAttachmentSmallInternal = CoD.WarzoneQuickInventoryMenuItemAttachmentSmall_Internal.new( f1_arg0, f1_arg1, 0, 0, 0, 50, 0, 0, -0.5, 49.5 ) --[[ @ 0]]
	WarzoneQuickInventoryMenuItemAttachmentSmallInternal:linkToElementModel( self, nil, false, function ( model )
		WarzoneQuickInventoryMenuItemAttachmentSmallInternal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WarzoneQuickInventoryMenuItemAttachmentSmallInternal ) --[[ @ 0]]
	self.WarzoneQuickInventoryMenuItemAttachmentSmallInternal = WarzoneQuickInventoryMenuItemAttachmentSmallInternal --[[ @ 0]]
	
	local NotAvailable = LUI.UIImage.new( 0.5, 0.5, -25, 25, 0.5, 0.5, -25, 25 ) --[[ @ 0]]
	NotAvailable:setAlpha( 0 ) --[[ @ 0]]
	NotAvailable:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_drop_x" ) ) --[[ @ 0]]
	NotAvailable:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( NotAvailable ) --[[ @ 0]]
	self.NotAvailable = NotAvailable --[[ @ 0]]
	
	local PickupPulse = CoD.WarzoneInventoryPickupPulse.new( f1_arg0, f1_arg1, 0.5, 0.5, -25, 25, 0.5, 0.5, -25, 25 ) --[[ @ 0]]
	self:addElement( PickupPulse ) --[[ @ 0]]
	self.PickupPulse = PickupPulse --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "disabled", 1 )
			end
		},
		{
			stateName = "NotAvailable",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "notAvailable", 1 )
			end
		},
		{
			stateName = "FocusTarget",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "focusTarget", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "disabled", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "notAvailable", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "notAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "focusTarget", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "focusTarget"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f9_arg2, f9_arg3, f9_arg4 )
		if CoD.BaseUtility.IsSelfInState( self, "FocusTarget" ) and IsPC() then
			SetElementState( self, self.PickupPulse, controller, "PickUpPC" ) --[[ @ 0]]
		elseif CoD.BaseUtility.IsSelfInState( self, "FocusTarget" ) then
			SetElementState( self, self.PickupPulse, controller, "PickUp" ) --[[ @ 0]]
		else
			SetElementState( self, self.PickupPulse, controller, "DefaultState" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setModel", function ( element, controller )
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WarzoneQuickInventoryMenuItemAttachmentSmallInternal.id = "WarzoneQuickInventoryMenuItemAttachmentSmallInternal" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.__resetProperties = function ( f11_arg0 )
	f11_arg0.PickupPulse:completeAnimation() --[[ @ 0]]
	f11_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal:completeAnimation() --[[ @ 0]]
	f11_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
	f11_arg0.PickupPulse:setAlpha( 1 ) --[[ @ 0]]
	f11_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal:setAlpha( 1 ) --[[ @ 0]]
	f11_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f13_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal:completeAnimation() --[[ @ 0]]
			f13_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal ) --[[ @ 0]]
			f13_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f13_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.NotAvailable ) --[[ @ 0]]
			f13_arg0.PickupPulse:completeAnimation() --[[ @ 0]]
			f13_arg0.PickupPulse:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.PickupPulse ) --[[ @ 0]]
		end
	},
	NotAvailable = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f14_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f14_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.NotAvailable ) --[[ @ 0]]
		end,
		ChildFocus = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f15_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f15_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.NotAvailable ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f16_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f16_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.NotAvailable ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f17_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.NotAvailable ) --[[ @ 0]]
		end
	},
	FocusTarget = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneInventoryMenuItemAttachmentSmall.__onClose = function ( f19_arg0 )
	f19_arg0.WarzoneQuickInventoryMenuItemAttachmentSmallInternal:close() --[[ @ 0]]
	f19_arg0.PickupPulse:close() --[[ @ 0]]
end
 --[[ @ 0]]
