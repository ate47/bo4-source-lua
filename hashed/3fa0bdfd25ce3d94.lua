-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/common/commoncornerpips01" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/colorpicker/emblemcolorelement" ) --[[ @ 0]]
require( "x64:b6da5f5f17e9c79" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/emblemeditor/emblemeditorframe" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]

CoD.EmblemEditorColorSwatchContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.__defaultWidth = 960 --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.__defaultHeight = 240 --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorColorSwatchContainer ) --[[ @ 0]]
	self.id = "EmblemEditorColorSwatchContainer" --[[ @ 0]]
	self.soundSet = "SelectColor_ColorSwatchPicker" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ColorPickerBkgd = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ColorPickerBkgd:setAlpha( 0.5 ) --[[ @ 0]]
	ColorPickerBkgd:setZRot( 180 ) --[[ @ 0]]
	ColorPickerBkgd:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ColorPickerBkgd:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ColorPickerBkgd ) --[[ @ 0]]
	self.ColorPickerBkgd = ColorPickerBkgd --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 0, 960, 0, 0, 0, 240 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local BarBacking = LUI.UIImage.new( 0, 0, 0, 960, 0, 0, 0, 240 ) --[[ @ 0]]
	BarBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( BarBacking ) --[[ @ 0]]
	self.BarBacking = BarBacking --[[ @ 0]]
	
	local ColorBacking = LUI.UIImage.new( 0, 0, 0, 960, 0, 0, 0, 202 ) --[[ @ 0]]
	ColorBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ColorBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( ColorBacking ) --[[ @ 0]]
	self.ColorBacking = ColorBacking --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 1, -1, 1, 0, 1, -1, 1 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local FooterStripe1 = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -38, 0 ) --[[ @ 0]]
	FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	FooterStripe1:setImage( RegisterImage( @"hash_2C7A051F5EFC70E5" ) ) --[[ @ 0]]
	FooterStripe1:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	FooterStripe1:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FooterStripe1:setupNineSliceShader( 245, 40 ) --[[ @ 0]]
	self:addElement( FooterStripe1 ) --[[ @ 0]]
	self.FooterStripe1 = FooterStripe1 --[[ @ 0]]
	
	local lastSavedColor = CoD.EmblemColorSaved.new( f1_arg0, f1_arg1, 0, 0, 7.5, 61.5, 0, 0, 10, 190 ) --[[ @ 0]]
	lastSavedColor:setScale( 1, 1.02 ) --[[ @ 0]]
	lastSavedColor:linkToElementModel( self, nil, false, function ( model )
		lastSavedColor:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local EmblemEditorFrame0 = lastSavedColor --[[ @ 0]]
	local emblemColorSwatch = lastSavedColor.subscribeToModel --[[ @ 0]]
	local toggleColorMixerButton = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	emblemColorSwatch( EmblemEditorFrame0, toggleColorMixerButton["Emblem.EmblemProperties.isGradientMode"], function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	lastSavedColor:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		if IsGamepad( f1_arg1 ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
		else
			CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
			CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( lastSavedColor, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 0 ) then
			GoBack( self, controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualTo( controller, "Emblem.EmblemProperties.isGradientMode", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( lastSavedColor, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( lastSavedColor ) --[[ @ 0]]
	self.lastSavedColor = lastSavedColor --[[ @ 0]]
	
	emblemColorSwatch = LUI.UIList.new( f1_arg0, f1_arg1, -1, 0, nil, false, false, false, false ) --[[ @ 0]]
	emblemColorSwatch:setLeftRight( 0, 0, 82, 954 ) --[[ @ 0]]
	emblemColorSwatch:setTopBottom( 0, 0, 6, 196 ) --[[ @ 0]]
	emblemColorSwatch:setWidgetType( CoD.EmblemColorElement ) --[[ @ 0]]
	emblemColorSwatch:setHorizontalCount( 13 ) --[[ @ 0]]
	emblemColorSwatch:setVerticalCount( 9 ) --[[ @ 0]]
	emblemColorSwatch:setSpacing( -1 ) --[[ @ 0]]
	emblemColorSwatch:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	emblemColorSwatch:setDataSource( "EmblemColorList" ) --[[ @ 0]]
	emblemColorSwatch:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if IsGamepad( f1_arg1 ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	emblemColorSwatch:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( emblemColorSwatch, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MOUSE1", function ( element, menu, controller, model )
		if IsPC() then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( emblemColorSwatch ) --[[ @ 0]]
	self.emblemColorSwatch = emblemColorSwatch --[[ @ 0]]
	
	EmblemEditorFrame0 = CoD.EmblemEditorFrame.new( f1_arg0, f1_arg1, 0, 0, 0, 960, 0, 0, 0, 240 ) --[[ @ 0]]
	self:addElement( EmblemEditorFrame0 ) --[[ @ 0]]
	self.EmblemEditorFrame0 = EmblemEditorFrame0 --[[ @ 0]]
	
	toggleColorMixerButton = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 16, 1010, 0, 0, 202, 248 ) --[[ @ 0]]
	toggleColorMixerButton:mergeStateConditions( {
		{
			stateName = "KM",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	toggleColorMixerButton:appendEventHandler( "input_source_changed", function ( f15_arg0, f15_arg1 )
		f15_arg1.menu = f15_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( toggleColorMixerButton, f15_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ColorFrame = toggleColorMixerButton --[[ @ 0]]
	local ColorCornerPips = toggleColorMixerButton.subscribeToModel --[[ @ 0]]
	local dividerV = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ColorCornerPips( ColorFrame, dividerV.LastInput, function ( f16_arg0 )
		f1_arg0:updateElementState( toggleColorMixerButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	toggleColorMixerButton.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_C8E4DA2A7FB0D28" ) ) --[[ @ 0]]
	toggleColorMixerButton:subscribeToGlobalModel( f1_arg1, "Controller", "back_button_image", function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			toggleColorMixerButton.buttonPromptImage:setImage( RegisterImage( f17_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( toggleColorMixerButton ) --[[ @ 0]]
	self.toggleColorMixerButton = toggleColorMixerButton --[[ @ 0]]
	
	ColorCornerPips = CoD.CommonCornerPips01.new( f1_arg0, f1_arg1, 0, 0, 6.5, 62.5, 0, 0, 6.5, 196.5 ) --[[ @ 0]]
	self:addElement( ColorCornerPips ) --[[ @ 0]]
	self.ColorCornerPips = ColorCornerPips --[[ @ 0]]
	
	ColorFrame = LUI.UIImage.new( 0, 0, 6, 63, 0, 0, 6.5, 196.5 ) --[[ @ 0]]
	ColorFrame:setAlpha( 0.5 ) --[[ @ 0]]
	ColorFrame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	ColorFrame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	ColorFrame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	ColorFrame:setupNineSliceShader( 4, 4 ) --[[ @ 0]]
	self:addElement( ColorFrame ) --[[ @ 0]]
	self.ColorFrame = ColorFrame --[[ @ 0]]
	
	dividerV = LUI.UIImage.new( 0.5, 0.5, -409.5, -405.5, 0, 0, 0.5, 202.5 ) --[[ @ 0]]
	dividerV:setAlpha( 0.1 ) --[[ @ 0]]
	dividerV:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	dividerV:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	dividerV:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerV:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( dividerV ) --[[ @ 0]]
	self.dividerV = dividerV --[[ @ 0]]
	
	local dividerH = LUI.UIImage.new( 0, 0, 0, 960, 0, 0, 201, 205 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEmblemEditorPropertyEqualTo( f1_arg1, "isGradientMode", 0 ) and CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_solid"] )
			end
		}
	} ) --[[ @ 0]]
	local f1_local15 = self --[[ @ 0]]
	local f1_local16 = self.subscribeToModel --[[ @ 0]]
	local f1_local17 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.isGradientMode, function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "isGradientMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.colorMode, function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "colorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	lastSavedColor.id = "lastSavedColor" --[[ @ 0]]
	emblemColorSwatch.id = "emblemColorSwatch" --[[ @ 0]]
	self.__defaultFocus = lastSavedColor --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.__resetProperties = function ( f21_arg0 )
	f21_arg0.toggleColorMixerButton:completeAnimation() --[[ @ 0]]
	f21_arg0.EmblemEditorFrame0:completeAnimation() --[[ @ 0]]
	f21_arg0.emblemColorSwatch:completeAnimation() --[[ @ 0]]
	f21_arg0.lastSavedColor:completeAnimation() --[[ @ 0]]
	f21_arg0.dividerH:completeAnimation() --[[ @ 0]]
	f21_arg0.dividerV:completeAnimation() --[[ @ 0]]
	f21_arg0.ColorFrame:completeAnimation() --[[ @ 0]]
	f21_arg0.ColorCornerPips:completeAnimation() --[[ @ 0]]
	f21_arg0.ColorBacking:completeAnimation() --[[ @ 0]]
	f21_arg0.FooterStripe1:completeAnimation() --[[ @ 0]]
	f21_arg0.BarBacking:completeAnimation() --[[ @ 0]]
	f21_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f21_arg0.ColorPickerBkgd:completeAnimation() --[[ @ 0]]
	f21_arg0.Frame:completeAnimation() --[[ @ 0]]
	f21_arg0.toggleColorMixerButton:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.EmblemEditorFrame0:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.emblemColorSwatch:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.lastSavedColor:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	f21_arg0.dividerV:setAlpha( 0.1 ) --[[ @ 0]]
	f21_arg0.ColorFrame:setAlpha( 0.5 ) --[[ @ 0]]
	f21_arg0.ColorCornerPips:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.ColorBacking:setAlpha( 0.3 ) --[[ @ 0]]
	f21_arg0.FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	f21_arg0.BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	f21_arg0.NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	f21_arg0.ColorPickerBkgd:setAlpha( 0.5 ) --[[ @ 0]]
	f21_arg0.Frame:setAlpha( 0.2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 14 ) --[[ @ 0]]
			f22_arg0.ColorPickerBkgd:completeAnimation() --[[ @ 0]]
			f22_arg0.ColorPickerBkgd:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ColorPickerBkgd ) --[[ @ 0]]
			f22_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f22_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f22_arg0.BarBacking:completeAnimation() --[[ @ 0]]
			f22_arg0.BarBacking:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.BarBacking ) --[[ @ 0]]
			f22_arg0.ColorBacking:completeAnimation() --[[ @ 0]]
			f22_arg0.ColorBacking:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ColorBacking ) --[[ @ 0]]
			f22_arg0.Frame:completeAnimation() --[[ @ 0]]
			f22_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.Frame ) --[[ @ 0]]
			f22_arg0.FooterStripe1:completeAnimation() --[[ @ 0]]
			f22_arg0.FooterStripe1:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.FooterStripe1 ) --[[ @ 0]]
			f22_arg0.lastSavedColor:completeAnimation() --[[ @ 0]]
			f22_arg0.lastSavedColor:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.lastSavedColor ) --[[ @ 0]]
			f22_arg0.emblemColorSwatch:completeAnimation() --[[ @ 0]]
			f22_arg0.emblemColorSwatch:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.emblemColorSwatch ) --[[ @ 0]]
			f22_arg0.EmblemEditorFrame0:completeAnimation() --[[ @ 0]]
			f22_arg0.EmblemEditorFrame0:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.EmblemEditorFrame0 ) --[[ @ 0]]
			f22_arg0.toggleColorMixerButton:completeAnimation() --[[ @ 0]]
			f22_arg0.toggleColorMixerButton:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.toggleColorMixerButton ) --[[ @ 0]]
			f22_arg0.ColorCornerPips:completeAnimation() --[[ @ 0]]
			f22_arg0.ColorCornerPips:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ColorCornerPips ) --[[ @ 0]]
			f22_arg0.ColorFrame:completeAnimation() --[[ @ 0]]
			f22_arg0.ColorFrame:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ColorFrame ) --[[ @ 0]]
			f22_arg0.dividerV:completeAnimation() --[[ @ 0]]
			f22_arg0.dividerV:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.dividerV ) --[[ @ 0]]
			f22_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f22_arg0.dividerH:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.dividerH ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditorColorSwatchContainer.__onClose = function ( f24_arg0 )
	f24_arg0.lastSavedColor:close() --[[ @ 0]]
	f24_arg0.emblemColorSwatch:close() --[[ @ 0]]
	f24_arg0.EmblemEditorFrame0:close() --[[ @ 0]]
	f24_arg0.toggleColorMixerButton:close() --[[ @ 0]]
	f24_arg0.ColorCornerPips:close() --[[ @ 0]]
end
 --[[ @ 0]]
