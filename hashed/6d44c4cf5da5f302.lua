-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
CoD.CodCasterTimer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CodCasterTimer.__defaultWidth = 108 --[[ @ 0]]
CoD.CodCasterTimer.__defaultHeight = 54 --[[ @ 0]]
CoD.CodCasterTimer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CodCasterTimer ) --[[ @ 0]]
	self.id = "CodCasterTimer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local GameTimer = LUI.UIText.new( 0.5, 0.5, -46, 46, 0, 0, 6, 31 ) --[[ @ 0]]
	GameTimer:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	GameTimer:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	GameTimer:setupGameTimer() --[[ @ 0]]
	GameTimer:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( GameTimer ) --[[ @ 0]]
	self.GameTimer = GameTimer --[[ @ 0]]
	
	local NoTimeLimit = LUI.UIText.new( 0.5, 0.5, -54, 54, 0, 0, 9, 27 ) --[[ @ 0]]
	NoTimeLimit:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_18E8304D25283DA6" ) ) --[[ @ 0]]
	NoTimeLimit:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	NoTimeLimit:setLetterSpacing( -0.5 ) --[[ @ 0]]
	NoTimeLimit:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	NoTimeLimit:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( NoTimeLimit ) --[[ @ 0]]
	self.NoTimeLimit = NoTimeLimit --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "gameScore.gameTimeEnd", 0 ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "gameScore.gameTimeLow", 1 )
			end
		},
		{
			stateName = "TimeLow",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueGreaterThan( f1_arg1, "gameScore.gameTimeEnd", 0 )
			end
		},
		{
			stateName = "NoTimeLimit",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "gameScore.gameTimeLimit", 0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local3 = self --[[ @ 0]]
	local f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["gameScore.gameTimeEnd"], function ( f5_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "gameScore.gameTimeEnd"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = self --[[ @ 0]]
	f1_local4 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["gameScore.gameTimeLow"], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "gameScore.gameTimeLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = self --[[ @ 0]]
	f1_local4 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5["gameScore.gameTimeLimit"], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "gameScore.gameTimeLimit"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CodCasterTimer.__resetProperties = function ( f8_arg0 )
	f8_arg0.GameTimer:completeAnimation() --[[ @ 0]]
	f8_arg0.NoTimeLimit:completeAnimation() --[[ @ 0]]
	f8_arg0.GameTimer:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f8_arg0.GameTimer:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.NoTimeLimit:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CodCasterTimer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f9_arg0.GameTimer:completeAnimation() --[[ @ 0]]
			f9_arg0.GameTimer:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.GameTimer ) --[[ @ 0]]
			f9_arg0.NoTimeLimit:completeAnimation() --[[ @ 0]]
			f9_arg0.NoTimeLimit:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.NoTimeLimit ) --[[ @ 0]]
		end
	},
	Active = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.NoTimeLimit:completeAnimation() --[[ @ 0]]
			f10_arg0.NoTimeLimit:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.NoTimeLimit ) --[[ @ 0]]
		end
	},
	TimeLow = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.GameTimer:completeAnimation() --[[ @ 0]]
			f11_arg0.GameTimer:setRGB( 1, 0, 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.GameTimer ) --[[ @ 0]]
			f11_arg0.NoTimeLimit:completeAnimation() --[[ @ 0]]
			f11_arg0.NoTimeLimit:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.NoTimeLimit ) --[[ @ 0]]
		end
	},
	NoTimeLimit = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f12_arg0.GameTimer:completeAnimation() --[[ @ 0]]
			f12_arg0.GameTimer:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.GameTimer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
