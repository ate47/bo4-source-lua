-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/buttonprogressring" ) --[[ @ 0]]

CoD.VehicleHoldButtonPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.VehicleHoldButtonPrompt.__defaultWidth = 200 --[[ @ 0]]
CoD.VehicleHoldButtonPrompt.__defaultHeight = 48 --[[ @ 0]]
CoD.VehicleHoldButtonPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.VehicleHoldButtonPrompt ) --[[ @ 0]]
	self.id = "VehicleHoldButtonPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local buttonPromptImage = LUI.UIImage.new( 0, 0, 6, 36, 0, 0, 9, 39 ) --[[ @ 0]]
	buttonPromptImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
	buttonPromptImage:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( buttonPromptImage ) --[[ @ 0]]
	self.buttonPromptImage = buttonPromptImage --[[ @ 0]]
	
	local label = LUI.UIText.new( 0, 0, 46, 200, 0, 0, 16, 30 ) --[[ @ 0]]
	label:setText( LocalizeToUpperString( @"hash_0" ) ) --[[ @ 0]]
	label:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	label:setLetterSpacing( 2 ) --[[ @ 0]]
	label:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( label, "setText", function ( element, controller )
		ScaleWidgetToLabel( self, element, -35 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( label ) --[[ @ 0]]
	self.label = label --[[ @ 0]]
	
	local progressRing = CoD.ButtonProgressRing.new( f1_arg0, f1_arg1, 0, 0, 0, 42, 0, 0, 3, 45 ) --[[ @ 0]]
	progressRing:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNilOrZero( element, f1_arg1, "holdToExitProgress" )
			end
		}
	} ) --[[ @ 0]]
	progressRing:linkToElementModel( progressRing, "holdToExitProgress", true, function ( model )
		f1_arg0:updateElementState( progressRing, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "holdToExitProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	progressRing:linkToElementModel( self, nil, false, function ( model )
		progressRing:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	progressRing:linkToElementModel( self, "holdToExitProgress", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			progressRing.progressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( progressRing ) --[[ @ 0]]
	self.progressRing = progressRing --[[ @ 0]]
	
	local KeyboardAction = nil --[[ @ 0]]
	
	KeyboardAction = LUI.UIText.new( 0, 0, 4.5, 37.5, 0, 0, 5, 43 ) --[[ @ 0]]
	KeyboardAction:setRGB( 1, 1, 0.5 ) --[[ @ 0]]
	KeyboardAction:setAlpha( 0 ) --[[ @ 0]]
	KeyboardAction:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5F17B1BF58DB2590" ) ) --[[ @ 0]]
	KeyboardAction:setTTF( "default" ) --[[ @ 0]]
	KeyboardAction:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	KeyboardAction:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( KeyboardAction ) --[[ @ 0]]
	self.KeyboardAction = KeyboardAction --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "VisiblePC",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "enableVehicleExitPrompt" ) and not IsGamepad( f1_arg1 )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "enableVehicleExitPrompt" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "enableVehicleExitPrompt", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "enableVehicleExitPrompt"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f10_arg0, f10_arg1 )
		f10_arg1.menu = f10_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f10_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f12_arg2, f12_arg3, f12_arg4 )
		if IsSelfInState( self, "Visible" ) then
			ShowWidget( element ) --[[ @ 0]]
		elseif IsSelfInState( self, "VisiblePC" ) then
			ShowWidget( element ) --[[ @ 0]]
		else
			HideWidget( element ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.VehicleHoldButtonPrompt.__resetProperties = function ( f13_arg0 )
	f13_arg0.label:completeAnimation() --[[ @ 0]]
	f13_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
	f13_arg0.progressRing:completeAnimation() --[[ @ 0]]
	f13_arg0.KeyboardAction:completeAnimation() --[[ @ 0]]
	f13_arg0.label:setLeftRight( 0, 0, 46, 200 ) --[[ @ 0]]
	f13_arg0.label:setTopBottom( 0, 0, 16, 30 ) --[[ @ 0]]
	f13_arg0.label:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.buttonPromptImage:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.progressRing:setLeftRight( 0, 0, 0, 42 ) --[[ @ 0]]
	f13_arg0.progressRing:setTopBottom( 0, 0, 3, 45 ) --[[ @ 0]]
	f13_arg0.progressRing:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.KeyboardAction:setLeftRight( 0, 0, 4.5, 37.5 ) --[[ @ 0]]
	f13_arg0.KeyboardAction:setTopBottom( 0, 0, 5, 43 ) --[[ @ 0]]
	f13_arg0.KeyboardAction:setAlpha( 0 ) --[[ @ 0]]
	f13_arg0.KeyboardAction:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.VehicleHoldButtonPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f14_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
			f14_arg0.buttonPromptImage:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.buttonPromptImage ) --[[ @ 0]]
			f14_arg0.label:completeAnimation() --[[ @ 0]]
			f14_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.label ) --[[ @ 0]]
			f14_arg0.progressRing:completeAnimation() --[[ @ 0]]
			f14_arg0.progressRing:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.progressRing ) --[[ @ 0]]
		end
	},
	VisiblePC = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f15_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
			f15_arg0.buttonPromptImage:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.buttonPromptImage ) --[[ @ 0]]
			f15_arg0.label:completeAnimation() --[[ @ 0]]
			f15_arg0.label:setLeftRight( 0, 0, 19, 173 ) --[[ @ 0]]
			f15_arg0.label:setTopBottom( 0, 0, 10, 24 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.label ) --[[ @ 0]]
			f15_arg0.progressRing:completeAnimation() --[[ @ 0]]
			f15_arg0.progressRing:setLeftRight( 0, 0, -15, 27 ) --[[ @ 0]]
			f15_arg0.progressRing:setTopBottom( 0, 0, -2, 40 ) --[[ @ 0]]
			f15_arg0.progressRing:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.progressRing ) --[[ @ 0]]
			f15_arg0.KeyboardAction:completeAnimation() --[[ @ 0]]
			f15_arg0.KeyboardAction:setLeftRight( 0, 0, -66, 10 ) --[[ @ 0]]
			f15_arg0.KeyboardAction:setTopBottom( 0.5, 0.5, -22.5, 4.5 ) --[[ @ 0]]
			f15_arg0.KeyboardAction:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.KeyboardAction:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.KeyboardAction ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.VehicleHoldButtonPrompt.__clipsPerState.VisiblePC.DefaultClip = nil --[[ @ 0]]
end
CoD.VehicleHoldButtonPrompt.__onClose = function ( f17_arg0 )
	f17_arg0.progressRing:close() --[[ @ 0]]
end
 --[[ @ 0]]
