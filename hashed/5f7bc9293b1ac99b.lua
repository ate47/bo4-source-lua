-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:2266118fa96f77c8" ) --[[ @ 0]]
require( "x64:73c21aa1a96202c9" ) --[[ @ 0]]
require( "x64:44dd810316f738ee" ) --[[ @ 0]]
require( "x64:368036bda8abbe94" ) --[[ @ 0]]
require( "x64:7d18f710d30d4ebf" ) --[[ @ 0]]
require( "x64:67935bd4c2250126" ) --[[ @ 0]]
require( "x64:3cc6addeefa5a0d" ) --[[ @ 0]]
require( "x64:5f014b1ac7714f9" ) --[[ @ 0]]
require( "x64:12cf29605adab948" ) --[[ @ 0]]
require( "ui/uieditor/widgets/store/storecommontextbacking" ) --[[ @ 0]]

CoD.ContractTall = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ContractTall.__defaultWidth = 236 --[[ @ 0]]
CoD.ContractTall.__defaultHeight = 506 --[[ @ 0]]
CoD.ContractTall.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ContractTall ) --[[ @ 0]]
	self.id = "ContractTall" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FeaturedImage = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -118, 118, 0, 0, 0, 506 ) --[[ @ 0]]
	FeaturedImage:setStretchedDimension( 6 ) --[[ @ 0]]
	FeaturedImage:linkToElementModel( self, "inventoryIcon", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			FeaturedImage:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FeaturedImage ) --[[ @ 0]]
	self.FeaturedImage = FeaturedImage --[[ @ 0]]
	
	local TextBacking = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -94, 0 ) --[[ @ 0]]
	TextBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	TextBacking:setAlpha( 0.85 ) --[[ @ 0]]
	self:addElement( TextBacking ) --[[ @ 0]]
	self.TextBacking = TextBacking --[[ @ 0]]
	
	local DotTiledBacking = CoD.StoreCommonTextBacking.new( f1_arg0, f1_arg1, 0, 1, 4, -4, 1, 1, -90.5, -3.5 ) --[[ @ 0]]
	DotTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	DotTiledBacking.NoiseBacking:setAlpha( 0 ) --[[ @ 0]]
	DotTiledBacking.TiledShaderImage:setAlpha( 0.5 ) --[[ @ 0]]
	DotTiledBacking.TiledShaderImage:setupNineSliceShader( 32, 32 ) --[[ @ 0]]
	self:addElement( DotTiledBacking ) --[[ @ 0]]
	self.DotTiledBacking = DotTiledBacking --[[ @ 0]]
	
	local ContractRarityHeaderBackground = LUI.UIImage.new( 0, 0, 0, 236, 0, 0, 7.5, 28.5 ) --[[ @ 0]]
	ContractRarityHeaderBackground:setAlpha( 0.7 ) --[[ @ 0]]
	ContractRarityHeaderBackground:linkToElementModel( self, "rarity", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ContractRarityHeaderBackground:setRGB( CoD.BlackMarketUtility.LootRarityToColorDark( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeaderBackground ) --[[ @ 0]]
	self.ContractRarityHeaderBackground = ContractRarityHeaderBackground --[[ @ 0]]
	
	local ContractRarityHeaderTile = CoD.ContractRarityHeaderTile.new( f1_arg0, f1_arg1, 0, 0, 16.5, 216.5, 0, 0, 9.5, 26.5 ) --[[ @ 0]]
	ContractRarityHeaderTile.Contract:setAlpha( 0 ) --[[ @ 0]]
	ContractRarityHeaderTile.Contract:setText( LocalizeToUpperString( @"hash_0" ) ) --[[ @ 0]]
	ContractRarityHeaderTile:linkToElementModel( self, nil, false, function ( model )
		ContractRarityHeaderTile:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractRarityHeaderTile ) --[[ @ 0]]
	self.ContractRarityHeaderTile = ContractRarityHeaderTile --[[ @ 0]]
	
	local ContractCost = CoD.ContractItemCost.new( f1_arg0, f1_arg1, 0.5, 0.5, -92.5, 92.5, 1, 1, -31.5, -10.5 ) --[[ @ 0]]
	ContractCost.Free:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ContractCost.ContractCost:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ContractCost:linkToElementModel( self, nil, false, function ( model )
		ContractCost:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractCost ) --[[ @ 0]]
	self.ContractCost = ContractCost --[[ @ 0]]
	
	local ProgressBarBacking = CoD.ContractProgressBar.new( f1_arg0, f1_arg1, 0.5, 0.5, -110.5, 93.5, 0, 0, 454.5, 466.5 ) --[[ @ 0]]
	ProgressBarBacking:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "complete" )
			end
		},
		{
			stateName = "HideProgress",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" )
			end
		}
	} ) --[[ @ 0]]
	ProgressBarBacking:linkToElementModel( ProgressBarBacking, "complete", true, function ( model )
		f1_arg0:updateElementState( ProgressBarBacking, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ProgressBarBacking:linkToElementModel( ProgressBarBacking, "purchased", true, function ( model )
		f1_arg0:updateElementState( ProgressBarBacking, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "purchased"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ProgressBarBacking:linkToElementModel( self, nil, false, function ( model )
		ProgressBarBacking:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ProgressBarBacking ) --[[ @ 0]]
	self.ProgressBarBacking = ProgressBarBacking --[[ @ 0]]
	
	local TotalTierCount = LUI.UIText.new( 0.5, 0.5, -110.5, -52.5, 0, 0, 455, 473 ) --[[ @ 0]]
	TotalTierCount:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	TotalTierCount:setAlpha( 0 ) --[[ @ 0]]
	TotalTierCount:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	TotalTierCount:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	TotalTierCount:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	TotalTierCount:linkToElementModel( self, "totalRewardCount", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			TotalTierCount:setText( LocalizeIntoString( @"hash_2036DDA38F04CEAF", f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TotalTierCount ) --[[ @ 0]]
	self.TotalTierCount = TotalTierCount --[[ @ 0]]
	
	local ActiveBanner = CoD.ContractActiveBanner.new( f1_arg0, f1_arg1, 0.5, 0.5, -75, 75, 1, 1, -33.5, -8.5 ) --[[ @ 0]]
	ActiveBanner.ActiveTitle:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ActiveBanner:linkToElementModel( self, nil, false, function ( model )
		ActiveBanner:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ActiveBanner ) --[[ @ 0]]
	self.ActiveBanner = ActiveBanner --[[ @ 0]]
	
	local ContractTallSeasonalOverlay = CoD.ContractTallSeasonalOverlay.new( f1_arg0, f1_arg1, 0, 0, 0, 236, 0, 0, 0, 506 ) --[[ @ 0]]
	ContractTallSeasonalOverlay:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "seasonal" )
			end
		}
	} ) --[[ @ 0]]
	ContractTallSeasonalOverlay:linkToElementModel( ContractTallSeasonalOverlay, "seasonal", true, function ( model )
		f1_arg0:updateElementState( ContractTallSeasonalOverlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "seasonal"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractTallSeasonalOverlay ) --[[ @ 0]]
	self.ContractTallSeasonalOverlay = ContractTallSeasonalOverlay --[[ @ 0]]
	
	local TabBottomLine = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -96, -92 ) --[[ @ 0]]
	TabBottomLine:setAlpha( 0.09 ) --[[ @ 0]]
	TabBottomLine:setImage( RegisterImage( @"uie_ui_menu_common_tab_line_bottom" ) ) --[[ @ 0]]
	TabBottomLine:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TabBottomLine ) --[[ @ 0]]
	self.TabBottomLine = TabBottomLine --[[ @ 0]]
	
	local TierBoost = CoD.ItemShopTierBoost.new( f1_arg0, f1_arg1, 0, 0, 36.5, 247.5, 0, 0, 376, 402 ) --[[ @ 0]]
	TierBoost:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.BlackMarketUtility.ShowSpecialOrderBoostPercent( f1_arg1, menu )
			end
		}
	} ) --[[ @ 0]]
	local PurchasedBanner = TierBoost --[[ @ 0]]
	local Darken = TierBoost.subscribeToModel --[[ @ 0]]
	local CompeletedBanner = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Darken( PurchasedBanner, CompeletedBanner["LootStreamProgress.personalTierBoost"], function ( f16_arg0 )
		f1_arg0:updateElementState( TierBoost, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "LootStreamProgress.personalTierBoost"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TierBoost:linkToElementModel( self, nil, false, function ( model )
		TierBoost:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TierBoost ) --[[ @ 0]]
	self.TierBoost = TierBoost --[[ @ 0]]
	
	Darken = LUI.UIImage.new( 0, 1, -2, 2, 0, 1, -2, 2 ) --[[ @ 0]]
	Darken:setRGB( 0.09, 0.09, 0.09 ) --[[ @ 0]]
	Darken:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Darken ) --[[ @ 0]]
	self.Darken = Darken --[[ @ 0]]
	
	PurchasedBanner = CoD.ContractPurchasedBanner.new( f1_arg0, f1_arg1, 0.5, 0.5, -75, 75, 1, 1, -33.5, -8.5 ) --[[ @ 0]]
	PurchasedBanner:setAlpha( 0 ) --[[ @ 0]]
	PurchasedBanner.PurchasedTitle:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( PurchasedBanner ) --[[ @ 0]]
	self.PurchasedBanner = PurchasedBanner --[[ @ 0]]
	
	CompeletedBanner = CoD.ContractCompleteBanner.new( f1_arg0, f1_arg1, 0.5, 0.5, -75, 75, 1, 1, -33.5, -8.5 ) --[[ @ 0]]
	CompeletedBanner:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	CompeletedBanner:setAlpha( 0 ) --[[ @ 0]]
	CompeletedBanner.CompeletedBanner:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( CompeletedBanner ) --[[ @ 0]]
	self.CompeletedBanner = CompeletedBanner --[[ @ 0]]
	
	local ThemeName = CoD.ContractTallDescContainer.new( f1_arg0, f1_arg1, 0, 0, 9, 227, 0, 0, 416, 466 ) --[[ @ 0]]
	ThemeName:linkToElementModel( self, nil, false, function ( model )
		ThemeName:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ThemeName ) --[[ @ 0]]
	self.ThemeName = ThemeName --[[ @ 0]]
	
	self.ContractTallSeasonalOverlay:linkToElementModel( self, nil, false, function ( model )
		ContractTallSeasonalOverlay:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "lootType", LuaEnum.LOOT_TYPE.CONTRACT )
			end
		},
		{
			stateName = "Purchased",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" ) and CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "storePreview" )
			end
		},
		{
			stateName = "Completed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "complete" )
			end
		},
		{
			stateName = "Owned",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchased" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "lootType", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "lootType"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "purchased", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "purchased"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "storePreview", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "storePreview"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "complete", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ContractTall.__resetProperties = function ( f29_arg0 )
	f29_arg0.ContractCost:completeAnimation() --[[ @ 0]]
	f29_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
	f29_arg0.TotalTierCount:completeAnimation() --[[ @ 0]]
	f29_arg0.ContractTallSeasonalOverlay:completeAnimation() --[[ @ 0]]
	f29_arg0.ContractRarityHeaderTile:completeAnimation() --[[ @ 0]]
	f29_arg0.ContractRarityHeaderBackground:completeAnimation() --[[ @ 0]]
	f29_arg0.FeaturedImage:completeAnimation() --[[ @ 0]]
	f29_arg0.DotTiledBacking:completeAnimation() --[[ @ 0]]
	f29_arg0.TextBacking:completeAnimation() --[[ @ 0]]
	f29_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
	f29_arg0.TierBoost:completeAnimation() --[[ @ 0]]
	f29_arg0.ThemeName:completeAnimation() --[[ @ 0]]
	f29_arg0.Darken:completeAnimation() --[[ @ 0]]
	f29_arg0.PurchasedBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.CompeletedBanner:completeAnimation() --[[ @ 0]]
	f29_arg0.ContractCost:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ActiveBanner:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ProgressBarBacking:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.TotalTierCount:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.ContractTallSeasonalOverlay:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ContractRarityHeaderTile:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ContractRarityHeaderBackground:setAlpha( 0.7 ) --[[ @ 0]]
	f29_arg0.FeaturedImage:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.DotTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	f29_arg0.TextBacking:setAlpha( 0.85 ) --[[ @ 0]]
	f29_arg0.TabBottomLine:setAlpha( 0.09 ) --[[ @ 0]]
	f29_arg0.TierBoost:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.ThemeName:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.Darken:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.PurchasedBanner:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.CompeletedBanner:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ContractTall.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f30_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f30_arg0.ContractCost:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ContractCost ) --[[ @ 0]]
			f30_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f30_arg0.ProgressBarBacking:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ProgressBarBacking ) --[[ @ 0]]
			f30_arg0.TotalTierCount:completeAnimation() --[[ @ 0]]
			f30_arg0.TotalTierCount:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.TotalTierCount ) --[[ @ 0]]
			f30_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f30_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ActiveBanner ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f31_arg0.FeaturedImage:completeAnimation() --[[ @ 0]]
			f31_arg0.FeaturedImage:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.FeaturedImage ) --[[ @ 0]]
			f31_arg0.TextBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.TextBacking:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.TextBacking ) --[[ @ 0]]
			f31_arg0.DotTiledBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.DotTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.DotTiledBacking ) --[[ @ 0]]
			f31_arg0.ContractRarityHeaderBackground:completeAnimation() --[[ @ 0]]
			f31_arg0.ContractRarityHeaderBackground:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ContractRarityHeaderBackground ) --[[ @ 0]]
			f31_arg0.ContractRarityHeaderTile:completeAnimation() --[[ @ 0]]
			f31_arg0.ContractRarityHeaderTile:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ContractRarityHeaderTile ) --[[ @ 0]]
			f31_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f31_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ContractCost ) --[[ @ 0]]
			f31_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ProgressBarBacking ) --[[ @ 0]]
			f31_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f31_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ActiveBanner ) --[[ @ 0]]
			f31_arg0.ContractTallSeasonalOverlay:completeAnimation() --[[ @ 0]]
			f31_arg0.ContractTallSeasonalOverlay:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ContractTallSeasonalOverlay ) --[[ @ 0]]
			f31_arg0.TabBottomLine:completeAnimation() --[[ @ 0]]
			f31_arg0.TabBottomLine:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.TabBottomLine ) --[[ @ 0]]
			f31_arg0.TierBoost:completeAnimation() --[[ @ 0]]
			f31_arg0.TierBoost:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.TierBoost ) --[[ @ 0]]
			f31_arg0.ThemeName:completeAnimation() --[[ @ 0]]
			f31_arg0.ThemeName:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ThemeName ) --[[ @ 0]]
		end
	},
	Purchased = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f32_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f32_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ContractCost ) --[[ @ 0]]
			f32_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f32_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ProgressBarBacking ) --[[ @ 0]]
			f32_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f32_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ActiveBanner ) --[[ @ 0]]
			f32_arg0.TierBoost:completeAnimation() --[[ @ 0]]
			f32_arg0.TierBoost:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.TierBoost ) --[[ @ 0]]
			f32_arg0.Darken:completeAnimation() --[[ @ 0]]
			f32_arg0.Darken:setAlpha( 0.88 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Darken ) --[[ @ 0]]
			f32_arg0.PurchasedBanner:completeAnimation() --[[ @ 0]]
			f32_arg0.PurchasedBanner:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.PurchasedBanner ) --[[ @ 0]]
		end
	},
	Completed = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f33_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f33_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.ContractCost ) --[[ @ 0]]
			f33_arg0.ProgressBarBacking:completeAnimation() --[[ @ 0]]
			f33_arg0.ProgressBarBacking:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.ProgressBarBacking ) --[[ @ 0]]
			f33_arg0.ActiveBanner:completeAnimation() --[[ @ 0]]
			f33_arg0.ActiveBanner:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.ActiveBanner ) --[[ @ 0]]
			f33_arg0.TierBoost:completeAnimation() --[[ @ 0]]
			f33_arg0.TierBoost:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.TierBoost ) --[[ @ 0]]
			f33_arg0.Darken:completeAnimation() --[[ @ 0]]
			f33_arg0.Darken:setAlpha( 0.88 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.Darken ) --[[ @ 0]]
			f33_arg0.CompeletedBanner:completeAnimation() --[[ @ 0]]
			f33_arg0.CompeletedBanner:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.CompeletedBanner ) --[[ @ 0]]
		end
	},
	Owned = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f34_arg0.ContractCost:completeAnimation() --[[ @ 0]]
			f34_arg0.ContractCost:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.ContractCost ) --[[ @ 0]]
			f34_arg0.TierBoost:completeAnimation() --[[ @ 0]]
			f34_arg0.TierBoost:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.TierBoost ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ContractTall.__onClose = function ( f35_arg0 )
	f35_arg0.FeaturedImage:close() --[[ @ 0]]
	f35_arg0.DotTiledBacking:close() --[[ @ 0]]
	f35_arg0.ContractRarityHeaderBackground:close() --[[ @ 0]]
	f35_arg0.ContractRarityHeaderTile:close() --[[ @ 0]]
	f35_arg0.ContractCost:close() --[[ @ 0]]
	f35_arg0.ProgressBarBacking:close() --[[ @ 0]]
	f35_arg0.TotalTierCount:close() --[[ @ 0]]
	f35_arg0.ActiveBanner:close() --[[ @ 0]]
	f35_arg0.ContractTallSeasonalOverlay:close() --[[ @ 0]]
	f35_arg0.TierBoost:close() --[[ @ 0]]
	f35_arg0.PurchasedBanner:close() --[[ @ 0]]
	f35_arg0.CompeletedBanner:close() --[[ @ 0]]
	f35_arg0.ThemeName:close() --[[ @ 0]]
end
 --[[ @ 0]]
