-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:515cf4f01e6aec35" ) --[[ @ 0]]

CoD.AARStepItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARStepItem.__defaultWidth = 380 --[[ @ 0]]
CoD.AARStepItem.__defaultHeight = 100 --[[ @ 0]]
CoD.AARStepItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARStepItem ) --[[ @ 0]]
	self.id = "AARStepItem" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local TierText = LUI.UIText.new( 0.5, 0.5, -181.5, 181.5, 0, 0, 7, 25 ) --[[ @ 0]]
	TierText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	TierText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	TierText:setLetterSpacing( 4 ) --[[ @ 0]]
	TierText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	TierText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	TierText:linkToElementModel( self, "tierProgressText", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			TierText:setText( ToUpper( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TierText ) --[[ @ 0]]
	self.TierText = TierText --[[ @ 0]]
	
	local SpecialPip1 = CoD.SpecialEventProgressPip.new( f1_arg0, f1_arg1, 0, 0, 110, 142, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	SpecialPip1:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierMax", 1 )
			end
		},
		{
			stateName = "CompletedState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "tierProgress", 1 )
			end
		},
		{
			stateName = "IncompleteState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierProgress", 1 )
			end
		}
	} ) --[[ @ 0]]
	SpecialPip1:linkToElementModel( SpecialPip1, "tierMax", true, function ( model )
		f1_arg0:updateElementState( SpecialPip1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierMax"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip1:linkToElementModel( SpecialPip1, "tierProgress", true, function ( model )
		f1_arg0:updateElementState( SpecialPip1, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip1:linkToElementModel( self, nil, false, function ( model )
		SpecialPip1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialPip1 ) --[[ @ 0]]
	self.SpecialPip1 = SpecialPip1 --[[ @ 0]]
	
	local SpecialPip2 = CoD.SpecialEventProgressPip.new( f1_arg0, f1_arg1, 0, 0, 153, 185, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	SpecialPip2:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierMax", 2 )
			end
		},
		{
			stateName = "CompletedState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "tierProgress", 2 )
			end
		},
		{
			stateName = "IncompleteState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierProgress", 2 )
			end
		}
	} ) --[[ @ 0]]
	SpecialPip2:linkToElementModel( SpecialPip2, "tierMax", true, function ( model )
		f1_arg0:updateElementState( SpecialPip2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierMax"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip2:linkToElementModel( SpecialPip2, "tierProgress", true, function ( model )
		f1_arg0:updateElementState( SpecialPip2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip2:linkToElementModel( self, nil, false, function ( model )
		SpecialPip2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialPip2 ) --[[ @ 0]]
	self.SpecialPip2 = SpecialPip2 --[[ @ 0]]
	
	local SpecialPip3 = CoD.SpecialEventProgressPip.new( f1_arg0, f1_arg1, 0.5, 0.5, 6, 38, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	SpecialPip3:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierMax", 3 )
			end
		},
		{
			stateName = "CompletedState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "tierProgress", 3 )
			end
		},
		{
			stateName = "IncompleteState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierProgress", 3 )
			end
		}
	} ) --[[ @ 0]]
	SpecialPip3:linkToElementModel( SpecialPip3, "tierMax", true, function ( model )
		f1_arg0:updateElementState( SpecialPip3, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierMax"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip3:linkToElementModel( SpecialPip3, "tierProgress", true, function ( model )
		f1_arg0:updateElementState( SpecialPip3, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip3:linkToElementModel( self, nil, false, function ( model )
		SpecialPip3:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialPip3 ) --[[ @ 0]]
	self.SpecialPip3 = SpecialPip3 --[[ @ 0]]
	
	local SpecialPip4 = CoD.SpecialEventProgressPip.new( f1_arg0, f1_arg1, 0, 0, 239, 271, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	SpecialPip4:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierMax", 4 )
			end
		},
		{
			stateName = "CompletedState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "tierProgress", 4 )
			end
		},
		{
			stateName = "IncompleteState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierProgress", 4 )
			end
		}
	} ) --[[ @ 0]]
	SpecialPip4:linkToElementModel( SpecialPip4, "tierMax", true, function ( model )
		f1_arg0:updateElementState( SpecialPip4, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierMax"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip4:linkToElementModel( SpecialPip4, "tierProgress", true, function ( model )
		f1_arg0:updateElementState( SpecialPip4, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip4:linkToElementModel( self, nil, false, function ( model )
		SpecialPip4:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialPip4 ) --[[ @ 0]]
	self.SpecialPip4 = SpecialPip4 --[[ @ 0]]
	
	local SpecialPip5 = CoD.SpecialEventProgressPip.new( f1_arg0, f1_arg1, 0, 0, 282, 314, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	SpecialPip5:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierMax", 5 )
			end
		},
		{
			stateName = "CompletedState",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "tierProgress", 5 )
			end
		},
		{
			stateName = "IncompleteState",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "tierProgress", 5 )
			end
		}
	} ) --[[ @ 0]]
	SpecialPip5:linkToElementModel( SpecialPip5, "tierMax", true, function ( model )
		f1_arg0:updateElementState( SpecialPip5, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierMax"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip5:linkToElementModel( SpecialPip5, "tierProgress", true, function ( model )
		f1_arg0:updateElementState( SpecialPip5, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialPip5:linkToElementModel( self, nil, false, function ( model )
		SpecialPip5:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SpecialPip5 ) --[[ @ 0]]
	self.SpecialPip5 = SpecialPip5 --[[ @ 0]]
	
	local GUIDE = LUI.UIImage.new( 0, 0, 0, 190, 0, 0, 0, 100 ) --[[ @ 0]]
	GUIDE:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( GUIDE ) --[[ @ 0]]
	self.GUIDE = GUIDE --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isTiered" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isTiered", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isTiered"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AARStepItem.__resetProperties = function ( f35_arg0 )
	f35_arg0.TierText:completeAnimation() --[[ @ 0]]
	f35_arg0.SpecialPip5:completeAnimation() --[[ @ 0]]
	f35_arg0.SpecialPip4:completeAnimation() --[[ @ 0]]
	f35_arg0.SpecialPip3:completeAnimation() --[[ @ 0]]
	f35_arg0.SpecialPip2:completeAnimation() --[[ @ 0]]
	f35_arg0.SpecialPip1:completeAnimation() --[[ @ 0]]
	f35_arg0.TierText:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.SpecialPip5:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.SpecialPip4:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.SpecialPip3:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.SpecialPip2:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.SpecialPip1:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARStepItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f37_arg0.TierText:completeAnimation() --[[ @ 0]]
			f37_arg0.TierText:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.TierText ) --[[ @ 0]]
			f37_arg0.SpecialPip1:completeAnimation() --[[ @ 0]]
			f37_arg0.SpecialPip1:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpecialPip1 ) --[[ @ 0]]
			f37_arg0.SpecialPip2:completeAnimation() --[[ @ 0]]
			f37_arg0.SpecialPip2:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpecialPip2 ) --[[ @ 0]]
			f37_arg0.SpecialPip3:completeAnimation() --[[ @ 0]]
			f37_arg0.SpecialPip3:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpecialPip3 ) --[[ @ 0]]
			f37_arg0.SpecialPip4:completeAnimation() --[[ @ 0]]
			f37_arg0.SpecialPip4:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpecialPip4 ) --[[ @ 0]]
			f37_arg0.SpecialPip5:completeAnimation() --[[ @ 0]]
			f37_arg0.SpecialPip5:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpecialPip5 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARStepItem.__onClose = function ( f38_arg0 )
	f38_arg0.TierText:close() --[[ @ 0]]
	f38_arg0.SpecialPip1:close() --[[ @ 0]]
	f38_arg0.SpecialPip2:close() --[[ @ 0]]
	f38_arg0.SpecialPip3:close() --[[ @ 0]]
	f38_arg0.SpecialPip4:close() --[[ @ 0]]
	f38_arg0.SpecialPip5:close() --[[ @ 0]]
end
 --[[ @ 0]]
