-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:1e82e6931d003ae7" ) --[[ @ 0]]

CoD.CodCasterButtonDoublePromptContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.__defaultWidth = 264 --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.__defaultHeight = 38 --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIHorizontalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 10, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Left ) --[[ @ 0]]
	self:setClass( CoD.CodCasterButtonDoublePromptContainer ) --[[ @ 0]]
	self.id = "CodCasterButtonDoublePromptContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Prompt = CoD.CodCasterButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 0, 150, 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	Prompt:mergeStateConditions( {
		{
			stateName = "Enabled",
			condition = function ( menu, element, event )
				local f2_local0 = CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"LUIButtonPromptStates"][@"hash_5901DFC093ED4187"] ) --[[ @ 0]]
				if f2_local0 then
					if not CoD.FreeCursorUtility.ShowingContextualPromptForFlags( element, f1_arg1 ) then
						f2_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					else
						f2_local0 = false --[[ @ 0]]
					end
				end
				return f2_local0
			end
		},
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	Prompt:linkToElementModel( Prompt, nil, true, function ( model )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local Text = Prompt --[[ @ 0]]
	local Prompt2 = Prompt.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	Prompt2( Text, f1_local4.usingCursorInput, function ( f5_arg0 )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Text = Prompt --[[ @ 0]]
	Prompt2 = Prompt.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	Prompt2( Text, f1_local4.hidden, function ( f6_arg0 )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "hidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Text = Prompt --[[ @ 0]]
	Prompt2 = Prompt.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Prompt2( Text, f1_local4.activeKeys, function ( f7_arg0 )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "activeKeys"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Prompt:linkToElementModel( Prompt, "flags", true, function ( model )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "flags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Prompt:appendEventHandler( "input_source_changed", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( Prompt, f9_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Text = Prompt --[[ @ 0]]
	Prompt2 = Prompt.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Prompt2( Text, f1_local4.LastInput, function ( f10_arg0 )
		f1_arg0:updateElementState( Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( Prompt ) --[[ @ 0]]
	self.Prompt = Prompt --[[ @ 0]]
	
	Prompt2 = CoD.CodCasterButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 160, 310, 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	Prompt2:mergeStateConditions( {
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	Prompt2:linkToElementModel( Prompt2, nil, true, function ( model )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = Prompt2 --[[ @ 0]]
	Text = Prompt2.subscribeToModel --[[ @ 0]]
	local f1_local5 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	Text( f1_local4, f1_local5.usingCursorInput, function ( f13_arg0 )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = Prompt2 --[[ @ 0]]
	Text = Prompt2.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	Text( f1_local4, f1_local5.hidden, function ( f14_arg0 )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "hidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = Prompt2 --[[ @ 0]]
	Text = Prompt2.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Text( f1_local4, f1_local5.activeKeys, function ( f15_arg0 )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "activeKeys"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Prompt2:linkToElementModel( Prompt2, "flags", true, function ( model )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "flags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Prompt2:appendEventHandler( "input_source_changed", function ( f17_arg0, f17_arg1 )
		f17_arg1.menu = f17_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( Prompt2, f17_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = Prompt2 --[[ @ 0]]
	Text = Prompt2.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Text( f1_local4, f1_local5.LastInput, function ( f18_arg0 )
		f1_arg0:updateElementState( Prompt2, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( Prompt2 ) --[[ @ 0]]
	self.Prompt2 = Prompt2 --[[ @ 0]]
	
	Text = LUI.UIText.new( 0, 0, 320, 486, 0.5, 0.5, -8, 8 ) --[[ @ 0]]
	Text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5A61241CD7E3DE2B" ) ) --[[ @ 0]]
	Text:setTTF( "default" ) --[[ @ 0]]
	Text:setLineSpacing( 2 ) --[[ @ 0]]
	Text:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Text:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	self:addElement( Text ) --[[ @ 0]]
	self.Text = Text --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	if CoD.isPC then
		Prompt.id = "Prompt" --[[ @ 0]]
	end
	if CoD.isPC then
		Prompt2.id = "Prompt2" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local4 = self --[[ @ 0]]
	f1_local4 = Text --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.EnableShrinkToFit( f1_local4 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.__resetProperties = function ( f20_arg0 )
	f20_arg0.Text:completeAnimation() --[[ @ 0]]
	f20_arg0.Prompt:completeAnimation() --[[ @ 0]]
	f20_arg0.Text:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.Prompt:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.Prompt:completeAnimation() --[[ @ 0]]
			f22_arg0.Prompt:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.Prompt ) --[[ @ 0]]
			f22_arg0.Text:completeAnimation() --[[ @ 0]]
			f22_arg0.Text:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.Text ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CodCasterButtonDoublePromptContainer.__onClose = function ( f23_arg0 )
	f23_arg0.Prompt:close() --[[ @ 0]]
	f23_arg0.Prompt2:close() --[[ @ 0]]
	f23_arg0.Text:close() --[[ @ 0]]
end
 --[[ @ 0]]
