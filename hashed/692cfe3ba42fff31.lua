-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:452cca38de53819f" ) --[[ @ 0]]

CoD.MOTD_BannerContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.MOTD_BannerContainer.__defaultWidth = 328 --[[ @ 0]]
CoD.MOTD_BannerContainer.__defaultHeight = 679 --[[ @ 0]]
CoD.MOTD_BannerContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.MOTD_BannerContainer ) --[[ @ 0]]
	self.id = "MOTD_BannerContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local MOTDBanners = LUI.UIList.new( f1_arg0, f1_arg1, 13, 0, nil, false, false, false, false ) --[[ @ 0]]
	MOTDBanners:setLeftRight( 0, 0, 0, 328 ) --[[ @ 0]]
	MOTDBanners:setTopBottom( 0, 0, 0, 679 ) --[[ @ 0]]
	MOTDBanners:setWidgetType( CoD.MOTD_BannerImage ) --[[ @ 0]]
	MOTDBanners:setVerticalCount( 4 ) --[[ @ 0]]
	MOTDBanners:setSpacing( 13 ) --[[ @ 0]]
	MOTDBanners:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	MOTDBanners:setDataSource( "MOTDBannerList" ) --[[ @ 0]]
	MOTDBanners:linkToElementModel( MOTDBanners, "action", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MOTDBanners:appendEventHandler( "record_curr_focused_elem_id", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = MOTDBanners --[[ @ 0]]
	local f1_local3 = MOTDBanners.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.MOTDVoDPreview.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.frame, function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MOTDBanners:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.MOTDUtility.MOTD_MarkAsViewed( self, f1_arg1, self.MOTDBanners ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	MOTDBanners:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, f1_arg1, "action", "vod" ) then
			CoD.ModelUtility.SetGlobalDatasourceModelValue( f1_arg1, "MOTDVoDPreview", "frame", "CoD.VoDPreviewWidgetImage" ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	MOTDBanners:registerEventHandler( "list_active_changed", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if IsPC() then
			UpdateParentElementDataSource( self, "ButtonsList" ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	MOTDBanners:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( MOTDBanners, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "store" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "registration" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "depot" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "shop" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.BaseUtility.IsDvarEnabled( "motd_inPlaceVODEnabled" ) and CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "vod" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "MOTDVoDPreview", "frame", "CoD.VoDPreviewWidgetVideo" ) then
			return true
		elseif CoD.BaseUtility.IsDvarEnabled( "motd_inPlaceVODEnabled" ) and CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "vod" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.ModelUtility.SetGlobalDatasourceModelValue( controller, "MOTDVoDPreview", "frame", "CoD.VoDPreviewWidgetVideo" ) --[[ @ 0]]
			CoD.MOTDUtility.MOTD_MarkAsClicked( self, controller, self.MOTDBanners ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "bj_reserves" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "crate_purchase" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "inventory" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "crate_bundle" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "challenge_status" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.MOTDUtility.MOTD_IsContractAction( self, controller, element ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		elseif CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.MOTDUtility.MOTD_AcceptAction( self, controller, menu, self.MOTDBanners ) --[[ @ 0]]
			ResetThumbnailViewer( controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "store" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4191CDDA584B4408", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "registration" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_2977A022B8323362", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "depot" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/black_market", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "shop" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_790379DA9EEC8DB9", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.BaseUtility.IsDvarEnabled( "motd_inPlaceVODEnabled" ) and CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "vod" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "MOTDVoDPreview", "frame", "CoD.VoDPreviewWidgetVideo" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.BaseUtility.IsDvarEnabled( "motd_inPlaceVODEnabled" ) and CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "vod" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/play", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "bj_reserves" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_7655207CC013B5BD", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "crate_purchase" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_3AF6650B811A502B", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "inventory" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/motd_inventory", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "crate_bundle" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_3E1FEFD9287CA008", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, controller, "action", "challenge_status" ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/community_contract", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.MOTDUtility.MOTD_IsContractAction( self, controller, element ) and CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/motd_contracts", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "MOTDBanners" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_3AC3B80C833B60E1", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( MOTDBanners ) --[[ @ 0]]
	self.MOTDBanners = MOTDBanners --[[ @ 0]]
	
	self:registerEventHandler( "input_source_changed", function ( self, event )
		local f11_local0 = nil --[[ @ 0]]
		if IsPC() then
			CoD.GridAndListUtility.SetListActiveOnFocusPCBehavior( self.MOTDBanners, f1_arg1 ) --[[ @ 0]]
		end
		if not f11_local0 then
			f11_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f12_arg0, f12_arg1, f12_arg2, f12_arg3 )
		if IsElementReceivingMenuOpenEventForTheFirstTime( self ) and IsPC() then
			CoD.GridAndListUtility.ActivateListPCSelectionBehavior( self.MOTDBanners ) --[[ @ 0]]
			CoD.GridAndListUtility.SetListActiveOnFocusPCBehavior( self.MOTDBanners, f12_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	MOTDBanners.id = "MOTDBanners" --[[ @ 0]]
	self.__defaultFocus = MOTDBanners --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.MOTD_BannerContainer.__onClose = function ( f14_arg0 )
	f14_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f14_arg0.MOTDBanners:close() --[[ @ 0]]
end
 --[[ @ 0]]
