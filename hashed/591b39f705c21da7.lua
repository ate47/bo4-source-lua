-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:60fe61418119efa8" ) --[[ @ 0]]
require( "x64:634a5eda5a37725f" ) --[[ @ 0]]

CoD.AARSquadRow = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARSquadRow.__defaultWidth = 1258 --[[ @ 0]]
CoD.AARSquadRow.__defaultHeight = 70 --[[ @ 0]]
CoD.AARSquadRow.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARSquadRow ) --[[ @ 0]]
	self.id = "AARSquadRow" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Place = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 0.5, 62.5, 0, 0, 6, 66 ) --[[ @ 0]]
	Place:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	Place:linkToElementModel( Place, "clientNum", true, function ( model )
		f1_arg0:updateElementState( Place, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Place:linkToElementModel( Place, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( Place, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Place:linkToElementModel( self, "echelon", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			Place.Value:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Place ) --[[ @ 0]]
	self.Place = Place --[[ @ 0]]
	
	local Player = CoD.AARSquadPlayer.new( f1_arg0, f1_arg1, 0, 0, 66.5, 537.5, 0, 0, 6, 66 ) --[[ @ 0]]
	Player:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isSelf" )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	Player:linkToElementModel( Player, "isSelf", true, function ( model )
		f1_arg0:updateElementState( Player, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isSelf"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Player:linkToElementModel( Player, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( Player, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Player:linkToElementModel( self, "playerName", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			Player.ClanAndGamerName:setText( f11_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Player ) --[[ @ 0]]
	self.Player = Player --[[ @ 0]]
	
	local KillStat = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 540.5, 680.5, 0, 0, 6, 66 ) --[[ @ 0]]
	KillStat:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	KillStat:linkToElementModel( KillStat, "clientNum", true, function ( model )
		f1_arg0:updateElementState( KillStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	KillStat:linkToElementModel( KillStat, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( KillStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	KillStat:linkToElementModel( self, "kills", true, function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			KillStat.Value:setText( f16_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( KillStat ) --[[ @ 0]]
	self.KillStat = KillStat --[[ @ 0]]
	
	local LongestKillStat = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 683.5, 823.5, 0, 0, 6, 66 ) --[[ @ 0]]
	LongestKillStat:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	LongestKillStat:linkToElementModel( LongestKillStat, "clientNum", true, function ( model )
		f1_arg0:updateElementState( LongestKillStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LongestKillStat:linkToElementModel( LongestKillStat, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( LongestKillStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LongestKillStat:linkToElementModel( self, "longestKill", true, function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			LongestKillStat.Value:setText( LocalizeStringWithParameter( @"hash_22EAE727E6AD7528", UnitsToMeters( f21_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( LongestKillStat ) --[[ @ 0]]
	self.LongestKillStat = LongestKillStat --[[ @ 0]]
	
	local CashDeposited = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 683.5, 823.5, 0, 0, 6, 66 ) --[[ @ 0]]
	CashDeposited:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	CashDeposited:linkToElementModel( CashDeposited, "clientNum", true, function ( model )
		f1_arg0:updateElementState( CashDeposited, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CashDeposited:linkToElementModel( CashDeposited, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( CashDeposited, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CashDeposited:setAlpha( 0 ) --[[ @ 0]]
	CashDeposited:linkToElementModel( self, "score", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			CashDeposited.Value:setText( f26_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CashDeposited ) --[[ @ 0]]
	self.CashDeposited = CashDeposited --[[ @ 0]]
	
	local DamageStat = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 826.5, 966.5, 0, 0, 6, 66 ) --[[ @ 0]]
	DamageStat:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	DamageStat:linkToElementModel( DamageStat, "clientNum", true, function ( model )
		f1_arg0:updateElementState( DamageStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DamageStat:linkToElementModel( DamageStat, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( DamageStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DamageStat:linkToElementModel( self, "damage", true, function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= nil then
			DamageStat.Value:setText( f31_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DamageStat ) --[[ @ 0]]
	self.DamageStat = DamageStat --[[ @ 0]]
	
	local RevivesStat = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 969.5, 1109.5, 0, 0, 6, 66 ) --[[ @ 0]]
	RevivesStat:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	RevivesStat:linkToElementModel( RevivesStat, "clientNum", true, function ( model )
		f1_arg0:updateElementState( RevivesStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RevivesStat:linkToElementModel( RevivesStat, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( RevivesStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RevivesStat:linkToElementModel( self, "revives", true, function ( model )
		local f36_local0 = model:get() --[[ @ 0]]
		if f36_local0 ~= nil then
			RevivesStat.Value:setText( f36_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RevivesStat ) --[[ @ 0]]
	self.RevivesStat = RevivesStat --[[ @ 0]]
	
	local CleanUpsStat = CoD.AARSquadStat.new( f1_arg0, f1_arg1, 0, 0, 1112.5, 1252.5, 0, 0, 6, 66 ) --[[ @ 0]]
	CleanUpsStat:mergeStateConditions( {
		{
			stateName = "Self",
			condition = function ( menu, element, event )
				return IsSelfClient( f1_arg1, self )
			end
		},
		{
			stateName = "StillAlive",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "stillAlive" )
			end
		}
	} ) --[[ @ 0]]
	CleanUpsStat:linkToElementModel( CleanUpsStat, "clientNum", true, function ( model )
		f1_arg0:updateElementState( CleanUpsStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientNum"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CleanUpsStat:linkToElementModel( CleanUpsStat, "stillAlive", true, function ( model )
		f1_arg0:updateElementState( CleanUpsStat, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stillAlive"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CleanUpsStat:linkToElementModel( self, "cleanUps", true, function ( model )
		local f41_local0 = model:get() --[[ @ 0]]
		if f41_local0 ~= nil then
			CleanUpsStat.Value:setText( f41_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CleanUpsStat ) --[[ @ 0]]
	self.CleanUpsStat = CleanUpsStat --[[ @ 0]]
	
	local RankIcon = LUI.UIImage.new( 0.5, 0.5, -556, -511, 0, 0, 12.5, 57.5 ) --[[ @ 0]]
	RankIcon:linkToElementModel( self, "echelonIcon", true, function ( model )
		local f42_local0 = model:get() --[[ @ 0]]
		if f42_local0 ~= nil then
			RankIcon:setImage( RegisterImage( f42_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RankIcon ) --[[ @ 0]]
	self.RankIcon = RankIcon --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Deposit",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "warzone_deposit", f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AARSquadRow.__resetProperties = function ( f44_arg0 )
	f44_arg0.CashDeposited:completeAnimation() --[[ @ 0]]
	f44_arg0.LongestKillStat:completeAnimation() --[[ @ 0]]
	f44_arg0.CashDeposited:setAlpha( 0 ) --[[ @ 0]]
	f44_arg0.LongestKillStat:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARSquadRow.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Deposit = {
		DefaultClip = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f46_arg0.LongestKillStat:completeAnimation() --[[ @ 0]]
			f46_arg0.LongestKillStat:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.LongestKillStat ) --[[ @ 0]]
			f46_arg0.CashDeposited:completeAnimation() --[[ @ 0]]
			f46_arg0.CashDeposited:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.CashDeposited ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARSquadRow.__onClose = function ( f47_arg0 )
	f47_arg0.Place:close() --[[ @ 0]]
	f47_arg0.Player:close() --[[ @ 0]]
	f47_arg0.KillStat:close() --[[ @ 0]]
	f47_arg0.LongestKillStat:close() --[[ @ 0]]
	f47_arg0.CashDeposited:close() --[[ @ 0]]
	f47_arg0.DamageStat:close() --[[ @ 0]]
	f47_arg0.RevivesStat:close() --[[ @ 0]]
	f47_arg0.CleanUpsStat:close() --[[ @ 0]]
	f47_arg0.RankIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
