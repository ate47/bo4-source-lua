-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:32bf789c3c32d132" ) --[[ @ 0]]
require( "x64:11a70a3d7e2725e9" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "x64:24fef7f34e3f5ca0" ) --[[ @ 0]]
require( "x64:40c7e896ee4bc3f8" ) --[[ @ 0]]

CoD.AARMeritReportOverlay = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.AARMeritReportOverlay = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "AARMeritReportOverlay", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.AARUtility.SetupMeritRewardModels( f1_local1, f1_arg0, false ) --[[ @ 0]]
	self:setClass( CoD.AARMeritReportOverlay ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BlurBg = LUI.UIImage.new( 0.5, 2.5, -2400, -2400, 0.5, 1.5, -540, -540 ) --[[ @ 0]]
	BlurBg:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	BlurBg:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlurBg ) --[[ @ 0]]
	self.BlurBg = BlurBg --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Backing:setAlpha( 0.9 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local FractalGrid = LUI.UIImage.new( 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	FractalGrid:setAlpha( 0 ) --[[ @ 0]]
	FractalGrid:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_fractalgrid" ) ) --[[ @ 0]]
	FractalGrid:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_tile_scroll" ) ) --[[ @ 0]]
	FractalGrid:setShaderVector( 0, 1, 1, 0, 0 ) --[[ @ 0]]
	FractalGrid:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( FractalGrid ) --[[ @ 0]]
	self.FractalGrid = FractalGrid --[[ @ 0]]
	
	local BgElements = CoD.AARLevelUpOverlay_LevelUpBg.new( f1_local1, f1_arg0, 0.5, 0.5, -835, 835, 0.5, 0.5, -335, 451 ) --[[ @ 0]]
	self:addElement( BgElements ) --[[ @ 0]]
	self.BgElements = BgElements --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local MeritReport = CoD.MeritReportWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	MeritReport:mergeStateConditions( {
		{
			stateName = "ContractsEnabledTabs",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	MeritReport:subscribeToGlobalModel( f1_arg0, "AARMeritReport", nil, function ( model )
		MeritReport:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( MeritReport ) --[[ @ 0]]
	self.MeritReport = MeritReport --[[ @ 0]]
	
	local MeritReportLabel = LUI.UIText.new( 0.5, 0.5, -960, 960, 0, 0, 53, 104 ) --[[ @ 0]]
	MeritReportLabel:setRGB( ColorSet.PlayerYellow.r, ColorSet.PlayerYellow.g, ColorSet.PlayerYellow.b ) --[[ @ 0]]
	MeritReportLabel:setAlpha( 0 ) --[[ @ 0]]
	MeritReportLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_29C7C549DBCFDA00" ) ) --[[ @ 0]]
	MeritReportLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	MeritReportLabel:setLetterSpacing( 14 ) --[[ @ 0]]
	MeritReportLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	MeritReportLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( MeritReportLabel ) --[[ @ 0]]
	self.MeritReportLabel = MeritReportLabel --[[ @ 0]]
	
	local DoubleXPIcon = CoD.DoubleXPIcon.new( f1_local1, f1_arg0, 0.5, 0.5, 605, 677, 0.5, 0.5, 348, 420 ) --[[ @ 0]]
	self:addElement( DoubleXPIcon ) --[[ @ 0]]
	self.DoubleXPIcon = DoubleXPIcon --[[ @ 0]]
	
	local TrialInfoBannerWidget = CoD.TrialInfoBannerWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -352.5, 418.5, 0.5, 0.5, 11, 46 ) --[[ @ 0]]
	TrialInfoBannerWidget:mergeStateConditions( {
		{
			stateName = "Shown",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysFalse()
			end
		},
		{
			stateName = "ShownLarge",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	TrialInfoBannerWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7028C4CE674D04F7" ) ) --[[ @ 0]]
	self:addElement( TrialInfoBannerWidget ) --[[ @ 0]]
	self.TrialInfoBannerWidget = TrialInfoBannerWidget --[[ @ 0]]
	
	self:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	local f1_local12 = self.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13.LastInput, function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not IsPC() then
			CoD.AARUtility.CloseMeritReportOverlay( menu, controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) then
			CoD.AARUtility.CloseMeritReportOverlay( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_66393FF34EA56966", nil, nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if IsPC() then
			CoD.AARUtility.CloseMeritReportOverlay( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.AARUtility.CloseMeritReportOverlay( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_confirm", function ( element, menu, controller, model )
		CoD.AARUtility.CloseMeritReportOverlay( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local12 = self --[[ @ 0]]
	CoD.AARUtility.AnimateMeritReportNumbers( f1_local1, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.AARMeritReportOverlay.__resetProperties = function ( f17_arg0 )
	f17_arg0.FractalGrid:completeAnimation() --[[ @ 0]]
	f17_arg0.BgElements:completeAnimation() --[[ @ 0]]
	f17_arg0.MeritReport:completeAnimation() --[[ @ 0]]
	f17_arg0.FractalGrid:setAlpha( 0 ) --[[ @ 0]]
	f17_arg0.BgElements:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.MeritReport:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARMeritReportOverlay.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f18_arg0.FractalGrid:completeAnimation() --[[ @ 0]]
			f18_arg0.FractalGrid:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.FractalGrid ) --[[ @ 0]]
			local f18_local0 = function ( f19_arg0 )
				f19_arg0:beginAnimation( 100 ) --[[ @ 0]]
				f19_arg0:setAlpha( 1 ) --[[ @ 0]]
				f19_arg0:registerEventHandler( "transition_complete_keyframe", f18_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f18_arg0.BgElements:beginAnimation( 100 ) --[[ @ 0]]
			f18_arg0.BgElements:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.BgElements:registerEventHandler( "interrupted_keyframe", f18_arg0.clipInterrupted ) --[[ @ 0]]
			f18_arg0.BgElements:registerEventHandler( "transition_complete_keyframe", f18_local0 ) --[[ @ 0]]
			local f18_local1 = function ( f20_arg0 )
				f20_arg0:beginAnimation( 150 ) --[[ @ 0]]
				f20_arg0:setAlpha( 1 ) --[[ @ 0]]
				f20_arg0:registerEventHandler( "transition_complete_keyframe", f18_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f18_arg0.MeritReport:beginAnimation( 250 ) --[[ @ 0]]
			f18_arg0.MeritReport:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.MeritReport:registerEventHandler( "interrupted_keyframe", f18_arg0.clipInterrupted ) --[[ @ 0]]
			f18_arg0.MeritReport:registerEventHandler( "transition_complete_keyframe", f18_local1 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARMeritReportOverlay.__onClose = function ( f21_arg0 )
	f21_arg0.BgElements:close() --[[ @ 0]]
	f21_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f21_arg0.MeritReport:close() --[[ @ 0]]
	f21_arg0.DoubleXPIcon:close() --[[ @ 0]]
	f21_arg0.TrialInfoBannerWidget:close() --[[ @ 0]]
end
 --[[ @ 0]]
