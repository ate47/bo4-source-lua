-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/cac/cac_itemtitleglow" ) --[[ @ 0]]

CoD.nameLabel = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.nameLabel.__defaultWidth = 159 --[[ @ 0]]
CoD.nameLabel.__defaultHeight = 30 --[[ @ 0]]
CoD.nameLabel.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.nameLabel ) --[[ @ 0]]
	self.id = "nameLabel" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Glow = LUI.UIImage.new( 0, 1, -80, 74, 0.5, 0.5, -45, 65 ) --[[ @ 0]]
	Glow:setAlpha( 0.14 ) --[[ @ 0]]
	Glow:setImage( RegisterImage( @"uie_t7_menu_cac_glow" ) ) --[[ @ 0]]
	Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Glow ) --[[ @ 0]]
	self.Glow = Glow --[[ @ 0]]
	
	local TitleGlow1 = CoD.cac_ItemTitleGlow.new( f1_arg0, f1_arg1, 0, 1, -3, 5, 0, 1, -4, 4 ) --[[ @ 0]]
	TitleGlow1:setRGB( 0.44, 0.44, 0.44 ) --[[ @ 0]]
	TitleGlow1:setAlpha( 0.97 ) --[[ @ 0]]
	self:addElement( TitleGlow1 ) --[[ @ 0]]
	self.TitleGlow1 = TitleGlow1 --[[ @ 0]]
	
	local nameLabel = LUI.UIText.new( 0, 0, 36, 198, 0, 0, 0, 30 ) --[[ @ 0]]
	nameLabel:setRGB( 0, 0, 0 ) --[[ @ 0]]
	nameLabel:setAlpha( 0.92 ) --[[ @ 0]]
	nameLabel:setTTF( "default" ) --[[ @ 0]]
	nameLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	nameLabel:linkToElementModel( self, "text", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			nameLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( nameLabel, "setText", function ( element, controller )
		if not IsSelfInState( self, "ShowDistance" ) then
			ScaleWidgetToLabelLeftJustify( self, element, -14 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( nameLabel ) --[[ @ 0]]
	self.nameLabel = nameLabel --[[ @ 0]]
	
	local distanceLabel = LUI.UIText.new( 0, 0, 36, 198, 0, 0, 0, 30 ) --[[ @ 0]]
	distanceLabel:setRGB( 0, 0, 0 ) --[[ @ 0]]
	distanceLabel:setAlpha( 0 ) --[[ @ 0]]
	distanceLabel:setTTF( "default" ) --[[ @ 0]]
	distanceLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	distanceLabel:linkToElementModel( self, "distanceText", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			distanceLabel:setText( LocalizeIntoStringIfNotEmpty( @"hash_37235825812D46C6", f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( distanceLabel, "setText", function ( element, controller )
		if IsSelfInState( self, "ShowDistance" ) then
			ScaleWidgetToLabelLeftJustify( self, element, -14 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( distanceLabel ) --[[ @ 0]]
	self.distanceLabel = distanceLabel --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ShowDistance",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( self, f1_arg1, "distanceText" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "distanceText", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "distanceText"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f8_arg2, f8_arg3, f8_arg4 )
		if IsSelfInState( self, "ShowDistance" ) then
			ScaleWidgetToLabelLeftJustify( self, self.distanceLabel, -14 ) --[[ @ 0]]
		else
			ScaleWidgetToLabelLeftJustify( self, self.nameLabel, -14 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.nameLabel.__resetProperties = function ( f9_arg0 )
	f9_arg0.distanceLabel:completeAnimation() --[[ @ 0]]
	f9_arg0.nameLabel:completeAnimation() --[[ @ 0]]
	f9_arg0.distanceLabel:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.nameLabel:setAlpha( 0.92 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.nameLabel.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ShowDistance = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f11_arg0.nameLabel:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.nameLabel ) --[[ @ 0]]
			f11_arg0.distanceLabel:completeAnimation() --[[ @ 0]]
			f11_arg0.distanceLabel:setAlpha( 0.92 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.distanceLabel ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.nameLabel.__onClose = function ( f12_arg0 )
	f12_arg0.TitleGlow1:close() --[[ @ 0]]
	f12_arg0.nameLabel:close() --[[ @ 0]]
	f12_arg0.distanceLabel:close() --[[ @ 0]]
end
 --[[ @ 0]]
