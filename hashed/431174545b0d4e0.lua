-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/common/commoncenteredpopup" ) --[[ @ 0]]
require( "x64:20f93e6387e9d051" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/startmenu/controlsoptions/pc_startmenu_options_controls_keybinder" ) --[[ @ 0]]

CoD.DirectorFirstTimeContentWarning = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.DirectorFirstTimeContentWarning = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "DirectorFirstTimeContentWarning", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.DirectorFirstTimeContentWarning ) --[[ @ 0]]
	self.soundSet = "MultiplayerMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CommomCenteredPopup = CoD.CommonCenteredPopup.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	CommomCenteredPopup.featureOverlayButtonMouseOnly.featureOverlayButtonContainer.Title:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6D8FF5E03592FD99" ) ) --[[ @ 0]]
	CommomCenteredPopup.TitleText:setText( LocalizeToUpperString( @"hash_1D52DB291DBBD257" ) ) --[[ @ 0]]
	self:addElement( CommomCenteredPopup ) --[[ @ 0]]
	self.CommomCenteredPopup = CommomCenteredPopup --[[ @ 0]]
	
	local f1_local3 = nil --[[ @ 0]]
	
	local PCOptionGroup = LUI.UIList.new( f1_local1, f1_arg0, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	PCOptionGroup:setLeftRight( 0.5, 0.5, -325, 325 ) --[[ @ 0]]
	PCOptionGroup:setTopBottom( 0.5, 0.5, -67, 132 ) --[[ @ 0]]
	PCOptionGroup:setAlpha( 0 ) --[[ @ 0]]
	PCOptionGroup:setAutoScaleContent( true ) --[[ @ 0]]
	PCOptionGroup:setWidgetType( CoD.PC_StartMenu_Options_Controls_KeyBinder ) --[[ @ 0]]
	PCOptionGroup:setVerticalCount( 3 ) --[[ @ 0]]
	PCOptionGroup:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PCOptionGroup:setDataSource( "OptionGraphicContentPC" ) --[[ @ 0]]
	self:addElement( PCOptionGroup ) --[[ @ 0]]
	self.PCOptionGroup = PCOptionGroup --[[ @ 0]]
	
	local OptionGroups = LUI.UIList.new( f1_local1, f1_arg0, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	OptionGroups:setLeftRight( 0.5, 0.5, -350, 350 ) --[[ @ 0]]
	OptionGroups:setTopBottom( 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	OptionGroups:setWidgetType( CoD.StartMenu_Options_SettingSlider_Wrapper ) --[[ @ 0]]
	OptionGroups:setSpacing( 10 ) --[[ @ 0]]
	OptionGroups:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionGroups:setDataSource( "PlayerSettingsFirstTimeContentList" ) --[[ @ 0]]
	OptionGroups:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( OptionGroups, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if HasListAction( element, controller ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if HasListAction( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( OptionGroups ) --[[ @ 0]]
	self.OptionGroups = OptionGroups --[[ @ 0]]
	
	local OptionDesc = LUI.UIText.new( 0.5, 0.5, -328, 321, 0.5, 0.5, -351, -330 ) --[[ @ 0]]
	OptionDesc:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	OptionDesc:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3562DFE5E1BB4809" ) ) --[[ @ 0]]
	OptionDesc:setTTF( "dinnext_regular" ) --[[ @ 0]]
	OptionDesc:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionDesc:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( OptionDesc ) --[[ @ 0]]
	self.OptionDesc = OptionDesc --[[ @ 0]]
	
	local OptionTitle = LUI.UIText.new( 0.5, 0.5, -328, 321, 0.5, 0.5, -400, -370 ) --[[ @ 0]]
	OptionTitle:setRGB( 0.63, 0.57, 0.2 ) --[[ @ 0]]
	OptionTitle:setText( LocalizeToUpperString( @"hash_79F837EEDFBB8117" ) ) --[[ @ 0]]
	OptionTitle:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	OptionTitle:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionTitle:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	self:addElement( OptionTitle ) --[[ @ 0]]
	self.OptionTitle = OptionTitle --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "DefaultStateKBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_local1 --[[ @ 0]]
		f1_local1:updateElementState( self, f6_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.LastInput, function ( f7_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f7_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "input_source_changed", function ( self, event )
		local f8_local0 = nil --[[ @ 0]]
		if IsPC() then
			SetFocusToElement( self, "OptionGroups", f1_arg0 ) --[[ @ 0]]
		end
		if not f8_local0 then
			f8_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		ClearMenuSavedState( menu ) --[[ @ 0]]
		CoD.LobbyUtility.CompleteFirstTimeContentWarning( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D8FF5E03592FD99", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		if IsPC() then
			CoD.LobbyUtility.CompleteFirstTimeContentWarning( f1_local1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CommomCenteredPopup.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		CommomCenteredPopup.id = "CommomCenteredPopup" --[[ @ 0]]
	end
	PCOptionGroup.id = "PCOptionGroup" --[[ @ 0]]
	OptionGroups.id = "OptionGroups" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = OptionGroups --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorFirstTimeContentWarning.__resetProperties = function ( f12_arg0 )
	f12_arg0.PCOptionGroup:completeAnimation() --[[ @ 0]]
	f12_arg0.OptionGroups:completeAnimation() --[[ @ 0]]
	f12_arg0.PCOptionGroup:setAlpha( 0 ) --[[ @ 0]]
	f12_arg0.OptionGroups:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorFirstTimeContentWarning.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	DefaultStateKBM = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f14_arg0.PCOptionGroup:completeAnimation() --[[ @ 0]]
			f14_arg0.PCOptionGroup:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.PCOptionGroup ) --[[ @ 0]]
			f14_arg0.OptionGroups:completeAnimation() --[[ @ 0]]
			f14_arg0.OptionGroups:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.OptionGroups ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorFirstTimeContentWarning.__onClose = function ( f15_arg0 )
	f15_arg0.CommomCenteredPopup:close() --[[ @ 0]]
	f15_arg0.PCOptionGroup:close() --[[ @ 0]]
	f15_arg0.OptionGroups:close() --[[ @ 0]]
end
 --[[ @ 0]]
