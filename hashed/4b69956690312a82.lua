-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/pc/startmenu/pc_startmenu_options_keybindmessage_background" ) --[[ @ 0]]
require( "ui/uieditor/widgets/pc/startmenu/pc_startmenu_options_keybindmessage_text" ) --[[ @ 0]]

CoD.PC_StartMenu_Options_KeybindMessage = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.__defaultWidth = 1920 --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.__defaultHeight = 86 --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PC_StartMenu_Options_KeybindMessage ) --[[ @ 0]]
	self.id = "PC_StartMenu_Options_KeybindMessage" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = CoD.PC_StartMenu_Options_KeybindMessage_Background.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:mergeStateConditions( {
		{
			stateName = "Error",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowErrorMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Binding",
			condition = function ( menu, element, event )
				return CoD.PCUtility.IsBindingKey( self, f1_arg1 )
			end
		},
		{
			stateName = "Success",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowPastKeybind( self, f1_arg1 )
			end
		},
		{
			stateName = "Warning",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowWarningMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Recording",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsRecordingLoopBack( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = Background --[[ @ 0]]
	local KeybindMessage = Background.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	KeybindMessage( f1_local2, f1_local4.showErrorMessage, function ( f7_arg0 )
		f1_arg0:updateElementState( Background, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "showErrorMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = Background --[[ @ 0]]
	KeybindMessage = Background.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	KeybindMessage( f1_local2, f1_local4.isBindingKey, function ( f8_arg0 )
		f1_arg0:updateElementState( Background, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "isBindingKey"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = Background --[[ @ 0]]
	KeybindMessage = Background.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	KeybindMessage( f1_local2, f1_local4.showPastKeybind, function ( f9_arg0 )
		f1_arg0:updateElementState( Background, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "showPastKeybind"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = Background --[[ @ 0]]
	KeybindMessage = Background.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	KeybindMessage( f1_local2, f1_local4.showWarningMessage, function ( f10_arg0 )
		f1_arg0:updateElementState( Background, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "showWarningMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = Background --[[ @ 0]]
	KeybindMessage = Background.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	KeybindMessage( f1_local2, f1_local4["SpeakingEnergy.isRecording"], function ( f11_arg0 )
		f1_arg0:updateElementState( Background, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "SpeakingEnergy.isRecording"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	KeybindMessage = CoD.PC_StartMenu_Options_KeybindMessage_Text.new( f1_arg0, f1_arg1, 0.5, 0.5, -76, 124, 0.5, 0.5, -9.5, 15.5 ) --[[ @ 0]]
	KeybindMessage:mergeStateConditions( {
		{
			stateName = "Error",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowErrorMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Binding",
			condition = function ( menu, element, event )
				return CoD.PCUtility.IsBindingKey( self, f1_arg1 )
			end
		},
		{
			stateName = "Success",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowPastKeybind( self, f1_arg1 )
			end
		},
		{
			stateName = "Warning",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowWarningMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Recording",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsRecordingLoopBack( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local4 = KeybindMessage --[[ @ 0]]
	f1_local2 = KeybindMessage.subscribeToModel --[[ @ 0]]
	local f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showErrorMessage, function ( f17_arg0 )
		f1_arg0:updateElementState( KeybindMessage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "showErrorMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = KeybindMessage --[[ @ 0]]
	f1_local2 = KeybindMessage.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.isBindingKey, function ( f18_arg0 )
		f1_arg0:updateElementState( KeybindMessage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "isBindingKey"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = KeybindMessage --[[ @ 0]]
	f1_local2 = KeybindMessage.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showPastKeybind, function ( f19_arg0 )
		f1_arg0:updateElementState( KeybindMessage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "showPastKeybind"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = KeybindMessage --[[ @ 0]]
	f1_local2 = KeybindMessage.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showWarningMessage, function ( f20_arg0 )
		f1_arg0:updateElementState( KeybindMessage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "showWarningMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = KeybindMessage --[[ @ 0]]
	f1_local2 = KeybindMessage.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["SpeakingEnergy.isRecording"], function ( f21_arg0 )
		f1_arg0:updateElementState( KeybindMessage, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "SpeakingEnergy.isRecording"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( KeybindMessage ) --[[ @ 0]]
	self.KeybindMessage = KeybindMessage --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Error",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowErrorMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Binding",
			condition = function ( menu, element, event )
				return CoD.PCUtility.IsBindingKey( self, f1_arg1 )
			end
		},
		{
			stateName = "Success",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowPastKeybind( self, f1_arg1 )
			end
		},
		{
			stateName = "Warning",
			condition = function ( menu, element, event )
				return CoD.PCUtility.ShowWarningMessage( self, f1_arg1 )
			end
		},
		{
			stateName = "Recording",
			condition = function ( menu, element, event )
				return CoD.PCOptionsUtility.IsRecordingLoopBack( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showErrorMessage, function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "showErrorMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.isBindingKey, function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "isBindingKey"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showPastKeybind, function ( f29_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "showPastKeybind"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.KeybindMessages.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.showWarningMessage, function ( f30_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f30_arg0:get(),
			modelName = "showWarningMessage"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["SpeakingEnergy.isRecording"], function ( f31_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "SpeakingEnergy.isRecording"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.__resetProperties = function ( f32_arg0 )
	f32_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
	f32_arg0.Background:completeAnimation() --[[ @ 0]]
	f32_arg0.KeybindMessage:setLeftRight( 0.5, 0.5, -76, 124 ) --[[ @ 0]]
	f32_arg0.KeybindMessage:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f33_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f33_arg0.KeybindMessage:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.KeybindMessage ) --[[ @ 0]]
		end
	},
	Error = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f34_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f34_arg0.KeybindMessage:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.KeybindMessage ) --[[ @ 0]]
		end
	},
	Binding = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f35_arg0.Background:completeAnimation() --[[ @ 0]]
			f35_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.Background ) --[[ @ 0]]
			f35_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f35_arg0.KeybindMessage:setLeftRight( 0.5, 0.5, -100, 100 ) --[[ @ 0]]
			f35_arg0.clipFinished( f35_arg0.KeybindMessage ) --[[ @ 0]]
		end
	},
	Success = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f36_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f36_arg0.KeybindMessage:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.KeybindMessage ) --[[ @ 0]]
		end
	},
	Warning = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f37_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f37_arg0.KeybindMessage:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.KeybindMessage ) --[[ @ 0]]
		end
	},
	Recording = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f38_arg0.KeybindMessage:completeAnimation() --[[ @ 0]]
			f38_arg0.KeybindMessage:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.KeybindMessage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PC_StartMenu_Options_KeybindMessage.__onClose = function ( f39_arg0 )
	f39_arg0.Background:close() --[[ @ 0]]
	f39_arg0.KeybindMessage:close() --[[ @ 0]]
end
 --[[ @ 0]]
