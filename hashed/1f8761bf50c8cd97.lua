-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/cac/cac_buttonboxlrginactivestroke" ) --[[ @ 0]]
require( "x64:b6da5f5f17e9c79" ) --[[ @ 0]]
require( "x64:6ca22d2697b43b62" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.EmblemEditorMaterialSwatch = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorMaterialSwatch.__defaultWidth = 880 --[[ @ 0]]
CoD.EmblemEditorMaterialSwatch.__defaultHeight = 240 --[[ @ 0]]
CoD.EmblemEditorMaterialSwatch.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	SetPerControllerTableProperty( f1_arg1, "selectedMaterialCategory", nil ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorMaterialSwatch ) --[[ @ 0]]
	self.id = "EmblemEditorMaterialSwatch" --[[ @ 0]]
	self.soundSet = "SelectColor_ColorSwatchPicker" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ColorPickerBkgd0 = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ColorPickerBkgd0:setRGB( 0.09, 0.1, 0.12 ) --[[ @ 0]]
	ColorPickerBkgd0:setAlpha( 0 ) --[[ @ 0]]
	ColorPickerBkgd0:setZRot( 180 ) --[[ @ 0]]
	self:addElement( ColorPickerBkgd0 ) --[[ @ 0]]
	self.ColorPickerBkgd0 = ColorPickerBkgd0 --[[ @ 0]]
	
	local cacButtonBoxLrgInactiveStroke0 = CoD.cac_ButtonBoxLrgInactiveStroke.new( f1_arg0, f1_arg1, 0, 1, -3, 3, 0, 1, 0, 4 ) --[[ @ 0]]
	cacButtonBoxLrgInactiveStroke0:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( cacButtonBoxLrgInactiveStroke0 ) --[[ @ 0]]
	self.cacButtonBoxLrgInactiveStroke0 = cacButtonBoxLrgInactiveStroke0 --[[ @ 0]]
	
	local ColorPickerBkgd = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ColorPickerBkgd:setAlpha( 0.5 ) --[[ @ 0]]
	ColorPickerBkgd:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ColorPickerBkgd:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ColorPickerBkgd ) --[[ @ 0]]
	self.ColorPickerBkgd = ColorPickerBkgd --[[ @ 0]]
	
	local BarBacking = LUI.UIImage.new( 0, 0, 0, 880, 0, 0, 0, 240 ) --[[ @ 0]]
	BarBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( BarBacking ) --[[ @ 0]]
	self.BarBacking = BarBacking --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 1, -2, 0, 0, 1, -2, 0 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local materialSwatch = LUI.UIList.new( f1_arg0, f1_arg1, -4, 0, nil, true, false, false, false ) --[[ @ 0]]
	materialSwatch:setLeftRight( 0, 0, 97, 869 ) --[[ @ 0]]
	materialSwatch:setTopBottom( 0, 0, 3, 199 ) --[[ @ 0]]
	materialSwatch:setWidgetType( CoD.EmblemMaterialElement ) --[[ @ 0]]
	materialSwatch:setHorizontalCount( 8 ) --[[ @ 0]]
	materialSwatch:setVerticalCount( 2 ) --[[ @ 0]]
	materialSwatch:setSpacing( -4 ) --[[ @ 0]]
	materialSwatch:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	materialSwatch:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	materialSwatch:setDataSource( "EmblemMaterialList" ) --[[ @ 0]]
	materialSwatch:linkToElementModel( materialSwatch, "isBMClassified", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	materialSwatch:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if IsElementInState( element, "New" ) then
			CoD.CraftUtility.EmblemChooseMaterial_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			CoD.CraftUtility.Emblems_SetMaterialOld( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			UpdateSelfElementState( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			UpdateState( self, event ) --[[ @ 0]]
		else
			CoD.CraftUtility.EmblemChooseMaterial_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			UpdateState( self, event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	materialSwatch:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( materialSwatch, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isBMClassified" ) then
			GoBack( self, controller ) --[[ @ 0]]
			CoD.CraftUtility.EmblemChooseMaterial_SelectionChanged( self, element, controller ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isBMClassified" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( materialSwatch ) --[[ @ 0]]
	self.materialSwatch = materialSwatch --[[ @ 0]]
	
	local lastSavedColor = CoD.EmblemColorSaved.new( f1_arg0, f1_arg1, 0, 0, 17.5, 71.5, 0, 0, 10, 190 ) --[[ @ 0]]
	lastSavedColor:subscribeToGlobalModel( f1_arg1, "EmblemSelectedLayerColor", nil, function ( model )
		lastSavedColor:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	lastSavedColor:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.CraftUtility.EmblemChooseColor_ClearSelectedLayerMaterial( self, element, f1_arg1 ) --[[ @ 0]]
		CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( lastSavedColor, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		ClearMenuSavedState( menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( lastSavedColor ) --[[ @ 0]]
	self.lastSavedColor = lastSavedColor --[[ @ 0]]
	
	local FooterStripe1 = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -38, -1 ) --[[ @ 0]]
	FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	FooterStripe1:setImage( RegisterImage( @"hash_2C7A051F5EFC70E5" ) ) --[[ @ 0]]
	FooterStripe1:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	FooterStripe1:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FooterStripe1:setupNineSliceShader( 245, 40 ) --[[ @ 0]]
	self:addElement( FooterStripe1 ) --[[ @ 0]]
	self.FooterStripe1 = FooterStripe1 --[[ @ 0]]
	
	local optionsVerticalCounter = CoD.verticalCounter.new( f1_arg0, f1_arg1, 0.5, 0.5, -108, 192, 0, 0, 202, 239 ) --[[ @ 0]]
	optionsVerticalCounter:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( optionsVerticalCounter ) --[[ @ 0]]
	self.optionsVerticalCounter = optionsVerticalCounter --[[ @ 0]]
	
	local dividerV = LUI.UIImage.new( 0.5, 0.5, -353.5, -349.5, 0, 0, 1, 203 ) --[[ @ 0]]
	dividerV:setAlpha( 0.1 ) --[[ @ 0]]
	dividerV:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	dividerV:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	dividerV:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerV:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( dividerV ) --[[ @ 0]]
	self.dividerV = dividerV --[[ @ 0]]
	
	local dividerH = LUI.UIImage.new( 0, 0, 0, 877, 0, 0, 201, 205 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	local Materials = LUI.UIText.new( 0, 0, 0, 200, 0, 0, -17, -2 ) --[[ @ 0]]
	Materials:setRGB( 0.92, 0.89, 0.72 ) --[[ @ 0]]
	Materials:setText( LocalizeToUpperString( @"menu/material_picker" ) ) --[[ @ 0]]
	Materials:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Materials:setLetterSpacing( 6 ) --[[ @ 0]]
	Materials:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Materials:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Materials ) --[[ @ 0]]
	self.Materials = Materials --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HideArrow",
			condition = function ( menu, element, event )
				return not CoD.CraftUtility.EmblemChooseMaterial_MaterialsLeft( self, element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	materialSwatch.id = "materialSwatch" --[[ @ 0]]
	lastSavedColor.id = "lastSavedColor" --[[ @ 0]]
	optionsVerticalCounter.id = "optionsVerticalCounter" --[[ @ 0]]
	self.__defaultFocus = lastSavedColor --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local13 = self --[[ @ 0]]
	f1_local13 = optionsVerticalCounter --[[ @ 0]]
	SetAsListVerticalCounter( self, self, "materialSwatch" ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorMaterialSwatch.__onClose = function ( f12_arg0 )
	f12_arg0.cacButtonBoxLrgInactiveStroke0:close() --[[ @ 0]]
	f12_arg0.materialSwatch:close() --[[ @ 0]]
	f12_arg0.lastSavedColor:close() --[[ @ 0]]
	f12_arg0.optionsVerticalCounter:close() --[[ @ 0]]
end
 --[[ @ 0]]
