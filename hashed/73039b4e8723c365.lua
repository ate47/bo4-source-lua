-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/cac/attachmentloadoutclasslistitem" ) --[[ @ 0]]
require( "x64:39c626a0110d2a99" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/loadoutclassitem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/loadoutclassitemequipment" ) --[[ @ 0]]
require( "x64:73b14753712b858f" ) --[[ @ 0]]

CoD.ChooseClass_InGame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ChooseClass_InGame.__defaultWidth = 1920 --[[ @ 0]]
CoD.ChooseClass_InGame.__defaultHeight = 1080 --[[ @ 0]]
CoD.ChooseClass_InGame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.SetInGameMenuSessionMode( f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.ChooseClass_InGame ) --[[ @ 0]]
	self.id = "ChooseClass_InGame" --[[ @ 0]]
	self.soundSet = "Loadout" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local primary = CoD.LoadoutClassItem.new( f1_arg0, f1_arg1, 0.5, 0.5, -633, -277, 0, 0, 305, 509 ) --[[ @ 0]]
	primary:setZoom( 90 ) --[[ @ 0]]
	self:addElement( primary ) --[[ @ 0]]
	self.primary = primary --[[ @ 0]]
	
	local secondary = CoD.LoadoutClassItemSecondary.new( f1_arg0, f1_arg1, 0.5, 0.5, 7, 381, 0, 0, 305, 615 ) --[[ @ 0]]
	secondary:setZoom( 90 ) --[[ @ 0]]
	self:addElement( secondary ) --[[ @ 0]]
	self.secondary = secondary --[[ @ 0]]
	
	local killstreak = CoD.LoadoutClassItemEquipment.new( f1_arg0, f1_arg1, 0.5, 0.5, 391, 604, 0, 0, 305, 475 ) --[[ @ 0]]
	killstreak:setZoom( 90 ) --[[ @ 0]]
	self:addElement( killstreak ) --[[ @ 0]]
	self.killstreak = killstreak --[[ @ 0]]
	
	local customClasssList = LUI.UIList.new( f1_arg0, f1_arg1, 5, 0, nil, false, false, false, false ) --[[ @ 0]]
	customClasssList:setLeftRight( 0.5, 0.5, -763, -593 ) --[[ @ 0]]
	customClasssList:setTopBottom( 0, 0, 318, 513 ) --[[ @ 0]]
	customClasssList:setZoom( 90 ) --[[ @ 0]]
	customClasssList:setWidgetType( CoD.CustomClassListButton ) --[[ @ 0]]
	customClasssList:setVerticalCount( 5 ) --[[ @ 0]]
	customClasssList:setSpacing( 5 ) --[[ @ 0]]
	customClasssList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	customClasssList:setDataSource( "ChooseClass_InGame" ) --[[ @ 0]]
	customClasssList:linkToElementModel( customClasssList, "disabled", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	customClasssList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		SetMenuCustomClassData( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	customClasssList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.CACUtility.SetActiveListItemToSelectedClass( f1_arg1, f1_arg0, element ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	customClasssList:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( customClasssList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsPerControllerTablePropertyValue( controller, "isInMobileArmory", true ) then
			ChangeClass( menu, self, element, controller ) --[[ @ 0]]
			LockInput( self, controller, false ) --[[ @ 0]]
			Close( self, controller ) --[[ @ 0]]
			SetPerControllerTableProperty( controller, "isInMobileArmory", false ) --[[ @ 0]]
			return true
		elseif IsCurrentMenu( menu, "PositionDraft" ) then
			ChangeClass( menu, self, element, controller ) --[[ @ 0]]
			SetMenuState( menu, "CharacterSelected", controller ) --[[ @ 0]]
			return true
		elseif not IsDisabled( element, controller ) then
			ChangeClass( menu, self, element, controller ) --[[ @ 0]]
			CloseStartMenu( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPerControllerTablePropertyValue( controller, "isInMobileArmory", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], nil ) --[[ @ 0]]
			return true
		elseif IsCurrentMenu( menu, "PositionDraft" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], nil ) --[[ @ 0]]
			return true
		elseif not IsDisabled( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_customClasssList = function ( f8_arg0, f8_arg1, f8_arg2, f8_arg3 )
		CoD.CACUtility.SetActiveListItemToSelectedClass( f8_arg1, f8_arg2, customClasssList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_customClasssList ) --[[ @ 0]]
	self:addElement( customClasssList ) --[[ @ 0]]
	self.customClasssList = customClasssList --[[ @ 0]]
	
	local customClassName = LUI.UIText.new( 0.5, 0.5, -633, -200, 0, 0, 214, 246 ) --[[ @ 0]]
	customClassName:setZoom( 80 ) --[[ @ 0]]
	customClassName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	customClassName:setLetterSpacing( 14 ) --[[ @ 0]]
	customClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	customClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( customClassName ) --[[ @ 0]]
	self.customClassName = customClassName --[[ @ 0]]
	
	local primaryAttachments = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 10, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	primaryAttachments:setLeftRight( 0.5, 0.5, -633, -43 ) --[[ @ 0]]
	primaryAttachments:setTopBottom( 0, 0, 620, 700 ) --[[ @ 0]]
	primaryAttachments:setZoom( 90 ) --[[ @ 0]]
	primaryAttachments:setWidgetType( CoD.AttachmentLoadoutClassListItem ) --[[ @ 0]]
	primaryAttachments:setHorizontalCount( 5 ) --[[ @ 0]]
	primaryAttachments:setSpacing( 10 ) --[[ @ 0]]
	primaryAttachments:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( primaryAttachments ) --[[ @ 0]]
	self.primaryAttachments = primaryAttachments --[[ @ 0]]
	
	local secondaryAttachments = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 10, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	secondaryAttachments:setLeftRight( 0.5, 0.5, 7, 357 ) --[[ @ 0]]
	secondaryAttachments:setTopBottom( 0, 0, 620, 700 ) --[[ @ 0]]
	secondaryAttachments:setZoom( 90 ) --[[ @ 0]]
	secondaryAttachments:setWidgetType( CoD.AttachmentLoadoutClassListItem ) --[[ @ 0]]
	secondaryAttachments:setHorizontalCount( 3 ) --[[ @ 0]]
	secondaryAttachments:setSpacing( 10 ) --[[ @ 0]]
	secondaryAttachments:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( secondaryAttachments ) --[[ @ 0]]
	self.secondaryAttachments = secondaryAttachments --[[ @ 0]]
	
	primary:linkToElementModel( customClasssList, "primary", false, function ( model )
		primary:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondary:linkToElementModel( customClasssList, "secondary", false, function ( model )
		secondary:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	customClassName:linkToElementModel( customClasssList, "customClassName", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			customClassName:setText( ConvertToUpperString( f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	primaryAttachments:linkToElementModel( customClasssList, "primaryattachments", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			primaryAttachments:setDataSource( f12_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	secondaryAttachments:linkToElementModel( customClasssList, "secondaryattachments", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			secondaryAttachments:setDataSource( f13_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f14_arg0, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if IsCurrentMenu( menu, "PositionDraft" ) then
			SetMenuState( menu, "CharacterSelected", controller ) --[[ @ 0]]
			return true
		else
			SendMenuResponse( self, "ChooseClass_InGame", "cancel", controller ) --[[ @ 0]]
			LockInput( self, controller, false ) --[[ @ 0]]
			ClearMenuSavedState( menu ) --[[ @ 0]]
			PlaySoundSetSound( self, "menu_go_back" ) --[[ @ 0]]
			Close( self, controller ) --[[ @ 0]]
			return true
		end
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_lb"], nil, function ( element, menu, controller, model )
		if IsMultiplayer() and not IsCACCustomClassCountDefault( controller ) then
			chooseClass_TabMPClassesListLeft( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMultiplayer() and not IsCACCustomClassCountDefault( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_lb"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_rb"], nil, function ( element, menu, controller, model )
		if IsMultiplayer() and not IsCACCustomClassCountDefault( controller ) then
			chooseClass_TabMPClassesListRight( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMultiplayer() and not IsCACCustomClassCountDefault( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rb"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	primary.id = "primary" --[[ @ 0]]
	secondary.id = "secondary" --[[ @ 0]]
	killstreak.id = "killstreak" --[[ @ 0]]
	customClasssList.id = "customClasssList" --[[ @ 0]]
	primaryAttachments.id = "primaryAttachments" --[[ @ 0]]
	secondaryAttachments.id = "secondaryAttachments" --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_customClasssList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ChooseClass_InGame.__onClose = function ( f22_arg0 )
	f22_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f22_arg0.primary:close() --[[ @ 0]]
	f22_arg0.secondary:close() --[[ @ 0]]
	f22_arg0.customClassName:close() --[[ @ 0]]
	f22_arg0.primaryAttachments:close() --[[ @ 0]]
	f22_arg0.secondaryAttachments:close() --[[ @ 0]]
	f22_arg0.killstreak:close() --[[ @ 0]]
	f22_arg0.customClasssList:close() --[[ @ 0]]
end
 --[[ @ 0]]
