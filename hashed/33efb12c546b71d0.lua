-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:3cb24abd293714b9" ) --[[ @ 0]]
require( "x64:32c1273189457a97" ) --[[ @ 0]]
require( "x64:40c7e896ee4bc3f8" ) --[[ @ 0]]

CoD.WZCharacterInfoContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WZCharacterInfoContainer.__defaultWidth = 393 --[[ @ 0]]
CoD.WZCharacterInfoContainer.__defaultHeight = 160 --[[ @ 0]]
CoD.WZCharacterInfoContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WZCharacterInfoContainer ) --[[ @ 0]]
	self.id = "WZCharacterInfoContainer" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CharacterSelectionCharacterInfo = CoD.CharacterSelection_CharacterInfo.new( f1_arg0, f1_arg1, 0, 0, 0, 500, 0, 0, 0, 160 ) --[[ @ 0]]
	CharacterSelectionCharacterInfo:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue() and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "WZCharacterInfo", "showInfoState", CoD.WZUtility.CharacterInfoShowState.HIDE )
			end
		}
	} ) --[[ @ 0]]
	local CharacterSelectionPrestigeInfo = CharacterSelectionCharacterInfo --[[ @ 0]]
	local TrialWidget = CharacterSelectionCharacterInfo.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.WZCharacterInfo.getModel( f1_arg1 ) --[[ @ 0]]
	TrialWidget( CharacterSelectionPrestigeInfo, f1_local4.showInfoState, function ( f3_arg0 )
		f1_arg0:updateElementState( CharacterSelectionCharacterInfo, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "showInfoState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CharacterSelectionCharacterInfo:linkToElementModel( self, nil, false, function ( model )
		CharacterSelectionCharacterInfo:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharacterSelectionCharacterInfo:linkToElementModel( self, "fullName", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			CharacterSelectionCharacterInfo.CharacterFullName:setText( CoD.SocialUtility.CleanGamerTag( CoD.BaseUtility.LocalizeIfXHash( f5_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CharacterSelectionCharacterInfo.availabilityText.__availabilityText_String_Reference = function ( f6_arg0 )
		local f6_local0 = f6_arg0:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			CharacterSelectionCharacterInfo.availabilityText:setText( CoD.WZUtility.PrependUpsellIconIfNeed( self:getModel(), f6_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	CharacterSelectionCharacterInfo:linkToElementModel( self, "availabilityText", true, CharacterSelectionCharacterInfo.availabilityText.__availabilityText_String_Reference ) --[[ @ 0]]
	CharacterSelectionCharacterInfo.availabilityText.__availabilityText_String_Reference_FullPath = function ()
		local f7_local0 = self:getModel() --[[ @ 0]]
		if f7_local0 then
			f7_local0 = self:getModel() --[[ @ 0]]
			f7_local0 = f7_local0.availabilityText --[[ @ 0]]
		end
		if f7_local0 then
			CharacterSelectionCharacterInfo.availabilityText.__availabilityText_String_Reference( f7_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( CharacterSelectionCharacterInfo, "setState", function ( element, controller, f8_arg2, f8_arg3, f8_arg4 )
		UpdateElementState( self, "TrialWidget", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CharacterSelectionCharacterInfo ) --[[ @ 0]]
	self.CharacterSelectionCharacterInfo = CharacterSelectionCharacterInfo --[[ @ 0]]
	
	TrialWidget = CoD.TrialInfoBannerWidget.new( f1_arg0, f1_arg1, 0, 0, 0, 500, 0, 0, 220, 255 ) --[[ @ 0]]
	TrialWidget:mergeStateConditions( {
		{
			stateName = "Shown",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysFalse()
			end
		},
		{
			stateName = "ShownLargeWrap",
			condition = function ( menu, element, event )
				local f10_local0 = IsGameTrial() --[[ @ 0]]
				if f10_local0 then
					f10_local0 = IsElementInState( self.CharacterSelectionCharacterInfo, "Visible" ) --[[ @ 0]]
					if f10_local0 then
						f10_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isDefaultCharacter" ) --[[ @ 0]]
					end
				end
				return f10_local0
			end
		}
	} ) --[[ @ 0]]
	TrialWidget:linkToElementModel( TrialWidget, "isDefaultCharacter", true, function ( model )
		f1_arg0:updateElementState( TrialWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isDefaultCharacter"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	TrialWidget:linkToElementModel( self, nil, false, function ( model )
		TrialWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TrialWidget ) --[[ @ 0]]
	self.TrialWidget = TrialWidget --[[ @ 0]]
	
	CharacterSelectionPrestigeInfo = CoD.CharacterSelection_PrestigeInfo.new( f1_arg0, f1_arg1, 0, 0, 0, 74, 0, 0, 144, 218 ) --[[ @ 0]]
	CharacterSelectionPrestigeInfo:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f13_local0 --[[ @ 0]]
				if not IsPrestigeLevelAtZero( f1_arg1 ) then
					f13_local0 = CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isEchelonUnlock" ) --[[ @ 0]]
				else
					f13_local0 = false --[[ @ 0]]
				end
				return f13_local0
			end
		}
	} ) --[[ @ 0]]
	CharacterSelectionPrestigeInfo:linkToElementModel( CharacterSelectionPrestigeInfo, "isEchelonUnlock", true, function ( model )
		f1_arg0:updateElementState( CharacterSelectionPrestigeInfo, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isEchelonUnlock"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharacterSelectionPrestigeInfo:linkToElementModel( self, nil, false, function ( model )
		CharacterSelectionPrestigeInfo:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CharacterSelectionPrestigeInfo ) --[[ @ 0]]
	self.CharacterSelectionPrestigeInfo = CharacterSelectionPrestigeInfo --[[ @ 0]]
	
	CharacterSelectionCharacterInfo:linkToElementModel( self, "purchasable", true, CharacterSelectionCharacterInfo.availabilityText.__availabilityText_String_Reference_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "TrialPurchsable",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "purchasable" )
			end
		},
		{
			stateName = "TrialBMLocked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isBMLocked" )
			end
		},
		{
			stateName = "TrialLocked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "disabled" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "purchasable", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "purchasable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isBMLocked", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isBMLocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "disabled", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WZCharacterInfoContainer.__resetProperties = function ( f22_arg0 )
	f22_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
	f22_arg0.TrialWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_262486486346EC3F" ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZCharacterInfoContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	TrialPurchsable = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f24_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
			f24_arg0.TrialWidget.InfoText:completeAnimation() --[[ @ 0]]
			f24_arg0.TrialWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_17C9D41D120A6AD1" ) ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.TrialWidget ) --[[ @ 0]]
		end
	},
	TrialBMLocked = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
			f25_arg0.TrialWidget.InfoText:completeAnimation() --[[ @ 0]]
			f25_arg0.TrialWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_48C8E3A75045BE50" ) ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.TrialWidget ) --[[ @ 0]]
		end
	},
	TrialLocked = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f26_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
			f26_arg0.TrialWidget.InfoText:completeAnimation() --[[ @ 0]]
			f26_arg0.TrialWidget.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2E88946FB6CDD737" ) ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.TrialWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WZCharacterInfoContainer.__onClose = function ( f27_arg0 )
	f27_arg0.CharacterSelectionCharacterInfo:close() --[[ @ 0]]
	f27_arg0.TrialWidget:close() --[[ @ 0]]
	f27_arg0.CharacterSelectionPrestigeInfo:close() --[[ @ 0]]
end
 --[[ @ 0]]
