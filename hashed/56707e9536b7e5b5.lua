-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/backgroundframes/menuframeingame" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "x64:5a4733827d6c5d52" ) --[[ @ 0]]
require( "x64:33696ed865d69c3c" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/options/startmenuoptionsbackground" ) --[[ @ 0]]

CoD.StartMenu_Options_PrivacySettings = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.StartMenu_Options_PrivacySettings = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "StartMenu_Options_PrivacySettings", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.ModelUtility.SetGlobalDatasourceModelValueToEnum( f1_arg0, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_464A086C0CC2A87"] ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Options_PrivacySettings ) --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local StartMenuOptionsBackground = CoD.StartMenuOptionsBackground.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( StartMenuOptionsBackground ) --[[ @ 0]]
	self.StartMenuOptionsBackground = StartMenuOptionsBackground --[[ @ 0]]
	
	local MenuFrameIngame = CoD.MenuFrameIngame.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( MenuFrameIngame ) --[[ @ 0]]
	self.MenuFrameIngame = MenuFrameIngame --[[ @ 0]]
	
	local PrivacySettingsManagementForm = CoD.StartMenu_Options_PrivacySettingsManagementForm.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( PrivacySettingsManagementForm ) --[[ @ 0]]
	self.PrivacySettingsManagementForm = PrivacySettingsManagementForm --[[ @ 0]]
	
	local CommonHeader = CoD.CommonHeader.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader.BGSceneBlur:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"hash_65EB6FED86163697" ) ) --[[ @ 0]]
	CommonHeader.subtitle.subtitle:setAlpha( 0 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CommonHeader:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	local headercontainerfrontend = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	headercontainerfrontend:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( headercontainerfrontend ) --[[ @ 0]]
	self.headercontainerfrontend = headercontainerfrontend --[[ @ 0]]
	
	local StateWidget = CoD.StartMenu_Options_PrivacySettingsStateWidget.new( f1_local1, f1_arg0, 0.5, 0.5, -443, 443, 0.5, 0.5, -115, 35 ) --[[ @ 0]]
	StateWidget:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( StateWidget ) --[[ @ 0]]
	self.StateWidget = StateWidget --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Updating",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg0, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_464A086C0CC2A87"] )
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.PrivacySettingManagementForm.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.updateProgressState, function ( f6_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f6_arg0:get(),
			modelName = "updateProgressState"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.PrivacySettingManagementForm.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.updateProgressState, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_464A086C0CC2A87"] ) then
			ClearRecordedFocus( menu, controller ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_464A086C0CC2A87"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"hash_778D439E1B360368", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_4F100F564F11A910"] ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			ClearRecordedFocus( menu, controller ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_1DE287BA1764B6AE"] ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			ClearRecordedFocus( menu, controller ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_4F100F564F11A910"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( controller, "PrivacySettingManagementForm", "updateProgressState", Enum[@"hash_65887EAAB38F9F8"][@"hash_1DE287BA1764B6AE"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	MenuFrameIngame:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		MenuFrameIngame.id = "MenuFrameIngame" --[[ @ 0]]
	end
	PrivacySettingsManagementForm.id = "PrivacySettingsManagementForm" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = PrivacySettingsManagementForm --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local9 = self --[[ @ 0]]
	MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Options_PrivacySettings.__resetProperties = function ( f12_arg0 )
	f12_arg0.PrivacySettingsManagementForm:completeAnimation() --[[ @ 0]]
	f12_arg0.StateWidget:completeAnimation() --[[ @ 0]]
	f12_arg0.PrivacySettingsManagementForm:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.StateWidget:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Options_PrivacySettings.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Updating = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f14_arg0.PrivacySettingsManagementForm:completeAnimation() --[[ @ 0]]
			f14_arg0.PrivacySettingsManagementForm:setAlpha( 0 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.PrivacySettingsManagementForm ) --[[ @ 0]]
			f14_arg0.StateWidget:completeAnimation() --[[ @ 0]]
			f14_arg0.StateWidget:setAlpha( 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.StateWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Options_PrivacySettings.__onClose = function ( f15_arg0 )
	f15_arg0.StartMenuOptionsBackground:close() --[[ @ 0]]
	f15_arg0.MenuFrameIngame:close() --[[ @ 0]]
	f15_arg0.PrivacySettingsManagementForm:close() --[[ @ 0]]
	f15_arg0.CommonHeader:close() --[[ @ 0]]
	f15_arg0.headercontainerfrontend:close() --[[ @ 0]]
	f15_arg0.StateWidget:close() --[[ @ 0]]
end
 --[[ @ 0]]
