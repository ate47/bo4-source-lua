-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/vehiclehuds/vhud_buttonprompt_minimal" ) --[[ @ 0]]
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]

CoD.vhud_hellstorm_button_layout = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.__defaultWidth = 1920 --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.__defaultHeight = 1080 --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_hellstorm_button_layout ) --[[ @ 0]]
	self.id = "vhud_hellstorm_button_layout" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local KBMClusterBombActionName = nil --[[ @ 0]]
	
	KBMClusterBombActionName = LUI.UIText.new( 0.5, 0.5, -583, -283, 1, 1, -159, -143 ) --[[ @ 0]]
	KBMClusterBombActionName:setAlpha( 0 ) --[[ @ 0]]
	KBMClusterBombActionName:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6368EB0A070207A" ) ) --[[ @ 0]]
	KBMClusterBombActionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	KBMClusterBombActionName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	KBMClusterBombActionName:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMClusterBombActionName:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMClusterBombActionName:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	KBMClusterBombActionName:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	KBMClusterBombActionName:setLetterSpacing( 0.5 ) --[[ @ 0]]
	KBMClusterBombActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	KBMClusterBombActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( KBMClusterBombActionName ) --[[ @ 0]]
	self.KBMClusterBombActionName = KBMClusterBombActionName --[[ @ 0]]
	
	local KBMClusterBombPrompt = nil --[[ @ 0]]
	
	KBMClusterBombPrompt = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -474, -385, 1, 1, -203.5, -181.5 ) --[[ @ 0]]
	KBMClusterBombPrompt:setAlpha( 0 ) --[[ @ 0]]
	KBMClusterBombPrompt.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+attack}]" ) ) --[[ @ 0]]
	KBMClusterBombPrompt.GamepadText:setText( "" ) --[[ @ 0]]
	self:addElement( KBMClusterBombPrompt ) --[[ @ 0]]
	self.KBMClusterBombPrompt = KBMClusterBombPrompt --[[ @ 0]]
	
	local KBMSlowDownActionName = nil --[[ @ 0]]
	
	KBMSlowDownActionName = LUI.UIText.new( 0.5, 0.5, 278.5, 578.5, 1, 1, -159, -143 ) --[[ @ 0]]
	KBMSlowDownActionName:setAlpha( 0 ) --[[ @ 0]]
	KBMSlowDownActionName:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_B1A03F2448A49D9" ) ) --[[ @ 0]]
	KBMSlowDownActionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	KBMSlowDownActionName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	KBMSlowDownActionName:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMSlowDownActionName:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMSlowDownActionName:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	KBMSlowDownActionName:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	KBMSlowDownActionName:setLetterSpacing( 0.5 ) --[[ @ 0]]
	KBMSlowDownActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	KBMSlowDownActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( KBMSlowDownActionName ) --[[ @ 0]]
	self.KBMSlowDownActionName = KBMSlowDownActionName --[[ @ 0]]
	
	local KBMSlowDownPrompt = nil --[[ @ 0]]
	
	KBMSlowDownPrompt = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, 384, 473, 1, 1, -203.5, -181.5 ) --[[ @ 0]]
	KBMSlowDownPrompt:setAlpha( 0 ) --[[ @ 0]]
	KBMSlowDownPrompt.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+speed_throw}]" ) ) --[[ @ 0]]
	KBMSlowDownPrompt.GamepadText:setText( "" ) --[[ @ 0]]
	self:addElement( KBMSlowDownPrompt ) --[[ @ 0]]
	self.KBMSlowDownPrompt = KBMSlowDownPrompt --[[ @ 0]]
	
	local KBMSpeedBoostActionName = nil --[[ @ 0]]
	
	KBMSpeedBoostActionName = LUI.UIText.new( 0.5, 0.5, -150, 150, 1, 1, -112, -96 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setAlpha( 0 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79D336E3DD657B0A" ) ) --[[ @ 0]]
	KBMSpeedBoostActionName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	KBMSpeedBoostActionName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	KBMSpeedBoostActionName:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	KBMSpeedBoostActionName:setLetterSpacing( 0.5 ) --[[ @ 0]]
	KBMSpeedBoostActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	KBMSpeedBoostActionName:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( KBMSpeedBoostActionName ) --[[ @ 0]]
	self.KBMSpeedBoostActionName = KBMSpeedBoostActionName --[[ @ 0]]
	
	local KBMSpeedBoostPrompt = nil --[[ @ 0]]
	
	KBMSpeedBoostPrompt = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -44.5, 44.5, 1, 1, -156.5, -134.5 ) --[[ @ 0]]
	KBMSpeedBoostPrompt:setAlpha( 0 ) --[[ @ 0]]
	KBMSpeedBoostPrompt.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+vehicleboost}]" ) ) --[[ @ 0]]
	KBMSpeedBoostPrompt.GamepadText:setText( "" ) --[[ @ 0]]
	self:addElement( KBMSpeedBoostPrompt ) --[[ @ 0]]
	self.KBMSpeedBoostPrompt = KBMSpeedBoostPrompt --[[ @ 0]]
	
	local LeftTrigger = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, -518, -343, 1, 1, -176, -126 ) --[[ @ 0]]
	LeftTrigger:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	LeftTrigger:linkToElementModel( LeftTrigger, "text", true, function ( model )
		f1_arg0:updateElementState( LeftTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local L3Button = LeftTrigger --[[ @ 0]]
	local RightTrigger = LeftTrigger.subscribeToModel --[[ @ 0]]
	local RightStick = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	RightTrigger( L3Button, RightStick["factions.isCoDCaster"], function ( f4_arg0 )
		f1_arg0:updateElementState( LeftTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftTrigger:linkToElementModel( LeftTrigger, "bind", true, function ( model )
		f1_arg0:updateElementState( LeftTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftTrigger:linkToElementModel( LeftTrigger, "cooldown", true, function ( model )
		if LeftTrigger["__stateValidation_cooldown->cooldown"] then
			LeftTrigger:removeSubscription( LeftTrigger["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			LeftTrigger["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f6_local0 = model:get() --[[ @ 0]]
			local f6_local1 = model:get() --[[ @ 0]]
			model = f6_local0 and f6_local1.cooldown --[[ @ 0]]
		end
		if model then
			LeftTrigger["__stateValidation_cooldown->cooldown"] = LeftTrigger:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( LeftTrigger, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeftTrigger:subscribeToGlobalModel( f1_arg1, "VehicleController", "left_trigger_button_image", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			LeftTrigger.button:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeftTrigger:linkToElementModel( self, "BUTTON_LTRIG", false, function ( model )
		LeftTrigger:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftTrigger:linkToElementModel( self, "BUTTON_LTRIG.text", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			LeftTrigger.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( LeftTrigger ) --[[ @ 0]]
	self.LeftTrigger = LeftTrigger --[[ @ 0]]
	
	RightTrigger = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, 320, 495, 1, 1, -176, -126 ) --[[ @ 0]]
	RightTrigger:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	RightTrigger:linkToElementModel( RightTrigger, "text", true, function ( model )
		f1_arg0:updateElementState( RightTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightStick = RightTrigger --[[ @ 0]]
	L3Button = RightTrigger.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	L3Button( RightStick, f1_local11["factions.isCoDCaster"], function ( f13_arg0 )
		f1_arg0:updateElementState( RightTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightTrigger:linkToElementModel( RightTrigger, "bind", true, function ( model )
		f1_arg0:updateElementState( RightTrigger, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightTrigger:linkToElementModel( RightTrigger, "cooldown", true, function ( model )
		if RightTrigger["__stateValidation_cooldown->cooldown"] then
			RightTrigger:removeSubscription( RightTrigger["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			RightTrigger["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f15_local0 = model:get() --[[ @ 0]]
			local f15_local1 = model:get() --[[ @ 0]]
			model = f15_local0 and f15_local1.cooldown --[[ @ 0]]
		end
		if model then
			RightTrigger["__stateValidation_cooldown->cooldown"] = RightTrigger:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( RightTrigger, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightTrigger:subscribeToGlobalModel( f1_arg1, "VehicleController", "right_trigger_button_image", function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			RightTrigger.button:setImage( RegisterImage( f17_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightTrigger:linkToElementModel( self, "BUTTON_RTRIG", false, function ( model )
		RightTrigger:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightTrigger:linkToElementModel( self, "BUTTON_RTRIG.text", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			RightTrigger.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f19_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RightTrigger ) --[[ @ 0]]
	self.RightTrigger = RightTrigger --[[ @ 0]]
	
	L3Button = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, -303, -128, 1, 1, -126, -76 ) --[[ @ 0]]
	L3Button:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	L3Button:linkToElementModel( L3Button, "text", true, function ( model )
		f1_arg0:updateElementState( L3Button, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local11 = L3Button --[[ @ 0]]
	RightStick = L3Button.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	RightStick( f1_local11, f1_local12["factions.isCoDCaster"], function ( f22_arg0 )
		f1_arg0:updateElementState( L3Button, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	L3Button:linkToElementModel( L3Button, "bind", true, function ( model )
		f1_arg0:updateElementState( L3Button, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	L3Button:linkToElementModel( L3Button, "cooldown", true, function ( model )
		if L3Button["__stateValidation_cooldown->cooldown"] then
			L3Button:removeSubscription( L3Button["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			L3Button["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f24_local0 = model:get() --[[ @ 0]]
			local f24_local1 = model:get() --[[ @ 0]]
			model = f24_local0 and f24_local1.cooldown --[[ @ 0]]
		end
		if model then
			L3Button["__stateValidation_cooldown->cooldown"] = L3Button:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( L3Button, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	L3Button:subscribeToGlobalModel( f1_arg1, "VehicleController", "left_stick_button_image", function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			L3Button.button:setImage( RegisterImage( f26_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	L3Button:linkToElementModel( self, "BUTTON_LSTICK", false, function ( model )
		L3Button:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	L3Button:linkToElementModel( self, "BUTTON_LSTICK.text", true, function ( model )
		local f28_local0 = model:get() --[[ @ 0]]
		if f28_local0 ~= nil then
			L3Button.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f28_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( L3Button ) --[[ @ 0]]
	self.L3Button = L3Button --[[ @ 0]]
	
	RightStick = CoD.vhud_ButtonPrompt_Minimal.new( f1_arg0, f1_arg1, 0.5, 0.5, 129, 304, 1, 1, -126, -76 ) --[[ @ 0]]
	RightStick:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC() and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	RightStick:linkToElementModel( RightStick, "text", true, function ( model )
		f1_arg0:updateElementState( RightStick, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local12 = RightStick --[[ @ 0]]
	f1_local11 = RightStick.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local11( f1_local12, f1_local13["factions.isCoDCaster"], function ( f31_arg0 )
		f1_arg0:updateElementState( RightStick, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f31_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightStick:linkToElementModel( RightStick, "bind", true, function ( model )
		f1_arg0:updateElementState( RightStick, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "bind"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightStick:linkToElementModel( RightStick, "cooldown", true, function ( model )
		if RightStick["__stateValidation_cooldown->cooldown"] then
			RightStick:removeSubscription( RightStick["__stateValidation_cooldown->cooldown"] ) --[[ @ 0]]
			RightStick["__stateValidation_cooldown->cooldown"] = nil --[[ @ 0]]
		end
		if model then
			local f33_local0 = model:get() --[[ @ 0]]
			local f33_local1 = model:get() --[[ @ 0]]
			model = f33_local0 and f33_local1.cooldown --[[ @ 0]]
		end
		if model then
			RightStick["__stateValidation_cooldown->cooldown"] = RightStick:subscribeToModel( model, function ( model )
				f1_arg0:updateElementState( RightStick, {
					name = "model_validation",
					menu = f1_arg0,
					controller = f1_arg1,
					modelValue = model:get(),
					modelName = "cooldown->cooldown"
				} ) --[[ @ 0]]
			end ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightStick:subscribeToGlobalModel( f1_arg1, "VehicleController", "right_stick_move_image", function ( model )
		local f35_local0 = model:get() --[[ @ 0]]
		if f35_local0 ~= nil then
			RightStick.button:setImage( RegisterImage( f35_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightStick:linkToElementModel( self, "R_STICK", false, function ( model )
		RightStick:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightStick:linkToElementModel( self, "R_STICK.text", true, function ( model )
		local f37_local0 = model:get() --[[ @ 0]]
		if f37_local0 ~= nil then
			RightStick.prompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( f37_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RightStick ) --[[ @ 0]]
	self.RightStick = RightStick --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KeyboardMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f39_arg0, f39_arg1 )
		f39_arg1.menu = f39_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f39_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local12 = self --[[ @ 0]]
	f1_local11 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local11( f1_local12, f1_local13.LastInput, function ( f40_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f40_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local11 = self --[[ @ 0]]
	if IsPC() then
		SizeToHudArea( f1_local11, f1_arg1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.__resetProperties = function ( f41_arg0 )
	f41_arg0.RightStick:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMSpeedBoostPrompt:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMSpeedBoostActionName:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMSlowDownPrompt:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMSlowDownActionName:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMClusterBombPrompt:completeAnimation() --[[ @ 0]]
	f41_arg0.KBMClusterBombActionName:completeAnimation() --[[ @ 0]]
	f41_arg0.LeftTrigger:completeAnimation() --[[ @ 0]]
	f41_arg0.RightTrigger:completeAnimation() --[[ @ 0]]
	f41_arg0.L3Button:completeAnimation() --[[ @ 0]]
	f41_arg0.RightStick:setLeftRight( 0.5, 0.5, 129, 304 ) --[[ @ 0]]
	f41_arg0.RightStick:setTopBottom( 1, 1, -126, -76 ) --[[ @ 0]]
	f41_arg0.RightStick:setAlpha( 1 ) --[[ @ 0]]
	f41_arg0.KBMSpeedBoostPrompt:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.KBMSpeedBoostActionName:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.KBMSlowDownPrompt:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.KBMSlowDownActionName:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.KBMClusterBombPrompt:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.KBMClusterBombActionName:setLeftRight( 0.5, 0.5, -583, -283 ) --[[ @ 0]]
	f41_arg0.KBMClusterBombActionName:setAlpha( 0 ) --[[ @ 0]]
	f41_arg0.LeftTrigger:setAlpha( 1 ) --[[ @ 0]]
	f41_arg0.RightTrigger:setAlpha( 1 ) --[[ @ 0]]
	f41_arg0.L3Button:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f42_arg0.RightStick:completeAnimation() --[[ @ 0]]
			f42_arg0.RightStick:setLeftRight( 0.5, 0.5, 148, 323 ) --[[ @ 0]]
			f42_arg0.RightStick:setTopBottom( 1, 1, -125, -75 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.RightStick ) --[[ @ 0]]
		end
	},
	KeyboardMouse = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f43_arg0.KBMClusterBombActionName:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMClusterBombActionName:setLeftRight( 0.5, 0.5, -582, -282 ) --[[ @ 0]]
			f43_arg0.KBMClusterBombActionName:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMClusterBombActionName ) --[[ @ 0]]
			f43_arg0.KBMClusterBombPrompt:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMClusterBombPrompt:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMClusterBombPrompt ) --[[ @ 0]]
			f43_arg0.KBMSlowDownActionName:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMSlowDownActionName:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMSlowDownActionName ) --[[ @ 0]]
			f43_arg0.KBMSlowDownPrompt:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMSlowDownPrompt:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMSlowDownPrompt ) --[[ @ 0]]
			f43_arg0.KBMSpeedBoostActionName:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMSpeedBoostActionName:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMSpeedBoostActionName ) --[[ @ 0]]
			f43_arg0.KBMSpeedBoostPrompt:completeAnimation() --[[ @ 0]]
			f43_arg0.KBMSpeedBoostPrompt:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.KBMSpeedBoostPrompt ) --[[ @ 0]]
			f43_arg0.LeftTrigger:completeAnimation() --[[ @ 0]]
			f43_arg0.LeftTrigger:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.LeftTrigger ) --[[ @ 0]]
			f43_arg0.RightTrigger:completeAnimation() --[[ @ 0]]
			f43_arg0.RightTrigger:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.RightTrigger ) --[[ @ 0]]
			f43_arg0.L3Button:completeAnimation() --[[ @ 0]]
			f43_arg0.L3Button:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.L3Button ) --[[ @ 0]]
			f43_arg0.RightStick:completeAnimation() --[[ @ 0]]
			f43_arg0.RightStick:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.RightStick ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.vhud_hellstorm_button_layout.__onClose = function ( f44_arg0 )
	f44_arg0.KBMClusterBombPrompt:close() --[[ @ 0]]
	f44_arg0.KBMSlowDownPrompt:close() --[[ @ 0]]
	f44_arg0.KBMSpeedBoostPrompt:close() --[[ @ 0]]
	f44_arg0.LeftTrigger:close() --[[ @ 0]]
	f44_arg0.RightTrigger:close() --[[ @ 0]]
	f44_arg0.L3Button:close() --[[ @ 0]]
	f44_arg0.RightStick:close() --[[ @ 0]]
end
 --[[ @ 0]]
