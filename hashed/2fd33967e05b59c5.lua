-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:7fbffc86e9a93477" ) --[[ @ 0]]
require( "x64:277520438c104615" ) --[[ @ 0]]
require( "x64:6c438d75d63d852f" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/tabbedscoreboardfuibox" ) --[[ @ 0]]
require( "x64:40c7e896ee4bc3f8" ) --[[ @ 0]]

CoD.EmblemSelectPreviewWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.__defaultWidth = 540 --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.__defaultHeight = 725 --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemSelectPreviewWidget ) --[[ @ 0]]
	self.id = "EmblemSelectPreviewWidget" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local emblemDrawWidget = CoD.EmblemDrawWidgetPreview.new( f1_arg0, f1_arg1, 0, 0, 0, 540, 0, 0, 13, 503 ) --[[ @ 0]]
	emblemDrawWidget:mergeStateConditions( {
		{
			stateName = "Unfocusable",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblem_IsOccupied( element, f1_arg1 )
			end
		},
		{
			stateName = "EmptySlot",
			condition = function ( menu, element, event )
				return not CoD.CraftUtility.Emblem_IsOccupied( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "isLoot", true, function ( model )
		f1_arg0:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isLoot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "available", true, function ( model )
		f1_arg0:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "available"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "emblemIndex", true, function ( model )
		f1_arg0:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "emblemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( emblemDrawWidget, "storageFileType", true, function ( model )
		f1_arg0:updateElementState( emblemDrawWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "storageFileType"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	emblemDrawWidget:linkToElementModel( self, nil, false, function ( model )
		emblemDrawWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( emblemDrawWidget ) --[[ @ 0]]
	self.emblemDrawWidget = emblemDrawWidget --[[ @ 0]]
	
	local TabbedScoreboardFuiBox = CoD.TabbedScoreboardFuiBox.new( f1_arg0, f1_arg1, 0, 0, 1, 113, 0, 0, -8, 8 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardFuiBox ) --[[ @ 0]]
	self.TabbedScoreboardFuiBox = TabbedScoreboardFuiBox --[[ @ 0]]
	
	local ItemInfoPanel = CoD.BM_ItemInfoPanel.new( f1_arg0, f1_arg1, 0, 0, 0, 540, 0, 0, 503, 653 ) --[[ @ 0]]
	ItemInfoPanel:mergeStateConditions( {
		{
			stateName = "CustomEmblemTabSelected",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsCustomEmblemTabSelected( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ItemInfoPanel:linkToElementModel( ItemInfoPanel, nil, false, function ( model )
		f1_arg0:updateElementState( ItemInfoPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model and model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemInfoPanel:linkToElementModel( ItemInfoPanel, "alertMessage", true, function ( model )
		f1_arg0:updateElementState( ItemInfoPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "alertMessage"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemInfoPanel:linkToElementModel( ItemInfoPanel, "description", true, function ( model )
		f1_arg0:updateElementState( ItemInfoPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "description"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local TrialWidget = ItemInfoPanel --[[ @ 0]]
	local SelfIdentityBadge = ItemInfoPanel.subscribeToModel --[[ @ 0]]
	local f1_local6 = DataSources.SelectedStorageFileType.getModel( f1_arg1 ) --[[ @ 0]]
	SelfIdentityBadge( TrialWidget, f1_local6.storageFileType, function ( f13_arg0 )
		f1_arg0:updateElementState( ItemInfoPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "storageFileType"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ItemInfoPanel:linkToElementModel( self, nil, false, function ( model )
		ItemInfoPanel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ItemInfoPanel ) --[[ @ 0]]
	self.ItemInfoPanel = ItemInfoPanel --[[ @ 0]]
	
	SelfIdentityBadge = CoD.SelfIdentityBadgePreview.new( f1_arg0, f1_arg1, 0, 0, 0, 540, 0, 0, 698.5, 788.5 ) --[[ @ 0]]
	self:addElement( SelfIdentityBadge ) --[[ @ 0]]
	self.SelfIdentityBadge = SelfIdentityBadge --[[ @ 0]]
	
	TrialWidget = CoD.TrialInfoBannerWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -257.5, 257.5, 1, 1, -44, -9 ) --[[ @ 0]]
	TrialWidget:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( TrialWidget ) --[[ @ 0]]
	self.TrialWidget = TrialWidget --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "TrialLocked",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "trialLocked" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "trialLocked", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "trialLocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	if CoD.isPC then
		emblemDrawWidget.id = "emblemDrawWidget" --[[ @ 0]]
	end
	SelfIdentityBadge.id = "SelfIdentityBadge" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.__resetProperties = function ( f17_arg0 )
	f17_arg0.SelfIdentityBadge:completeAnimation() --[[ @ 0]]
	f17_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
	f17_arg0.SelfIdentityBadge:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.TrialWidget:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	TrialLocked = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f19_arg0.SelfIdentityBadge:completeAnimation() --[[ @ 0]]
			f19_arg0.SelfIdentityBadge:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.SelfIdentityBadge ) --[[ @ 0]]
			f19_arg0.TrialWidget:completeAnimation() --[[ @ 0]]
			f19_arg0.TrialWidget:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.TrialWidget ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemSelectPreviewWidget.__onClose = function ( f20_arg0 )
	f20_arg0.emblemDrawWidget:close() --[[ @ 0]]
	f20_arg0.TabbedScoreboardFuiBox:close() --[[ @ 0]]
	f20_arg0.ItemInfoPanel:close() --[[ @ 0]]
	f20_arg0.SelfIdentityBadge:close() --[[ @ 0]]
	f20_arg0.TrialWidget:close() --[[ @ 0]]
end
 --[[ @ 0]]
