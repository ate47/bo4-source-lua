-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/cphudwidgets/waypointcentercp" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/buttonprompt3d/namelabel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/buttonprompt3d/requirementlabel" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/buttonprompt3dcpzm_usebuttonicon" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointarrowcontainer" ) --[[ @ 0]]

CoD.ButtonPrompt3dCPZM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.__defaultWidth = 76 --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.__defaultHeight = 76 --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.CreateControllerModel( f1_arg1, "interactivePrompt.activeObjectiveID" ) --[[ @ 0]]
	self:setClass( CoD.ButtonPrompt3dCPZM ) --[[ @ 0]]
	self.id = "ButtonPrompt3dCPZM" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local requirementLabel = CoD.requirementLabel.new( f1_arg0, f1_arg1, 0, 0, 36, 285, 0, 0, 51, 95 ) --[[ @ 0]]
	requirementLabel:setAlpha( 0 ) --[[ @ 0]]
	requirementLabel:linkToElementModel( self, nil, false, function ( model )
		requirementLabel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	requirementLabel:linkToElementModel( self, "id", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			requirementLabel.requirementLabel2:setText( LocalizeWithKeyBinding( f1_arg1, "+activate", GetObjectiveProperty( "buttonPromptText", f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	requirementLabel:linkToElementModel( self, "id", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			requirementLabel.requirementLabel:setText( LocalizeWithKeyBinding( f1_arg1, "+activate", GetObjectiveProperty( "buttonPromptText", f4_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( requirementLabel ) --[[ @ 0]]
	self.requirementLabel = requirementLabel --[[ @ 0]]
	
	local nameLabel = CoD.nameLabel.new( f1_arg0, f1_arg1, 0, 0, 36, 194, 0, 0, 21, 51 ) --[[ @ 0]]
	nameLabel:linkToElementModel( self, nil, false, function ( model )
		nameLabel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( nameLabel ) --[[ @ 0]]
	self.nameLabel = nameLabel --[[ @ 0]]
	
	local ButtonPrompt3dcpzmUseButtonIcon = CoD.ButtonPrompt3dcpzm_UseButtonIcon.new( f1_arg0, f1_arg1, 0, 0, 7, 65, 0, 0, 19, 77 ) --[[ @ 0]]
	ButtonPrompt3dcpzmUseButtonIcon:setAlpha( 0 ) --[[ @ 0]]
	ButtonPrompt3dcpzmUseButtonIcon:linkToElementModel( self, nil, false, function ( model )
		ButtonPrompt3dcpzmUseButtonIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ButtonPrompt3dcpzmUseButtonIcon ) --[[ @ 0]]
	self.ButtonPrompt3dcpzmUseButtonIcon = ButtonPrompt3dcpzmUseButtonIcon --[[ @ 0]]
	
	local iconImage = CoD.WaypointCenterCP.new( f1_arg0, f1_arg1, 0, 0, 7, 65, 0, 0, 7, 65 ) --[[ @ 0]]
	iconImage:linkToElementModel( self, nil, false, function ( model )
		iconImage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( iconImage ) --[[ @ 0]]
	self.iconImage = iconImage --[[ @ 0]]
	
	local directionalArrow = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0, 0, 7, 69, 0, 0, 12, 60 ) --[[ @ 0]]
	directionalArrow:linkToElementModel( self, "direction", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			directionalArrow:setZRot( Add( 90, f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	directionalArrow:linkToElementModel( self, nil, false, function ( model )
		directionalArrow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( directionalArrow ) --[[ @ 0]]
	self.directionalArrow = directionalArrow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldHideWaypoint( element, f1_arg1 )
			end
		},
		{
			stateName = "Clamped",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		},
		{
			stateName = "HideRequirementLabel",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.IsObjectiveRequirementLabelHidden( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "team", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "team"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "teamMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "teamMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["interactivePrompt.activeObjectiveID"], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["hudItems.hacked"], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.ref, function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "ref"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.LethalOffhands.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.activeIndex, function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "activeIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.count, function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.secondaryOffhand, function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "secondaryOffhand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.secondaryOffhandCount, function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "secondaryOffhandCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]], function ( f26_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f26_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]], function ( f27_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f27_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "clamped", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f30_arg2, f30_arg3, f30_arg4 )
		if IsElementInState( element, "DefaultState" ) then
			SetElementStateByElementName( self, "nameLabel", controller, "Small" ) --[[ @ 0]]
		else
			SetElementStateByElementName( self, "nameLabel", controller, "DefaultState" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.__resetProperties = function ( f31_arg0 )
	f31_arg0.requirementLabel:completeAnimation() --[[ @ 0]]
	f31_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
	f31_arg0.ButtonPrompt3dcpzmUseButtonIcon:completeAnimation() --[[ @ 0]]
	f31_arg0.iconImage:completeAnimation() --[[ @ 0]]
	f31_arg0.nameLabel:completeAnimation() --[[ @ 0]]
	f31_arg0.requirementLabel:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.directionalArrow:setLeftRight( 0, 0, 7, 69 ) --[[ @ 0]]
	f31_arg0.directionalArrow:setTopBottom( 0, 0, 12, 60 ) --[[ @ 0]]
	f31_arg0.directionalArrow:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.ButtonPrompt3dcpzmUseButtonIcon:setLeftRight( 0, 0, 7, 65 ) --[[ @ 0]]
	f31_arg0.ButtonPrompt3dcpzmUseButtonIcon:setTopBottom( 0, 0, 19, 77 ) --[[ @ 0]]
	f31_arg0.ButtonPrompt3dcpzmUseButtonIcon:setAlpha( 0 ) --[[ @ 0]]
	f31_arg0.iconImage:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.nameLabel:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f32_local0 = function ( f33_arg0 )
				local f33_local0 = function ( f34_arg0 )
					f34_arg0:beginAnimation( 130 ) --[[ @ 0]]
					f34_arg0:setAlpha( 1 ) --[[ @ 0]]
					f34_arg0:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f32_arg0.requirementLabel:beginAnimation( 200 ) --[[ @ 0]]
				f32_arg0.requirementLabel:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
				f32_arg0.requirementLabel:registerEventHandler( "transition_complete_keyframe", f33_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.requirementLabel:completeAnimation() --[[ @ 0]]
			f32_arg0.requirementLabel:setAlpha( 0 ) --[[ @ 0]]
			f32_local0( f32_arg0.requirementLabel ) --[[ @ 0]]
			f32_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.nameLabel ) --[[ @ 0]]
			f32_arg0.ButtonPrompt3dcpzmUseButtonIcon:completeAnimation() --[[ @ 0]]
			f32_arg0.ButtonPrompt3dcpzmUseButtonIcon:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ButtonPrompt3dcpzmUseButtonIcon ) --[[ @ 0]]
			f32_arg0.iconImage:completeAnimation() --[[ @ 0]]
			f32_arg0.iconImage:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.iconImage ) --[[ @ 0]]
			f32_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
			f32_arg0.directionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.directionalArrow ) --[[ @ 0]]
		end,
		HideRequirementLabel = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f35_local0 = function ( f36_arg0 )
				f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:beginAnimation( 70 ) --[[ @ 0]]
				f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:completeAnimation() --[[ @ 0]]
			f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:setLeftRight( 0, 0, 7, 65 ) --[[ @ 0]]
			f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:setTopBottom( 0, 0, 7, 65 ) --[[ @ 0]]
			f35_arg0.ButtonPrompt3dcpzmUseButtonIcon:setAlpha( 1 ) --[[ @ 0]]
			f35_local0( f35_arg0.ButtonPrompt3dcpzmUseButtonIcon ) --[[ @ 0]]
			local f35_local1 = function ( f37_arg0 )
				f35_arg0.iconImage:beginAnimation( 70 ) --[[ @ 0]]
				f35_arg0.iconImage:setAlpha( 1 ) --[[ @ 0]]
				f35_arg0.iconImage:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.iconImage:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.iconImage:completeAnimation() --[[ @ 0]]
			f35_arg0.iconImage:setAlpha( 0 ) --[[ @ 0]]
			f35_local1( f35_arg0.iconImage ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f38_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f38_arg0.nameLabel:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.nameLabel ) --[[ @ 0]]
			f38_arg0.iconImage:completeAnimation() --[[ @ 0]]
			f38_arg0.iconImage:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.iconImage ) --[[ @ 0]]
			f38_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
			f38_arg0.directionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.directionalArrow ) --[[ @ 0]]
		end,
		HideRequirementLabel = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f39_local0 = function ( f40_arg0 )
				f39_arg0.nameLabel:beginAnimation( 200 ) --[[ @ 0]]
				f39_arg0.nameLabel:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.nameLabel:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.nameLabel:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f39_arg0.nameLabel:setAlpha( 0 ) --[[ @ 0]]
			f39_local0( f39_arg0.nameLabel ) --[[ @ 0]]
			local f39_local1 = function ( f41_arg0 )
				f39_arg0.iconImage:beginAnimation( 200 ) --[[ @ 0]]
				f39_arg0.iconImage:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.iconImage:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.iconImage:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.iconImage:completeAnimation() --[[ @ 0]]
			f39_arg0.iconImage:setAlpha( 0.85 ) --[[ @ 0]]
			f39_local1( f39_arg0.iconImage ) --[[ @ 0]]
		end
	},
	Clamped = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f42_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f42_arg0.nameLabel:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.nameLabel ) --[[ @ 0]]
			f42_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
			f42_arg0.directionalArrow:setLeftRight( 0, 0, 7, 69 ) --[[ @ 0]]
			f42_arg0.directionalArrow:setTopBottom( 0, 0, 7, 65 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.directionalArrow ) --[[ @ 0]]
		end
	},
	HideRequirementLabel = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f43_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
			f43_arg0.directionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.directionalArrow ) --[[ @ 0]]
		end,
		Hidden = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f44_local0 = function ( f45_arg0 )
				f44_arg0.nameLabel:beginAnimation( 200 ) --[[ @ 0]]
				f44_arg0.nameLabel:setAlpha( 0 ) --[[ @ 0]]
				f44_arg0.nameLabel:registerEventHandler( "interrupted_keyframe", f44_arg0.clipInterrupted ) --[[ @ 0]]
				f44_arg0.nameLabel:registerEventHandler( "transition_complete_keyframe", f44_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f44_arg0.nameLabel:completeAnimation() --[[ @ 0]]
			f44_arg0.nameLabel:setAlpha( 1 ) --[[ @ 0]]
			f44_local0( f44_arg0.nameLabel ) --[[ @ 0]]
			f44_arg0.directionalArrow:completeAnimation() --[[ @ 0]]
			f44_arg0.directionalArrow:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.directionalArrow ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ButtonPrompt3dCPZM.__onClose = function ( f46_arg0 )
	f46_arg0.requirementLabel:close() --[[ @ 0]]
	f46_arg0.nameLabel:close() --[[ @ 0]]
	f46_arg0.ButtonPrompt3dcpzmUseButtonIcon:close() --[[ @ 0]]
	f46_arg0.iconImage:close() --[[ @ 0]]
	f46_arg0.directionalArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
