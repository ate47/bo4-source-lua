-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:12322cb4555c55d" ) --[[ @ 0]]
require( "ui/uieditor/widgets/controllerdependent_textbox" ) --[[ @ 0]]
require( "x64:733ec8b4b2fb3c47" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/core_ammowidget/ammowidget_equipmentempty" ) --[[ @ 0]]
require( "x64:24b789df27433d6" ) --[[ @ 0]]
require( "x64:2485f9df271d384" ) --[[ @ 0]]
require( "x64:437d12d08b0910b6" ) --[[ @ 0]]

CoD.AmmowidgetMP_HealCooldown = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.__defaultWidth = 72 --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.__defaultHeight = 59 --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmowidgetMP_HealCooldown ) --[[ @ 0]]
	self.id = "AmmowidgetMP_HealCooldown" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LED = LUI.UIImage.new( 0, 0, 1, 71, 0, 0, -3.5, 66.5 ) --[[ @ 0]]
	LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LED:setAlpha( 0.3 ) --[[ @ 0]]
	LED:setImage( RegisterImage( @"uie_ui_hud_core_player_widget_led_outer" ) ) --[[ @ 0]]
	self:addElement( LED ) --[[ @ 0]]
	self.LED = LED --[[ @ 0]]
	
	local AmmoWidgetAbilityContainer = CoD.AmmoWidget_AbilityContainer.new( f1_arg0, f1_arg1, 0, 0, -23, 69, 0, 0, -9, 35 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	AmmoWidgetAbilityContainer:setScale( 1.4, 1.4 ) --[[ @ 0]]
	self:addElement( AmmoWidgetAbilityContainer ) --[[ @ 0]]
	self.AmmoWidgetAbilityContainer = AmmoWidgetAbilityContainer --[[ @ 0]]
	
	local AmmoWidgetMPAbilityFlare = CoD.AmmoWidgetMP_Ability_Flare.new( f1_arg0, f1_arg1, 0, 0, -1394, 352, 0, 0, -974, 100 ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:mergeStateConditions( {
		{
			stateName = "Full",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 1 )
			end
		}
	} ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:linkToElementModel( AmmoWidgetMPAbilityFlare, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( AmmoWidgetMPAbilityFlare, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
	AmmoWidgetMPAbilityFlare:linkToElementModel( self, nil, false, function ( model )
		AmmoWidgetMPAbilityFlare:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
	self.AmmoWidgetMPAbilityFlare = AmmoWidgetMPAbilityFlare --[[ @ 0]]
	
	local BackingFillAnim = LUI.UIImage.new( 0, 0, 4, 68, 0, 0, 1, 61 ) --[[ @ 0]]
	BackingFillAnim:setRGB( 0.13, 0.13, 0.13 ) --[[ @ 0]]
	BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
	BackingFillAnim:setZRot( 180 ) --[[ @ 0]]
	BackingFillAnim:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 3, 0.05, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingFillAnim:linkToElementModel( self, "powerRatio", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			BackingFillAnim:setShaderVector( 2, AddToVector( 0.15, 0, 0, 0, ScaleVectorComponents( 0.7, 1, 1, 1, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BackingFillAnim ) --[[ @ 0]]
	self.BackingFillAnim = BackingFillAnim --[[ @ 0]]
	
	local FullBackingDeployed = LUI.UIImage.new( 0, 0, 4, 68, 0, 0, -0.5, 59.5 ) --[[ @ 0]]
	FullBackingDeployed:setRGB( 0.79, 0.55, 0 ) --[[ @ 0]]
	FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	FullBackingDeployed:setZRot( 180 ) --[[ @ 0]]
	FullBackingDeployed:setImage( RegisterImage( @"uie_hud_common_core_ammo_panelcenter2" ) ) --[[ @ 0]]
	self:addElement( FullBackingDeployed ) --[[ @ 0]]
	self.FullBackingDeployed = FullBackingDeployed --[[ @ 0]]
	
	local AbilityPulse = CoD.AmmoWidgetMP_Ability_Flash.new( f1_arg0, f1_arg1, 0, 0, 4, 70, 0, 0, 2.5, 58.5 ) --[[ @ 0]]
	AbilityPulse:mergeStateConditions( {
		{
			stateName = "Full",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 1 )
			end
		}
	} ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( AbilityPulse, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( AbilityPulse, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( AbilityPulse, "state", true, function ( model )
		f1_arg0:updateElementState( AbilityPulse, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
	AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( self, nil, false, function ( model )
		AbilityPulse:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AbilityPulse:linkToElementModel( self, "powerRatio", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			AbilityPulse:setShaderVector( 2, SetVectorComponent( 2, 1, SubtractVectorComponentFrom( 1, 1, CoD.GetVectorComponentFromString( f10_local0, 1 ), CoD.GetVectorComponentFromString( f10_local0, 2 ), CoD.GetVectorComponentFromString( f10_local0, 3 ), CoD.GetVectorComponentFromString( f10_local0, 4 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AbilityPulse ) --[[ @ 0]]
	self.AbilityPulse = AbilityPulse --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, 2, 72, 0, 0, -3.5, 66.5 ) --[[ @ 0]]
	Box:setImage( RegisterImage( @"uie_ui_hud_core_abeg_widget_box" ) ) --[[ @ 0]]
	Box:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	Box:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local PowerBasedImageAvailable = LUI.UIImage.new( 0, 0, -3.5, 76.5, 0, 0, -8.5, 71.5 ) --[[ @ 0]]
	PowerBasedImageAvailable:setImage( RegisterImage( @"uie_hud_common_core_icon_heal" ) ) --[[ @ 0]]
	self:addElement( PowerBasedImageAvailable ) --[[ @ 0]]
	self.PowerBasedImageAvailable = PowerBasedImageAvailable --[[ @ 0]]
	
	local PowerBasedImageUnavailable = LUI.UIImage.new( 0, 0, -5, 75, 0, 0, -10, 70 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setRGB( 0.65, 0.65, 0.65 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	PowerBasedImageUnavailable:setImage( RegisterImage( @"uie_ui_icon_equipment_heal_dark" ) ) --[[ @ 0]]
	self:addElement( PowerBasedImageUnavailable ) --[[ @ 0]]
	self.PowerBasedImageUnavailable = PowerBasedImageUnavailable --[[ @ 0]]
	
	local NotAvailable = CoD.AmmoWidget_EquipmentEmpty.new( f1_arg0, f1_arg1, 0.5, 0.5, -27, 27, 0.5, 0.5, -10.5, 16.5 ) --[[ @ 0]]
	NotAvailable:setScale( 0.9, 0.9 ) --[[ @ 0]]
	NotAvailable.ImgIcon:setImage( RegisterImage( @"uie_hud_common_core_icon_heal" ) ) --[[ @ 0]]
	NotAvailable.ImgIconGrow:setImage( RegisterImage( @"uie_hud_common_core_icon_heal" ) ) --[[ @ 0]]
	NotAvailable:linkToElementModel( self, nil, false, function ( model )
		NotAvailable:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( NotAvailable ) --[[ @ 0]]
	self.NotAvailable = NotAvailable --[[ @ 0]]
	
	local Line = LUI.UIImage.new( 0, 0, 4, 70, 0.35, 0.35, -2, 3 ) --[[ @ 0]]
	Line:setRGB( 0.89, 0.89, 0.89 ) --[[ @ 0]]
	Line:setAlpha( 0 ) --[[ @ 0]]
	Line:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_feather_edges" ) ) --[[ @ 0]]
	Line:setShaderVector( 0, 0.01, 0.41, 0.01, 0.41 ) --[[ @ 0]]
	Line:linkToElementModel( self, "powerRatio", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			Line:setTopPct( Add( 0, Multiple( 1, Negate( f12_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Line ) --[[ @ 0]]
	self.Line = Line --[[ @ 0]]
	
	local HeroAbilityUseString = CoD.ControllerDependent_TextBox.new( f1_arg0, f1_arg1, 0.5, 0.5, -36, 36, 0, 0, -29, -7 ) --[[ @ 0]]
	HeroAbilityUseString:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f13_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) --[[ @ 0]]
				if not f13_local0 then
					f13_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
					if not f13_local0 then
						f13_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_team_spectator"] ) --[[ @ 0]]
					end
				end
				return f13_local0
			end
		},
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseAbility",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysTrue()
			end
		},
		{
			stateName = "KeyboardAndMouseUltimate",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		},
		{
			stateName = "KeyboardAndMouseScoreStreak",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 ) and AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	local FlareBack = HeroAbilityUseString --[[ @ 0]]
	local GlowRing = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	local BountyHealthCount = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GlowRing( FlareBack, BountyHealthCount["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f18_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FlareBack = HeroAbilityUseString --[[ @ 0]]
	GlowRing = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	BountyHealthCount = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GlowRing( FlareBack, BountyHealthCount["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f19_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	FlareBack = HeroAbilityUseString --[[ @ 0]]
	GlowRing = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	BountyHealthCount = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GlowRing( FlareBack, BountyHealthCount["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]], function ( f20_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_team_spectator"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:appendEventHandler( "input_source_changed", function ( f21_arg0, f21_arg1 )
		f21_arg1.menu = f21_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( HeroAbilityUseString, f21_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FlareBack = HeroAbilityUseString --[[ @ 0]]
	GlowRing = HeroAbilityUseString.subscribeToModel --[[ @ 0]]
	BountyHealthCount = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	GlowRing( FlareBack, BountyHealthCount.LastInput, function ( f22_arg0 )
		f1_arg0:updateElementState( HeroAbilityUseString, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
	HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_234175BD548C4C21" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_234175BD548C4C21" ) ) --[[ @ 0]]
	HeroAbilityUseString.GamepadText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	self:addElement( HeroAbilityUseString ) --[[ @ 0]]
	self.HeroAbilityUseString = HeroAbilityUseString --[[ @ 0]]
	
	GlowRing = LUI.UIImage.new( 0, 0, -3.5, 76.5, 0, 0, -8.5, 71.5 ) --[[ @ 0]]
	GlowRing:setRGB( 1, 0.44, 0 ) --[[ @ 0]]
	GlowRing:setAlpha( 0 ) --[[ @ 0]]
	GlowRing:setImage( RegisterImage( @"uie_hex_flare_ring" ) ) --[[ @ 0]]
	GlowRing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	GlowRing:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( GlowRing ) --[[ @ 0]]
	self.GlowRing = GlowRing --[[ @ 0]]
	
	FlareBack = LUI.UIImage.new( 0, 0, -45.5, 114.5, 0, 0, -40, 100 ) --[[ @ 0]]
	FlareBack:setAlpha( 0 ) --[[ @ 0]]
	FlareBack:setScale( 1.16, 1.16 ) --[[ @ 0]]
	FlareBack:setImage( RegisterImage( @"uie_abeq_flare_back" ) ) --[[ @ 0]]
	FlareBack:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( FlareBack ) --[[ @ 0]]
	self.FlareBack = FlareBack --[[ @ 0]]
	
	BountyHealthCount = CoD.BountyHunterHealthCount.new( f1_arg0, f1_arg1, 0, 0, 44.5, 71.5, 0, 0, 39, 63 ) --[[ @ 0]]
	self:addElement( BountyHealthCount ) --[[ @ 0]]
	self.BountyHealthCount = BountyHealthCount --[[ @ 0]]
	
	local CodCasterLoadoutSelection = CoD.CodCasterLoadoutSelectionHeal.new( f1_arg0, f1_arg1, 0, 0, 1, 73, 0, 0, 2, 62 ) --[[ @ 0]]
	CodCasterLoadoutSelection:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CodCasterLoadoutSelection ) --[[ @ 0]]
	self.CodCasterLoadoutSelection = CodCasterLoadoutSelection --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "id" )
			end
		},
		{
			stateName = "InUse",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_inuse"] )
			end
		},
		{
			stateName = "Deployed",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "BountyEmpty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThan( self, f1_arg1, "powerRatio", 1 ) and CoD.BountyHunterUtility.GameTypeIsBounty( f1_arg1 )
			end
		},
		{
			stateName = "PowerBasedEmptyCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "powerRatio", 0 )
			end
		},
		{
			stateName = "PowerBasedCharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_charging"] ) and CoD.ModelUtility.IsSelfModelValueLessThan( self, f1_arg1, "powerRatio", 1 )
			end
		},
		{
			stateName = "PowerBased",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "state", Enum[@"weapongadgetstates"][@"player_ability_state_hidden"] )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "powerRatio", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "powerRatio"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f33_arg2, f33_arg3, f33_arg4 )
		if CoD.HUDUtility.ShouldPulseNewAmmo( self ) and IsSelfInState( self, "PowerBased" ) then
			PlayClip( self, "Pulse", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "ammo", true, function ( model )
		local f34_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "PowerBased" ) and CoD.HUDUtility.ShouldPulseNewAmmo( self ) then
			PlayClip( self, "Pulse", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.__resetProperties = function ( f35_arg0 )
	f35_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
	f35_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
	f35_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
	f35_arg0.Line:completeAnimation() --[[ @ 0]]
	f35_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
	f35_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
	f35_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
	f35_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
	f35_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
	f35_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
	f35_arg0.Box:completeAnimation() --[[ @ 0]]
	f35_arg0.LED:completeAnimation() --[[ @ 0]]
	f35_arg0.FlareBack:completeAnimation() --[[ @ 0]]
	f35_arg0.GlowRing:completeAnimation() --[[ @ 0]]
	f35_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setLeftRight( 0, 0, 4, 70 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setTopBottom( 0, 0, 2.5, 58.5 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f35_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f35_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f35_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.PowerBasedImageUnavailable:setRGB( 0.65, 0.65, 0.65 ) --[[ @ 0]]
	f35_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.PowerBasedImageUnavailable:setImage( RegisterImage( @"uie_ui_icon_equipment_heal_dark" ) ) --[[ @ 0]]
	f35_arg0.PowerBasedImageAvailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f35_arg0.PowerBasedImageAvailable:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f35_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
	f35_arg0.FlareBack:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.FlareBack:setScale( 1.16, 1.16 ) --[[ @ 0]]
	f35_arg0.GlowRing:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f36_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f36_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f36_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f36_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.AbilityPulse ) --[[ @ 0]]
			f36_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f36_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.NotAvailable ) --[[ @ 0]]
			f36_arg0.Line:completeAnimation() --[[ @ 0]]
			f36_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Line ) --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f36_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f37_arg0.LED:completeAnimation() --[[ @ 0]]
			f37_arg0.LED:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.LED ) --[[ @ 0]]
			f37_arg0.AmmoWidgetAbilityContainer:completeAnimation() --[[ @ 0]]
			f37_arg0.AmmoWidgetAbilityContainer:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.AmmoWidgetAbilityContainer ) --[[ @ 0]]
			f37_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f37_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f37_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
			f37_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.BackingFillAnim ) --[[ @ 0]]
			f37_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f37_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.FullBackingDeployed ) --[[ @ 0]]
			f37_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f37_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.AbilityPulse ) --[[ @ 0]]
			f37_arg0.Box:completeAnimation() --[[ @ 0]]
			f37_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.Box ) --[[ @ 0]]
			f37_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f37_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f37_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f37_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f37_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f37_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.NotAvailable ) --[[ @ 0]]
			f37_arg0.Line:completeAnimation() --[[ @ 0]]
			f37_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.Line ) --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f37_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	InUse = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f38_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f38_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f38_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f38_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AbilityPulse ) --[[ @ 0]]
			f38_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f38_arg0.PowerBasedImageAvailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f38_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f38_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.NotAvailable ) --[[ @ 0]]
			f38_arg0.Line:completeAnimation() --[[ @ 0]]
			f38_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.Line ) --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f38_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f38_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Deployed = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f39_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f39_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f39_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f39_arg0.AbilityPulse:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.AbilityPulse ) --[[ @ 0]]
			f39_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f39_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.NotAvailable ) --[[ @ 0]]
			f39_arg0.Line:completeAnimation() --[[ @ 0]]
			f39_arg0.Line:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.Line ) --[[ @ 0]]
			f39_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f39_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f39_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	BountyEmpty = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f40_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f40_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f40_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f40_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f40_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.AbilityPulse ) --[[ @ 0]]
			f40_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f40_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f40_arg0.PowerBasedImageUnavailable:setImage( RegisterImage( @"uie_ui_icon_equipment_heal_dark" ) ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f40_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f40_arg0.NotAvailable:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.NotAvailable ) --[[ @ 0]]
		end
	},
	PowerBasedEmptyCharging = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f41_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f41_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f41_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f41_arg0.FullBackingDeployed:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.FullBackingDeployed ) --[[ @ 0]]
			f41_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f41_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.AbilityPulse ) --[[ @ 0]]
			f41_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f41_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f41_arg0.PowerBasedImageUnavailable:setImage( RegisterImage( @"uie_ui_icon_equipment_heal_dark" ) ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f41_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f41_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.NotAvailable ) --[[ @ 0]]
			f41_arg0.Line:completeAnimation() --[[ @ 0]]
			f41_arg0.Line:setAlpha( 0.57 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Line ) --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:setRGB( 0.47, 0.47, 0.47 ) --[[ @ 0]]
			f41_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBasedCharging = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f42_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f42_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f42_arg0.FullBackingDeployed:completeAnimation() --[[ @ 0]]
			f42_arg0.FullBackingDeployed:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.FullBackingDeployed ) --[[ @ 0]]
			f42_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f42_arg0.AbilityPulse:setAlpha( 0.5 ) --[[ @ 0]]
			f42_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f42_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f42_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f42_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.AbilityPulse ) --[[ @ 0]]
			f42_arg0.PowerBasedImageAvailable:completeAnimation() --[[ @ 0]]
			f42_arg0.PowerBasedImageAvailable:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.PowerBasedImageAvailable ) --[[ @ 0]]
			f42_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f42_arg0.PowerBasedImageUnavailable:setAlpha( 0.4 ) --[[ @ 0]]
			f42_arg0.PowerBasedImageUnavailable:setImage( RegisterImage( @"uie_ui_icon_equipment_heal_dark" ) ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f42_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f42_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.NotAvailable ) --[[ @ 0]]
			f42_arg0.Line:completeAnimation() --[[ @ 0]]
			f42_arg0.Line:setAlpha( 0.57 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Line ) --[[ @ 0]]
			f42_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f42_arg0.HeroAbilityUseString:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.HeroAbilityUseString ) --[[ @ 0]]
		end
	},
	PowerBased = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f43_arg0.LED:completeAnimation() --[[ @ 0]]
			f43_arg0.LED:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f43_arg0.LED:setAlpha( 0.3 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.LED ) --[[ @ 0]]
			f43_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f43_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f43_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f43_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f43_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f43_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f43_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.AbilityPulse ) --[[ @ 0]]
			f43_arg0.Box:completeAnimation() --[[ @ 0]]
			f43_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.Box ) --[[ @ 0]]
			f43_arg0.PowerBasedImageUnavailable:completeAnimation() --[[ @ 0]]
			f43_arg0.PowerBasedImageUnavailable:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f43_arg0.PowerBasedImageUnavailable:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.PowerBasedImageUnavailable ) --[[ @ 0]]
			f43_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f43_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.NotAvailable ) --[[ @ 0]]
			f43_arg0.Line:completeAnimation() --[[ @ 0]]
			f43_arg0.Line:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.Line ) --[[ @ 0]]
			f43_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f43_arg0.HeroAbilityUseString:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f43_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f43_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f43_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.GlowRing ) --[[ @ 0]]
			local f43_local0 = function ( f44_arg0 )
				local f44_local0 = function ( f45_arg0 )
					f45_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f45_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f45_arg0:registerEventHandler( "transition_complete_keyframe", f43_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f43_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f43_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f43_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f43_arg0.clipInterrupted ) --[[ @ 0]]
				f43_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f44_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f43_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f43_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f43_arg0.FlareBack:setScale( 1, 1 ) --[[ @ 0]]
			f43_local0( f43_arg0.FlareBack ) --[[ @ 0]]
			f43_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end,
		Pulse = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f46_arg0.AmmoWidgetMPAbilityFlare:completeAnimation() --[[ @ 0]]
			f46_arg0.AmmoWidgetMPAbilityFlare:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.AmmoWidgetMPAbilityFlare ) --[[ @ 0]]
			f46_arg0.BackingFillAnim:completeAnimation() --[[ @ 0]]
			f46_arg0.BackingFillAnim:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.BackingFillAnim ) --[[ @ 0]]
			f46_arg0.AbilityPulse:completeAnimation() --[[ @ 0]]
			f46_arg0.AbilityPulse:setLeftRight( 0, 0, 3, 68 ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setTopBottom( 0, 0, 0, 59 ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"hash_51DE43899593E67E" ) ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f46_arg0.AbilityPulse:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.AbilityPulse ) --[[ @ 0]]
			f46_arg0.Box:completeAnimation() --[[ @ 0]]
			f46_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.Box ) --[[ @ 0]]
			f46_arg0.NotAvailable:completeAnimation() --[[ @ 0]]
			f46_arg0.NotAvailable:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.NotAvailable ) --[[ @ 0]]
			f46_arg0.HeroAbilityUseString:completeAnimation() --[[ @ 0]]
			f46_arg0.HeroAbilityUseString:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.HeroAbilityUseString ) --[[ @ 0]]
			f46_arg0.GlowRing:completeAnimation() --[[ @ 0]]
			f46_arg0.GlowRing:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.GlowRing ) --[[ @ 0]]
			local f46_local0 = function ( f47_arg0 )
				local f47_local0 = function ( f48_arg0 )
					f48_arg0:beginAnimation( 1000 ) --[[ @ 0]]
					f48_arg0:setAlpha( 0.1 ) --[[ @ 0]]
					f48_arg0:registerEventHandler( "transition_complete_keyframe", f46_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f46_arg0.FlareBack:beginAnimation( 1000 ) --[[ @ 0]]
				f46_arg0.FlareBack:setAlpha( 0.2 ) --[[ @ 0]]
				f46_arg0.FlareBack:registerEventHandler( "interrupted_keyframe", f46_arg0.clipInterrupted ) --[[ @ 0]]
				f46_arg0.FlareBack:registerEventHandler( "transition_complete_keyframe", f47_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f46_arg0.FlareBack:completeAnimation() --[[ @ 0]]
			f46_arg0.FlareBack:setAlpha( 0.1 ) --[[ @ 0]]
			f46_arg0.FlareBack:setScale( 1, 1 ) --[[ @ 0]]
			f46_local0( f46_arg0.FlareBack ) --[[ @ 0]]
			f46_arg0.nextClip = "Pulse" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmowidgetMP_HealCooldown.__onClose = function ( f49_arg0 )
	f49_arg0.AmmoWidgetAbilityContainer:close() --[[ @ 0]]
	f49_arg0.AmmoWidgetMPAbilityFlare:close() --[[ @ 0]]
	f49_arg0.BackingFillAnim:close() --[[ @ 0]]
	f49_arg0.AbilityPulse:close() --[[ @ 0]]
	f49_arg0.NotAvailable:close() --[[ @ 0]]
	f49_arg0.Line:close() --[[ @ 0]]
	f49_arg0.HeroAbilityUseString:close() --[[ @ 0]]
	f49_arg0.BountyHealthCount:close() --[[ @ 0]]
	f49_arg0.CodCasterLoadoutSelection:close() --[[ @ 0]]
end
 --[[ @ 0]]
