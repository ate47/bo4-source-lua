-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:57a4af8bd7568030" ) --[[ @ 0]]
require( "x64:230b6383c771416e" ) --[[ @ 0]]
require( "x64:16f26d6ebdb5208b" ) --[[ @ 0]]
require( "x64:8eec6df22fcc7f" ) --[[ @ 0]]
require( "x64:73c40ae98a19ddf5" ) --[[ @ 0]]
require( "x64:616839327b099be7" ) --[[ @ 0]]
require( "x64:684a65387ed01e9b" ) --[[ @ 0]]

CoD.AmmoWidget_StockAmmo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.__defaultWidth = 312 --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.__defaultHeight = 112 --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidget_StockAmmo ) --[[ @ 0]]
	self.id = "AmmoWidget_StockAmmo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local AmmoWidgetVehicleReloadMeter = CoD.AmmoWidgetVehicleReloadMeter.new( f1_arg0, f1_arg1, 0, 0, 41, 152, 0, 0, 14, 126 ) --[[ @ 0]]
	AmmoWidgetVehicleReloadMeter:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( AmmoWidgetVehicleReloadMeter ) --[[ @ 0]]
	self.AmmoWidgetVehicleReloadMeter = AmmoWidgetVehicleReloadMeter --[[ @ 0]]
	
	local OverheatMeter = CoD.AmmoWidget_OverheatMeter.new( f1_arg0, f1_arg1, 0, 0, 41, 152, 0, 0, 14, 126 ) --[[ @ 0]]
	OverheatMeter:setAlpha( 0 ) --[[ @ 0]]
	OverheatMeter:linkToElementModel( self, nil, false, function ( model )
		OverheatMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( OverheatMeter ) --[[ @ 0]]
	self.OverheatMeter = OverheatMeter --[[ @ 0]]
	
	local clipGrid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, -3, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	clipGrid:setLeftRight( 0, 0, 49, 137 ) --[[ @ 0]]
	clipGrid:setTopBottom( 0, 0, 32, 92 ) --[[ @ 0]]
	clipGrid:setWidgetType( CoD.AmmoWidget_StockAmmoPip ) --[[ @ 0]]
	clipGrid:setHorizontalCount( 5 ) --[[ @ 0]]
	clipGrid:setSpacing( -3 ) --[[ @ 0]]
	clipGrid:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	clipGrid:setDataSource( "CurrentWeaponStockAmmo" ) --[[ @ 0]]
	clipGrid:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", "ammoStock", function ( model )
		local f3_local0 = clipGrid --[[ @ 0]]
		if not IsSegmentedReloadWeapon( f1_arg1 ) and WeaponUsesAmmo( f1_arg1 ) then
			CoD.GridAndListUtility.UpdateDataSource( f3_local0, false, false, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	clipGrid:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", "weapon", function ( model )
		local f4_local0 = clipGrid --[[ @ 0]]
		if not IsSegmentedReloadWeapon( f1_arg1 ) and WeaponUsesAmmo( f1_arg1 ) then
			CoD.GridAndListUtility.UpdateDataSource( f4_local0, false, false, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( clipGrid ) --[[ @ 0]]
	self.clipGrid = clipGrid --[[ @ 0]]
	
	local singleShotGrid = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 1, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	singleShotGrid:setLeftRight( 0, 0, 52, 141 ) --[[ @ 0]]
	singleShotGrid:setTopBottom( 0, 0, 66, 89 ) --[[ @ 0]]
	singleShotGrid:setAlpha( 0 ) --[[ @ 0]]
	singleShotGrid:setWidgetType( CoD.AmmoWidget_SingleShotPip ) --[[ @ 0]]
	singleShotGrid:setHorizontalCount( 6 ) --[[ @ 0]]
	singleShotGrid:setVerticalCount( 3 ) --[[ @ 0]]
	singleShotGrid:setSpacing( 1 ) --[[ @ 0]]
	singleShotGrid:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	singleShotGrid:setDataSource( "CurrentWeaponSingleShotAmmo" ) --[[ @ 0]]
	singleShotGrid:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", "ammoStock", function ( model )
		local f5_local0 = singleShotGrid --[[ @ 0]]
		if not CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 ) and WeaponUsesAmmo( f1_arg1 ) and IsSegmentedReloadWeapon( f1_arg1 ) then
			CoD.GridAndListUtility.UpdateDataSource( f5_local0, false, false, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	singleShotGrid:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", "weapon", function ( model )
		local f6_local0 = singleShotGrid --[[ @ 0]]
		if not CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 ) and WeaponUsesAmmo( f1_arg1 ) and IsSegmentedReloadWeapon( f1_arg1 ) then
			CoD.GridAndListUtility.UpdateDataSource( f6_local0, false, false, true ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( singleShotGrid ) --[[ @ 0]]
	self.singleShotGrid = singleShotGrid --[[ @ 0]]
	
	local AmmoWidgetCurrentClipPip = CoD.AmmoWidget_CurrentClipPip.new( f1_arg0, f1_arg1, 0, 0, 23, 46, 0, 0, 18, 90 ) --[[ @ 0]]
	self:addElement( AmmoWidgetCurrentClipPip ) --[[ @ 0]]
	self.AmmoWidgetCurrentClipPip = AmmoWidgetCurrentClipPip --[[ @ 0]]
	
	local emptyPulse = CoD.AmmoWidget_StockAmmo_EmptyPulse.new( f1_arg0, f1_arg1, 0, 0, 55, 155, 0, 0, 67, 91 ) --[[ @ 0]]
	self:addElement( emptyPulse ) --[[ @ 0]]
	self.emptyPulse = emptyPulse --[[ @ 0]]
	
	local ammoType = CoD.AmmoWidget_AmmoCaliber.new( f1_arg0, f1_arg1, 0, 0, 52, 216, 0, 0, 48, 62 ) --[[ @ 0]]
	ammoType:linkToElementModel( self, nil, false, function ( model )
		ammoType:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ammoType ) --[[ @ 0]]
	self.ammoType = ammoType --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "OverheatWeapon",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "weaponIsOverheatWeapon" )
			end
		},
		{
			stateName = "UsingPowerWeapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 )
			end
		},
		{
			stateName = "NoAmmoWeapon",
			condition = function ( menu, element, event )
				return not WeaponUsesAmmo( f1_arg1 )
			end
		},
		{
			stateName = "SingleLoadWeapon",
			condition = function ( menu, element, event )
				return IsSegmentedReloadWeapon( f1_arg1 )
			end
		},
		{
			stateName = "TankGunWZ",
			condition = function ( menu, element, event )
				return IsWarzone() and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "equippedWeaponReference", @"hash_78A462F65A5A2A09" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "weaponIsOverheatWeapon", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponIsOverheatWeapon"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["playerGadget2.state"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "playerGadget2.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["playerGadget3.state"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "playerGadget3.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.viewmodelWeaponName, function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.weapon, function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "weapon"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "equippedWeaponReference", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "equippedWeaponReference"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	clipGrid.id = "clipGrid" --[[ @ 0]]
	singleShotGrid.id = "singleShotGrid" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.__resetProperties = function ( f20_arg0 )
	f20_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
	f20_arg0.clipGrid:completeAnimation() --[[ @ 0]]
	f20_arg0.OverheatMeter:completeAnimation() --[[ @ 0]]
	f20_arg0.emptyPulse:completeAnimation() --[[ @ 0]]
	f20_arg0.singleShotGrid:completeAnimation() --[[ @ 0]]
	f20_arg0.AmmoWidgetVehicleReloadMeter:completeAnimation() --[[ @ 0]]
	f20_arg0.AmmoWidgetCurrentClipPip:setTopBottom( 0, 0, 18, 90 ) --[[ @ 0]]
	f20_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.OverheatMeter:setAlpha( 0 ) --[[ @ 0]]
	f20_arg0.emptyPulse:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.singleShotGrid:setAlpha( 0 ) --[[ @ 0]]
	f20_arg0.AmmoWidgetVehicleReloadMeter:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f21_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.clipGrid ) --[[ @ 0]]
			f21_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f21_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end,
		UsingPowerWeapon = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f22_local0 = function ( f23_arg0 )
				f22_arg0.clipGrid:beginAnimation( 200 ) --[[ @ 0]]
				f22_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
				f22_arg0.clipGrid:registerEventHandler( "interrupted_keyframe", f22_arg0.clipInterrupted ) --[[ @ 0]]
				f22_arg0.clipGrid:registerEventHandler( "transition_complete_keyframe", f22_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f22_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f22_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
			f22_local0( f22_arg0.clipGrid ) --[[ @ 0]]
			local f22_local1 = function ( f24_arg0 )
				f22_arg0.AmmoWidgetCurrentClipPip:beginAnimation( 200 ) --[[ @ 0]]
				f22_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
				f22_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "interrupted_keyframe", f22_arg0.clipInterrupted ) --[[ @ 0]]
				f22_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "transition_complete_keyframe", f22_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f22_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f22_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
			f22_local1( f22_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end
	},
	OverheatWeapon = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f25_arg0.OverheatMeter:completeAnimation() --[[ @ 0]]
			f25_arg0.OverheatMeter:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.OverheatMeter ) --[[ @ 0]]
			f25_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f25_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.clipGrid ) --[[ @ 0]]
			f25_arg0.emptyPulse:completeAnimation() --[[ @ 0]]
			f25_arg0.emptyPulse:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.emptyPulse ) --[[ @ 0]]
		end
	},
	UsingPowerWeapon = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f26_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f26_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.clipGrid ) --[[ @ 0]]
			f26_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f26_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end,
		DefaultState = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f27_local0 = function ( f28_arg0 )
				f27_arg0.clipGrid:beginAnimation( 200 ) --[[ @ 0]]
				f27_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
				f27_arg0.clipGrid:registerEventHandler( "interrupted_keyframe", f27_arg0.clipInterrupted ) --[[ @ 0]]
				f27_arg0.clipGrid:registerEventHandler( "transition_complete_keyframe", f27_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f27_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f27_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f27_local0( f27_arg0.clipGrid ) --[[ @ 0]]
			local f27_local1 = function ( f29_arg0 )
				f27_arg0.AmmoWidgetCurrentClipPip:beginAnimation( 200 ) --[[ @ 0]]
				f27_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
				f27_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "interrupted_keyframe", f27_arg0.clipInterrupted ) --[[ @ 0]]
				f27_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "transition_complete_keyframe", f27_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f27_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f27_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
			f27_local1( f27_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end
	},
	NoAmmoWeapon = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f30_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f30_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.clipGrid ) --[[ @ 0]]
			f30_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f30_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end,
		DefaultState = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f31_local0 = function ( f32_arg0 )
				f31_arg0.clipGrid:beginAnimation( 200 ) --[[ @ 0]]
				f31_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
				f31_arg0.clipGrid:registerEventHandler( "interrupted_keyframe", f31_arg0.clipInterrupted ) --[[ @ 0]]
				f31_arg0.clipGrid:registerEventHandler( "transition_complete_keyframe", f31_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f31_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f31_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f31_local0( f31_arg0.clipGrid ) --[[ @ 0]]
			local f31_local1 = function ( f33_arg0 )
				f31_arg0.AmmoWidgetCurrentClipPip:beginAnimation( 200 ) --[[ @ 0]]
				f31_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
				f31_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "interrupted_keyframe", f31_arg0.clipInterrupted ) --[[ @ 0]]
				f31_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "transition_complete_keyframe", f31_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f31_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f31_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
			f31_local1( f31_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end
	},
	SingleLoadWeapon = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f34_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f34_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.clipGrid ) --[[ @ 0]]
			f34_arg0.singleShotGrid:completeAnimation() --[[ @ 0]]
			f34_arg0.singleShotGrid:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.singleShotGrid ) --[[ @ 0]]
			f34_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f34_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end,
		ClipDropped = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f35_local0 = function ( f36_arg0 )
				f35_arg0.AmmoWidgetCurrentClipPip:beginAnimation( 200 ) --[[ @ 0]]
				f35_arg0.AmmoWidgetCurrentClipPip:setTopBottom( 0, 0, 115, 187 ) --[[ @ 0]]
				f35_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f35_arg0.AmmoWidgetCurrentClipPip:setTopBottom( 0, 0, 10, 82 ) --[[ @ 0]]
			f35_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
			f35_local0( f35_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end,
		UsingPowerWeapon = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f37_local0 = function ( f38_arg0 )
				f37_arg0.clipGrid:beginAnimation( 200 ) --[[ @ 0]]
				f37_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
				f37_arg0.clipGrid:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.clipGrid:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f37_arg0.clipGrid:setAlpha( 1 ) --[[ @ 0]]
			f37_local0( f37_arg0.clipGrid ) --[[ @ 0]]
			local f37_local1 = function ( f39_arg0 )
				f37_arg0.AmmoWidgetCurrentClipPip:beginAnimation( 200 ) --[[ @ 0]]
				f37_arg0.AmmoWidgetCurrentClipPip:setAlpha( 0 ) --[[ @ 0]]
				f37_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.AmmoWidgetCurrentClipPip:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.AmmoWidgetCurrentClipPip:completeAnimation() --[[ @ 0]]
			f37_arg0.AmmoWidgetCurrentClipPip:setAlpha( 1 ) --[[ @ 0]]
			f37_local1( f37_arg0.AmmoWidgetCurrentClipPip ) --[[ @ 0]]
		end
	},
	TankGunWZ = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f40_arg0.AmmoWidgetVehicleReloadMeter:completeAnimation() --[[ @ 0]]
			f40_arg0.AmmoWidgetVehicleReloadMeter:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.AmmoWidgetVehicleReloadMeter ) --[[ @ 0]]
			f40_arg0.clipGrid:completeAnimation() --[[ @ 0]]
			f40_arg0.clipGrid:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.clipGrid ) --[[ @ 0]]
			f40_arg0.emptyPulse:completeAnimation() --[[ @ 0]]
			f40_arg0.emptyPulse:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.emptyPulse ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidget_StockAmmo.__onClose = function ( f41_arg0 )
	f41_arg0.AmmoWidgetVehicleReloadMeter:close() --[[ @ 0]]
	f41_arg0.OverheatMeter:close() --[[ @ 0]]
	f41_arg0.clipGrid:close() --[[ @ 0]]
	f41_arg0.singleShotGrid:close() --[[ @ 0]]
	f41_arg0.AmmoWidgetCurrentClipPip:close() --[[ @ 0]]
	f41_arg0.emptyPulse:close() --[[ @ 0]]
	f41_arg0.ammoType:close() --[[ @ 0]]
end
 --[[ @ 0]]
