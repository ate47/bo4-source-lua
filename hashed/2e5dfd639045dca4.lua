-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/freecursor/freecursorheaderlabelcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/freecursor/infopanelsubwidgets/freecursornolabelbuttonpromptarea" ) --[[ @ 0]]
require( "ui/uieditor/widgets/onoffimage" ) --[[ @ 0]]
require( "x64:79d185ccb5a360a0" ) --[[ @ 0]]

CoD.freeCursorHeaderInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.freeCursorHeaderInfo.__defaultWidth = 756 --[[ @ 0]]
CoD.freeCursorHeaderInfo.__defaultHeight = 41 --[[ @ 0]]
CoD.freeCursorHeaderInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.freeCursorHeaderInfo ) --[[ @ 0]]
	self.id = "freeCursorHeaderInfo" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local f1_local1 = nil --[[ @ 0]]
	self.backingDetailed = LUI.UIElement.createFake() --[[ @ 0]]
	local backingDetailedPC = nil --[[ @ 0]]
	
	backingDetailedPC = CoD.FooterButton_TooltipBG.new( f1_arg0, f1_arg1, 0, 0, 0, 430, 0, 0, 5, 41 ) --[[ @ 0]]
	backingDetailedPC:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( backingDetailedPC ) --[[ @ 0]]
	self.backingDetailedPC = backingDetailedPC --[[ @ 0]]
	
	local noLabelButtonPrompts = CoD.freeCursorNoLabelButtonPromptArea.new( f1_arg0, f1_arg1, 0, 0, 0, 300, 0, 0, 5, 41 ) --[[ @ 0]]
	noLabelButtonPrompts:linkToElementModel( self, nil, false, function ( model )
		noLabelButtonPrompts:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( noLabelButtonPrompts ) --[[ @ 0]]
	self.noLabelButtonPrompts = noLabelButtonPrompts --[[ @ 0]]
	
	local titleContainer = CoD.freeCursorHeaderLabelContainer.new( f1_arg0, f1_arg1, 0, 0, 300, 705, 0, 0, 5, 41 ) --[[ @ 0]]
	titleContainer:linkToElementModel( self, nil, false, function ( model )
		titleContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( titleContainer ) --[[ @ 0]]
	self.titleContainer = titleContainer --[[ @ 0]]
	
	local f1_local5 = nil --[[ @ 0]]
	f1_local5 = LUI.UIElement.createFake() --[[ @ 0]]
	self.detailsButton = f1_local5 --[[ @ 0]]
	
	local cautionHint = CoD.onOffImage.new( f1_arg0, f1_arg1, 0, 1, 0, -32, 0, 0, 0, 5 ) --[[ @ 0]]
	cautionHint:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				local f4_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "cautionDescription" ) --[[ @ 0]]
				if f4_local0 then
					if not CoD.ModelUtility.AreButtonModelValueBitsSet( f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"], Enum[@"luibuttonflags"][@"flag_down"] ) then
						f4_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "detailedViewPC" ) --[[ @ 0]]
					else
						f4_local0 = false --[[ @ 0]]
					end
				end
				return f4_local0
			end
		}
	} ) --[[ @ 0]]
	cautionHint:linkToElementModel( cautionHint, "cautionDescription", true, function ( model )
		f1_arg0:updateElementState( cautionHint, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "cautionDescription"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local7 = cautionHint --[[ @ 0]]
	local f1_local8 = cautionHint.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]], function ( f6_arg0 )
		f1_arg0:updateElementState( cautionHint, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	cautionHint:linkToElementModel( cautionHint, "detailedViewPC", true, function ( model )
		f1_arg0:updateElementState( cautionHint, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedViewPC"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	cautionHint:setRGB( 0.97, 0.92, 0.1 ) --[[ @ 0]]
	cautionHint:linkToElementModel( self, nil, false, function ( model )
		cautionHint:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( cautionHint ) --[[ @ 0]]
	self.cautionHint = cautionHint --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( self.titleContainer, f1_arg1, "title" ) and not CoD.FreeCursorUtility.IsTooltipInDetailedView( self, f1_arg1 )
			end
		},
		{
			stateName = "VisibleDetailedKBM",
			condition = function ( menu, element, event )
				local f10_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( self.titleContainer, f1_arg1, "title" ) --[[ @ 0]]
				if f10_local0 then
					f10_local0 = CoD.FreeCursorUtility.IsTooltipInDetailedView( self, f1_arg1 ) --[[ @ 0]]
					if f10_local0 then
						f10_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f10_local0
			end
		},
		{
			stateName = "VisibleDetailed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( self.titleContainer, f1_arg1, "title" ) and not IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "title", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "title"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedDescription", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedDescription"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "ButtonBits." .. Enum[@"luibutton"][@"lui_key_rtrig"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "detailedViewPC", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "detailedViewPC"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.detailedView", function ( model )
		local f18_local0 = self --[[ @ 0]]
		if IsGamepad( f1_arg1 ) then
			CoD.FreeCursorUtility.AnimateToHorizontalLeftLayout( self, 200 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.updated", function ( model )
		local f19_local0 = self --[[ @ 0]]
		CoD.FreeCursorUtility.AnimateToHorizontalLeftLayout( self, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "FreeCursor", "contextualInfo.detailedViewPC", function ( model )
		local f20_local0 = self --[[ @ 0]]
		if IsMouseOrKeyboard( f1_arg1 ) then
			CoD.FreeCursorUtility.AnimateToHorizontalLeftLayout( self, 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f1_local5.id = "detailsButton" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local8 = self --[[ @ 0]]
	CoD.FreeCursorUtility.SetIgnoredByHorizontalLayout( self.backingDetailed ) --[[ @ 0]]
	CoD.FreeCursorUtility.SetIgnoredByHorizontalLayout( self.cautionHint ) --[[ @ 0]]
	CoD.FreeCursorUtility.SetIgnoredByHorizontalLayout( self.backingDetailedPC ) --[[ @ 0]]
	CoD.FreeCursorUtility.UseVisibleChildrenWidth( self ) --[[ @ 0]]
	SetElementProperty( self.titleContainer, "inCompactView", true ) --[[ @ 0]]
	SetElementProperty( self.cautionHint, "inCompactView", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.freeCursorHeaderInfo.__resetProperties = function ( f21_arg0 )
	f21_arg0.titleContainer:completeAnimation() --[[ @ 0]]
	f21_arg0.detailsButton:completeAnimation() --[[ @ 0]]
	f21_arg0.noLabelButtonPrompts:completeAnimation() --[[ @ 0]]
	f21_arg0.backingDetailed:completeAnimation() --[[ @ 0]]
	f21_arg0.backingDetailedPC:completeAnimation() --[[ @ 0]]
	f21_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.detailsButton:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.noLabelButtonPrompts:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setAlpha( 0 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
	f21_arg0.backingDetailed:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f21_arg0.backingDetailed:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	f21_arg0.backingDetailedPC:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.freeCursorHeaderInfo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.noLabelButtonPrompts:completeAnimation() --[[ @ 0]]
			f22_arg0.noLabelButtonPrompts:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.noLabelButtonPrompts ) --[[ @ 0]]
			f22_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f22_arg0.titleContainer:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.titleContainer ) --[[ @ 0]]
			f22_arg0.detailsButton:completeAnimation() --[[ @ 0]]
			f22_arg0.detailsButton:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.detailsButton ) --[[ @ 0]]
		end,
		VisibleDetailed = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f23_local0 = function ( f24_arg0 )
				f23_arg0.backingDetailed:beginAnimation( 100 ) --[[ @ 0]]
				f23_arg0.backingDetailed:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
				f23_arg0.backingDetailed:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.backingDetailed:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.backingDetailed:completeAnimation() --[[ @ 0]]
			f23_arg0.backingDetailed:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.backingDetailed:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
			f23_arg0.backingDetailed:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
			f23_arg0.backingDetailed:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f23_arg0.backingDetailed:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f23_arg0.backingDetailed:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f23_arg0.backingDetailed:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
			f23_local0( f23_arg0.backingDetailed ) --[[ @ 0]]
			f23_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.titleContainer ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f25_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.titleContainer ) --[[ @ 0]]
		end,
		VisibleDetailed = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f26_local0 = function ( f27_arg0 )
				f26_arg0.backingDetailed:beginAnimation( 200 ) --[[ @ 0]]
				f26_arg0.backingDetailed:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
				f26_arg0.backingDetailed:registerEventHandler( "interrupted_keyframe", f26_arg0.clipInterrupted ) --[[ @ 0]]
				f26_arg0.backingDetailed:registerEventHandler( "transition_complete_keyframe", f26_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f26_arg0.backingDetailed:completeAnimation() --[[ @ 0]]
			f26_arg0.backingDetailed:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.backingDetailed:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_normal" ) ) --[[ @ 0]]
			f26_arg0.backingDetailed:setShaderVector( 0, 0.16, 0, 0, 0 ) --[[ @ 0]]
			f26_arg0.backingDetailed:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f26_arg0.backingDetailed:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f26_arg0.backingDetailed:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f26_arg0.backingDetailed:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
			f26_local0( f26_arg0.backingDetailed ) --[[ @ 0]]
			f26_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f26_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.titleContainer ) --[[ @ 0]]
		end
	},
	VisibleDetailedKBM = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f28_arg0.backingDetailed:completeAnimation() --[[ @ 0]]
			f28_arg0.backingDetailed:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.backingDetailed ) --[[ @ 0]]
			f28_arg0.backingDetailedPC:completeAnimation() --[[ @ 0]]
			f28_arg0.backingDetailedPC:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.backingDetailedPC:playClip( "HideBorder" ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.backingDetailedPC ) --[[ @ 0]]
			f28_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f28_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.titleContainer ) --[[ @ 0]]
		end
	},
	VisibleDetailed = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f29_arg0.backingDetailed:completeAnimation() --[[ @ 0]]
			f29_arg0.backingDetailed:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.backingDetailed ) --[[ @ 0]]
			f29_arg0.backingDetailedPC:completeAnimation() --[[ @ 0]]
			f29_arg0.backingDetailedPC:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.backingDetailedPC:playClip( "HideBorder" ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.backingDetailedPC ) --[[ @ 0]]
			f29_arg0.titleContainer:completeAnimation() --[[ @ 0]]
			f29_arg0.titleContainer:setAlpha( 1 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.titleContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.freeCursorHeaderInfo.__onClose = function ( f30_arg0 )
	f30_arg0.backingDetailed:close() --[[ @ 0]]
	f30_arg0.backingDetailedPC:close() --[[ @ 0]]
	f30_arg0.noLabelButtonPrompts:close() --[[ @ 0]]
	f30_arg0.titleContainer:close() --[[ @ 0]]
	f30_arg0.detailsButton:close() --[[ @ 0]]
	f30_arg0.cautionHint:close() --[[ @ 0]]
end
 --[[ @ 0]]
