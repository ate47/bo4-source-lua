-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:181a5d58a3dd611f" ) --[[ @ 0]]
require( "x64:6d6fd11959dd6f5f" ) --[[ @ 0]]

CoD.zm_red_challenges_hud = InheritFrom( CoD.Menu ) --[[ @ 0]]
CoD.zm_red_challenges_hud.__stateMap = {
	"DefaultState",
	"Visible",
	"VisiblePC",
	"Trials"
} --[[ @ 0]]
LUI.createMenu.zm_red_challenges_hud = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "zm_red_challenges_hud", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.zm_red_challenges_hud ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local zmredchallengeswidget = CoD.zm_red_challenges_widget.new( f1_local1, f1_arg0, 0, 0, 77, 437, 0.5, 0.5, -133.5, -33.5 ) --[[ @ 0]]
	zmredchallengeswidget:mergeStateConditions( {
		{
			stateName = "ClaimItem",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "tributeAvailable", 4 )
			end
		}
	} ) --[[ @ 0]]
	zmredchallengeswidget:linkToElementModel( zmredchallengeswidget, "tributeAvailable", true, function ( model )
		f1_local1:updateElementState( zmredchallengeswidget, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "tributeAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	zmredchallengeswidget:setScale( 0.89, 0.89 ) --[[ @ 0]]
	zmredchallengeswidget:linkToElementModel( self, nil, false, function ( model )
		zmredchallengeswidget:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	zmredchallengeswidget:linkToElementModel( self, "challengeText", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			zmredchallengeswidget.ChallengeText.ChallengeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	zmredchallengeswidget:linkToElementModel( self, "bottomText", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			zmredchallengeswidget.LocationText.LocationTextDark:setText( Engine[@"hash_4F9F1239CFD921FE"]( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	zmredchallengeswidget:linkToElementModel( self, "bottomText", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			zmredchallengeswidget.LocationText.LocationText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( zmredchallengeswidget ) --[[ @ 0]]
	self.zmredchallengeswidget = zmredchallengeswidget --[[ @ 0]]
	
	local AvailableItemText = CoD.zm_red_available_item_text.new( f1_local1, f1_arg0, 0, 0, 77, 437, 0.5, 0.5, -26, -6 ) --[[ @ 0]]
	AvailableItemText:mergeStateConditions( {
		{
			stateName = "RewardWhite",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "tributeAvailable", 1 ) and CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg0, "rewardHidden", 0, nil )
			end
		},
		{
			stateName = "RewardBlue",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "tributeAvailable", 2 ) and CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg0, "rewardHidden", 0, nil )
			end
		},
		{
			stateName = "RewardPurple",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "tributeAvailable", 3 ) and CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg0, "rewardHidden", 0, nil )
			end
		},
		{
			stateName = "RewardOrange",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "tributeAvailable", 4 ) and CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg0, "rewardHidden", 0, nil )
			end
		}
	} ) --[[ @ 0]]
	AvailableItemText:linkToElementModel( AvailableItemText, "tributeAvailable", true, function ( model )
		f1_local1:updateElementState( AvailableItemText, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "tributeAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AvailableItemText:linkToElementModel( AvailableItemText, "rewardHidden", true, function ( model )
		f1_local1:updateElementState( AvailableItemText, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "rewardHidden"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AvailableItemText:setScale( 0.89, 0.89 ) --[[ @ 0]]
	AvailableItemText:linkToElementModel( self, nil, false, function ( model )
		AvailableItemText:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AvailableItemText ) --[[ @ 0]]
	self.AvailableItemText = AvailableItemText --[[ @ 0]]
	
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], nil, function ( element, menu, controller, model )
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f17_arg2, f17_arg3, f17_arg4 )
		if IsSelfInState( self, "Visible" ) and IsPC() then
			SetState( self, "VisiblePC", controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local4 = self --[[ @ 0]]
	if not IsPC() then
		SizeToSafeArea( self, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.zm_red_challenges_hud.__resetProperties = function ( f18_arg0 )
	f18_arg0.zmredchallengeswidget:completeAnimation() --[[ @ 0]]
	f18_arg0.AvailableItemText:completeAnimation() --[[ @ 0]]
	f18_arg0.zmredchallengeswidget:setLeftRight( 0, 0, 77, 437 ) --[[ @ 0]]
	f18_arg0.zmredchallengeswidget:setTopBottom( 0.5, 0.5, -133.5, -33.5 ) --[[ @ 0]]
	f18_arg0.zmredchallengeswidget:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.AvailableItemText:setLeftRight( 0, 0, 77, 437 ) --[[ @ 0]]
	f18_arg0.AvailableItemText:setTopBottom( 0.5, 0.5, -26, -6 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.zm_red_challenges_hud.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.zmredchallengeswidget:completeAnimation() --[[ @ 0]]
			f19_arg0.zmredchallengeswidget:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.zmredchallengeswidget ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f20_arg0.zmredchallengeswidget:completeAnimation() --[[ @ 0]]
			f20_arg0.zmredchallengeswidget:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.zmredchallengeswidget ) --[[ @ 0]]
		end
	},
	VisiblePC = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.zmredchallengeswidget:completeAnimation() --[[ @ 0]]
			f21_arg0.zmredchallengeswidget:setLeftRight( 0.5, 0.5, -883, -523 ) --[[ @ 0]]
			f21_arg0.zmredchallengeswidget:setTopBottom( 0.5, 0.5, 10, 110 ) --[[ @ 0]]
			f21_arg0.zmredchallengeswidget:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.zmredchallengeswidget ) --[[ @ 0]]
			f21_arg0.AvailableItemText:completeAnimation() --[[ @ 0]]
			f21_arg0.AvailableItemText:setLeftRight( 0.5, 0.5, -883, -523 ) --[[ @ 0]]
			f21_arg0.AvailableItemText:setTopBottom( 0.5, 0.5, 117, 137 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.AvailableItemText ) --[[ @ 0]]
		end
	},
	Trials = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.zmredchallengeswidget:completeAnimation() --[[ @ 0]]
			f22_arg0.zmredchallengeswidget:setTopBottom( 0.5, 0.5, -73.5, 26.5 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.zmredchallengeswidget ) --[[ @ 0]]
			f22_arg0.AvailableItemText:completeAnimation() --[[ @ 0]]
			f22_arg0.AvailableItemText:setTopBottom( 0.5, 0.5, 34, 54 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.AvailableItemText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.zm_red_challenges_hud.__onClose = function ( f23_arg0 )
	f23_arg0.zmredchallengeswidget:close() --[[ @ 0]]
	f23_arg0.AvailableItemText:close() --[[ @ 0]]
end
 --[[ @ 0]]
