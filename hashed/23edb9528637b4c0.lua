-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:5683120446682173" ) --[[ @ 0]]
require( "ui/uieditor/widgets/notifications/notificationqueuewidgets/notificationrewardqueuewidgets/notification2xpweaponreward" ) --[[ @ 0]]
require( "x64:148e413a7c2e7936" ) --[[ @ 0]]

CoD.DoubleXPIconsCenterAligned = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DoubleXPIconsCenterAligned.__defaultWidth = 216 --[[ @ 0]]
CoD.DoubleXPIconsCenterAligned.__defaultHeight = 72 --[[ @ 0]]
CoD.DoubleXPIconsCenterAligned.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIHorizontalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 0, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Center ) --[[ @ 0]]
	self:setClass( CoD.DoubleXPIconsCenterAligned ) --[[ @ 0]]
	self.id = "DoubleXPIconsCenterAligned" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local DoubleXPIcon = CoD.DoubleXPPromotionalIcon.new( f1_arg0, f1_arg1, 0, 0, 0, 72, 0, 0, 0, 72 ) --[[ @ 0]]
	DoubleXPIcon:linkToElementModel( self, nil, false, function ( model )
		DoubleXPIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DoubleXPIcon ) --[[ @ 0]]
	self.DoubleXPIcon = DoubleXPIcon --[[ @ 0]]
	
	local DoubleWeaponXPIcon = CoD.Notification2xpWeaponReward.new( f1_arg0, f1_arg1, 0, 0, 72, 144, 0, 0, 0, 72 ) --[[ @ 0]]
	DoubleWeaponXPIcon:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasDoubleWeaponXP( f1_arg1, element )
			end
		}
	} ) --[[ @ 0]]
	DoubleWeaponXPIcon:linkToElementModel( DoubleWeaponXPIcon, "hasDoubleWeaponXP", true, function ( model )
		f1_arg0:updateElementState( DoubleWeaponXPIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasDoubleWeaponXP"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = DoubleWeaponXPIcon --[[ @ 0]]
	local TierBoost = DoubleWeaponXPIcon.subscribeToModel --[[ @ 0]]
	local f1_local5 = DataSources.AutoEvents.getModel( f1_arg1 ) --[[ @ 0]]
	TierBoost( f1_local3, f1_local5.cycled, function ( f5_arg0 )
		f1_arg0:updateElementState( DoubleWeaponXPIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "cycled"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DoubleWeaponXPIcon:linkToElementModel( self, nil, false, function ( model )
		DoubleWeaponXPIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DoubleWeaponXPIcon ) --[[ @ 0]]
	self.DoubleWeaponXPIcon = DoubleWeaponXPIcon --[[ @ 0]]
	
	TierBoost = CoD.Notification2xpBlackMarketReward.new( f1_arg0, f1_arg1, 0, 0, 144, 216, 0, 0, 0, 72 ) --[[ @ 0]]
	TierBoost:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.DoubleXPUtility.HasTierBoost( f1_arg1, element )
			end
		}
	} ) --[[ @ 0]]
	TierBoost:linkToElementModel( TierBoost, "hasTierBoost", true, function ( model )
		f1_arg0:updateElementState( TierBoost, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "hasTierBoost"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = TierBoost --[[ @ 0]]
	f1_local3 = TierBoost.subscribeToModel --[[ @ 0]]
	local f1_local6 = DataSources.AutoEvents.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local5, f1_local6.cycled, function ( f9_arg0 )
		f1_arg0:updateElementState( TierBoost, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "cycled"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	TierBoost:linkToElementModel( self, nil, false, function ( model )
		TierBoost:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( TierBoost ) --[[ @ 0]]
	self.TierBoost = TierBoost --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DoubleXPIconsCenterAligned.__onClose = function ( f11_arg0 )
	f11_arg0.DoubleXPIcon:close() --[[ @ 0]]
	f11_arg0.DoubleWeaponXPIcon:close() --[[ @ 0]]
	f11_arg0.TierBoost:close() --[[ @ 0]]
end
 --[[ @ 0]]
