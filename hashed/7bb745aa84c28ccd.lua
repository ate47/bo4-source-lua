-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/common/commonheader" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorleaderactivity" ) --[[ @ 0]]
require( "x64:751ef3a2adbd471e" ) --[[ @ 0]]
require( "x64:6fda45231af81f63" ) --[[ @ 0]]
require( "x64:37b2e5c29b34a47e" ) --[[ @ 0]]
require( "x64:6dbdc73a4a6c0b46" ) --[[ @ 0]]
require( "x64:445928c36e455a1" ) --[[ @ 0]]

CoD.directorPrivate = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.directorPrivate.__defaultWidth = 1920 --[[ @ 0]]
CoD.directorPrivate.__defaultHeight = 1080 --[[ @ 0]]
CoD.directorPrivate.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitGlobalModel( "QuickPlay", false ) --[[ @ 0]]
	CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.directorPrivate ) --[[ @ 0]]
	self.id = "directorPrivate" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LeaderActivity = CoD.DirectorLeaderActivity.new( f1_arg0, f1_arg1, 0.5, 0.5, 470, 895, 1, 1, -525, -495 ) --[[ @ 0]]
	LeaderActivity:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.DirectorUtility.IsOfflineOnlyDemo()
			end
		}
	} ) --[[ @ 0]]
	LeaderActivity:setAlpha( 0 ) --[[ @ 0]]
	LeaderActivity:setScale( 0.9, 0.9 ) --[[ @ 0]]
	self:addElement( LeaderActivity ) --[[ @ 0]]
	self.LeaderActivity = LeaderActivity --[[ @ 0]]
	
	local CommonHeader = CoD.CommonHeader.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 67 ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyMainMode", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( CoD.DirectorUtility.ConvertLobbyMainModeToModeString( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CommonHeader:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyTitle", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CommonHeader ) --[[ @ 0]]
	self.CommonHeader = CommonHeader --[[ @ 0]]
	
	local DirectorReadyButton = CoD.DirectorReadyButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -178, -108 ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"menu/ready_up" ) ) --[[ @ 0]]
	DirectorReadyButton.PlayText:setText( LocalizeToUpperString( @"menu/ready" ) ) --[[ @ 0]]
	DirectorReadyButton:subscribeToGlobalModel( f1_arg1, "PerController", "ButtonBits." .. Enum[@"luibutton"][@"lui_key_xba_pscross"], function ( model )
		DirectorReadyButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectorReadyButton ) --[[ @ 0]]
	self.DirectorReadyButton = DirectorReadyButton --[[ @ 0]]
	
	local DirectorMapGameTypeAndDifficulty = CoD.DirectorMapGameTypeAndDifficulty.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -368, -188 ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:mergeStateConditions( {
		{
			stateName = "Unselectable",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1C95DCE378B96DFF" ) ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeader.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1C95DCE378B96DFF" ) ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.PlaylistHeaderNonHost.GameModeText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image = function ( f7_arg0 )
		local f7_local0 = f7_arg0:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToZMPlaylistImage( f7_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath = function ()
		local f8_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f8_local0 = f8_local0.playlistId --[[ @ 0]]
		if f8_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image( f8_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image = function ( f9_arg0 )
		local f9_local0 = f9_arg0:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon:setImage( RegisterImage( CoD.DirectorUtility.PlaylistIDToZMPlaylistDifficulty( f9_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image_FullPath = function ()
		local f10_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f10_local0 = f10_local0.playlistId --[[ @ 0]]
		if f10_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image( f10_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc = function ( f11_arg0 )
		local f11_local0 = f11_arg0:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.DirectorUtility.PlaylistIDToZMPlaylistSubtitle( f11_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc_FullPath = function ()
		local f12_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f12_local0 = f12_local0.playlistId --[[ @ 0]]
		if f12_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc( f12_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title = function ( f13_arg0 )
		local f13_local0 = f13_arg0:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.DirectorUtility.PlaylistIDToZMPlaylistName( f13_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "playlistId", DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title ) --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath = function ()
		local f14_local0 = DataSources.LobbyRoot.getModel( f1_arg1 ) --[[ @ 0]]
		f14_local0 = f14_local0.playlistId --[[ @ 0]]
		if f14_local0 then
			DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title( f14_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	self:addElement( DirectorMapGameTypeAndDifficulty ) --[[ @ 0]]
	self.DirectorMapGameTypeAndDifficulty = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	
	local DirectorLobbyPoseMembersZM = CoD.DirectorLobbyPoseMembersZM.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 30, 30 ) --[[ @ 0]]
	DirectorLobbyPoseMembersZM:mergeStateConditions( {
		{
			stateName = "BotsAllowed",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	DirectorLobbyPoseMembersZM:setAlpha( 0 ) --[[ @ 0]]
	DirectorLobbyPoseMembersZM:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewWidgetPrivate", function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:changeFrameWidget( f16_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DirectorLobbyPoseMembersZM ) --[[ @ 0]]
	self.DirectorLobbyPoseMembersZM = DirectorLobbyPoseMembersZM --[[ @ 0]]
	
	local ZMLoadoutPreviewInfo = CoD.ZMLoadoutPreviewInfo.new( f1_arg0, f1_arg1, 0.5, 0.5, -508, 426, 1, 1, -333, -207 ) --[[ @ 0]]
	ZMLoadoutPreviewInfo:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ZMLoadoutPreviewInfo ) --[[ @ 0]]
	self.ZMLoadoutPreviewInfo = ZMLoadoutPreviewInfo --[[ @ 0]]
	
	local DirectorZMLobbySettingList = CoD.DirectorZMLobbySettingList.new( f1_arg0, f1_arg1, 0.5, 0.5, 514, 896, 1, 1, -443, -323 ) --[[ @ 0]]
	DirectorZMLobbySettingList:mergeStateConditions( {
		{
			stateName = "ShowGameRules",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ShowAddRemoveBots",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.GameTypeAllowsBots()
			end
		}
	} ) --[[ @ 0]]
	local f1_local8 = DirectorZMLobbySettingList --[[ @ 0]]
	local f1_local9 = DirectorZMLobbySettingList.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["MapVote.mapVoteGameModeNext"], function ( f19_arg0 )
		f1_arg0:updateElementState( DirectorZMLobbySettingList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "MapVote.mapVoteGameModeNext"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( DirectorZMLobbySettingList ) --[[ @ 0]]
	self.DirectorZMLobbySettingList = DirectorZMLobbySettingList --[[ @ 0]]
	
	f1_local8 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local9 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.MapImage.__DirectorMapAndGameInternal_MapImage_Image_FullPath ) --[[ @ 0]]
	f1_local8 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local9 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.GamemodeIcon.__GamemodeIcon_Image_FullPath ) --[[ @ 0]]
	f1_local8 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local9 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.Label.__Label_Desc_FullPath ) --[[ @ 0]]
	f1_local8 = DirectorMapGameTypeAndDifficulty --[[ @ 0]]
	f1_local9 = DirectorMapGameTypeAndDifficulty.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNetworkMode"], DirectorMapGameTypeAndDifficulty.DirectorMapAndGameInternal.DirectorMapAndGameTypeInternalTitles.SubTitle.__Label_Title_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ZM_isPC",
			condition = function ( menu, element, event )
				return IsZombies() and IsPC()
			end
		},
		{
			stateName = "ZM",
			condition = function ( menu, element, event )
				return IsZombies()
			end
		},
		{
			stateName = "WZ",
			condition = function ( menu, element, event )
				return IsWarzone()
			end
		}
	} ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local8, f1_local10["lobbyRoot.lobbyNav"], function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "GlobalModel", "lobbyRoot.spinnerActive", function ( model )
		if not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and CoD.DirectorUtility.ShowDirectorPrivate( self, f1_arg1 ) and CoD.ModelUtility.IsGlobalModelValueTrue( "QuickPlay" ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "lobbyRoot.lobbyList.playerCount", 1 ) then
			CoD.ZombieUtility.QuickPlayPrivate( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "gameClientDataUpdate", function ( model )
		if CoD.DirectorUtility.ShowDirectorPrivate( self, f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "CharacterSelection", "clientUpdated", function ( model )
		if CoD.DirectorUtility.ShowDirectorPrivate( self, f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "LobbyRoot", "lobbyNav", function ( model )
		if CoD.DirectorUtility.ShowDirectorPrivate( self, f1_arg1 ) then
			CoD.PlayerRoleUtility.UpdatePositionDraftModels( f1_arg1 ) --[[ @ 0]]
			DelaySetFocusToElement( self, "DirectorReadyButton", f1_arg1, 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DirectorReadyButton.id = "DirectorReadyButton" --[[ @ 0]]
	DirectorMapGameTypeAndDifficulty.id = "DirectorMapGameTypeAndDifficulty" --[[ @ 0]]
	DirectorLobbyPoseMembersZM.id = "DirectorLobbyPoseMembersZM" --[[ @ 0]]
	DirectorZMLobbySettingList.id = "DirectorZMLobbySettingList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local9 = self --[[ @ 0]]
	if IsPC() then
		ChangeDefaultFocus( self, self.HomeOrPlayListPC ) --[[ @ 0]]
		CoD.DirectorUtility.SubscribeForSoloMatchLobbyTitle( self.CommonHeader ) --[[ @ 0]]
	else
		CoD.DirectorUtility.SubscribeForSoloMatchLobbyTitle( self.CommonHeader ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.directorPrivate.__resetProperties = function ( f28_arg0 )
	f28_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
	f28_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
	f28_arg0.DirectorLobbyPoseMembersZM:setAlpha( 0 ) --[[ @ 0]]
	f28_arg0.ZMLoadoutPreviewInfo:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.directorPrivate.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f29_arg0.CommonHeader:completeAnimation() --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.CommonHeader ) --[[ @ 0]]
		end
	},
	ZM_isPC = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f30_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
			f30_arg0.DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:completeAnimation() --[[ @ 0]]
			f30_arg0.DirectorLobbyPoseMembersZM:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.DirectorLobbyPoseMembersZM ) --[[ @ 0]]
			f30_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
			f30_arg0.ZMLoadoutPreviewInfo:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ZMLoadoutPreviewInfo ) --[[ @ 0]]
		end
	},
	ZM = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f31_arg0.DirectorLobbyPoseMembersZM:completeAnimation() --[[ @ 0]]
			f31_arg0.DirectorLobbyPoseMembersZM.ZMLoadoutPreviewFrame.ZMLoadoutPreviewFrame:completeAnimation() --[[ @ 0]]
			f31_arg0.DirectorLobbyPoseMembersZM:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.DirectorLobbyPoseMembersZM ) --[[ @ 0]]
			f31_arg0.ZMLoadoutPreviewInfo:completeAnimation() --[[ @ 0]]
			f31_arg0.ZMLoadoutPreviewInfo:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.ZMLoadoutPreviewInfo ) --[[ @ 0]]
		end
	},
	WZ = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.directorPrivate.__onClose = function ( f33_arg0 )
	f33_arg0.LeaderActivity:close() --[[ @ 0]]
	f33_arg0.CommonHeader:close() --[[ @ 0]]
	f33_arg0.DirectorReadyButton:close() --[[ @ 0]]
	f33_arg0.DirectorMapGameTypeAndDifficulty:close() --[[ @ 0]]
	f33_arg0.DirectorLobbyPoseMembersZM:close() --[[ @ 0]]
	f33_arg0.ZMLoadoutPreviewInfo:close() --[[ @ 0]]
	f33_arg0.DirectorZMLobbySettingList:close() --[[ @ 0]]
end
 --[[ @ 0]]
