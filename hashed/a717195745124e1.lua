-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:4ffc2c7e4adad795" ) --[[ @ 0]]
require( "x64:3c0cb09f85132dc0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/common_tabbar_center" ) --[[ @ 0]]
require( "x64:4ca1dc89b2aa714c" ) --[[ @ 0]]
require( "x64:21744d99b88fcb45" ) --[[ @ 0]]
require( "x64:1c92e584d9cb1860" ) --[[ @ 0]]
require( "x64:41b448221b1da982" ) --[[ @ 0]]

CoD.WZPersonalizeWeapon_WeaponListWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WZPersonalizeWeapon_WeaponListWidget.__defaultWidth = 1920 --[[ @ 0]]
CoD.WZPersonalizeWeapon_WeaponListWidget.__defaultHeight = 490 --[[ @ 0]]
CoD.WZPersonalizeWeapon_WeaponListWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WZPersonalizeWeapon_WeaponListWidget ) --[[ @ 0]]
	self.id = "WZPersonalizeWeapon_WeaponListWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local weaponCategoryList = CoD.Common_Tabbar_Center.new( f1_arg0, f1_arg1, 0.5, 0.5, -1650, 1650, 0, 0, -21, 40 ) --[[ @ 0]]
	weaponCategoryList.Tabs.grid:setWidgetType( CoD.CACTextTab ) --[[ @ 0]]
	weaponCategoryList.Tabs.grid:setDataSource( "WZPersonalizeWeaponGroups" ) --[[ @ 0]]
	weaponCategoryList:registerEventHandler( "list_active_changed", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if CoD.BaseUtility.IsWidgetVisible( element ) then
			SetElementProperty( f1_arg0, "__itemGroup", element.category ) --[[ @ 0]]
			SetElementProperty( f1_arg0, "__loadoutType", element.loadoutType ) --[[ @ 0]]
			SetLoseFocusToElement( self, "weaponList", f1_arg1 ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f1_arg1 ) --[[ @ 0]]
			SetFocusToElement( self, "weaponList", f1_arg1 ) --[[ @ 0]]
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( self.weaponList ) --[[ @ 0]]
			CoD.CACUtility.UpdateCommonCurrentActiveTabIndexValue( f1_arg1, self.weaponCategoryList ) --[[ @ 0]]
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.ArrowR ) --[[ @ 0]]
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.ArrowL ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self.__on_menuOpened_weaponCategoryList = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3 )
		local f3_local0 = weaponCategoryList --[[ @ 0]]
		if not IsElementPropertyValue( f3_local0, "_receivedMenuOpen", true ) then
			SetElementProperty( f3_local0, "_receivedMenuOpen", true ) --[[ @ 0]]
			CoD.CACUtility.SetActiveListItemForWeaponGroup( f3_arg2, f3_arg1, self.weaponCategoryList ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f3_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
	self:addElement( weaponCategoryList ) --[[ @ 0]]
	self.weaponCategoryList = weaponCategoryList --[[ @ 0]]
	
	local weaponList = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	weaponList:setLeftRight( 0.5, 0.5, -750, 750 ) --[[ @ 0]]
	weaponList:setTopBottom( 0, 0, 56, 202 ) --[[ @ 0]]
	weaponList:setWidgetType( CoD.WZPersonalizeWeapon_ItemGridButton ) --[[ @ 0]]
	weaponList:setHorizontalCount( 5 ) --[[ @ 0]]
	weaponList:setSpacing( 10 ) --[[ @ 0]]
	weaponList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	weaponList:setHorizontalScrollbar( CoD.PC_GridHorizontalScrollbar ) --[[ @ 0]]
	weaponList:setDataSource( "Unlockables" ) --[[ @ 0]]
	weaponList:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local PCArrowR = weaponList --[[ @ 0]]
	local PCArrowL = weaponList.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	PCArrowL( PCArrowR, f1_local5.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "itemIndex", true, function ( model, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "globalItemIndex", true, function ( model, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponNameInfoModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		CoD.WZUtility.UpdatePersonalizeWeaponModel( element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "list_active_changed", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if not IsPC() then
			UpdateSelfElementState( f1_arg0, self.ArrowR, f1_arg1 ) --[[ @ 0]]
			UpdateSelfElementState( f1_arg0, self.ArrowL, f1_arg1 ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, element, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_194122F68876E5D9", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, element, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_194122F68876E5D9", Enum[@"luibuttonpromptflags"][@"bpf_contextual"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.CACUtility.ShowWeaponVariantList( menu, controller, self.WeaponVariantListWidget ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollLeft( self.weaponList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollRight( self.weaponList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_weaponList = function ( f22_arg0, f22_arg1, f22_arg2, f22_arg3 )
		local f22_local0 = weaponList --[[ @ 0]]
		if IsPC() then
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( f22_local0 ) --[[ @ 0]]
			CoD.WZUtility.UpdatePersonalizeWeaponModel( f22_local0, f22_arg1, f22_arg2 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_weaponList ) --[[ @ 0]]
	weaponList:subscribeToGlobalModel( f1_arg1, "PerController", "Unlockables.listUpdate", function ( model )
		CoD.GridAndListUtility.UpdateDataSource( weaponList, true, false, true ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:subscribeToGlobalModel( f1_arg1, "WeaponPersonalization", "listUpdate", function ( model )
		CoD.GridAndListUtility.UpdateDataSource( weaponList, true, false, true ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
		if IsMouseOrKeyboard( f25_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( f25_arg0, f25_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( f25_arg1, f25_arg0, f25_arg2 ) and not CoD.WZUtility.IsPersonalizationLockedForWeapon( f25_arg1, f25_arg0, f25_arg2 ) then
			return function ( f26_arg0, f26_arg1, f26_arg2, f26_arg3 )
				CoD.CraftUtility.SetupPaintjobPersonalization( self, f26_arg0, f26_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, f26_arg1, f26_arg2, f26_arg0, f26_arg0, "primary" ) --[[ @ 0]]
				PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( weaponList ) --[[ @ 0]]
	self.weaponList = weaponList --[[ @ 0]]
	
	PCArrowL = nil --[[ @ 0]]
	
	PCArrowL = CoD.WarzoneContextualExtraItemsArrow.new( f1_arg0, f1_arg1, 0, 0, 177.5, 207.5, 0, 0, 111.5, 146.5 ) --[[ @ 0]]
	PCArrowL:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.IsQuickEquipListFirstItemVisible( self.weaponList )
			end
		}
	} ) --[[ @ 0]]
	PCArrowL:setZRot( 90 ) --[[ @ 0]]
	PCArrowL.Arrow:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowL.Arrow2:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowL:appendEventHandler( "input_source_changed", function ( f28_arg0, f28_arg1 )
		f28_arg1.menu = f28_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f28_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = PCArrowL --[[ @ 0]]
	PCArrowR = PCArrowL.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	PCArrowR( f1_local5, f1_local6.LastInput, function ( f29_arg0, f29_arg1 )
		CoD.Menu.UpdateButtonShownState( f29_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PCArrowL:registerEventHandler( "gain_focus", function ( element, event )
		local f30_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f30_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f30_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f30_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowL, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.ScrollLeft( self.weaponList ) --[[ @ 0]]
			CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowL ) --[[ @ 0]]
	self.PCArrowL = PCArrowL --[[ @ 0]]
	
	PCArrowR = nil --[[ @ 0]]
	
	PCArrowR = CoD.WarzoneContextualExtraItemsArrow.new( f1_arg0, f1_arg1, 0, 0, 1714, 1744, 0, 0, 111.5, 146.5 ) --[[ @ 0]]
	PCArrowR:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.IsQuickEquipListLastItemVisible( self.weaponList )
			end
		}
	} ) --[[ @ 0]]
	PCArrowR:setZRot( 270 ) --[[ @ 0]]
	PCArrowR.Arrow:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowR.Arrow2:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowR:appendEventHandler( "input_source_changed", function ( f34_arg0, f34_arg1 )
		f34_arg1.menu = f34_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = PCArrowR --[[ @ 0]]
	f1_local5 = PCArrowR.subscribeToModel --[[ @ 0]]
	local WeaponVariantListWidget = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, WeaponVariantListWidget.LastInput, function ( f35_arg0, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PCArrowR:registerEventHandler( "gain_focus", function ( element, event )
		local f36_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f36_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f36_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f36_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowR, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.ScrollRight( self.weaponList ) --[[ @ 0]]
			CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowR ) --[[ @ 0]]
	self.PCArrowR = PCArrowR --[[ @ 0]]
	
	f1_local5 = nil --[[ @ 0]]
	self.ArrowL = LUI.UIElement.createFake() --[[ @ 0]]
	f1_local6 = nil --[[ @ 0]]
	self.ArrowR = LUI.UIElement.createFake() --[[ @ 0]]
	
	WeaponVariantListWidget = CoD.WeaponVariantListWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 490 ) --[[ @ 0]]
	WeaponVariantListWidget.SignatureWeaponList:setWidgetType( CoD.WZPersonalizeWeapon_AttachmentSlot ) --[[ @ 0]]
	WeaponVariantListWidget.SignatureWeaponList:setSpacing( 10 ) --[[ @ 0]]
	WeaponVariantListWidget:registerEventHandler( "gain_focus", function ( element, event )
		local f39_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f39_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f39_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		return f39_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponVariantListWidget, f1_arg1, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.HideWeaponVariantList( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( WeaponVariantListWidget ) --[[ @ 0]]
	self.WeaponVariantListWidget = WeaponVariantListWidget --[[ @ 0]]
	
	WeaponVariantListWidget:linkToElementModel( weaponList, nil, false, function ( model )
		WeaponVariantListWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "NoCategories",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.weaponCategoryList )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f44_arg0, f44_arg1 )
		f44_arg1.menu = f44_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f44_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponCategoryList.id = "weaponCategoryList" --[[ @ 0]]
	weaponList.id = "weaponList" --[[ @ 0]]
	if CoD.isPC then
		PCArrowL.id = "PCArrowL" --[[ @ 0]]
	end
	if CoD.isPC then
		PCArrowR.id = "PCArrowR" --[[ @ 0]]
	end
	WeaponVariantListWidget.id = "WeaponVariantListWidget" --[[ @ 0]]
	self.__defaultFocus = weaponList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_weaponList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local8 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetForceMouseEventDispatch( self, true ) --[[ @ 0]]
	end
	f1_local8 = weaponCategoryList --[[ @ 0]]
	if IsPC() then
		DisableKeyboardNavigationByElement( f1_local8 ) --[[ @ 0]]
	end
	f1_local8 = weaponList --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local8, f1_arg1, "displayName", "", "" ) --[[ @ 0]]
		CoD.GridAndListUtility.HideScrollbarsForGamepad( f1_arg0, f1_arg1, f1_local8 ) --[[ @ 0]]
	elseif not IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalScrollbar( f1_arg0, f1_local8 ) --[[ @ 0]]
	end
	f1_local8 = PCArrowL --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.UpdateStateOnGridLayoutUpdate( f1_arg1, f1_local8, self.weaponList ) --[[ @ 0]]
		SetElementCanBeNavigatedTo( f1_local8, false ) --[[ @ 0]]
	end
	f1_local8 = PCArrowR --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.UpdateStateOnGridLayoutUpdate( f1_arg1, f1_local8, self.weaponList ) --[[ @ 0]]
		SetElementCanBeNavigatedTo( f1_local8, false ) --[[ @ 0]]
	end
	f1_local8 = WeaponVariantListWidget --[[ @ 0]]
	HideWidget( self.WeaponVariantListWidget ) --[[ @ 0]]
	SetElementProperty( f1_local8, "_forWZArmory", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WZPersonalizeWeapon_WeaponListWidget.__onClose = function ( f46_arg0 )
	f46_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f46_arg0.WeaponVariantListWidget:close() --[[ @ 0]]
	f46_arg0.weaponCategoryList:close() --[[ @ 0]]
	f46_arg0.weaponList:close() --[[ @ 0]]
	f46_arg0.PCArrowL:close() --[[ @ 0]]
	f46_arg0.PCArrowR:close() --[[ @ 0]]
	f46_arg0.ArrowL:close() --[[ @ 0]]
	f46_arg0.ArrowR:close() --[[ @ 0]]
end
 --[[ @ 0]]
