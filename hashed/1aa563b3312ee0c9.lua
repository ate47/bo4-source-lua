-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/onofftext" ) --[[ @ 0]]
require( "x64:37a9f0ac9904eceb" ) --[[ @ 0]]
require( "x64:85d753343a290f2" ) --[[ @ 0]]

CoD.EquippedBGBContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EquippedBGBContainer.__defaultWidth = 350 --[[ @ 0]]
CoD.EquippedBGBContainer.__defaultHeight = 350 --[[ @ 0]]
CoD.EquippedBGBContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EquippedBGBContainer ) --[[ @ 0]]
	self.id = "EquippedBGBContainer" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local UpBGB = CoD.EquippedBGB.new( f1_arg0, f1_arg1, 0.5, 0.5, -60, 60, 0, 0, 16, 136 ) --[[ @ 0]]
	UpBGB:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Up", function ( model )
		UpBGB:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local DownBGB = UpBGB --[[ @ 0]]
	local RightBGB = UpBGB.subscribeToModel --[[ @ 0]]
	local LeftBGB = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	RightBGB( DownBGB, LeftBGB.selectedIndex, function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	UpBGB:linkToElementModel( UpBGB, "slotIndex", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	UpBGB:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( UpBGB, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.OpenBGBSelectionMenu( self, menu, controller, self ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			PlaySoundAlias( "uin_zcac_elixir_slot" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( UpBGB, "childFocusGained", function ( element )
		if IsCurrentMenu( f1_arg0, "BubblegumBuffSelect" ) then
			CoD.ZMLoadoutUtility.UpdateBGBInfoFromEquippedSlots( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_arg0, self, element, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( UpBGB ) --[[ @ 0]]
	self.UpBGB = UpBGB --[[ @ 0]]
	
	RightBGB = CoD.EquippedBGB.new( f1_arg0, f1_arg1, 1, 1, -134, -14, 0.5, 0.5, -60, 60 ) --[[ @ 0]]
	RightBGB:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Right", function ( model )
		RightBGB:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftBGB = RightBGB --[[ @ 0]]
	DownBGB = RightBGB.subscribeToModel --[[ @ 0]]
	local ButtonPrompt = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	DownBGB( LeftBGB, ButtonPrompt.selectedIndex, function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightBGB:linkToElementModel( RightBGB, "slotIndex", true, function ( model, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightBGB:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightBGB, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.OpenBGBSelectionMenu( self, menu, controller, self ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			PlaySoundAlias( "uin_zcac_elixir_slot" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( RightBGB, "childFocusGained", function ( element )
		if IsCurrentMenu( f1_arg0, "BubblegumBuffSelect" ) then
			CoD.ZMLoadoutUtility.UpdateBGBInfoFromEquippedSlots( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_arg0, self, element, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RightBGB ) --[[ @ 0]]
	self.RightBGB = RightBGB --[[ @ 0]]
	
	DownBGB = CoD.EquippedBGB.new( f1_arg0, f1_arg1, 0.5, 0.5, -60, 60, 1, 1, -134, -14 ) --[[ @ 0]]
	DownBGB:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Down", function ( model )
		DownBGB:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonPrompt = DownBGB --[[ @ 0]]
	LeftBGB = DownBGB.subscribeToModel --[[ @ 0]]
	local Name = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	LeftBGB( ButtonPrompt, Name.selectedIndex, function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DownBGB:linkToElementModel( DownBGB, "slotIndex", true, function ( model, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DownBGB:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DownBGB, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.OpenBGBSelectionMenu( self, menu, controller, self ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			PlaySoundAlias( "uin_zcac_elixir_slot" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( DownBGB, "childFocusGained", function ( element )
		if IsCurrentMenu( f1_arg0, "BubblegumBuffSelect" ) then
			CoD.ZMLoadoutUtility.UpdateBGBInfoFromEquippedSlots( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_arg0, self, element, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DownBGB ) --[[ @ 0]]
	self.DownBGB = DownBGB --[[ @ 0]]
	
	LeftBGB = CoD.EquippedBGB.new( f1_arg0, f1_arg1, 0, 0, 14, 134, 0.5, 0.5, -60, 60 ) --[[ @ 0]]
	LeftBGB:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Left", function ( model )
		LeftBGB:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name = LeftBGB --[[ @ 0]]
	ButtonPrompt = LeftBGB.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.BGBLoadout.getModel( f1_arg1 ) --[[ @ 0]]
	ButtonPrompt( Name, f1_local7.selectedIndex, function ( f24_arg0, f24_arg1 )
		CoD.Menu.UpdateButtonShownState( f24_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftBGB:linkToElementModel( LeftBGB, "slotIndex", true, function ( model, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftBGB:registerEventHandler( "gain_focus", function ( element, event )
		local f26_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f26_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f26_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f26_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftBGB, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.OpenBGBSelectionMenu( self, menu, controller, self ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.BaseUtility.SetControllerModelToSelfModelValue( controller, element, "BGBLoadout.selectedIndex", "slotIndex" ) --[[ @ 0]]
			PlaySoundAlias( "uin_zcac_elixir_slot" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsCurrentMenu( menu, "BubblegumBuffSelect" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToSelfModelValue( element, controller, "BGBLoadout", "selectedIndex", "slotIndex" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( LeftBGB, "childFocusGained", function ( element )
		if IsCurrentMenu( f1_arg0, "BubblegumBuffSelect" ) then
			CoD.ZMLoadoutUtility.UpdateBGBInfoFromEquippedSlots( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
			CoD.ZMLoadoutUtility.ShowBubblegumBuffModel( f1_arg0, self, element, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( LeftBGB ) --[[ @ 0]]
	self.LeftBGB = LeftBGB --[[ @ 0]]
	
	ButtonPrompt = CoD.BGBSelectButtonPrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 32, 0.5, 0.5, -39, 31 ) --[[ @ 0]]
	self:addElement( ButtonPrompt ) --[[ @ 0]]
	self.ButtonPrompt = ButtonPrompt --[[ @ 0]]
	
	Name = CoD.onOffText.new( f1_arg0, f1_arg1, 0.5, 0.5, -150, 150, 0, 0, 390.5, 411.5 ) --[[ @ 0]]
	Name:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return not IsCurrentMenu( menu, "BubblegumBuffSelect" )
			end
		}
	} ) --[[ @ 0]]
	Name:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	Name.TextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", nil, function ( model )
		Name:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "selectedEquippedBGBName", function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= nil then
			Name.TextBox:setText( LocalizeToUpperString( f32_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Up.displayName", function ( model )
		CoD.ZMLoadoutUtility.UpdateBGBEquippedSelectedName( Name, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Right.displayName", function ( model )
		CoD.ZMLoadoutUtility.UpdateBGBEquippedSelectedName( Name, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Down.displayName", function ( model )
		CoD.ZMLoadoutUtility.UpdateBGBEquippedSelectedName( Name, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Left.displayName", function ( model )
		CoD.ZMLoadoutUtility.UpdateBGBEquippedSelectedName( Name, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Name:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "selectedIndex", function ( model )
		CoD.ZMLoadoutUtility.UpdateBGBNameFromSelectedIndex( f1_arg0, Name, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Name ) --[[ @ 0]]
	self.Name = Name --[[ @ 0]]
	
	UpBGB.id = "UpBGB" --[[ @ 0]]
	RightBGB.id = "RightBGB" --[[ @ 0]]
	DownBGB.id = "DownBGB" --[[ @ 0]]
	LeftBGB.id = "LeftBGB" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local7 = self --[[ @ 0]]
	f1_local7 = UpBGB --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.left, f1_local7, self.LeftBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local7, self.UpBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.right, f1_local7, self.RightBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.down, f1_local7, self.DownBGB ) --[[ @ 0]]
	f1_local7 = RightBGB --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.left, f1_local7, self.LeftBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.down, f1_local7, self.DownBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local7, self.UpBGB ) --[[ @ 0]]
	f1_local7 = DownBGB --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.left, f1_local7, self.LeftBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local7, self.UpBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.right, f1_local7, self.RightBGB ) --[[ @ 0]]
	f1_local7 = LeftBGB --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.left, f1_local7, self.LeftBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.up, f1_local7, self.UpBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.right, f1_local7, self.RightBGB ) --[[ @ 0]]
	CoD.BaseUtility.SetCustomNavDirection( CoD.BaseUtility.NavigationDirection.down, f1_local7, self.DownBGB ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.EquippedBGBContainer.__onClose = function ( f38_arg0 )
	f38_arg0.UpBGB:close() --[[ @ 0]]
	f38_arg0.RightBGB:close() --[[ @ 0]]
	f38_arg0.DownBGB:close() --[[ @ 0]]
	f38_arg0.LeftBGB:close() --[[ @ 0]]
	f38_arg0.ButtonPrompt:close() --[[ @ 0]]
	f38_arg0.Name:close() --[[ @ 0]]
end
 --[[ @ 0]]
