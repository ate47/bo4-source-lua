-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:6bc6e2379d2241fb" ) --[[ @ 0]]
require( "x64:5bc22715ccac339a" ) --[[ @ 0]]
require( "x64:1f9f0e41049e1efe" ) --[[ @ 0]]

CoD.LaboratoryPlasma_PopoutContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.__defaultWidth = 800 --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.__defaultHeight = 1080 --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.LaboratoryPlasma_PopoutContainer ) --[[ @ 0]]
	self.id = "LaboratoryPlasma_PopoutContainer" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local SceneBlur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SceneBlur:setRGB( 0, 0, 0 ) --[[ @ 0]]
	SceneBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	SceneBlur:setShaderVector( 0, 0, 0.4, 0, 0 ) --[[ @ 0]]
	self:addElement( SceneBlur ) --[[ @ 0]]
	self.SceneBlur = SceneBlur --[[ @ 0]]
	
	local leftBackground = LUI.UIImage.new( 0.5, 0.5, -400, 400, 0, 1, 0, 0 ) --[[ @ 0]]
	leftBackground:setRGB( 0.04, 0.04, 0.04 ) --[[ @ 0]]
	leftBackground:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( leftBackground ) --[[ @ 0]]
	self.leftBackground = leftBackground --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 0.5, 798.5, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.6 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local StoneTiledBacking = LUI.UIImage.new( 0, 0, 0, 799, 0, 0, 1, 207 ) --[[ @ 0]]
	StoneTiledBacking:setRGB( 0.83, 0.11, 0.01 ) --[[ @ 0]]
	StoneTiledBacking:setAlpha( 0.8 ) --[[ @ 0]]
	StoneTiledBacking:setImage( RegisterImage( @"uie_ui_zm_laboratory_buttonbgtile" ) ) --[[ @ 0]]
	StoneTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	StoneTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	StoneTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( StoneTiledBacking ) --[[ @ 0]]
	self.StoneTiledBacking = StoneTiledBacking --[[ @ 0]]
	
	local RedOverlay = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 207 ) --[[ @ 0]]
	RedOverlay:setRGB( 0.83, 0.11, 0.01 ) --[[ @ 0]]
	RedOverlay:setAlpha( 0.02 ) --[[ @ 0]]
	self:addElement( RedOverlay ) --[[ @ 0]]
	self.RedOverlay = RedOverlay --[[ @ 0]]
	
	local Divider = LUI.UIImage.new( 0.5, 0.5, -325, 325, 0.5, 0.5, 5, 7 ) --[[ @ 0]]
	Divider:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	Divider:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( Divider ) --[[ @ 0]]
	self.Divider = Divider --[[ @ 0]]
	
	local tileTexture = LUI.UIImage.new( 0.5, 0.5, -400, 400, 0, 1, 0, 0 ) --[[ @ 0]]
	tileTexture:setAlpha( 0.5 ) --[[ @ 0]]
	tileTexture:setImage( RegisterImage( @"uie_t7_tile_texture" ) ) --[[ @ 0]]
	tileTexture:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_tile_scroll" ) ) --[[ @ 0]]
	tileTexture:setShaderVector( 0, 30, 55, 0, 0 ) --[[ @ 0]]
	tileTexture:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( tileTexture ) --[[ @ 0]]
	self.tileTexture = tileTexture --[[ @ 0]]
	
	local List = LUI.UIList.new( f1_arg0, f1_arg1, 19, 0, nil, false, false, false, false ) --[[ @ 0]]
	List:setLeftRight( 0, 0, 75, 725 ) --[[ @ 0]]
	List:setTopBottom( 0.5, 0.5, 66, 374 ) --[[ @ 0]]
	List:setWidgetType( CoD.LaboratoryPlasma_ListButton ) --[[ @ 0]]
	List:setVerticalCount( 3 ) --[[ @ 0]]
	List:setSpacing( 19 ) --[[ @ 0]]
	List:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	List:setFilter( function ( f2_arg0 )
		return f2_arg0.isFeatured:get() ~= true
	end ) --[[ @ 0]]
	List:setDataSource( "ZMLaboratoryPlasmaItemList" ) --[[ @ 0]]
	List:linkToElementModel( List, "disabled", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not IsDisabled( element, controller ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsDisabled( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( List ) --[[ @ 0]]
	self.List = List --[[ @ 0]]
	
	local titlePurchasePlasma = LUI.UIText.new( 0.5, 0.5, -325.5, 326.5, 0, 0, 175.5, 205.5 ) --[[ @ 0]]
	titlePurchasePlasma:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	titlePurchasePlasma:setText( LocalizeToUpperString( @"hash_29616DF01C4B70B" ) ) --[[ @ 0]]
	titlePurchasePlasma:setTTF( "skorzhen" ) --[[ @ 0]]
	titlePurchasePlasma:setLetterSpacing( 5 ) --[[ @ 0]]
	titlePurchasePlasma:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	titlePurchasePlasma:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( titlePurchasePlasma ) --[[ @ 0]]
	self.titlePurchasePlasma = titlePurchasePlasma --[[ @ 0]]
	
	local titleNotEnoughPlasma = LUI.UIText.new( 0.5, 0.5, -325.5, 326.5, 0, 0, 175.5, 205.5 ) --[[ @ 0]]
	titleNotEnoughPlasma:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	titleNotEnoughPlasma:setText( LocalizeToUpperString( @"hash_1DFE20BB2A710F9C" ) ) --[[ @ 0]]
	titleNotEnoughPlasma:setTTF( "skorzhen" ) --[[ @ 0]]
	titleNotEnoughPlasma:setLetterSpacing( 5 ) --[[ @ 0]]
	titleNotEnoughPlasma:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	titleNotEnoughPlasma:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( titleNotEnoughPlasma ) --[[ @ 0]]
	self.titleNotEnoughPlasma = titleNotEnoughPlasma --[[ @ 0]]
	
	local reason = LUI.UIText.new( 0.5, 0.5, -324.5, 325.5, 0, 0, 231.5, 251.5 ) --[[ @ 0]]
	reason:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	reason:setTTF( "dinnext_regular" ) --[[ @ 0]]
	reason:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	reason:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	reason:linkToElementModel( self, "plasmaPrice", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			reason:setText( CoD.ZMLaboratoryUtility.UpdateNPPurchaseDesc( self:getModel(), f1_arg1, f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( reason ) --[[ @ 0]]
	self.reason = reason --[[ @ 0]]
	
	local Featured = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	Featured:setLeftRight( 0, 0, 76, 726 ) --[[ @ 0]]
	Featured:setTopBottom( 0, 0, 355, 445 ) --[[ @ 0]]
	Featured:setWidgetType( CoD.LaboratoryPlasma_ListButton ) --[[ @ 0]]
	Featured:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Featured:setFilter( function ( f8_arg0 )
		return f8_arg0.isFeatured:get() == true
	end ) --[[ @ 0]]
	Featured:setDataSource( "ZMLaboratoryPlasmaItemList" ) --[[ @ 0]]
	Featured:linkToElementModel( Featured, "disabled", true, function ( model, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Featured:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Featured, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not IsDisabled( element, controller ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsDisabled( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( Featured ) --[[ @ 0]]
	self.Featured = Featured --[[ @ 0]]
	
	local BgZmStar = LUI.UIImage.new( 0.5, 0.5, -100, 100, 0, 0, 107, 307 ) --[[ @ 0]]
	BgZmStar:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	BgZmStar:setAlpha( 0.4 ) --[[ @ 0]]
	BgZmStar:setImage( RegisterImage( @"uie_ui_hud_zm_arr_reward_star" ) ) --[[ @ 0]]
	BgZmStar:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	BgZmStar:setShaderVector( 0, 4, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BgZmStar ) --[[ @ 0]]
	self.BgZmStar = BgZmStar --[[ @ 0]]
	
	local DividerCenter = LUI.UIImage.new( 0.5, 0.5, -7.5, 7.5, 0.5, 0.5, -1.5, 13.5 ) --[[ @ 0]]
	DividerCenter:setImage( RegisterImage( @"hash_61EC82771A88A0E6" ) ) --[[ @ 0]]
	self:addElement( DividerCenter ) --[[ @ 0]]
	self.DividerCenter = DividerCenter --[[ @ 0]]
	
	local HeaderUnderline = CoD.zm_LaboratoryDescriptionDivider.new( f1_arg0, f1_arg1, 0.5, 0.5, -324.5, 324.5, 0, 0, 191, 223 ) --[[ @ 0]]
	self:addElement( HeaderUnderline ) --[[ @ 0]]
	self.HeaderUnderline = HeaderUnderline --[[ @ 0]]
	
	local SideBar = LUI.UIImage.new( 0, 0, -2, 3, 0, 1, 0, 0 ) --[[ @ 0]]
	SideBar:setAlpha( 0.25 ) --[[ @ 0]]
	SideBar:setImage( RegisterImage( @"hash_638DA8EF7E70CB06" ) ) --[[ @ 0]]
	self:addElement( SideBar ) --[[ @ 0]]
	self.SideBar = SideBar --[[ @ 0]]
	
	local SideBar2 = nil --[[ @ 0]]
	
	SideBar2 = LUI.UIImage.new( 0, 0, 796, 801, 0, 1, 0, 0 ) --[[ @ 0]]
	SideBar2:setAlpha( 0.25 ) --[[ @ 0]]
	SideBar2:setYRot( 180 ) --[[ @ 0]]
	SideBar2:setImage( RegisterImage( @"hash_638DA8EF7E70CB06" ) ) --[[ @ 0]]
	self:addElement( SideBar2 ) --[[ @ 0]]
	self.SideBar2 = SideBar2 --[[ @ 0]]
	
	local CommonIdentityWidgetStreamlined = CoD.CommonIdentityWidgetStreamlined.new( f1_arg0, f1_arg1, 1, 1, -603.5, -73.5, 0, 0, 87, 127 ) --[[ @ 0]]
	CommonIdentityWidgetStreamlined:subscribeToGlobalModel( f1_arg1, "PerController", "identityBadge", function ( model )
		CommonIdentityWidgetStreamlined:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonIdentityWidgetStreamlined ) --[[ @ 0]]
	self.CommonIdentityWidgetStreamlined = CommonIdentityWidgetStreamlined --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "notEnoughPlasma",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelNil( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, false, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model and model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		UpdateSelfElementState( f1_arg0, self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List.id = "List" --[[ @ 0]]
	Featured.id = "Featured" --[[ @ 0]]
	self.__defaultFocus = List --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.__resetProperties = function ( f17_arg0 )
	f17_arg0.titleNotEnoughPlasma:completeAnimation() --[[ @ 0]]
	f17_arg0.reason:completeAnimation() --[[ @ 0]]
	f17_arg0.titlePurchasePlasma:completeAnimation() --[[ @ 0]]
	f17_arg0.titleNotEnoughPlasma:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.reason:setAlpha( 1 ) --[[ @ 0]]
	f17_arg0.titlePurchasePlasma:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.titleNotEnoughPlasma:completeAnimation() --[[ @ 0]]
			f18_arg0.titleNotEnoughPlasma:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.titleNotEnoughPlasma ) --[[ @ 0]]
			f18_arg0.reason:completeAnimation() --[[ @ 0]]
			f18_arg0.reason:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.reason ) --[[ @ 0]]
		end
	},
	notEnoughPlasma = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.titlePurchasePlasma:completeAnimation() --[[ @ 0]]
			f19_arg0.titlePurchasePlasma:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.titlePurchasePlasma ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.LaboratoryPlasma_PopoutContainer.__onClose = function ( f20_arg0 )
	f20_arg0.List:close() --[[ @ 0]]
	f20_arg0.reason:close() --[[ @ 0]]
	f20_arg0.Featured:close() --[[ @ 0]]
	f20_arg0.HeaderUnderline:close() --[[ @ 0]]
	f20_arg0.CommonIdentityWidgetStreamlined:close() --[[ @ 0]]
end
 --[[ @ 0]]
