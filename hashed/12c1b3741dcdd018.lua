-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "x64:416e50b4a3a7caef" ) --[[ @ 0]]
require( "x64:1ed710b42a5e9462" ) --[[ @ 0]]
require( "x64:554c0c90f9dc2176" ) --[[ @ 0]]
require( "x64:23265282ebd17c5b" ) --[[ @ 0]]
require( "x64:5551c2027c3a4c5d" ) --[[ @ 0]]
require( "x64:4ea6611127965072" ) --[[ @ 0]]
require( "x64:3554cabb13db185" ) --[[ @ 0]]
require( "x64:a2599421197984c" ) --[[ @ 0]]

CoD.AmmoWidgetZM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetZM.__defaultWidth = 597 --[[ @ 0]]
CoD.AmmoWidgetZM.__defaultHeight = 186 --[[ @ 0]]
CoD.AmmoWidgetZM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetZM ) --[[ @ 0]]
	self.id = "AmmoWidgetZM" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local bgbGlowOrangeOver = LUI.UIImage.new( 0.5, 0.5, -290, -48, 0.5, 0.5, -165, 196 ) --[[ @ 0]]
	bgbGlowOrangeOver:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	bgbGlowOrangeOver:setAlpha( 0 ) --[[ @ 0]]
	bgbGlowOrangeOver:setZRot( 90 ) --[[ @ 0]]
	bgbGlowOrangeOver:setImage( RegisterImage( @"uie_t7_core_hud_mapwidget_panelglow" ) ) --[[ @ 0]]
	bgbGlowOrangeOver:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( bgbGlowOrangeOver ) --[[ @ 0]]
	self.bgbGlowOrangeOver = bgbGlowOrangeOver --[[ @ 0]]
	
	local TutorialHighlight = LUI.UIImage.new( 0, 0, 47.5, 193.5, 0, 0, 15, 177 ) --[[ @ 0]]
	TutorialHighlight:setRGB( 0.87, 0.07, 0.78 ) --[[ @ 0]]
	TutorialHighlight:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( TutorialHighlight ) --[[ @ 0]]
	self.TutorialHighlight = TutorialHighlight --[[ @ 0]]
	
	local BackingBlur = LUI.UIImage.new( 0, 0, 245, 597, 0, 0, 56, 184 ) --[[ @ 0]]
	BackingBlur:setAlpha( 0.9 ) --[[ @ 0]]
	BackingBlur:setScale( 0.9, 0.9 ) --[[ @ 0]]
	BackingBlur:setImage( RegisterImage( @"hash_6907FA1028168086" ) ) --[[ @ 0]]
	BackingBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	BackingBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BackingBlur ) --[[ @ 0]]
	self.BackingBlur = BackingBlur --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 0, 245, 597, 0, 0, 56, 184 ) --[[ @ 0]]
	Backing:setScale( 0.9, 0.9 ) --[[ @ 0]]
	Backing:setImage( RegisterImage( @"hash_62656BC725F9EEB" ) ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local WeaponAmmoCount = CoD.AmmoWidgetZM_WeaponInfo.new( f1_arg0, f1_arg1, 0, 0, 587, 826, 0, 0, 85, 182 ) --[[ @ 0]]
	WeaponAmmoCount:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", nil, function ( model )
		WeaponAmmoCount:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WeaponAmmoCount ) --[[ @ 0]]
	self.WeaponAmmoCount = WeaponAmmoCount --[[ @ 0]]
	
	local MuleKick = CoD.AmmoWidgetZM_MuleKick.new( f1_arg0, f1_arg1, 0, 0, 305.5, 345.5, 0, 0, 26.5, 66.5 ) --[[ @ 0]]
	self:addElement( MuleKick ) --[[ @ 0]]
	self.MuleKick = MuleKick --[[ @ 0]]
	
	local AATIcon = LUI.UIImage.new( 0, 0, 339.5, 411.5, 0, 0, 9.5, 81.5 ) --[[ @ 0]]
	AATIcon:setScale( 0.7, 0.7 ) --[[ @ 0]]
	AATIcon:subscribeToGlobalModel( f1_arg1, "ZMHud", "aatIcon", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			AATIcon:setImage( RegisterImage( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AATIcon ) --[[ @ 0]]
	self.AATIcon = AATIcon --[[ @ 0]]
	
	local aatText = LUI.UIText.new( 0, 0, 403, 529, 0, 0, 34.5, 54.5 ) --[[ @ 0]]
	aatText:setRGB( 1, 0.87, 0.54 ) --[[ @ 0]]
	aatText:setTTF( "skorzhen" ) --[[ @ 0]]
	aatText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	aatText:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	aatText:subscribeToGlobalModel( f1_arg1, "ZMHud", "aat", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			aatText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( aatText ) --[[ @ 0]]
	self.aatText = aatText --[[ @ 0]]
	
	local Equipment = CoD.AmmoWidgetZM_EquipmentContainer.new( f1_arg0, f1_arg1, 0, 0, 163.5, 235.5, 0, 0, 90.5, 149.5 ) --[[ @ 0]]
	Equipment:subscribeToGlobalModel( f1_arg1, "LethalOffhands", "0", function ( model )
		Equipment:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Equipment ) --[[ @ 0]]
	self.Equipment = Equipment --[[ @ 0]]
	
	local AmmoWidgetZMAbilityOrWeaponContainer = CoD.AmmoWidgetZM_AbilityOrWeaponContainer.new( f1_arg0, f1_arg1, 0, 0, 84.5, 156.5, 0, 0, 90.5, 149.5 ) --[[ @ 0]]
	self:addElement( AmmoWidgetZMAbilityOrWeaponContainer ) --[[ @ 0]]
	self.AmmoWidgetZMAbilityOrWeaponContainer = AmmoWidgetZMAbilityOrWeaponContainer --[[ @ 0]]
	
	local specialWeaponLevel = CoD.AmmoWidgetZM_SpecialWeaponProgress.new( f1_arg0, f1_arg1, 0, 0, 73, 162, 0, 0, 142, 182 ) --[[ @ 0]]
	specialWeaponLevel:subscribeToGlobalModel( f1_arg1, "PlayerAbilities", "playerGadget2", function ( model )
		specialWeaponLevel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( specialWeaponLevel ) --[[ @ 0]]
	self.specialWeaponLevel = specialWeaponLevel --[[ @ 0]]
	
	local HudZMWeaponDisabledContainer = CoD.Hud_ZM_Perks_Disabled_Container.new( f1_arg0, f1_arg1, 0, 0, 280, 630, 0, 0, 55, 190 ) --[[ @ 0]]
	HudZMWeaponDisabledContainer:mergeStateConditions( {
		{
			stateName = "Hide",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentWeaponLocked", 0 ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableGun", 0 )
			end
		},
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f8_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) then
					f8_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
					if f8_local0 then
						f8_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentWeaponLocked", 1 ) --[[ @ 0]]
						if f8_local0 then
							f8_local0 = CoD.ZombieUtility.GetIsDelayDisableWeaponEqualTo( f1_arg1, 2 ) --[[ @ 0]]
							if f8_local0 then
								f8_local0 = not CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableGun", 0 ) --[[ @ 0]]
							end
						end
					end
				else
					f8_local0 = false --[[ @ 0]]
				end
				return f8_local0
			end
		},
		{
			stateName = "QuickShow",
			condition = function ( menu, element, event )
				local f9_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
				if f9_local0 then
					f9_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentWeaponLocked", 1 ) --[[ @ 0]]
					if f9_local0 then
						if not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) then
							f9_local0 = CoD.ZombieUtility.GetIsDelayDisableWeaponEqualTo( f1_arg1, 0 ) --[[ @ 0]]
							if f9_local0 then
								f9_local0 = not CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableGun", 0 ) --[[ @ 0]]
							end
						else
							f9_local0 = false --[[ @ 0]]
						end
					end
				end
				return f9_local0
			end
		}
	} ) --[[ @ 0]]
	local HudZMSpecialWeaponDisabledContainer = HudZMWeaponDisabledContainer --[[ @ 0]]
	local HudZMEquipmentDisabledContainer = HudZMWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	local WeaponEquippedList = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HudZMEquipmentDisabledContainer( HudZMSpecialWeaponDisabledContainer, WeaponEquippedList["zmhud.currentWeaponLocked"], function ( f10_arg0 )
		f1_arg0:updateElementState( HudZMWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "zmhud.currentWeaponLocked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMWeaponDisabledContainer --[[ @ 0]]
	HudZMEquipmentDisabledContainer = HudZMWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	WeaponEquippedList = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	HudZMEquipmentDisabledContainer( HudZMSpecialWeaponDisabledContainer, WeaponEquippedList["ZMHudGlobal.trials.disableGun"], function ( f11_arg0 )
		f1_arg0:updateElementState( HudZMWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "ZMHudGlobal.trials.disableGun"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMWeaponDisabledContainer --[[ @ 0]]
	HudZMEquipmentDisabledContainer = HudZMWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	WeaponEquippedList = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	HudZMEquipmentDisabledContainer( HudZMSpecialWeaponDisabledContainer, WeaponEquippedList["ZMHudGlobal.trials.infoHidden"], function ( f12_arg0 )
		f1_arg0:updateElementState( HudZMWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	HudZMWeaponDisabledContainer:subscribeToGlobalModel( f1_arg1, "PerController", "ZMHud.updateDisableWeapon", function ( model )
		local f13_local0 = HudZMWeaponDisabledContainer --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueGreaterThanOrEqualTo( f1_arg1, "ZMHud.updateDisableWeapon", 1 ) then
			UpdateElementState( self, "HudZMWeaponDisabledContainer", f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HudZMWeaponDisabledContainer ) --[[ @ 0]]
	self.HudZMWeaponDisabledContainer = HudZMWeaponDisabledContainer --[[ @ 0]]
	
	HudZMEquipmentDisabledContainer = CoD.Hud_ZM_Perks_Disabled_Container.new( f1_arg0, f1_arg1, 0, 0, 144, 255, 0, 0, 69.5, 179.5 ) --[[ @ 0]]
	HudZMEquipmentDisabledContainer:mergeStateConditions( {
		{
			stateName = "Hide",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableEquip", 0 ) and CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentEquipmentLocked", 0 )
			end
		},
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f15_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) then
					f15_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
					if f15_local0 then
						if not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "ZMHud.delayDisableEquipment", 1 ) then
							f15_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentEquipmentLocked", 1 ) --[[ @ 0]]
							if f15_local0 then
								f15_local0 = not CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableEquip", 0 ) --[[ @ 0]]
							end
						else
							f15_local0 = false --[[ @ 0]]
						end
					end
				else
					f15_local0 = false --[[ @ 0]]
				end
				return f15_local0
			end
		}
	} ) --[[ @ 0]]
	WeaponEquippedList = HudZMEquipmentDisabledContainer --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMEquipmentDisabledContainer.subscribeToModel --[[ @ 0]]
	local bgbAbilitySwirl = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer( WeaponEquippedList, bgbAbilitySwirl["ZMHudGlobal.trials.disableEquip"], function ( f16_arg0 )
		f1_arg0:updateElementState( HudZMEquipmentDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "ZMHudGlobal.trials.disableEquip"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponEquippedList = HudZMEquipmentDisabledContainer --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMEquipmentDisabledContainer.subscribeToModel --[[ @ 0]]
	bgbAbilitySwirl = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer( WeaponEquippedList, bgbAbilitySwirl["zmhud.currentEquipmentLocked"], function ( f17_arg0 )
		f1_arg0:updateElementState( HudZMEquipmentDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "zmhud.currentEquipmentLocked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponEquippedList = HudZMEquipmentDisabledContainer --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMEquipmentDisabledContainer.subscribeToModel --[[ @ 0]]
	bgbAbilitySwirl = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer( WeaponEquippedList, bgbAbilitySwirl["ZMHudGlobal.trials.infoHidden"], function ( f18_arg0 )
		f1_arg0:updateElementState( HudZMEquipmentDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponEquippedList = HudZMEquipmentDisabledContainer --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer = HudZMEquipmentDisabledContainer.subscribeToModel --[[ @ 0]]
	bgbAbilitySwirl = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer( WeaponEquippedList, bgbAbilitySwirl["ZMHud.delayDisableEquipment"], function ( f19_arg0 )
		f1_arg0:updateElementState( HudZMEquipmentDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "ZMHud.delayDisableEquipment"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( HudZMEquipmentDisabledContainer ) --[[ @ 0]]
	self.HudZMEquipmentDisabledContainer = HudZMEquipmentDisabledContainer --[[ @ 0]]
	
	HudZMSpecialWeaponDisabledContainer = CoD.Hud_ZM_Perks_Disabled_Container.new( f1_arg0, f1_arg1, 0, 0, 65, 176, 0, 0, 65, 175 ) --[[ @ 0]]
	HudZMSpecialWeaponDisabledContainer:mergeStateConditions( {
		{
			stateName = "Hide",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableSpecial", 0 ) and CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentSpecialLocked", 0 )
			end
		},
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f21_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) then
					f21_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztrials" ) --[[ @ 0]]
					if f21_local0 then
						if not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "ZMHud.delayDisableSpecial", 1 ) then
							f21_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "zmhud.currentSpecialLocked", 1 ) --[[ @ 0]]
							if f21_local0 then
								f21_local0 = not CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.disableSpecial", 0 ) --[[ @ 0]]
							end
						else
							f21_local0 = false --[[ @ 0]]
						end
					end
				else
					f21_local0 = false --[[ @ 0]]
				end
				return f21_local0
			end
		}
	} ) --[[ @ 0]]
	bgbAbilitySwirl = HudZMSpecialWeaponDisabledContainer --[[ @ 0]]
	WeaponEquippedList = HudZMSpecialWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	local AmmoWidgetZMAmmoModifier = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	WeaponEquippedList( bgbAbilitySwirl, AmmoWidgetZMAmmoModifier["ZMHudGlobal.trials.disableSpecial"], function ( f22_arg0 )
		f1_arg0:updateElementState( HudZMSpecialWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "ZMHudGlobal.trials.disableSpecial"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	bgbAbilitySwirl = HudZMSpecialWeaponDisabledContainer --[[ @ 0]]
	WeaponEquippedList = HudZMSpecialWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	AmmoWidgetZMAmmoModifier = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponEquippedList( bgbAbilitySwirl, AmmoWidgetZMAmmoModifier["zmhud.currentSpecialLocked"], function ( f23_arg0 )
		f1_arg0:updateElementState( HudZMSpecialWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "zmhud.currentSpecialLocked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	bgbAbilitySwirl = HudZMSpecialWeaponDisabledContainer --[[ @ 0]]
	WeaponEquippedList = HudZMSpecialWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	AmmoWidgetZMAmmoModifier = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	WeaponEquippedList( bgbAbilitySwirl, AmmoWidgetZMAmmoModifier["ZMHudGlobal.trials.infoHidden"], function ( f24_arg0 )
		f1_arg0:updateElementState( HudZMSpecialWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	bgbAbilitySwirl = HudZMSpecialWeaponDisabledContainer --[[ @ 0]]
	WeaponEquippedList = HudZMSpecialWeaponDisabledContainer.subscribeToModel --[[ @ 0]]
	AmmoWidgetZMAmmoModifier = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponEquippedList( bgbAbilitySwirl, AmmoWidgetZMAmmoModifier["ZMHud.delayDisableSpecial"], function ( f25_arg0 )
		f1_arg0:updateElementState( HudZMSpecialWeaponDisabledContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "ZMHud.delayDisableSpecial"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( HudZMSpecialWeaponDisabledContainer ) --[[ @ 0]]
	self.HudZMSpecialWeaponDisabledContainer = HudZMSpecialWeaponDisabledContainer --[[ @ 0]]
	
	WeaponEquippedList = LUI.UIList.new( f1_arg0, f1_arg1, 5, 0, nil, false, false, false, false ) --[[ @ 0]]
	WeaponEquippedList:setLeftRight( 0, 0, 357.5, 457.5 ) --[[ @ 0]]
	WeaponEquippedList:setTopBottom( 0, 0, 172, 182 ) --[[ @ 0]]
	WeaponEquippedList:setWidgetType( CoD.AmmoWidgetZM_WeaponListPip ) --[[ @ 0]]
	WeaponEquippedList:setHorizontalCount( 3 ) --[[ @ 0]]
	WeaponEquippedList:setSpacing( 5 ) --[[ @ 0]]
	WeaponEquippedList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	WeaponEquippedList:setDataSource( "AmmoWidgetZMEquippedWeaponsList" ) --[[ @ 0]]
	self:addElement( WeaponEquippedList ) --[[ @ 0]]
	self.WeaponEquippedList = WeaponEquippedList --[[ @ 0]]
	
	bgbAbilitySwirl = LUI.UIImage.new( 0.5, 0.5, -238.5, -117.5, 0, 0, 67, 186 ) --[[ @ 0]]
	bgbAbilitySwirl:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	bgbAbilitySwirl:setAlpha( 0 ) --[[ @ 0]]
	bgbAbilitySwirl:setZRot( 223 ) --[[ @ 0]]
	bgbAbilitySwirl:setScale( 1.65, 1.65 ) --[[ @ 0]]
	bgbAbilitySwirl:setImage( RegisterImage( @"uie_t7_core_hud_ammowidget_abilityswirl" ) ) --[[ @ 0]]
	bgbAbilitySwirl:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( bgbAbilitySwirl ) --[[ @ 0]]
	self.bgbAbilitySwirl = bgbAbilitySwirl --[[ @ 0]]
	
	AmmoWidgetZMAmmoModifier = CoD.AmmoWidgetZM_AmmoModifier.new( f1_arg0, f1_arg1, 0, 0, 530, 570, 0, 0, 24.5, 64.5 ) --[[ @ 0]]
	AmmoWidgetZMAmmoModifier:subscribeToGlobalModel( f1_arg1, "ZMHud", nil, function ( model )
		AmmoWidgetZMAmmoModifier:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AmmoWidgetZMAmmoModifier ) --[[ @ 0]]
	self.AmmoWidgetZMAmmoModifier = AmmoWidgetZMAmmoModifier --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "hiddenTutorial",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsAnyGameType( f1_arg1, "ztutorial" ) and CoD.ModelUtility.IsGlobalModelValueEqualTo( "hudItems.ztut.showSpecial", 0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local18 = self --[[ @ 0]]
	local f1_local19 = self.subscribeToModel --[[ @ 0]]
	local f1_local20 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local19( f1_local18, f1_local20["hudItems.ztut.showSpecial"], function ( f28_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f28_arg0:get(),
			modelName = "hudItems.ztut.showSpecial"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponEquippedList.id = "WeaponEquippedList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetZM.__resetProperties = function ( f29_arg0 )
	f29_arg0.AmmoWidgetZMAbilityOrWeaponContainer:completeAnimation() --[[ @ 0]]
	f29_arg0.specialWeaponLevel:completeAnimation() --[[ @ 0]]
	f29_arg0.bgbAbilitySwirl:completeAnimation() --[[ @ 0]]
	f29_arg0.bgbGlowOrangeOver:completeAnimation() --[[ @ 0]]
	f29_arg0.AmmoWidgetZMAbilityOrWeaponContainer:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.specialWeaponLevel:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.bgbAbilitySwirl:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	f29_arg0.bgbAbilitySwirl:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.bgbAbilitySwirl:setZRot( 223 ) --[[ @ 0]]
	f29_arg0.bgbGlowOrangeOver:setTopBottom( 0.5, 0.5, -165, 196 ) --[[ @ 0]]
	f29_arg0.bgbGlowOrangeOver:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetZM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	hiddenTutorial = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f31_arg0.AmmoWidgetZMAbilityOrWeaponContainer:completeAnimation() --[[ @ 0]]
			f31_arg0.AmmoWidgetZMAbilityOrWeaponContainer:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.AmmoWidgetZMAbilityOrWeaponContainer ) --[[ @ 0]]
			f31_arg0.specialWeaponLevel:completeAnimation() --[[ @ 0]]
			f31_arg0.specialWeaponLevel:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.specialWeaponLevel ) --[[ @ 0]]
		end,
		DefaultState = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f32_local0 = function ( f33_arg0 )
				local f33_local0 = function ( f34_arg0 )
					local f34_local0 = function ( f35_arg0 )
						local f35_local0 = function ( f36_arg0 )
							local f36_local0 = function ( f37_arg0 )
								local f37_local0 = function ( f38_arg0 )
									local f38_local0 = function ( f39_arg0 )
										f39_arg0:beginAnimation( 290 ) --[[ @ 0]]
										f39_arg0:setAlpha( 0 ) --[[ @ 0]]
										f39_arg0:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
									end
									 --[[ @ 0]]
									f38_arg0:beginAnimation( 119 ) --[[ @ 0]]
									f38_arg0:setAlpha( 0.7 ) --[[ @ 0]]
									f38_arg0:registerEventHandler( "transition_complete_keyframe", f38_local0 ) --[[ @ 0]]
								end
								 --[[ @ 0]]
								f37_arg0:beginAnimation( 160 ) --[[ @ 0]]
								f37_arg0:setAlpha( 0 ) --[[ @ 0]]
								f37_arg0:registerEventHandler( "transition_complete_keyframe", f37_local0 ) --[[ @ 0]]
							end
							 --[[ @ 0]]
							f36_arg0:beginAnimation( 99 ) --[[ @ 0]]
							f36_arg0:setAlpha( 0.7 ) --[[ @ 0]]
							f36_arg0:registerEventHandler( "transition_complete_keyframe", f36_local0 ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f35_arg0:beginAnimation( 110 ) --[[ @ 0]]
						f35_arg0:setAlpha( 0 ) --[[ @ 0]]
						f35_arg0:registerEventHandler( "transition_complete_keyframe", f35_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f34_arg0:beginAnimation( 220 ) --[[ @ 0]]
					f34_arg0:setAlpha( 0.7 ) --[[ @ 0]]
					f34_arg0:registerEventHandler( "transition_complete_keyframe", f34_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f32_arg0.bgbGlowOrangeOver:beginAnimation( 330 ) --[[ @ 0]]
				f32_arg0.bgbGlowOrangeOver:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
				f32_arg0.bgbGlowOrangeOver:registerEventHandler( "transition_complete_keyframe", f33_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.bgbGlowOrangeOver:completeAnimation() --[[ @ 0]]
			f32_arg0.bgbGlowOrangeOver:setTopBottom( 0.5, 0.5, -166, 195 ) --[[ @ 0]]
			f32_arg0.bgbGlowOrangeOver:setAlpha( 0 ) --[[ @ 0]]
			f32_local0( f32_arg0.bgbGlowOrangeOver ) --[[ @ 0]]
			local f32_local1 = function ( f40_arg0 )
				local f40_local0 = function ( f41_arg0 )
					local f41_local0 = function ( f42_arg0 )
						f42_arg0:beginAnimation( 340 ) --[[ @ 0]]
						f42_arg0:setAlpha( 1 ) --[[ @ 0]]
						f42_arg0:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f41_arg0:beginAnimation( 329 ) --[[ @ 0]]
					f41_arg0:setAlpha( 0 ) --[[ @ 0]]
					f41_arg0:registerEventHandler( "transition_complete_keyframe", f41_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f40_arg0:beginAnimation( 330 ) --[[ @ 0]]
				f40_arg0:setAlpha( 1 ) --[[ @ 0]]
				f40_arg0:registerEventHandler( "transition_complete_keyframe", f40_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.AmmoWidgetZMAbilityOrWeaponContainer:beginAnimation( 330 ) --[[ @ 0]]
			f32_arg0.AmmoWidgetZMAbilityOrWeaponContainer:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.AmmoWidgetZMAbilityOrWeaponContainer:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
			f32_arg0.AmmoWidgetZMAbilityOrWeaponContainer:registerEventHandler( "transition_complete_keyframe", f32_local1 ) --[[ @ 0]]
			local f32_local2 = function ( f43_arg0 )
				local f43_local0 = function ( f44_arg0 )
					local f44_local0 = function ( f45_arg0 )
						f45_arg0:beginAnimation( 340 ) --[[ @ 0]]
						f45_arg0:setAlpha( 1 ) --[[ @ 0]]
						f45_arg0:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f44_arg0:beginAnimation( 329 ) --[[ @ 0]]
					f44_arg0:setAlpha( 0 ) --[[ @ 0]]
					f44_arg0:registerEventHandler( "transition_complete_keyframe", f44_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f43_arg0:beginAnimation( 330 ) --[[ @ 0]]
				f43_arg0:setAlpha( 1 ) --[[ @ 0]]
				f43_arg0:registerEventHandler( "transition_complete_keyframe", f43_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.specialWeaponLevel:beginAnimation( 330 ) --[[ @ 0]]
			f32_arg0.specialWeaponLevel:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.specialWeaponLevel:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
			f32_arg0.specialWeaponLevel:registerEventHandler( "transition_complete_keyframe", f32_local2 ) --[[ @ 0]]
			local f32_local3 = function ( f46_arg0 )
				local f46_local0 = function ( f47_arg0 )
					f47_arg0:beginAnimation( 199 ) --[[ @ 0]]
					f47_arg0:setAlpha( 0 ) --[[ @ 0]]
					f47_arg0:setZRot( 360 ) --[[ @ 0]]
					f47_arg0:registerEventHandler( "transition_complete_keyframe", f32_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f32_arg0.bgbAbilitySwirl:beginAnimation( 330 ) --[[ @ 0]]
				f32_arg0.bgbAbilitySwirl:setAlpha( 1 ) --[[ @ 0]]
				f32_arg0.bgbAbilitySwirl:setZRot( 240 ) --[[ @ 0]]
				f32_arg0.bgbAbilitySwirl:registerEventHandler( "interrupted_keyframe", f32_arg0.clipInterrupted ) --[[ @ 0]]
				f32_arg0.bgbAbilitySwirl:registerEventHandler( "transition_complete_keyframe", f46_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f32_arg0.bgbAbilitySwirl:completeAnimation() --[[ @ 0]]
			f32_arg0.bgbAbilitySwirl:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
			f32_arg0.bgbAbilitySwirl:setAlpha( 0.01 ) --[[ @ 0]]
			f32_arg0.bgbAbilitySwirl:setZRot( 0 ) --[[ @ 0]]
			f32_local3( f32_arg0.bgbAbilitySwirl ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetZM.__onClose = function ( f48_arg0 )
	f48_arg0.WeaponAmmoCount:close() --[[ @ 0]]
	f48_arg0.MuleKick:close() --[[ @ 0]]
	f48_arg0.AATIcon:close() --[[ @ 0]]
	f48_arg0.aatText:close() --[[ @ 0]]
	f48_arg0.Equipment:close() --[[ @ 0]]
	f48_arg0.AmmoWidgetZMAbilityOrWeaponContainer:close() --[[ @ 0]]
	f48_arg0.specialWeaponLevel:close() --[[ @ 0]]
	f48_arg0.HudZMWeaponDisabledContainer:close() --[[ @ 0]]
	f48_arg0.HudZMEquipmentDisabledContainer:close() --[[ @ 0]]
	f48_arg0.HudZMSpecialWeaponDisabledContainer:close() --[[ @ 0]]
	f48_arg0.WeaponEquippedList:close() --[[ @ 0]]
	f48_arg0.AmmoWidgetZMAmmoModifier:close() --[[ @ 0]]
end
 --[[ @ 0]]
