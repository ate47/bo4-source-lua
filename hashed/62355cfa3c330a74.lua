-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:be52530c0ca57a1" ) --[[ @ 0]]
require( "ui/uieditor/menus/lobby/common/popups/vodviewer" ) --[[ @ 0]]
require( "x64:b8e2ca68acca1fd" ) --[[ @ 0]]
require( "ui/uieditor/widgets/backgroundframes/genericmenuframeidentity" ) --[[ @ 0]]
require( "x64:62cf4ad39ea2c548" ) --[[ @ 0]]
require( "x64:3599b7e2c6f2fec4" ) --[[ @ 0]]
require( "x64:6156d841adc02c80" ) --[[ @ 0]]

CoD.QuarterMasterMenu = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.QuarterMasterMenu = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "QuarterMasterMenu", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.InitGlobalModel( "ContractsForceUpdate", nil ) --[[ @ 0]]
	CoD.BaseUtility.InitPersistentControllerModelIfNotSet( f1_arg0, "LootStreamProgress.pagedRequestStatus", nil ) --[[ @ 0]]
	CoD.BlackMarketUtility.CreatePersistentPagedRequestModel( f1_arg0 ) --[[ @ 0]]
	CoD.BlackMarketUtility.ResetSignatureWeaponState( f1_local1 ) --[[ @ 0]]
	CoD.BlackMarketUtility.EnableItemshopTick( f1_arg0, self ) --[[ @ 0]]
	SetPerControllerTableProperty( f1_arg0, "inBlackMarket", true ) --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.BlackMarketUtility.ClearRNGModels( f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "playContrabandReveal", false ) --[[ @ 0]]
	CoD.BlackMarketUtility.EnableReserveDealsTick( f1_arg0, self ) --[[ @ 0]]
	CoD.BlackMarketUtility.EnableBribeMenuTick( f1_arg0, self ) --[[ @ 0]]
	self:setClass( CoD.QuarterMasterMenu ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ItemShopBackgroundBlur = CoD.ItemShopBackgroundBlur.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( ItemShopBackgroundBlur ) --[[ @ 0]]
	self.ItemShopBackgroundBlur = ItemShopBackgroundBlur --[[ @ 0]]
	
	local Frame = LUI.UIFrame.new( f1_local1, f1_arg0, 0, 0, false ) --[[ @ 0]]
	Frame:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	Frame:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local GenericMenuFrameIdentity = CoD.GenericMenuFrameIdentity.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.CommonHeader.subtitle.StageTitle:setText( LocalizeToUpperString( @"menu/black_market" ) ) --[[ @ 0]]
	GenericMenuFrameIdentity:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "lobbyTitle", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			GenericMenuFrameIdentity.CommonHeader.subtitle.subtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GenericMenuFrameIdentity ) --[[ @ 0]]
	self.GenericMenuFrameIdentity = GenericMenuFrameIdentity --[[ @ 0]]
	
	local TabBarContainer = CoD.ItemShopTabBarContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 1080 ) --[[ @ 0]]
	TabBarContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	TabBarContainer:registerEventHandler( "list_active_changed", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "category", "inventory" ) then
			SetElementState( self, self.ItemShopBackgroundBlur, f1_arg0, "DefaultState" ) --[[ @ 0]]
			CoD.BlackMarketUtility.SetQuarterMasterMenuCurrentTab( element, f1_arg0, f1_local1 ) --[[ @ 0]]
			CoD.MetricsUtility.BlackMarketTabChange( f1_local1, element, f1_arg0 ) --[[ @ 0]]
		elseif not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg0, "category", "inventory" ) then
			SetElementState( self, self.ItemShopBackgroundBlur, f1_arg0, "Hidden" ) --[[ @ 0]]
			CoD.BlackMarketUtility.SetQuarterMasterMenuCurrentTab( element, f1_arg0, f1_local1 ) --[[ @ 0]]
			CoD.MetricsUtility.BlackMarketTabChange( f1_local1, element, f1_arg0 ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( TabBarContainer ) --[[ @ 0]]
	self.TabBarContainer = TabBarContainer --[[ @ 0]]
	
	local SpinnerLoadingAnimation = CoD.SpinnerLoadingAnimation.new( f1_local1, f1_arg0, 0, 0, 930, 990, 0, 0, 510, 570 ) --[[ @ 0]]
	SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SpinnerLoadingAnimation ) --[[ @ 0]]
	self.SpinnerLoadingAnimation = SpinnerLoadingAnimation --[[ @ 0]]
	
	Frame:linkToElementModel( TabBarContainer.FETabBar.Tabs.grid, "frameWidget", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Frame:changeFrameWidget( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Processing",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg0, "LootStreamProgress.pagedRequestStatus", "Requested" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["LootStreamProgress.pagedRequestStatus"], function ( f7_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f7_arg0:get(),
			modelName = "LootStreamProgress.pagedRequestStatus"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["LootStreamProgress.pagedRequestStatus"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["lobbyRoot.lobbyNetworkMode"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = DataSources.AutoEvents.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.cycled, function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.LastInput, function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "occlusion_change", function ( self, event )
		local f13_local0 = nil --[[ @ 0]]
		if self.OcclusionChange then
			f13_local0 = self:OcclusionChange( event ) --[[ @ 0]]
		elseif self.super.OcclusionChange then
			f13_local0 = self.super:OcclusionChange( event ) --[[ @ 0]]
		end
		UpdateAllMenuButtonPrompts( f1_local1, f1_arg0 ) --[[ @ 0]]
		if not f13_local0 then
			f13_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f13_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "list_active_changed", function ( self, event )
		local f14_local0 = nil --[[ @ 0]]
		CoD.BlackMarketUtility.MarkTabAsSeen( f1_arg0, f1_local1 ) --[[ @ 0]]
		return f14_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		PlaySoundAlias( "uin_cmn_backout" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], "ui_contextual_3", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsModelValueEqualTo( controller, "LootStreamProgress.pagedRequestStatus", "Requested" ) and IsCommerceEnabledOnPC() and AreCodPointsEnabled( controller ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) and not IsGameTrial() then
			OpenPopup( self, "PurchaseCodPoints", controller ) --[[ @ 0]]
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsModelValueEqualTo( controller, "LootStreamProgress.pagedRequestStatus", "Requested" ) and IsCommerceEnabledOnPC() and AreCodPointsEnabled( controller ) and not CoD.BlackMarketUtility.IsMenuOccluded( menu ) and not IsGameTrial() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xby_pstriangle"], @"hash_263D5409DEC36DFA", nil, "ui_contextual_3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_rtrig"], nil, function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"luibutton"][@"lui_key_rtrig"] ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) then
			CoD.BlackMarketUtility.PageStreamHoldUpdateAction( menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "increment" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"luibutton"][@"lui_key_rtrig"] ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"], nil, function ( element, menu, controller, model )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"luibutton"][@"lui_key_ltrig"] ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) then
			CoD.BlackMarketUtility.PageStreamHoldUpdateAction( menu ) --[[ @ 0]]
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "decrement" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.BlackMarketUtility.IsPageStreamHoldActionReady( menu, Enum[@"luibutton"][@"lui_key_ltrig"] ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], nil, function ( element, menu, controller, model )
		if IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and CoD.BlackMarketUtility.ShowPurchaseTiersPrompt( controller, self.Frame, "PurchaseTiers" ) and AreCodPointsEnabled( controller ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) and not IsGameTrial() then
			CoD.BlackMarketUtility.SetHighlightedPurchaseTier( controller, self.Frame ) --[[ @ 0]]
			CoD.BlackMarketUtility.OpenPurchaseTiersConfirmation( controller, self, self.Frame ) --[[ @ 0]]
			PlaySoundSetSound( self, "action" ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and AreCodPointsEnabled( controller ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) and not IsGameTrial() then
			CoD.BlackMarketUtility.SetHighlightedPurchaseTier( controller, self.Frame ) --[[ @ 0]]
			CoD.BlackMarketUtility.OpenPurchaseTiersConfirmation( controller, self, self.Frame ) --[[ @ 0]]
			PlaySoundSetSound( self, "action" ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "BlackjackReserveFrame" ) and CoD.BlackMarketUtility.CanShowReservesPreview( controller ) and IsGamepad( controller ) then
			CoD.BlackMarketUtility.PlayReservesPreviewVideo( controller, menu, false, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and CoD.BlackMarketUtility.ShowPurchaseTiersPrompt( controller, self.Frame, "PurchaseTiers" ) and AreCodPointsEnabled( controller ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) and not IsGameTrial() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_5FAF2C4773992641", nil, nil ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) and AreCodPointsEnabled( controller ) and IsPerControllerTablePropertyValue( controller, "allowTierPurchase", true ) and not IsGameTrial() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif IsDesiredFrameWidget( controller, self.Frame, "BlackjackReserveFrame" ) and CoD.BlackMarketUtility.CanShowReservesPreview( controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbx_pssquare"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_remove", function ( element, menu, controller, model )
		if IsDesiredFrameWidget( controller, self.Frame, "BlackjackReserveFrame" ) and CoD.BlackMarketUtility.CanShowReservesPreview( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.BlackMarketUtility.PlayReservesPreviewVideo( controller, menu, false, true ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueNil( self.Frame, controller, "movieName" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "movieName", "" ) and not IsMenuInState( menu, "Processing" ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			CoD.BlackMarketUtility.SetupSupplyChainMovie( self.Frame, controller, "" ) --[[ @ 0]]
			DelayOpenOverlay( menu, "VoDViewer", controller, {
				fullscreen = true
			} ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "allowFrozenMoment", true ) and not IsMenuInState( menu, "Processing" ) then
			SetControllerModelValue( controller, "LootStreamProgress.playAnimation", false ) --[[ @ 0]]
			OpenOverlay( self, "MPSpecialistHUBPreviewMoment", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDesiredFrameWidget( controller, self.Frame, "BlackjackReserveFrame" ) and CoD.BlackMarketUtility.CanShowReservesPreview( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueNil( self.Frame, controller, "movieName" ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "movieName", "" ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "allowFrozenMoment", true ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_remove" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_rstick_pressed"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.CanPlayGesture( self.Frame ) and not IsMenuInState( menu, "Processing" ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlayGesture( self, self.Frame, controller ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "ItemShopFrame" ) and CoD.BlackMarketUtility.CanPlayGesture( self.Frame ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.PlayGesture( self, self.Frame, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.CanPlayGesture( self.Frame ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rstick_pressed"], @"hash_0", nil, "ui_contextual_2" ) --[[ @ 0]]
			return false
		elseif IsDesiredFrameWidget( controller, self.Frame, "ItemShopFrame" ) and CoD.BlackMarketUtility.CanPlayGesture( self.Frame ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rstick_pressed"], @"hash_0", nil, "ui_contextual_2" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_back"], "ui_contextual_1", function ( element, menu, controller, model )
		if not IsMenuInState( menu, "Processing" ) and CoD.BlackMarketUtility.CanToggleSignatureWeapon( self.Frame ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.ToggleSignatureWeapon( menu, controller, self.Frame ) --[[ @ 0]]
			return true
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "allowTogglePreview", true ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "itemCategory", @"signature_weapon" ) then
			CoD.BlackMarketUtility.ToggleCharacterModelCamera( menu, self.Frame, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsMenuInState( menu, "Processing" ) and CoD.BlackMarketUtility.CanToggleSignatureWeapon( self.Frame ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		elseif IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "allowTogglePreview", true ) and not CoD.BlackMarketUtility.IsSupplyChainActiveWidgetModelValueEqualTo( self.Frame, controller, "itemCategory", @"signature_weapon" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_0", nil, "ui_contextual_1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], "MWHEELDOWN", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) then
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "increment" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_none"], "MWHEELUP", function ( element, menu, controller, model )
		if not IsRepeatButtonPress( model ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) then
			PlaySoundAlias( "uin_trigger_slide" ) --[[ @ 0]]
			SetFocusedTierModelValue( controller, "5", "decrement" ) --[[ @ 0]]
			CoD.PlayerRoleUtility.StopGesturePreview( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsRepeatButtonPress( nil ) and IsDesiredFrameWidget( controller, self.Frame, "SupplyChainFrame" ) and not IsMenuInState( menu, "Processing" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		if IsPC() then
			CoD.PlayerRoleUtility.StopGesturePreview( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.BreadcrumbUtility.UpdateStartMenuBreadcrumb( f1_arg0 ) --[[ @ 0]]
			SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
			ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
			CoD.LobbyUtility.SetMenuControllerRestriction( self, f1_arg0, 0 ) --[[ @ 0]]
			SetPerControllerTableProperty( f1_arg0, "inBlackMarket", false ) --[[ @ 0]]
			CoD.MetricsUtility.BlackMarketEntryEvent( f1_arg0, f1_local1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.OnQuitBlackMarketCustomFunction( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.BlackMarketUtility.ClearBlackMarketMenuForTest( f1_arg0 ) --[[ @ 0]]
		else
			CoD.PlayerRoleUtility.StopGesturePreview( f1_local1, f1_arg0 ) --[[ @ 0]]
			CoD.BreadcrumbUtility.UpdateStartMenuBreadcrumb( f1_arg0 ) --[[ @ 0]]
			SendClientScriptMenuChangeNotify( f1_arg0, f1_local1, false ) --[[ @ 0]]
			ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
			CoD.LobbyUtility.SetMenuControllerRestriction( self, f1_arg0, 0 ) --[[ @ 0]]
			SetPerControllerTableProperty( f1_arg0, "inBlackMarket", false ) --[[ @ 0]]
			CoD.MetricsUtility.BlackMarketEntryEvent( f1_arg0, f1_local1 ) --[[ @ 0]]
			CoD.BlackMarketUtility.ClearBlackMarketMenuForTest( f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Frame.id = "Frame" --[[ @ 0]]
	GenericMenuFrameIdentity:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	GenericMenuFrameIdentity.id = "GenericMenuFrameIdentity" --[[ @ 0]]
	TabBarContainer.id = "TabBarContainer" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = Frame --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local8 = self --[[ @ 0]]
	if not IsBooleanDvarSet( "ui_enableItemShop" ) and not IsBooleanDvarSet( "ui_enableContracts" ) then
		SetElementState( self, self.TabBarContainer, f1_arg0, "Hidden" ) --[[ @ 0]]
	else
		CoD.LobbyUtility.SetMenuControllerRestriction( self, f1_arg0, 1 ) --[[ @ 0]]
		CoD.BlackMarketUtility.QuarterMasterFrameChangeActions( f1_local1, self.Frame, f1_arg0 ) --[[ @ 0]]
		CoD.BlackMarketUtility.PlayBlackMarketFrontendMusic( self, f1_arg0 ) --[[ @ 0]]
		AutoSelectCodPointCategory( self, f1_arg0 ) --[[ @ 0]]
		CoD.BlackMarketUtility.SetupPageStreamHoldActionReadyCheck( f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_ltrig"], Enum[@"luibutton"][@"lui_key_rtrig"] ) --[[ @ 0]]
		CoD.BlackMarketUtility.ShowFreeBundlePopupIfNeeded( self.Frame, f1_arg0 ) --[[ @ 0]]
		CoD.BlackMarketUtility.SetBlackMarketMenuForTest( f1_arg0, f1_local1 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.QuarterMasterMenu.__resetProperties = function ( f36_arg0 )
	f36_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
	f36_arg0.SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.QuarterMasterMenu.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f37_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
			f37_arg0.SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.SpinnerLoadingAnimation ) --[[ @ 0]]
		end
	},
	Processing = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f38_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
			f38_arg0.SpinnerLoadingAnimation:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.SpinnerLoadingAnimation ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.QuarterMasterMenu.__onClose = function ( f39_arg0 )
	f39_arg0.Frame:close() --[[ @ 0]]
	f39_arg0.ItemShopBackgroundBlur:close() --[[ @ 0]]
	f39_arg0.GenericMenuFrameIdentity:close() --[[ @ 0]]
	f39_arg0.TabBarContainer:close() --[[ @ 0]]
	f39_arg0.SpinnerLoadingAnimation:close() --[[ @ 0]]
end
 --[[ @ 0]]
