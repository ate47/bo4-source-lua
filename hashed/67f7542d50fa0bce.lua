-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/cac/newbreadcrumbcount" ) --[[ @ 0]]
require( "ui/uieditor/widgets/specialist/specialistpersonalizationbuttonoptioninternal" ) --[[ @ 0]]

CoD.SpecialistPersonalizationButtonOption = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SpecialistPersonalizationButtonOption.__defaultWidth = 393 --[[ @ 0]]
CoD.SpecialistPersonalizationButtonOption.__defaultHeight = 69 --[[ @ 0]]
CoD.SpecialistPersonalizationButtonOption.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SpecialistPersonalizationButtonOption ) --[[ @ 0]]
	self.id = "SpecialistPersonalizationButtonOption" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonOptionInternal = CoD.SpecialistPersonalizationButtonOptionInternal.new( f1_arg0, f1_arg1, 0, 0, 0, 393, 0, 0, 0, 69 ) --[[ @ 0]]
	ButtonOptionInternal:linkToElementModel( self, nil, false, function ( model )
		ButtonOptionInternal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonOptionInternal:linkToElementModel( self, "name", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ButtonOptionInternal.Header:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ButtonOptionInternal ) --[[ @ 0]]
	self.ButtonOptionInternal = ButtonOptionInternal --[[ @ 0]]
	
	local breadcrumbCount = CoD.NewBreadcrumbCount.new( f1_arg0, f1_arg1, 1, 1, -31, -4, 0, 0, 0, 27 ) --[[ @ 0]]
	breadcrumbCount:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "breadcrumbCount", 0 )
			end
		}
	} ) --[[ @ 0]]
	breadcrumbCount:linkToElementModel( breadcrumbCount, "breadcrumbCount", true, function ( model )
		f1_arg0:updateElementState( breadcrumbCount, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "breadcrumbCount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	breadcrumbCount:linkToElementModel( self, "breadcrumb", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			breadcrumbCount:setModel( f6_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( breadcrumbCount ) --[[ @ 0]]
	self.breadcrumbCount = breadcrumbCount --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "disabled" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "disabled", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ButtonOptionInternal.id = "ButtonOptionInternal" --[[ @ 0]]
	self.__defaultFocus = ButtonOptionInternal --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.SpecialistPersonalizationButtonOption.__resetProperties = function ( f9_arg0 )
	f9_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
	f9_arg0.ButtonOptionInternal:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.ButtonOptionInternal:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.ButtonOptionInternal:setScale( 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SpecialistPersonalizationButtonOption.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		ChildFocus = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f11_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f11_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f12_local0 = function ( f13_arg0 )
				f12_arg0.ButtonOptionInternal:beginAnimation( 100, Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
				f12_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
				f12_arg0.ButtonOptionInternal:registerEventHandler( "interrupted_keyframe", f12_arg0.clipInterrupted ) --[[ @ 0]]
				f12_arg0.ButtonOptionInternal:registerEventHandler( "transition_complete_keyframe", f12_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f12_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f12_arg0.ButtonOptionInternal:setScale( 1, 1 ) --[[ @ 0]]
			f12_local0( f12_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f14_local0 = function ( f15_arg0 )
				f14_arg0.ButtonOptionInternal:beginAnimation( 100, Enum[@"luitween"][@"luitween_ease_out"] ) --[[ @ 0]]
				f14_arg0.ButtonOptionInternal:setScale( 1, 1 ) --[[ @ 0]]
				f14_arg0.ButtonOptionInternal:registerEventHandler( "interrupted_keyframe", f14_arg0.clipInterrupted ) --[[ @ 0]]
				f14_arg0.ButtonOptionInternal:registerEventHandler( "transition_complete_keyframe", f14_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f14_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f14_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
			f14_local0( f14_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		Active = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f16_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f16_arg0.ButtonOptionInternal:setAlpha( 1 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		ActiveAndChildFocus = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f17_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		ActiveToActiveAndChildFocus = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f18_local0 = function ( f19_arg0 )
				f18_arg0.ButtonOptionInternal:beginAnimation( 100 ) --[[ @ 0]]
				f18_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
				f18_arg0.ButtonOptionInternal:registerEventHandler( "interrupted_keyframe", f18_arg0.clipInterrupted ) --[[ @ 0]]
				f18_arg0.ButtonOptionInternal:registerEventHandler( "transition_complete_keyframe", f18_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f18_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f18_arg0.ButtonOptionInternal:setAlpha( 1 ) --[[ @ 0]]
			f18_arg0.ButtonOptionInternal:setScale( 1, 1 ) --[[ @ 0]]
			f18_local0( f18_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end,
		ActiveAndChildFocusToActive = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f20_local0 = function ( f21_arg0 )
				f20_arg0.ButtonOptionInternal:beginAnimation( 100 ) --[[ @ 0]]
				f20_arg0.ButtonOptionInternal:setScale( 1, 1 ) --[[ @ 0]]
				f20_arg0.ButtonOptionInternal:registerEventHandler( "interrupted_keyframe", f20_arg0.clipInterrupted ) --[[ @ 0]]
				f20_arg0.ButtonOptionInternal:registerEventHandler( "transition_complete_keyframe", f20_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f20_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f20_arg0.ButtonOptionInternal:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.ButtonOptionInternal:setScale( 1.03, 1.12 ) --[[ @ 0]]
			f20_local0( f20_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f22_arg0.ButtonOptionInternal:completeAnimation() --[[ @ 0]]
			f22_arg0.ButtonOptionInternal:setRGB( 0.64, 0.64, 0.64 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ButtonOptionInternal ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.SpecialistPersonalizationButtonOption.__clipsPerState.DefaultState.Active = nil --[[ @ 0]]
	CoD.SpecialistPersonalizationButtonOption.__clipsPerState.DefaultState.ActiveAndChildFocus = nil --[[ @ 0]]
	CoD.SpecialistPersonalizationButtonOption.__clipsPerState.DefaultState.ActiveToActiveAndChildFocus = nil --[[ @ 0]]
	CoD.SpecialistPersonalizationButtonOption.__clipsPerState.DefaultState.ActiveAndChildFocusToActive = nil --[[ @ 0]]
end
CoD.SpecialistPersonalizationButtonOption.__onClose = function ( f23_arg0 )
	f23_arg0.ButtonOptionInternal:close() --[[ @ 0]]
	f23_arg0.breadcrumbCount:close() --[[ @ 0]]
end
 --[[ @ 0]]
