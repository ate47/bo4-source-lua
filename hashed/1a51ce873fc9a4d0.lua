-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:43a3f25394a55e03" ) --[[ @ 0]]
require( "x64:4f7f8755bdbe6239" ) --[[ @ 0]]
require( "x64:50e8dbd840828bc3" ) --[[ @ 0]]
require( "x64:4f12de8d76142ccd" ) --[[ @ 0]]
require( "x64:1ac7ca8b9e6b6c7a" ) --[[ @ 0]]

CoD.StartMenu_Inventory_WeaponsDisplayPC = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.__defaultWidth = 449 --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.__defaultHeight = 443 --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.SetUseStencil( self ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Inventory_WeaponsDisplayPC ) --[[ @ 0]]
	self.id = "StartMenu_Inventory_WeaponsDisplayPC" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 1, 1, -449, 1, 0, 0, 0, 251 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 1, 1, -449, 1, 0, 0, 0, 251 ) --[[ @ 0]]
	Background:setRGB( 0.04, 0.04, 0.04 ) --[[ @ 0]]
	Background:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local TiledBacking = LUI.UIImage.new( 1, 1, -449, 1, 0, 0, 0, 433 ) --[[ @ 0]]
	TiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	TiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBacking ) --[[ @ 0]]
	self.TiledBacking = TiledBacking --[[ @ 0]]
	
	local GridTiled = LUI.UIImage.new( 1, 1, -448.5, 0.5, 0, 0, 32, 443 ) --[[ @ 0]]
	GridTiled:setAlpha( 0.55 ) --[[ @ 0]]
	GridTiled:setScale( 1, 1 ) --[[ @ 0]]
	GridTiled:setImage( RegisterImage( @"uie_ui_menu_store_bg_grid" ) ) --[[ @ 0]]
	GridTiled:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	GridTiled:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	GridTiled:setupNineSliceShader( 64, 64 ) --[[ @ 0]]
	self:addElement( GridTiled ) --[[ @ 0]]
	self.GridTiled = GridTiled --[[ @ 0]]
	
	local WeaponVignette = CoD.StartMenu_Inventory_CurrentWeaponPC_Vignette.new( f1_arg0, f1_arg1, 1, 1, -419, -29, 0, 0, 40, 195 ) --[[ @ 0]]
	WeaponVignette:linkToElementModel( self, "icon", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			WeaponVignette.CurrentWeaponImage:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WeaponVignette.CurrentWeaponName.__CurrentWeaponName = function ( f3_arg0 )
		local f3_local0 = f3_arg0:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			WeaponVignette.CurrentWeaponName:setText( ToUpper( CoD.WZUtility.AddAmmoString( f1_arg1, self, f3_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	WeaponVignette:linkToElementModel( self, "name", true, WeaponVignette.CurrentWeaponName.__CurrentWeaponName ) --[[ @ 0]]
	WeaponVignette.CurrentWeaponName.__CurrentWeaponName_FullPath = function ()
		local f4_local0 = self:getModel() --[[ @ 0]]
		if f4_local0 then
			f4_local0 = self:getModel() --[[ @ 0]]
			f4_local0 = f4_local0.name --[[ @ 0]]
		end
		if f4_local0 then
			WeaponVignette.CurrentWeaponName.__CurrentWeaponName( f4_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	WeaponVignette:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.WZUtility.SetElementModelToElementWeaponModel( f1_arg1, element, self ) --[[ @ 0]]
		CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponVignette, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		CoD.WZUtility.SwitchToNextWeapon( controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponVignette, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "MOUSE1", function ( element, menu, controller, model )
		CoD.WZUtility.SwitchToNextWeapon( controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( WeaponVignette ) --[[ @ 0]]
	self.WeaponVignette = WeaponVignette --[[ @ 0]]
	
	local GamepadText = LUI.UIText.new( 1, 1, -449, 1, 0, 0, 0, 21 ) --[[ @ 0]]
	GamepadText:setRGB( 0.55, 0.54, 0.49 ) --[[ @ 0]]
	GamepadText:setAlpha( 0 ) --[[ @ 0]]
	GamepadText:setText( LocalizeToUpperString( @"hash_6023D1BB78E8AA44" ) ) --[[ @ 0]]
	GamepadText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	GamepadText:setLetterSpacing( 4 ) --[[ @ 0]]
	GamepadText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	GamepadText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( GamepadText ) --[[ @ 0]]
	self.GamepadText = GamepadText --[[ @ 0]]
	
	local SwitchWeaponImage = LUI.UIImage.new( 1, 1, -72, -51, 0, 0, 0, 21 ) --[[ @ 0]]
	SwitchWeaponImage:setAlpha( 0 ) --[[ @ 0]]
	SwitchWeaponImage:subscribeToGlobalModel( f1_arg1, "Controller", "alt2_button_image", function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			SwitchWeaponImage:setImage( RegisterImage( f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SwitchWeaponImage ) --[[ @ 0]]
	self.SwitchWeaponImage = SwitchWeaponImage --[[ @ 0]]
	
	local WeaponHeader = CoD.StartMenu_Inventory_SwitchWeaponTab_Activate.new( f1_arg0, f1_arg1, 1, 1, -448, 0, 0, 0, 0, 32 ) --[[ @ 0]]
	WeaponHeader:mergeStateConditions( {
		{
			stateName = "ClosedGamePad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "WarzoneInventory", "currentWeaponIndex", self.weaponId )
			end
		},
		{
			stateName = "Closed",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "WarzoneInventory", "currentWeaponIndex", self.weaponId )
			end
		}
	} ) --[[ @ 0]]
	WeaponHeader:appendEventHandler( "input_source_changed", function ( f13_arg0, f13_arg1 )
		f13_arg1.menu = f13_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( WeaponHeader, f13_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local WeaponAttachmentsSmall = WeaponHeader --[[ @ 0]]
	local WeaponAttachments = WeaponHeader.subscribeToModel --[[ @ 0]]
	local DropAndDetachButtonPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponAttachments( WeaponAttachmentsSmall, DropAndDetachButtonPC.LastInput, function ( f14_arg0 )
		f1_arg0:updateElementState( WeaponHeader, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponAttachmentsSmall = WeaponHeader --[[ @ 0]]
	WeaponAttachments = WeaponHeader.subscribeToModel --[[ @ 0]]
	DropAndDetachButtonPC = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	WeaponAttachments( WeaponAttachmentsSmall, DropAndDetachButtonPC.currentWeaponIndex, function ( f15_arg0 )
		f1_arg0:updateElementState( WeaponHeader, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "currentWeaponIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponHeader:linkToElementModel( WeaponHeader, "hasAttachments", true, function ( model, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WeaponHeader:registerEventHandler( "gain_focus", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f17_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f17_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f17_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponHeader, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		CoD.WZUtility.SwitchToNextWeapon( controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponHeader, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponHeader, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "F", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( self, controller, "hasAttachments", 0 ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotAndDetachNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and CoD.ModelUtility.IsSelfModelValueEqualTo( self, controller, "hasAttachments", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_294D6AF2F50BEFEF", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_WeaponHeader = function ( f24_arg0, f24_arg1, f24_arg2, f24_arg3 )
		CoD.WZUtility.SetWeaponHeaderTexts( self, WeaponHeader ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_WeaponHeader ) --[[ @ 0]]
	WeaponHeader:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_2FFD03BF8361AC75", function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f25_arg2 ) then
			return function ( f26_arg0, f26_arg1, f26_arg2, f26_arg3 )
				CoD.WZUtility.SendInventoryDropWeaponInSlotNotify( f26_arg2, self.weaponId ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponHeader:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_294D6AF2F50BEFEF", function ( f27_arg0, f27_arg1, f27_arg2, f27_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f27_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualTo( self, f27_arg2, "hasAttachments", 1 ) then
			return function ( f28_arg0, f28_arg1, f28_arg2, f28_arg3 )
				CoD.WZUtility.SendInventoryDropWeaponInSlotAndDetachNotify( f28_arg2, self.weaponId ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( WeaponHeader ) --[[ @ 0]]
	self.WeaponHeader = WeaponHeader --[[ @ 0]]
	
	WeaponAttachments = LUI.UIList.new( f1_arg0, f1_arg1, 40, 0, nil, false, false, false, false ) --[[ @ 0]]
	WeaponAttachments:setLeftRight( 1, 1, -404, -48 ) --[[ @ 0]]
	WeaponAttachments:setTopBottom( 0, 0, 195.5, 415.5 ) --[[ @ 0]]
	WeaponAttachments:setScale( 0.9, 0.9 ) --[[ @ 0]]
	WeaponAttachments:setWidgetType( CoD.WarzoneInventoryMenuItem ) --[[ @ 0]]
	WeaponAttachments:setHorizontalCount( 3 ) --[[ @ 0]]
	WeaponAttachments:setVerticalCount( 2 ) --[[ @ 0]]
	WeaponAttachments:setSpacing( 40 ) --[[ @ 0]]
	WeaponAttachments:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	WeaponAttachments:appendEventHandler( "input_source_changed", function ( f29_arg0, f29_arg1 )
		f29_arg1.menu = f29_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f29_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachments --[[ @ 0]]
	WeaponAttachmentsSmall = WeaponAttachments.subscribeToModel --[[ @ 0]]
	local DropButtonPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponAttachmentsSmall( DropAndDetachButtonPC, DropButtonPC.LastInput, function ( f30_arg0, f30_arg1 )
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponAttachments:linkToElementModel( WeaponAttachments, "id", true, function ( model, f31_arg1 )
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachments --[[ @ 0]]
	WeaponAttachmentsSmall = WeaponAttachments.subscribeToModel --[[ @ 0]]
	DropButtonPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponAttachmentsSmall( DropAndDetachButtonPC, DropButtonPC["hudItems.inventory.count"], function ( f32_arg0, f32_arg1 )
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachments --[[ @ 0]]
	WeaponAttachmentsSmall = WeaponAttachments.subscribeToModel --[[ @ 0]]
	DropButtonPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponAttachmentsSmall( DropAndDetachButtonPC, DropButtonPC["hudItems.inventory.filledSlots"], function ( f33_arg0, f33_arg1 )
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachments --[[ @ 0]]
	WeaponAttachmentsSmall = WeaponAttachments.subscribeToModel --[[ @ 0]]
	DropButtonPC = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WeaponAttachmentsSmall( DropAndDetachButtonPC, DropButtonPC["hudItems.inventory.shard0.stackCount"], function ( f34_arg0, f34_arg1 )
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponAttachments:linkToElementModel( WeaponAttachments, "canTransferAttachment", true, function ( model, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WeaponAttachments:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f36_local0 = nil --[[ @ 0]]
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() then
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
			CoD.WZUtility.SendInventoryItemFocusNotify( f1_arg1, element ) --[[ @ 0]]
		else
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		end
		return f36_local0
	end ) --[[ @ 0]]
	WeaponAttachments:registerEventHandler( "gain_focus", function ( element, event )
		local f37_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f37_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f37_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		return f37_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], "ui_confirm", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"], "ui_contextual_1", function ( element, menu, controller, model )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_5234736A1C101BE7", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_2D409BB4890E1387", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachments, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipOnWeaponNotify( controller, element, menu, false, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_5234736A1C101BE7", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE3" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_2D409BB4890E1387", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	WeaponAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_46099347F51AF260", function ( f56_arg0, f56_arg1, f56_arg2, f56_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f56_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f56_arg0, f56_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( f56_arg2 ) then
			return function ( f57_arg0, f57_arg1, f57_arg2, f57_arg3 )
				CoD.WZUtility.SendInventoryDetachNotify( f57_arg2, f57_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_2FFD03BF8361AC75", function ( f58_arg0, f58_arg1, f58_arg2, f58_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f58_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f58_arg0, f58_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f59_arg0, f59_arg1, f59_arg2, f59_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f59_arg2, f59_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_5234736A1C101BE7", function ( f60_arg0, f60_arg1, f60_arg2, f60_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f60_arg0, f60_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f60_arg2 ) and IsMouseOrKeyboard( f60_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f60_arg0, f60_arg2, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			return function ( f61_arg0, f61_arg1, f61_arg2, f61_arg3 )
				CoD.WZUtility.SendInventoryEquipOnWeaponNotify( f61_arg2, f61_arg0, f61_arg1, false, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachments:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_2D409BB4890E1387", function ( f62_arg0, f62_arg1, f62_arg2, f62_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f62_arg0, f62_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f62_arg2 ) and IsMouseOrKeyboard( f62_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f62_arg0, f62_arg2, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			return function ( f63_arg0, f63_arg1, f63_arg2, f63_arg3 )
				CoD.WZUtility.SendInventoryEquipOnWeaponNotify( f63_arg2, f63_arg0, f63_arg1, false, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( WeaponAttachments ) --[[ @ 0]]
	self.WeaponAttachments = WeaponAttachments --[[ @ 0]]
	
	WeaponAttachmentsSmall = LUI.UIList.new( f1_arg0, f1_arg1, 12, 0, nil, false, false, false, false ) --[[ @ 0]]
	WeaponAttachmentsSmall:setLeftRight( 1, 1, -406, -46 ) --[[ @ 0]]
	WeaponAttachmentsSmall:setTopBottom( 0, 0, 213, 263 ) --[[ @ 0]]
	WeaponAttachmentsSmall:setWidgetType( CoD.WarzoneInventoryMenuItemAttachmentSmall ) --[[ @ 0]]
	WeaponAttachmentsSmall:setHorizontalCount( 6 ) --[[ @ 0]]
	WeaponAttachmentsSmall:setSpacing( 12 ) --[[ @ 0]]
	WeaponAttachmentsSmall:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	WeaponAttachmentsSmall:appendEventHandler( "input_source_changed", function ( f64_arg0, f64_arg1 )
		f64_arg1.menu = f64_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f64_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropButtonPC = WeaponAttachmentsSmall --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachmentsSmall.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	DropAndDetachButtonPC( DropButtonPC, f1_local13.LastInput, function ( f65_arg0, f65_arg1 )
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f65_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponAttachmentsSmall:linkToElementModel( WeaponAttachmentsSmall, "id", true, function ( model, f66_arg1 )
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f66_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropButtonPC = WeaponAttachmentsSmall --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachmentsSmall.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	DropAndDetachButtonPC( DropButtonPC, f1_local13["hudItems.inventory.count"], function ( f67_arg0, f67_arg1 )
		CoD.Menu.UpdateButtonShownState( f67_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f67_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f67_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f67_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropButtonPC = WeaponAttachmentsSmall --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachmentsSmall.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	DropAndDetachButtonPC( DropButtonPC, f1_local13["hudItems.inventory.filledSlots"], function ( f68_arg0, f68_arg1 )
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f68_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropButtonPC = WeaponAttachmentsSmall --[[ @ 0]]
	DropAndDetachButtonPC = WeaponAttachmentsSmall.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	DropAndDetachButtonPC( DropButtonPC, f1_local13["hudItems.inventory.shard0.stackCount"], function ( f69_arg0, f69_arg1 )
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f69_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponAttachmentsSmall:linkToElementModel( WeaponAttachmentsSmall, "canTransferAttachment", true, function ( model, f70_arg1 )
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f70_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WeaponAttachmentsSmall:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f71_local0 = nil --[[ @ 0]]
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() then
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
			CoD.WZUtility.SendInventoryItemFocusNotify( f1_arg1, element ) --[[ @ 0]]
		else
			CoD.WZUtility.UpdateWZInventoryTooltipOnElementPC( f1_arg1, element ) --[[ @ 0]]
		end
		return f71_local0
	end ) --[[ @ 0]]
	WeaponAttachmentsSmall:registerEventHandler( "gain_focus", function ( element, event )
		local f72_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f72_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f72_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		return f72_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], "ui_confirm", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_16CE8023188D673F"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"], "ui_contextual_1", function ( element, menu, controller, model )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_5DAF6A96C5DF8207", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_6D2838B2DBAF9E27", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_46099347F51AF260", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.WZUtility.SendInventoryDetachNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponAttachmentsSmall, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_5DAF6A96C5DF8207", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE3" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_6D2838B2DBAF9E27", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	WeaponAttachmentsSmall:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_46099347F51AF260", function ( f91_arg0, f91_arg1, f91_arg2, f91_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f91_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f91_arg0, f91_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.InventoryFull( f91_arg2 ) then
			return function ( f92_arg0, f92_arg1, f92_arg2, f92_arg3 )
				CoD.WZUtility.SendInventoryDetachNotify( f92_arg2, f92_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachmentsSmall:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_2FFD03BF8361AC75", function ( f93_arg0, f93_arg1, f93_arg2, f93_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f93_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f93_arg0, f93_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) then
			return function ( f94_arg0, f94_arg1, f94_arg2, f94_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f94_arg2, f94_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachmentsSmall:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_5DAF6A96C5DF8207", function ( f95_arg0, f95_arg1, f95_arg2, f95_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f95_arg0, f95_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f95_arg2 ) and IsMouseOrKeyboard( f95_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f95_arg0, f95_arg2, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.ATTACH ) then
			return function ( f96_arg0, f96_arg1, f96_arg2, f96_arg3 )
				CoD.WZUtility.SendInventoryEquipNotify( f96_arg2, f96_arg0, f96_arg1, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	WeaponAttachmentsSmall:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_6D2838B2DBAF9E27", function ( f97_arg0, f97_arg1, f97_arg2, f97_arg3 )
		if not CoD.WZUtility.IsDualWeaponMiddleClickAttachmentTransferDisabled() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f97_arg0, f97_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f97_arg2 ) and IsMouseOrKeyboard( f97_arg2 ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f97_arg0, f97_arg2, "canTransferAttachment", CoD.WZUtility.ItemAvailableAction.SWAP ) then
			return function ( f98_arg0, f98_arg1, f98_arg2, f98_arg3 )
				CoD.WZUtility.SendInventoryEquipNotify( f98_arg2, f98_arg0, f98_arg1, false ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( WeaponAttachmentsSmall ) --[[ @ 0]]
	self.WeaponAttachmentsSmall = WeaponAttachmentsSmall --[[ @ 0]]
	
	DropAndDetachButtonPC = nil --[[ @ 0]]
	
	DropAndDetachButtonPC = CoD.StartMenu_Inventory_ActionIconPC.new( f1_arg0, f1_arg1, 1, 1, -444, -410, 0, 0, 106.5, 140.5 ) --[[ @ 0]]
	DropAndDetachButtonPC:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.HasAttachments( f1_arg1, self.weaponId )
			end
		}
	} ) --[[ @ 0]]
	f1_local13 = DropAndDetachButtonPC --[[ @ 0]]
	DropButtonPC = DropAndDetachButtonPC.subscribeToModel --[[ @ 0]]
	local f1_local14 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	DropButtonPC( f1_local13, f1_local14["weapon0.hasAttachments"], function ( f100_arg0 )
		f1_arg0:updateElementState( DropAndDetachButtonPC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f100_arg0:get(),
			modelName = "weapon0.hasAttachments"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local13 = DropAndDetachButtonPC --[[ @ 0]]
	DropButtonPC = DropAndDetachButtonPC.subscribeToModel --[[ @ 0]]
	f1_local14 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	DropButtonPC( f1_local13, f1_local14["weapon1.hasAttachments"], function ( f101_arg0 )
		f1_arg0:updateElementState( DropAndDetachButtonPC, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f101_arg0:get(),
			modelName = "weapon1.hasAttachments"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropAndDetachButtonPC.Image:setImage( RegisterImage( @"uie_dropdetachicon" ) ) --[[ @ 0]]
	DropAndDetachButtonPC:appendEventHandler( "input_source_changed", function ( f102_arg0, f102_arg1 )
		f102_arg1.menu = f102_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f102_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f102_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local13 = DropAndDetachButtonPC --[[ @ 0]]
	DropButtonPC = DropAndDetachButtonPC.subscribeToModel --[[ @ 0]]
	f1_local14 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	DropButtonPC( f1_local13, f1_local14.LastInput, function ( f103_arg0, f103_arg1 )
		CoD.Menu.UpdateButtonShownState( f103_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f103_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local13 = DropAndDetachButtonPC --[[ @ 0]]
	DropButtonPC = DropAndDetachButtonPC.subscribeToModel --[[ @ 0]]
	f1_local14 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	DropButtonPC( f1_local13, f1_local14["weapon0.hasAttachments"], function ( f104_arg0, f104_arg1 )
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f104_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local13 = DropAndDetachButtonPC --[[ @ 0]]
	DropButtonPC = DropAndDetachButtonPC.subscribeToModel --[[ @ 0]]
	f1_local14 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	DropButtonPC( f1_local13, f1_local14["weapon1.hasAttachments"], function ( f105_arg0, f105_arg1 )
		CoD.Menu.UpdateButtonShownState( f105_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f105_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropAndDetachButtonPC:registerEventHandler( "gain_focus", function ( element, event )
		local f106_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f106_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f106_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f106_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DropAndDetachButtonPC, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.HasAttachments( controller, self.weaponId ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotAndDetachNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.HasAttachments( controller, self.weaponId ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_294D6AF2F50BEFEF", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DropAndDetachButtonPC, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and CoD.WZUtility.HasAttachments( controller, self.weaponId ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotAndDetachNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and CoD.WZUtility.HasAttachments( controller, self.weaponId ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_294D6AF2F50BEFEF", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( DropAndDetachButtonPC ) --[[ @ 0]]
	self.DropAndDetachButtonPC = DropAndDetachButtonPC --[[ @ 0]]
	
	DropButtonPC = nil --[[ @ 0]]
	
	DropButtonPC = CoD.StartMenu_Inventory_ActionIconPC.new( f1_arg0, f1_arg1, 1, 1, -444, -410, 0, 0, 68.5, 102.5 ) --[[ @ 0]]
	DropButtonPC:linkToElementModel( DropButtonPC, "id", true, function ( model, f111_arg1 )
		CoD.Menu.UpdateButtonShownState( f111_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f111_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DropButtonPC:appendEventHandler( "input_source_changed", function ( f112_arg0, f112_arg1 )
		f112_arg1.menu = f112_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f112_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f112_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local14 = DropButtonPC --[[ @ 0]]
	f1_local13 = DropButtonPC.subscribeToModel --[[ @ 0]]
	local f1_local15 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15.LastInput, function ( f113_arg0, f113_arg1 )
		CoD.Menu.UpdateButtonShownState( f113_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f113_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DropButtonPC:registerEventHandler( "gain_focus", function ( element, event )
		local f114_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f114_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f114_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f114_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DropButtonPC, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DropButtonPC, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsGamepad( controller ) then
			CoD.WZUtility.SendInventoryDropWeaponInSlotNotify( controller, self.weaponId ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( DropButtonPC ) --[[ @ 0]]
	self.DropButtonPC = DropButtonPC --[[ @ 0]]
	
	f1_local14 = WeaponVignette --[[ @ 0]]
	f1_local13 = WeaponVignette.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15["weapon0.ammoType"], WeaponVignette.CurrentWeaponName.__CurrentWeaponName_FullPath ) --[[ @ 0]]
	f1_local14 = WeaponVignette --[[ @ 0]]
	f1_local13 = WeaponVignette.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15["weapon1.ammoType"], WeaponVignette.CurrentWeaponName.__CurrentWeaponName_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return true
			end
		},
		{
			stateName = "Open_NoAttachments",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "WarzoneInventory", "currentWeaponIndex", self.weaponId ) and not CoD.WZUtility.HasWeaponAttachments( f1_arg1, self.weaponId )
			end
		},
		{
			stateName = "Open",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "WarzoneInventory", "currentWeaponIndex", self.weaponId )
			end
		},
		{
			stateName = "Close_NoAttachments",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.HasWeaponAttachments( f1_arg1, self.weaponId )
			end
		},
		{
			stateName = "Close",
			condition = function ( menu, element, event )
				return true
			end
		}
	} ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local13 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15.currentWeaponIndex, function ( f124_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f124_arg0:get(),
			modelName = "currentWeaponIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local13 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15["weapon0.supportsAttachments"], function ( f125_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f125_arg0:get(),
			modelName = "weapon0.supportsAttachments"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local13 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local14, f1_local15["weapon1.supportsAttachments"], function ( f126_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f126_arg0:get(),
			modelName = "weapon1.supportsAttachments"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WeaponVignette.id = "WeaponVignette" --[[ @ 0]]
	WeaponHeader.id = "WeaponHeader" --[[ @ 0]]
	WeaponAttachments.id = "WeaponAttachments" --[[ @ 0]]
	WeaponAttachmentsSmall.id = "WeaponAttachmentsSmall" --[[ @ 0]]
	if CoD.isPC then
		DropAndDetachButtonPC.id = "DropAndDetachButtonPC" --[[ @ 0]]
	end
	if CoD.isPC then
		DropButtonPC.id = "DropButtonPC" --[[ @ 0]]
	end
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_WeaponHeader ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local13 = self --[[ @ 0]]
	f1_local13 = WeaponVignette --[[ @ 0]]
	DisableAutoButtonCallback( f1_arg0, f1_local13, f1_arg1 ) --[[ @ 0]]
	CoD.PCWidgetUtility.SetupContextualMenu( f1_local13, f1_arg1, "weaponName", "", "" ) --[[ @ 0]]
	CoD.PCWidgetUtility.SetupContextualMenu( WeaponHeader, f1_arg1, "weaponName", "", "" ) --[[ @ 0]]
	f1_local13 = WeaponAttachments --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local13, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	f1_local13 = WeaponAttachmentsSmall --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local13, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.__resetProperties = function ( f128_arg0 )
	f128_arg0.GridTiled:completeAnimation() --[[ @ 0]]
	f128_arg0.Background:completeAnimation() --[[ @ 0]]
	f128_arg0.Blur:completeAnimation() --[[ @ 0]]
	f128_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
	f128_arg0.GamepadText:completeAnimation() --[[ @ 0]]
	f128_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
	f128_arg0.WeaponHeader:completeAnimation() --[[ @ 0]]
	f128_arg0.SwitchWeaponImage:completeAnimation() --[[ @ 0]]
	f128_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
	f128_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
	f128_arg0.DropButtonPC:completeAnimation() --[[ @ 0]]
	f128_arg0.GridTiled:setTopBottom( 0, 0, 32, 443 ) --[[ @ 0]]
	f128_arg0.GridTiled:setAlpha( 0.55 ) --[[ @ 0]]
	f128_arg0.Background:setTopBottom( 0, 0, 0, 251 ) --[[ @ 0]]
	f128_arg0.Background:setAlpha( 0.8 ) --[[ @ 0]]
	f128_arg0.Blur:setTopBottom( 0, 0, 0, 251 ) --[[ @ 0]]
	f128_arg0.Blur:setAlpha( 1 ) --[[ @ 0]]
	f128_arg0.WeaponAttachmentsSmall:setTopBottom( 0, 0, 213, 263 ) --[[ @ 0]]
	f128_arg0.WeaponAttachmentsSmall:setAlpha( 1 ) --[[ @ 0]]
	f128_arg0.GamepadText:setAlpha( 0 ) --[[ @ 0]]
	f128_arg0.WeaponAttachments:setAlpha( 1 ) --[[ @ 0]]
	f128_arg0.WeaponHeader:setAlpha( 1 ) --[[ @ 0]]
	f128_arg0.SwitchWeaponImage:setAlpha( 0 ) --[[ @ 0]]
	f128_arg0.WeaponVignette:setAlpha( 1 ) --[[ @ 0]]
	f128_arg0.TiledBacking:setTopBottom( 0, 0, 0, 433 ) --[[ @ 0]]
	f128_arg0.TiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	f128_arg0.DropButtonPC:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f129_arg0, f129_arg1 )
			f129_arg0:__resetProperties() --[[ @ 0]]
			f129_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f129_arg0.Blur:completeAnimation() --[[ @ 0]]
			f129_arg0.Blur:setAlpha( 1 ) --[[ @ 0]]
			f129_arg0.clipFinished( f129_arg0.Blur ) --[[ @ 0]]
			f129_arg0.Background:completeAnimation() --[[ @ 0]]
			f129_arg0.Background:setAlpha( 1 ) --[[ @ 0]]
			f129_arg0.clipFinished( f129_arg0.Background ) --[[ @ 0]]
			f129_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f129_arg0.GridTiled:setTopBottom( 0, 0, 32, 433 ) --[[ @ 0]]
			f129_arg0.GridTiled:setAlpha( 1 ) --[[ @ 0]]
			f129_arg0.clipFinished( f129_arg0.GridTiled ) --[[ @ 0]]
			f129_arg0.GamepadText:completeAnimation() --[[ @ 0]]
			f129_arg0.GamepadText:setAlpha( 1 ) --[[ @ 0]]
			f129_arg0.clipFinished( f129_arg0.GamepadText ) --[[ @ 0]]
			f129_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
			f129_arg0.WeaponAttachmentsSmall:setAlpha( 0 ) --[[ @ 0]]
			f129_arg0.clipFinished( f129_arg0.WeaponAttachmentsSmall ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f130_arg0, f130_arg1 )
			f130_arg0:__resetProperties() --[[ @ 0]]
			f130_arg0:setupElementClipCounter( 11 ) --[[ @ 0]]
			f130_arg0.Blur:completeAnimation() --[[ @ 0]]
			f130_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.Blur ) --[[ @ 0]]
			f130_arg0.Background:completeAnimation() --[[ @ 0]]
			f130_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.Background ) --[[ @ 0]]
			f130_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f130_arg0.TiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.TiledBacking ) --[[ @ 0]]
			f130_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f130_arg0.GridTiled:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.GridTiled ) --[[ @ 0]]
			f130_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
			f130_arg0.WeaponVignette:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.WeaponVignette ) --[[ @ 0]]
			f130_arg0.GamepadText:completeAnimation() --[[ @ 0]]
			f130_arg0.GamepadText:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.GamepadText ) --[[ @ 0]]
			f130_arg0.SwitchWeaponImage:completeAnimation() --[[ @ 0]]
			f130_arg0.SwitchWeaponImage:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.SwitchWeaponImage ) --[[ @ 0]]
			f130_arg0.WeaponHeader:completeAnimation() --[[ @ 0]]
			f130_arg0.WeaponHeader:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.WeaponHeader ) --[[ @ 0]]
			f130_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f130_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.WeaponAttachments ) --[[ @ 0]]
			f130_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
			f130_arg0.WeaponAttachmentsSmall:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.WeaponAttachmentsSmall ) --[[ @ 0]]
			f130_arg0.DropButtonPC:completeAnimation() --[[ @ 0]]
			f130_arg0.DropButtonPC:setAlpha( 0 ) --[[ @ 0]]
			f130_arg0.clipFinished( f130_arg0.DropButtonPC ) --[[ @ 0]]
		end
	},
	Open_NoAttachments = {
		DefaultClip = function ( f131_arg0, f131_arg1 )
			f131_arg0:__resetProperties() --[[ @ 0]]
			f131_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f131_arg0.Blur:completeAnimation() --[[ @ 0]]
			f131_arg0.Blur:setTopBottom( 0, 0, 0, 217 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.Blur ) --[[ @ 0]]
			f131_arg0.Background:completeAnimation() --[[ @ 0]]
			f131_arg0.Background:setTopBottom( 0, 0, 0, 217 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.Background ) --[[ @ 0]]
			f131_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f131_arg0.TiledBacking:setTopBottom( 0, 0, 0, 217 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.TiledBacking ) --[[ @ 0]]
			f131_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f131_arg0.GridTiled:setTopBottom( 0, 0, 32, 220 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.GridTiled ) --[[ @ 0]]
			f131_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
			f131_arg0.WeaponVignette:setAlpha( 1 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.WeaponVignette ) --[[ @ 0]]
			f131_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f131_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.WeaponAttachments ) --[[ @ 0]]
			f131_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
			f131_arg0.WeaponAttachmentsSmall:setTopBottom( 0, 0, 176, -15 ) --[[ @ 0]]
			f131_arg0.WeaponAttachmentsSmall:setAlpha( 0 ) --[[ @ 0]]
			f131_arg0.clipFinished( f131_arg0.WeaponAttachmentsSmall ) --[[ @ 0]]
		end
	},
	Open = {
		DefaultClip = function ( f132_arg0, f132_arg1 )
			f132_arg0:__resetProperties() --[[ @ 0]]
			f132_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f132_arg0.Blur:completeAnimation() --[[ @ 0]]
			f132_arg0.Blur:setTopBottom( 0, 0, 0, 433 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.Blur ) --[[ @ 0]]
			f132_arg0.Background:completeAnimation() --[[ @ 0]]
			f132_arg0.Background:setTopBottom( 0, 0, 0, 433 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.Background ) --[[ @ 0]]
			f132_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f132_arg0.GridTiled:setTopBottom( 0, 0, 32, 433 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.GridTiled ) --[[ @ 0]]
			f132_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
			f132_arg0.WeaponVignette:setAlpha( 1 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.WeaponVignette ) --[[ @ 0]]
			f132_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
			f132_arg0.WeaponAttachmentsSmall:setAlpha( 0 ) --[[ @ 0]]
			f132_arg0.clipFinished( f132_arg0.WeaponAttachmentsSmall ) --[[ @ 0]]
		end
	},
	Close_NoAttachments = {
		DefaultClip = function ( f133_arg0, f133_arg1 )
			f133_arg0:__resetProperties() --[[ @ 0]]
			f133_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f133_arg0.Blur:completeAnimation() --[[ @ 0]]
			f133_arg0.Blur:setTopBottom( 0, 0, 0, 212 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.Blur ) --[[ @ 0]]
			f133_arg0.Background:completeAnimation() --[[ @ 0]]
			f133_arg0.Background:setTopBottom( 0, 0, 0, 212 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.Background ) --[[ @ 0]]
			f133_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f133_arg0.TiledBacking:setTopBottom( 0, 0, 0, 213 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.TiledBacking ) --[[ @ 0]]
			f133_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f133_arg0.GridTiled:setTopBottom( 0, 0, 32, 212 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.GridTiled ) --[[ @ 0]]
			f133_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
			f133_arg0.WeaponVignette:setAlpha( 1 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.WeaponVignette ) --[[ @ 0]]
			f133_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f133_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.WeaponAttachments ) --[[ @ 0]]
			f133_arg0.WeaponAttachmentsSmall:completeAnimation() --[[ @ 0]]
			f133_arg0.WeaponAttachmentsSmall:setAlpha( 0 ) --[[ @ 0]]
			f133_arg0.clipFinished( f133_arg0.WeaponAttachmentsSmall ) --[[ @ 0]]
		end
	},
	Close = {
		DefaultClip = function ( f134_arg0, f134_arg1 )
			f134_arg0:__resetProperties() --[[ @ 0]]
			f134_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f134_arg0.Blur:completeAnimation() --[[ @ 0]]
			f134_arg0.Blur:setTopBottom( 0, 0, 0, 272 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.Blur ) --[[ @ 0]]
			f134_arg0.Background:completeAnimation() --[[ @ 0]]
			f134_arg0.Background:setTopBottom( 0, 0, 0, 272 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.Background ) --[[ @ 0]]
			f134_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f134_arg0.TiledBacking:setTopBottom( 0, 0, 0, 272 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.TiledBacking ) --[[ @ 0]]
			f134_arg0.GridTiled:completeAnimation() --[[ @ 0]]
			f134_arg0.GridTiled:setTopBottom( 0, 0, 32, 272 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.GridTiled ) --[[ @ 0]]
			f134_arg0.WeaponVignette:completeAnimation() --[[ @ 0]]
			f134_arg0.WeaponVignette:setAlpha( 1 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.WeaponVignette ) --[[ @ 0]]
			f134_arg0.WeaponAttachments:completeAnimation() --[[ @ 0]]
			f134_arg0.WeaponAttachments:setAlpha( 0 ) --[[ @ 0]]
			f134_arg0.clipFinished( f134_arg0.WeaponAttachments ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Inventory_WeaponsDisplayPC.__onClose = function ( f135_arg0 )
	f135_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f135_arg0.WeaponVignette:close() --[[ @ 0]]
	f135_arg0.SwitchWeaponImage:close() --[[ @ 0]]
	f135_arg0.WeaponHeader:close() --[[ @ 0]]
	f135_arg0.WeaponAttachments:close() --[[ @ 0]]
	f135_arg0.WeaponAttachmentsSmall:close() --[[ @ 0]]
	f135_arg0.DropAndDetachButtonPC:close() --[[ @ 0]]
	f135_arg0.DropButtonPC:close() --[[ @ 0]]
end
 --[[ @ 0]]
