-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "ui/uieditor/widgets/fileshare/fullscreenpopup/fullscreenpopuptemplate" ) --[[ @ 0]]
require( "x64:15d80cb371475b19" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]

CoD.BOPassRedemptionPopup = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.BOPassRedemptionPopup = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "BOPassRedemptionPopup", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.BOPassRedemptionPopup ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local FullscreenPopupTemplate = CoD.FullscreenPopupTemplate.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	FullscreenPopupTemplate:mergeStateConditions( {
		{
			stateName = "WorkingState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "WorkingState" )
			end
		},
		{
			stateName = "ErrorState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "ErrorState" )
			end
		},
		{
			stateName = "CustomState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "CustomState" )
			end
		},
		{
			stateName = "FinishedState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setWidgetType( CoD.ItemShopButton ) --[[ @ 0]]
	FullscreenPopupTemplate.Subtitle:setText( LocalizeHash( @"hash_3F4F17BBB50E7AF3" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.ErrorSubtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_45D814FC2D8ED37F" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.WorkingTitle:setText( LocalizeToUpperString( @"hash_667B9487B8B4E09C" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.Title:setText( LocalizeToUpperString( @"hash_1EA03240AB35A0F4" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_C0C9B30AD418455" ) ) --[[ @ 0]]
	self:addElement( FullscreenPopupTemplate ) --[[ @ 0]]
	self.FullscreenPopupTemplate = FullscreenPopupTemplate --[[ @ 0]]
	
	local StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 341, 445, 0, 0, 23.5, 103.5 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not IsPC() then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) and CoD.EntitlementUtility.HasSeasonPassToken( controller ) then
			CoD.EntitlementUtility.SetWorkingStateAndPurchaseBOPass( self, self.FullscreenPopupTemplate, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_66393FF34EA56966", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) and CoD.EntitlementUtility.HasSeasonPassToken( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_1867BE59364DD53B", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	FullscreenPopupTemplate.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.buttonPC:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.id = "FullscreenPopupTemplate" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = FullscreenPopupTemplate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local4 = self --[[ @ 0]]
	if IsPC() then
		SetMenuProperty( f1_local1, "_closeAndGoBack", true ) --[[ @ 0]]
		SetMenuProperty( f1_local1, "_openEntitlementPopups", true ) --[[ @ 0]]
	end
	f1_local4 = FullscreenPopupTemplate --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, f1_arg0, f1_local4, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.BOPassRedemptionPopup.__onClose = function ( f11_arg0 )
	f11_arg0.FullscreenPopupTemplate:close() --[[ @ 0]]
	f11_arg0.StartMenuCODpoints:close() --[[ @ 0]]
end
 --[[ @ 0]]
