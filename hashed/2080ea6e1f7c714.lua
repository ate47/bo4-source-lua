-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/startmenu/startmenu_options_buttonoption" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_options_simplecheckoption" ) --[[ @ 0]]

CoD.StartMenu_Options_AccountManagementForm = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_Options_AccountManagementForm.__defaultWidth = 1920 --[[ @ 0]]
CoD.StartMenu_Options_AccountManagementForm.__defaultHeight = 1080 --[[ @ 0]]
CoD.StartMenu_Options_AccountManagementForm.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Options_AccountManagementForm ) --[[ @ 0]]
	self.id = "StartMenu_Options_AccountManagementForm" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local AccountOptions = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	AccountOptions:setLeftRight( 0.5, 0.5, -380, 380 ) --[[ @ 0]]
	AccountOptions:setTopBottom( 0, 0, 489, 549 ) --[[ @ 0]]
	AccountOptions:setWidgetType( CoD.StartMenu_Options_SimpleCheckOption ) --[[ @ 0]]
	AccountOptions:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	AccountOptions:setDataSource( "CODAccountManagementOptions" ) --[[ @ 0]]
	AccountOptions:registerEventHandler( "gain_focus", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f2_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f2_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f2_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( AccountOptions, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( AccountOptions ) --[[ @ 0]]
	self.AccountOptions = AccountOptions --[[ @ 0]]
	
	local AccountButtonOptionsList = LUI.UIList.new( f1_arg0, f1_arg1, 2, 0, nil, false, false, false, false ) --[[ @ 0]]
	AccountButtonOptionsList:setLeftRight( 0.5, 0.5, -380, 380 ) --[[ @ 0]]
	AccountButtonOptionsList:setTopBottom( 0, 0, 549, 609 ) --[[ @ 0]]
	AccountButtonOptionsList:setWidgetType( CoD.StartMenu_Options_ButtonOption ) --[[ @ 0]]
	AccountButtonOptionsList:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	AccountButtonOptionsList:setDataSource( "CODAccountManagementConfirmation" ) --[[ @ 0]]
	AccountButtonOptionsList:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( AccountButtonOptionsList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( AccountButtonOptionsList ) --[[ @ 0]]
	self.AccountButtonOptionsList = AccountButtonOptionsList --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0.5, 0.5, -362.5, 362.5, 0, 0, 210.5, 264.5 ) --[[ @ 0]]
	Title:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Title:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_630BC41F2404F851" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Title:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local Body = LUI.UIText.new( 0.5, 0.5, -362.5, 362.5, 0, 0, 296.5, 320.5 ) --[[ @ 0]]
	Body:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Body:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7FDF4DE037465FD4" ) ) --[[ @ 0]]
	Body:setTTF( "dinnext_regular" ) --[[ @ 0]]
	Body:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Body:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Body ) --[[ @ 0]]
	self.Body = Body --[[ @ 0]]
	
	local DescriptionText = LUI.UIText.new( 0.5, 0.5, 392, 849, 0, 0, 210.5, 234.5 ) --[[ @ 0]]
	DescriptionText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	DescriptionText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	DescriptionText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	DescriptionText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	DescriptionText:subscribeToGlobalModel( f1_arg1, "CODAccountManagementForm", "hintText", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			DescriptionText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DescriptionText ) --[[ @ 0]]
	self.DescriptionText = DescriptionText --[[ @ 0]]
	
	AccountOptions.id = "AccountOptions" --[[ @ 0]]
	AccountButtonOptionsList.id = "AccountButtonOptionsList" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Options_AccountManagementForm.__onClose = function ( f9_arg0 )
	f9_arg0.AccountOptions:close() --[[ @ 0]]
	f9_arg0.AccountButtonOptionsList:close() --[[ @ 0]]
	f9_arg0.DescriptionText:close() --[[ @ 0]]
end
 --[[ @ 0]]
