-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/common/commondetailpanel" ) --[[ @ 0]]
require( "x64:6b6b417224e88ee" ) --[[ @ 0]]
require( "x64:2478f2bd71f935fd" ) --[[ @ 0]]
require( "x64:36812bcd114f374e" ) --[[ @ 0]]

CoD.StartMenu_InventoryDescription = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_InventoryDescription.__defaultWidth = 303 --[[ @ 0]]
CoD.StartMenu_InventoryDescription.__defaultHeight = 310 --[[ @ 0]]
CoD.StartMenu_InventoryDescription.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_InventoryDescription ) --[[ @ 0]]
	self.id = "StartMenu_InventoryDescription" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CommonDetailPanel = CoD.CommonDetailPanel.new( f1_arg0, f1_arg1, 0, 0, 0, 316, 0, 0, -48, 326 ) --[[ @ 0]]
	CommonDetailPanel:mergeStateConditions( {
		{
			stateName = "HideBottom",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) and CoD.WZUtility.IsQuestItem( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	CommonDetailPanel:linkToElementModel( CommonDetailPanel, "name", true, function ( model )
		f1_arg0:updateElementState( CommonDetailPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "name"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonDetailPanel:linkToElementModel( CommonDetailPanel, "type", true, function ( model )
		f1_arg0:updateElementState( CommonDetailPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "type"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonDetailPanel:linkToElementModel( CommonDetailPanel, "unlockableItemRef", true, function ( model )
		f1_arg0:updateElementState( CommonDetailPanel, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unlockableItemRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonDetailPanel.BackingBlur:setAlpha( 0 ) --[[ @ 0]]
	CommonDetailPanel:linkToElementModel( self, nil, false, function ( model )
		CommonDetailPanel:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonDetailPanel ) --[[ @ 0]]
	self.CommonDetailPanel = CommonDetailPanel --[[ @ 0]]
	
	local headingBackground = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 46 ) --[[ @ 0]]
	headingBackground:setRGB( 0, 0, 0 ) --[[ @ 0]]
	headingBackground:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( headingBackground ) --[[ @ 0]]
	self.headingBackground = headingBackground --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, 0, 316, 0, 0, 119, 326 ) --[[ @ 0]]
	Box:setRGB( 0.07, 0.07, 0.07 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local titleBacking = LUI.UIImage.new( 0, 0, 0, 316, 0, 0, -31, 5 ) --[[ @ 0]]
	titleBacking:setRGB( 0.29, 0.29, 0.29 ) --[[ @ 0]]
	titleBacking:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( titleBacking ) --[[ @ 0]]
	self.titleBacking = titleBacking --[[ @ 0]]
	
	local title = LUI.UIText.new( 0, 0, 13, 280, 0, 0, 87, 114 ) --[[ @ 0]]
	title:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	title:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	title:setLetterSpacing( 4 ) --[[ @ 0]]
	title:setLineSpacing( -1 ) --[[ @ 0]]
	title:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_left"] ) ) --[[ @ 0]]
	title:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_bottom"] ) ) --[[ @ 0]]
	title:linkToElementModel( self, "name", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			title:setText( LocalizeToUpperString( f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( title ) --[[ @ 0]]
	self.title = title --[[ @ 0]]
	
	local details = CoD.StartMenu_InventoryDescription_Internal.new( f1_arg0, f1_arg1, 0.03, 1.03, 4, 4, 0, 0, 123, 469 ) --[[ @ 0]]
	details:linkToElementModel( self, nil, false, function ( model )
		details:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( details ) --[[ @ 0]]
	self.details = details --[[ @ 0]]
	
	local ItemBase = LUI.UIImage.new( 0, 0, 0, 317, 0, 0, -48, 58 ) --[[ @ 0]]
	ItemBase:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ItemBase ) --[[ @ 0]]
	self.ItemBase = ItemBase --[[ @ 0]]
	
	local count = CoD.WarzoneInventoryCounter.new( f1_arg0, f1_arg1, 1, 1, -31, 9, 0, 0, 30, 70 ) --[[ @ 0]]
	count:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, f1_arg1, "stackCount", 1 ) and not CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "stackCount", 1 )
			end
		}
	} ) --[[ @ 0]]
	count:linkToElementModel( count, "stackCount", true, function ( model )
		f1_arg0:updateElementState( count, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "stackCount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	count.Counter:setBackingColor( 0.07, 0.07, 0.07 ) --[[ @ 0]]
	count:linkToElementModel( self, nil, false, function ( model )
		count:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	count:linkToElementModel( self, "stackCount", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			count.Counter:setText( f12_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( count ) --[[ @ 0]]
	self.count = count --[[ @ 0]]
	
	local icon = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -43, 57, 0, 0, -42.5, 57.5 ) --[[ @ 0]]
	icon:linkToElementModel( self, "icon", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			icon:setImage( RegisterImage( f13_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( icon ) --[[ @ 0]]
	self.icon = icon --[[ @ 0]]
	
	local IconWeapon = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -147.5, 160.5, 0, 0, -33, 46 ) --[[ @ 0]]
	IconWeapon:setAlpha( 0 ) --[[ @ 0]]
	IconWeapon:linkToElementModel( self, "icon", true, function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			IconWeapon:setImage( RegisterImage( f14_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( IconWeapon ) --[[ @ 0]]
	self.IconWeapon = IconWeapon --[[ @ 0]]
	
	local ArmorIcon = LUI.UIImage.new( 0.5, 0.5, -43, 57, 0, 0, -42.5, 57.5 ) --[[ @ 0]]
	ArmorIcon:setAlpha( 0 ) --[[ @ 0]]
	ArmorIcon:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_flipbook_animated" ) ) --[[ @ 0]]
	ArmorIcon:setShaderVector( 0, 10, 1, 0, 0 ) --[[ @ 0]]
	ArmorIcon.__Frame = function ( f15_arg0 )
		local f15_local0 = f15_arg0:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			ArmorIcon:setShaderVector( 1, CoD.WZUtility.GetArmorFlipbookFrame( self:getModel(), f1_arg1, CoD.GetVectorComponentFromString( f15_local0, 1 ), CoD.GetVectorComponentFromString( f15_local0, 2 ), CoD.GetVectorComponentFromString( f15_local0, 3 ), CoD.GetVectorComponentFromString( f15_local0, 4 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	ArmorIcon:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model, f16_arg1 )
		if f16_arg1["__ArmorIcon.__Frame_predictedClientModel->armor"] then
			f16_arg1:removeSubscription( f16_arg1["__ArmorIcon.__Frame_predictedClientModel->armor"] ) --[[ @ 0]]
			f16_arg1["__ArmorIcon.__Frame_predictedClientModel->armor"] = nil --[[ @ 0]]
		end
		if model then
			local f16_local0 = model:get() --[[ @ 0]]
			local f16_local1 = model:get() --[[ @ 0]]
			model = f16_local0 and f16_local1.armor --[[ @ 0]]
		end
		if model then
			f16_arg1["__ArmorIcon.__Frame_predictedClientModel->armor"] = f16_arg1:subscribeToModel( model, ArmorIcon.__Frame ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ArmorIcon.__Frame_FullPath = function ()
		local f17_local0 = DataSources.PerController.getModel( f1_arg1 ) --[[ @ 0]]
		f17_local0 = f17_local0.predictedClientModel --[[ @ 0]]
		if f17_local0 then
			f17_local0 = f17_local0:get() --[[ @ 0]]
		end
		if f17_local0 then
			f17_local0 = f17_local0.armor --[[ @ 0]]
		end
		if f17_local0 then
			ArmorIcon.__Frame( f17_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	ArmorIcon:linkToElementModel( self, "icon", true, function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			ArmorIcon:setImage( RegisterImage( f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ArmorIcon ) --[[ @ 0]]
	self.ArmorIcon = ArmorIcon --[[ @ 0]]
	
	local WarzoneInventoryUnlockMissionObjective = CoD.WarzoneInventoryUnlockMissionObjective.new( f1_arg0, f1_arg1, 0, 0, 4, 320, 0, 0, 124, 244 ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:setAlpha( 0 ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:linkToElementModel( self, "description", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			WarzoneInventoryUnlockMissionObjective.description:setText( Engine[@"hash_4F9F1239CFD921FE"]( f19_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:linkToElementModel( self, "unlockableItemRef", true, function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			WarzoneInventoryUnlockMissionObjective.characterMissionLabel:setText( LocalizeToUpperString( CoD.WZUtility.GetUnlockMissionString( f20_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:linkToElementModel( self, "unlockableItemRef", true, function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			WarzoneInventoryUnlockMissionObjective.WarzoneInventoryUnlockMissionReward.unlockableIcon:setImage( CoD.BaseUtility.AlreadyRegistered( CoD.WZUtility.GetPreviewImageLargeFromRef( Enum[@"emodes"][@"mode_warzone"], f21_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:linkToElementModel( self, "quote", true, function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			WarzoneInventoryUnlockMissionObjective.WarzoneInventoryUnlockMissionReward.quote:setText( Engine[@"hash_4F9F1239CFD921FE"]( f22_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WarzoneInventoryUnlockMissionObjective:linkToElementModel( self, "rewardName", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			WarzoneInventoryUnlockMissionObjective.WarzoneInventoryUnlockMissionReward.rewardName:setText( Engine[@"hash_4F9F1239CFD921FE"]( f23_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WarzoneInventoryUnlockMissionObjective ) --[[ @ 0]]
	self.WarzoneInventoryUnlockMissionObjective = WarzoneInventoryUnlockMissionObjective --[[ @ 0]]
	
	local alreadyUnlockedLabel = LUI.UIText.new( 0, 0, 286, 486, 0, 0, 135.5, 165.5 ) --[[ @ 0]]
	alreadyUnlockedLabel:setAlpha( 0 ) --[[ @ 0]]
	alreadyUnlockedLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1BA819F632BB248A" ) ) --[[ @ 0]]
	alreadyUnlockedLabel:setTTF( "default" ) --[[ @ 0]]
	alreadyUnlockedLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	alreadyUnlockedLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( alreadyUnlockedLabel ) --[[ @ 0]]
	self.alreadyUnlockedLabel = alreadyUnlockedLabel --[[ @ 0]]
	
	ArmorIcon:linkToElementModel( self, "armorMax", true, ArmorIcon.__Frame_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "CharacterUnlockVisibleWeapon",
			condition = function ( menu, element, event )
				local f24_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) --[[ @ 0]]
				if f24_local0 then
					f24_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "weapon" ) --[[ @ 0]]
					if f24_local0 then
						f24_local0 = CoD.WZUtility.IsQuestItem( element, f1_arg1 ) --[[ @ 0]]
					end
				end
				return f24_local0
			end
		},
		{
			stateName = "CharacterUnlockVisible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) and CoD.WZUtility.IsQuestItem( element, f1_arg1 )
			end
		},
		{
			stateName = "Armor",
			condition = function ( menu, element, event )
				local f26_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) --[[ @ 0]]
				if f26_local0 then
					f26_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "armor" ) --[[ @ 0]]
					if f26_local0 then
						f26_local0 = not IsPC() --[[ @ 0]]
					end
				end
				return f26_local0
			end
		},
		{
			stateName = "VisibleWeapon",
			condition = function ( menu, element, event )
				local f27_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) --[[ @ 0]]
				if f27_local0 then
					f27_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "weapon" ) --[[ @ 0]]
					if f27_local0 then
						f27_local0 = not IsPC() --[[ @ 0]]
					end
				end
				return f27_local0
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "name" ) and not IsPC()
			end
		},
		{
			stateName = "HiddenPC",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelNil( element, f1_arg1 ) and IsPC()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "name", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "name"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "type", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "type"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "unlockableItemRef", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "unlockableItemRef"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, nil, false, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model and model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setModel", function ( element, controller )
		UpdateElementDataSource( self, "objectiveList" ) --[[ @ 0]]
		CoD.WZUtility.SetupItemObjectives( f1_arg1, self, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.StartMenu_InventoryDescription.__resetProperties = function ( f35_arg0 )
	f35_arg0.title:completeAnimation() --[[ @ 0]]
	f35_arg0.headingBackground:completeAnimation() --[[ @ 0]]
	f35_arg0.details:completeAnimation() --[[ @ 0]]
	f35_arg0.icon:completeAnimation() --[[ @ 0]]
	f35_arg0.ItemBase:completeAnimation() --[[ @ 0]]
	f35_arg0.count:completeAnimation() --[[ @ 0]]
	f35_arg0.CommonDetailPanel:completeAnimation() --[[ @ 0]]
	f35_arg0.Box:completeAnimation() --[[ @ 0]]
	f35_arg0.IconWeapon:completeAnimation() --[[ @ 0]]
	f35_arg0.WarzoneInventoryUnlockMissionObjective:completeAnimation() --[[ @ 0]]
	f35_arg0.ArmorIcon:completeAnimation() --[[ @ 0]]
	f35_arg0.title:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.headingBackground:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.details:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.icon:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.ItemBase:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.count:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.CommonDetailPanel:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.Box:setAlpha( 1 ) --[[ @ 0]]
	f35_arg0.IconWeapon:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.WarzoneInventoryUnlockMissionObjective:setAlpha( 0 ) --[[ @ 0]]
	f35_arg0.ArmorIcon:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_InventoryDescription.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f36_arg0.CommonDetailPanel:completeAnimation() --[[ @ 0]]
			f36_arg0.CommonDetailPanel:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.CommonDetailPanel ) --[[ @ 0]]
			f36_arg0.headingBackground:completeAnimation() --[[ @ 0]]
			f36_arg0.headingBackground:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.headingBackground ) --[[ @ 0]]
			f36_arg0.Box:completeAnimation() --[[ @ 0]]
			f36_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Box ) --[[ @ 0]]
			f36_arg0.title:completeAnimation() --[[ @ 0]]
			f36_arg0.title:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.title ) --[[ @ 0]]
			f36_arg0.details:completeAnimation() --[[ @ 0]]
			f36_arg0.details:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.details ) --[[ @ 0]]
			f36_arg0.ItemBase:completeAnimation() --[[ @ 0]]
			f36_arg0.ItemBase:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.ItemBase ) --[[ @ 0]]
			f36_arg0.count:completeAnimation() --[[ @ 0]]
			f36_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.count ) --[[ @ 0]]
			f36_arg0.icon:completeAnimation() --[[ @ 0]]
			f36_arg0.icon:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.icon ) --[[ @ 0]]
		end
	},
	CharacterUnlockVisibleWeapon = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f37_arg0.details:completeAnimation() --[[ @ 0]]
			f37_arg0.details:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.details ) --[[ @ 0]]
			f37_arg0.icon:completeAnimation() --[[ @ 0]]
			f37_arg0.icon:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.icon ) --[[ @ 0]]
			f37_arg0.IconWeapon:completeAnimation() --[[ @ 0]]
			f37_arg0.IconWeapon:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.IconWeapon ) --[[ @ 0]]
			f37_arg0.WarzoneInventoryUnlockMissionObjective:completeAnimation() --[[ @ 0]]
			f37_arg0.WarzoneInventoryUnlockMissionObjective:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.WarzoneInventoryUnlockMissionObjective ) --[[ @ 0]]
		end
	},
	CharacterUnlockVisible = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f38_arg0.details:completeAnimation() --[[ @ 0]]
			f38_arg0.details:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.details ) --[[ @ 0]]
			f38_arg0.WarzoneInventoryUnlockMissionObjective:completeAnimation() --[[ @ 0]]
			f38_arg0.WarzoneInventoryUnlockMissionObjective:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.WarzoneInventoryUnlockMissionObjective ) --[[ @ 0]]
		end
	},
	Armor = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f39_arg0.icon:completeAnimation() --[[ @ 0]]
			f39_arg0.icon:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.icon ) --[[ @ 0]]
			f39_arg0.ArmorIcon:completeAnimation() --[[ @ 0]]
			f39_arg0.ArmorIcon:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.ArmorIcon ) --[[ @ 0]]
		end
	},
	VisibleWeapon = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f40_arg0.icon:completeAnimation() --[[ @ 0]]
			f40_arg0.icon:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.icon ) --[[ @ 0]]
			f40_arg0.IconWeapon:completeAnimation() --[[ @ 0]]
			f40_arg0.IconWeapon:setAlpha( 1 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.IconWeapon ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HiddenPC = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f42_arg0.CommonDetailPanel:completeAnimation() --[[ @ 0]]
			f42_arg0.CommonDetailPanel:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.CommonDetailPanel ) --[[ @ 0]]
			f42_arg0.headingBackground:completeAnimation() --[[ @ 0]]
			f42_arg0.headingBackground:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.headingBackground ) --[[ @ 0]]
			f42_arg0.Box:completeAnimation() --[[ @ 0]]
			f42_arg0.Box:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Box ) --[[ @ 0]]
			f42_arg0.title:completeAnimation() --[[ @ 0]]
			f42_arg0.title:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.title ) --[[ @ 0]]
			f42_arg0.details:completeAnimation() --[[ @ 0]]
			f42_arg0.details:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.details ) --[[ @ 0]]
			f42_arg0.ItemBase:completeAnimation() --[[ @ 0]]
			f42_arg0.ItemBase:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.ItemBase ) --[[ @ 0]]
			f42_arg0.count:completeAnimation() --[[ @ 0]]
			f42_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.count ) --[[ @ 0]]
			f42_arg0.icon:completeAnimation() --[[ @ 0]]
			f42_arg0.icon:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.icon ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_InventoryDescription.__onClose = function ( f43_arg0 )
	f43_arg0.CommonDetailPanel:close() --[[ @ 0]]
	f43_arg0.title:close() --[[ @ 0]]
	f43_arg0.details:close() --[[ @ 0]]
	f43_arg0.count:close() --[[ @ 0]]
	f43_arg0.icon:close() --[[ @ 0]]
	f43_arg0.IconWeapon:close() --[[ @ 0]]
	f43_arg0.ArmorIcon:close() --[[ @ 0]]
	f43_arg0.WarzoneInventoryUnlockMissionObjective:close() --[[ @ 0]]
end
 --[[ @ 0]]
