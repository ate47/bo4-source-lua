-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:79b528a05aba52d6" ) --[[ @ 0]]
require( "x64:12d64ca9d3c705ce" ) --[[ @ 0]]
require( "x64:2b25db840a191172" ) --[[ @ 0]]
require( "x64:4ca1dc89b2aa714c" ) --[[ @ 0]]
require( "x64:4b1b346e32476a2e" ) --[[ @ 0]]
require( "x64:736fb83ae1c0a689" ) --[[ @ 0]]

CoD.ItemHistoryFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ItemHistoryFrame.__defaultWidth = 1920 --[[ @ 0]]
CoD.ItemHistoryFrame.__defaultHeight = 1080 --[[ @ 0]]
CoD.ItemHistoryFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.FTUEUtility.ShowFTUESequenceIfNotSeen( self, f1_arg1, "BlackMarketInventoryIntroduction" ) --[[ @ 0]]
	self:setClass( CoD.ItemHistoryFrame ) --[[ @ 0]]
	self.id = "ItemHistoryFrame" --[[ @ 0]]
	self.soundSet = "ItemShop" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local NoiseBackingLeft = LUI.UIImage.new( 0.5, 0.5, -856, -492, 0.5, 0.5, -355, 405 ) --[[ @ 0]]
	NoiseBackingLeft:setAlpha( 0.4 ) --[[ @ 0]]
	NoiseBackingLeft:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseBackingLeft:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseBackingLeft:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseBackingLeft:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseBackingLeft ) --[[ @ 0]]
	self.NoiseBackingLeft = NoiseBackingLeft --[[ @ 0]]
	
	local NoiseBackingRight = LUI.UIImage.new( 0.5, 0.5, -470, 854, 0.5, 0.5, -356, 404 ) --[[ @ 0]]
	NoiseBackingRight:setAlpha( 0.4 ) --[[ @ 0]]
	NoiseBackingRight:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseBackingRight:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseBackingRight:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseBackingRight:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseBackingRight ) --[[ @ 0]]
	self.NoiseBackingRight = NoiseBackingRight --[[ @ 0]]
	
	local HistoryList = LUI.UIList.new( f1_arg0, f1_arg1, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	HistoryList:setLeftRight( 0.5, 0.5, -448, 832 ) --[[ @ 0]]
	HistoryList:setTopBottom( 0.5, 0.5, -311, 199 ) --[[ @ 0]]
	HistoryList:setWidgetType( CoD.BMTallItemContainer ) --[[ @ 0]]
	HistoryList:setHorizontalCount( 5 ) --[[ @ 0]]
	HistoryList:setSpacing( 20 ) --[[ @ 0]]
	HistoryList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	HistoryList:setHorizontalScrollbar( CoD.PC_GridHorizontalScrollbar ) --[[ @ 0]]
	HistoryList:setHorizontalCounter( CoD.horizontalCounter ) --[[ @ 0]]
	HistoryList:setDataSource( "ItemHistoryList" ) --[[ @ 0]]
	HistoryList:linkToElementModel( HistoryList, "lootType", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	HistoryList:registerEventHandler( "gain_list_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		PlaySoundSetSound( self, "gain_focus" ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	HistoryList:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_up"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_none"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( HistoryList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lootType", LuaEnum.LOOT_TYPE.CONTRACT ) then
			CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
			CoD.ContractUtility.OpenContractDetails( self, element, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lootType", LuaEnum.LOOT_TYPE.ITEMSHOP ) then
			CoD.BlackMarketUtility.PlayItemShopSelectSound( element, controller ) --[[ @ 0]]
			OpenOverlay( self, "ItemShopDetails", controller, {
				_model = element:getModel()
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lootType", LuaEnum.LOOT_TYPE.CONTRACT ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_9C695BAD15F589A", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "lootType", LuaEnum.LOOT_TYPE.ITEMSHOP ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_9C695BAD15F589A", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( HistoryList, f1_arg1, Enum[@"luibutton"][@"lui_key_up"], nil, function ( element, menu, controller, model )
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_up"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( HistoryList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollLeft( self.HistoryList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.HistoryList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( HistoryList, f1_arg1, Enum[@"luibutton"][@"lui_key_none"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollRight( self.HistoryList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.HistoryList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_none"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( HistoryList ) --[[ @ 0]]
	self.HistoryList = HistoryList --[[ @ 0]]
	
	local CategoryList = LUI.UIList.new( f1_arg0, f1_arg1, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	CategoryList:setLeftRight( 0.5, 0.5, -836, -512 ) --[[ @ 0]]
	CategoryList:setTopBottom( 0.5, 0.5, -311, -31 ) --[[ @ 0]]
	CategoryList:setWidgetType( CoD.StoreCategoryButton ) --[[ @ 0]]
	CategoryList:setVerticalCount( 3 ) --[[ @ 0]]
	CategoryList:setSpacing( 20 ) --[[ @ 0]]
	CategoryList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	CategoryList:setDataSource( "ItemHistoryCategoryList" ) --[[ @ 0]]
	CategoryList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		local f13_local1 = SetMenuProperty --[[ @ 0]]
		local f13_local2 = f1_arg0 --[[ @ 0]]
		local f13_local3 = "category" --[[ @ 0]]
		local f13_local4 = element:getModel() --[[ @ 0]]
		f13_local1( f13_local2, f13_local3, f13_local4.category:get() ) --[[ @ 0]]
		CoD.GridAndListUtility.UpdateDataSource( self.HistoryList, true, true, true ) --[[ @ 0]]
		CoD.GridAndListUtility.SetFocusToFirstSelectableItem( self.HistoryList ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	CategoryList:registerEventHandler( "gain_list_focus", function ( element, event )
		return nil
	end ) --[[ @ 0]]
	self:addElement( CategoryList ) --[[ @ 0]]
	self.CategoryList = CategoryList --[[ @ 0]]
	
	local FramingCornerBrackets = CoD.CommonCornerBrackets01.new( f1_arg0, f1_arg1, 0.5, 0.5, -880, 880, 0.5, 0.5, -381, 429 ) --[[ @ 0]]
	FramingCornerBrackets:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( FramingCornerBrackets ) --[[ @ 0]]
	self.FramingCornerBrackets = FramingCornerBrackets --[[ @ 0]]
	
	local DottedLineTop = LUI.UIImage.new( 0.5, 0.5, -856, 854, 0.5, 0.5, -364, -360 ) --[[ @ 0]]
	DottedLineTop:setAlpha( 0.35 ) --[[ @ 0]]
	DottedLineTop:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DottedLineTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DottedLineTop:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DottedLineTop:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DottedLineTop ) --[[ @ 0]]
	self.DottedLineTop = DottedLineTop --[[ @ 0]]
	
	local DottedLineBot = LUI.UIImage.new( 0.5, 0.5, -856, 854, 0.5, 0.5, 408, 412 ) --[[ @ 0]]
	DottedLineBot:setAlpha( 0.35 ) --[[ @ 0]]
	DottedLineBot:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DottedLineBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DottedLineBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DottedLineBot:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DottedLineBot ) --[[ @ 0]]
	self.DottedLineBot = DottedLineBot --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		ClearMenuSavedState( f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	HistoryList.id = "HistoryList" --[[ @ 0]]
	CategoryList.id = "CategoryList" --[[ @ 0]]
	self.__defaultFocus = CategoryList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local8 = self --[[ @ 0]]
	SetMenuProperty( f1_arg0, "category", "specialOrders" ) --[[ @ 0]]
	CoD.BlackMarketUtility.ChangeSupplyChainCameraBySelection( f1_arg0, f1_arg1, f1_local8 ) --[[ @ 0]]
	CoD.GridAndListUtility.SetHorizontalCounterPadding( self.HistoryList, 45 ) --[[ @ 0]]
	f1_local8 = HistoryList --[[ @ 0]]
	if not IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalScrollbar( f1_arg0, f1_local8 ) --[[ @ 0]]
	elseif IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalCounter( f1_arg0, f1_local8 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ItemHistoryFrame.__onClose = function ( f16_arg0 )
	f16_arg0.HistoryList:close() --[[ @ 0]]
	f16_arg0.CategoryList:close() --[[ @ 0]]
	f16_arg0.FramingCornerBrackets:close() --[[ @ 0]]
end
 --[[ @ 0]]
