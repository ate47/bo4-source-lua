-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:67629ec7b99348f8" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointarrowcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointcenter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/onoffimage" ) --[[ @ 0]]

CoD.WaypointCombatTrainingTarget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.__defaultWidth = 120 --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.__defaultHeight = 180 --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WaypointCombatTrainingTarget ) --[[ @ 0]]
	self.id = "WaypointCombatTrainingTarget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local WaypointBacker = CoD.onOffImage.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointBacker:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		}
	} ) --[[ @ 0]]
	WaypointBacker:linkToElementModel( WaypointBacker, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointBacker, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointBacker.image:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_backer" ) ) --[[ @ 0]]
	WaypointBacker.image:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
	WaypointBacker:linkToElementModel( self, nil, false, function ( model )
		WaypointBacker:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointBacker ) --[[ @ 0]]
	self.WaypointBacker = WaypointBacker --[[ @ 0]]
	
	local WaypointArrowDownNotClampedContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not ParentObjectivePropertyIsTrue( element, "hide_arrow" ) and not CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo( self, @"hash_50129B22B0CDE96B", 1 ) then
					f5_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" ) --[[ @ 0]]
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		}
	} ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "id", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowDownNotClampedContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
	self.WaypointArrowDownNotClampedContainer = WaypointArrowDownNotClampedContainer --[[ @ 0]]
	
	local WaypointArrowContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, "direction", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			WaypointArrowContainer:setZRot( Add( 90, f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowContainer ) --[[ @ 0]]
	self.WaypointArrowContainer = WaypointArrowContainer --[[ @ 0]]
	
	local WaypointText = CoD.Waypoint_TextBGTraining.new( f1_arg0, f1_arg1, 0.5, 0.5, -60, 60, 0.5, 0.5, -96, -55 ) --[[ @ 0]]
	WaypointText:mergeStateConditions( {
		{
			stateName = "Contested",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsContested( f1_arg1, self )
			end
		},
		{
			stateName = "Protect",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsProtect( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "distanceText", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "distanceText"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "text", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	WaypointText.WaypointTextWithBG.text:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, nil, false, function ( model )
		WaypointText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "text", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			WaypointText.WaypointTextWithBG.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( f19_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "distanceText", true, function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			WaypointText.DistanceTextWithBG.text:setText( LocalizeIntoStringIfNotEmpty( @"hash_37235825812D46C6", f20_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointText ) --[[ @ 0]]
	self.WaypointText = WaypointText --[[ @ 0]]
	
	local WaypointPatternNew = CoD.onOffImage.new( f1_arg0, f1_arg1, 0.5, 0.5, -37, 39, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointPatternNew:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		}
	} ) --[[ @ 0]]
	WaypointPatternNew:linkToElementModel( WaypointPatternNew, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointPatternNew, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointPatternNew.image:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_led" ) ) --[[ @ 0]]
	WaypointPatternNew.image:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
	WaypointPatternNew:linkToElementModel( self, "color", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			WaypointPatternNew:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f23_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointPatternNew:linkToElementModel( self, nil, false, function ( model )
		WaypointPatternNew:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointPatternNew ) --[[ @ 0]]
	self.WaypointPatternNew = WaypointPatternNew --[[ @ 0]]
	
	local WaypointCenterIcon = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointCenterIcon:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		}
	} ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( WaypointCenterIcon, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointCenterIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( WaypointCenterIcon, "progress", true, function ( model )
		f1_arg0:updateElementState( WaypointCenterIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "progress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( WaypointCenterIcon, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( WaypointCenterIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local CircleGlow = WaypointCenterIcon --[[ @ 0]]
	local RingGlow = WaypointCenterIcon.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	RingGlow( CircleGlow, f1_local9["lobbyRoot.lobbyNav"], function ( f29_arg0 )
		f1_arg0:updateElementState( WaypointCenterIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f29_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WaypointCenterIcon:setScale( 0.7, 0.7 ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( self, nil, false, function ( model )
		WaypointCenterIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenterIcon ) --[[ @ 0]]
	self.WaypointCenterIcon = WaypointCenterIcon --[[ @ 0]]
	
	RingGlow = CoD.onOffImage.new( f1_arg0, f1_arg1, 0.5, 0.5, -37, 39, 0.5, 0.5, -39, 37 ) --[[ @ 0]]
	RingGlow:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		}
	} ) --[[ @ 0]]
	RingGlow:linkToElementModel( RingGlow, "clamped", true, function ( model )
		f1_arg0:updateElementState( RingGlow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RingGlow:setAlpha( 0 ) --[[ @ 0]]
	RingGlow:setScale( 1.55, 1.55 ) --[[ @ 0]]
	RingGlow:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	RingGlow.image:setImage( RegisterImage( @"uie_hud_common_core_info_ring" ) ) --[[ @ 0]]
	RingGlow.image:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
	RingGlow:linkToElementModel( self, "color", true, function ( model )
		local f33_local0 = model:get() --[[ @ 0]]
		if f33_local0 ~= nil then
			RingGlow:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f33_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RingGlow:linkToElementModel( self, nil, false, function ( model )
		RingGlow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RingGlow ) --[[ @ 0]]
	self.RingGlow = RingGlow --[[ @ 0]]
	
	CircleGlow = CoD.onOffImage.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	CircleGlow:mergeStateConditions( {
		{
			stateName = "On",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		}
	} ) --[[ @ 0]]
	CircleGlow:linkToElementModel( CircleGlow, "clamped", true, function ( model )
		f1_arg0:updateElementState( CircleGlow, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CircleGlow:setAlpha( 0 ) --[[ @ 0]]
	CircleGlow:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	CircleGlow.image:setImage( RegisterImage( @"uie_ui_hud_common_circle_medium" ) ) --[[ @ 0]]
	CircleGlow.image:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_normal" ) ) --[[ @ 0]]
	CircleGlow:linkToElementModel( self, "color", true, function ( model )
		local f37_local0 = model:get() --[[ @ 0]]
		if f37_local0 ~= nil then
			CircleGlow:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f37_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CircleGlow:linkToElementModel( self, nil, false, function ( model )
		CircleGlow:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CircleGlow ) --[[ @ 0]]
	self.CircleGlow = CircleGlow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldHideWaypoint( element, f1_arg1 )
			end
		},
		{
			stateName = "NoIcon",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointIcon( f1_arg1, self )
			end
		},
		{
			stateName = "ProgressBar",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointFlatProgressBar( f1_arg1, self )
			end
		},
		{
			stateName = "NoFrame",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointFrame( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "team", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "team"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "teamMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "teamMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["interactivePrompt.activeObjectiveID"], function ( f48_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f48_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["hudItems.hacked"], function ( f49_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f49_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11.ref, function ( f50_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f50_arg0:get(),
			modelName = "ref"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.LethalOffhands.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11.activeIndex, function ( f51_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f51_arg0:get(),
			modelName = "activeIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11.count, function ( f52_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f52_arg0:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11.secondaryOffhand, function ( f53_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f53_arg0:get(),
			modelName = "secondaryOffhand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11.secondaryOffhandCount, function ( f54_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f54_arg0:get(),
			modelName = "secondaryOffhandCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f55_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f55_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f56_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f56_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f57_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f57_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = self --[[ @ 0]]
	f1_local9 = self.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]], function ( f58_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f58_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "icon", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "icon"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "progress", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "progress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.WaypointUtility.ShowMessageOnCloseIfNeeded( f1_arg1, self ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local9 = self --[[ @ 0]]
	CoD.HUDUtility.UseHintTextForActiveButtonPromptText( self, f1_arg1 ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointText ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointCenter ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.__resetProperties = function ( f62_arg0 )
	f62_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointText:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointPatternNew:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
	f62_arg0.RingGlow:completeAnimation() --[[ @ 0]]
	f62_arg0.CircleGlow:completeAnimation() --[[ @ 0]]
	f62_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f62_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f62_arg0.WaypointCenterIcon:setAlpha( 1 ) --[[ @ 0]]
	f62_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
	f62_arg0.WaypointText:setTopBottom( 0.5, 0.5, -96, -55 ) --[[ @ 0]]
	f62_arg0.WaypointText:setAlpha( 1 ) --[[ @ 0]]
	f62_arg0.WaypointPatternNew:setAlpha( 1 ) --[[ @ 0]]
	f62_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
	f62_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
	f62_arg0.RingGlow:setScale( 1.55, 1.55 ) --[[ @ 0]]
	f62_arg0.CircleGlow:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f63_arg0, f63_arg1 )
			f63_arg0:__resetProperties() --[[ @ 0]]
			f63_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f63_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointBacker ) --[[ @ 0]]
			f63_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f63_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f63_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointText:setTopBottom( 0.5, 0.5, -20.5, 20.5 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointText ) --[[ @ 0]]
			f63_arg0.WaypointPatternNew:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointPatternNew:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointPatternNew ) --[[ @ 0]]
			f63_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f63_arg0.WaypointCenterIcon:setAlpha( 1 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f63_arg0.RingGlow:completeAnimation() --[[ @ 0]]
			f63_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.RingGlow ) --[[ @ 0]]
			f63_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f64_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointBacker ) --[[ @ 0]]
			f64_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f64_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f64_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointText:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointText ) --[[ @ 0]]
			f64_arg0.WaypointPatternNew:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointPatternNew:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointPatternNew ) --[[ @ 0]]
			f64_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f64_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f64_arg0.RingGlow:completeAnimation() --[[ @ 0]]
			f64_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.RingGlow ) --[[ @ 0]]
		end
	},
	NoIcon = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f65_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointBacker ) --[[ @ 0]]
			f65_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f65_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f65_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
			f65_arg0.WaypointText:setTopBottom( 0.5, 0.5, -14, 18 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointText ) --[[ @ 0]]
			f65_arg0.WaypointPatternNew:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointPatternNew:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointPatternNew ) --[[ @ 0]]
			f65_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f65_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f65_arg0.RingGlow:completeAnimation() --[[ @ 0]]
			f65_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.RingGlow ) --[[ @ 0]]
		end
	},
	ProgressBar = {
		DefaultClip = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f66_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f66_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WaypointBacker ) --[[ @ 0]]
			f66_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f66_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f66_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f66_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f66_arg0.WaypointPatternNew:completeAnimation() --[[ @ 0]]
			f66_arg0.WaypointPatternNew:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WaypointPatternNew ) --[[ @ 0]]
			f66_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f66_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WaypointCenterIcon ) --[[ @ 0]]
			f66_arg0.RingGlow:completeAnimation() --[[ @ 0]]
			f66_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.RingGlow ) --[[ @ 0]]
		end
	},
	NoFrame = {
		DefaultClip = function ( f67_arg0, f67_arg1 )
			f67_arg0:__resetProperties() --[[ @ 0]]
			f67_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f67_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f67_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f67_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f67_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f67_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f67_arg0.WaypointCenterIcon:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.WaypointCenterIcon ) --[[ @ 0]]
			local f67_local0 = function ( f68_arg0 )
				local f68_local0 = function ( f69_arg0 )
					local f69_local0 = function ( f70_arg0 )
						local f70_local0 = function ( f71_arg0 )
							f71_arg0:beginAnimation( 2000 ) --[[ @ 0]]
							f71_arg0:registerEventHandler( "transition_complete_keyframe", f67_arg0.clipFinished ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f70_arg0:beginAnimation( 750 ) --[[ @ 0]]
						f70_arg0:setAlpha( 0 ) --[[ @ 0]]
						f70_arg0:registerEventHandler( "transition_complete_keyframe", f70_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f69_arg0:beginAnimation( 750, Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
					f69_arg0:setScale( 1.55, 1.55 ) --[[ @ 0]]
					f69_arg0:registerEventHandler( "transition_complete_keyframe", f69_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f67_arg0.RingGlow:beginAnimation( 500 ) --[[ @ 0]]
				f67_arg0.RingGlow:setAlpha( 1 ) --[[ @ 0]]
				f67_arg0.RingGlow:registerEventHandler( "interrupted_keyframe", f67_arg0.clipInterrupted ) --[[ @ 0]]
				f67_arg0.RingGlow:registerEventHandler( "transition_complete_keyframe", f68_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f67_arg0.RingGlow:completeAnimation() --[[ @ 0]]
			f67_arg0.RingGlow:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.RingGlow:setScale( 0, 0 ) --[[ @ 0]]
			f67_local0( f67_arg0.RingGlow ) --[[ @ 0]]
			local f67_local1 = function ( f72_arg0 )
				local f72_local0 = function ( f73_arg0 )
					local f73_local0 = function ( f74_arg0 )
						local f74_local0 = function ( f75_arg0 )
							f75_arg0:beginAnimation( 1800 ) --[[ @ 0]]
							f75_arg0:setAlpha( 0 ) --[[ @ 0]]
							f75_arg0:registerEventHandler( "transition_complete_keyframe", f67_arg0.clipFinished ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f74_arg0:beginAnimation( 49 ) --[[ @ 0]]
						f74_arg0:setAlpha( 1 ) --[[ @ 0]]
						f74_arg0:registerEventHandler( "transition_complete_keyframe", f74_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f73_arg0:beginAnimation( 100 ) --[[ @ 0]]
					f73_arg0:setAlpha( 0 ) --[[ @ 0]]
					f73_arg0:registerEventHandler( "transition_complete_keyframe", f73_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f67_arg0.CircleGlow:beginAnimation( 50, Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
				f67_arg0.CircleGlow:setAlpha( 1 ) --[[ @ 0]]
				f67_arg0.CircleGlow:registerEventHandler( "interrupted_keyframe", f67_arg0.clipInterrupted ) --[[ @ 0]]
				f67_arg0.CircleGlow:registerEventHandler( "transition_complete_keyframe", f72_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f67_arg0.CircleGlow:completeAnimation() --[[ @ 0]]
			f67_arg0.CircleGlow:setAlpha( 0 ) --[[ @ 0]]
			f67_local1( f67_arg0.CircleGlow ) --[[ @ 0]]
			f67_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WaypointCombatTrainingTarget.__onClose = function ( f76_arg0 )
	f76_arg0.WaypointBacker:close() --[[ @ 0]]
	f76_arg0.WaypointArrowDownNotClampedContainer:close() --[[ @ 0]]
	f76_arg0.WaypointArrowContainer:close() --[[ @ 0]]
	f76_arg0.WaypointText:close() --[[ @ 0]]
	f76_arg0.WaypointPatternNew:close() --[[ @ 0]]
	f76_arg0.WaypointCenterIcon:close() --[[ @ 0]]
	f76_arg0.RingGlow:close() --[[ @ 0]]
	f76_arg0.CircleGlow:close() --[[ @ 0]]
end
 --[[ @ 0]]
