-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:3e272191e46af824" ) --[[ @ 0]]
require( "x64:44dd810316f738ee" ) --[[ @ 0]]

CoD.BM_Bribe_Widget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BM_Bribe_Widget.__defaultWidth = 270 --[[ @ 0]]
CoD.BM_Bribe_Widget.__defaultHeight = 144 --[[ @ 0]]
CoD.BM_Bribe_Widget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.BM_Bribe_Widget ) --[[ @ 0]]
	self.id = "BM_Bribe_Widget" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonImage = LUI.UIFixedAspectRatioImage.new( 0, 0, 0, 270, 0, 0, 0, 144 ) --[[ @ 0]]
	ButtonImage:setStretchedDimension( 6 ) --[[ @ 0]]
	self:addElement( ButtonImage ) --[[ @ 0]]
	self.ButtonImage = ButtonImage --[[ @ 0]]
	
	local TitleBackground = LUI.UIImage.new( 0, 0, 0, 198, 0, 0, -0.5, 27.5 ) --[[ @ 0]]
	TitleBackground:setRGB( ColorSet.BadgeText.r, ColorSet.BadgeText.g, ColorSet.BadgeText.b ) --[[ @ 0]]
	self:addElement( TitleBackground ) --[[ @ 0]]
	self.TitleBackground = TitleBackground --[[ @ 0]]
	
	local BribeName = LUI.UIText.new( 0, 0, 3.5, 197.5, 0, 0, 0, 28 ) --[[ @ 0]]
	BribeName:setTTF( "default" ) --[[ @ 0]]
	BribeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	BribeName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	BribeName:linkToElementModel( self, "name", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			BribeName:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BribeName ) --[[ @ 0]]
	self.BribeName = BribeName --[[ @ 0]]
	
	local ItemHintText = CoD.CommonToolTip.new( f1_arg0, f1_arg1, 0.5, 0.5, -115, 115, 1, 1, 0, 45 ) --[[ @ 0]]
	ItemHintText:mergeStateConditions( {
		{
			stateName = "Mouse",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "NoHintText",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "CenterAlign",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ItemHintText:setAlpha( 0 ) --[[ @ 0]]
	ItemHintText:linkToElementModel( self, "desc", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ItemHintText.textCenterAlign:setText( Engine[@"hash_4F9F1239CFD921FE"]( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ItemHintText ) --[[ @ 0]]
	self.ItemHintText = ItemHintText --[[ @ 0]]
	
	local FocusBorder = LUI.UIImage.new( -0.01, 1.01, -4.5, 3.5, -0, 1, -4, 4 ) --[[ @ 0]]
	FocusBorder:setRGB( 1, 0.75, 0.47 ) --[[ @ 0]]
	FocusBorder:setAlpha( 0 ) --[[ @ 0]]
	FocusBorder:setScale( 1, 1.01 ) --[[ @ 0]]
	FocusBorder:setImage( RegisterImage( @"uie_ui_menu_store_focus_frame" ) ) --[[ @ 0]]
	FocusBorder:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FocusBorder:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FocusBorder:setupNineSliceShader( 18, 18 ) --[[ @ 0]]
	self:addElement( FocusBorder ) --[[ @ 0]]
	self.FocusBorder = FocusBorder --[[ @ 0]]
	
	local ContractCost = CoD.ContractItemCost.new( f1_arg0, f1_arg1, 0.5, 0.5, -92.5, 92.5, 1, 1, -31.5, -10.5 ) --[[ @ 0]]
	ContractCost.Free:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ContractCost.ContractCost:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ContractCost:linkToElementModel( self, nil, false, function ( model )
		ContractCost:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractCost ) --[[ @ 0]]
	self.ContractCost = ContractCost --[[ @ 0]]
	
	self.ButtonImage:linkToElementModel( self, "buttonImage", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			ButtonImage:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BM_Bribe_Widget.__resetProperties = function ( f9_arg0 )
	f9_arg0.ItemHintText:completeAnimation() --[[ @ 0]]
	f9_arg0.FocusBorder:completeAnimation() --[[ @ 0]]
	f9_arg0.ItemHintText:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.FocusBorder:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BM_Bribe_Widget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Focus = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.ItemHintText:completeAnimation() --[[ @ 0]]
			f11_arg0.ItemHintText:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.ItemHintText ) --[[ @ 0]]
			f11_arg0.FocusBorder:completeAnimation() --[[ @ 0]]
			f11_arg0.FocusBorder:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.FocusBorder ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BM_Bribe_Widget.__onClose = function ( f12_arg0 )
	f12_arg0.ButtonImage:close() --[[ @ 0]]
	f12_arg0.BribeName:close() --[[ @ 0]]
	f12_arg0.ItemHintText:close() --[[ @ 0]]
	f12_arg0.ContractCost:close() --[[ @ 0]]
end
 --[[ @ 0]]
