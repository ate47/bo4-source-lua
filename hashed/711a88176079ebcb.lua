-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/hud/equipment/emp/emprebootelectromagneticwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/equipment/emp/emprebootindicatorwidget" ) --[[ @ 0]]

local PostLoadFunc = function ( f1_arg0 )
	f1_arg0.EmpRebootIndicatorWidget.ProgressBar:subscribeToElementModel( f1_arg0, "startTime", function ( f2_arg0 )
		local f2_local0 = Engine[@"getmodel"]( f1_arg0:getModel(), "endTime" ) --[[ @ 0]]
		local f2_local1 = Engine[@"getmodelvalue"]( f2_arg0 ) --[[ @ 0]]
		local f2_local2 = Engine[@"getmodelvalue"]( f2_local0 ) - f2_local1 --[[ @ 0]]
		f1_arg0.EmpRebootIndicatorWidget.ProgressBar:setShaderVector( 0, (Engine[@"currentgametime"]() - Engine[@"snapshotdeltatime"]() - f2_local1) / f2_local2, 0, 0, 0 ) --[[ @ 0]]
		f1_arg0.EmpRebootIndicatorWidget.ProgressBar:beginAnimation( "updateProgress", f2_local2 ) --[[ @ 0]]
		f1_arg0.EmpRebootIndicatorWidget.ProgressBar:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmpRebootIndicator = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.EmpRebootIndicator = function ( f3_arg0, f3_arg1 )
	local self = CoD.Menu.NewForUIEditor( "EmpRebootIndicator", f3_arg0 ) --[[ @ 0]]
	local f3_local1 = self --[[ @ 0]]
	self:setClass( CoD.EmpRebootIndicator ) --[[ @ 0]]
	self.soundSet = "HUD" --[[ @ 0]]
	self:setOwner( f3_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f3_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f3_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local EmpRebootIndicatorWidget = CoD.EmpRebootIndicatorWidget.new( f3_local1, f3_arg0, 0, 0, 877, 1042, 0, 0, 892, 934 ) --[[ @ 0]]
	self:addElement( EmpRebootIndicatorWidget ) --[[ @ 0]]
	self.EmpRebootIndicatorWidget = EmpRebootIndicatorWidget --[[ @ 0]]
	
	local EmpRebootElectromagneticWidget0 = CoD.EmpRebootElectromagneticWidget.new( f3_local1, f3_arg0, 0, 0, 396, 1523, 0, 0, 818, 892 ) --[[ @ 0]]
	self:addElement( EmpRebootElectromagneticWidget0 ) --[[ @ 0]]
	self.EmpRebootElectromagneticWidget0 = EmpRebootElectromagneticWidget0 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				local f4_local0 = Engine[@"isvisibilitybitset"]( f3_arg0, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) --[[ @ 0]]
				if not f4_local0 then
					f4_local0 = Engine[@"isvisibilitybitset"]( f3_arg0, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) --[[ @ 0]]
					if not f4_local0 then
						f4_local0 = Engine[@"isvisibilitybitset"]( f3_arg0, Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"] ) --[[ @ 0]]
						if not f4_local0 then
							f4_local0 = Engine[@"isvisibilitybitset"]( f3_arg0, Enum[@"uivisibilitybit"][@"bit_migrating_host"] ) --[[ @ 0]]
						end
					end
				end
				return f4_local0
			end
		},
		{
			stateName = "InvisibleForKillcamEntity",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueTrue( f3_arg0, "hudItems.killCamHideEmpReboot" )
			end
		}
	} ) --[[ @ 0]]
	local f3_local4 = self --[[ @ 0]]
	local f3_local5 = self.subscribeToModel --[[ @ 0]]
	local f3_local6 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	f3_local5( f3_local4, f3_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f6_arg0 )
		f3_local1:updateElementState( self, {
			name = "model_validation",
			menu = f3_local1,
			controller = f3_arg0,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f3_local4 = self --[[ @ 0]]
	f3_local5 = self.subscribeToModel --[[ @ 0]]
	f3_local6 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	f3_local5( f3_local4, f3_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f7_arg0 )
		f3_local1:updateElementState( self, {
			name = "model_validation",
			menu = f3_local1,
			controller = f3_arg0,
			modelValue = f7_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f3_local4 = self --[[ @ 0]]
	f3_local5 = self.subscribeToModel --[[ @ 0]]
	f3_local6 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	f3_local5( f3_local4, f3_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]], function ( f8_arg0 )
		f3_local1:updateElementState( self, {
			name = "model_validation",
			menu = f3_local1,
			controller = f3_arg0,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_selecting_locational_killstreak"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f3_local4 = self --[[ @ 0]]
	f3_local5 = self.subscribeToModel --[[ @ 0]]
	f3_local6 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	f3_local5( f3_local4, f3_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_migrating_host"]], function ( f9_arg0 )
		f3_local1:updateElementState( self, {
			name = "model_validation",
			menu = f3_local1,
			controller = f3_arg0,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_migrating_host"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f3_local4 = self --[[ @ 0]]
	f3_local5 = self.subscribeToModel --[[ @ 0]]
	f3_local6 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	f3_local5( f3_local4, f3_local6["hudItems.killCamHideEmpReboot"], function ( f10_arg0 )
		f3_local1:updateElementState( self, {
			name = "model_validation",
			menu = f3_local1,
			controller = f3_arg0,
			modelValue = f10_arg0:get(),
			modelName = "hudItems.killCamHideEmpReboot"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f11_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f11_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f11_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		PlayClip( self, "Boot", f3_arg0 ) --[[ @ 0]]
		if not f11_local0 then
			f11_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f3_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f3_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmpRebootIndicator.__resetProperties = function ( f12_arg0 )
	f12_arg0.EmpRebootElectromagneticWidget0:completeAnimation() --[[ @ 0]]
	f12_arg0.EmpRebootIndicatorWidget:completeAnimation() --[[ @ 0]]
	f12_arg0.EmpRebootElectromagneticWidget0:setAlpha( 1 ) --[[ @ 0]]
	f12_arg0.EmpRebootIndicatorWidget:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmpRebootIndicator.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.EmpRebootIndicatorWidget:completeAnimation() --[[ @ 0]]
			f13_arg0.EmpRebootIndicatorWidget:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.EmpRebootIndicatorWidget ) --[[ @ 0]]
			f13_arg0.EmpRebootElectromagneticWidget0:completeAnimation() --[[ @ 0]]
			f13_arg0.EmpRebootElectromagneticWidget0:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.EmpRebootElectromagneticWidget0 ) --[[ @ 0]]
		end,
		Boot = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f14_local0 = function ( f15_arg0 )
				f14_arg0.EmpRebootIndicatorWidget:beginAnimation( 400, Enum[@"luitween"][@"luitween_bounce"] | Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
				f14_arg0.EmpRebootIndicatorWidget:setAlpha( 1 ) --[[ @ 0]]
				f14_arg0.EmpRebootIndicatorWidget:registerEventHandler( "interrupted_keyframe", f14_arg0.clipInterrupted ) --[[ @ 0]]
				f14_arg0.EmpRebootIndicatorWidget:registerEventHandler( "transition_complete_keyframe", f14_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f14_arg0.EmpRebootIndicatorWidget:completeAnimation() --[[ @ 0]]
			f14_arg0.EmpRebootIndicatorWidget:setAlpha( 0 ) --[[ @ 0]]
			f14_local0( f14_arg0.EmpRebootIndicatorWidget ) --[[ @ 0]]
			local f14_local1 = function ( f16_arg0 )
				f14_arg0.EmpRebootElectromagneticWidget0:beginAnimation( 400, Enum[@"luitween"][@"luitween_bounce"] | Enum[@"luitween"][@"luitween_ease_in"] ) --[[ @ 0]]
				f14_arg0.EmpRebootElectromagneticWidget0:setAlpha( 1 ) --[[ @ 0]]
				f14_arg0.EmpRebootElectromagneticWidget0:registerEventHandler( "interrupted_keyframe", f14_arg0.clipInterrupted ) --[[ @ 0]]
				f14_arg0.EmpRebootElectromagneticWidget0:registerEventHandler( "transition_complete_keyframe", f14_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f14_arg0.EmpRebootElectromagneticWidget0:completeAnimation() --[[ @ 0]]
			f14_arg0.EmpRebootElectromagneticWidget0:setAlpha( 0 ) --[[ @ 0]]
			f14_local1( f14_arg0.EmpRebootElectromagneticWidget0 ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.EmpRebootIndicatorWidget:completeAnimation() --[[ @ 0]]
			f17_arg0.EmpRebootIndicatorWidget:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.EmpRebootIndicatorWidget ) --[[ @ 0]]
		end
	},
	InvisibleForKillcamEntity = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f18_arg0.EmpRebootIndicatorWidget:completeAnimation() --[[ @ 0]]
			f18_arg0.EmpRebootIndicatorWidget:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.EmpRebootIndicatorWidget ) --[[ @ 0]]
			f18_arg0.EmpRebootElectromagneticWidget0:completeAnimation() --[[ @ 0]]
			f18_arg0.EmpRebootElectromagneticWidget0:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.EmpRebootElectromagneticWidget0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmpRebootIndicator.__onClose = function ( f19_arg0 )
	f19_arg0.EmpRebootIndicatorWidget:close() --[[ @ 0]]
	f19_arg0.EmpRebootElectromagneticWidget0:close() --[[ @ 0]]
end
 --[[ @ 0]]
