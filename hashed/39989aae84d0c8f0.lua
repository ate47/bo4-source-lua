-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:7a711f5c262e7f92" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/genericvhudinfoarea" ) --[[ @ 0]]
require( "x64:22ce116d9485ec2b" ) --[[ @ 0]]

CoD.genericVHUDRightContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.genericVHUDRightContainer.__defaultWidth = 133 --[[ @ 0]]
CoD.genericVHUDRightContainer.__defaultHeight = 700 --[[ @ 0]]
CoD.genericVHUDRightContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIVerticalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 10, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Middle ) --[[ @ 0]]
	self:setClass( CoD.genericVHUDRightContainer ) --[[ @ 0]]
	self.id = "genericVHUDRightContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local speed = CoD.genericVHUDInfoArea.new( f1_arg0, f1_arg1, 0, 0, 0, 133, 0, 0, 219, 282 ) --[[ @ 0]]
	speed:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "showSpeed" )
			end
		}
	} ) --[[ @ 0]]
	speed:linkToElementModel( speed, "showSpeed", true, function ( model )
		f1_arg0:updateElementState( speed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "showSpeed"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	speed:setYRot( -30 ) --[[ @ 0]]
	speed:linkToElementModel( self, "bindings.color", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			speed:setRGB( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	speed:linkToElementModel( self, nil, false, function ( model )
		speed:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	speed:linkToElementModel( self, "speed", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			speed.value:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( speed ) --[[ @ 0]]
	self.speed = speed --[[ @ 0]]
	
	local vhudagrNotificationMissiles = CoD.genericVHUD3MissileCounter.new( f1_arg0, f1_arg1, 0, 0, -28.5, 161.5, 0, 0, 292, 432 ) --[[ @ 0]]
	vhudagrNotificationMissiles:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "rocketTitle" )
			end
		}
	} ) --[[ @ 0]]
	vhudagrNotificationMissiles:linkToElementModel( vhudagrNotificationMissiles, "rocketTitle", true, function ( model )
		f1_arg0:updateElementState( vhudagrNotificationMissiles, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rocketTitle"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudagrNotificationMissiles:linkToElementModel( self, "bindings.color", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			vhudagrNotificationMissiles:setRGB( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	vhudagrNotificationMissiles:linkToElementModel( self, nil, false, function ( model )
		vhudagrNotificationMissiles:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudagrNotificationMissiles ) --[[ @ 0]]
	self.vhudagrNotificationMissiles = vhudagrNotificationMissiles --[[ @ 0]]
	
	local genericVHUDProgressBar = CoD.genericVHUDProgressBar.new( f1_arg0, f1_arg1, 0, 0, 3, 133, 0, 0, 442, 481 ) --[[ @ 0]]
	genericVHUDProgressBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "secondaryAmmoTitle" )
			end
		},
		{
			stateName = "Recharging",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThan( element, f1_arg1, "ammo2Reloading", 1 )
			end
		}
	} ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( genericVHUDProgressBar, "secondaryAmmoTitle", true, function ( model )
		f1_arg0:updateElementState( genericVHUDProgressBar, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "secondaryAmmoTitle"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( genericVHUDProgressBar, "ammo2Reloading", true, function ( model )
		f1_arg0:updateElementState( genericVHUDProgressBar, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ammo2Reloading"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	genericVHUDProgressBar:setYRot( -30 ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( self, "bindings.color", true, function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			genericVHUDProgressBar:setRGB( f15_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( self, nil, false, function ( model )
		genericVHUDProgressBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( self, "secondaryAmmoSecondaryText", true, function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			genericVHUDProgressBar.flashingText:setText( f17_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	genericVHUDProgressBar:linkToElementModel( self, "secondaryAmmoTitle", true, function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			genericVHUDProgressBar.SignalText:setText( f18_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( genericVHUDProgressBar ) --[[ @ 0]]
	self.genericVHUDProgressBar = genericVHUDProgressBar --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.genericVHUDRightContainer.__onClose = function ( f19_arg0 )
	f19_arg0.speed:close() --[[ @ 0]]
	f19_arg0.vhudagrNotificationMissiles:close() --[[ @ 0]]
	f19_arg0.genericVHUDProgressBar:close() --[[ @ 0]]
end
 --[[ @ 0]]
