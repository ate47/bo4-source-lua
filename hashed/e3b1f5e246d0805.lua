-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/store/storefeaturedcenterbutton" ) --[[ @ 0]]
require( "ui/uieditor/widgets/store/storefeaturedframegrid" ) --[[ @ 0]]
require( "ui/uieditor/widgets/store/storespinner" ) --[[ @ 0]]
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]

CoD.Store_FeaturedFrame = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Store_FeaturedFrame.__defaultWidth = 1392 --[[ @ 0]]
CoD.Store_FeaturedFrame.__defaultHeight = 680 --[[ @ 0]]
CoD.Store_FeaturedFrame.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	SetControllerModelValue( f1_arg1, "StoreRoot.storeError", 0 ) --[[ @ 0]]
	self:setClass( CoD.Store_FeaturedFrame ) --[[ @ 0]]
	self.id = "Store_FeaturedFrame" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Grid = CoD.StoreFeaturedFrameGrid.new( f1_arg0, f1_arg1, 0.5, 0.5, -695, 694, 0.5, 0.5, -340, 340 ) --[[ @ 0]]
	self:addElement( Grid ) --[[ @ 0]]
	self.Grid = Grid --[[ @ 0]]
	
	local storeSpinner = CoD.StoreSpinner.new( f1_arg0, f1_arg1, 0.5, 0.5, -48, 48, 0.5, 0.5, -48, 48 ) --[[ @ 0]]
	storeSpinner:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( storeSpinner ) --[[ @ 0]]
	self.storeSpinner = storeSpinner --[[ @ 0]]
	
	local TextBox = LUI.UIText.new( 0.5, 0.5, -500, 500, 0.5, 0.5, -18.5, 18.5 ) --[[ @ 0]]
	TextBox:setAlpha( 0 ) --[[ @ 0]]
	TextBox:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/store_empty" ) ) --[[ @ 0]]
	TextBox:setTTF( "default" ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_middle"] ) --[[ @ 0]]
	self:addElement( TextBox ) --[[ @ 0]]
	self.TextBox = TextBox --[[ @ 0]]
	
	local List = LUI.UIList.new( f1_arg0, f1_arg1, 32, 0, nil, false, false, false, false ) --[[ @ 0]]
	List:setLeftRight( 0.5, 0.5, -518, 518 ) --[[ @ 0]]
	List:setTopBottom( 0.5, 0.5, -340, 340 ) --[[ @ 0]]
	List:setWidgetType( CoD.StoreFeaturedCenterButton ) --[[ @ 0]]
	List:setHorizontalCount( 3 ) --[[ @ 0]]
	List:setVerticalCount( 2 ) --[[ @ 0]]
	List:setSpacing( 32 ) --[[ @ 0]]
	List:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	List:setDataSource( "StoreFeaturedProductList" ) --[[ @ 0]]
	List:linkToElementModel( List, "purchasestatus", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		RecordStoreOnItemGainFocus( self, element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		SetControllerModelValue( f1_arg1, "StoreRoot.isCategoryListInFocus", 0 ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		RecordStoreOnItemLoseFocus( self, element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "purchasestatus", Enum[@"storeproductpurchasestatus"][@"store_product_not_purchased"] ) then
			PurchaseProduct( self, menu, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "action" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "purchasestatus", Enum[@"storeproductpurchasestatus"][@"store_product_purchased"] ) then
			PurchaseProduct( self, menu, element, controller ) --[[ @ 0]]
			PlaySoundSetSound( self, "action" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "purchasestatus", Enum[@"storeproductpurchasestatus"][@"store_product_not_purchased"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/purchase", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "purchasestatus", Enum[@"storeproductpurchasestatus"][@"store_product_purchased"] ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/store_download", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( List ) --[[ @ 0]]
	self.List = List --[[ @ 0]]
	
	local RightPageOver = nil --[[ @ 0]]
	
	RightPageOver = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, 518, 585, 0.5, 0.5, -340, -295 ) --[[ @ 0]]
	RightPageOver:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	RightPageOver:appendEventHandler( "input_source_changed", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( RightPageOver, f9_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local6 = RightPageOver --[[ @ 0]]
	local LeftPageOver = RightPageOver.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	LeftPageOver( f1_local6, f1_local8.LastInput, function ( f10_arg0 )
		f1_arg0:updateElementState( RightPageOver, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RightPageOver.KeyMouseImage:setImage( RegisterImage( @"uie_bumperright" ) ) --[[ @ 0]]
	RightPageOver:subscribeToGlobalModel( f1_arg1, "Controller", "right_trigger_button_image", function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			RightPageOver.ControllerImage:setImage( RegisterImage( f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightPageOver:registerEventHandler( "gain_focus", function ( element, event )
		local f12_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f12_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f12_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f12_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightPageOver, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollDown( self.List ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightPageOver ) --[[ @ 0]]
	self.RightPageOver = RightPageOver --[[ @ 0]]
	
	LeftPageOver = nil --[[ @ 0]]
	
	LeftPageOver = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0.5, 0.5, -585, -518, 0.5, 0.5, -340, -295 ) --[[ @ 0]]
	LeftPageOver:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	LeftPageOver:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( LeftPageOver, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local8 = LeftPageOver --[[ @ 0]]
	f1_local6 = LeftPageOver.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local8, f1_local9.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( LeftPageOver, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LeftPageOver:subscribeToGlobalModel( f1_arg1, "Controller", "left_trigger_button_image", function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			LeftPageOver.ControllerImage:setImage( RegisterImage( f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeftPageOver:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftPageOver, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollUp( self.List ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( LeftPageOver ) --[[ @ 0]]
	self.LeftPageOver = LeftPageOver --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Loading",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 0 )
			end
		},
		{
			stateName = "NoItems",
			condition = function ( menu, element, event )
				local f23_local0 --[[ @ 0]]
				if not HasStoreItems( f1_arg1 ) then
					f23_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 1 ) --[[ @ 0]]
				else
					f23_local0 = false --[[ @ 0]]
				end
				return f23_local0
			end
		},
		{
			stateName = "Ready",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local8 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local8, f1_local9["StoreRoot.ready"], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "StoreRoot.ready"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_rtrig"], nil, function ( element, menu, controller, model )
		if IsPC() then
			CoD.GridAndListUtility.ScrollDown( self.List ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_rtrig"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"luibutton"][@"lui_key_ltrig"], nil, function ( element, menu, controller, model )
		if IsPC() then
			CoD.GridAndListUtility.ScrollUp( self.List ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_ltrig"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "StoreRoot.ready", function ( model )
		local f30_local0 = self --[[ @ 0]]
		if not HasStoreItems( f1_arg1 ) and CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 1 ) and not IsPC() then
			DelayGoBack( f1_arg0, f1_arg1, 0 ) --[[ @ 0]]
			DisplayEmptyStoreSystemDialog( f1_arg1 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 1 ) then
			SetElementProperty( f30_local0, "m_disableKeyboardNavigation", false ) --[[ @ 0]]
			CoD.GridAndListUtility.UpdateDataSource( self.List, true, true, true ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.ready", 0 ) then
			SetElementProperty( f30_local0, "m_disableKeyboardNavigation", false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "StoreRoot.storeError", function ( model )
		local f31_local0 = self --[[ @ 0]]
		if IsPC() and CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.storeError", 1 ) then
			CoD.PCUtility.ShowBattleNetCatalogError( f1_arg0, f1_arg1 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "StoreRoot.storeError", 2 ) and IsPC() then
			CoD.PCUtility.ShowBattleNetReconciliationError( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	List.id = "List" --[[ @ 0]]
	if CoD.isPC then
		RightPageOver.id = "RightPageOver" --[[ @ 0]]
	end
	if CoD.isPC then
		LeftPageOver.id = "LeftPageOver" --[[ @ 0]]
	end
	self.__defaultFocus = List --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Store_FeaturedFrame.__resetProperties = function ( f32_arg0 )
	f32_arg0.TextBox:completeAnimation() --[[ @ 0]]
	f32_arg0.List:completeAnimation() --[[ @ 0]]
	f32_arg0.storeSpinner:completeAnimation() --[[ @ 0]]
	f32_arg0.Grid:completeAnimation() --[[ @ 0]]
	f32_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
	f32_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
	f32_arg0.TextBox:setAlpha( 0 ) --[[ @ 0]]
	f32_arg0.List:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.storeSpinner:setAlpha( 0 ) --[[ @ 0]]
	f32_arg0.Grid:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.LeftPageOver:setAlpha( 1 ) --[[ @ 0]]
	f32_arg0.RightPageOver:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Store_FeaturedFrame.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f33_arg0.TextBox:completeAnimation() --[[ @ 0]]
			f33_arg0.TextBox:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.TextBox ) --[[ @ 0]]
			f33_arg0.List:completeAnimation() --[[ @ 0]]
			f33_arg0.List:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.List ) --[[ @ 0]]
		end
	},
	Loading = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f34_local0 = function ( f35_arg0 )
				f34_arg0.Grid:beginAnimation( 150 ) --[[ @ 0]]
				f34_arg0.Grid:setAlpha( 1 ) --[[ @ 0]]
				f34_arg0.Grid:registerEventHandler( "interrupted_keyframe", f34_arg0.clipInterrupted ) --[[ @ 0]]
				f34_arg0.Grid:registerEventHandler( "transition_complete_keyframe", f34_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f34_arg0.Grid:completeAnimation() --[[ @ 0]]
			f34_arg0.Grid:setAlpha( 0 ) --[[ @ 0]]
			f34_local0( f34_arg0.Grid ) --[[ @ 0]]
			local f34_local1 = function ( f36_arg0 )
				f34_arg0.storeSpinner:beginAnimation( 150 ) --[[ @ 0]]
				f34_arg0.storeSpinner:setAlpha( 1 ) --[[ @ 0]]
				f34_arg0.storeSpinner:registerEventHandler( "interrupted_keyframe", f34_arg0.clipInterrupted ) --[[ @ 0]]
				f34_arg0.storeSpinner:registerEventHandler( "transition_complete_keyframe", f34_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f34_arg0.storeSpinner:completeAnimation() --[[ @ 0]]
			f34_arg0.storeSpinner:setAlpha( 0 ) --[[ @ 0]]
			f34_local1( f34_arg0.storeSpinner ) --[[ @ 0]]
			local f34_local2 = function ( f37_arg0 )
				f34_arg0.List:beginAnimation( 150 ) --[[ @ 0]]
				f34_arg0.List:registerEventHandler( "interrupted_keyframe", f34_arg0.clipInterrupted ) --[[ @ 0]]
				f34_arg0.List:registerEventHandler( "transition_complete_keyframe", f34_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f34_arg0.List:completeAnimation() --[[ @ 0]]
			f34_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f34_local2( f34_arg0.List ) --[[ @ 0]]
			f34_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
			f34_arg0.RightPageOver:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.RightPageOver ) --[[ @ 0]]
			f34_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
			f34_arg0.LeftPageOver:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.LeftPageOver ) --[[ @ 0]]
		end
	},
	NoItems = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f38_arg0.Grid:completeAnimation() --[[ @ 0]]
			f38_arg0.Grid:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.Grid ) --[[ @ 0]]
			f38_arg0.TextBox:completeAnimation() --[[ @ 0]]
			f38_arg0.TextBox:setAlpha( 1 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.TextBox ) --[[ @ 0]]
			f38_arg0.List:completeAnimation() --[[ @ 0]]
			f38_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.List ) --[[ @ 0]]
			f38_arg0.RightPageOver:completeAnimation() --[[ @ 0]]
			f38_arg0.RightPageOver:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.RightPageOver ) --[[ @ 0]]
			f38_arg0.LeftPageOver:completeAnimation() --[[ @ 0]]
			f38_arg0.LeftPageOver:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.LeftPageOver ) --[[ @ 0]]
		end
	},
	Ready = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f39_arg0.List:completeAnimation() --[[ @ 0]]
			f39_arg0.List:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.List ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Store_FeaturedFrame.__onClose = function ( f40_arg0 )
	f40_arg0.Grid:close() --[[ @ 0]]
	f40_arg0.storeSpinner:close() --[[ @ 0]]
	f40_arg0.List:close() --[[ @ 0]]
	f40_arg0.RightPageOver:close() --[[ @ 0]]
	f40_arg0.LeftPageOver:close() --[[ @ 0]]
end
 --[[ @ 0]]
