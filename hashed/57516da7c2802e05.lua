-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/mphudwidgets/waypoint_textbg" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointarrowcontainer" ) --[[ @ 0]]
require( "x64:3b4f84b3d9622974" ) --[[ @ 0]]
require( "x64:4fb2a50f7282d0bf" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointcenter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/waypointprogressbar" ) --[[ @ 0]]
require( "x64:576c14e1bc07cd98" ) --[[ @ 0]]

CoD.WaypointBomb = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WaypointBomb.__defaultWidth = 120 --[[ @ 0]]
CoD.WaypointBomb.__defaultHeight = 180 --[[ @ 0]]
CoD.WaypointBomb.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WaypointBomb ) --[[ @ 0]]
	self.id = "WaypointBomb" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ProgressBarBGBlur = LUI.UIImage.new( 0.5, 0.5, -179, 179, 0.5, 0.5, 61, 79 ) --[[ @ 0]]
	ProgressBarBGBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ProgressBarBGBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ProgressBarBGBlur ) --[[ @ 0]]
	self.ProgressBarBGBlur = ProgressBarBGBlur --[[ @ 0]]
	
	local ProgressBarBGTint = LUI.UIImage.new( 0.5, 0.5, -179, 179, 0.5, 0.5, 61, 79 ) --[[ @ 0]]
	ProgressBarBGTint:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ProgressBarBGTint:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( ProgressBarBGTint ) --[[ @ 0]]
	self.ProgressBarBGTint = ProgressBarBGTint --[[ @ 0]]
	
	local ProgressBar = CoD.WaypointProgressBar.new( f1_arg0, f1_arg1, 0.5, 0.5, -175, 175, 0.5, 0.5, 65, 75 ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, nil, false, function ( model )
		ProgressBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			ProgressBar.ProgressBarBacking:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ProgressBar.ProgressBarWhite:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:linkToElementModel( self, "objId", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			ProgressBar.ProgressBarColor:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.01, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressBar ) --[[ @ 0]]
	self.ProgressBar = ProgressBar --[[ @ 0]]
	
	local WaypointArrowDownNotClampedContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:mergeStateConditions( {
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f6_local0 --[[ @ 0]]
				if not ParentObjectivePropertyIsTrue( element, "hide_arrow" ) and not CoD.HUDUtility.IsObjectiveXHashPropertyValueEqualTo( self, @"hash_50129B22B0CDE96B", 1 ) then
					f6_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" ) --[[ @ 0]]
				else
					f6_local0 = false --[[ @ 0]]
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "id", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( WaypointArrowDownNotClampedContainer, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointArrowDownNotClampedContainer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowDownNotClampedContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowDownNotClampedContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
	self.WaypointArrowDownNotClampedContainer = WaypointArrowDownNotClampedContainer --[[ @ 0]]
	
	local WaypointArrowContainer = CoD.WaypointArrowContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -23, 23 ) --[[ @ 0]]
	WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, "direction", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			WaypointArrowContainer:setZRot( Add( 90, f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointArrowContainer:linkToElementModel( self, nil, false, function ( model )
		WaypointArrowContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointArrowContainer ) --[[ @ 0]]
	self.WaypointArrowContainer = WaypointArrowContainer --[[ @ 0]]
	
	local WaypointText = CoD.Waypoint_TextBG.new( f1_arg0, f1_arg1, 0.5, 0.5, -60, 60, 0.5, 0.5, -88, -56 ) --[[ @ 0]]
	WaypointText:mergeStateConditions( {
		{
			stateName = "Contested",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsContested( f1_arg1, self )
			end
		},
		{
			stateName = "Protect",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointAsProtect( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "distanceText", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "distanceText"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "clamped", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( WaypointText, "text", true, function ( model )
		f1_arg0:updateElementState( WaypointText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, nil, false, function ( model )
		WaypointText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "text", true, function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			WaypointText.WaypointTextWithBG.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( f20_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointText:linkToElementModel( self, "distanceText", true, function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			WaypointText.DistanceTextWithBG.text:setText( LocalizeIntoStringIfNotEmpty( @"hash_37235825812D46C6", f21_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointText ) --[[ @ 0]]
	self.WaypointText = WaypointText --[[ @ 0]]
	
	local WaypointBacker = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointBacker:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	WaypointBacker:linkToElementModel( self, "waypointBacking01", true, function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			WaypointBacker:setImage( RegisterImage( f22_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointBacker ) --[[ @ 0]]
	self.WaypointBacker = WaypointBacker --[[ @ 0]]
	
	local WaypointPattern = LUI.UIImage.new( 0.5, 0.5, -37, 39, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointPattern:setAlpha( 0.92 ) --[[ @ 0]]
	WaypointPattern:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_led" ) ) --[[ @ 0]]
	WaypointPattern:linkToElementModel( self, "color", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			WaypointPattern:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f23_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointPattern ) --[[ @ 0]]
	self.WaypointPattern = WaypointPattern --[[ @ 0]]
	
	local ArrowRight = CoD.WaypointBomb_PlantArrowWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, 48, 72, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	ArrowRight:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "gamemodeFlags", 1 )
			end
		}
	} ) --[[ @ 0]]
	ArrowRight:linkToElementModel( ArrowRight, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( ArrowRight, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ArrowRight:linkToElementModel( self, "color", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			ArrowRight:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f26_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ArrowRight:linkToElementModel( self, nil, false, function ( model )
		ArrowRight:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArrowRight ) --[[ @ 0]]
	self.ArrowRight = ArrowRight --[[ @ 0]]
	
	local ArrowLeft = CoD.WaypointBomb_PlantArrowWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -72, -48, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	ArrowLeft:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "gamemodeFlags", 1 )
			end
		}
	} ) --[[ @ 0]]
	ArrowLeft:linkToElementModel( ArrowLeft, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( ArrowLeft, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ArrowLeft:setYRot( 180 ) --[[ @ 0]]
	ArrowLeft:linkToElementModel( self, "color", true, function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			ArrowLeft:setRGB( CoD.WaypointUtility.ConvertToBaseColor( f30_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ArrowLeft:linkToElementModel( self, nil, false, function ( model )
		ArrowLeft:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ArrowLeft ) --[[ @ 0]]
	self.ArrowLeft = ArrowLeft --[[ @ 0]]
	
	local BombTimer = CoD.WaypointBomb_Timer.new( f1_arg0, f1_arg1, 0.5, 0.5, -57, 57, 0.5, 0.5, 61.5, 88.5 ) --[[ @ 0]]
	BombTimer:mergeStateConditions( {
		{
			stateName = "TimeLow",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "gamemodeFlags", 1 ) and CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "gameScore.gameTimeLow", 1 )
			end
		},
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "gamemodeFlags", 1 )
			end
		}
	} ) --[[ @ 0]]
	BombTimer:linkToElementModel( BombTimer, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( BombTimer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local WaypointProgressMeter = BombTimer --[[ @ 0]]
	local WaypointProgressMeterEmpty = BombTimer.subscribeToModel --[[ @ 0]]
	local WaypointCenterIcon2 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	WaypointProgressMeterEmpty( WaypointProgressMeter, WaypointCenterIcon2["gameScore.gameTimeLow"], function ( f35_arg0 )
		f1_arg0:updateElementState( BombTimer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "gameScore.gameTimeLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	BombTimer:linkToElementModel( self, nil, false, function ( model )
		BombTimer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( BombTimer ) --[[ @ 0]]
	self.BombTimer = BombTimer --[[ @ 0]]
	
	WaypointProgressMeterEmpty = LUI.UIImage.new( 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:setRGB( 1, 0.98, 0.91 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:linkToElementModel( self, "waypointBacking02", true, function ( model )
		local f37_local0 = model:get() --[[ @ 0]]
		if f37_local0 ~= nil then
			WaypointProgressMeterEmpty:setImage( RegisterImage( f37_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointProgressMeterEmpty ) --[[ @ 0]]
	self.WaypointProgressMeterEmpty = WaypointProgressMeterEmpty --[[ @ 0]]
	
	WaypointProgressMeter = CoD.WaypointProgressRing.new( f1_arg0, f1_arg1, 0.5, 0.5, -35, 35, 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, nil, false, function ( model )
		WaypointProgressMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f39_local0 = model:get() --[[ @ 0]]
		if f39_local0 ~= nil then
			WaypointProgressMeter.progressMeter:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f39_local0, 1 ), CoD.GetVectorComponentFromString( f39_local0, 2 ), CoD.GetVectorComponentFromString( f39_local0, 3 ), CoD.GetVectorComponentFromString( f39_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	WaypointProgressMeter:linkToElementModel( self, "objId", true, function ( model )
		local f40_local0 = model:get() --[[ @ 0]]
		if f40_local0 ~= nil then
			WaypointProgressMeter.progressMeterColoredByUsing:setShaderVector( 4, CoD.WaypointUtility.SetProgressMeterSegmentationIfNeeded( f1_arg1, 0.07, CoD.GetVectorComponentFromString( f40_local0, 1 ), CoD.GetVectorComponentFromString( f40_local0, 2 ), CoD.GetVectorComponentFromString( f40_local0, 3 ), CoD.GetVectorComponentFromString( f40_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( WaypointProgressMeter ) --[[ @ 0]]
	self.WaypointProgressMeter = WaypointProgressMeter --[[ @ 0]]
	
	WaypointCenterIcon2 = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -36, 40 ) --[[ @ 0]]
	WaypointCenterIcon2:setAlpha( 0.1 ) --[[ @ 0]]
	WaypointCenterIcon2:linkToElementModel( self, nil, false, function ( model )
		WaypointCenterIcon2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenterIcon2 ) --[[ @ 0]]
	self.WaypointCenterIcon2 = WaypointCenterIcon2 --[[ @ 0]]
	
	local WaypointCenterIcon = CoD.WaypointCenter.new( f1_arg0, f1_arg1, 0.5, 0.5, -38, 38, 0.5, 0.5, -38, 38 ) --[[ @ 0]]
	WaypointCenterIcon:linkToElementModel( self, nil, false, function ( model )
		WaypointCenterIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WaypointCenterIcon ) --[[ @ 0]]
	self.WaypointCenterIcon = WaypointCenterIcon --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Explosion",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "gamemodeFlags", 2 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldHideWaypoint( element, f1_arg1 )
			end
		},
		{
			stateName = "NoIcon",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointIcon( f1_arg1, self )
			end
		},
		{
			stateName = "ProgressBar",
			condition = function ( menu, element, event )
				return CoD.WaypointUtility.ShouldShowWaypointFlatProgressBar( f1_arg1, self )
			end
		},
		{
			stateName = "NoFrame",
			condition = function ( menu, element, event )
				return not CoD.WaypointUtility.ShouldShowWaypointFrame( f1_arg1, self )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "gamemodeFlags", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "gamemodeFlags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "team", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "team"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clientUseMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clientUseMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "state", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "state"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "teamMask", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "teamMask"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isOffscreen", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isOffscreen"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local16 = self --[[ @ 0]]
	local f1_local17 = self.subscribeToModel --[[ @ 0]]
	local f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["interactivePrompt.activeObjectiveID"], function ( f54_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f54_arg0:get(),
			modelName = "interactivePrompt.activeObjectiveID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["hudItems.hacked"], function ( f55_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f55_arg0:get(),
			modelName = "hudItems.hacked"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.ref, function ( f56_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f56_arg0:get(),
			modelName = "ref"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = DataSources.LethalOffhands.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.activeIndex, function ( f57_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f57_arg0:get(),
			modelName = "activeIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = DataSources.CurrentPrimaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.count, function ( f58_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f58_arg0:get(),
			modelName = "count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.secondaryOffhand, function ( f59_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f59_arg0:get(),
			modelName = "secondaryOffhand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = DataSources.CurrentSecondaryOffhand.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.secondaryOffhandCount, function ( f60_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f60_arg0:get(),
			modelName = "secondaryOffhandCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f61_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f61_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]], function ( f62_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f62_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]], function ( f63_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f63_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_59333FC97F7870"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local16 = self --[[ @ 0]]
	f1_local17 = self.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]], function ( f64_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f64_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_1C630DB86D235A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "icon", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "icon"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "progress", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "progress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.WaypointUtility.ShowMessageOnCloseIfNeeded( f1_arg1, self ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local17 = self --[[ @ 0]]
	CoD.HUDUtility.UseHintTextForActiveButtonPromptText( self, f1_arg1 ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointText ) --[[ @ 0]]
	CoD.HUDUtility.SetWaypointElementToFadeAlpha( self, self.WaypointCenter ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WaypointBomb.__resetProperties = function ( f68_arg0 )
	f68_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
	f68_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
	f68_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
	f68_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointText:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
	f68_arg0.ArrowRight:completeAnimation() --[[ @ 0]]
	f68_arg0.ArrowLeft:completeAnimation() --[[ @ 0]]
	f68_arg0.BombTimer:completeAnimation() --[[ @ 0]]
	f68_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f68_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
	f68_arg0.ProgressBar:setLeftRight( 0.5, 0.5, -175, 175 ) --[[ @ 0]]
	f68_arg0.ProgressBar:setTopBottom( 0.5, 0.5, 65, 75 ) --[[ @ 0]]
	f68_arg0.ProgressBar:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGBlur:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGBlur:setTopBottom( 0.5, 0.5, 61, 79 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGBlur:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGTint:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGTint:setTopBottom( 0.5, 0.5, 61, 79 ) --[[ @ 0]]
	f68_arg0.ProgressBarBGTint:setAlpha( 0.2 ) --[[ @ 0]]
	f68_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.WaypointCenterIcon2:setAlpha( 0.1 ) --[[ @ 0]]
	f68_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
	f68_arg0.WaypointText:setTopBottom( 0.5, 0.5, -88, -56 ) --[[ @ 0]]
	f68_arg0.WaypointText:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.WaypointProgressMeterEmpty:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.WaypointProgressMeter:setLeftRight( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	f68_arg0.WaypointProgressMeter:setTopBottom( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
	f68_arg0.WaypointProgressMeter:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.WaypointCenterIcon:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.WaypointPattern:setAlpha( 0.92 ) --[[ @ 0]]
	f68_arg0.ArrowRight:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.ArrowLeft:setAlpha( 1 ) --[[ @ 0]]
	f68_arg0.BombTimer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WaypointBomb.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f69_arg0, f69_arg1 )
			f69_arg0:__resetProperties() --[[ @ 0]]
			f69_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f69_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f69_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f69_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f69_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f69_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f69_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.ProgressBar ) --[[ @ 0]]
			f69_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f69_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f69_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f69_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f69_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f69_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.WaypointBacker ) --[[ @ 0]]
		end
	},
	Explosion = {
		DefaultClip = function ( f70_arg0, f70_arg1 )
			f70_arg0:__resetProperties() --[[ @ 0]]
			f70_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f70_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f70_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f70_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f70_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f70_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f70_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.ProgressBar ) --[[ @ 0]]
			f70_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f70_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f70_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f70_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f70_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f70_arg0.WaypointBacker:setAlpha( 1 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.WaypointBacker ) --[[ @ 0]]
			f70_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f71_arg0, f71_arg1 )
			f71_arg0:__resetProperties() --[[ @ 0]]
			f71_arg0:setupElementClipCounter( 15 ) --[[ @ 0]]
			f71_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f71_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f71_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f71_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f71_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f71_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ProgressBar ) --[[ @ 0]]
			f71_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f71_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f71_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointText:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointText ) --[[ @ 0]]
			f71_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointBacker ) --[[ @ 0]]
			f71_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointPattern ) --[[ @ 0]]
			f71_arg0.ArrowRight:completeAnimation() --[[ @ 0]]
			f71_arg0.ArrowRight:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ArrowRight ) --[[ @ 0]]
			f71_arg0.ArrowLeft:completeAnimation() --[[ @ 0]]
			f71_arg0.ArrowLeft:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.ArrowLeft ) --[[ @ 0]]
			f71_arg0.BombTimer:completeAnimation() --[[ @ 0]]
			f71_arg0.BombTimer:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.BombTimer ) --[[ @ 0]]
			f71_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f71_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f71_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f71_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f71_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.WaypointCenterIcon ) --[[ @ 0]]
		end
	},
	NoIcon = {
		DefaultClip = function ( f72_arg0, f72_arg1 )
			f72_arg0:__resetProperties() --[[ @ 0]]
			f72_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f72_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f72_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f72_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f72_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f72_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f72_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ProgressBar ) --[[ @ 0]]
			f72_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f72_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f72_arg0.WaypointText:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointText:setLeftRight( 0.5, 0.5, -60, 60 ) --[[ @ 0]]
			f72_arg0.WaypointText:setTopBottom( 0.5, 0.5, -14, 18 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointText ) --[[ @ 0]]
			f72_arg0.ArrowRight:completeAnimation() --[[ @ 0]]
			f72_arg0.ArrowRight:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ArrowRight ) --[[ @ 0]]
			f72_arg0.ArrowLeft:completeAnimation() --[[ @ 0]]
			f72_arg0.ArrowLeft:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.ArrowLeft ) --[[ @ 0]]
			f72_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f72_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f72_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f72_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f72_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f72_arg0.clipFinished( f72_arg0.WaypointCenterIcon ) --[[ @ 0]]
		end
	},
	ProgressBar = {
		DefaultClip = function ( f73_arg0, f73_arg1 )
			f73_arg0:__resetProperties() --[[ @ 0]]
			f73_arg0:setupElementClipCounter( 14 ) --[[ @ 0]]
			f73_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f73_arg0.ProgressBarBGBlur:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
			f73_arg0.ProgressBarBGBlur:setTopBottom( 0.5, 0.5, -35, -17 ) --[[ @ 0]]
			f73_arg0.ProgressBarBGBlur:setAlpha( 1 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f73_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f73_arg0.ProgressBarBGTint:setLeftRight( 0.5, 0.5, -179, 179 ) --[[ @ 0]]
			f73_arg0.ProgressBarBGTint:setTopBottom( 0.5, 0.5, -35, -17 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f73_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f73_arg0.ProgressBar:setLeftRight( 0.5, 0.5, -175, 175 ) --[[ @ 0]]
			f73_arg0.ProgressBar:setTopBottom( 0.5, 0.5, -31, -21 ) --[[ @ 0]]
			f73_arg0.ProgressBar:setAlpha( 1 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.ProgressBar ) --[[ @ 0]]
			f73_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f73_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointArrowContainer:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f73_arg0.WaypointBacker:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointBacker:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointBacker ) --[[ @ 0]]
			f73_arg0.WaypointPattern:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointPattern:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointPattern ) --[[ @ 0]]
			f73_arg0.ArrowRight:completeAnimation() --[[ @ 0]]
			f73_arg0.ArrowRight:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.ArrowRight ) --[[ @ 0]]
			f73_arg0.ArrowLeft:completeAnimation() --[[ @ 0]]
			f73_arg0.ArrowLeft:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.ArrowLeft ) --[[ @ 0]]
			f73_arg0.BombTimer:completeAnimation() --[[ @ 0]]
			f73_arg0.BombTimer:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.BombTimer ) --[[ @ 0]]
			f73_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointProgressMeterEmpty:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f73_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointProgressMeter:setLeftRight( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
			f73_arg0.WaypointProgressMeter:setTopBottom( 0.5, 0.5, -35, 35 ) --[[ @ 0]]
			f73_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointProgressMeter ) --[[ @ 0]]
			f73_arg0.WaypointCenterIcon2:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointCenterIcon2:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointCenterIcon2 ) --[[ @ 0]]
			f73_arg0.WaypointCenterIcon:completeAnimation() --[[ @ 0]]
			f73_arg0.WaypointCenterIcon:setAlpha( 0 ) --[[ @ 0]]
			f73_arg0.clipFinished( f73_arg0.WaypointCenterIcon ) --[[ @ 0]]
		end
	},
	NoFrame = {
		DefaultClip = function ( f74_arg0, f74_arg1 )
			f74_arg0:__resetProperties() --[[ @ 0]]
			f74_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f74_arg0.ProgressBarBGBlur:completeAnimation() --[[ @ 0]]
			f74_arg0.ProgressBarBGBlur:setAlpha( 0 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ProgressBarBGBlur ) --[[ @ 0]]
			f74_arg0.ProgressBarBGTint:completeAnimation() --[[ @ 0]]
			f74_arg0.ProgressBarBGTint:setAlpha( 0 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ProgressBarBGTint ) --[[ @ 0]]
			f74_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f74_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.ProgressBar ) --[[ @ 0]]
			f74_arg0.WaypointArrowDownNotClampedContainer:completeAnimation() --[[ @ 0]]
			f74_arg0.WaypointArrowDownNotClampedContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.WaypointArrowDownNotClampedContainer ) --[[ @ 0]]
			f74_arg0.WaypointArrowContainer:completeAnimation() --[[ @ 0]]
			f74_arg0.WaypointArrowContainer:setAlpha( 0.95 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.WaypointArrowContainer ) --[[ @ 0]]
			f74_arg0.WaypointProgressMeterEmpty:completeAnimation() --[[ @ 0]]
			f74_arg0.WaypointProgressMeterEmpty:setAlpha( 1 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.WaypointProgressMeterEmpty ) --[[ @ 0]]
			f74_arg0.WaypointProgressMeter:completeAnimation() --[[ @ 0]]
			f74_arg0.WaypointProgressMeter:setAlpha( 0 ) --[[ @ 0]]
			f74_arg0.clipFinished( f74_arg0.WaypointProgressMeter ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WaypointBomb.__onClose = function ( f75_arg0 )
	f75_arg0.ProgressBar:close() --[[ @ 0]]
	f75_arg0.WaypointArrowDownNotClampedContainer:close() --[[ @ 0]]
	f75_arg0.WaypointArrowContainer:close() --[[ @ 0]]
	f75_arg0.WaypointText:close() --[[ @ 0]]
	f75_arg0.WaypointBacker:close() --[[ @ 0]]
	f75_arg0.WaypointPattern:close() --[[ @ 0]]
	f75_arg0.ArrowRight:close() --[[ @ 0]]
	f75_arg0.ArrowLeft:close() --[[ @ 0]]
	f75_arg0.BombTimer:close() --[[ @ 0]]
	f75_arg0.WaypointProgressMeterEmpty:close() --[[ @ 0]]
	f75_arg0.WaypointProgressMeter:close() --[[ @ 0]]
	f75_arg0.WaypointCenterIcon2:close() --[[ @ 0]]
	f75_arg0.WaypointCenterIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
