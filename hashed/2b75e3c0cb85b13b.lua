-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
CoD.WeaponUtility = {} --[[ @ 0]]
CoD.WeaponUtility.WeaponIsSegmentedReloadResult = {} --[[ @ 0]]
CoD.WeaponUtility.WeaponUsesAmmoResult = {} --[[ @ 0]]
CoD.WeaponUtility.WeaponRefUsesAmmoResult = {} --[[ @ 0]]
CoD.WeaponUtility.WeaponRefIsClipOnlyResult = {} --[[ @ 0]]
CoD.WeaponUtility.MaxHeldWeapons = 15 --[[ @ 0]]
CoD.WeaponUtility.CurrentWeaponIsSegmentedReload = function ( f1_arg0 )
	local f1_local0 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	local f1_local1 = DataSources.CurrentWeapon.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local1 = f1_local1.weapon:get() --[[ @ 0]]
	if f1_local1 ~= nil and CoD.WeaponUtility.WeaponIsSegmentedReloadResult[f1_local1] == nil then
		CoD.WeaponUtility.WeaponIsSegmentedReloadResult[f1_local1] = Engine[@"hash_164187036D5BBB3E"]( Engine[@"hash_7B98952F69D937F9"]( f1_local1 ) ) --[[ @ 0]]
	end
	return CoD.WeaponUtility.WeaponIsSegmentedReloadResult[f1_local1]
end
 --[[ @ 0]]
CoD.WeaponUtility.WeaponUsesAmmoInternal = function ( f2_arg0, f2_arg1 )
	local f2_local0 = @"hash_0" --[[ @ 0]]
	if f2_arg1 == nil then
		return false
	elseif f2_arg1 == 0 then
		f2_local0 = CoD.SafeGetModelValue( f2_arg0, "equippedWeaponReference" ) --[[ @ 0]]
		if f2_local0 then
			local f2_local1 = Engine[@"hash_46277892F01D31E9"]( f2_local0 ) --[[ @ 0]]
		end
		f2_local0 = f2_local1 or @"hash_0" --[[ @ 0]]
	else
		f2_local0 = Engine[@"hash_7B98952F69D937F9"]( f2_arg1 ) --[[ @ 0]]
	end
	if (CoD.isZombie or CoD.isWarzone) and Engine[@"isunlimitedammoweapon"]( f2_local0 ) then
		return false
	else
		local f2_local2 --[[ @ 0]]
		if not Engine[@"isweapontype"]( f2_local0, "melee" ) and not Engine[@"isweapontype"]( f2_local0, "riotshield" ) then
			f2_local2 = not Engine[@"isweapontype"]( f2_local0, "grenade" ) --[[ @ 0]]
		else
			f2_local2 = false --[[ @ 0]]
		end
	end
	return f2_local2
end
 --[[ @ 0]]
CoD.WeaponUtility.CurrentWeaponUsesAmmo = function ( f3_arg0 )
	local f3_local0 = Engine[@"getmodelforcontroller"]( f3_arg0 ) --[[ @ 0]]
	local f3_local1 = DataSources.CurrentWeapon.getModel( f3_arg0 ) --[[ @ 0]]
	local f3_local2 = f3_local1.weapon:get() --[[ @ 0]]
	if f3_local2 ~= nil and CoD.WeaponUtility.WeaponUsesAmmoResult[f3_local2] == nil then
		CoD.WeaponUtility.WeaponUsesAmmoResult[f3_local2] = CoD.WeaponUtility.WeaponUsesAmmoInternal( f3_local1, f3_local2 ) --[[ @ 0]]
	end
	return CoD.WeaponUtility.WeaponUsesAmmoResult[f3_local2]
end
 --[[ @ 0]]
CoD.WeaponUtility.CurrentZMWeaponUsesAmmo = function ( f4_arg0 )
	local f4_local0 = Engine[@"getmodelforcontroller"]( f4_arg0 ) --[[ @ 0]]
	local f4_local1 = DataSources.CurrentWeapon.getModel( f4_arg0 ) --[[ @ 0]]
	local f4_local2 = f4_local1.equippedWeaponReference:get() --[[ @ 0]]
	if f4_local2 ~= nil and CoD.WeaponUtility.WeaponRefUsesAmmoResult[f4_local2] == nil then
		CoD.WeaponUtility.WeaponRefUsesAmmoResult[f4_local2] = not Engine[@"isunlimitedammoweapon"]( Engine[@"hash_46277892F01D31E9"]( f4_local2 ) ) --[[ @ 0]]
	end
	return CoD.WeaponUtility.WeaponRefUsesAmmoResult[f4_local2]
end
 --[[ @ 0]]
CoD.WeaponUtility.CurrentZMWeaponIsClipOnlyAmmo = function ( f5_arg0 )
	return f5_local1.isClipOnly and f5_local1.isClipOnly:get()
end
 --[[ @ 0]]
CoD.WeaponUtility.ShouldHidePickupsForThirdPersonWeapon = function ( f6_arg0 )
	return Engine[@"hash_7AC255C64518F89E"]( f6_arg0 )
end
 --[[ @ 0]]
