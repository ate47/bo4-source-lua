-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/vehiclehuds/agr/vhud_agr_missile" ) --[[ @ 0]]

CoD.vhud_agr_NotificationMissiles = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_agr_NotificationMissiles.__defaultWidth = 126 --[[ @ 0]]
CoD.vhud_agr_NotificationMissiles.__defaultHeight = 124 --[[ @ 0]]
CoD.vhud_agr_NotificationMissiles.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_agr_NotificationMissiles ) --[[ @ 0]]
	self.id = "vhud_agr_NotificationMissiles" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local firstMissile0 = CoD.vhud_agr_missile.new( f1_arg0, f1_arg1, 0.5, 0.5, -63, 63, 0.5, 0.5, -58, -7 ) --[[ @ 0]]
	firstMissile0:mergeStateConditions( {
		{
			stateName = "Armed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "rocketAmmo", 3 )
			end
		}
	} ) --[[ @ 0]]
	firstMissile0:linkToElementModel( firstMissile0, "rocketAmmo", true, function ( model )
		f1_arg0:updateElementState( firstMissile0, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rocketAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	firstMissile0:linkToElementModel( self, nil, false, function ( model )
		firstMissile0:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( firstMissile0 ) --[[ @ 0]]
	self.firstMissile0 = firstMissile0 --[[ @ 0]]
	
	local secondMissile = CoD.vhud_agr_missile.new( f1_arg0, f1_arg1, 0.5, 0.5, -63, 63, 0.5, 0.5, -31, 16 ) --[[ @ 0]]
	secondMissile:mergeStateConditions( {
		{
			stateName = "Armed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "rocketAmmo", 2 )
			end
		}
	} ) --[[ @ 0]]
	secondMissile:linkToElementModel( secondMissile, "rocketAmmo", true, function ( model )
		f1_arg0:updateElementState( secondMissile, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rocketAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	secondMissile:linkToElementModel( self, nil, false, function ( model )
		secondMissile:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( secondMissile ) --[[ @ 0]]
	self.secondMissile = secondMissile --[[ @ 0]]
	
	local thirdMissile = CoD.vhud_agr_missile.new( f1_arg0, f1_arg1, 0.5, 0.5, -63, 63, 0.5, 0.5, -7, 41 ) --[[ @ 0]]
	thirdMissile:mergeStateConditions( {
		{
			stateName = "Armed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "rocketAmmo", 1 )
			end
		}
	} ) --[[ @ 0]]
	thirdMissile:linkToElementModel( thirdMissile, "rocketAmmo", true, function ( model )
		f1_arg0:updateElementState( thirdMissile, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rocketAmmo"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	thirdMissile:linkToElementModel( self, nil, false, function ( model )
		thirdMissile:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( thirdMissile ) --[[ @ 0]]
	self.thirdMissile = thirdMissile --[[ @ 0]]
	
	local Bar = LUI.UIImage.new( 0.5, 0.5, -28, 28, 0.5, 0.5, 36, 43 ) --[[ @ 0]]
	Bar:setRGB( 0.74, 0.99, 0.84 ) --[[ @ 0]]
	Bar:setYRot( 130 ) --[[ @ 0]]
	Bar:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_mothership_timebar" ) ) --[[ @ 0]]
	Bar:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Bar ) --[[ @ 0]]
	self.Bar = Bar --[[ @ 0]]
	
	local solidbar = LUI.UIImage.new( 0.5, 0.5, -28, 28, 0.5, 0.5, 36, 43 ) --[[ @ 0]]
	solidbar:setRGB( 0.74, 0.99, 0.84 ) --[[ @ 0]]
	solidbar:setYRot( -50 ) --[[ @ 0]]
	solidbar:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_mothership_timebarsolid" ) ) --[[ @ 0]]
	solidbar:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe" ) ) --[[ @ 0]]
	solidbar:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	solidbar:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	solidbar:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	solidbar:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	solidbar:linkToElementModel( self, "ammoReady", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			solidbar:setShaderVector( 0, CoD.GetVectorComponentFromString( f11_local0, 1 ), CoD.GetVectorComponentFromString( f11_local0, 2 ), CoD.GetVectorComponentFromString( f11_local0, 3 ), CoD.GetVectorComponentFromString( f11_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( solidbar ) --[[ @ 0]]
	self.solidbar = solidbar --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_agr_NotificationMissiles.__onClose = function ( f12_arg0 )
	f12_arg0.firstMissile0:close() --[[ @ 0]]
	f12_arg0.secondMissile:close() --[[ @ 0]]
	f12_arg0.thirdMissile:close() --[[ @ 0]]
	f12_arg0.solidbar:close() --[[ @ 0]]
end
 --[[ @ 0]]
