-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:6a48e8c806a4abe4" ) --[[ @ 0]]
require( "x64:19b6351e62cb72af" ) --[[ @ 0]]
require( "x64:2be41bd29828143" ) --[[ @ 0]]
require( "x64:5fc8921e999f842" ) --[[ @ 0]]
require( "x64:28280a5b50aa1f9a" ) --[[ @ 0]]

CoD.SpecialistHeadquartersSelectSpecialistInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.__defaultWidth = 1920 --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.__defaultHeight = 1080 --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SpecialistHeadquartersSelectSpecialistInternal ) --[[ @ 0]]
	self.id = "SpecialistHeadquartersSelectSpecialistInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Specialists = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	Specialists:setLeftRight( 0.5, 0.5, -710, 90 ) --[[ @ 0]]
	Specialists:setTopBottom( 0.5, 0.5, -395, -39 ) --[[ @ 0]]
	Specialists:setWidgetType( CoD.SpecialistHeadquartersSpecialist ) --[[ @ 0]]
	Specialists:setHorizontalCount( 5 ) --[[ @ 0]]
	Specialists:setVerticalCount( 2 ) --[[ @ 0]]
	Specialists:setSpacing( 10 ) --[[ @ 0]]
	Specialists:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Specialists:setDataSource( "SpecialistHeadquartersLoadoutList" ) --[[ @ 0]]
	local SpecialistInfoSelected = Specialists --[[ @ 0]]
	local SpecialistInfo = Specialists.subscribeToModel --[[ @ 0]]
	local DossierProgress = Engine[@"getglobalmodel"]() --[[ @ 0]]
	SpecialistInfo( SpecialistInfoSelected, DossierProgress["MapVote.timerActive"], function ( f2_arg0, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Specialists:registerEventHandler( "gain_list_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		CoD.CTUtility.SetShowChosenSpecialistListModel( f1_arg1, false ) --[[ @ 0]]
		return f3_local0
	end ) --[[ @ 0]]
	Specialists:registerEventHandler( "lose_list_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.CTUtility.UpdatedChosenSpecialistListModel( f1_arg1, element ) --[[ @ 0]]
		CoD.CTUtility.SetShowChosenSpecialistListModel( f1_arg1, true ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	Specialists:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Specialists, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ENTER", function ( element, menu, controller, model )
		if not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.CTUtility.SetChosenSpecialist( controller, element ) --[[ @ 0]]
			PlaySoundAlias( "uin_start_char_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_3AC3B80C833B60E1", nil, "ENTER" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( Specialists ) --[[ @ 0]]
	self.Specialists = Specialists --[[ @ 0]]
	
	SpecialistInfo = CoD.SpecialistHeadquartersSpecialistInfo.new( f1_arg0, f1_arg1, 0.5, 0.5, 324, 811, 0.5, 0.5, -406, 444 ) --[[ @ 0]]
	SpecialistInfo:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowChosenSpecialistList" )
			end
		}
	} ) --[[ @ 0]]
	DossierProgress = SpecialistInfo --[[ @ 0]]
	SpecialistInfoSelected = SpecialistInfo.subscribeToModel --[[ @ 0]]
	local DossierProgressSelected = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	SpecialistInfoSelected( DossierProgress, DossierProgressSelected.ShowChosenSpecialistList, function ( f9_arg0 )
		f1_arg0:updateElementState( SpecialistInfo, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "ShowChosenSpecialistList"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( SpecialistInfo ) --[[ @ 0]]
	self.SpecialistInfo = SpecialistInfo --[[ @ 0]]
	
	SpecialistInfoSelected = CoD.SpecialistHeadquartersSpecialistInfo.new( f1_arg0, f1_arg1, 0.5, 0.5, 324, 811, 0.5, 0.5, -406, 444 ) --[[ @ 0]]
	SpecialistInfoSelected:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowChosenSpecialistList" )
			end
		}
	} ) --[[ @ 0]]
	DossierProgressSelected = SpecialistInfoSelected --[[ @ 0]]
	DossierProgress = SpecialistInfoSelected.subscribeToModel --[[ @ 0]]
	local ShowPlayButtonHint = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	DossierProgress( DossierProgressSelected, ShowPlayButtonHint.ShowChosenSpecialistList, function ( f11_arg0 )
		f1_arg0:updateElementState( SpecialistInfoSelected, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "ShowChosenSpecialistList"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SpecialistInfoSelected:subscribeToGlobalModel( f1_arg1, "SpecialistHeadquarters", "ChosenSpecialistListModel", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			SpecialistInfoSelected:setModel( f12_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SpecialistInfoSelected ) --[[ @ 0]]
	self.SpecialistInfoSelected = SpecialistInfoSelected --[[ @ 0]]
	
	DossierProgress = CoD.SpecialistHeadquartersDossierProgress.new( f1_arg0, f1_arg1, 0.5, 0.5, -710, 90, 0.5, 0.5, 225, 425 ) --[[ @ 0]]
	DossierProgress:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowChosenSpecialistList" )
			end
		}
	} ) --[[ @ 0]]
	ShowPlayButtonHint = DossierProgress --[[ @ 0]]
	DossierProgressSelected = DossierProgress.subscribeToModel --[[ @ 0]]
	local PlayButton = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	DossierProgressSelected( ShowPlayButtonHint, PlayButton.ShowChosenSpecialistList, function ( f14_arg0 )
		f1_arg0:updateElementState( DossierProgress, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "ShowChosenSpecialistList"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DossierProgress:linkToElementModel( DossierProgress, "complete", true, function ( model )
		f1_arg0:updateElementState( DossierProgress, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DossierProgress:linkToElementModel( DossierProgress, "finishedTutorial", true, function ( model )
		f1_arg0:updateElementState( DossierProgress, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "finishedTutorial"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DossierProgress ) --[[ @ 0]]
	self.DossierProgress = DossierProgress --[[ @ 0]]
	
	DossierProgressSelected = CoD.SpecialistHeadquartersDossierProgress.new( f1_arg0, f1_arg1, 0.5, 0.5, -710, 90, 0.5, 0.5, 225, 425 ) --[[ @ 0]]
	DossierProgressSelected:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowChosenSpecialistList" )
			end
		}
	} ) --[[ @ 0]]
	PlayButton = DossierProgressSelected --[[ @ 0]]
	ShowPlayButtonHint = DossierProgressSelected.subscribeToModel --[[ @ 0]]
	local ReplayTutorial = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	ShowPlayButtonHint( PlayButton, ReplayTutorial.ShowChosenSpecialistList, function ( f18_arg0 )
		f1_arg0:updateElementState( DossierProgressSelected, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "ShowChosenSpecialistList"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DossierProgressSelected:linkToElementModel( DossierProgressSelected, "complete", true, function ( model )
		f1_arg0:updateElementState( DossierProgressSelected, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "complete"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DossierProgressSelected:linkToElementModel( DossierProgressSelected, "finishedTutorial", true, function ( model )
		f1_arg0:updateElementState( DossierProgressSelected, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "finishedTutorial"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DossierProgressSelected:subscribeToGlobalModel( f1_arg1, "SpecialistHeadquarters", "ChosenSpecialistListModel", function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			DossierProgressSelected:setModel( f21_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DossierProgressSelected ) --[[ @ 0]]
	self.DossierProgressSelected = DossierProgressSelected --[[ @ 0]]
	
	ShowPlayButtonHint = CoD.ShowPlayButtonHintText.new( f1_arg0, f1_arg1, 0.5, 0.5, -710, 90, 0.5, 0.5, -425, -395 ) --[[ @ 0]]
	ShowPlayButtonHint:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ShowPlayButtonHint ) --[[ @ 0]]
	self.ShowPlayButtonHint = ShowPlayButtonHint --[[ @ 0]]
	
	PlayButton = CoD.SpecialistHeadquartersButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -510, -110, 0.5, 0.5, -9.5, 90.5 ) --[[ @ 0]]
	PlayButton:setAlpha( 0 ) --[[ @ 0]]
	PlayButton:subscribeToGlobalModel( f1_arg1, "SpecialistHeadquarters", "ChosenSpecialistID", function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			PlayButton.Header:setText( LocalizeToUpperString( CoD.CTUtility.GetChosenSpecialistIDLocString( f1_arg1, f22_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PlayButton:appendEventHandler( "on_session_start", function ( f23_arg0, f23_arg1 )
		f23_arg1.menu = f23_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f23_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PlayButton:appendEventHandler( "on_session_end", function ( f24_arg0, f24_arg1 )
		f24_arg1.menu = f24_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f24_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local9 = PlayButton --[[ @ 0]]
	ReplayTutorial = PlayButton.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ReplayTutorial( f1_local9, f1_local10["lobbyRoot.lobbyNav"], function ( f25_arg0, f25_arg1 )
		CoD.Menu.UpdateButtonShownState( f25_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = PlayButton --[[ @ 0]]
	ReplayTutorial = PlayButton.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ReplayTutorial( f1_local9, f1_local10["lobbyRoot.gameClient.update"], function ( f26_arg0, f26_arg1 )
		CoD.Menu.UpdateButtonShownState( f26_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = PlayButton --[[ @ 0]]
	ReplayTutorial = PlayButton.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ReplayTutorial( f1_local9, f1_local10["lobbyRoot.privateClient.update"], function ( f27_arg0, f27_arg1 )
		CoD.Menu.UpdateButtonShownState( f27_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = PlayButton --[[ @ 0]]
	ReplayTutorial = PlayButton.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	ReplayTutorial( f1_local9, f1_local10["MapVote.timerActive"], function ( f28_arg0, f28_arg1 )
		CoD.Menu.UpdateButtonShownState( f28_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PlayButton:registerEventHandler( "gain_focus", function ( element, event )
		local f29_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f29_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f29_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f29_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PlayButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsLobbyHostOfCurrentMenu() and not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.CTUtility.RefreshChosenSpecialistParams( controller ) --[[ @ 0]]
			CoD.CTUtility.LaunchGame( menu, self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsLobbyHostOfCurrentMenu() and not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PlayButton ) --[[ @ 0]]
	self.PlayButton = PlayButton --[[ @ 0]]
	
	ReplayTutorial = CoD.SpecialistHeadquartersButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -510, -110, 0.5, 0.5, 68, 138 ) --[[ @ 0]]
	ReplayTutorial:setAlpha( 0 ) --[[ @ 0]]
	ReplayTutorial.Header:setText( LocalizeToUpperString( @"hash_4EDF0CD4F8E56F3B" ) ) --[[ @ 0]]
	ReplayTutorial:appendEventHandler( "on_session_start", function ( f32_arg0, f32_arg1 )
		f32_arg1.menu = f32_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ReplayTutorial:appendEventHandler( "on_session_end", function ( f33_arg0, f33_arg1 )
		f33_arg1.menu = f33_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local10 = ReplayTutorial --[[ @ 0]]
	f1_local9 = ReplayTutorial.subscribeToModel --[[ @ 0]]
	local f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["lobbyRoot.lobbyNav"], function ( f34_arg0, f34_arg1 )
		CoD.Menu.UpdateButtonShownState( f34_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = ReplayTutorial --[[ @ 0]]
	f1_local9 = ReplayTutorial.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["lobbyRoot.gameClient.update"], function ( f35_arg0, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = ReplayTutorial --[[ @ 0]]
	f1_local9 = ReplayTutorial.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["lobbyRoot.privateClient.update"], function ( f36_arg0, f36_arg1 )
		CoD.Menu.UpdateButtonShownState( f36_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local10 = ReplayTutorial --[[ @ 0]]
	f1_local9 = ReplayTutorial.subscribeToModel --[[ @ 0]]
	f1_local11 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local9( f1_local10, f1_local11["MapVote.timerActive"], function ( f37_arg0, f37_arg1 )
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ReplayTutorial:registerEventHandler( "gain_focus", function ( element, event )
		local f38_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f38_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f38_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f38_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ReplayTutorial, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsLobbyHostOfCurrentMenu() and not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.CTUtility.SetReplayTutorial( controller ) --[[ @ 0]]
			CoD.CTUtility.LaunchGame( menu, self, element, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsLobbyHostOfCurrentMenu() and not CoD.LobbyUtility.MapVoteTimerActive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( ReplayTutorial ) --[[ @ 0]]
	self.ReplayTutorial = ReplayTutorial --[[ @ 0]]
	
	f1_local9 = nil --[[ @ 0]]
	f1_local9 = LUI.UIElement.createFake() --[[ @ 0]]
	self.QuitButton = f1_local9 --[[ @ 0]]
	SpecialistInfo:linkToElementModel( Specialists, nil, false, function ( model )
		SpecialistInfo:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DossierProgress:linkToElementModel( Specialists, nil, false, function ( model )
		DossierProgress:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ShowReplayTutorialButton",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowPlayButtonInSpecialistSelect" ) and CoD.CTUtility.ShowReplayTutorial( f1_arg1 )
			end
		},
		{
			stateName = "ShowPlayButton",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "SpecialistHeadquarters", "ShowPlayButtonInSpecialistSelect" )
			end
		}
	} ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	local f1_local12 = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.ShowPlayButtonInSpecialistSelect, function ( f45_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f45_arg0:get(),
			modelName = "ShowPlayButtonInSpecialistSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local10 = self.subscribeToModel --[[ @ 0]]
	f1_local12 = DataSources.SpecialistHeadquarters.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local10( f1_local11, f1_local12.ChosenSpecialistID, function ( f46_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f46_arg0:get(),
			modelName = "ChosenSpecialistID"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Specialists.id = "Specialists" --[[ @ 0]]
	PlayButton.id = "PlayButton" --[[ @ 0]]
	ReplayTutorial.id = "ReplayTutorial" --[[ @ 0]]
	f1_local9.id = "QuitButton" --[[ @ 0]]
	self.__defaultFocus = Specialists --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local10 = self --[[ @ 0]]
	CoD.CTUtility.UpdatedChosenSpecialistListModel( f1_arg1, Specialists ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.__resetProperties = function ( f47_arg0 )
	f47_arg0.ShowPlayButtonHint:completeAnimation() --[[ @ 0]]
	f47_arg0.PlayButton:completeAnimation() --[[ @ 0]]
	f47_arg0.QuitButton:completeAnimation() --[[ @ 0]]
	f47_arg0.ReplayTutorial:completeAnimation() --[[ @ 0]]
	f47_arg0.ShowPlayButtonHint:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.PlayButton:setTopBottom( 0.5, 0.5, -9.5, 90.5 ) --[[ @ 0]]
	f47_arg0.PlayButton:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.QuitButton:setTopBottom( 0.5, 0.5, 115.5, 215.5 ) --[[ @ 0]]
	f47_arg0.QuitButton:setAlpha( 0 ) --[[ @ 0]]
	f47_arg0.ReplayTutorial:setTopBottom( 0.5, 0.5, 68, 138 ) --[[ @ 0]]
	f47_arg0.ReplayTutorial:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ShowReplayTutorialButton = {
		DefaultClip = function ( f49_arg0, f49_arg1 )
			f49_arg0:__resetProperties() --[[ @ 0]]
			f49_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f49_arg0.ShowPlayButtonHint:completeAnimation() --[[ @ 0]]
			f49_arg0.ShowPlayButtonHint:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ShowPlayButtonHint ) --[[ @ 0]]
			f49_arg0.PlayButton:completeAnimation() --[[ @ 0]]
			f49_arg0.PlayButton:setTopBottom( 0.5, 0.5, 5.5, 55.5 ) --[[ @ 0]]
			f49_arg0.PlayButton:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.PlayButton ) --[[ @ 0]]
			f49_arg0.ReplayTutorial:completeAnimation() --[[ @ 0]]
			f49_arg0.ReplayTutorial:setTopBottom( 0.5, 0.5, 78, 128 ) --[[ @ 0]]
			f49_arg0.ReplayTutorial:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ReplayTutorial ) --[[ @ 0]]
			f49_arg0.QuitButton:completeAnimation() --[[ @ 0]]
			f49_arg0.QuitButton:setTopBottom( 0.5, 0.5, 150.5, 200.5 ) --[[ @ 0]]
			f49_arg0.QuitButton:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.QuitButton ) --[[ @ 0]]
		end
	},
	ShowPlayButton = {
		DefaultClip = function ( f50_arg0, f50_arg1 )
			f50_arg0:__resetProperties() --[[ @ 0]]
			f50_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f50_arg0.ShowPlayButtonHint:completeAnimation() --[[ @ 0]]
			f50_arg0.ShowPlayButtonHint:setAlpha( 1 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.ShowPlayButtonHint ) --[[ @ 0]]
			f50_arg0.PlayButton:completeAnimation() --[[ @ 0]]
			f50_arg0.PlayButton:setTopBottom( 0.5, 0.5, 20.5, 90.5 ) --[[ @ 0]]
			f50_arg0.PlayButton:setAlpha( 1 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.PlayButton ) --[[ @ 0]]
			f50_arg0.QuitButton:completeAnimation() --[[ @ 0]]
			f50_arg0.QuitButton:setTopBottom( 0.5, 0.5, 125.5, 195.5 ) --[[ @ 0]]
			f50_arg0.QuitButton:setAlpha( 1 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.QuitButton ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.SpecialistHeadquartersSelectSpecialistInternal.__onClose = function ( f51_arg0 )
	f51_arg0.SpecialistInfo:close() --[[ @ 0]]
	f51_arg0.DossierProgress:close() --[[ @ 0]]
	f51_arg0.Specialists:close() --[[ @ 0]]
	f51_arg0.SpecialistInfoSelected:close() --[[ @ 0]]
	f51_arg0.DossierProgressSelected:close() --[[ @ 0]]
	f51_arg0.ShowPlayButtonHint:close() --[[ @ 0]]
	f51_arg0.PlayButton:close() --[[ @ 0]]
	f51_arg0.ReplayTutorial:close() --[[ @ 0]]
	f51_arg0.QuitButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
