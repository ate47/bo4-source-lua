-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:368a7fb500b8d75f" ) --[[ @ 0]]

CoD.WarzoneQuickInventoryPromptInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.__defaultWidth = 150 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.__defaultHeight = 36 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneQuickInventoryPromptInternal ) --[[ @ 0]]
	self.id = "WarzoneQuickInventoryPromptInternal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local label = LUI.UIText.new( 0.5, 0.5, -103.5, 136.5, 0, 0, 9, 27 ) --[[ @ 0]]
	label:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	label:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	label:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	label:setShaderVector( 0, 0.6, 0, 0, 0 ) --[[ @ 0]]
	label:setShaderVector( 1, 0.3, 0, 0, 0 ) --[[ @ 0]]
	label:setShaderVector( 2, 0, 0, 0, 1 ) --[[ @ 0]]
	label:setLetterSpacing( 2 ) --[[ @ 0]]
	label:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	label:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	label:setBackingType( 1 ) --[[ @ 0]]
	label:setBackingWidget( CoD.WarzoneQuickInventoryPromptBacking, f1_arg0, f1_arg1 ) --[[ @ 0]]
	label:setBackingXPadding( 38 ) --[[ @ 0]]
	label:setBackingYPadding( 8 ) --[[ @ 0]]
	label:subscribeToGlobalModel( f1_arg1, "Controller", "alt1_button_image", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			label._backingElement.buttonPromptImage:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	label.__String_Reference = function ( f3_arg0 )
		local f3_local0 = f3_arg0:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			label:setText( ConvertToUpperString( CoD.WZUtility.LocalizeSelectedInventoryIntoString( f1_arg1, f3_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	label:linkToElementModel( self, "Label", true, label.__String_Reference ) --[[ @ 0]]
	label.__String_Reference_FullPath = function ()
		local f4_local0 = self:getModel() --[[ @ 0]]
		if f4_local0 then
			f4_local0 = self:getModel() --[[ @ 0]]
			f4_local0 = f4_local0.Label --[[ @ 0]]
		end
		if f4_local0 then
			label.__String_Reference( f4_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	label:linkToElementModel( self, nil, false, function ( model )
		label:setBackingModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( label ) --[[ @ 0]]
	self.label = label --[[ @ 0]]
	
	local f1_local2 = label --[[ @ 0]]
	local f1_local3 = label.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["hudItems.inventory.selectedItemName"], label.__String_Reference_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_disable_prompts"] ) and CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] )
			end
		},
		{
			stateName = "Enabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"luibuttonpromptstates"][@"flag_enable_prompts"] ) and CoD.ModelUtility.IsSelfModelValueEnumFlagSet( element, f1_arg1, "flags", Enum[@"luibuttonpromptflags"][@"bpf_contextual"] )
			end
		},
		{
			stateName = "DefaultStateGamepad",
			condition = function ( menu, element, event )
				return IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "flags", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "flags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f11_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.LastInput, function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f13_arg2, f13_arg3, f13_arg4 )
		if IsInDefaultState( self ) and IsMouseOrKeyboard( controller ) then
			DisableMouseButton( self, controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.CloseContextualPromptPC( self ) --[[ @ 0]]
		elseif IsMouseOrKeyboard( controller ) then
			EnableMouseButton( self, controller ) --[[ @ 0]]
			CoD.FreeCursorUtility.OpenContextualPromptPC( self ) --[[ @ 0]]
		elseif IsInDefaultState( self ) and IsGamepad( controller ) then
			DisableMouseButton( self, controller ) --[[ @ 0]]
		elseif IsGamepad( controller ) then
			EnableMouseButton( self, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local3 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetupButtonPromptForPC( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
		CoD.FreeCursorUtility.UseLocalHeight( self ) --[[ @ 0]]
		CoD.FreeCursorUtility.SetupHideContextualPromptPC( f1_local3, f1_arg1 ) --[[ @ 0]]
	else
		CoD.FreeCursorUtility.UseLocalHeight( self ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.__resetProperties = function ( f14_arg0 )
	f14_arg0.label:completeAnimation() --[[ @ 0]]
	f14_arg0.label:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	f14_arg0.label:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f15_arg0.label:completeAnimation() --[[ @ 0]]
			f15_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.label ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f16_arg0.label:completeAnimation() --[[ @ 0]]
			f16_arg0.label:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
			f16_arg0.label:setAlpha( 0.5 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.label ) --[[ @ 0]]
		end
	},
	Enabled = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.label:completeAnimation() --[[ @ 0]]
			f17_arg0.label:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.label ) --[[ @ 0]]
		end,
		Hide = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f18_arg0.label:completeAnimation() --[[ @ 0]]
			f18_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.label ) --[[ @ 0]]
		end,
		Focus = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f19_arg0.label:completeAnimation() --[[ @ 0]]
			f19_arg0.label:setRGB( 0.87, 0.37, 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.label ) --[[ @ 0]]
		end,
		DefaultState = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f20_local0 = function ( f21_arg0 )
				f20_arg0.label:beginAnimation( 200 ) --[[ @ 0]]
				f20_arg0.label:registerEventHandler( "interrupted_keyframe", f20_arg0.clipInterrupted ) --[[ @ 0]]
				f20_arg0.label:registerEventHandler( "transition_complete_keyframe", f20_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f20_arg0.label:completeAnimation() --[[ @ 0]]
			f20_arg0.label:setAlpha( 1 ) --[[ @ 0]]
			f20_local0( f20_arg0.label ) --[[ @ 0]]
		end
	},
	DefaultStateGamepad = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f22_arg0.label:completeAnimation() --[[ @ 0]]
			f22_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.label ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneQuickInventoryPromptInternal.__onClose = function ( f23_arg0 )
	f23_arg0.label:close() --[[ @ 0]]
end
 --[[ @ 0]]
