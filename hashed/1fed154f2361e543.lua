-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:1dd513db11e2bfb6" ) --[[ @ 0]]
require( "x64:5fc0f7412b0fb282" ) --[[ @ 0]]
require( "x64:be52530c0ca57a1" ) --[[ @ 0]]
require( "x64:187b99331f9f0f2e" ) --[[ @ 0]]
require( "x64:6e6df4068375d284" ) --[[ @ 0]]
require( "x64:44c0abd9cc93e5f6" ) --[[ @ 0]]

CoD.ReservesReroll = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReservesReroll.__defaultWidth = 250 --[[ @ 0]]
CoD.ReservesReroll.__defaultHeight = 271 --[[ @ 0]]
CoD.ReservesReroll.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReservesReroll ) --[[ @ 0]]
	self.id = "ReservesReroll" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Background:setRGB( 0.09, 0.09, 0.09 ) --[[ @ 0]]
	Background:setAlpha( 0.9 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local Container = LUI.UIImage.new( 0, 1, 14, -14, 0, 0, 27, 147 ) --[[ @ 0]]
	Container:setRGB( 0.23, 0.23, 0.23 ) --[[ @ 0]]
	Container:setAlpha( 0.25 ) --[[ @ 0]]
	self:addElement( Container ) --[[ @ 0]]
	self.Container = Container --[[ @ 0]]
	
	local TiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	TiledBacking:setAlpha( 0.25 ) --[[ @ 0]]
	TiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBacking ) --[[ @ 0]]
	self.TiledBacking = TiledBacking --[[ @ 0]]
	
	local Bar = LUI.UIImage.new( 0, 1, 14, -14, 0, 0, 162, 190 ) --[[ @ 0]]
	Bar:setRGB( 0.25, 0.24, 0.22 ) --[[ @ 0]]
	Bar:setAlpha( 0.88 ) --[[ @ 0]]
	self:addElement( Bar ) --[[ @ 0]]
	self.Bar = Bar --[[ @ 0]]
	
	local TiledBacking2 = LUI.UIImage.new( 0, 1, 14, -14, 0, 0, 162, 190 ) --[[ @ 0]]
	TiledBacking2:setAlpha( 0.5 ) --[[ @ 0]]
	TiledBacking2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBacking2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBacking2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBacking2:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBacking2 ) --[[ @ 0]]
	self.TiledBacking2 = TiledBacking2 --[[ @ 0]]
	
	local LayoutTopBar = LUI.UIImage.new( 0, 1, -1, 1, 0, 0, -1, 27 ) --[[ @ 0]]
	LayoutTopBar:setImage( RegisterImage( @"uie_ui_menu_social_popup_menu_bar" ) ) --[[ @ 0]]
	self:addElement( LayoutTopBar ) --[[ @ 0]]
	self.LayoutTopBar = LayoutTopBar --[[ @ 0]]
	
	local LayoutTopBar2 = LUI.UIImage.new( 0, 1, -1, 1, 1, 1, -27, 1 ) --[[ @ 0]]
	LayoutTopBar2:setZRot( 180 ) --[[ @ 0]]
	LayoutTopBar2:setImage( RegisterImage( @"uie_ui_menu_social_popup_menu_bar" ) ) --[[ @ 0]]
	self:addElement( LayoutTopBar2 ) --[[ @ 0]]
	self.LayoutTopBar2 = LayoutTopBar2 --[[ @ 0]]
	
	local CommonStripes01Tiled = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, -1, 15 ) --[[ @ 0]]
	CommonStripes01Tiled:setAlpha( 0.25 ) --[[ @ 0]]
	CommonStripes01Tiled:setImage( RegisterImage( @"uie_ui_menu_common_stripes01" ) ) --[[ @ 0]]
	CommonStripes01Tiled:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	CommonStripes01Tiled:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CommonStripes01Tiled:setupNineSliceShader( 64, 16 ) --[[ @ 0]]
	self:addElement( CommonStripes01Tiled ) --[[ @ 0]]
	self.CommonStripes01Tiled = CommonStripes01Tiled --[[ @ 0]]
	
	local LayoutElementTL2 = LUI.UIImage.new( 1, 1, -40, -24, 0, 0, 168, 184 ) --[[ @ 0]]
	LayoutElementTL2:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	LayoutElementTL2:setImage( RegisterImage( @"hash_634B575F15CDD376" ) ) --[[ @ 0]]
	LayoutElementTL2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	LayoutElementTL2:setShaderVector( 0, 3, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LayoutElementTL2 ) --[[ @ 0]]
	self.LayoutElementTL2 = LayoutElementTL2 --[[ @ 0]]
	
	local LayoutElementTL = LUI.UIImage.new( 0, 0, 24, 40, 0, 0, 168, 184 ) --[[ @ 0]]
	LayoutElementTL:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	LayoutElementTL:setZRot( 90 ) --[[ @ 0]]
	LayoutElementTL:setImage( RegisterImage( @"hash_634B575F15CDD376" ) ) --[[ @ 0]]
	LayoutElementTL:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	LayoutElementTL:setShaderVector( 0, 3, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( LayoutElementTL ) --[[ @ 0]]
	self.LayoutElementTL = LayoutElementTL --[[ @ 0]]
	
	local RerollButton = CoD.DirectorGenericButton.new( f1_arg0, f1_arg1, 0, 1, 13, -13, 1, 1, -71, -11 ) --[[ @ 0]]
	RerollButton:linkToElementModel( self, nil, false, function ( model )
		RerollButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RerollButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference = function ( f3_arg0 )
		local f3_local0 = f3_arg0:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			RerollButton.DirectorSelectButtonMiniInternal.MiddleText:setText( ToUpper( CoD.BlackMarketUtility.GetRerollButtonString( f1_arg1, self:getModel(), f3_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	RerollButton:linkToElementModel( self, "price", true, RerollButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference ) --[[ @ 0]]
	RerollButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference_FullPath = function ()
		local f4_local0 = self:getModel() --[[ @ 0]]
		if f4_local0 then
			f4_local0 = self:getModel() --[[ @ 0]]
			f4_local0 = f4_local0.price --[[ @ 0]]
		end
		if f4_local0 then
			RerollButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference( f4_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String = function ( f5_arg0 )
		local f5_local0 = f5_arg0:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( ToUpper( CoD.BlackMarketUtility.GetRerollButtonString( f1_arg1, self:getModel(), f5_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	RerollButton:linkToElementModel( self, "price", true, RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String ) --[[ @ 0]]
	RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String_FullPath = function ()
		local f6_local0 = self:getModel() --[[ @ 0]]
		if f6_local0 then
			f6_local0 = self:getModel() --[[ @ 0]]
			f6_local0 = f6_local0.price --[[ @ 0]]
		end
		if f6_local0 then
			RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String( f6_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local DotPatternTop = RerollButton --[[ @ 0]]
	local ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	local DotPatternBtm = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm.reservesRevealComplete, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm["LootStreamProgress.allRngUnlocked"], function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm["LootRNGResult.streamId"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm.lootCaseCount, function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RerollButton:linkToElementModel( RerollButton, "isBundleCrate", true, function ( model, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm.lootBundleCrateCount, function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RerollButton:linkToElementModel( RerollButton, "name", true, function ( model, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm["LootStreamProgress.codPoints"], function ( f14_arg0, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DotPatternTop = RerollButton --[[ @ 0]]
	ItemName = RerollButton.subscribeToModel --[[ @ 0]]
	DotPatternBtm = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	ItemName( DotPatternTop, DotPatternBtm.lootBribeCount, function ( f15_arg0, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RerollButton:registerEventHandler( "gain_focus", function ( element, event )
		local f16_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f16_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f16_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f16_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RerollButton, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.BlackMarketUtility.OpenAllReservesOwnedDialog( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.CASE ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootCaseCount", 0 ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_properties = {
					_isReservesRevealMenu = true,
					_bribeType = LuaEnum.BRIBE_TYPES.CASE
				}
			} ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBundleCrateCount", 0 ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_properties = {
					_isReservesRevealMenu = true,
					_bribeType = LuaEnum.BRIBE_TYPES.CRATE
				}
			} ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) then
			OpenOverlay( self, "PurchaseBribeStack", controller, {
				_model = menu:getModel(),
				_properties = {
					_isReservesRevealMenu = true
				}
			} ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and CanPurchaseItem( controller, self ) and not CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			OpenPopup( self, "PurchaseReservesItem", controller, {
				_model = menu:getModel(),
				_properties = {
					_isReservesRevealMenu = true
				}
			} ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and not CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			OpenPopup( self, "PurchaseCodPoints", controller, self:getModel() ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.BlackMarketUtility.IsBribeStream( controller ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBribeCount", 0 ) and not CoD.BlackMarketUtility.IsBribeStackStream( controller ) and not CoD.BlackMarketUtility.IsBribeMenuStream( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			OpenOverlay( self, "OpenBribeConfirmation", controller, {
				_properties = {
					_isReservesRevealMenu = true,
					_bribeType = LuaEnum.BRIBE_TYPES.BRIBE
				}
			} ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.BlackMarketUtility.IsBribeMenuStream( controller ) and IsBooleanDvarSet( "loot_weaponBribeMultiPurchaseActive" ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BlackMarketUtility.GoBackAndOpenBribeMenu( controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsControllerModelValueTrue( controller, "LootStreamProgress.allRngUnlocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.CASE ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootCaseCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBundleCrateCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_C2B10DCD9D6E876", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and CanPurchaseItem( controller, self ) and not CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "LootRNGResult.streamId", CoD.BlackMarketUtility.CrateStreams.THREE_PACK ) and not CoD.ModelUtility.IsSelfModelValueEqualToHashString( controller, menu, "name", @"hash_1717FF140F30014C" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.BlackMarketUtility.IsBribeStream( controller ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "ReservesItemCounts", "lootBribeCount", 0 ) and not CoD.BlackMarketUtility.IsBribeStackStream( controller ) and not CoD.BlackMarketUtility.IsBribeMenuStream( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "isBundleCrate" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_4E98D63EA5A0BD3", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueTrue( controller, "reservesRevealComplete" ) and CoD.BlackMarketUtility.IsBribeMenuStream( controller ) and IsBooleanDvarSet( "loot_weaponBribeMultiPurchaseActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_C2B10DCD9D6E876", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	RerollButton:subscribeToGlobalModel( f1_arg1, "PerController", "reservesRevealComplete", function ( model )
		local f19_local0 = RerollButton --[[ @ 0]]
		UpdateAllMenuButtonPrompts( f1_arg0, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RerollButton ) --[[ @ 0]]
	self.RerollButton = RerollButton --[[ @ 0]]
	
	ItemName = CoD.ReservesRerollItemDetails.new( f1_arg0, f1_arg1, 0.5, 0.5, -125, 125, 0, 0, 10, 190 ) --[[ @ 0]]
	ItemName:linkToElementModel( self, nil, false, function ( model )
		ItemName:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ItemName ) --[[ @ 0]]
	self.ItemName = ItemName --[[ @ 0]]
	
	DotPatternTop = LUI.UIImage.new( 0, 1, 13, -13, 0, 0, 22, 26 ) --[[ @ 0]]
	DotPatternTop:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DotPatternTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DotPatternTop:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DotPatternTop:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DotPatternTop ) --[[ @ 0]]
	self.DotPatternTop = DotPatternTop --[[ @ 0]]
	
	DotPatternBtm = LUI.UIImage.new( 0, 1, 13, -13, 0, 0, 148, 152 ) --[[ @ 0]]
	DotPatternBtm:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline_tiled" ) ) --[[ @ 0]]
	DotPatternBtm:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	DotPatternBtm:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	DotPatternBtm:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( DotPatternBtm ) --[[ @ 0]]
	self.DotPatternBtm = DotPatternBtm --[[ @ 0]]
	
	local f1_local15 = RerollButton --[[ @ 0]]
	local f1_local16 = RerollButton.subscribeToModel --[[ @ 0]]
	local f1_local17 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["LootRNGResult.streamId"], RerollButton.DirectorSelectButtonMiniInternal.MiddleText.__MiddleText_StringReference_FullPath ) --[[ @ 0]]
	f1_local15 = RerollButton --[[ @ 0]]
	f1_local16 = RerollButton.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["LootRNGResult.streamId"], RerollButton.DirectorSelectButtonMiniInternal.MiddleTextFocus.__MiddleTextFocus_String_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "AllowReroll",
			condition = function ( menu, element, event )
				return CoD.BlackMarketUtility.ShowReservesReRollButton( f1_arg1, menu )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelNil( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.lootCaseCount, function ( f23_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "lootCaseCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = DataSources.ReservesItemCounts.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17.lootBribeCount, function ( f24_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "lootBribeCount"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["LootRNGResult.streamId"], function ( f25_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f25_arg0:get(),
			modelName = "LootRNGResult.streamId"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, nil, false, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model and model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RerollButton.id = "RerollButton" --[[ @ 0]]
	self.__defaultFocus = RerollButton --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReservesReroll.__resetProperties = function ( f27_arg0 )
	f27_arg0.RerollButton:completeAnimation() --[[ @ 0]]
	f27_arg0.DotPatternBtm:completeAnimation() --[[ @ 0]]
	f27_arg0.DotPatternTop:completeAnimation() --[[ @ 0]]
	f27_arg0.ItemName:completeAnimation() --[[ @ 0]]
	f27_arg0.LayoutElementTL:completeAnimation() --[[ @ 0]]
	f27_arg0.LayoutElementTL2:completeAnimation() --[[ @ 0]]
	f27_arg0.CommonStripes01Tiled:completeAnimation() --[[ @ 0]]
	f27_arg0.LayoutTopBar2:completeAnimation() --[[ @ 0]]
	f27_arg0.LayoutTopBar:completeAnimation() --[[ @ 0]]
	f27_arg0.TiledBacking2:completeAnimation() --[[ @ 0]]
	f27_arg0.Bar:completeAnimation() --[[ @ 0]]
	f27_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
	f27_arg0.Container:completeAnimation() --[[ @ 0]]
	f27_arg0.Background:completeAnimation() --[[ @ 0]]
	f27_arg0.RerollButton:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.DotPatternBtm:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.DotPatternTop:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.ItemName:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.LayoutElementTL:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.LayoutElementTL2:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.CommonStripes01Tiled:setAlpha( 0.25 ) --[[ @ 0]]
	f27_arg0.LayoutTopBar2:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.LayoutTopBar:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.TiledBacking2:setAlpha( 0.5 ) --[[ @ 0]]
	f27_arg0.Bar:setAlpha( 0.88 ) --[[ @ 0]]
	f27_arg0.TiledBacking:setAlpha( 0.25 ) --[[ @ 0]]
	f27_arg0.Container:setAlpha( 0.25 ) --[[ @ 0]]
	f27_arg0.Background:setAlpha( 0.9 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReservesReroll.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f28_arg0.RerollButton:completeAnimation() --[[ @ 0]]
			f28_arg0.RerollButton:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.RerollButton ) --[[ @ 0]]
		end
	},
	AllowReroll = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 14 ) --[[ @ 0]]
			f30_arg0.Background:completeAnimation() --[[ @ 0]]
			f30_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.Background ) --[[ @ 0]]
			f30_arg0.Container:completeAnimation() --[[ @ 0]]
			f30_arg0.Container:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.Container ) --[[ @ 0]]
			f30_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f30_arg0.TiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.TiledBacking ) --[[ @ 0]]
			f30_arg0.Bar:completeAnimation() --[[ @ 0]]
			f30_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.Bar ) --[[ @ 0]]
			f30_arg0.TiledBacking2:completeAnimation() --[[ @ 0]]
			f30_arg0.TiledBacking2:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.TiledBacking2 ) --[[ @ 0]]
			f30_arg0.LayoutTopBar:completeAnimation() --[[ @ 0]]
			f30_arg0.LayoutTopBar:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.LayoutTopBar ) --[[ @ 0]]
			f30_arg0.LayoutTopBar2:completeAnimation() --[[ @ 0]]
			f30_arg0.LayoutTopBar2:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.LayoutTopBar2 ) --[[ @ 0]]
			f30_arg0.CommonStripes01Tiled:completeAnimation() --[[ @ 0]]
			f30_arg0.CommonStripes01Tiled:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.CommonStripes01Tiled ) --[[ @ 0]]
			f30_arg0.LayoutElementTL2:completeAnimation() --[[ @ 0]]
			f30_arg0.LayoutElementTL2:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.LayoutElementTL2 ) --[[ @ 0]]
			f30_arg0.LayoutElementTL:completeAnimation() --[[ @ 0]]
			f30_arg0.LayoutElementTL:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.LayoutElementTL ) --[[ @ 0]]
			f30_arg0.RerollButton:completeAnimation() --[[ @ 0]]
			f30_arg0.RerollButton:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.RerollButton ) --[[ @ 0]]
			f30_arg0.ItemName:completeAnimation() --[[ @ 0]]
			f30_arg0.ItemName:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.ItemName ) --[[ @ 0]]
			f30_arg0.DotPatternTop:completeAnimation() --[[ @ 0]]
			f30_arg0.DotPatternTop:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.DotPatternTop ) --[[ @ 0]]
			f30_arg0.DotPatternBtm:completeAnimation() --[[ @ 0]]
			f30_arg0.DotPatternBtm:setAlpha( 0 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.DotPatternBtm ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReservesReroll.__onClose = function ( f31_arg0 )
	f31_arg0.RerollButton:close() --[[ @ 0]]
	f31_arg0.ItemName:close() --[[ @ 0]]
end
 --[[ @ 0]]
