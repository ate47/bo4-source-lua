-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:e53b80d4668a156" ) --[[ @ 0]]
require( "x64:2d454b077a7fea61" ) --[[ @ 0]]
require( "x64:4be39623686bc47e" ) --[[ @ 0]]
require( "ui/uieditor/widgets/emptyfocusable" ) --[[ @ 0]]

CoD.MPSpraysAndGestures = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.MPSpraysAndGestures.__defaultWidth = 1920 --[[ @ 0]]
CoD.MPSpraysAndGestures.__defaultHeight = 1080 --[[ @ 0]]
CoD.MPSpraysAndGestures.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setUseCylinderMapping( false ) --[[ @ 0]]
	self:setClass( CoD.MPSpraysAndGestures ) --[[ @ 0]]
	self.id = "MPSpraysAndGestures" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BGDarkening = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BGDarkening:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BGDarkening:setAlpha( 0.65 ) --[[ @ 0]]
	self:addElement( BGDarkening ) --[[ @ 0]]
	self.BGDarkening = BGDarkening --[[ @ 0]]
	
	local CenterCircle = LUI.UIImage.new( 0.5, 0.5, -78, 78, 0.5, 0.5, -78, 78 ) --[[ @ 0]]
	CenterCircle:setImage( RegisterImage( @"uie_ui_hud_radial_menu_center_circle" ) ) --[[ @ 0]]
	CenterCircle:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	CenterCircle:setShaderVector( 0, 1.5, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( CenterCircle ) --[[ @ 0]]
	self.CenterCircle = CenterCircle --[[ @ 0]]
	
	local SpraysAndGestures = LUI.WheelLayout.new( f1_arg0, f1_arg1, nil ) --[[ @ 0]]
	SpraysAndGestures:setLeftRight( 0.5, 0.5, -177, 177 ) --[[ @ 0]]
	SpraysAndGestures:setTopBottom( 0.5, 0.5, -177, 177 ) --[[ @ 0]]
	SpraysAndGestures:setWidgetType( CoD.SprayOrGesture ) --[[ @ 0]]
	SpraysAndGestures:setCount( 8 ) --[[ @ 0]]
	SpraysAndGestures:setDataSource( "SpraysAndGestures" ) --[[ @ 0]]
	self:addElement( SpraysAndGestures ) --[[ @ 0]]
	self.SpraysAndGestures = SpraysAndGestures --[[ @ 0]]
	
	local MPWheelPrompt = CoD.MPWheelPrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -40, 40, 0.5, 0.5, -40, 40 ) --[[ @ 0]]
	MPWheelPrompt:subscribeToGlobalModel( f1_arg1, "Controller", "move_right_stick_button_image", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MPWheelPrompt.RStick:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MPWheelPrompt ) --[[ @ 0]]
	self.MPWheelPrompt = MPWheelPrompt --[[ @ 0]]
	
	local Pointer = CoD.WheelTriangleIndicator.new( f1_arg0, f1_arg1, 0.5, 0.5, -12, 12, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	Pointer:subscribeToGlobalModel( f1_arg1, "HUDItems", "wheelPointerDegrees", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			Pointer:setZRot( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Pointer ) --[[ @ 0]]
	self.Pointer = Pointer --[[ @ 0]]
	
	local emptyFocusable = nil --[[ @ 0]]
	
	emptyFocusable = CoD.emptyFocusable.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	emptyFocusable:registerEventHandler( "gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f4_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f4_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( emptyFocusable, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsPC() then
			SetElementState( self, self, controller, "DefaultState" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( emptyFocusable ) --[[ @ 0]]
	self.emptyFocusable = emptyFocusable --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f7_local0 = CoD.HUDUtility.IsSpraysAndGesturesButtonHeld( f1_arg1 ) --[[ @ 0]]
				if f7_local0 then
					if not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_game_ended"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_missile"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_demo_playing"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_player_dead"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_round_end_killcam"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] ) and not CoD.HUDUtility.HideWheelInPrematch( f1_arg1 ) then
						f7_local0 = not CoD.ModelUtility.IsClientModelValueTrue( f1_arg1, "isInLastStand" ) --[[ @ 0]]
					else
						f7_local0 = false --[[ @ 0]]
					end
				end
				return f7_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["ButtonBits.actionSlots.Sprays_Boasts"], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "ButtonBits.actionSlots.Sprays_Boasts"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["hudItems.PCWheels.sprayGestureWheelKeyPressed"], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "hudItems.PCWheels.sprayGestureWheelKeyPressed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["hudItems.PCWheels.calloutWheelKeyPressed"], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "hudItems.PCWheels.calloutWheelKeyPressed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_game_ended"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_missile"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_demo_playing"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_demo_playing"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_player_dead"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_round_end_killcam"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_round_end_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local9 = Engine[@"getmodelforclient"]( Engine[@"getclientnum"]( f1_arg1 ) ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.isInLastStand, function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "isInLastStand"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f22_arg2, f22_arg3, f22_arg4 )
		if IsSelfInState( self, "Visible" ) then
			CoD.HUDUtility.MenuDelayedSetRightStickLock( f1_arg0, controller, 0, true ) --[[ @ 0]]
		else
			CoD.HUDUtility.MenuDelayedSetRightStickLock( f1_arg0, controller, 125, false ) --[[ @ 0]]
			CoD.HUDUtility.DisableWheelSelection( controller, self, self.SpraysAndGestures ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "RightStick", "Length", function ( model )
		local f23_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "Visible" ) then
			CoD.HUDUtility.UpdateSelectionModelFromLength( f1_arg1, self, self.SpraysAndGestures, model, false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "RightStick", "Degrees", function ( model )
		local f24_local0 = self --[[ @ 0]]
		if IsSelfInState( self, "Visible" ) then
			CoD.HUDUtility.UpdateSelectionModelFromDegrees( f1_arg1, self, self.SpraysAndGestures, false ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "ButtonBits.actionSlots.Sprays_Boasts", function ( model )
		local f25_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToEnum( model, Enum[@"hash_1A3A4D6F29781E2C"][@"hash_643535815622BB59"] ) then
			CoD.HUDUtility.AddQuickSprayCallback( f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	if CoD.isPC then
		emptyFocusable.id = "emptyFocusable" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local8 = self --[[ @ 0]]
	CoD.HUDUtility.AddSprayGestureCallback( f1_arg1, self.SpraysAndGestures ) --[[ @ 0]]
	CoD.HUDUtility.InitWheelPCForMouseDrag( self, f1_arg1, f1_arg0, self.SpraysAndGestures ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.MPSpraysAndGestures.__resetProperties = function ( f26_arg0 )
	f26_arg0.SpraysAndGestures:completeAnimation() --[[ @ 0]]
	f26_arg0.CenterCircle:completeAnimation() --[[ @ 0]]
	f26_arg0.BGDarkening:completeAnimation() --[[ @ 0]]
	f26_arg0.Pointer:completeAnimation() --[[ @ 0]]
	f26_arg0.MPWheelPrompt:completeAnimation() --[[ @ 0]]
	f26_arg0.emptyFocusable:completeAnimation() --[[ @ 0]]
	f26_arg0.SpraysAndGestures:setAlpha( 1 ) --[[ @ 0]]
	f26_arg0.CenterCircle:setAlpha( 1 ) --[[ @ 0]]
	f26_arg0.BGDarkening:setAlpha( 0.65 ) --[[ @ 0]]
	f26_arg0.Pointer:setAlpha( 1 ) --[[ @ 0]]
	f26_arg0.MPWheelPrompt:setAlpha( 1 ) --[[ @ 0]]
	f26_arg0.emptyFocusable:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.MPSpraysAndGestures.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f27_arg0.BGDarkening:completeAnimation() --[[ @ 0]]
			f27_arg0.BGDarkening:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.BGDarkening ) --[[ @ 0]]
			f27_arg0.CenterCircle:completeAnimation() --[[ @ 0]]
			f27_arg0.CenterCircle:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.CenterCircle ) --[[ @ 0]]
			f27_arg0.SpraysAndGestures:completeAnimation() --[[ @ 0]]
			f27_arg0.SpraysAndGestures:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.SpraysAndGestures ) --[[ @ 0]]
			f27_arg0.MPWheelPrompt:completeAnimation() --[[ @ 0]]
			f27_arg0.MPWheelPrompt:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.MPWheelPrompt ) --[[ @ 0]]
			f27_arg0.Pointer:completeAnimation() --[[ @ 0]]
			f27_arg0.Pointer:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.Pointer ) --[[ @ 0]]
			f27_arg0.emptyFocusable:completeAnimation() --[[ @ 0]]
			f27_arg0.emptyFocusable:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.emptyFocusable ) --[[ @ 0]]
		end,
		Visible = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f28_local0 = function ( f29_arg0 )
				f28_arg0.BGDarkening:beginAnimation( 60 ) --[[ @ 0]]
				f28_arg0.BGDarkening:setAlpha( 0.4 ) --[[ @ 0]]
				f28_arg0.BGDarkening:registerEventHandler( "interrupted_keyframe", f28_arg0.clipInterrupted ) --[[ @ 0]]
				f28_arg0.BGDarkening:registerEventHandler( "transition_complete_keyframe", f28_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f28_arg0.BGDarkening:completeAnimation() --[[ @ 0]]
			f28_arg0.BGDarkening:setAlpha( 0 ) --[[ @ 0]]
			f28_local0( f28_arg0.BGDarkening ) --[[ @ 0]]
			local f28_local1 = function ( f30_arg0 )
				f28_arg0.CenterCircle:beginAnimation( 60 ) --[[ @ 0]]
				f28_arg0.CenterCircle:setAlpha( 1 ) --[[ @ 0]]
				f28_arg0.CenterCircle:registerEventHandler( "interrupted_keyframe", f28_arg0.clipInterrupted ) --[[ @ 0]]
				f28_arg0.CenterCircle:registerEventHandler( "transition_complete_keyframe", f28_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f28_arg0.CenterCircle:completeAnimation() --[[ @ 0]]
			f28_arg0.CenterCircle:setAlpha( 0 ) --[[ @ 0]]
			f28_local1( f28_arg0.CenterCircle ) --[[ @ 0]]
			local f28_local2 = function ( f31_arg0 )
				f28_arg0.SpraysAndGestures:beginAnimation( 60 ) --[[ @ 0]]
				f28_arg0.SpraysAndGestures:setAlpha( 1 ) --[[ @ 0]]
				f28_arg0.SpraysAndGestures:registerEventHandler( "interrupted_keyframe", f28_arg0.clipInterrupted ) --[[ @ 0]]
				f28_arg0.SpraysAndGestures:registerEventHandler( "transition_complete_keyframe", f28_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f28_arg0.SpraysAndGestures:completeAnimation() --[[ @ 0]]
			f28_arg0.SpraysAndGestures:setAlpha( 0 ) --[[ @ 0]]
			f28_local2( f28_arg0.SpraysAndGestures ) --[[ @ 0]]
			local f28_local3 = function ( f32_arg0 )
				f28_arg0.MPWheelPrompt:beginAnimation( 60 ) --[[ @ 0]]
				f28_arg0.MPWheelPrompt:setAlpha( 1 ) --[[ @ 0]]
				f28_arg0.MPWheelPrompt:registerEventHandler( "interrupted_keyframe", f28_arg0.clipInterrupted ) --[[ @ 0]]
				f28_arg0.MPWheelPrompt:registerEventHandler( "transition_complete_keyframe", f28_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f28_arg0.MPWheelPrompt:completeAnimation() --[[ @ 0]]
			f28_arg0.MPWheelPrompt:setAlpha( 0 ) --[[ @ 0]]
			f28_local3( f28_arg0.MPWheelPrompt ) --[[ @ 0]]
			local f28_local4 = function ( f33_arg0 )
				f28_arg0.Pointer:beginAnimation( 60 ) --[[ @ 0]]
				f28_arg0.Pointer:setAlpha( 1 ) --[[ @ 0]]
				f28_arg0.Pointer:registerEventHandler( "interrupted_keyframe", f28_arg0.clipInterrupted ) --[[ @ 0]]
				f28_arg0.Pointer:registerEventHandler( "transition_complete_keyframe", f28_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f28_arg0.Pointer:completeAnimation() --[[ @ 0]]
			f28_arg0.Pointer:setAlpha( 0 ) --[[ @ 0]]
			f28_local4( f28_arg0.Pointer ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		DefaultState = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f35_local0 = function ( f36_arg0 )
				f35_arg0.BGDarkening:beginAnimation( 60 ) --[[ @ 0]]
				f35_arg0.BGDarkening:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.BGDarkening:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.BGDarkening:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.BGDarkening:completeAnimation() --[[ @ 0]]
			f35_arg0.BGDarkening:setAlpha( 0.4 ) --[[ @ 0]]
			f35_local0( f35_arg0.BGDarkening ) --[[ @ 0]]
			local f35_local1 = function ( f37_arg0 )
				f35_arg0.CenterCircle:beginAnimation( 60 ) --[[ @ 0]]
				f35_arg0.CenterCircle:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.CenterCircle:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.CenterCircle:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.CenterCircle:completeAnimation() --[[ @ 0]]
			f35_arg0.CenterCircle:setAlpha( 1 ) --[[ @ 0]]
			f35_local1( f35_arg0.CenterCircle ) --[[ @ 0]]
			local f35_local2 = function ( f38_arg0 )
				f35_arg0.SpraysAndGestures:beginAnimation( 60 ) --[[ @ 0]]
				f35_arg0.SpraysAndGestures:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.SpraysAndGestures:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.SpraysAndGestures:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.SpraysAndGestures:completeAnimation() --[[ @ 0]]
			f35_arg0.SpraysAndGestures:setAlpha( 1 ) --[[ @ 0]]
			f35_local2( f35_arg0.SpraysAndGestures ) --[[ @ 0]]
			local f35_local3 = function ( f39_arg0 )
				f35_arg0.MPWheelPrompt:beginAnimation( 60 ) --[[ @ 0]]
				f35_arg0.MPWheelPrompt:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.MPWheelPrompt:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.MPWheelPrompt:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.MPWheelPrompt:completeAnimation() --[[ @ 0]]
			f35_arg0.MPWheelPrompt:setAlpha( 1 ) --[[ @ 0]]
			f35_local3( f35_arg0.MPWheelPrompt ) --[[ @ 0]]
			local f35_local4 = function ( f40_arg0 )
				f35_arg0.Pointer:beginAnimation( 60 ) --[[ @ 0]]
				f35_arg0.Pointer:setAlpha( 0 ) --[[ @ 0]]
				f35_arg0.Pointer:registerEventHandler( "interrupted_keyframe", f35_arg0.clipInterrupted ) --[[ @ 0]]
				f35_arg0.Pointer:registerEventHandler( "transition_complete_keyframe", f35_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f35_arg0.Pointer:completeAnimation() --[[ @ 0]]
			f35_arg0.Pointer:setAlpha( 1 ) --[[ @ 0]]
			f35_local4( f35_arg0.Pointer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.MPSpraysAndGestures.__onClose = function ( f41_arg0 )
	f41_arg0.SpraysAndGestures:close() --[[ @ 0]]
	f41_arg0.MPWheelPrompt:close() --[[ @ 0]]
	f41_arg0.Pointer:close() --[[ @ 0]]
	f41_arg0.emptyFocusable:close() --[[ @ 0]]
end
 --[[ @ 0]]
