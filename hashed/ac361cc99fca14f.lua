-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/scoreboard/scoreboardgamestatusscores" ) --[[ @ 0]]

CoD.AARScoreboardSafeArea = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARScoreboardSafeArea.__defaultWidth = 1920 --[[ @ 0]]
CoD.AARScoreboardSafeArea.__defaultHeight = 800 --[[ @ 0]]
CoD.AARScoreboardSafeArea.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARScoreboardSafeArea ) --[[ @ 0]]
	self.id = "AARScoreboardSafeArea" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local ScoreboardGameStatusScores = CoD.ScoreboardGameStatusScores.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -178.5, 21.5 ) --[[ @ 0]]
	ScoreboardGameStatusScores:mergeStateConditions( {
		{
			stateName = "HiddenByEvent",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "TDM",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "tdm", f1_arg1 )
			end
		},
		{
			stateName = "Dom",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "dom", f1_arg1 )
			end
		},
		{
			stateName = "Control",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "control", f1_arg1 )
			end
		},
		{
			stateName = "Hardpoint",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "koth", f1_arg1 )
			end
		},
		{
			stateName = "SearchDestroy",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "sd", f1_arg1 )
			end
		},
		{
			stateName = "Bounty",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "bounty", f1_arg1 )
			end
		},
		{
			stateName = "FFA",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "dm", f1_arg1 )
			end
		},
		{
			stateName = "Gun",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "gun", f1_arg1 )
			end
		},
		{
			stateName = "Escort",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "escort", f1_arg1 )
			end
		},
		{
			stateName = "Infect",
			condition = function ( menu, element, event )
				return CoD.AARUtility.IsGameTypeEqualToString( "infect", f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = ScoreboardGameStatusScores --[[ @ 0]]
	local f1_local3 = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["factions.isCoDCaster"], function ( f13_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ScoreboardGameStatusScores --[[ @ 0]]
	f1_local3 = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["scoreboard.team1.count"], function ( f14_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "scoreboard.team1.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = ScoreboardGameStatusScores --[[ @ 0]]
	f1_local3 = ScoreboardGameStatusScores.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["scoreboard.team2.count"], function ( f15_arg0 )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "scoreboard.team2.count"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ScoreboardGameStatusScores:linkToElementModel( ScoreboardGameStatusScores, "scoreboard.characterIndex", true, function ( model )
		f1_arg0:updateElementState( ScoreboardGameStatusScores, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "scoreboard.characterIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ScoreboardGameStatusScores.ScoreboardButtonPrompts:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ScoreboardGameStatusScores ) --[[ @ 0]]
	self.ScoreboardGameStatusScores = ScoreboardGameStatusScores --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local3 = self --[[ @ 0]]
	CoD.ScoreboardUtility.SetupFooterSubscription( self.ScoreboardGameStatusScores, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.AARScoreboardSafeArea.__onClose = function ( f17_arg0 )
	f17_arg0.ScoreboardGameStatusScores:close() --[[ @ 0]]
end
 --[[ @ 0]]
