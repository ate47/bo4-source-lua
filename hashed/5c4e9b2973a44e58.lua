-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:214cf3f0705aae36" ) --[[ @ 0]]

CoD.EmblemEditorLayerProperties = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorLayerProperties.__defaultWidth = 695 --[[ @ 0]]
CoD.EmblemEditorLayerProperties.__defaultHeight = 68 --[[ @ 0]]
CoD.EmblemEditorLayerProperties.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorLayerProperties ) --[[ @ 0]]
	self.id = "EmblemEditorLayerProperties" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 0, 0, 695, 0, 0, 0, 68 ) --[[ @ 0]]
	Backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 77.5, 617.5, 0, 0, 0, 68 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local NoiseTiledBackingAdd = LUI.UIImage.new( 0, 0, 77.5, 617.5, 0, 0, 0, 31 ) --[[ @ 0]]
	NoiseTiledBackingAdd:setAlpha( 0.2 ) --[[ @ 0]]
	NoiseTiledBackingAdd:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBackingAdd:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	NoiseTiledBackingAdd:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBackingAdd:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBackingAdd ) --[[ @ 0]]
	self.NoiseTiledBackingAdd = NoiseTiledBackingAdd --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 0, -1, 696, 0, 0, -1, 69 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local opacityValue = LUI.UIText.new( 1, 1, -93.5, 14.5, 0, 0, 39, 64 ) --[[ @ 0]]
	opacityValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	opacityValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	opacityValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	opacityValue:subscribeToGlobalModel( f1_arg1, "EmblemSelectedLayerProperties", "max_opacity", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			opacityValue:setText( AppendString( "%", f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( opacityValue ) --[[ @ 0]]
	self.opacityValue = opacityValue --[[ @ 0]]
	
	local opacityText = LUI.UIText.new( 0, 0, 600, 691, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	opacityText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	opacityText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6611006D6269F87D" ) ) --[[ @ 0]]
	opacityText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	opacityText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	opacityText:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( opacityText ) --[[ @ 0]]
	self.opacityText = opacityText --[[ @ 0]]
	
	local rotationValue = LUI.UIText.new( 1, 1, -195.5, -101.5, 0, 0, 39, 64 ) --[[ @ 0]]
	rotationValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	rotationValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	rotationValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	rotationValue:linkToElementModel( self, "rotation", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			rotationValue:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( rotationValue ) --[[ @ 0]]
	self.rotationValue = rotationValue --[[ @ 0]]
	
	local rotationText = LUI.UIText.new( 0, 0, 498.5, 594.5, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	rotationText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	rotationText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5CEAD96F8011A558" ) ) --[[ @ 0]]
	rotationText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	rotationText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	rotationText:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( rotationText ) --[[ @ 0]]
	self.rotationText = rotationText --[[ @ 0]]
	
	local yScaleValue = LUI.UIText.new( 1, 1, -261.5, -195.5, 0, 0, 39, 64 ) --[[ @ 0]]
	yScaleValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	yScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	yScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	yScaleValue:linkToElementModel( self, "yscale", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			yScaleValue:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( yScaleValue ) --[[ @ 0]]
	self.yScaleValue = yScaleValue --[[ @ 0]]
	
	local yScaleValue2 = LUI.UIText.new( 1, 1, -261.5, -195.5, 0, 0, 39, 64 ) --[[ @ 0]]
	yScaleValue2:setTTF( "dinnext_regular" ) --[[ @ 0]]
	yScaleValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	yScaleValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	yScaleValue2:linkToElementModel( self, "yscale", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			yScaleValue2:setText( f5_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( yScaleValue2 ) --[[ @ 0]]
	self.yScaleValue2 = yScaleValue2 --[[ @ 0]]
	
	local xScaleValue = LUI.UIText.new( 1, 1, -335, -283, 0, 0, 39, 64 ) --[[ @ 0]]
	xScaleValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	xScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	xScaleValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	xScaleValue:linkToElementModel( self, "xscale", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			xScaleValue:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( xScaleValue ) --[[ @ 0]]
	self.xScaleValue = xScaleValue --[[ @ 0]]
	
	local xScaleValue2 = LUI.UIText.new( 1, 1, -335, -283, 0, 0, 39, 64 ) --[[ @ 0]]
	xScaleValue2:setTTF( "dinnext_regular" ) --[[ @ 0]]
	xScaleValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	xScaleValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	xScaleValue2:linkToElementModel( self, "xscale", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			xScaleValue2:setText( f7_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( xScaleValue2 ) --[[ @ 0]]
	self.xScaleValue2 = xScaleValue2 --[[ @ 0]]
	
	local ScaleTextY = LUI.UIText.new( 1, 1, -282, -200, 0, 0, 38, 63 ) --[[ @ 0]]
	ScaleTextY:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	ScaleTextY:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C8E669F24C21949" ) ) --[[ @ 0]]
	ScaleTextY:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ScaleTextY:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ScaleTextY:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ScaleTextY ) --[[ @ 0]]
	self.ScaleTextY = ScaleTextY --[[ @ 0]]
	
	local ScaleTextX = LUI.UIText.new( 0, 0, 338, 395, 0, 0, 38, 63 ) --[[ @ 0]]
	ScaleTextX:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	ScaleTextX:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79BAB2C368028BBC" ) ) --[[ @ 0]]
	ScaleTextX:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ScaleTextX:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ScaleTextX:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ScaleTextX ) --[[ @ 0]]
	self.ScaleTextX = ScaleTextX --[[ @ 0]]
	
	local scaleText = LUI.UIText.new( 0, 0, 336, 476, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	scaleText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	scaleText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_339B482734C22440" ) ) --[[ @ 0]]
	scaleText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	scaleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	scaleText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( scaleText ) --[[ @ 0]]
	self.scaleText = scaleText --[[ @ 0]]
	
	local yPositionValue = LUI.UIText.new( 1, 1, -424, -360, 0, 0, 39, 64 ) --[[ @ 0]]
	yPositionValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	yPositionValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	yPositionValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	yPositionValue:linkToElementModel( self, "yposition", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			yPositionValue:setText( f8_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( yPositionValue ) --[[ @ 0]]
	self.yPositionValue = yPositionValue --[[ @ 0]]
	
	local yPositionValue2 = LUI.UIText.new( 1, 1, -424, -360, 0, 0, 39, 64 ) --[[ @ 0]]
	yPositionValue2:setTTF( "dinnext_regular" ) --[[ @ 0]]
	yPositionValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	yPositionValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	yPositionValue2:linkToElementModel( self, "yposition", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			yPositionValue2:setText( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( yPositionValue2 ) --[[ @ 0]]
	self.yPositionValue2 = yPositionValue2 --[[ @ 0]]
	
	local xPositionValue = LUI.UIText.new( 1, 1, -500, -448, 0, 0, 39, 64 ) --[[ @ 0]]
	xPositionValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	xPositionValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	xPositionValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	xPositionValue:linkToElementModel( self, "xposition", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			xPositionValue:setText( f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( xPositionValue ) --[[ @ 0]]
	self.xPositionValue = xPositionValue --[[ @ 0]]
	
	local xPositionValue2 = LUI.UIText.new( 1, 1, -500, -448, 0, 0, 39, 64 ) --[[ @ 0]]
	xPositionValue2:setTTF( "dinnext_regular" ) --[[ @ 0]]
	xPositionValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	xPositionValue2:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	xPositionValue2:linkToElementModel( self, "xposition", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			xPositionValue2:setText( f11_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( xPositionValue2 ) --[[ @ 0]]
	self.xPositionValue2 = xPositionValue2 --[[ @ 0]]
	
	local PositionTextY = LUI.UIText.new( 1, 1, -445, -387, 0, 0, 38, 63 ) --[[ @ 0]]
	PositionTextY:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	PositionTextY:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4C8E669F24C21949" ) ) --[[ @ 0]]
	PositionTextY:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	PositionTextY:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PositionTextY:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( PositionTextY ) --[[ @ 0]]
	self.PositionTextY = PositionTextY --[[ @ 0]]
	
	local PositionTextX = LUI.UIText.new( 0, 0, 174, 232, 0, 0, 38, 63 ) --[[ @ 0]]
	PositionTextX:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	PositionTextX:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79BAB2C368028BBC" ) ) --[[ @ 0]]
	PositionTextX:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	PositionTextX:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PositionTextX:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( PositionTextX ) --[[ @ 0]]
	self.PositionTextX = PositionTextX --[[ @ 0]]
	
	local positionText = LUI.UIText.new( 0, 0, 173, 313, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	positionText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	positionText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_64F645CAB5BA8FD5" ) ) --[[ @ 0]]
	positionText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	positionText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	positionText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( positionText ) --[[ @ 0]]
	self.positionText = positionText --[[ @ 0]]
	
	local linkedLayersValue = LUI.UIText.new( 1, 1, -253.5, -78.5, 0, 0, 39, 64 ) --[[ @ 0]]
	linkedLayersValue:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	linkedLayersValue:setTTF( "dinnext_regular" ) --[[ @ 0]]
	linkedLayersValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	linkedLayersValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	linkedLayersValue:subscribeToGlobalModel( f1_arg1, "EmblemProperties", "linkedLayerCount", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			linkedLayersValue:setText( f12_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( linkedLayersValue ) --[[ @ 0]]
	self.linkedLayersValue = linkedLayersValue --[[ @ 0]]
	
	local groupsUsedValue = CoD.GroupFractionLabel.new( f1_arg0, f1_arg1, 1, 1, -433.5, -258.5, 0, 0, 31, 66 ) --[[ @ 0]]
	groupsUsedValue:mergeStateConditions( {
		{
			stateName = "GroupsFull",
			condition = function ( menu, element, event )
				return not IsGroupSlotAvailable( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local groupsUsedText = groupsUsedValue --[[ @ 0]]
	local linkedLayerText = groupsUsedValue.subscribeToModel --[[ @ 0]]
	local layerUsedValue = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	linkedLayerText( groupsUsedText, layerUsedValue["Emblem.EmblemProperties.groupsUsed"], function ( f14_arg0 )
		f1_arg0:updateElementState( groupsUsedValue, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "Emblem.EmblemProperties.groupsUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	groupsUsedValue:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	groupsUsedValue:subscribeToGlobalModel( f1_arg1, "EmblemProperties", "groupsUsedFraction", function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			groupsUsedValue.groupsUsedValue:setText( Engine[@"hash_4F9F1239CFD921FE"]( f15_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( groupsUsedValue ) --[[ @ 0]]
	self.groupsUsedValue = groupsUsedValue --[[ @ 0]]
	
	linkedLayerText = LUI.UIText.new( 0, 0, 441.5, 619.5, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	linkedLayerText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	linkedLayerText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/linked_layers" ) ) --[[ @ 0]]
	linkedLayerText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	linkedLayerText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	linkedLayerText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( linkedLayerText ) --[[ @ 0]]
	self.linkedLayerText = linkedLayerText --[[ @ 0]]
	
	groupsUsedText = LUI.UIText.new( 0, 0, 261, 439, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	groupsUsedText:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	groupsUsedText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5374BB53B879BB06" ) ) --[[ @ 0]]
	groupsUsedText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	groupsUsedText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	groupsUsedText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( groupsUsedText ) --[[ @ 0]]
	self.groupsUsedText = groupsUsedText --[[ @ 0]]
	
	layerUsedValue = CoD.GroupFractionLabel.new( f1_arg0, f1_arg1, 0, 0, 81, 256, 0, 0, 31, 66 ) --[[ @ 0]]
	layerUsedValue:mergeStateConditions( {
		{
			stateName = "GroupsFull",
			condition = function ( menu, element, event )
				return not IsEmptyLayerAvailable( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local Divider06 = layerUsedValue --[[ @ 0]]
	local LayerUsed = layerUsedValue.subscribeToModel --[[ @ 0]]
	local Divider05 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	LayerUsed( Divider06, Divider05["Emblem.EmblemProperties.layersUsed"], function ( f17_arg0 )
		f1_arg0:updateElementState( layerUsedValue, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "Emblem.EmblemProperties.layersUsed"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	layerUsedValue:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	layerUsedValue:subscribeToGlobalModel( f1_arg1, "EmblemProperties", "layersUsedFraction", function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			layerUsedValue.groupsUsedValue:setText( Engine[@"hash_4F9F1239CFD921FE"]( f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( layerUsedValue ) --[[ @ 0]]
	self.layerUsedValue = layerUsedValue --[[ @ 0]]
	
	LayerUsed = LUI.UIText.new( 0, 0, 81, 259, 0, 0, 3.5, 28.5 ) --[[ @ 0]]
	LayerUsed:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	LayerUsed:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3357A304FD698FC" ) ) --[[ @ 0]]
	LayerUsed:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	LayerUsed:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	LayerUsed:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( LayerUsed ) --[[ @ 0]]
	self.LayerUsed = LayerUsed --[[ @ 0]]
	
	Divider06 = LUI.UIImage.new( 0, 0, 593.5, 597.5, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider06:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider06:setAlpha( 0 ) --[[ @ 0]]
	Divider06:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider06:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider06:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider06:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider06 ) --[[ @ 0]]
	self.Divider06 = Divider06 --[[ @ 0]]
	
	Divider05 = LUI.UIImage.new( 0, 0, 492.5, 496.5, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider05:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider05:setAlpha( 0 ) --[[ @ 0]]
	Divider05:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider05:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider05:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider05:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider05 ) --[[ @ 0]]
	self.Divider05 = Divider05 --[[ @ 0]]
	
	local Divider04 = LUI.UIImage.new( 0, 0, 434.5, 438.5, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider04:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider04:setAlpha( 0.1 ) --[[ @ 0]]
	Divider04:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider04:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider04:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider04:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider04 ) --[[ @ 0]]
	self.Divider04 = Divider04 --[[ @ 0]]
	
	local Divider03 = LUI.UIImage.new( 0, 0, 329, 333, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider03:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider03:setAlpha( 0 ) --[[ @ 0]]
	Divider03:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider03:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider03:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider03:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider03 ) --[[ @ 0]]
	self.Divider03 = Divider03 --[[ @ 0]]
	
	local Divider02 = LUI.UIImage.new( 0, 0, 255.5, 259.5, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider02:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider02:setAlpha( 0.1 ) --[[ @ 0]]
	Divider02:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider02:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider02:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider02:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider02 ) --[[ @ 0]]
	self.Divider02 = Divider02 --[[ @ 0]]
	
	local Divider01 = LUI.UIImage.new( 0, 0, 166, 170, 0, 0, 0, 68 ) --[[ @ 0]]
	Divider01:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	Divider01:setAlpha( 0 ) --[[ @ 0]]
	Divider01:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Divider01:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Divider01:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Divider01:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Divider01 ) --[[ @ 0]]
	self.Divider01 = Divider01 --[[ @ 0]]
	
	local dividerH = LUI.UIImage.new( 0, 0, 0, 695, 0, 0, 29, 33 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KBMEditMode",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "EditModeLayerProperties",
			condition = function ( menu, element, event )
				return true
			end
		},
		{
			stateName = "ArabicFrontEnd",
			condition = function ( menu, element, event )
				local f21_local0 --[[ @ 0]]
				if not IsInGame() then
					f21_local0 = IsArabicSku() --[[ @ 0]]
				else
					f21_local0 = false --[[ @ 0]]
				end
				return f21_local0
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorLayerProperties.__resetProperties = function ( f22_arg0 )
	f22_arg0.positionText:completeAnimation() --[[ @ 0]]
	f22_arg0.xPositionValue:completeAnimation() --[[ @ 0]]
	f22_arg0.yPositionValue:completeAnimation() --[[ @ 0]]
	f22_arg0.scaleText:completeAnimation() --[[ @ 0]]
	f22_arg0.xScaleValue:completeAnimation() --[[ @ 0]]
	f22_arg0.yScaleValue:completeAnimation() --[[ @ 0]]
	f22_arg0.rotationText:completeAnimation() --[[ @ 0]]
	f22_arg0.rotationValue:completeAnimation() --[[ @ 0]]
	f22_arg0.opacityValue:completeAnimation() --[[ @ 0]]
	f22_arg0.opacityText:completeAnimation() --[[ @ 0]]
	f22_arg0.ScaleTextY:completeAnimation() --[[ @ 0]]
	f22_arg0.PositionTextY:completeAnimation() --[[ @ 0]]
	f22_arg0.ScaleTextX:completeAnimation() --[[ @ 0]]
	f22_arg0.PositionTextX:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider02:completeAnimation() --[[ @ 0]]
	f22_arg0.Backing:completeAnimation() --[[ @ 0]]
	f22_arg0.Frame:completeAnimation() --[[ @ 0]]
	f22_arg0.dividerH:completeAnimation() --[[ @ 0]]
	f22_arg0.yScaleValue2:completeAnimation() --[[ @ 0]]
	f22_arg0.xScaleValue2:completeAnimation() --[[ @ 0]]
	f22_arg0.yPositionValue2:completeAnimation() --[[ @ 0]]
	f22_arg0.xPositionValue2:completeAnimation() --[[ @ 0]]
	f22_arg0.groupsUsedValue:completeAnimation() --[[ @ 0]]
	f22_arg0.groupsUsedText:completeAnimation() --[[ @ 0]]
	f22_arg0.linkedLayerText:completeAnimation() --[[ @ 0]]
	f22_arg0.linkedLayersValue:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider04:completeAnimation() --[[ @ 0]]
	f22_arg0.LayerUsed:completeAnimation() --[[ @ 0]]
	f22_arg0.layerUsedValue:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider01:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider03:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider05:completeAnimation() --[[ @ 0]]
	f22_arg0.Divider06:completeAnimation() --[[ @ 0]]
	f22_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f22_arg0.NoiseTiledBackingAdd:completeAnimation() --[[ @ 0]]
	f22_arg0.positionText:setLeftRight( 0, 0, 173, 313 ) --[[ @ 0]]
	f22_arg0.positionText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.xPositionValue:setLeftRight( 1, 1, -500, -448 ) --[[ @ 0]]
	f22_arg0.xPositionValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.yPositionValue:setLeftRight( 1, 1, -424, -360 ) --[[ @ 0]]
	f22_arg0.yPositionValue:setTopBottom( 0, 0, 39, 64 ) --[[ @ 0]]
	f22_arg0.yPositionValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.scaleText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.xScaleValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.yScaleValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.rotationText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.rotationValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.opacityValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.opacityText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.ScaleTextY:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.PositionTextY:setLeftRight( 1, 1, -445, -387 ) --[[ @ 0]]
	f22_arg0.PositionTextY:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.ScaleTextX:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.PositionTextX:setLeftRight( 0, 0, 174, 232 ) --[[ @ 0]]
	f22_arg0.PositionTextX:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.Divider02:setTopBottom( 0, 0, 0, 68 ) --[[ @ 0]]
	f22_arg0.Divider02:setAlpha( 0.1 ) --[[ @ 0]]
	f22_arg0.Backing:setLeftRight( 0, 0, 0, 695 ) --[[ @ 0]]
	f22_arg0.Frame:setLeftRight( 0, 0, -1, 696 ) --[[ @ 0]]
	f22_arg0.dividerH:setLeftRight( 0, 0, 0, 695 ) --[[ @ 0]]
	f22_arg0.yScaleValue2:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.xScaleValue2:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.yPositionValue2:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.xPositionValue2:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.groupsUsedValue:setLeftRight( 1, 1, -433.5, -258.5 ) --[[ @ 0]]
	f22_arg0.groupsUsedValue:setTopBottom( 0, 0, 31, 66 ) --[[ @ 0]]
	f22_arg0.groupsUsedValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.groupsUsedText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.linkedLayerText:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.linkedLayersValue:setLeftRight( 1, 1, -253.5, -78.5 ) --[[ @ 0]]
	f22_arg0.linkedLayersValue:setTopBottom( 0, 0, 39, 64 ) --[[ @ 0]]
	f22_arg0.linkedLayersValue:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.Divider04:setLeftRight( 0, 0, 434.5, 438.5 ) --[[ @ 0]]
	f22_arg0.Divider04:setAlpha( 0.1 ) --[[ @ 0]]
	f22_arg0.LayerUsed:setLeftRight( 0, 0, 81, 259 ) --[[ @ 0]]
	f22_arg0.layerUsedValue:setLeftRight( 0, 0, 81, 256 ) --[[ @ 0]]
	f22_arg0.Divider01:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	f22_arg0.Divider01:setAlpha( 0 ) --[[ @ 0]]
	f22_arg0.Divider03:setAlpha( 0 ) --[[ @ 0]]
	f22_arg0.Divider05:setTopBottom( 0, 0, 0, 68 ) --[[ @ 0]]
	f22_arg0.Divider05:setAlpha( 0 ) --[[ @ 0]]
	f22_arg0.Divider06:setAlpha( 0 ) --[[ @ 0]]
	f22_arg0.NoiseTiledBacking:setLeftRight( 0, 0, 77.5, 617.5 ) --[[ @ 0]]
	f22_arg0.NoiseTiledBackingAdd:setLeftRight( 0, 0, 77.5, 617.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditorLayerProperties.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 22 ) --[[ @ 0]]
			f23_arg0.Backing:completeAnimation() --[[ @ 0]]
			f23_arg0.Backing:setLeftRight( 0, 0, 77.5, 617.5 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Backing ) --[[ @ 0]]
			f23_arg0.Frame:completeAnimation() --[[ @ 0]]
			f23_arg0.Frame:setLeftRight( 0, 0, 76.5, 618.5 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Frame ) --[[ @ 0]]
			f23_arg0.opacityValue:completeAnimation() --[[ @ 0]]
			f23_arg0.opacityValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.opacityValue ) --[[ @ 0]]
			f23_arg0.opacityText:completeAnimation() --[[ @ 0]]
			f23_arg0.opacityText:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.opacityText ) --[[ @ 0]]
			f23_arg0.rotationValue:completeAnimation() --[[ @ 0]]
			f23_arg0.rotationValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.rotationValue ) --[[ @ 0]]
			f23_arg0.rotationText:completeAnimation() --[[ @ 0]]
			f23_arg0.rotationText:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.rotationText ) --[[ @ 0]]
			f23_arg0.yScaleValue:completeAnimation() --[[ @ 0]]
			f23_arg0.yScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.yScaleValue ) --[[ @ 0]]
			f23_arg0.yScaleValue2:completeAnimation() --[[ @ 0]]
			f23_arg0.yScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.yScaleValue2 ) --[[ @ 0]]
			f23_arg0.xScaleValue:completeAnimation() --[[ @ 0]]
			f23_arg0.xScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.xScaleValue ) --[[ @ 0]]
			f23_arg0.xScaleValue2:completeAnimation() --[[ @ 0]]
			f23_arg0.xScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.xScaleValue2 ) --[[ @ 0]]
			f23_arg0.ScaleTextY:completeAnimation() --[[ @ 0]]
			f23_arg0.ScaleTextY:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.ScaleTextY ) --[[ @ 0]]
			f23_arg0.ScaleTextX:completeAnimation() --[[ @ 0]]
			f23_arg0.ScaleTextX:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.ScaleTextX ) --[[ @ 0]]
			f23_arg0.scaleText:completeAnimation() --[[ @ 0]]
			f23_arg0.scaleText:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.scaleText ) --[[ @ 0]]
			f23_arg0.yPositionValue:completeAnimation() --[[ @ 0]]
			f23_arg0.yPositionValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.yPositionValue ) --[[ @ 0]]
			f23_arg0.yPositionValue2:completeAnimation() --[[ @ 0]]
			f23_arg0.yPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.yPositionValue2 ) --[[ @ 0]]
			f23_arg0.xPositionValue:completeAnimation() --[[ @ 0]]
			f23_arg0.xPositionValue:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.xPositionValue ) --[[ @ 0]]
			f23_arg0.xPositionValue2:completeAnimation() --[[ @ 0]]
			f23_arg0.xPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.xPositionValue2 ) --[[ @ 0]]
			f23_arg0.PositionTextY:completeAnimation() --[[ @ 0]]
			f23_arg0.PositionTextY:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.PositionTextY ) --[[ @ 0]]
			f23_arg0.PositionTextX:completeAnimation() --[[ @ 0]]
			f23_arg0.PositionTextX:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.PositionTextX ) --[[ @ 0]]
			f23_arg0.positionText:completeAnimation() --[[ @ 0]]
			f23_arg0.positionText:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.positionText ) --[[ @ 0]]
			f23_arg0.Divider02:completeAnimation() --[[ @ 0]]
			f23_arg0.Divider02:setAlpha( 0.2 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Divider02 ) --[[ @ 0]]
			f23_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f23_arg0.dividerH:setLeftRight( 0, 0, 78, 617 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.dividerH ) --[[ @ 0]]
		end
	},
	KBMEditMode = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 27 ) --[[ @ 0]]
			f24_arg0.Backing:completeAnimation() --[[ @ 0]]
			f24_arg0.Backing:setLeftRight( 0, 0, 77.5, 617.5 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Backing ) --[[ @ 0]]
			f24_arg0.Frame:completeAnimation() --[[ @ 0]]
			f24_arg0.Frame:setLeftRight( 0, 0, 76.5, 618.5 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Frame ) --[[ @ 0]]
			f24_arg0.opacityValue:completeAnimation() --[[ @ 0]]
			f24_arg0.opacityValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.opacityValue ) --[[ @ 0]]
			f24_arg0.opacityText:completeAnimation() --[[ @ 0]]
			f24_arg0.opacityText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.opacityText ) --[[ @ 0]]
			f24_arg0.rotationValue:completeAnimation() --[[ @ 0]]
			f24_arg0.rotationValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.rotationValue ) --[[ @ 0]]
			f24_arg0.rotationText:completeAnimation() --[[ @ 0]]
			f24_arg0.rotationText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.rotationText ) --[[ @ 0]]
			f24_arg0.yScaleValue:completeAnimation() --[[ @ 0]]
			f24_arg0.yScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.yScaleValue ) --[[ @ 0]]
			f24_arg0.yScaleValue2:completeAnimation() --[[ @ 0]]
			f24_arg0.yScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.yScaleValue2 ) --[[ @ 0]]
			f24_arg0.xScaleValue:completeAnimation() --[[ @ 0]]
			f24_arg0.xScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.xScaleValue ) --[[ @ 0]]
			f24_arg0.xScaleValue2:completeAnimation() --[[ @ 0]]
			f24_arg0.xScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.xScaleValue2 ) --[[ @ 0]]
			f24_arg0.ScaleTextY:completeAnimation() --[[ @ 0]]
			f24_arg0.ScaleTextY:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.ScaleTextY ) --[[ @ 0]]
			f24_arg0.ScaleTextX:completeAnimation() --[[ @ 0]]
			f24_arg0.ScaleTextX:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.ScaleTextX ) --[[ @ 0]]
			f24_arg0.scaleText:completeAnimation() --[[ @ 0]]
			f24_arg0.scaleText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.scaleText ) --[[ @ 0]]
			f24_arg0.yPositionValue:completeAnimation() --[[ @ 0]]
			f24_arg0.yPositionValue:setLeftRight( 1, 1, -246, -182 ) --[[ @ 0]]
			f24_arg0.yPositionValue:setTopBottom( 0, 0, 39, 64 ) --[[ @ 0]]
			f24_arg0.yPositionValue:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.yPositionValue ) --[[ @ 0]]
			f24_arg0.yPositionValue2:completeAnimation() --[[ @ 0]]
			f24_arg0.yPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.yPositionValue2 ) --[[ @ 0]]
			f24_arg0.xPositionValue:completeAnimation() --[[ @ 0]]
			f24_arg0.xPositionValue:setLeftRight( 1, 1, -322, -270 ) --[[ @ 0]]
			f24_arg0.xPositionValue:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.xPositionValue ) --[[ @ 0]]
			f24_arg0.xPositionValue2:completeAnimation() --[[ @ 0]]
			f24_arg0.xPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.xPositionValue2 ) --[[ @ 0]]
			f24_arg0.PositionTextY:completeAnimation() --[[ @ 0]]
			f24_arg0.PositionTextY:setLeftRight( 1, 1, -267, -209 ) --[[ @ 0]]
			f24_arg0.PositionTextY:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PositionTextY ) --[[ @ 0]]
			f24_arg0.PositionTextX:completeAnimation() --[[ @ 0]]
			f24_arg0.PositionTextX:setLeftRight( 0, 0, 352, 410 ) --[[ @ 0]]
			f24_arg0.PositionTextX:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PositionTextX ) --[[ @ 0]]
			f24_arg0.positionText:completeAnimation() --[[ @ 0]]
			f24_arg0.positionText:setLeftRight( 0, 0, 351, 491 ) --[[ @ 0]]
			f24_arg0.positionText:setAlpha( 1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.positionText ) --[[ @ 0]]
			f24_arg0.linkedLayersValue:completeAnimation() --[[ @ 0]]
			f24_arg0.linkedLayersValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.linkedLayersValue ) --[[ @ 0]]
			f24_arg0.groupsUsedValue:completeAnimation() --[[ @ 0]]
			f24_arg0.groupsUsedValue:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.groupsUsedValue ) --[[ @ 0]]
			f24_arg0.linkedLayerText:completeAnimation() --[[ @ 0]]
			f24_arg0.linkedLayerText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.linkedLayerText ) --[[ @ 0]]
			f24_arg0.groupsUsedText:completeAnimation() --[[ @ 0]]
			f24_arg0.groupsUsedText:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.groupsUsedText ) --[[ @ 0]]
			f24_arg0.Divider04:completeAnimation() --[[ @ 0]]
			f24_arg0.Divider04:setLeftRight( 0.5, 0.5, -2, 2 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Divider04 ) --[[ @ 0]]
			f24_arg0.Divider02:completeAnimation() --[[ @ 0]]
			f24_arg0.Divider02:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Divider02 ) --[[ @ 0]]
			f24_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f24_arg0.dividerH:setLeftRight( 0, 0, 78, 617 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.dividerH ) --[[ @ 0]]
		end
	},
	EditModeLayerProperties = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 15 ) --[[ @ 0]]
			f25_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f25_arg0.NoiseTiledBacking:setLeftRight( 0, 0, 0, 695 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f25_arg0.NoiseTiledBackingAdd:completeAnimation() --[[ @ 0]]
			f25_arg0.NoiseTiledBackingAdd:setLeftRight( 0, 0, 0, 695 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NoiseTiledBackingAdd ) --[[ @ 0]]
			f25_arg0.linkedLayersValue:completeAnimation() --[[ @ 0]]
			f25_arg0.linkedLayersValue:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.linkedLayersValue ) --[[ @ 0]]
			f25_arg0.groupsUsedValue:completeAnimation() --[[ @ 0]]
			f25_arg0.groupsUsedValue:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.groupsUsedValue ) --[[ @ 0]]
			f25_arg0.linkedLayerText:completeAnimation() --[[ @ 0]]
			f25_arg0.linkedLayerText:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.linkedLayerText ) --[[ @ 0]]
			f25_arg0.groupsUsedText:completeAnimation() --[[ @ 0]]
			f25_arg0.groupsUsedText:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.groupsUsedText ) --[[ @ 0]]
			f25_arg0.layerUsedValue:completeAnimation() --[[ @ 0]]
			f25_arg0.layerUsedValue:setLeftRight( 0, 0, 5, 180 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.layerUsedValue ) --[[ @ 0]]
			f25_arg0.LayerUsed:completeAnimation() --[[ @ 0]]
			f25_arg0.LayerUsed:setLeftRight( 0, 0, 5, 183 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.LayerUsed ) --[[ @ 0]]
			f25_arg0.Divider06:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider06:setAlpha( 0.1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider06 ) --[[ @ 0]]
			f25_arg0.Divider05:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider05:setAlpha( 0.1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider05 ) --[[ @ 0]]
			f25_arg0.Divider04:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider04:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider04 ) --[[ @ 0]]
			f25_arg0.Divider03:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider03:setAlpha( 0.1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider03 ) --[[ @ 0]]
			f25_arg0.Divider02:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider02:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider02 ) --[[ @ 0]]
			f25_arg0.Divider01:completeAnimation() --[[ @ 0]]
			f25_arg0.Divider01:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
			f25_arg0.Divider01:setAlpha( 0.1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Divider01 ) --[[ @ 0]]
			f25_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f25_arg0.dividerH:setLeftRight( 0, 0, 0, 695 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.dividerH ) --[[ @ 0]]
		end
	},
	ArabicFrontEnd = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 25 ) --[[ @ 0]]
			f26_arg0.Backing:completeAnimation() --[[ @ 0]]
			f26_arg0.Backing:setLeftRight( 0, 0, 77.5, 617.5 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.Backing ) --[[ @ 0]]
			f26_arg0.Frame:completeAnimation() --[[ @ 0]]
			f26_arg0.Frame:setLeftRight( 0, 0, 76.5, 618.5 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.Frame ) --[[ @ 0]]
			f26_arg0.opacityValue:completeAnimation() --[[ @ 0]]
			f26_arg0.opacityValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.opacityValue ) --[[ @ 0]]
			f26_arg0.opacityText:completeAnimation() --[[ @ 0]]
			f26_arg0.opacityText:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.opacityText ) --[[ @ 0]]
			f26_arg0.rotationValue:completeAnimation() --[[ @ 0]]
			f26_arg0.rotationValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.rotationValue ) --[[ @ 0]]
			f26_arg0.rotationText:completeAnimation() --[[ @ 0]]
			f26_arg0.rotationText:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.rotationText ) --[[ @ 0]]
			f26_arg0.yScaleValue:completeAnimation() --[[ @ 0]]
			f26_arg0.yScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.yScaleValue ) --[[ @ 0]]
			f26_arg0.yScaleValue2:completeAnimation() --[[ @ 0]]
			f26_arg0.yScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.yScaleValue2 ) --[[ @ 0]]
			f26_arg0.xScaleValue:completeAnimation() --[[ @ 0]]
			f26_arg0.xScaleValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.xScaleValue ) --[[ @ 0]]
			f26_arg0.xScaleValue2:completeAnimation() --[[ @ 0]]
			f26_arg0.xScaleValue2:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.xScaleValue2 ) --[[ @ 0]]
			f26_arg0.ScaleTextY:completeAnimation() --[[ @ 0]]
			f26_arg0.ScaleTextY:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.ScaleTextY ) --[[ @ 0]]
			f26_arg0.ScaleTextX:completeAnimation() --[[ @ 0]]
			f26_arg0.ScaleTextX:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.ScaleTextX ) --[[ @ 0]]
			f26_arg0.scaleText:completeAnimation() --[[ @ 0]]
			f26_arg0.scaleText:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.scaleText ) --[[ @ 0]]
			f26_arg0.yPositionValue:completeAnimation() --[[ @ 0]]
			f26_arg0.yPositionValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.yPositionValue ) --[[ @ 0]]
			f26_arg0.yPositionValue2:completeAnimation() --[[ @ 0]]
			f26_arg0.yPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.yPositionValue2 ) --[[ @ 0]]
			f26_arg0.xPositionValue:completeAnimation() --[[ @ 0]]
			f26_arg0.xPositionValue:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.xPositionValue ) --[[ @ 0]]
			f26_arg0.xPositionValue2:completeAnimation() --[[ @ 0]]
			f26_arg0.xPositionValue2:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.xPositionValue2 ) --[[ @ 0]]
			f26_arg0.PositionTextY:completeAnimation() --[[ @ 0]]
			f26_arg0.PositionTextY:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.PositionTextY ) --[[ @ 0]]
			f26_arg0.PositionTextX:completeAnimation() --[[ @ 0]]
			f26_arg0.PositionTextX:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.PositionTextX ) --[[ @ 0]]
			f26_arg0.positionText:completeAnimation() --[[ @ 0]]
			f26_arg0.positionText:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.positionText ) --[[ @ 0]]
			f26_arg0.linkedLayersValue:completeAnimation() --[[ @ 0]]
			f26_arg0.linkedLayersValue:setLeftRight( 1, 1, -253.5, -78.5 ) --[[ @ 0]]
			f26_arg0.linkedLayersValue:setTopBottom( 0, 0, 35, 60 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.linkedLayersValue ) --[[ @ 0]]
			f26_arg0.groupsUsedValue:completeAnimation() --[[ @ 0]]
			f26_arg0.groupsUsedValue:setLeftRight( 1, 1, -433.5, -258.5 ) --[[ @ 0]]
			f26_arg0.groupsUsedValue:setTopBottom( 0, 0, 27, 62 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.groupsUsedValue ) --[[ @ 0]]
			f26_arg0.Divider05:completeAnimation() --[[ @ 0]]
			f26_arg0.Divider05:setTopBottom( 0, 0, 0, 68 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.Divider05 ) --[[ @ 0]]
			f26_arg0.Divider02:completeAnimation() --[[ @ 0]]
			f26_arg0.Divider02:setTopBottom( 0, 0, 0, 68 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.Divider02 ) --[[ @ 0]]
			f26_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f26_arg0.dividerH:setLeftRight( 0, 0, 78, 617 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.dividerH ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditorLayerProperties.__onClose = function ( f27_arg0 )
	f27_arg0.opacityValue:close() --[[ @ 0]]
	f27_arg0.rotationValue:close() --[[ @ 0]]
	f27_arg0.yScaleValue:close() --[[ @ 0]]
	f27_arg0.yScaleValue2:close() --[[ @ 0]]
	f27_arg0.xScaleValue:close() --[[ @ 0]]
	f27_arg0.xScaleValue2:close() --[[ @ 0]]
	f27_arg0.yPositionValue:close() --[[ @ 0]]
	f27_arg0.yPositionValue2:close() --[[ @ 0]]
	f27_arg0.xPositionValue:close() --[[ @ 0]]
	f27_arg0.xPositionValue2:close() --[[ @ 0]]
	f27_arg0.linkedLayersValue:close() --[[ @ 0]]
	f27_arg0.groupsUsedValue:close() --[[ @ 0]]
	f27_arg0.layerUsedValue:close() --[[ @ 0]]
end
 --[[ @ 0]]
