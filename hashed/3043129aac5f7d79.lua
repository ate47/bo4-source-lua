-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/hud/scoreinfo/scoreinfo_meter" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/scoreinfo/scoreinfo_meterline" ) --[[ @ 0]]

CoD.UserScoreContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.UserScoreContainer.__defaultWidth = 334 --[[ @ 0]]
CoD.UserScoreContainer.__defaultHeight = 67 --[[ @ 0]]
CoD.UserScoreContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.UserScoreContainer ) --[[ @ 0]]
	self.id = "UserScoreContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local UserScore = LUI.UIText.new( 0, 0, 11, 93, 0.5, 0.5, -36, 30 ) --[[ @ 0]]
	UserScore:setRGB( ColorSet.FriendlyBlue.r, ColorSet.FriendlyBlue.g, ColorSet.FriendlyBlue.b ) --[[ @ 0]]
	UserScore:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	UserScore:setLetterSpacing( -1.9 ) --[[ @ 0]]
	UserScore:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	UserScore:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	UserScore:linkToElementModel( self, "playerScore", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			UserScore:setText( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( UserScore ) --[[ @ 0]]
	self.UserScore = UserScore --[[ @ 0]]
	
	local Meter = CoD.ScoreInfo_Meter.new( f1_arg0, f1_arg1, 0, 0, 109, 185, 0.5, 0.5, -19, 15 ) --[[ @ 0]]
	Meter:setRGB( ColorSet.FriendlyBlue.r, ColorSet.FriendlyBlue.g, ColorSet.FriendlyBlue.b ) --[[ @ 0]]
	Meter:setXRot( 180 ) --[[ @ 0]]
	Meter:linkToElementModel( self, nil, false, function ( model )
		Meter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Meter.ImgMeterEnvFillLine.__ScoreMeterUpperWipe = function ( f4_arg0 )
		local f4_local0 = f4_arg0:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			Meter.ImgMeterEnvFillLine:setShaderVector( 0, DivideByScoreLimit( f1_arg1, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	Meter:linkToElementModel( self, "playerScore", true, Meter.ImgMeterEnvFillLine.__ScoreMeterUpperWipe ) --[[ @ 0]]
	Meter.ImgMeterEnvFillLine.__ScoreMeterUpperWipe_FullPath = function ()
		local f5_local0 = self:getModel() --[[ @ 0]]
		if f5_local0 then
			f5_local0 = self:getModel() --[[ @ 0]]
			f5_local0 = f5_local0.playerScore --[[ @ 0]]
		end
		if f5_local0 then
			Meter.ImgMeterEnvFillLine.__ScoreMeterUpperWipe( f5_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	self:addElement( Meter ) --[[ @ 0]]
	self.Meter = Meter --[[ @ 0]]
	
	local MeterLine = CoD.ScoreInfo_MeterLine.new( f1_arg0, f1_arg1, 0.5, 0.5, -55, 21, 0.5, 0.5, -19, 15 ) --[[ @ 0]]
	MeterLine:mergeStateConditions( {
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				local f6_local0 --[[ @ 0]]
				if not HideScoreMeterDueToGameType() then
					f6_local0 = IsAtLeastHalfGameScore( f1_arg1, "gameScore.playerScore" ) --[[ @ 0]]
				else
					f6_local0 = false --[[ @ 0]]
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local4 = MeterLine --[[ @ 0]]
	local f1_local5 = MeterLine.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["gameScore.playerScore"], function ( f7_arg0 )
		f1_arg0:updateElementState( MeterLine, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "gameScore.playerScore"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = MeterLine --[[ @ 0]]
	f1_local5 = MeterLine.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["gameScore.scoreLimit"], function ( f8_arg0 )
		f1_arg0:updateElementState( MeterLine, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "gameScore.scoreLimit"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	MeterLine:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( MeterLine ) --[[ @ 0]]
	self.MeterLine = MeterLine --[[ @ 0]]
	
	f1_local4 = Meter --[[ @ 0]]
	f1_local5 = Meter.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["gameScore.roundsPlayed"], Meter.ImgMeterEnvFillLine.__ScoreMeterUpperWipe_FullPath ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Count3",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueLessThan( f1_arg1, "gameScore.playerScore", 1000 )
			end
		},
		{
			stateName = "Count4",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueLessThan( f1_arg1, "gameScore.playerScore", 10000 )
			end
		},
		{
			stateName = "Count5",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueLessThan( f1_arg1, "gameScore.playerScore", 100000 )
			end
		},
		{
			stateName = "Count6",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueLessThan( f1_arg1, "gameScore.playerScore", 1000000 )
			end
		},
		{
			stateName = "Count7",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["gameScore.playerScore"], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "gameScore.playerScore"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.UserScoreContainer.__resetProperties = function ( f15_arg0 )
	f15_arg0.MeterLine:completeAnimation() --[[ @ 0]]
	f15_arg0.Meter:completeAnimation() --[[ @ 0]]
	f15_arg0.UserScore:completeAnimation() --[[ @ 0]]
	f15_arg0.MeterLine:setLeftRight( 0.5, 0.5, -55, 21 ) --[[ @ 0]]
	f15_arg0.MeterLine:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
	f15_arg0.Meter:setLeftRight( 0, 0, 109, 185 ) --[[ @ 0]]
	f15_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
	f15_arg0.UserScore:setLeftRight( 0, 0, 11, 93 ) --[[ @ 0]]
	f15_arg0.UserScore:setTopBottom( 0.5, 0.5, -36, 30 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.UserScoreContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f16_arg0.Meter:completeAnimation() --[[ @ 0]]
			f16_arg0.Meter:setLeftRight( 0, 0, 102, 178 ) --[[ @ 0]]
			f16_arg0.Meter:setTopBottom( 0.5, 0.5, 593, 627 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Meter ) --[[ @ 0]]
			f16_arg0.MeterLine:completeAnimation() --[[ @ 0]]
			f16_arg0.MeterLine:setLeftRight( 0.5, 0.5, -60, 16 ) --[[ @ 0]]
			f16_arg0.MeterLine:setTopBottom( 0.5, 0.5, 593, 627 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.MeterLine ) --[[ @ 0]]
		end
	},
	Count3 = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f17_arg0.Meter:completeAnimation() --[[ @ 0]]
			f17_arg0.Meter:setLeftRight( 0, 0, 124, 200 ) --[[ @ 0]]
			f17_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Meter ) --[[ @ 0]]
		end
	},
	Count4 = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f18_arg0.UserScore:completeAnimation() --[[ @ 0]]
			f18_arg0.UserScore:setLeftRight( 0, 0, 11, 125 ) --[[ @ 0]]
			f18_arg0.UserScore:setTopBottom( 0.5, 0.5, -36, 30 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.UserScore ) --[[ @ 0]]
			f18_arg0.Meter:completeAnimation() --[[ @ 0]]
			f18_arg0.Meter:setLeftRight( 0, 0, 156, 232 ) --[[ @ 0]]
			f18_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Meter ) --[[ @ 0]]
			f18_arg0.MeterLine:completeAnimation() --[[ @ 0]]
			f18_arg0.MeterLine:setLeftRight( 0.5, 0.5, -25, 51 ) --[[ @ 0]]
			f18_arg0.MeterLine:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.MeterLine ) --[[ @ 0]]
		end
	},
	Count5 = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f19_arg0.UserScore:completeAnimation() --[[ @ 0]]
			f19_arg0.UserScore:setLeftRight( 0, 0, 11, 155 ) --[[ @ 0]]
			f19_arg0.UserScore:setTopBottom( 0.5, 0.5, -36, 30 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.UserScore ) --[[ @ 0]]
			f19_arg0.Meter:completeAnimation() --[[ @ 0]]
			f19_arg0.Meter:setLeftRight( 0, 0, 182, 258 ) --[[ @ 0]]
			f19_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Meter ) --[[ @ 0]]
			f19_arg0.MeterLine:completeAnimation() --[[ @ 0]]
			f19_arg0.MeterLine:setLeftRight( 0.5, 0.5, 5, 81 ) --[[ @ 0]]
			f19_arg0.MeterLine:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.MeterLine ) --[[ @ 0]]
		end
	},
	Count6 = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f20_arg0.UserScore:completeAnimation() --[[ @ 0]]
			f20_arg0.UserScore:setLeftRight( 0, 0, 12, 184 ) --[[ @ 0]]
			f20_arg0.UserScore:setTopBottom( 0.5, 0.5, -36, 30 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.UserScore ) --[[ @ 0]]
			f20_arg0.Meter:completeAnimation() --[[ @ 0]]
			f20_arg0.Meter:setLeftRight( 0, 0, 211, 287 ) --[[ @ 0]]
			f20_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Meter ) --[[ @ 0]]
			f20_arg0.MeterLine:completeAnimation() --[[ @ 0]]
			f20_arg0.MeterLine:setLeftRight( 0.5, 0.5, 35, 111 ) --[[ @ 0]]
			f20_arg0.MeterLine:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.MeterLine ) --[[ @ 0]]
		end
	},
	Count7 = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f21_arg0.UserScore:completeAnimation() --[[ @ 0]]
			f21_arg0.UserScore:setLeftRight( 0, 0, 11, 217 ) --[[ @ 0]]
			f21_arg0.UserScore:setTopBottom( 0.5, 0.5, -36, 30 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.UserScore ) --[[ @ 0]]
			f21_arg0.Meter:completeAnimation() --[[ @ 0]]
			f21_arg0.Meter:setLeftRight( 0, 0, 240, 316 ) --[[ @ 0]]
			f21_arg0.Meter:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Meter ) --[[ @ 0]]
			f21_arg0.MeterLine:completeAnimation() --[[ @ 0]]
			f21_arg0.MeterLine:setLeftRight( 0.5, 0.5, 65, 141 ) --[[ @ 0]]
			f21_arg0.MeterLine:setTopBottom( 0.5, 0.5, -19, 15 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.MeterLine ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.UserScoreContainer.__onClose = function ( f22_arg0 )
	f22_arg0.UserScore:close() --[[ @ 0]]
	f22_arg0.Meter:close() --[[ @ 0]]
	f22_arg0.MeterLine:close() --[[ @ 0]]
end
 --[[ @ 0]]
