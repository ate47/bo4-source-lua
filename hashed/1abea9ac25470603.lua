-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:6cfb14ab0b137a5" ) --[[ @ 0]]
require( "x64:143e711b632bac8d" ) --[[ @ 0]]
require( "x64:69bf4161fe672a21" ) --[[ @ 0]]
require( "x64:b757afc5f54b586" ) --[[ @ 0]]

CoD.WZAAR_Challenge = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WZAAR_Challenge.__defaultWidth = 471 --[[ @ 0]]
CoD.WZAAR_Challenge.__defaultHeight = 162 --[[ @ 0]]
CoD.WZAAR_Challenge.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WZAAR_Challenge ) --[[ @ 0]]
	self.id = "WZAAR_Challenge" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0, 0, 0, 472, 0, 0, 24, 164 ) --[[ @ 0]]
	Box:setImage( RegisterImage( @"uie_ui_hud_wz_hud_aar_box_challenge" ) ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local ProgressCount = LUI.UIText.new( 1, 1, -115, -10, 0, 0, 92, 114 ) --[[ @ 0]]
	ProgressCount:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ProgressCount:setLetterSpacing( 2 ) --[[ @ 0]]
	ProgressCount:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	ProgressCount:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	ProgressCount:linkToElementModel( self, "statFractionText", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ProgressCount:setText( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressCount ) --[[ @ 0]]
	self.ProgressCount = ProgressCount --[[ @ 0]]
	
	local Completed = LUI.UIText.new( 1, 1, -107, -10, 0, 0, 92, 114 ) --[[ @ 0]]
	Completed:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Completed:setAlpha( 0 ) --[[ @ 0]]
	Completed:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7C249C368451D708" ) ) --[[ @ 0]]
	Completed:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Completed:setLetterSpacing( 2 ) --[[ @ 0]]
	Completed:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	Completed:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( Completed ) --[[ @ 0]]
	self.Completed = Completed --[[ @ 0]]
	
	local ProgressBar = CoD.WZAAR_MeritProgressBar.new( f1_arg0, f1_arg1, 0, 0, 10, 461, 0, 0, 71, 91 ) --[[ @ 0]]
	self:addElement( ProgressBar ) --[[ @ 0]]
	self.ProgressBar = ProgressBar --[[ @ 0]]
	
	local Description = LUI.UIText.new( 0, 0, 44, 356, 0, 0, 43, 60 ) --[[ @ 0]]
	Description:setRGB( 0.81, 0.81, 0.81 ) --[[ @ 0]]
	Description:setTTF( "dinnext_regular" ) --[[ @ 0]]
	Description:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Description:setAlignment( Enum[@"LUIAlignment"][@"hash_6ED4298C93DC5ED"] ) --[[ @ 0]]
	Description:linkToElementModel( self, "description", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			Description:setText( f3_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Description ) --[[ @ 0]]
	self.Description = Description --[[ @ 0]]
	
	local XpEarned = LUI.UIText.new( 0, 0, 362, 462, 0, 0, 43, 60 ) --[[ @ 0]]
	XpEarned:setRGB( ColorSet.T8__GOLD.r, ColorSet.T8__GOLD.g, ColorSet.T8__GOLD.b ) --[[ @ 0]]
	XpEarned:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	XpEarned:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	XpEarned:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	XpEarned:linkToElementModel( self, "xp", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			XpEarned:setText( LocalizeIntoString( @"hash_5B30C9471AAF95D", f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( XpEarned ) --[[ @ 0]]
	self.XpEarned = XpEarned --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0, 1, 0, 0, 0, 0, -3, 23 ) --[[ @ 0]]
	Title:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setLetterSpacing( 2 ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	Title:linkToElementModel( self, "title", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Title:setText( LocalizeToUpperString( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local Icon = CoD.WZAARChallengeReward.new( f1_arg0, f1_arg1, 0, 0, 10.5, 355.5, 0, 0, 95, 151 ) --[[ @ 0]]
	Icon:linkToElementModel( self, nil, false, function ( model )
		Icon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Icon ) --[[ @ 0]]
	self.Icon = Icon --[[ @ 0]]
	
	local LockedTier = CoD.WZAARTierLock.new( f1_arg0, f1_arg1, 0, 0, 69, 297, 0, 0, 104.5, 141.5 ) --[[ @ 0]]
	LockedTier:linkToElementModel( self, nil, false, function ( model )
		LockedTier:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( LockedTier ) --[[ @ 0]]
	self.LockedTier = LockedTier --[[ @ 0]]
	
	local ContractOrChallenge = CoD.WZAARChallengeOrContract.new( f1_arg0, f1_arg1, 0, 0, 4, 40, 0, 0, 34, 70 ) --[[ @ 0]]
	ContractOrChallenge:linkToElementModel( self, nil, false, function ( model )
		ContractOrChallenge:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContractOrChallenge ) --[[ @ 0]]
	self.ContractOrChallenge = ContractOrChallenge --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "TierCompleted",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "tierCompleted" )
			end
		},
		{
			stateName = "Completed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "statPercent", 1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "tierCompleted", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "tierCompleted"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "statPercent", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "statPercent"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setModel", function ( element, controller )
		CoD.WZUtility.WZAARConvertChallengeProgressForBar( self, controller, f1_arg1, self.ProgressBar ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local11 = self --[[ @ 0]]
	SetElementProperty( self.ProgressBar, "_progressDelay", 650 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WZAAR_Challenge.__resetProperties = function ( f14_arg0 )
	f14_arg0.ProgressCount:completeAnimation() --[[ @ 0]]
	f14_arg0.Completed:completeAnimation() --[[ @ 0]]
	f14_arg0.XpEarned:completeAnimation() --[[ @ 0]]
	f14_arg0.LockedTier:completeAnimation() --[[ @ 0]]
	f14_arg0.ProgressCount:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.Completed:setAlpha( 0 ) --[[ @ 0]]
	f14_arg0.XpEarned:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.LockedTier:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZAAR_Challenge.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	TierCompleted = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f16_arg0.ProgressCount:completeAnimation() --[[ @ 0]]
			f16_arg0.ProgressCount:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ProgressCount ) --[[ @ 0]]
			f16_arg0.Completed:completeAnimation() --[[ @ 0]]
			f16_arg0.Completed:setAlpha( 1 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Completed ) --[[ @ 0]]
			f16_arg0.XpEarned:completeAnimation() --[[ @ 0]]
			f16_arg0.XpEarned:setAlpha( 1 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.XpEarned ) --[[ @ 0]]
		end
	},
	Completed = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f17_arg0.ProgressCount:completeAnimation() --[[ @ 0]]
			f17_arg0.ProgressCount:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.ProgressCount ) --[[ @ 0]]
			f17_arg0.Completed:completeAnimation() --[[ @ 0]]
			f17_arg0.Completed:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Completed ) --[[ @ 0]]
			f17_arg0.XpEarned:completeAnimation() --[[ @ 0]]
			f17_arg0.XpEarned:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.XpEarned ) --[[ @ 0]]
			f17_arg0.LockedTier:completeAnimation() --[[ @ 0]]
			f17_arg0.LockedTier:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.LockedTier ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WZAAR_Challenge.__onClose = function ( f18_arg0 )
	f18_arg0.ProgressCount:close() --[[ @ 0]]
	f18_arg0.ProgressBar:close() --[[ @ 0]]
	f18_arg0.Description:close() --[[ @ 0]]
	f18_arg0.XpEarned:close() --[[ @ 0]]
	f18_arg0.Title:close() --[[ @ 0]]
	f18_arg0.Icon:close() --[[ @ 0]]
	f18_arg0.LockedTier:close() --[[ @ 0]]
	f18_arg0.ContractOrChallenge:close() --[[ @ 0]]
end
 --[[ @ 0]]
