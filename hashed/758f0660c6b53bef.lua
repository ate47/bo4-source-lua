-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/director/directorpregamebuttonoption" ) --[[ @ 0]]

CoD.ZMLobbyButtonsContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.__defaultWidth = 425 --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.__defaultHeight = 92 --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMLobbyButtonsContainer ) --[[ @ 0]]
	self.id = "ZMLobbyButtonsContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PrivateMatchButton = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0, 0.48, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	PrivateMatchButton:linkToElementModel( self, "PrivateMatchName", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			PrivateMatchButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( CoD.DirectorUtility.GetPrivateMatchName( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PrivateMatchButton:linkToElementModel( self, "PrivateMatchName", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			PrivateMatchButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( CoD.DirectorUtility.GetPrivateMatchName( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	local f1_local2 = PrivateMatchButton --[[ @ 0]]
	local PublicMatchButton = PrivateMatchButton.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PublicMatchButton( f1_local2, f1_local4["lobbyRoot.playlistId"], function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = PrivateMatchButton --[[ @ 0]]
	PublicMatchButton = PrivateMatchButton.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PublicMatchButton( f1_local2, f1_local4["lobbyRoot.lobbyList.playerCount"], function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PrivateMatchButton:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PrivateMatchButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.NavigateToPrivateLobbyForCurrentMode( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.OpenTooManyClientsPopup( self, controller ) --[[ @ 0]]
			return true
		elseif not CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.OpenMapsNotEnabledPopup( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PrivateMatchButton ) --[[ @ 0]]
	self.PrivateMatchButton = PrivateMatchButton --[[ @ 0]]
	
	PublicMatchButton = CoD.DirectorPreGameButtonOption.new( f1_arg0, f1_arg1, 0.52, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	PublicMatchButton.DirectorSelectButtonMiniInternal.MiddleText:setText( LocalizeToUpperString( @"hash_621227B49B2CBED8" ) ) --[[ @ 0]]
	PublicMatchButton.DirectorSelectButtonMiniInternal.MiddleTextFocus:setText( LocalizeToUpperString( @"hash_621227B49B2CBED8" ) ) --[[ @ 0]]
	f1_local4 = PublicMatchButton --[[ @ 0]]
	f1_local2 = PublicMatchButton.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["lobbyRoot.playlistId"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = PublicMatchButton --[[ @ 0]]
	f1_local2 = PublicMatchButton.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["lobbyRoot.lobbyList.playerCount"], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PublicMatchButton:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PublicMatchButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.NavigateToPublicLobbyForCurrentMenuMode( menu, controller ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.OpenTooManyClientsPopup( self, controller ) --[[ @ 0]]
			return true
		elseif not CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.DirectorUtility.OpenMapsNotEnabledPopup( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.DirectorUtility.IsNumClientsExceeded( controller ) and CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.IsNumClientsExceeded( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.DirectorUtility.AllClientsOwnDLCForPlaylist( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PublicMatchButton ) --[[ @ 0]]
	self.PublicMatchButton = PublicMatchButton --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "BothExcluded",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "ZMLobbyExclusions", "PublicMatchExcluded" ) and CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "ZMLobbyExclusions", "PrivateMatchExcluded" )
			end
		},
		{
			stateName = "PublicMatchExcluded",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "ZMLobbyExclusions", "PublicMatchExcluded" )
			end
		},
		{
			stateName = "PrivateMatchExcluded",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "ZMLobbyExclusions", "PrivateMatchExcluded" )
			end
		}
	} ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.ZMLobbyExclusions.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.PublicMatchExcluded, function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "PublicMatchExcluded"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local2 = self.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.ZMLobbyExclusions.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.PrivateMatchExcluded, function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "PrivateMatchExcluded"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f20_arg2, f20_arg3, f20_arg4 )
		if IsSelfInState( self, "PublicMatchExcluded" ) then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.PrivateMatchButton ) --[[ @ 0]]
		elseif IsSelfInState( self, "PrivateMatchExcluded" ) then
			CoD.BaseUtility.SetDefaultFocusToElement( self, self.PublicMatchButton ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PrivateMatchButton.id = "PrivateMatchButton" --[[ @ 0]]
	PublicMatchButton.id = "PublicMatchButton" --[[ @ 0]]
	self.__defaultFocus = PublicMatchButton --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.__resetProperties = function ( f21_arg0 )
	f21_arg0.PrivateMatchButton:completeAnimation() --[[ @ 0]]
	f21_arg0.PublicMatchButton:completeAnimation() --[[ @ 0]]
	f21_arg0.PrivateMatchButton:setLeftRight( 0, 0.48, 0, 0 ) --[[ @ 0]]
	f21_arg0.PrivateMatchButton:setAlpha( 1 ) --[[ @ 0]]
	f21_arg0.PublicMatchButton:setLeftRight( 0.52, 1, 0, 0 ) --[[ @ 0]]
	f21_arg0.PublicMatchButton:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f23_arg0.PrivateMatchButton:completeAnimation() --[[ @ 0]]
			f23_arg0.PrivateMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.PrivateMatchButton ) --[[ @ 0]]
			f23_arg0.PublicMatchButton:completeAnimation() --[[ @ 0]]
			f23_arg0.PublicMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.PublicMatchButton ) --[[ @ 0]]
		end
	},
	BothExcluded = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f24_arg0.PrivateMatchButton:completeAnimation() --[[ @ 0]]
			f24_arg0.PrivateMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PrivateMatchButton ) --[[ @ 0]]
			f24_arg0.PublicMatchButton:completeAnimation() --[[ @ 0]]
			f24_arg0.PublicMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PublicMatchButton ) --[[ @ 0]]
		end
	},
	PublicMatchExcluded = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f25_arg0.PrivateMatchButton:completeAnimation() --[[ @ 0]]
			f25_arg0.PrivateMatchButton:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.PrivateMatchButton ) --[[ @ 0]]
			f25_arg0.PublicMatchButton:completeAnimation() --[[ @ 0]]
			f25_arg0.PublicMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.PublicMatchButton ) --[[ @ 0]]
		end
	},
	PrivateMatchExcluded = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f26_arg0.PrivateMatchButton:completeAnimation() --[[ @ 0]]
			f26_arg0.PrivateMatchButton:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.PrivateMatchButton ) --[[ @ 0]]
			f26_arg0.PublicMatchButton:completeAnimation() --[[ @ 0]]
			f26_arg0.PublicMatchButton:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.PublicMatchButton ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZMLobbyButtonsContainer.__onClose = function ( f27_arg0 )
	f27_arg0.PrivateMatchButton:close() --[[ @ 0]]
	f27_arg0.PublicMatchButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
