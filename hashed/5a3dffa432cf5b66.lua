-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/lobby/common/fe_buttonpanel" ) --[[ @ 0]]

CoD.ContextNotification_SpecialistWeaponHintList = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.__defaultWidth = 300 --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.__defaultHeight = 30 --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ContextNotification_SpecialistWeaponHintList ) --[[ @ 0]]
	self.id = "ContextNotification_SpecialistWeaponHintList" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local NotificationTextCenter = LUI.UIText.new( 0, 0, 0, 300, 0, 0, 0, 30 ) --[[ @ 0]]
	NotificationTextCenter:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	NotificationTextCenter:setLetterSpacing( 1 ) --[[ @ 0]]
	NotificationTextCenter:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	NotificationTextCenter:setBackingType( 1 ) --[[ @ 0]]
	NotificationTextCenter:setBackingWidget( CoD.FE_ButtonPanel, f1_arg0, f1_arg1 ) --[[ @ 0]]
	NotificationTextCenter:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	NotificationTextCenter:setBackingAlpha( 0.62 ) --[[ @ 0]]
	NotificationTextCenter:setBackingXPadding( 12 ) --[[ @ 0]]
	NotificationTextCenter:subscribeToGlobalModel( f1_arg1, "HUDItems", "abilityHintIndex", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			NotificationTextCenter:setText( CoD.HUDUtility.GetSpecialistWeaponHintStringLower( 1, f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotificationTextCenter ) --[[ @ 0]]
	self.NotificationTextCenter = NotificationTextCenter --[[ @ 0]]
	
	local NotificationTextLeft = LUI.UIText.new( 0, 0, -170, 130, 0, 0, 0, 30 ) --[[ @ 0]]
	NotificationTextLeft:setAlpha( 0 ) --[[ @ 0]]
	NotificationTextLeft:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	NotificationTextLeft:setLetterSpacing( 1 ) --[[ @ 0]]
	NotificationTextLeft:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	NotificationTextLeft:setBackingType( 1 ) --[[ @ 0]]
	NotificationTextLeft:setBackingWidget( CoD.FE_ButtonPanel, f1_arg0, f1_arg1 ) --[[ @ 0]]
	NotificationTextLeft:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	NotificationTextLeft:setBackingAlpha( 0.62 ) --[[ @ 0]]
	NotificationTextLeft:setBackingXPadding( 12 ) --[[ @ 0]]
	NotificationTextLeft:subscribeToGlobalModel( f1_arg1, "HUDItems", "abilityHintIndex", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			NotificationTextLeft:setText( CoD.HUDUtility.GetSpecialistWeaponHintStringLower( 1, f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotificationTextLeft ) --[[ @ 0]]
	self.NotificationTextLeft = NotificationTextLeft --[[ @ 0]]
	
	local NotificationTextRight = LUI.UIText.new( 0, 0, 170, 470, 0, 0, 0, 30 ) --[[ @ 0]]
	NotificationTextRight:setAlpha( 0 ) --[[ @ 0]]
	NotificationTextRight:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	NotificationTextRight:setLetterSpacing( 1 ) --[[ @ 0]]
	NotificationTextRight:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	NotificationTextRight:setBackingType( 1 ) --[[ @ 0]]
	NotificationTextRight:setBackingWidget( CoD.FE_ButtonPanel, f1_arg0, f1_arg1 ) --[[ @ 0]]
	NotificationTextRight:setBackingColor( 0, 0, 0 ) --[[ @ 0]]
	NotificationTextRight:setBackingAlpha( 0.62 ) --[[ @ 0]]
	NotificationTextRight:setBackingXPadding( 12 ) --[[ @ 0]]
	NotificationTextRight:subscribeToGlobalModel( f1_arg1, "HUDItems", "abilityHintIndex", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			NotificationTextRight:setText( CoD.HUDUtility.GetSpecialistWeaponHintStringLower( 2, f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NotificationTextRight ) --[[ @ 0]]
	self.NotificationTextRight = NotificationTextRight --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				local f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"] ) --[[ @ 0]]
				if not f5_local0 then
					f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"] ) --[[ @ 0]]
					if not f5_local0 then
						f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_emp_active"] ) --[[ @ 0]]
						if not f5_local0 then
							f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_hardcore"] ) --[[ @ 0]]
							if not f5_local0 then
								if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_hud_visible"] ) then
									f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_guided_missile"] ) --[[ @ 0]]
									if not f5_local0 then
										f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_killcam"] ) --[[ @ 0]]
										if not f5_local0 then
											f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"] ) --[[ @ 0]]
											if not f5_local0 then
												f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"] ) --[[ @ 0]]
												if not f5_local0 then
													f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_in_vehicle"] ) --[[ @ 0]]
													if not f5_local0 then
														f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_flash_banged"] ) --[[ @ 0]]
														if not f5_local0 then
															f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_scoped"] ) --[[ @ 0]]
															if not f5_local0 then
																f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_play_of_the_match"] ) --[[ @ 0]]
																if not f5_local0 then
																	f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_scoreboard_open"] ) --[[ @ 0]]
																	if not f5_local0 then
																		f5_local0 = Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_ui_active"] ) --[[ @ 0]]
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								else
									f5_local0 = true --[[ @ 0]]
								end
							end
						end
					end
				end
				return f5_local0
			end
		},
		{
			stateName = "TwoEntries",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.SpecialistWeaponHintStringLowerNumElements( f1_arg1, 2 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local4 = self --[[ @ 0]]
	local f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]], function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_all_game_hud_hidden"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]], function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_demo_camera_mode_moviecam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]], function ( f9_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_emp_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]], function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_hardcore"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]], function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_hud_visible"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_guided_missile"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_killcam"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_remote_killstreak_static"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"hash_29BF57CE75A8755E"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_in_vehicle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_flash_banged"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_scoped"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_play_of_the_match"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]], function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_scoreboard_open"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]], function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_ui_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local6 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local4, f1_local6.abilityHintIndex, function ( f22_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "abilityHintIndex"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.__resetProperties = function ( f23_arg0 )
	f23_arg0.NotificationTextCenter:completeAnimation() --[[ @ 0]]
	f23_arg0.NotificationTextLeft:completeAnimation() --[[ @ 0]]
	f23_arg0.NotificationTextRight:completeAnimation() --[[ @ 0]]
	f23_arg0.NotificationTextCenter:setAlpha( 1 ) --[[ @ 0]]
	f23_arg0.NotificationTextLeft:setAlpha( 0 ) --[[ @ 0]]
	f23_arg0.NotificationTextRight:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f25_arg0.NotificationTextCenter:completeAnimation() --[[ @ 0]]
			f25_arg0.NotificationTextCenter:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NotificationTextCenter ) --[[ @ 0]]
			f25_arg0.NotificationTextLeft:completeAnimation() --[[ @ 0]]
			f25_arg0.NotificationTextLeft:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NotificationTextLeft ) --[[ @ 0]]
			f25_arg0.NotificationTextRight:completeAnimation() --[[ @ 0]]
			f25_arg0.NotificationTextRight:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.NotificationTextRight ) --[[ @ 0]]
		end
	},
	TwoEntries = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f26_arg0.NotificationTextCenter:completeAnimation() --[[ @ 0]]
			f26_arg0.NotificationTextCenter:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.NotificationTextCenter ) --[[ @ 0]]
			f26_arg0.NotificationTextLeft:completeAnimation() --[[ @ 0]]
			f26_arg0.NotificationTextLeft:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.NotificationTextLeft ) --[[ @ 0]]
			f26_arg0.NotificationTextRight:completeAnimation() --[[ @ 0]]
			f26_arg0.NotificationTextRight:setAlpha( 1 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.NotificationTextRight ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ContextNotification_SpecialistWeaponHintList.__onClose = function ( f27_arg0 )
	f27_arg0.NotificationTextCenter:close() --[[ @ 0]]
	f27_arg0.NotificationTextLeft:close() --[[ @ 0]]
	f27_arg0.NotificationTextRight:close() --[[ @ 0]]
end
 --[[ @ 0]]
