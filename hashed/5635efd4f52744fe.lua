-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/customgames/customgames_optioncategorybutton" ) --[[ @ 0]]
require( "ui/uieditor/widgets/customgames/customgames_settingslider" ) --[[ @ 0]]
require( "ui/uieditor/widgets/gamesettings/gamesettings_selectediteminfo" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

local f0_local0 = function ( f1_arg0 )
	local f1_local0 = {} --[[ @ 0]]
	local f1_local1 = nil --[[ @ 0]]
	local f1_local2 = CoD.OptionsUtility.DraftSettings --[[ @ 0]]
	if f1_local2 and #f1_local2 > 0 then
		for f1_local6, f1_local7 in ipairs( f1_local2 ) --[[ @ 0]] do
			f1_local1 = CoD.OptionsUtility.GetGameSettingsInfo( f1_local7 ) --[[ @ 0]]
			table.insert( f1_local0, CoD.OptionsUtility.CreateListOptions( f1_arg0, f1_local1.name, f1_local1.hintText, f1_local1.setting, f1_local1, "GameTypeOptionsList_" .. f1_local7 ) ) --[[ @ 0]]
		end
	end
	return f1_local0
end
 --[[ @ 0]]
local f0_local1 = function ( f2_arg0 )
	local f2_local0 = CoD.PlayerRoleUtility.GetHeroList( Engine[@"CurrentSessionMode"]() ) --[[ @ 0]]
	local f2_local1 = Engine[@"GetGametypeSettings"]() --[[ @ 0]]
	local f2_local2 = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3, f3_arg4 )
		print( "Setting ALL Max Character Count:  Max: " .. f3_arg3 ) --[[ @ 0]]
		if f2_local0 and #f2_local0 > 0 then
			local f3_local0 = false --[[ @ 0]]
			for f3_local4, f3_local5 in ipairs( f2_local0 ) --[[ @ 0]] do
				if f2_local1[@"maxuniquerolesperteam"][f3_local5.bodyIndex]:get() ~= f3_arg3 then
					f2_local1[@"maxuniquerolesperteam"][f3_local5.bodyIndex]:set( f3_arg3 ) --[[ @ 0]]
					f3_local0 = true --[[ @ 0]]
				end
			end
			f3_local1 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
			f3_local1 = f3_local1:create( "GametypeSettings.UpdateCharacters" ) --[[ @ 0]]
			f3_local1:forceNotifySubscriptions() --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f2_local3 = nil --[[ @ 0]]
	for f2_local7, f2_local8 in ipairs( f2_local0 ) --[[ @ 0]] do
		if not f2_local3 then
			f2_local3 = f2_local1[@"maxuniquerolesperteam"][f2_local8.bodyIndex]:get() --[[ @ 0]]
		end
		if f2_local3 ~= f2_local1[@"maxuniquerolesperteam"][f2_local8.bodyIndex]:get() then
			f2_local3 = nil --[[ @ 0]]
			break
		end
	end
	f2_local4 = 5 --[[ @ 0]]
	f2_local5 = "allCharacterOptions" --[[ @ 0]]
	DataSources[f2_local5] = DataSourceHelpers.ListSetup( f2_local5, function ( f4_arg0 )
		local f4_local0 = {} --[[ @ 0]]
		local f4_local1 = table.insert --[[ @ 0]]
		local f4_local2 = f4_local0 --[[ @ 0]]
		local f4_local3 = {
			models = {
				text = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_50EEBDA1A33FABDC" )
			}
		} --[[ @ 0]]
		local f4_local4 = {} --[[ @ 0]]
		local f4_local5 --[[ @ 0]]
		if f2_local3 ~= nil and f2_local4 >= f2_local3 and f2_local3 > 0 then
			f4_local5 = false --[[ @ 0]]
		else
			f4_local5 = true --[[ @ 0]]
		end
		f4_local4.selectIndex = f4_local5 --[[ @ 0]]
		f4_local4.loopEdges = true --[[ @ 0]]
		f4_local3.properties = f4_local4 --[[ @ 0]]
		f4_local1( f4_local2, f4_local3 ) --[[ @ 0]]
		for f4_local1 = 1 --[[ @ 0]], f2_local4, 1 do
			table.insert( f4_local0, {
				models = {
					text = f4_local1
				},
				properties = {
					selectIndex = f2_local3 == f4_local1,
					loopEdges = true,
					action = f2_local2,
					actionParam = f4_local1
				}
			} ) --[[ @ 0]]
		end
		f4_local0[1].properties.first = true --[[ @ 0]]
		f4_local0[#f4_local0].properties.last = true --[[ @ 0]]
		return f4_local0
	end, nil, nil, nil ) --[[ @ 0]]
	f2_local6 = {} --[[ @ 0]]
	table.insert( f2_local6, {
		models = {
			name = @"hash_13F979FF83304183",
			desc = @"hash_61403A7CB59B0FED",
			image = "blacktransparent",
			optionsDatasource = f2_local5
		},
		properties = {}
	} ) --[[ @ 0]]
	return f2_local6
end
 --[[ @ 0]]
local f0_local2 = function ( f5_arg0, f5_arg1, f5_arg2 )
	local f5_local0 = 5 --[[ @ 0]]
	local f5_local1 = f5_arg1:get() --[[ @ 0]]
	local f5_local2 = f5_arg0:get() --[[ @ 0]]
	local f5_local3 = function ( f6_arg0, f6_arg1, f6_arg2, f6_arg3, f6_arg4 )
		if f5_arg1:get() ~= f6_arg3 then
			f5_arg1:set( f6_arg3 ) --[[ @ 0]]
			print( "Setting Max Character Count: Character:" .. f5_arg2 .. " Max: " .. f6_arg3 ) --[[ @ 0]]
			local f6_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
			f6_local0 = f6_local0:create( "GametypeSettings.CharacterUpdated" ) --[[ @ 0]]
			f6_local0:forceNotifySubscriptions() --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	local f5_local4 = "gts_maxUniqueRolesPerTeam" .. f5_arg2 --[[ @ 0]]
	DataSources[f5_local4] = DataSourceHelpers.ListSetup( f5_local4, function ()
		local f7_local0 = {} --[[ @ 0]]
		for f7_local1 = 0 --[[ @ 0]], f5_local0, 1 do
			table.insert( f7_local0, {
				models = {
					text = f7_local1
				},
				properties = {
					title = @"hash_0",
					desc = @"hash_0",
					image = "",
					value = f7_local1,
					isDefault = f5_local2 == f7_local1,
					selectIndex = f7_local1 == f5_local1,
					loopEdges = true,
					action = f5_local3,
					actionParam = f7_local1
				}
			} ) --[[ @ 0]]
		end
		f7_local0[1].properties.first = true --[[ @ 0]]
		f7_local0[f5_local0 + 1].properties.last = true --[[ @ 0]]
		return f7_local0
	end, nil, nil, nil ) --[[ @ 0]]
	return f5_local4
end
 --[[ @ 0]]
local f0_local3 = function ( f8_arg0 )
	local f8_local0 = {} --[[ @ 0]]
	local f8_local1 = nil --[[ @ 0]]
	local f8_local2 = Engine[@"GetGametypeSettings"]() --[[ @ 0]]
	local f8_local3 = Engine[@"GetGametypeSettings"]() --[[ @ 0]]
	local f8_local4 = CoD.PlayerRoleUtility.GetHeroList( Engine[@"CurrentSessionMode"]() ) --[[ @ 0]]
	if f8_local4 and #f8_local4 > 0 then
		for f8_local8, f8_local9 in ipairs( f8_local4 ) --[[ @ 0]] do
			local f8_local10 = f8_local9.bodyIndex --[[ @ 0]]
			local f8_local11 = f8_local3[@"maxuniquerolesperteam"][f8_local10] --[[ @ 0]]
			local f8_local12 = f8_local2[@"maxuniquerolesperteam"][f8_local10] --[[ @ 0]]
			table.insert( f8_local0, {
				models = {
					name = Engine[@"hash_4F9F1239CFD921FE"]( f8_local9.displayName ),
					desc = @"hash_43F61F4CF743D1BF",
					image = "blacktransparent",
					optionsDatasource = f0_local2( f8_local11, f8_local12, f8_local10 )
				},
				properties = {
					revert = function ( f9_arg0 )
						f8_local12:set( f8_local11:get() ) --[[ @ 0]]
					end
				}
			} ) --[[ @ 0]]
		end
	end
	return f8_local0
end
 --[[ @ 0]]
local f0_local4 = function ( f10_arg0, f10_arg1, f10_arg2 )
	local f10_local0 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f10_local0 = f10_local0:create( "GametypeSettings.CharacterUpdated" ) --[[ @ 0]]
	if f10_arg1.updateSubscription then
		f10_arg1:removeSubscription( f10_arg1.updateSubscription ) --[[ @ 0]]
	end
	f10_arg1.updateSubscription = f10_arg1:subscribeToModel( f10_local0, function ()
		f10_arg1:updateDataSource( true ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
local f0_local5 = function ( f12_arg0, f12_arg1, f12_arg2 )
	local f12_local0 = Engine[@"CreateModel"]( Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "GametypeSettings" ), "UpdateCharacters" ) --[[ @ 0]]
	if f12_arg1.updateSubscription then
		f12_arg1:removeSubscription( f12_arg1.updateSubscription ) --[[ @ 0]]
	end
	f12_arg1.updateSubscription = f12_arg1:subscribeToModel( f12_local0, function ()
		f12_arg1:updateDataSource( true ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSources.DraftSettings = DataSourceHelpers.ListSetup( "DraftSettings", f0_local0, nil, nil, nil ) --[[ @ 0]]
DataSources.AllCharacterSettings = DataSourceHelpers.ListSetup( "AllCharacterSettings", f0_local1, nil, nil, f0_local4 ) --[[ @ 0]]
DataSources.CharacterSettings = DataSourceHelpers.ListSetup( "CharacterSettings", f0_local3, nil, nil, f0_local5 ) --[[ @ 0]]
CoD.GameSettings_Characters = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.GameSettings_Characters.__defaultWidth = 1920 --[[ @ 0]]
CoD.GameSettings_Characters.__defaultHeight = 877 --[[ @ 0]]
CoD.GameSettings_Characters.new = function ( f14_arg0, f14_arg1, f14_arg2, f14_arg3, f14_arg4, f14_arg5, f14_arg6, f14_arg7, f14_arg8, f14_arg9 )
	local self = LUI.UIElement.new( f14_arg2, f14_arg3, f14_arg4, f14_arg5, f14_arg6, f14_arg7, f14_arg8, f14_arg9 ) --[[ @ 0]]
	self:setClass( CoD.GameSettings_Characters ) --[[ @ 0]]
	self.id = "GameSettings_Characters" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f14_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local GameSettingsSelectedItemInfo = CoD.GameSettings_SelectedItemInfo.new( f14_arg0, f14_arg1, 0, 1, 0, 0, -0.5, 0.5, 234, 436 ) --[[ @ 0]]
	GameSettingsSelectedItemInfo.GameModeName:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( GameSettingsSelectedItemInfo ) --[[ @ 0]]
	self.GameSettingsSelectedItemInfo = GameSettingsSelectedItemInfo --[[ @ 0]]
	
	local f14_local2 = nil --[[ @ 0]]
	
	local OptionCategoryGrid = LUI.GridLayout.new( f14_arg0, f14_arg1, false, 0, 0, 8, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	OptionCategoryGrid:setLeftRight( 0, 0, 100, 350 ) --[[ @ 0]]
	OptionCategoryGrid:setTopBottom( 0, 0, 10, 592 ) --[[ @ 0]]
	OptionCategoryGrid:setWidgetType( CoD.CustomGames_OptionCategoryButton ) --[[ @ 0]]
	OptionCategoryGrid:setVerticalCount( 5 ) --[[ @ 0]]
	OptionCategoryGrid:setSpacing( 8 ) --[[ @ 0]]
	OptionCategoryGrid:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	OptionCategoryGrid:setDataSource( "SpecialistOptionCategories" ) --[[ @ 0]]
	OptionCategoryGrid:registerEventHandler( "gain_focus", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f15_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f15_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f14_arg0, f14_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f15_local0
	end ) --[[ @ 0]]
	f14_arg0:AddButtonCallbackFunction( OptionCategoryGrid, f14_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		ShowWidget( self.SlidersPC ) --[[ @ 0]]
		SetCurrentElementAsActive( self, element, controller ) --[[ @ 0]]
		SetFocusToElement( self, "SlidersPC", controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( OptionCategoryGrid ) --[[ @ 0]]
	self.OptionCategoryGrid = OptionCategoryGrid --[[ @ 0]]
	
	local f14_local4 = nil --[[ @ 0]]
	
	local SlidersPC = LUI.UIList.new( f14_arg0, f14_arg1, 8, 0, nil, false, false, false, false ) --[[ @ 0]]
	SlidersPC:setLeftRight( 0, 0, 367, 1067 ) --[[ @ 0]]
	SlidersPC:setTopBottom( 0, 0, 10, 818 ) --[[ @ 0]]
	SlidersPC:setWidgetType( CoD.CustomGames_SettingSlider ) --[[ @ 0]]
	SlidersPC:setVerticalCount( 12 ) --[[ @ 0]]
	SlidersPC:setSpacing( 8 ) --[[ @ 0]]
	SlidersPC:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	SlidersPC:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	SlidersPC:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		ProcessListAction( self, element, f14_arg1, f14_arg0 ) --[[ @ 0]]
		GameSettingsButtonGainFocus( self, element, f14_arg1 ) --[[ @ 0]]
		SetCurrentElementAsActive( self, element, f14_arg1 ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	SlidersPC:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		SetElementCanBeNavigatedTo( self.OptionCategoryGrid, false ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f14_arg0, f14_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f14_arg0, f14_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	SlidersPC:registerEventHandler( "lose_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		if element.loseFocus then
			f20_local0 = element:loseFocus( event ) --[[ @ 0]]
		elseif element.super.loseFocus then
			f20_local0 = element.super:loseFocus( event ) --[[ @ 0]]
		end
		SetElementCanBeNavigatedTo( self.OptionCategoryGrid, true ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	f14_arg0:AddButtonCallbackFunction( SlidersPC, f14_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"], "ui_contextual_1", function ( element, menu, controller, model )
		if AlwaysFalse() then
			OpenGameSettingsOptionsMenu( self, element, controller, menu ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if AlwaysFalse() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_78E7772DFD9BBDEB", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f14_arg0:AddButtonCallbackFunction( SlidersPC, f14_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		SetFocusToElement( self, "OptionCategoryGrid", controller ) --[[ @ 0]]
		CoD.OptionsUtility.SetFocusToGrid( self.OptionCategoryGrid ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_0", nil, nil ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( SlidersPC ) --[[ @ 0]]
	self.SlidersPC = SlidersPC --[[ @ 0]]
	
	local f14_local6 = nil --[[ @ 0]]
	f14_local6 = LUI.UIElement.createFake() --[[ @ 0]]
	self.OptionCategoryList = f14_local6 --[[ @ 0]]
	local f14_local7 = nil --[[ @ 0]]
	f14_local7 = LUI.UIElement.createFake() --[[ @ 0]]
	self.Sliders = f14_local7 --[[ @ 0]]
	SlidersPC:linkToElementModel( OptionCategoryGrid, "optionsListDatasource", true, function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			SlidersPC:setDataSource( f25_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	f14_local7:linkToElementModel( f14_local6, "optionsListDatasource", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			f14_local7:setDataSource( f26_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "EditSettings",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueTrue( f14_arg1, "customGamesEdit" ) and not IsPC()
			end
		},
		{
			stateName = "DefaultStatePC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	local f14_local8 = self --[[ @ 0]]
	local f14_local9 = self.subscribeToModel --[[ @ 0]]
	local f14_local10 = Engine[@"GetModelForController"]( f14_arg1 ) --[[ @ 0]]
	f14_local9( f14_local8, f14_local10.customGamesEdit, function ( f29_arg0 )
		f14_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f14_arg0,
			controller = f14_arg1,
			modelValue = f29_arg0:get(),
			modelName = "customGamesEdit"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		SetControllerModelValue( f14_arg1, "customGamesEdit", false ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OptionCategoryGrid.id = "OptionCategoryGrid" --[[ @ 0]]
	SlidersPC.id = "SlidersPC" --[[ @ 0]]
	f14_local6.id = "OptionCategoryList" --[[ @ 0]]
	f14_local7.id = "Sliders" --[[ @ 0]]
	self.__defaultFocus = f14_local6 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f14_arg1, f14_arg0 ) --[[ @ 0]]
	end
	f14_local9 = self --[[ @ 0]]
	if IsPC() then
		ChangeDefaultFocus( self, self.OptionCategoryGrid ) --[[ @ 0]]
		ForceCheckDefaultPCFocus( self.OptionCategoryGrid, f14_arg0, f14_arg1 ) --[[ @ 0]]
	end
	f14_local9 = SlidersPC --[[ @ 0]]
	if IsPC() then
		SetElementCanBeNavigatedTo( f14_local9, false ) --[[ @ 0]]
		SetElementProperty( f14_local9, "ignoreSavedActive", true ) --[[ @ 0]]
	end
	SetElementCanBeNavigatedTo( f14_local6, false ) --[[ @ 0]]
	SetElementCanBeNavigatedTo( f14_local7, false ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.GameSettings_Characters.__resetProperties = function ( f31_arg0 )
	f31_arg0.Sliders:completeAnimation() --[[ @ 0]]
	f31_arg0.GameSettingsSelectedItemInfo:completeAnimation() --[[ @ 0]]
	f31_arg0.OptionCategoryList:completeAnimation() --[[ @ 0]]
	f31_arg0.Sliders:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.GameSettingsSelectedItemInfo.ToolTip:setAlpha( 1 ) --[[ @ 0]]
	f31_arg0.OptionCategoryList:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.GameSettings_Characters.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f32_arg0.GameSettingsSelectedItemInfo:completeAnimation() --[[ @ 0]]
			f32_arg0.GameSettingsSelectedItemInfo.ToolTip:completeAnimation() --[[ @ 0]]
			f32_arg0.GameSettingsSelectedItemInfo.ToolTip:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.GameSettingsSelectedItemInfo ) --[[ @ 0]]
			f32_arg0.Sliders:completeAnimation() --[[ @ 0]]
			f32_arg0.Sliders:setAlpha( 0.1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Sliders ) --[[ @ 0]]
		end
	},
	EditSettings = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
			f33_arg0.OptionCategoryList:completeAnimation() --[[ @ 0]]
			f33_arg0.OptionCategoryList:setAlpha( 0.1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.OptionCategoryList ) --[[ @ 0]]
		end
	},
	DefaultStatePC = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f34_arg0.GameSettingsSelectedItemInfo:completeAnimation() --[[ @ 0]]
			f34_arg0.GameSettingsSelectedItemInfo.ToolTip:completeAnimation() --[[ @ 0]]
			f34_arg0.GameSettingsSelectedItemInfo.ToolTip:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.GameSettingsSelectedItemInfo ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.GameSettings_Characters.__onClose = function ( f35_arg0 )
	f35_arg0.SlidersPC:close() --[[ @ 0]]
	f35_arg0.Sliders:close() --[[ @ 0]]
	f35_arg0.GameSettingsSelectedItemInfo:close() --[[ @ 0]]
	f35_arg0.OptionCategoryGrid:close() --[[ @ 0]]
	f35_arg0.OptionCategoryList:close() --[[ @ 0]]
end
 --[[ @ 0]]
