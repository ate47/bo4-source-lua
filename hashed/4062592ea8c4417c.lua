-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:4a7a13e373e49761" ) --[[ @ 0]]

CoD.RadiationBlastHealthBar = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.RadiationBlastHealthBar.__defaultWidth = 142 --[[ @ 0]]
CoD.RadiationBlastHealthBar.__defaultHeight = 11 --[[ @ 0]]
CoD.RadiationBlastHealthBar.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.RadiationBlastHealthBar ) --[[ @ 0]]
	self.id = "RadiationBlastHealthBar" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HealthBar = CoD.HealthBarWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -71, 81, 0.5, 0.5, -5.5, 5.5 ) --[[ @ 0]]
	HealthBar:linkToElementModel( self, "health", false, function ( model )
		HealthBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( HealthBar ) --[[ @ 0]]
	self.HealthBar = HealthBar --[[ @ 0]]
	
	local HealthValue = LUI.UIText.new( 0, 0, 140, 204, 0, 0, -7.5, 18.5 ) --[[ @ 0]]
	HealthValue:setTTF( "0arame_mono_stencil" ) --[[ @ 0]]
	HealthValue:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	HealthValue:setLetterSpacing( 2 ) --[[ @ 0]]
	HealthValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	HealthValue:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
	HealthValue:linkToElementModel( self, "health.healthValue", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			HealthValue:setText( CoD.BaseUtility.AlreadyLocalized( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HealthValue ) --[[ @ 0]]
	self.HealthValue = HealthValue --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Boom",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "progress", 1 )
			end
		},
		{
			stateName = "High",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "progress", 0.7 )
			end
		},
		{
			stateName = "Medium",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "progress", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "progress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local3 = self --[[ @ 0]]
	CoD.HUDUtility.UpdateClientHealth( self, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.RadiationBlastHealthBar.__onClose = function ( f8_arg0 )
	f8_arg0.HealthBar:close() --[[ @ 0]]
	f8_arg0.HealthValue:close() --[[ @ 0]]
end
 --[[ @ 0]]
