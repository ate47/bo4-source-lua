-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/cac/itemnamedescunlocktext" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]
require( "x64:71b3bebae5e3f953" ) --[[ @ 0]]
require( "x64:3e692aea0c6bf292" ) --[[ @ 0]]

CoD.ZMTalismanSelect = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ZMTalismanSelect = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ZMTalismanSelect", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg0, "TalismanSelect.Update", true ) --[[ @ 0]]
	self:setClass( CoD.ZMTalismanSelect ) --[[ @ 0]]
	self.soundSet = "ZCAC" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local selectionList = LUI.UIList.new( f1_local1, f1_arg0, 16, 0, nil, true, false, false, false ) --[[ @ 0]]
	selectionList:setLeftRight( 0.5, 0.5, -387, 387 ) --[[ @ 0]]
	selectionList:setTopBottom( 0, 0, 203, 957 ) --[[ @ 0]]
	selectionList:setWidgetType( CoD.ZMTalismanListItem ) --[[ @ 0]]
	selectionList:setHorizontalCount( 5 ) --[[ @ 0]]
	selectionList:setVerticalCount( 5 ) --[[ @ 0]]
	selectionList:setSpacing( 16 ) --[[ @ 0]]
	selectionList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	selectionList:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	selectionList:setDataSource( "Unlockables" ) --[[ @ 0]]
	selectionList:linkToElementModel( selectionList, "itemIndex", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local RestrictedText = selectionList --[[ @ 0]]
	local ItemInfo = selectionList.subscribeToModel --[[ @ 0]]
	local FooterContainerFrontendRight = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ItemInfo( RestrictedText, FooterContainerFrontendRight["TalismanSelect.Update"], function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	selectionList:appendEventHandler( "input_source_changed", function ( f4_arg0, f4_arg1 )
		f4_arg1.menu = f4_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RestrictedText = selectionList --[[ @ 0]]
	ItemInfo = selectionList.subscribeToModel --[[ @ 0]]
	FooterContainerFrontendRight = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	ItemInfo( RestrictedText, FooterContainerFrontendRight.LastInput, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	selectionList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		CoD.ZMTalismanUtility.UpdateTalismanModel( self, element, f1_arg0 ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	selectionList:registerEventHandler( "gain_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f7_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f7_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		return f7_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if CoD.CACUtility.DoesCACItemHaveConsumablesRemaining( menu, element, controller, Enum[@"hash_6EB546760F890D2"][@"hash_15544C104CD15F10"] ) and not CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) then
			CoD.CACUtility.EquipWeapon( self, element, menu, controller, false ) --[[ @ 0]]
			CoD.ZMTalismanUtility.UpdateEquippedSlot( controller ) --[[ @ 0]]
			UpdateButtonPromptState( menu, element, controller, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
			return true
		elseif CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) and IsPC() then
			CoD.ZMTalismanUtility.UnequipTalisman( menu, element, controller ) --[[ @ 0]]
			CoD.ZMTalismanUtility.UpdateEquippedSlot( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.CACUtility.DoesCACItemHaveConsumablesRemaining( menu, element, controller, Enum[@"hash_6EB546760F890D2"][@"hash_15544C104CD15F10"] ) and not CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_1679ACA6FFC6C8F3", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) then
			CoD.ZMTalismanUtility.UnequipTalisman( menu, element, controller ) --[[ @ 0]]
			CoD.ZMTalismanUtility.UpdateEquippedSlot( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_1679ACA6FFC6C8F3", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( selectionList, f1_arg0, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "ui_remove", function ( element, menu, controller, model )
		if CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.ZMTalismanUtility.UnequipTalisman( menu, element, controller ) --[[ @ 0]]
			CoD.ZMTalismanUtility.UpdateEquippedSlot( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ZMTalismanUtility.IsTalismanEqipped( menu, element, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_1679ACA6FFC6C8F3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	selectionList:AddContextualMenuAction( f1_local1, f1_arg0, @"hash_1679ACA6FFC6C8F3", function ( f14_arg0, f14_arg1, f14_arg2, f14_arg3 )
		if CoD.ZMTalismanUtility.IsTalismanEqipped( f14_arg1, f14_arg0, f14_arg2 ) then
			return function ( f15_arg0, f15_arg1, f15_arg2, f15_arg3 )
				CoD.ZMTalismanUtility.UnequipTalisman( f15_arg1, f15_arg0, f15_arg2 ) --[[ @ 0]]
				CoD.ZMTalismanUtility.UpdateEquippedSlot( f15_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( selectionList ) --[[ @ 0]]
	self.selectionList = selectionList --[[ @ 0]]
	
	ItemInfo = CoD.ItemNameDescUnlockText.new( f1_local1, f1_arg0, 0.5, 0.5, 411, 911, 0, 0, 616, 723 ) --[[ @ 0]]
	ItemInfo:mergeStateConditions( {
		{
			stateName = "ZombieCompact",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( ItemInfo ) --[[ @ 0]]
	self.ItemInfo = ItemInfo --[[ @ 0]]
	
	RestrictedText = CoD.RestrictedItemWarningText.new( f1_local1, f1_arg0, 0.5, 0.5, -247, 247, 0.5, 0.5, 424, 454 ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f17_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f17_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f17_local0 then
			f17_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f17_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local TopBar = LUI.UIImage.new( -0.1, 1.1, 0, 0, 0, 0, 823, 826 ) --[[ @ 0]]
	TopBar:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	TopBar:setAlpha( 0.5 ) --[[ @ 0]]
	TopBar:setZoom( 2 ) --[[ @ 0]]
	TopBar:setImage( RegisterImage( @"uie_ui_menu_cac_primary_button_top_bar" ) ) --[[ @ 0]]
	TopBar:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TopBar ) --[[ @ 0]]
	self.TopBar = TopBar --[[ @ 0]]
	
	local hint = LUI.UIText.new( 0.5, 0.5, -960, 960, 0, 0, 852, 870 ) --[[ @ 0]]
	hint:setRGB( 0.58, 0.58, 0.58 ) --[[ @ 0]]
	hint:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5E1C57D633148C5B" ) ) --[[ @ 0]]
	hint:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	hint:setLetterSpacing( 2 ) --[[ @ 0]]
	hint:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	hint:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( hint ) --[[ @ 0]]
	self.hint = hint --[[ @ 0]]
	
	local TopBar2 = LUI.UIImage.new( -0.1, 1.1, 0, 0, 0, 0, 896, 899 ) --[[ @ 0]]
	TopBar2:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	TopBar2:setAlpha( 0.5 ) --[[ @ 0]]
	TopBar2:setZoom( 2 ) --[[ @ 0]]
	TopBar2:setImage( RegisterImage( @"uie_ui_menu_cac_primary_button_top_bar" ) ) --[[ @ 0]]
	TopBar2:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( TopBar2 ) --[[ @ 0]]
	self.TopBar2 = TopBar2 --[[ @ 0]]
	
	local ZMTalismanSafeAreaContainer = CoD.ZMTalismanSafeAreaContainer.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	ZMTalismanSafeAreaContainer.CategoryTabs.Tabs.grid:setDataSource( "TalismanCategories" ) --[[ @ 0]]
	ZMTalismanSafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f18_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f18_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		if not f18_local0 then
			f18_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	ZMTalismanSafeAreaContainer:registerEventHandler( "list_active_changed", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		SetProperty( self, "__rarity", element.rarity ) --[[ @ 0]]
		UpdateDataSource( self, self.selectionList, f1_arg0 ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	self:addElement( ZMTalismanSafeAreaContainer ) --[[ @ 0]]
	self.ZMTalismanSafeAreaContainer = ZMTalismanSafeAreaContainer --[[ @ 0]]
	
	ItemInfo:linkToElementModel( selectionList, nil, false, function ( model )
		ItemInfo:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RestrictedText:linkToElementModel( selectionList, nil, false, function ( model )
		RestrictedText:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f22_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f22_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f22_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		ShowHeaderIconOnly( f1_local1 ) --[[ @ 0]]
		SetElementStateByElementName( self, "GenericMenuFrame0", f1_arg0, "Update" ) --[[ @ 0]]
		PlayClipOnElement( self, {
			elementName = "GenericMenuFrame0",
			clipName = "intro"
		}, f1_arg0 ) --[[ @ 0]]
		PlayClip( self, "into", f1_arg0 ) --[[ @ 0]]
		if not f22_local0 then
			f22_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f22_local0
	end ) --[[ @ 0]]
	self:registerEventHandler( "list_active_changed", function ( self, event )
		local f23_local0 = nil --[[ @ 0]]
		CoD.ZMTalismanUtility.UpdateTalismanModel( self, self.selectionList, f1_arg0 ) --[[ @ 0]]
		return f23_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		GoBack( self, controller ) --[[ @ 0]]
		PlaySoundSetSound( self, "menu_no_selection" ) --[[ @ 0]]
		SendClientScriptMenuChangeNotify( controller, menu, false ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, true ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f26_arg0, f26_arg1, f26_arg2, f26_arg3 )
		local f26_local0 = self --[[ @ 0]]
		SendClientScriptMenuChangeNotify( f26_arg1, f26_arg2, true ) --[[ @ 0]]
		SetPerControllerTableProperty( f26_arg1, "weaponCategory", "talisman1" ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.CACUtility.ClearClassWeaponModel( f1_local1, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	selectionList.id = "selectionList" --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	ZMTalismanSafeAreaContainer.id = "ZMTalismanSafeAreaContainer" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = selectionList --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local10 = self --[[ @ 0]]
	CoD.BaseUtility.SetMenuSessionMode( f1_local1, Enum[@"eModes"][@"hash_73723205FAE52C4A"] ) --[[ @ 0]]
	f1_local10 = selectionList --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local10, f1_arg0, "displayName", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ZMTalismanSelect.__onClose = function ( f29_arg0 )
	f29_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f29_arg0.ItemInfo:close() --[[ @ 0]]
	f29_arg0.RestrictedText:close() --[[ @ 0]]
	f29_arg0.selectionList:close() --[[ @ 0]]
	f29_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f29_arg0.ZMTalismanSafeAreaContainer:close() --[[ @ 0]]
end
 --[[ @ 0]]
