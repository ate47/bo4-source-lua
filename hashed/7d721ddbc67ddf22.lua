-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/hud/ingametalkerswidget" ) --[[ @ 0]]
require( "x64:350ce70a16679544" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/mp_voipwidget/voip_container" ) --[[ @ 0]]
require( "x64:174345ba46470062" ) --[[ @ 0]]
require( "x64:579177e5d8aa2dec" ) --[[ @ 0]]
require( "x64:47d0c77afa59c3a" ) --[[ @ 0]]
require( "x64:23824c4d8575c0b5" ) --[[ @ 0]]

CoD.Hud_WZ_SafeAreaContainer_Front = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.__defaultWidth = 1920 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.__defaultHeight = 1080 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Hud_WZ_SafeAreaContainer_Front ) --[[ @ 0]]
	self.id = "Hud_WZ_SafeAreaContainer_Front" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Obituary = CoD.WarzoneKills.new( f1_arg0, f1_arg1, 1, 1, -461, 87, 0, 0, 32.5, 221.5 ) --[[ @ 0]]
	self:addElement( Obituary ) --[[ @ 0]]
	self.Obituary = Obituary --[[ @ 0]]
	
	local CompassGroupContainer = CoD.CompassGroupMPContainer.new( f1_arg0, f1_arg1, 0, 0, -31, 319, 0, 0, 1, 351 ) --[[ @ 0]]
	self:addElement( CompassGroupContainer ) --[[ @ 0]]
	self.CompassGroupContainer = CompassGroupContainer --[[ @ 0]]
	
	local WZHudMenus = CoD.WZHudMenus.new( f1_arg0, f1_arg1, 0.5, 0.5, -455, 455, 1, 1, -350, -19 ) --[[ @ 0]]
	self:addElement( WZHudMenus ) --[[ @ 0]]
	self.WZHudMenus = WZHudMenus --[[ @ 0]]
	
	local InGameTalkersWidget = CoD.InGameTalkersWidget.new( f1_arg0, f1_arg1, 0, 0, 350, 635, 0, 0, 34, 164 ) --[[ @ 0]]
	InGameTalkersWidget:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] )
			end
		}
	} ) --[[ @ 0]]
	local VoipContainerEnemiesOnly = InGameTalkersWidget --[[ @ 0]]
	local VoipContainerAll = InGameTalkersWidget.subscribeToModel --[[ @ 0]]
	local WarzoneGameStatusIndicatorDisplay = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	VoipContainerAll( VoipContainerEnemiesOnly, WarzoneGameStatusIndicatorDisplay["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f3_arg0 )
		f1_arg0:updateElementState( InGameTalkersWidget, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( InGameTalkersWidget ) --[[ @ 0]]
	self.InGameTalkersWidget = InGameTalkersWidget --[[ @ 0]]
	
	VoipContainerAll = CoD.Voip_Container.new( f1_arg0, f1_arg1, 0, 0, 350, 759, 0, 0, 34, 142 ) --[[ @ 0]]
	VoipContainerAll:mergeStateConditions( {
		{
			stateName = "HudStart",
			condition = function ( menu, element, event )
				return IsGametypeSettingsValue( "wzHardcore", 1 ) and not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_spectating_client"] )
			end
		}
	} ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay = VoipContainerAll --[[ @ 0]]
	VoipContainerEnemiesOnly = VoipContainerAll.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	VoipContainerEnemiesOnly( WarzoneGameStatusIndicatorDisplay, f1_local8["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]], function ( f5_arg0 )
		f1_arg0:updateElementState( VoipContainerAll, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_spectating_client"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay = VoipContainerAll --[[ @ 0]]
	VoipContainerEnemiesOnly = VoipContainerAll.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	VoipContainerEnemiesOnly( WarzoneGameStatusIndicatorDisplay, f1_local8["factions.isCoDCaster"], function ( f6_arg0 )
		f1_arg0:updateElementState( VoipContainerAll, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay = VoipContainerAll --[[ @ 0]]
	VoipContainerEnemiesOnly = VoipContainerAll.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	VoipContainerEnemiesOnly( WarzoneGameStatusIndicatorDisplay, f1_local8.profileSettingsUpdated, function ( f7_arg0 )
		f1_arg0:updateElementState( VoipContainerAll, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( VoipContainerAll ) --[[ @ 0]]
	self.VoipContainerAll = VoipContainerAll --[[ @ 0]]
	
	VoipContainerEnemiesOnly = CoD.Voip_Container_EnemiesOnly.new( f1_arg0, f1_arg1, 0, 0, 350, 759, 0, 0, 34, 142 ) --[[ @ 0]]
	VoipContainerEnemiesOnly:mergeStateConditions( {
		{
			stateName = "HudStart",
			condition = function ( menu, element, event )
				return AlwaysTrue() and not IsGametypeSettingsValue( "wzHardcore", 1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local8 = VoipContainerEnemiesOnly --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay = VoipContainerEnemiesOnly.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay( f1_local8, f1_local9["factions.isCoDCaster"], function ( f9_arg0 )
		f1_arg0:updateElementState( VoipContainerEnemiesOnly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local8 = VoipContainerEnemiesOnly --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay = VoipContainerEnemiesOnly.subscribeToModel --[[ @ 0]]
	f1_local9 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay( f1_local8, f1_local9.profileSettingsUpdated, function ( f10_arg0 )
		f1_arg0:updateElementState( VoipContainerEnemiesOnly, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( VoipContainerEnemiesOnly ) --[[ @ 0]]
	self.VoipContainerEnemiesOnly = VoipContainerEnemiesOnly --[[ @ 0]]
	
	WarzoneGameStatusIndicatorDisplay = CoD.WarzoneGameStatusIndicatorDisplay.new( f1_arg0, f1_arg1, 0, 0, 31, 376, 0, 0, 34, 78 ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay:mergeStateConditions( {
		{
			stateName = "Right",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Left",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsRightSolo:setFilter( function ( f13_arg0 )
		return f13_arg0.type:get() == "gameInformation"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsRightSolo:setDataSource( "WarzoneGameStatusIndicatorListHUDLeft" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsLeftSolo:setFilter( function ( f14_arg0 )
		return f14_arg0.type:get() == "hudGameStat"
	end ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsLeftSolo:setDataSource( "WarzoneGameStatusIndicatorListHUDLeft" ) --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.GameStatusIndicators:setDataSource( "WarzoneGameStatusIndicatorListHUDLeft" ) --[[ @ 0]]
	self:addElement( WarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
	self.WarzoneGameStatusIndicatorDisplay = WarzoneGameStatusIndicatorDisplay --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HideForCodCaster",
			condition = function ( menu, element, event )
				return IsCodCaster( f1_arg1 ) and not IsCodCasterProfileValueEqualTo( f1_arg1, "shoutcaster_qs_playerhud", 1 )
			end
		},
		{
			stateName = "HideForSpawnSelect",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.showSpawnSelect", 1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10["factions.isCoDCaster"], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "factions.isCoDCaster"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = DataSources.CodCaster.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10.profileSettingsUpdated, function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "profileSettingsUpdated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local9 = self --[[ @ 0]]
	f1_local8 = self.subscribeToModel --[[ @ 0]]
	f1_local10 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local9, f1_local10["hudItems.showSpawnSelect"], function ( f19_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f19_arg0:get(),
			modelName = "hudItems.showSpawnSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "scriptNotify", function ( model )
		local f20_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"create_prematch_timer" ) then
			CreatePrematchTimer_Minimize( self, f1_arg0, f1_arg1, model, 5000 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_2A9F7ECDA8E925F6" ) then
			CreateHoldingPenNotification( self, f1_arg0, f1_arg1, model, 5000 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Obituary.id = "Obituary" --[[ @ 0]]
	WZHudMenus.id = "WZHudMenus" --[[ @ 0]]
	InGameTalkersWidget.id = "InGameTalkersWidget" --[[ @ 0]]
	WarzoneGameStatusIndicatorDisplay.id = "WarzoneGameStatusIndicatorDisplay" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local8 = self --[[ @ 0]]
	CoD.HUDUtility.AddCustomGainFocusWidget( self, self.WZHudMenus ) --[[ @ 0]]
	CoD.WZUtility.SetupQuickInventoryAutoClose( f1_arg0, f1_arg1, 5000 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.__resetProperties = function ( f21_arg0 )
	f21_arg0.CompassGroupContainer:completeAnimation() --[[ @ 0]]
	f21_arg0.CompassGroupContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HideForCodCaster = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.CompassGroupContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.CompassGroupContainer:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.CompassGroupContainer ) --[[ @ 0]]
		end
	},
	HideForSpawnSelect = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f24_arg0.CompassGroupContainer:completeAnimation() --[[ @ 0]]
			f24_arg0.CompassGroupContainer:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.CompassGroupContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Hud_WZ_SafeAreaContainer_Front.__onClose = function ( f25_arg0 )
	f25_arg0.Obituary:close() --[[ @ 0]]
	f25_arg0.CompassGroupContainer:close() --[[ @ 0]]
	f25_arg0.WZHudMenus:close() --[[ @ 0]]
	f25_arg0.InGameTalkersWidget:close() --[[ @ 0]]
	f25_arg0.VoipContainerAll:close() --[[ @ 0]]
	f25_arg0.VoipContainerEnemiesOnly:close() --[[ @ 0]]
	f25_arg0.WarzoneGameStatusIndicatorDisplay:close() --[[ @ 0]]
end
 --[[ @ 0]]
