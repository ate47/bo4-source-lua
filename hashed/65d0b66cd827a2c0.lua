-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:2fd561622867b8bd" ) --[[ @ 0]]
require( "x64:39c626a0110d2a99" ) --[[ @ 0]]

CoD.SelectedClassMiniPreview = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SelectedClassMiniPreview.__defaultWidth = 1920 --[[ @ 0]]
CoD.SelectedClassMiniPreview.__defaultHeight = 300 --[[ @ 0]]
CoD.SelectedClassMiniPreview.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "BonuscardModifiedSlotEnum", CoD.BonuscardUtility.BonuscardModifiedSlotType.NONE ) --[[ @ 0]]
	self:setClass( CoD.SelectedClassMiniPreview ) --[[ @ 0]]
	self.id = "SelectedClassMiniPreview" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ClassList = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 2, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	ClassList:setLeftRight( 0.5, 0.5, -429, 429 ) --[[ @ 0]]
	ClassList:setTopBottom( 1, 1, -35, 0 ) --[[ @ 0]]
	ClassList:setAlpha( 0 ) --[[ @ 0]]
	ClassList:setWidgetType( CoD.CustomClassListButton ) --[[ @ 0]]
	ClassList:setHorizontalCount( 5 ) --[[ @ 0]]
	ClassList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ClassList:setDataSource( "ChooseClass_InGame" ) --[[ @ 0]]
	self.__on_menuOpened_ClassList = function ( f2_arg0, f2_arg1, f2_arg2, f2_arg3 )
		CoD.CACUtility.SetActiveListItemToSelectedClass( f2_arg1, f2_arg2, ClassList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_ClassList ) --[[ @ 0]]
	ClassList:subscribeToGlobalModel( f1_arg1, "PerController", "selectedCustomClass", function ( model )
		CoD.CACUtility.SetActiveListItemToSelectedClass( f1_arg1, f1_arg0, ClassList ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ClassList ) --[[ @ 0]]
	self.ClassList = ClassList --[[ @ 0]]
	
	local FullBacking = LUI.UIImage.new( 0.45, 1.55, -960, -960, 1, 1.96, -288, -288 ) --[[ @ 0]]
	FullBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	FullBacking:setAlpha( 0 ) --[[ @ 0]]
	FullBacking:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( FullBacking ) --[[ @ 0]]
	self.FullBacking = FullBacking --[[ @ 0]]
	
	local panelbacking = LUI.UIImage.new( -0.05, 1.05, 0, 0, 1, 1, -265, -96 ) --[[ @ 0]]
	panelbacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	panelbacking:setAlpha( 0.75 ) --[[ @ 0]]
	panelbacking:registerEventHandler( "menu_loaded", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f5_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f5_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	self:addElement( panelbacking ) --[[ @ 0]]
	self.panelbacking = panelbacking --[[ @ 0]]
	
	local panelbackingTop = LUI.UIImage.new( -0.05, 1.05, 0, 0, 1, 1, -265, -290 ) --[[ @ 0]]
	panelbackingTop:setRGB( 0, 0, 0 ) --[[ @ 0]]
	panelbackingTop:setAlpha( 0.25 ) --[[ @ 0]]
	panelbackingTop:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( panelbackingTop ) --[[ @ 0]]
	self.panelbackingTop = panelbackingTop --[[ @ 0]]
	
	local SelectedClassLabel = LUI.UIText.new( 0.5, 0.5, -512, 28, 1, 1, -287.5, -267.5 ) --[[ @ 0]]
	SelectedClassLabel:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	SelectedClassLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_20AAFF2AE8CD4664" ) ) --[[ @ 0]]
	SelectedClassLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	SelectedClassLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	SelectedClassLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	SelectedClassLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( SelectedClassLabel ) --[[ @ 0]]
	self.SelectedClassLabel = SelectedClassLabel --[[ @ 0]]
	
	local ClassName = LUI.UIText.new( 0.5, 0.5, 33.5, 573.5, 1, 1, -287.5, -267.5 ) --[[ @ 0]]
	ClassName:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	ClassName:setTTF( "notosans_bold" ) --[[ @ 0]]
	ClassName:setLetterSpacing( 2 ) --[[ @ 0]]
	ClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	ClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( ClassName ) --[[ @ 0]]
	self.ClassName = ClassName --[[ @ 0]]
	
	local nameline = LUI.UIImage.new( -0.05, 1.05, 0, 0, 1, 1, -265.5, -264.5 ) --[[ @ 0]]
	nameline:setAlpha( 0.15 ) --[[ @ 0]]
	nameline:registerEventHandler( "menu_loaded", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f7_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f7_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f7_local0 then
			f7_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	self:addElement( nameline ) --[[ @ 0]]
	self.nameline = nameline --[[ @ 0]]
	
	local ClassMiniPreview = CoD.ClassMiniPreview.new( f1_arg0, f1_arg1, 0.5, 0.5, -700, 700, 1, 1, -256.5, -176.5 ) --[[ @ 0]]
	self:addElement( ClassMiniPreview ) --[[ @ 0]]
	self.ClassMiniPreview = ClassMiniPreview --[[ @ 0]]
	
	local lightblurbar = LUI.UIImage.new( -0.05, 1.05, 0, 0, 1, 1, -272.5, -256.5 ) --[[ @ 0]]
	lightblurbar:setImage( RegisterImage( @"uie_ui_menu_draft_barflare" ) ) --[[ @ 0]]
	lightblurbar:registerEventHandler( "menu_loaded", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f8_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f8_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsPC() then
			SizeToWidthOfScreen( element, f1_arg1 ) --[[ @ 0]]
		end
		if not f8_local0 then
			f8_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( lightblurbar ) --[[ @ 0]]
	self.lightblurbar = lightblurbar --[[ @ 0]]
	
	ClassName:linkToElementModel( ClassList, "customClassName", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			ClassName:setText( ConvertToUpperString( f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClassMiniPreview:linkToElementModel( ClassList, nil, false, function ( model )
		ClassMiniPreview:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Bounty",
			condition = function ( menu, element, event )
				return CoD.BountyHunterUtility.GameTypeHidesChooseClass( f1_arg1 )
			end
		},
		{
			stateName = "Arabic",
			condition = function ( menu, element, event )
				return IsCurrentLanguageReversed()
			end
		}
	} ) --[[ @ 0]]
	ClassList.id = "ClassList" --[[ @ 0]]
	ClassMiniPreview.id = "ClassMiniPreview" --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_ClassList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.SelectedClassMiniPreview.__resetProperties = function ( f14_arg0 )
	f14_arg0.ClassMiniPreview:completeAnimation() --[[ @ 0]]
	f14_arg0.SelectedClassLabel:completeAnimation() --[[ @ 0]]
	f14_arg0.ClassName:completeAnimation() --[[ @ 0]]
	f14_arg0.ClassMiniPreview:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.SelectedClassLabel:setLeftRight( 0.5, 0.5, -512, 28 ) --[[ @ 0]]
	f14_arg0.SelectedClassLabel:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.SelectedClassLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	f14_arg0.ClassName:setLeftRight( 0.5, 0.5, 33.5, 573.5 ) --[[ @ 0]]
	f14_arg0.ClassName:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.ClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.SelectedClassMiniPreview.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Bounty = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f16_arg0.SelectedClassLabel:completeAnimation() --[[ @ 0]]
			f16_arg0.SelectedClassLabel:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.SelectedClassLabel ) --[[ @ 0]]
			f16_arg0.ClassName:completeAnimation() --[[ @ 0]]
			f16_arg0.ClassName:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ClassName ) --[[ @ 0]]
			f16_arg0.ClassMiniPreview:completeAnimation() --[[ @ 0]]
			f16_arg0.ClassMiniPreview:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ClassMiniPreview ) --[[ @ 0]]
		end
	},
	Arabic = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f17_arg0.SelectedClassLabel:completeAnimation() --[[ @ 0]]
			f17_arg0.SelectedClassLabel:setLeftRight( 0.5, 0.5, 33.5, 573.5 ) --[[ @ 0]]
			f17_arg0.SelectedClassLabel:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.SelectedClassLabel ) --[[ @ 0]]
			f17_arg0.ClassName:completeAnimation() --[[ @ 0]]
			f17_arg0.ClassName:setLeftRight( 0.5, 0.5, -512, 28 ) --[[ @ 0]]
			f17_arg0.ClassName:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.ClassName ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.SelectedClassMiniPreview.__onClose = function ( f18_arg0 )
	f18_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f18_arg0.ClassName:close() --[[ @ 0]]
	f18_arg0.ClassMiniPreview:close() --[[ @ 0]]
	f18_arg0.ClassList:close() --[[ @ 0]]
end
 --[[ @ 0]]
