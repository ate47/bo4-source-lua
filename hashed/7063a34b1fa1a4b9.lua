-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:34f4ebc58e721a19" ) --[[ @ 0]]
require( "ui/uieditor/widgets/store/storecommontextbacking" ) --[[ @ 0]]

CoD.Challenges_TierIcon = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Challenges_TierIcon.__defaultWidth = 54 --[[ @ 0]]
CoD.Challenges_TierIcon.__defaultHeight = 114 --[[ @ 0]]
CoD.Challenges_TierIcon.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Challenges_TierIcon ) --[[ @ 0]]
	self.id = "Challenges_TierIcon" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FrameBorder = LUI.UIImage.new( 0.5, 0.5, -27, 27, 0, 0, 0, 54 ) --[[ @ 0]]
	FrameBorder:setAlpha( 0.15 ) --[[ @ 0]]
	FrameBorder:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrameBorder:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrameBorder:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrameBorder:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrameBorder ) --[[ @ 0]]
	self.FrameBorder = FrameBorder --[[ @ 0]]
	
	local ImageX = LUI.UIImage.new( 0, 0, 2, 52, 0, 0, 2, 52 ) --[[ @ 0]]
	ImageX:setImage( RegisterImage( @"uie_t7_menu_frontend_slidex" ) ) --[[ @ 0]]
	ImageX:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	ImageX:linkToElementModel( self, "rankIcon", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			ImageX:setAlpha( HideIfNotEmptyString( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ImageX ) --[[ @ 0]]
	self.ImageX = ImageX --[[ @ 0]]
	
	local Glow = LUI.UIImage.new( 0, 0, -16, 69, 0, 0, -19, 73 ) --[[ @ 0]]
	Glow:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Glow:setAlpha( 0 ) --[[ @ 0]]
	Glow:setImage( RegisterImage( @"uie_ui_hud_core_no_ammo_glow" ) ) --[[ @ 0]]
	Glow:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Glow ) --[[ @ 0]]
	self.Glow = Glow --[[ @ 0]]
	
	local Background = LUI.UIImage.new( 0, 0, 2, 52, 0, 0, 2, 52 ) --[[ @ 0]]
	Background:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	Background:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Background ) --[[ @ 0]]
	self.Background = Background --[[ @ 0]]
	
	local DotTiledBacking = CoD.StoreCommonTextBacking.new( f1_arg0, f1_arg1, 0, 0, 2, 52, 0, 0, 2, 52 ) --[[ @ 0]]
	DotTiledBacking:setRGB( ColorSet.PlayerYellow.r, ColorSet.PlayerYellow.g, ColorSet.PlayerYellow.b ) --[[ @ 0]]
	DotTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DotTiledBacking ) --[[ @ 0]]
	self.DotTiledBacking = DotTiledBacking --[[ @ 0]]
	
	local FocusBorder = LUI.UIImage.new( 0.07, 0.93, -4, 4, 0.04, 0.43, -4, 4 ) --[[ @ 0]]
	FocusBorder:setRGB( ColorSet.WarzoneTeammate1.r, ColorSet.WarzoneTeammate1.g, ColorSet.WarzoneTeammate1.b ) --[[ @ 0]]
	FocusBorder:setAlpha( 0 ) --[[ @ 0]]
	FocusBorder:setImage( RegisterImage( @"uie_ui_menu_store_focus_frame" ) ) --[[ @ 0]]
	FocusBorder:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FocusBorder:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FocusBorder:setupNineSliceShader( 8, 8 ) --[[ @ 0]]
	self:addElement( FocusBorder ) --[[ @ 0]]
	self.FocusBorder = FocusBorder --[[ @ 0]]
	
	local TierText = LUI.UIText.new( 0, 0, 5, 35, 0, 0, 12, 42 ) --[[ @ 0]]
	TierText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	TierText:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_2AE166D9BA8C6907" ) ) --[[ @ 0]]
	TierText:setShaderVector( 0, 0.02, 0, 0, 0 ) --[[ @ 0]]
	TierText:setShaderVector( 1, 0.06, 0, 0, 0 ) --[[ @ 0]]
	TierText:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
	TierText:setLetterSpacing( 2 ) --[[ @ 0]]
	TierText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	TierText:setAlignment( Enum[@"luialignment"][@"lui_alignment_middle"] ) --[[ @ 0]]
	self:addElement( TierText ) --[[ @ 0]]
	self.TierText = TierText --[[ @ 0]]
	
	local CurrentTierArrow = LUI.UIImage.new( 0, 0, 22, 32, 1, 1, -60, -43 ) --[[ @ 0]]
	CurrentTierArrow:setZRot( 90 ) --[[ @ 0]]
	CurrentTierArrow:setScale( 0.8, 0.8 ) --[[ @ 0]]
	CurrentTierArrow:setImage( RegisterImage( @"uie_ui_hud_common_triangle" ) ) --[[ @ 0]]
	self:addElement( CurrentTierArrow ) --[[ @ 0]]
	self.CurrentTierArrow = CurrentTierArrow --[[ @ 0]]
	
	local XP = CoD.CallingCardProfilerXP.new( f1_arg0, f1_arg1, 0, 0, 0, 158, 0, 0, 57, 111 ) --[[ @ 0]]
	XP.XPIcon:setScale( 0.59, 0.59 ) --[[ @ 0]]
	XP:linkToElementModel( self, nil, false, function ( model )
		XP:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( XP ) --[[ @ 0]]
	self.XP = XP --[[ @ 0]]
	
	self.TierText:linkToElementModel( self, "tierText", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			TierText:setText( f4_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "Unreached",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isReached" )
			end
		},
		{
			stateName = "CurrentTier",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isCurrentTier" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isReached", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isReached"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isCurrentTier", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isCurrentTier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Challenges_TierIcon.__resetProperties = function ( f9_arg0 )
	f9_arg0.CurrentTierArrow:completeAnimation() --[[ @ 0]]
	f9_arg0.XP:completeAnimation() --[[ @ 0]]
	f9_arg0.Background:completeAnimation() --[[ @ 0]]
	f9_arg0.TierText:completeAnimation() --[[ @ 0]]
	f9_arg0.ImageX:completeAnimation() --[[ @ 0]]
	f9_arg0.Glow:completeAnimation() --[[ @ 0]]
	f9_arg0.DotTiledBacking:completeAnimation() --[[ @ 0]]
	f9_arg0.FocusBorder:completeAnimation() --[[ @ 0]]
	f9_arg0.CurrentTierArrow:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.XP:setAlpha( 1 ) --[[ @ 0]]
	f9_arg0.Background:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	f9_arg0.Background:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.TierText:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.ImageX:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.Glow:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.DotTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.FocusBorder:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Challenges_TierIcon.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f10_arg0.CurrentTierArrow:completeAnimation() --[[ @ 0]]
			f10_arg0.CurrentTierArrow:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.CurrentTierArrow ) --[[ @ 0]]
			f10_arg0.XP:completeAnimation() --[[ @ 0]]
			f10_arg0.XP:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.XP ) --[[ @ 0]]
		end
	},
	Unreached = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.CurrentTierArrow:completeAnimation() --[[ @ 0]]
			f11_arg0.CurrentTierArrow:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.CurrentTierArrow ) --[[ @ 0]]
			f11_arg0.XP:completeAnimation() --[[ @ 0]]
			f11_arg0.XP:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.XP ) --[[ @ 0]]
		end
	},
	CurrentTier = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f12_arg0.ImageX:completeAnimation() --[[ @ 0]]
			f12_arg0.ImageX:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.ImageX ) --[[ @ 0]]
			f12_arg0.Glow:completeAnimation() --[[ @ 0]]
			f12_arg0.Glow:setAlpha( 0.6 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Glow ) --[[ @ 0]]
			f12_arg0.Background:completeAnimation() --[[ @ 0]]
			f12_arg0.Background:setRGB( 1, 0.93, 0 ) --[[ @ 0]]
			f12_arg0.Background:setAlpha( 0.7 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Background ) --[[ @ 0]]
			f12_arg0.DotTiledBacking:completeAnimation() --[[ @ 0]]
			f12_arg0.DotTiledBacking:setAlpha( 0.25 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.DotTiledBacking ) --[[ @ 0]]
			f12_arg0.FocusBorder:completeAnimation() --[[ @ 0]]
			f12_arg0.FocusBorder:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.FocusBorder ) --[[ @ 0]]
			f12_arg0.TierText:completeAnimation() --[[ @ 0]]
			f12_arg0.TierText:setRGB( 0, 0, 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.TierText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Challenges_TierIcon.__onClose = function ( f13_arg0 )
	f13_arg0.ImageX:close() --[[ @ 0]]
	f13_arg0.DotTiledBacking:close() --[[ @ 0]]
	f13_arg0.TierText:close() --[[ @ 0]]
	f13_arg0.XP:close() --[[ @ 0]]
end
 --[[ @ 0]]
