-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
CoD.AmmoWidgetZM_WeaponListPip = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetZM_WeaponListPip.__defaultWidth = 30 --[[ @ 0]]
CoD.AmmoWidgetZM_WeaponListPip.__defaultHeight = 10 --[[ @ 0]]
CoD.AmmoWidgetZM_WeaponListPip.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetZM_WeaponListPip ) --[[ @ 0]]
	self.id = "AmmoWidgetZM_WeaponListPip" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FeaturedPipEmpty = LUI.UIImage.new( 0, 0, -12, 42, 0, 0, -6, 16 ) --[[ @ 0]]
	FeaturedPipEmpty:setAlpha( 0.8 ) --[[ @ 0]]
	FeaturedPipEmpty:setImage( RegisterImage( @"hash_34C042BC6C9D43A9" ) ) --[[ @ 0]]
	self:addElement( FeaturedPipEmpty ) --[[ @ 0]]
	self.FeaturedPipEmpty = FeaturedPipEmpty --[[ @ 0]]
	
	local FeaturedPipCurrent = LUI.UIImage.new( 0, 0, -12, 42, 0, 0, -6, 16 ) --[[ @ 0]]
	FeaturedPipCurrent:setRGB( 0.93, 0.81, 0.03 ) --[[ @ 0]]
	FeaturedPipCurrent:setAlpha( 0 ) --[[ @ 0]]
	FeaturedPipCurrent:setImage( RegisterImage( @"hash_79D0184504FDF2CD" ) ) --[[ @ 0]]
	FeaturedPipCurrent:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	FeaturedPipCurrent:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( FeaturedPipCurrent ) --[[ @ 0]]
	self.FeaturedPipCurrent = FeaturedPipCurrent --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HasWeapon",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", CoD.ZMAmmoWidgetUtility.AmmoWidgetZMEquipedWeaponsListPipState.HAS_WEAPON )
			end
		},
		{
			stateName = "HasEquippedWeapon",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", CoD.ZMAmmoWidgetUtility.AmmoWidgetZMEquipedWeaponsListPipState.HAS_EQUIPPED_WEAPON )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_WeaponListPip.__resetProperties = function ( f5_arg0 )
	f5_arg0.FeaturedPipCurrent:completeAnimation() --[[ @ 0]]
	f5_arg0.FeaturedPipCurrent:setRGB( 0.93, 0.81, 0.03 ) --[[ @ 0]]
	f5_arg0.FeaturedPipCurrent:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetZM_WeaponListPip.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f6_arg0, f6_arg1 )
			f6_arg0:__resetProperties() --[[ @ 0]]
			f6_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HasWeapon = {
		DefaultClip = function ( f7_arg0, f7_arg1 )
			f7_arg0:__resetProperties() --[[ @ 0]]
			f7_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f7_arg0.FeaturedPipCurrent:completeAnimation() --[[ @ 0]]
			f7_arg0.FeaturedPipCurrent:setRGB( 0.32, 0.33, 0.27 ) --[[ @ 0]]
			f7_arg0.FeaturedPipCurrent:setAlpha( 1 ) --[[ @ 0]]
			f7_arg0.clipFinished( f7_arg0.FeaturedPipCurrent ) --[[ @ 0]]
		end
	},
	HasEquippedWeapon = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f8_arg0.FeaturedPipCurrent:completeAnimation() --[[ @ 0]]
			f8_arg0.FeaturedPipCurrent:setRGB( 0.37, 0.68, 0.18 ) --[[ @ 0]]
			f8_arg0.FeaturedPipCurrent:setAlpha( 1 ) --[[ @ 0]]
			f8_arg0.clipFinished( f8_arg0.FeaturedPipCurrent ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
