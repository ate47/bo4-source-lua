-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:5ebfe24f09f3e978" ) --[[ @ 0]]
require( "x64:459b8c4dd2a923d8" ) --[[ @ 0]]
require( "x64:4306f8a26f77715" ) --[[ @ 0]]

CoD.LaboratoryRegularOffers = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.LaboratoryRegularOffers.__defaultWidth = 480 --[[ @ 0]]
CoD.LaboratoryRegularOffers.__defaultHeight = 350 --[[ @ 0]]
CoD.LaboratoryRegularOffers.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.LaboratoryRegularOffers ) --[[ @ 0]]
	self.id = "LaboratoryRegularOffers" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local LaboratoryOffersHeader = CoD.LaboratoryOffersHeader.new( f1_arg0, f1_arg1, 0, 0, -30, 510, 0, 0, -20, 23 ) --[[ @ 0]]
	LaboratoryOffersHeader.Divider.R:setScale( 1, 1 ) --[[ @ 0]]
	LaboratoryOffersHeader.Divider.L:setScale( 1, 1 ) --[[ @ 0]]
	self:addElement( LaboratoryOffersHeader ) --[[ @ 0]]
	self.LaboratoryOffersHeader = LaboratoryOffersHeader --[[ @ 0]]
	
	local RegularOffers = LUI.UIList.new( f1_arg0, f1_arg1, 16, 0, nil, false, false, false, false ) --[[ @ 0]]
	RegularOffers:setLeftRight( 0, 0, 0, 482 ) --[[ @ 0]]
	RegularOffers:setTopBottom( 0, 0, 62.5, 212.5 ) --[[ @ 0]]
	RegularOffers:setWidgetType( CoD.LaboratoryListItem ) --[[ @ 0]]
	RegularOffers:setHorizontalCount( 3 ) --[[ @ 0]]
	RegularOffers:setSpacing( 16 ) --[[ @ 0]]
	RegularOffers:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	RegularOffers:setFilter( function ( f2_arg0 )
		return f2_arg0.specialOffer:get() == false
	end ) --[[ @ 0]]
	RegularOffers:setDataSource( "ZMLaboratoryNPItemList" ) --[[ @ 0]]
	local f1_local3 = RegularOffers --[[ @ 0]]
	local TextBox = RegularOffers.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	TextBox( f1_local3, f1_local5["Laboratory.animState"], function ( f3_arg0, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local3 = RegularOffers --[[ @ 0]]
	TextBox = RegularOffers.subscribeToModel --[[ @ 0]]
	f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	TextBox( f1_local3, f1_local5["Laboratory.disableInput"], function ( f4_arg0, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RegularOffers:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		CoD.ZMLaboratoryUtility.ClientScriptNotifyFocusChanged( self, element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	RegularOffers:registerEventHandler( "gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f6_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f6_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RegularOffers, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			ProcessListAction( self, element, controller, menu ) --[[ @ 0]]
			CoD.ZMLaboratoryUtility.CacheOfferButtonModel( controller, element, menu ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and not CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) then
			CoD.ZMLaboratoryUtility.CacheOfferButtonModel( controller, element, menu ) --[[ @ 0]]
			OpenPopup( self, "PurchasePlasma", controller, element:getModel() ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and not CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			CoD.ZMLaboratoryUtility.CacheOfferButtonModel( controller, element, menu ) --[[ @ 0]]
			local f7_local0 = OpenSystemOverlay --[[ @ 0]]
			local f7_local1 = self --[[ @ 0]]
			local f7_local2 = menu --[[ @ 0]]
			local f7_local3 = controller --[[ @ 0]]
			local f7_local4 = "NotEnoughNPPopup" --[[ @ 0]]
			local f7_local5 = {} --[[ @ 0]]
			local f7_local6 = element:getModel() --[[ @ 0]]
			f7_local5.npRequired = f7_local6.plasmaPrice:get() --[[ @ 0]]
			f7_local0( f7_local1, f7_local2, f7_local3, f7_local4, f7_local5 ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and not CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) and IsBooleanDvarSet( "laboratory_codpoints_enabled" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "Laboratory.animState", CoD.ZMLaboratoryUtility.LabAnimState.NOT_PLAYING ) and not CoD.ZMLaboratoryUtility.CanPurchase( controller, element ) and CoD.ModelUtility.IsModelValueEqualTo( controller, "Laboratory.disableInput", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( RegularOffers ) --[[ @ 0]]
	self.RegularOffers = RegularOffers --[[ @ 0]]
	
	TextBox = LUI.UIText.new( 0, 0, -26, 510, 0, 0, -15.5, 21.5 ) --[[ @ 0]]
	TextBox:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	TextBox:setText( LocalizeToUpperString( @"hash_27B562F0618E2CB7" ) ) --[[ @ 0]]
	TextBox:setTTF( "skorzhen" ) --[[ @ 0]]
	TextBox:setLetterSpacing( 3 ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( TextBox ) --[[ @ 0]]
	self.TextBox = TextBox --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	RegularOffers.id = "RegularOffers" --[[ @ 0]]
	self.__defaultFocus = RegularOffers --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.LaboratoryRegularOffers.__resetProperties = function ( f10_arg0 )
	f10_arg0.RegularOffers:completeAnimation() --[[ @ 0]]
	f10_arg0.RegularOffers:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.LaboratoryRegularOffers.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f12_arg0.RegularOffers:completeAnimation() --[[ @ 0]]
			f12_arg0.RegularOffers:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.RegularOffers ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.LaboratoryRegularOffers.__onClose = function ( f13_arg0 )
	f13_arg0.LaboratoryOffersHeader:close() --[[ @ 0]]
	f13_arg0.RegularOffers:close() --[[ @ 0]]
end
 --[[ @ 0]]
