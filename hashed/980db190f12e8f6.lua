-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:4ffc2c7e4adad795" ) --[[ @ 0]]
require( "x64:3c0cb09f85132dc0" ) --[[ @ 0]]
require( "ui/uieditor/widgets/common/common_tabbar_center" ) --[[ @ 0]]
require( "x64:4ca1dc89b2aa714c" ) --[[ @ 0]]
require( "x64:21744d99b88fcb45" ) --[[ @ 0]]
require( "x64:eb8711f5087e974" ) --[[ @ 0]]
require( "x64:32a456a4b0756328" ) --[[ @ 0]]

CoD.Armory_WeaponListWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Armory_WeaponListWidget.__defaultWidth = 1920 --[[ @ 0]]
CoD.Armory_WeaponListWidget.__defaultHeight = 490 --[[ @ 0]]
CoD.Armory_WeaponListWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Armory_WeaponListWidget ) --[[ @ 0]]
	self.id = "Armory_WeaponListWidget" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local weaponCategoryList = CoD.Common_Tabbar_Center.new( f1_arg0, f1_arg1, 0.5, 0.5, -1650, 1650, 0, 0, -19, 42 ) --[[ @ 0]]
	weaponCategoryList.Tabs.grid:setWidgetType( CoD.CACTextTab ) --[[ @ 0]]
	weaponCategoryList.Tabs.grid:setDataSource( "ArmoryWeaponGroups" ) --[[ @ 0]]
	weaponCategoryList:registerEventHandler( "list_active_changed", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if CoD.BaseUtility.IsWidgetVisible( element ) then
			SetElementProperty( f1_arg0, "__itemGroup", element.category ) --[[ @ 0]]
			SetElementProperty( f1_arg0, "__loadoutType", element.loadoutType ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f1_arg1 ) --[[ @ 0]]
			CoD.GridAndListUtility.SetFocusToFirstSelectableItem( self.weaponList ) --[[ @ 0]]
			CoD.CACUtility.UpdateCommonCurrentActiveTabIndexValue( f1_arg1, self.weaponCategoryList ) --[[ @ 0]]
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.PCArrowR ) --[[ @ 0]]
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.PCArrowL ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self.__on_menuOpened_weaponCategoryList = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3 )
		local f3_local0 = weaponCategoryList --[[ @ 0]]
		if not IsElementPropertyValue( f3_local0, "_receivedMenuOpen", true ) then
			SetElementProperty( f3_local0, "_receivedMenuOpen", true ) --[[ @ 0]]
			CoD.CACUtility.SetActiveListItemForWeaponGroup( f3_arg2, f3_arg1, self.weaponCategoryList ) --[[ @ 0]]
			UpdateDataSource( self, self.weaponList, f3_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
	self:addElement( weaponCategoryList ) --[[ @ 0]]
	self.weaponCategoryList = weaponCategoryList --[[ @ 0]]
	
	local PCArrowL = nil --[[ @ 0]]
	
	PCArrowL = CoD.WarzoneContextualExtraItemsArrow.new( f1_arg0, f1_arg1, 0, 0, 177.5, 207.5, 0, 0, 111.5, 146.5 ) --[[ @ 0]]
	PCArrowL:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.IsQuickEquipListFirstItemVisible( self.weaponList )
			end
		}
	} ) --[[ @ 0]]
	PCArrowL:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	PCArrowL:setZRot( 90 ) --[[ @ 0]]
	PCArrowL:setScale( 1.2, 1.2 ) --[[ @ 0]]
	PCArrowL.Arrow:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowL.Arrow2:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowL:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local weaponList = PCArrowL --[[ @ 0]]
	local PCArrowR = PCArrowL.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	PCArrowR( weaponList, f1_local5.LastInput, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PCArrowL:registerEventHandler( "gain_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f7_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f7_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f7_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowL, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.ScrollLeft( self.weaponList ) --[[ @ 0]]
			CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowL ) --[[ @ 0]]
	self.PCArrowL = PCArrowL --[[ @ 0]]
	
	PCArrowR = nil --[[ @ 0]]
	
	PCArrowR = CoD.WarzoneContextualExtraItemsArrow.new( f1_arg0, f1_arg1, 0, 0, 1714, 1744, 0, 0, 111.5, 146.5 ) --[[ @ 0]]
	PCArrowR:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return not CoD.WZUtility.IsQuickEquipListLastItemVisible( self.weaponList )
			end
		}
	} ) --[[ @ 0]]
	PCArrowR:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	PCArrowR:setZRot( 270 ) --[[ @ 0]]
	PCArrowR:setScale( 1.2, 1.2 ) --[[ @ 0]]
	PCArrowR.Arrow:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowR.Arrow2:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	PCArrowR:appendEventHandler( "input_source_changed", function ( f11_arg0, f11_arg1 )
		f11_arg1.menu = f11_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f11_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = PCArrowR --[[ @ 0]]
	weaponList = PCArrowR.subscribeToModel --[[ @ 0]]
	local f1_local6 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	weaponList( f1_local5, f1_local6.LastInput, function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PCArrowR:registerEventHandler( "gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f13_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f13_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PCArrowR, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.ScrollRight( self.weaponList ) --[[ @ 0]]
			CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( PCArrowR ) --[[ @ 0]]
	self.PCArrowR = PCArrowR --[[ @ 0]]
	
	weaponList = LUI.UIList.new( f1_arg0, f1_arg1, 10, 0, nil, false, false, false, false ) --[[ @ 0]]
	weaponList:setLeftRight( 0.5, 0.5, -750, 750 ) --[[ @ 0]]
	weaponList:setTopBottom( 0, 0, 56, 202 ) --[[ @ 0]]
	weaponList:setWidgetType( CoD.ZMItemGridButton ) --[[ @ 0]]
	weaponList:setHorizontalCount( 5 ) --[[ @ 0]]
	weaponList:setSpacing( 10 ) --[[ @ 0]]
	weaponList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	weaponList:setHorizontalScrollbar( CoD.PC_GridHorizontalScrollbar ) --[[ @ 0]]
	weaponList:setDataSource( "Unlockables" ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "globalItemIndex", true, function ( model, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "refHash", true, function ( model, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, "itemIndex", true, function ( model, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:appendEventHandler( "input_source_changed", function ( f19_arg0, f19_arg1 )
		f19_arg1.menu = f19_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = weaponList --[[ @ 0]]
	f1_local5 = weaponList.subscribeToModel --[[ @ 0]]
	local WeaponVariantListWidget = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, WeaponVariantListWidget.LastInput, function ( f20_arg0, f20_arg1 )
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	weaponList:linkToElementModel( weaponList, nil, false, function ( model, f21_arg1 )
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = weaponList --[[ @ 0]]
	f1_local5 = weaponList.subscribeToModel --[[ @ 0]]
	WeaponVariantListWidget = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local5( f1_local6, WeaponVariantListWidget["lobbyRoot.lobbyNetworkMode"], function ( f22_arg0, f22_arg1 )
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = weaponList --[[ @ 0]]
	f1_local5 = weaponList.subscribeToModel --[[ @ 0]]
	WeaponVariantListWidget = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local5( f1_local6, WeaponVariantListWidget["lobbyRoot.lobbyNav"], function ( f23_arg0, f23_arg1 )
		CoD.Menu.UpdateButtonShownState( f23_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f23_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	weaponList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f24_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponNameInfoModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		CoD.ZMLoadoutUtility.UpdateArmoryWeaponModel( element, f1_arg1, f1_arg0 ) --[[ @ 0]]
		SetElementProperty( self.WeaponVariantListWidget, "_weaponListElement", element ) --[[ @ 0]]
		return f24_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "list_active_changed", function ( element, event )
		local f25_local0 = nil --[[ @ 0]]
		if not IsPC() then
			UpdateSelfElementState( f1_arg0, self.ArrowR, f1_arg1 ) --[[ @ 0]]
			UpdateSelfElementState( f1_arg0, self.ArrowL, f1_arg1 ) --[[ @ 0]]
		end
		return f25_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "lose_list_focus", function ( element, event )
		local f26_local0 = nil --[[ @ 0]]
		CoD.CACUtility.UpdateWeaponModel( f1_arg0, element, f1_arg1 ) --[[ @ 0]]
		return f26_local0
	end ) --[[ @ 0]]
	weaponList:registerEventHandler( "gain_focus", function ( element, event )
		local f27_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f27_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f27_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f27_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsElementPropertyValue( menu, "_loadoutSlot", CoD.ZMLoadoutUtility.StartWeaponLoadoutSlotName ) and not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.CACUtility.EquipWeapon( self, element, menu, controller, false ) --[[ @ 0]]
			UpdateSelfElementState( menu, self, controller ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", CoD.ZMLoadoutUtility.StartWeaponLoadoutSlotName ) and not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.CACUtility.ShowWeaponVariantList( menu, controller, self.WeaponVariantListWidget ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", "armory" ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.DoesWeaponHaveAttachments( element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.ZMLoadoutUtility.OpenArmoryAttachmentOverlay( self, element, controller, menu ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", "armory" ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.DoesWeaponHaveAttachments( element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.CACUtility.ShowWeaponVariantList( menu, controller, self.WeaponVariantListWidget ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementPropertyValue( menu, "_loadoutSlot", CoD.ZMLoadoutUtility.StartWeaponLoadoutSlotName ) and not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", CoD.ZMLoadoutUtility.StartWeaponLoadoutSlotName ) and not CoD.CACUtility.IsItemEquippedInCurrentLoadout( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", "armory" ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.DoesWeaponHaveAttachments( element, controller ) and not CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementPropertyValue( menu, "_loadoutSlot", "armory" ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and CoD.CACUtility.DoesWeaponHaveAttachments( element, controller ) and CoD.CACUtility.HasSignatureWeapons( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelNil( element, controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.BaseUtility.IsDvarEnabled( "disableZMWeaponPersonalization" ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, element, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelNil( element, controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.BaseUtility.IsDvarEnabled( "disableZMWeaponPersonalization" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_194122F68876E5D9", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelNil( element, controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.BaseUtility.IsDvarEnabled( "disableZMWeaponPersonalization" ) then
			CoD.CraftUtility.SetupPaintjobPersonalization( self, element, controller ) --[[ @ 0]]
			CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, menu, controller, element, element, "primary" ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelNil( element, controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) and not CoD.BaseUtility.IsDvarEnabled( "disableZMWeaponPersonalization" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_194122F68876E5D9", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetShowcaseWeapon( element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_4E629850E7968A6E", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.ZMLoadoutUtility.SetShowcaseWeapon( element, controller, menu ) --[[ @ 0]]
			PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not IsLocal() and not IsCustomLobby() and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_4E629850E7968A6E", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.CACUtility.IsCACGunLevelExists( menu, element, controller ) and CoD.CACUtility.IsCACGunLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACGunPrestigeLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) then
			PrestigeWeapon( menu, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.CACUtility.IsCACGunLevelExists( menu, element, controller ) and CoD.CACUtility.IsCACGunLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACGunPrestigeLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_3F45564D1E059F32", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "ui_contextual_3", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.CACUtility.IsCACGunLevelExists( menu, element, controller ) and CoD.CACUtility.IsCACGunLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACGunPrestigeLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) then
			PrestigeWeapon( menu, element, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.CACUtility.IsCACGunLevelExists( menu, element, controller ) and CoD.CACUtility.IsCACGunLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACGunPrestigeLevelMax( menu, element, controller ) and not CoD.CACUtility.IsCACItemLocked( menu, element, controller ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( menu, element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_7DC436DD31790E72", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELUP", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollLeft( self.weaponList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELUP" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( weaponList, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MWHEELDOWN", function ( element, menu, controller, model )
		CoD.GridAndListUtility.ScrollRight( self.weaponList ) --[[ @ 0]]
		CoD.GridAndListUtility.ValidateActiveItemVisibility( self.weaponList ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MWHEELDOWN" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( weaponList, "updateDataSource", function ( element, controller, f46_arg2, f46_arg3 )
		if IsPC() then
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.PCArrowR ) --[[ @ 0]]
			CoD.CACUtility.UpdateArmoryArrowState( f1_arg0, f1_arg1, self.PCArrowL ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	weaponList:subscribeToGlobalModel( f1_arg1, "PerController", "Unlockables.listUpdate", function ( model )
		CoD.GridAndListUtility.UpdateDataSource( weaponList, true, false, true ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:subscribeToGlobalModel( f1_arg1, "WeaponPersonalization", "listUpdate", function ( model )
		CoD.GridAndListUtility.UpdateDataSource( weaponList, true, false, true ) --[[ @ 0]]
		UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponList:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_4AFF37175F950D17", function ( f49_arg0, f49_arg1, f49_arg2, f49_arg3 )
		if IsMouseOrKeyboard( f49_arg2 ) and not CoD.ModelUtility.IsSelfModelNil( f49_arg0, f49_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualTo( f49_arg0, f49_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and not CoD.BaseUtility.IsDvarEnabled( "disableZMWeaponPersonalization" ) and not CoD.CACUtility.IsCACItemLocked( f49_arg1, f49_arg0, f49_arg2 ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( f49_arg1, f49_arg0, f49_arg2 ) then
			return function ( f50_arg0, f50_arg1, f50_arg2, f50_arg3 )
				CoD.CraftUtility.SetupPaintjobPersonalization( self, f50_arg0, f50_arg2 ) --[[ @ 0]]
				CoD.CACUtility.OpenWeaponPersonalizationOverlay( self, f50_arg1, f50_arg2, f50_arg0, f50_arg0, "primary" ) --[[ @ 0]]
				PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	weaponList:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_E092C2BE5DD4778", function ( f51_arg0, f51_arg1, f51_arg2, f51_arg3 )
		if not IsLocal() and not IsCustomLobby() and not CoD.CACUtility.IsCACItemLocked( f51_arg1, f51_arg0, f51_arg2 ) then
			return function ( f52_arg0, f52_arg1, f52_arg2, f52_arg3 )
				CoD.ZMLoadoutUtility.SetShowcaseWeapon( f52_arg0, f52_arg2, f52_arg1 ) --[[ @ 0]]
				PlaySoundAlias( "cac_overload_select" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	weaponList:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_7DC436DD31790E72", function ( f53_arg0, f53_arg1, f53_arg2, f53_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f53_arg0, f53_arg2, "itemIndex", CoDShared.EmptyItemIndex ) and CoD.CACUtility.IsCACGunLevelExists( f53_arg1, f53_arg0, f53_arg2 ) and CoD.CACUtility.IsCACGunLevelMax( f53_arg1, f53_arg0, f53_arg2 ) and not CoD.CACUtility.IsCACGunPrestigeLevelMax( f53_arg1, f53_arg0, f53_arg2 ) and not CoD.CACUtility.IsCACItemLocked( f53_arg1, f53_arg0, f53_arg2 ) and not CoD.CACUtility.IsCACBlackMarketItemLocked( f53_arg1, f53_arg0, f53_arg2 ) then
			return function ( f54_arg0, f54_arg1, f54_arg2, f54_arg3 )
				PrestigeWeapon( f54_arg1, f54_arg0, f54_arg2 ) --[[ @ 0]]
				PlaySoundAlias( "uin_press_generic" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( weaponList ) --[[ @ 0]]
	self.weaponList = weaponList --[[ @ 0]]
	
	f1_local5 = nil --[[ @ 0]]
	self.ArrowL = LUI.UIElement.createFake() --[[ @ 0]]
	f1_local6 = nil --[[ @ 0]]
	self.ArrowR = LUI.UIElement.createFake() --[[ @ 0]]
	
	WeaponVariantListWidget = CoD.WeaponVariantListWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0, 0, 0, 490 ) --[[ @ 0]]
	WeaponVariantListWidget.SignatureWeaponList:setWidgetType( CoD.ZMSignatureWeaponItemGridButton ) --[[ @ 0]]
	WeaponVariantListWidget.SignatureWeaponList:setSpacing( 10 ) --[[ @ 0]]
	WeaponVariantListWidget:registerEventHandler( "gain_focus", function ( element, event )
		local f55_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f55_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f55_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		return f55_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( WeaponVariantListWidget, f1_arg1, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.HideWeaponVariantList( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( WeaponVariantListWidget ) --[[ @ 0]]
	self.WeaponVariantListWidget = WeaponVariantListWidget --[[ @ 0]]
	
	WeaponVariantListWidget:linkToElementModel( weaponList, nil, false, function ( model )
		WeaponVariantListWidget:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "NoCategories",
			condition = function ( menu, element, event )
				return not ListElementHasElements( self.weaponCategoryList )
			end
		},
		{
			stateName = "DefaultStatePC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "grid_updated", function ( f61_arg0, f61_arg1 )
		f61_arg1.menu = f61_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f61_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	weaponCategoryList.id = "weaponCategoryList" --[[ @ 0]]
	if CoD.isPC then
		PCArrowL.id = "PCArrowL" --[[ @ 0]]
	end
	if CoD.isPC then
		PCArrowR.id = "PCArrowR" --[[ @ 0]]
	end
	weaponList.id = "weaponList" --[[ @ 0]]
	WeaponVariantListWidget.id = "WeaponVariantListWidget" --[[ @ 0]]
	self.__defaultFocus = weaponList --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_weaponCategoryList ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local8 = self --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.SetForceMouseEventDispatch( self, true ) --[[ @ 0]]
	end
	f1_local8 = weaponCategoryList --[[ @ 0]]
	if IsPC() then
		DisableKeyboardNavigationByElement( f1_local8 ) --[[ @ 0]]
	end
	f1_local8 = PCArrowL --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.UpdateStateOnGridLayoutUpdate( f1_arg1, f1_local8, self.weaponList ) --[[ @ 0]]
		SetElementCanBeNavigatedTo( f1_local8, false ) --[[ @ 0]]
	end
	f1_local8 = PCArrowR --[[ @ 0]]
	if IsPC() then
		CoD.GridAndListUtility.UpdateStateOnGridLayoutUpdate( f1_arg1, f1_local8, self.weaponList ) --[[ @ 0]]
		SetElementCanBeNavigatedTo( f1_local8, false ) --[[ @ 0]]
	end
	f1_local8 = weaponList --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local8, f1_arg1, "displayName", "", "" ) --[[ @ 0]]
		CoD.GridAndListUtility.HideScrollbarsForGamepad( f1_arg0, f1_arg1, f1_local8 ) --[[ @ 0]]
	elseif not IsPC() then
		CoD.GridAndListUtility.RemoveHorizontalScrollbar( f1_arg0, f1_local8 ) --[[ @ 0]]
	end
	f1_local8 = WeaponVariantListWidget --[[ @ 0]]
	HideWidget( self.WeaponVariantListWidget ) --[[ @ 0]]
	SetElementProperty( f1_local8, "_forZMArmory", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.Armory_WeaponListWidget.__resetProperties = function ( f63_arg0 )
	f63_arg0.ArrowR:completeAnimation() --[[ @ 0]]
	f63_arg0.ArrowL:completeAnimation() --[[ @ 0]]
	f63_arg0.weaponList:completeAnimation() --[[ @ 0]]
	f63_arg0.PCArrowR:completeAnimation() --[[ @ 0]]
	f63_arg0.PCArrowL:completeAnimation() --[[ @ 0]]
	f63_arg0.ArrowR:setTopBottom( 0, 0, 121, 137 ) --[[ @ 0]]
	f63_arg0.ArrowL:setTopBottom( 0, 0, 121, 137 ) --[[ @ 0]]
	f63_arg0.weaponList:setTopBottom( 0, 0, 56, 202 ) --[[ @ 0]]
	f63_arg0.PCArrowR:setTopBottom( 0, 0, 111.5, 146.5 ) --[[ @ 0]]
	f63_arg0.PCArrowL:setTopBottom( 0, 0, 111.5, 146.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Armory_WeaponListWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NoCategories = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	DefaultStatePC = {
		DefaultClip = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f66_arg0.PCArrowL:completeAnimation() --[[ @ 0]]
			f66_arg0.PCArrowL:setTopBottom( 0, 0, 135.5, 170.5 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.PCArrowL ) --[[ @ 0]]
			f66_arg0.PCArrowR:completeAnimation() --[[ @ 0]]
			f66_arg0.PCArrowR:setTopBottom( 0, 0, 135.5, 170.5 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.PCArrowR ) --[[ @ 0]]
			f66_arg0.weaponList:completeAnimation() --[[ @ 0]]
			f66_arg0.weaponList:setTopBottom( 0, 0, 80, 226 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.weaponList ) --[[ @ 0]]
			f66_arg0.ArrowL:completeAnimation() --[[ @ 0]]
			f66_arg0.ArrowL:setTopBottom( 0, 0, 145, 161 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.ArrowL ) --[[ @ 0]]
			f66_arg0.ArrowR:completeAnimation() --[[ @ 0]]
			f66_arg0.ArrowR:setTopBottom( 0, 0, 145, 161 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.ArrowR ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Armory_WeaponListWidget.__onClose = function ( f67_arg0 )
	f67_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f67_arg0.WeaponVariantListWidget:close() --[[ @ 0]]
	f67_arg0.weaponCategoryList:close() --[[ @ 0]]
	f67_arg0.PCArrowL:close() --[[ @ 0]]
	f67_arg0.PCArrowR:close() --[[ @ 0]]
	f67_arg0.weaponList:close() --[[ @ 0]]
	f67_arg0.ArrowL:close() --[[ @ 0]]
	f67_arg0.ArrowR:close() --[[ @ 0]]
end
 --[[ @ 0]]
