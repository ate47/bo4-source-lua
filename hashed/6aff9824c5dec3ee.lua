-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/buttonprogressring" ) --[[ @ 0]]
require( "x64:ef0585bf703baa8" ) --[[ @ 0]]

CoD.WZHoldButtonPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WZHoldButtonPrompt.__defaultWidth = 89 --[[ @ 0]]
CoD.WZHoldButtonPrompt.__defaultHeight = 42 --[[ @ 0]]
CoD.WZHoldButtonPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WZHoldButtonPrompt ) --[[ @ 0]]
	self.id = "WZHoldButtonPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ButtonProgressRing = CoD.ButtonProgressRing.new( f1_arg0, f1_arg1, 0.5, 0.5, -21, 21, 0.5, 0.5, -21, 21 ) --[[ @ 0]]
	ButtonProgressRing:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	ButtonProgressRing:setScale( 0.7, 0.7 ) --[[ @ 0]]
	ButtonProgressRing.progressRing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ButtonProgressRing ) --[[ @ 0]]
	self.ButtonProgressRing = ButtonProgressRing --[[ @ 0]]
	
	local ControllerDependentTextBox = CoD.ControllerDependent_TextBoxLargeGamepad.new( f1_arg0, f1_arg1, 0.5, 0.5, -44.5, 44.5, 0.5, 0.5, -11, 11 ) --[[ @ 0]]
	ControllerDependentTextBox.KBMText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+activate}]" ) ) --[[ @ 0]]
	ControllerDependentTextBox.KBMText:setLetterSpacing( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setText( CoD.BaseUtility.AlreadyLocalized( "[{+usereload}]" ) ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setLetterSpacing( 0 ) --[[ @ 0]]
	ControllerDependentTextBox.GamepadText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( ControllerDependentTextBox ) --[[ @ 0]]
	self.ControllerDependentTextBox = ControllerDependentTextBox --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "HideHold",
			condition = function ( menu, element, event )
				return true
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f5_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = self --[[ @ 0]]
	local f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5.LastInput, function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "PlayerSettingsUpdate", function ( model )
		local f7_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "PlayerSettingsUpdate", "warzone_instant_pickups" ) then
			UpdateSelfState( self, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WZHoldButtonPrompt.__resetProperties = function ( f8_arg0 )
	f8_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
	f8_arg0.ButtonProgressRing:completeAnimation() --[[ @ 0]]
	f8_arg0.ControllerDependentTextBox:setLeftRight( 0.5, 0.5, -44.5, 44.5 ) --[[ @ 0]]
	f8_arg0.ControllerDependentTextBox:setTopBottom( 0.5, 0.5, -11, 11 ) --[[ @ 0]]
	f8_arg0.ButtonProgressRing:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WZHoldButtonPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f10_arg0.ButtonProgressRing:completeAnimation() --[[ @ 0]]
			f10_arg0.ButtonProgressRing:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.ButtonProgressRing ) --[[ @ 0]]
			f10_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f10_arg0.ControllerDependentTextBox:setLeftRight( 0.5, 0.5, -49.5, 39.5 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	},
	HideHold = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f11_arg0.ButtonProgressRing:completeAnimation() --[[ @ 0]]
			f11_arg0.ButtonProgressRing:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.ButtonProgressRing ) --[[ @ 0]]
			f11_arg0.ControllerDependentTextBox:completeAnimation() --[[ @ 0]]
			f11_arg0.ControllerDependentTextBox:setTopBottom( 0.5, 0.5, -16, 16 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.ControllerDependentTextBox ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WZHoldButtonPrompt.__onClose = function ( f12_arg0 )
	f12_arg0.ButtonProgressRing:close() --[[ @ 0]]
	f12_arg0.ControllerDependentTextBox:close() --[[ @ 0]]
end
 --[[ @ 0]]
