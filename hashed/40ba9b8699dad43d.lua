-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/cac/weaponattributes" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directordividerwithgradient" ) --[[ @ 0]]
require( "x64:3eb274d1dc908cc6" ) --[[ @ 0]]
require( "x64:1dd2fb2034a0f264" ) --[[ @ 0]]

CoD.BountyHunterPackagePreview = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BountyHunterPackagePreview.__defaultWidth = 380 --[[ @ 0]]
CoD.BountyHunterPackagePreview.__defaultHeight = 765 --[[ @ 0]]
CoD.BountyHunterPackagePreview.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.BountyHunterPackagePreview ) --[[ @ 0]]
	self.id = "BountyHunterPackagePreview" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setRGB( 0.51, 0.51, 0.51 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local GridTiled = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	GridTiled:setAlpha( 0.14 ) --[[ @ 0]]
	GridTiled:setScale( 1.01, 1.01 ) --[[ @ 0]]
	GridTiled:setImage( RegisterImage( @"uie_ui_menu_store_bg_grid" ) ) --[[ @ 0]]
	GridTiled:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	GridTiled:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	GridTiled:setupNineSliceShader( 64, 64 ) --[[ @ 0]]
	self:addElement( GridTiled ) --[[ @ 0]]
	self.GridTiled = GridTiled --[[ @ 0]]
	
	local Type = LUI.UIText.new( 0, 0, 12.5, 212.5, 0, 0, 14, 51 ) --[[ @ 0]]
	Type:setText( "" ) --[[ @ 0]]
	Type:setTTF( "default" ) --[[ @ 0]]
	Type:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Type:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Type ) --[[ @ 0]]
	self.Type = Type --[[ @ 0]]
	
	local Cost = LUI.UIText.new( 0, 0, 4.5, 373.5, 1, 1, -62, -45 ) --[[ @ 0]]
	Cost:setRGB( 0.54, 0.55, 0.58 ) --[[ @ 0]]
	Cost:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_3E14C0D42B565C03" ) ) --[[ @ 0]]
	Cost:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Cost:setLetterSpacing( 4 ) --[[ @ 0]]
	Cost:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( Cost ) --[[ @ 0]]
	self.Cost = Cost --[[ @ 0]]
	
	local SingleItemDivider = CoD.DirectorDividerWithGradient.new( f1_arg0, f1_arg1, 0, 0, 19.5, 367.5, 0, 0, 283, 290 ) --[[ @ 0]]
	SingleItemDivider:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SingleItemDivider ) --[[ @ 0]]
	self.SingleItemDivider = SingleItemDivider --[[ @ 0]]
	
	local SingleItemName = LUI.UIText.new( 0, 0, 17, 363, 0, 0, 248, 275 ) --[[ @ 0]]
	SingleItemName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	SingleItemName:setAlpha( 0 ) --[[ @ 0]]
	SingleItemName:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	SingleItemName:setLetterSpacing( 4 ) --[[ @ 0]]
	SingleItemName:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	SingleItemName:linkToElementModel( self, "item1.displayName", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			SingleItemName:setText( LocalizeToUpperString( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SingleItemName ) --[[ @ 0]]
	self.SingleItemName = SingleItemName --[[ @ 0]]
	
	local SingleItemDescription = LUI.UIText.new( 0, 0, 17, 363, 0, 0, 290, 310 ) --[[ @ 0]]
	SingleItemDescription:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	SingleItemDescription:setAlpha( 0 ) --[[ @ 0]]
	SingleItemDescription:setTTF( "dinnext_regular" ) --[[ @ 0]]
	SingleItemDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	SingleItemDescription:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	SingleItemDescription:linkToElementModel( self, "item1.description", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			SingleItemDescription:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SingleItemDescription ) --[[ @ 0]]
	self.SingleItemDescription = SingleItemDescription --[[ @ 0]]
	
	local CostSign = CoD.BountyHunterPreviewDollars.new( f1_arg0, f1_arg1, 0.5, 0.5, -182.5, -32.5, 1, 1, -41.5, -8.5 ) --[[ @ 0]]
	CostSign:linkToElementModel( self, nil, false, function ( model )
		CostSign:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CostSign ) --[[ @ 0]]
	self.CostSign = CostSign --[[ @ 0]]
	
	local SingleItemImage = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -190, 190, 0, 0, 21, 246 ) --[[ @ 0]]
	SingleItemImage:setAlpha( 0 ) --[[ @ 0]]
	SingleItemImage:setStretchedDimension( 6 ) --[[ @ 0]]
	SingleItemImage:linkToElementModel( self, "item1.imageLarge", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			SingleItemImage:setImage( CoD.BaseUtility.AlreadyRegisteredIfUserData( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SingleItemImage ) --[[ @ 0]]
	self.SingleItemImage = SingleItemImage --[[ @ 0]]
	
	local Item1 = CoD.BountyHunterPreviewMultiItems.new( f1_arg0, f1_arg1, 0, 0, 25, 355, 0, 0, 32.5, 352.5 ) --[[ @ 0]]
	Item1:linkToElementModel( self, nil, false, function ( model )
		Item1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Item1 ) --[[ @ 0]]
	self.Item1 = Item1 --[[ @ 0]]
	
	local VerticalAccentBL = LUI.UIImage.new( 0, 0, -4, 4, 1, 1, -14, -6 ) --[[ @ 0]]
	VerticalAccentBL:setAlpha( 0.2 ) --[[ @ 0]]
	VerticalAccentBL:setZRot( -90 ) --[[ @ 0]]
	VerticalAccentBL:setImage( RegisterImage( @"hash_2FE30A9AF719A400" ) ) --[[ @ 0]]
	VerticalAccentBL:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	VerticalAccentBL:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	VerticalAccentBL:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( VerticalAccentBL ) --[[ @ 0]]
	self.VerticalAccentBL = VerticalAccentBL --[[ @ 0]]
	
	local VerticalAccentBR = LUI.UIImage.new( 1, 1, -4, 4, 1, 1, -14, -6 ) --[[ @ 0]]
	VerticalAccentBR:setAlpha( 0.2 ) --[[ @ 0]]
	VerticalAccentBR:setZRot( 90 ) --[[ @ 0]]
	VerticalAccentBR:setImage( RegisterImage( @"hash_2FE30A9AF719A400" ) ) --[[ @ 0]]
	VerticalAccentBR:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	VerticalAccentBR:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	VerticalAccentBR:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( VerticalAccentBR ) --[[ @ 0]]
	self.VerticalAccentBR = VerticalAccentBR --[[ @ 0]]
	
	local VerticalAccentBL2 = LUI.UIImage.new( 0, 0, -4, 4, 0, 0, 6, 14 ) --[[ @ 0]]
	VerticalAccentBL2:setAlpha( 0.2 ) --[[ @ 0]]
	VerticalAccentBL2:setZRot( -90 ) --[[ @ 0]]
	VerticalAccentBL2:setImage( RegisterImage( @"hash_2FE30A9AF719A400" ) ) --[[ @ 0]]
	VerticalAccentBL2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	VerticalAccentBL2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	VerticalAccentBL2:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( VerticalAccentBL2 ) --[[ @ 0]]
	self.VerticalAccentBL2 = VerticalAccentBL2 --[[ @ 0]]
	
	local VerticalAccentBR2 = LUI.UIImage.new( 1, 1, -4, 4, 0, 0, 6, 14 ) --[[ @ 0]]
	VerticalAccentBR2:setAlpha( 0.2 ) --[[ @ 0]]
	VerticalAccentBR2:setZRot( 90 ) --[[ @ 0]]
	VerticalAccentBR2:setImage( RegisterImage( @"hash_2FE30A9AF719A400" ) ) --[[ @ 0]]
	VerticalAccentBR2:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	VerticalAccentBR2:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	VerticalAccentBR2:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( VerticalAccentBR2 ) --[[ @ 0]]
	self.VerticalAccentBR2 = VerticalAccentBR2 --[[ @ 0]]
	
	local CommonLineAccent01Btm = LUI.UIImage.new( -0.04, 1.04, 0, 0, 1, 1, -10, 6 ) --[[ @ 0]]
	CommonLineAccent01Btm:setAlpha( 0.5 ) --[[ @ 0]]
	CommonLineAccent01Btm:setImage( RegisterImage( @"uie_hud_common_line_accent01" ) ) --[[ @ 0]]
	CommonLineAccent01Btm:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	CommonLineAccent01Btm:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CommonLineAccent01Btm:setupNineSliceShader( 32, 16 ) --[[ @ 0]]
	self:addElement( CommonLineAccent01Btm ) --[[ @ 0]]
	self.CommonLineAccent01Btm = CommonLineAccent01Btm --[[ @ 0]]
	
	local CommonLineAccent01Top = LUI.UIImage.new( -0.04, 1.04, 0, 0, 0, 0, -7, 9 ) --[[ @ 0]]
	CommonLineAccent01Top:setAlpha( 0.5 ) --[[ @ 0]]
	CommonLineAccent01Top:setImage( RegisterImage( @"uie_hud_common_line_accent01" ) ) --[[ @ 0]]
	CommonLineAccent01Top:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	CommonLineAccent01Top:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	CommonLineAccent01Top:setupNineSliceShader( 32, 16 ) --[[ @ 0]]
	self:addElement( CommonLineAccent01Top ) --[[ @ 0]]
	self.CommonLineAccent01Top = CommonLineAccent01Top --[[ @ 0]]
	
	local DirectorDividerWithGradient = CoD.DirectorDividerWithGradient.new( f1_arg0, f1_arg1, 0, 0, 17, 239, 0, 0, 282, 289 ) --[[ @ 0]]
	DirectorDividerWithGradient:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
	DirectorDividerWithGradient:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DirectorDividerWithGradient ) --[[ @ 0]]
	self.DirectorDividerWithGradient = DirectorDividerWithGradient --[[ @ 0]]
	
	local WeaponAttributes = CoD.WeaponAttributes.new( f1_arg0, f1_arg1, 0.5, 0.5, -223.5, 221.5, 0, 0, 421.5, 671.5 ) --[[ @ 0]]
	WeaponAttributes:setAlpha( 0 ) --[[ @ 0]]
	WeaponAttributes:setScale( 0.88, 0.88 ) --[[ @ 0]]
	WeaponAttributes:linkToElementModel( self, "item1.weaponAttributes", false, function ( model )
		WeaponAttributes:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( WeaponAttributes ) --[[ @ 0]]
	self.WeaponAttributes = WeaponAttributes --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "NoItem",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathNil( self, f1_arg1, "item1" )
			end
		},
		{
			stateName = "WeaponNotSelected",
			condition = function ( menu, element, event )
				return CoD.BountyHunterUtility.IsPreviewPackageWeaponNotSelected( self )
			end
		},
		{
			stateName = "Weapon",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( self, f1_arg1, "item1.weaponAttributes.damage", 0 )
			end
		},
		{
			stateName = "SingleItem",
			condition = function ( menu, element, event )
				return CoD.BountyHunterUtility.IsPreviewPackageSingleItem( self )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "item1", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "item1"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "packageID", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "packageID"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "item1.weaponAttributes.damage", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "item1.weaponAttributes.damage"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "item2.displayName", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "item2.displayName"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "item2.trackTier", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "item2.trackTier"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "luielement.BountyHunterLoadout.currentPackage", function ( model )
		local f17_local0 = self --[[ @ 0]]
		CoD.BountyHunterUtility.SetPreviewedPackageFromCurrentModel( self, model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BountyHunterPackagePreview.__resetProperties = function ( f18_arg0 )
	f18_arg0.SingleItemImage:completeAnimation() --[[ @ 0]]
	f18_arg0.CostSign:completeAnimation() --[[ @ 0]]
	f18_arg0.SingleItemDescription:completeAnimation() --[[ @ 0]]
	f18_arg0.SingleItemName:completeAnimation() --[[ @ 0]]
	f18_arg0.SingleItemDivider:completeAnimation() --[[ @ 0]]
	f18_arg0.Cost:completeAnimation() --[[ @ 0]]
	f18_arg0.Type:completeAnimation() --[[ @ 0]]
	f18_arg0.Item1:completeAnimation() --[[ @ 0]]
	f18_arg0.WeaponAttributes:completeAnimation() --[[ @ 0]]
	f18_arg0.DirectorDividerWithGradient:completeAnimation() --[[ @ 0]]
	f18_arg0.SingleItemImage:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.CostSign:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.SingleItemDescription:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.SingleItemName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	f18_arg0.SingleItemName:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.SingleItemName:setZRot( 0 ) --[[ @ 0]]
	f18_arg0.SingleItemDivider:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.Cost:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.Type:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.Item1:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.WeaponAttributes:setAlpha( 0 ) --[[ @ 0]]
	f18_arg0.DirectorDividerWithGradient:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BountyHunterPackagePreview.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	NoItem = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f20_arg0.Type:completeAnimation() --[[ @ 0]]
			f20_arg0.Type:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Type ) --[[ @ 0]]
			f20_arg0.Cost:completeAnimation() --[[ @ 0]]
			f20_arg0.Cost:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Cost ) --[[ @ 0]]
			f20_arg0.SingleItemDivider:completeAnimation() --[[ @ 0]]
			f20_arg0.SingleItemDivider:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.SingleItemDivider ) --[[ @ 0]]
			f20_arg0.SingleItemName:completeAnimation() --[[ @ 0]]
			f20_arg0.SingleItemName:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.SingleItemName ) --[[ @ 0]]
			f20_arg0.SingleItemDescription:completeAnimation() --[[ @ 0]]
			f20_arg0.SingleItemDescription:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.SingleItemDescription ) --[[ @ 0]]
			f20_arg0.CostSign:completeAnimation() --[[ @ 0]]
			f20_arg0.CostSign:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.CostSign ) --[[ @ 0]]
			f20_arg0.SingleItemImage:completeAnimation() --[[ @ 0]]
			f20_arg0.SingleItemImage:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.SingleItemImage ) --[[ @ 0]]
		end
	},
	WeaponNotSelected = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f21_arg0.Cost:completeAnimation() --[[ @ 0]]
			f21_arg0.Cost:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Cost ) --[[ @ 0]]
			f21_arg0.SingleItemDivider:completeAnimation() --[[ @ 0]]
			f21_arg0.SingleItemDivider:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.SingleItemDivider ) --[[ @ 0]]
			f21_arg0.SingleItemName:completeAnimation() --[[ @ 0]]
			f21_arg0.SingleItemName:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.SingleItemName:setZRot( 90 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.SingleItemName ) --[[ @ 0]]
			f21_arg0.SingleItemDescription:completeAnimation() --[[ @ 0]]
			f21_arg0.SingleItemDescription:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.SingleItemDescription ) --[[ @ 0]]
			f21_arg0.CostSign:completeAnimation() --[[ @ 0]]
			f21_arg0.CostSign:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.CostSign ) --[[ @ 0]]
			f21_arg0.Item1:completeAnimation() --[[ @ 0]]
			f21_arg0.Item1:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Item1 ) --[[ @ 0]]
		end
	},
	Weapon = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f22_arg0.SingleItemDivider:completeAnimation() --[[ @ 0]]
			f22_arg0.SingleItemDivider:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.SingleItemDivider ) --[[ @ 0]]
			f22_arg0.SingleItemName:completeAnimation() --[[ @ 0]]
			f22_arg0.SingleItemName:setRGB( 0.78, 0.78, 0.78 ) --[[ @ 0]]
			f22_arg0.SingleItemName:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.SingleItemName:setAlignment( Enum[@"luialignment"][@"lui_alignment_bottom"] ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.SingleItemName ) --[[ @ 0]]
			f22_arg0.SingleItemDescription:completeAnimation() --[[ @ 0]]
			f22_arg0.SingleItemDescription:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.SingleItemDescription ) --[[ @ 0]]
			f22_arg0.SingleItemImage:completeAnimation() --[[ @ 0]]
			f22_arg0.SingleItemImage:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.SingleItemImage ) --[[ @ 0]]
			f22_arg0.DirectorDividerWithGradient:completeAnimation() --[[ @ 0]]
			f22_arg0.DirectorDividerWithGradient:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.DirectorDividerWithGradient ) --[[ @ 0]]
			f22_arg0.WeaponAttributes:completeAnimation() --[[ @ 0]]
			f22_arg0.WeaponAttributes:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.WeaponAttributes ) --[[ @ 0]]
		end
	},
	SingleItem = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f23_arg0.SingleItemDivider:completeAnimation() --[[ @ 0]]
			f23_arg0.SingleItemDivider:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.SingleItemDivider ) --[[ @ 0]]
			f23_arg0.SingleItemName:completeAnimation() --[[ @ 0]]
			f23_arg0.SingleItemName:setRGB( 0.78, 0.78, 0.78 ) --[[ @ 0]]
			f23_arg0.SingleItemName:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.SingleItemName ) --[[ @ 0]]
			f23_arg0.SingleItemDescription:completeAnimation() --[[ @ 0]]
			f23_arg0.SingleItemDescription:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.SingleItemDescription ) --[[ @ 0]]
			f23_arg0.SingleItemImage:completeAnimation() --[[ @ 0]]
			f23_arg0.SingleItemImage:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.SingleItemImage ) --[[ @ 0]]
			f23_arg0.DirectorDividerWithGradient:completeAnimation() --[[ @ 0]]
			f23_arg0.DirectorDividerWithGradient:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.DirectorDividerWithGradient ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BountyHunterPackagePreview.__onClose = function ( f24_arg0 )
	f24_arg0.SingleItemDivider:close() --[[ @ 0]]
	f24_arg0.SingleItemName:close() --[[ @ 0]]
	f24_arg0.SingleItemDescription:close() --[[ @ 0]]
	f24_arg0.CostSign:close() --[[ @ 0]]
	f24_arg0.SingleItemImage:close() --[[ @ 0]]
	f24_arg0.Item1:close() --[[ @ 0]]
	f24_arg0.DirectorDividerWithGradient:close() --[[ @ 0]]
	f24_arg0.WeaponAttributes:close() --[[ @ 0]]
end
 --[[ @ 0]]
