-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/vehiclehuds/agr/vhud_agr_reticle" ) --[[ @ 0]]
require( "x64:bf7ef70b7404b31" ) --[[ @ 0]]
require( "x64:e1ae605b30b1f72" ) --[[ @ 0]]

CoD.vhud_ai_tank_internal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_ai_tank_internal.__defaultWidth = 1920 --[[ @ 0]]
CoD.vhud_ai_tank_internal.__defaultHeight = 1080 --[[ @ 0]]
CoD.vhud_ai_tank_internal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_ai_tank_internal ) --[[ @ 0]]
	self.id = "vhud_ai_tank_internal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local vignetteCenter = LUI.UIImage.new( 0, 1, -300, 300, 0, 1, -188, 188 ) --[[ @ 0]]
	vignetteCenter:setAlpha( 0.6 ) --[[ @ 0]]
	vignetteCenter:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_agr_backgroundtint" ) ) --[[ @ 0]]
	self:addElement( vignetteCenter ) --[[ @ 0]]
	self.vignetteCenter = vignetteCenter --[[ @ 0]]
	
	local Vignette = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Vignette:setAlpha( 0.85 ) --[[ @ 0]]
	Vignette:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_agr_textureoverlayvignette" ) ) --[[ @ 0]]
	self:addElement( Vignette ) --[[ @ 0]]
	self.Vignette = Vignette --[[ @ 0]]
	
	local vhudagrreticle = CoD.vhud_agr_reticle.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	vhudagrreticle:mergeStateConditions( {
		{
			stateName = "Zoom",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "zoomed" )
			end
		}
	} ) --[[ @ 0]]
	vhudagrreticle:linkToElementModel( vhudagrreticle, "zoomed", true, function ( model )
		f1_arg0:updateElementState( vhudagrreticle, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "zoomed"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudagrreticle:linkToElementModel( self, nil, false, function ( model )
		vhudagrreticle:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudagrreticle:registerEventHandler( "menu_loaded", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f5_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f5_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		PlayClipOnElement( self, {
			elementName = "vhudagrreticle",
			clipName = "StartUp"
		}, f1_arg1 ) --[[ @ 0]]
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	self:addElement( vhudagrreticle ) --[[ @ 0]]
	self.vhudagrreticle = vhudagrreticle --[[ @ 0]]
	
	local vignetteRight = LUI.UIImage.new( 1, 1, -450, 0, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	vignetteRight:setAlpha( 0.2 ) --[[ @ 0]]
	vignetteRight:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_agr_vignette" ) ) --[[ @ 0]]
	self:addElement( vignetteRight ) --[[ @ 0]]
	self.vignetteRight = vignetteRight --[[ @ 0]]
	
	local vignetteLeft = LUI.UIImage.new( 0, 0, 0, 450, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	vignetteLeft:setAlpha( 0.2 ) --[[ @ 0]]
	vignetteLeft:setYRot( -180 ) --[[ @ 0]]
	vignetteLeft:setImage( RegisterImage( @"uie_t7_cp_hud_vehicle_agr_vignette" ) ) --[[ @ 0]]
	self:addElement( vignetteLeft ) --[[ @ 0]]
	self.vignetteLeft = vignetteLeft --[[ @ 0]]
	
	local vhudagrButtonContainer = CoD.vhud_ai_tank_button_layout.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	vhudagrButtonContainer:linkToElementModel( self, "bindings", false, function ( model )
		vhudagrButtonContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudagrButtonContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f7_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f7_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToSafeArea( element, f1_arg1 ) --[[ @ 0]]
		if not f7_local0 then
			f7_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	self:addElement( vhudagrButtonContainer ) --[[ @ 0]]
	self.vhudagrButtonContainer = vhudagrButtonContainer --[[ @ 0]]
	
	local aitankhealthbar = CoD.ai_tank_health_bar.new( f1_arg0, f1_arg1, 0, 0, 225, 634, 0, 0, 517.5, 562.5 ) --[[ @ 0]]
	aitankhealthbar:setZRot( -90 ) --[[ @ 0]]
	aitankhealthbar:linkToElementModel( self, nil, false, function ( model )
		aitankhealthbar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( aitankhealthbar ) --[[ @ 0]]
	self.aitankhealthbar = aitankhealthbar --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_ai_tank_internal.__onClose = function ( f9_arg0 )
	f9_arg0.vhudagrreticle:close() --[[ @ 0]]
	f9_arg0.vhudagrButtonContainer:close() --[[ @ 0]]
	f9_arg0.aitankhealthbar:close() --[[ @ 0]]
end
 --[[ @ 0]]
