-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "x64:18d52912a320cd2e" ) --[[ @ 0]]
require( "x64:135152a333fa2552" ) --[[ @ 0]]
require( "x64:58e954fb331b89f8" ) --[[ @ 0]]
require( "x64:5d7a5c3c600baead" ) --[[ @ 0]]
require( "x64:5892762a382e42c9" ) --[[ @ 0]]
require( "x64:5d55d115474e5d67" ) --[[ @ 0]]
require( "x64:6e104ba18fbd90a8" ) --[[ @ 0]]
require( "x64:63e25c2bb91944f2" ) --[[ @ 0]]
require( "x64:1574bf6c47de6a59" ) --[[ @ 0]]

CoD.PlayerWidgetWZ = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PlayerWidgetWZ.__defaultWidth = 278 --[[ @ 0]]
CoD.PlayerWidgetWZ.__defaultHeight = 112 --[[ @ 0]]
CoD.PlayerWidgetWZ.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "hudItems.lastStand.progress", 0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg1, "hudItems.lastStand.beingRevived", 0 ) --[[ @ 0]]
	self:setClass( CoD.PlayerWidgetWZ ) --[[ @ 0]]
	self.id = "PlayerWidgetWZ" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0, 0, 15, 315, 0, 0, 26.5, 92.5 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local GlowSpecialist = LUI.UIImage.new( 0, 0, 19, 107, 0, 0, -4, 112 ) --[[ @ 0]]
	GlowSpecialist:setAlpha( 0.12 ) --[[ @ 0]]
	GlowSpecialist:setImage( RegisterImage( @"hash_2D1DEF58D810CED5" ) ) --[[ @ 0]]
	self:addElement( GlowSpecialist ) --[[ @ 0]]
	self.GlowSpecialist = GlowSpecialist --[[ @ 0]]
	
	local PanelDark = LUI.UIImage.new( 0, 0, 17, 178, 0, 0, 26, 90 ) --[[ @ 0]]
	PanelDark:setRGB( 0.18, 0.17, 0.16 ) --[[ @ 0]]
	PanelDark:setAlpha( 0.94 ) --[[ @ 0]]
	self:addElement( PanelDark ) --[[ @ 0]]
	self.PanelDark = PanelDark --[[ @ 0]]
	
	local PanelLight = LUI.UIImage.new( 0, 0, 178.5, 313.5, 0, 0, 26.5, 88.5 ) --[[ @ 0]]
	PanelLight:setRGB( 0.22, 0.21, 0.19 ) --[[ @ 0]]
	PanelLight:setAlpha( 0.75 ) --[[ @ 0]]
	self:addElement( PanelLight ) --[[ @ 0]]
	self.PanelLight = PanelLight --[[ @ 0]]
	
	local AmmoHeal_Prompt = CoD.AmmoWidget_Prompt.new( f1_arg0, f1_arg1, 0, 0, 174.5, 238.5, 0, 0, 88.5, 100.5 ) --[[ @ 0]]
	AmmoHeal_Prompt:mergeStateConditions( {
		{
			stateName = "LowHealth",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsClientModelValueGreaterThan( f1_arg1, "health.healthValue", 0 ) and CoD.ModelUtility.IsClientModelValueLessThanOrEqualTo( f1_arg1, "health.healthValue", 75 )
			end
		}
	} ) --[[ @ 0]]
	local Armor = AmmoHeal_Prompt --[[ @ 0]]
	local HealthValue = AmmoHeal_Prompt.subscribeToModel --[[ @ 0]]
	local CharacterPortrait2 = Engine[@"getmodelforclient"]( Engine[@"getclientnum"]( f1_arg1 ) ) --[[ @ 0]]
	HealthValue( Armor, CharacterPortrait2["health.healthValue"], function ( f3_arg0 )
		f1_arg0:updateElementState( AmmoHeal_Prompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "health.healthValue"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AmmoHeal_Prompt:setAlpha( 0 ) --[[ @ 0]]
	AmmoHeal_Prompt.PromptText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_38CADD3D78C04519" ) ) --[[ @ 0]]
	self:addElement( AmmoHeal_Prompt ) --[[ @ 0]]
	self.AmmoHeal_Prompt = AmmoHeal_Prompt --[[ @ 0]]
	
	HealthValue = CoD.PlayerWidgetWZHealth.new( f1_arg0, f1_arg1, 0, 0, 86.5, 174.5, 0, 0, 24, 96 ) --[[ @ 0]]
	HealthValue:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			HealthValue:setModel( f4_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( HealthValue ) --[[ @ 0]]
	self.HealthValue = HealthValue --[[ @ 0]]
	
	Armor = CoD.PlayerWidgetWZArmor.new( f1_arg0, f1_arg1, 0, 0, 249, 313, 0, 0, 25, 89 ) --[[ @ 0]]
	Armor:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Armor:setModel( f5_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Armor ) --[[ @ 0]]
	self.Armor = Armor --[[ @ 0]]
	
	CharacterPortrait2 = CoD.AmmoWidget_CharacterPortrait.new( f1_arg0, f1_arg1, 0, 0, 16, 110, 0, 0, 24, 92 ) --[[ @ 0]]
	CharacterPortrait2:setScale( 1.3, 1.3 ) --[[ @ 0]]
	CharacterPortrait2:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			CharacterPortrait2:setModel( f6_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CharacterPortrait2 ) --[[ @ 0]]
	self.CharacterPortrait2 = CharacterPortrait2 --[[ @ 0]]
	
	local LEDarmor = LUI.UIImage.new( 0, 0, 246, 314, 0, 0, 23, 91 ) --[[ @ 0]]
	LEDarmor:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LEDarmor:setAlpha( 0.2 ) --[[ @ 0]]
	LEDarmor:setImage( RegisterImage( @"hash_59715DAADF2D1074" ) ) --[[ @ 0]]
	self:addElement( LEDarmor ) --[[ @ 0]]
	self.LEDarmor = LEDarmor --[[ @ 0]]
	
	local LEDplayer = LUI.UIImage.new( 0, 0, 3.5, 183.5, 0, 0, 8, 108 ) --[[ @ 0]]
	LEDplayer:setRGB( 0, 0, 0 ) --[[ @ 0]]
	LEDplayer:setAlpha( 0.2 ) --[[ @ 0]]
	LEDplayer:setImage( RegisterImage( @"hash_BA2206DF71A2020" ) ) --[[ @ 0]]
	self:addElement( LEDplayer ) --[[ @ 0]]
	self.LEDplayer = LEDplayer --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 0, 1.5, 329.5, 0, 0, 8, 108 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"hash_3BA5A94668BDF7FD" ) ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local AmmoWidgetMPAbilityItem = CoD.AmmoWidgetWZ_AbilityItem_Heal.new( f1_arg0, f1_arg1, 0, 0, 178, 250, 0, 0, 27.5, 86.5 ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem.HeroAbilityUseString.KBMText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_234175BD548C4C21" ) ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem.HeroAbilityUseString.GamepadText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_234175BD548C4C21" ) ) --[[ @ 0]]
	AmmoWidgetMPAbilityItem:subscribeToGlobalModel( f1_arg1, "PlayerAbilities", "playerGadget1", function ( model )
		AmmoWidgetMPAbilityItem:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AmmoWidgetMPAbilityItem ) --[[ @ 0]]
	self.AmmoWidgetMPAbilityItem = AmmoWidgetMPAbilityItem --[[ @ 0]]
	
	local InventoryEquipmentSmall2 = CoD.WarzoneContextualArmorStashItems.new( f1_arg0, f1_arg1, 0, 0, 101, 393, 0, 0, -78.5, 17.5 ) --[[ @ 0]]
	InventoryEquipmentSmall2.InventoryEquipmentLarge:setFilter( function ( f8_arg0 )
		local f8_local0 --[[ @ 0]]
		if f8_arg0.availableAction:get() ~= CoD.WZUtility.ItemAvailableAction.REPAIR or f8_arg0.quickEquip:get() ~= 1 then
			f8_local0 = false --[[ @ 0]]
		else
			f8_local0 = true --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall2.InventoryEquipmentLarge:setDataSource( "WarzoneShards" ) --[[ @ 0]]
	InventoryEquipmentSmall2.InventoryEquipmentSmall:setFilter( function ( f9_arg0 )
		local f9_local0 --[[ @ 0]]
		if f9_arg0.availableAction:get() ~= CoD.WZUtility.ItemAvailableAction.REPAIR or f9_arg0.quickEquip:get() ~= 1 then
			f9_local0 = false --[[ @ 0]]
		else
			f9_local0 = true --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall2.InventoryEquipmentSmall:setDataSource( "WarzoneShards" ) --[[ @ 0]]
	InventoryEquipmentSmall2.InventoryEquipmentStashCount:setDataSource( "WarzoneShards" ) --[[ @ 0]]
	self:addElement( InventoryEquipmentSmall2 ) --[[ @ 0]]
	self.InventoryEquipmentSmall2 = InventoryEquipmentSmall2 --[[ @ 0]]
	
	local InventoryEquipmentSmall = CoD.WarzoneContextualExtraItems_LeftAlign.new( f1_arg0, f1_arg1, 0, 0, 34, 326, 0, 0, -78.5, 17.5 ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentSmall:setFilter( function ( f10_arg0 )
		local f10_local0 --[[ @ 0]]
		if f10_arg0.type:get() ~= "health" or f10_arg0.equipped:get() ~= 0 or f10_arg0.quickEquip:get() ~= 1 then
			f10_local0 = false --[[ @ 0]]
		else
			f10_local0 = true --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentSmall:setDataSource( "WarzoneInventory" ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentLarge:setFilter( function ( f11_arg0 )
		local f11_local0 --[[ @ 0]]
		if f11_arg0.type:get() ~= "health" or f11_arg0.equipped:get() ~= 0 or f11_arg0.quickEquip:get() ~= 1 then
			f11_local0 = false --[[ @ 0]]
		else
			f11_local0 = true --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentLarge:setDataSource( "WarzoneInventory" ) --[[ @ 0]]
	InventoryEquipmentSmall:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "health", function ( model )
		InventoryEquipmentSmall.QuickInventoryItemCurrent:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	InventoryEquipmentSmall:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "health0", function ( model )
		InventoryEquipmentSmall.QuickInventoryItemMid:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	InventoryEquipmentSmall:subscribeToGlobalModel( f1_arg1, "WarzoneInventoryGlobal", "health1", function ( model )
		InventoryEquipmentSmall.QuickInventoryItemTop:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( InventoryEquipmentSmall ) --[[ @ 0]]
	self.InventoryEquipmentSmall = InventoryEquipmentSmall --[[ @ 0]]
	
	local PlayerWidgetWZBleedIndicator = CoD.PlayerWidgetWZBleedIndicator.new( f1_arg0, f1_arg1, 0, 0, 84, 179, 0, 0, 67.5, 85.5 ) --[[ @ 0]]
	self:addElement( PlayerWidgetWZBleedIndicator ) --[[ @ 0]]
	self.PlayerWidgetWZBleedIndicator = PlayerWidgetWZBleedIndicator --[[ @ 0]]
	
	local DemoPip = CoD.DemoPip.new( f1_arg0, f1_arg1, 0, 0, 19, 24, 0, 0, 100.5, 105.5 ) --[[ @ 0]]
	self:addElement( DemoPip ) --[[ @ 0]]
	self.DemoPip = DemoPip --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HiddenHealth",
			condition = function ( menu, element, event )
				return CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHidePlayerHealthUI", "warzoneHidePlayerHealth" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local17 = self --[[ @ 0]]
	local f1_local18 = self.subscribeToModel --[[ @ 0]]
	local f1_local19 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local18( f1_local17, f1_local19.PlayerSettingsUpdate, function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "WarzoneInventory", "isOpen", function ( model )
		local f17_local0 = self --[[ @ 0]]
		if CoD.WZUtility.IsInventoryOpen( f1_arg1 ) then
			CoD.WZUtility.CloseQuickAccessInventory( f1_arg0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "hudItems.inventory.consumedItem", function ( model )
		local f18_local0 = self --[[ @ 0]]
		UpdateAllMenuButtonPrompts( f1_arg0, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Armor.id = "Armor" --[[ @ 0]]
	InventoryEquipmentSmall2.id = "InventoryEquipmentSmall2" --[[ @ 0]]
	InventoryEquipmentSmall.id = "InventoryEquipmentSmall" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local18 = self --[[ @ 0]]
	CoD.WZUtility.AddQuickAccessInventoryWidget( f1_arg0, f1_arg1, InventoryEquipmentSmall2, 2, false ) --[[ @ 0]]
	CoD.WZUtility.AddQuickAccessInventoryWidget( f1_arg0, f1_arg1, InventoryEquipmentSmall, 1, true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.PlayerWidgetWZ.__resetProperties = function ( f19_arg0 )
	f19_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
	f19_arg0.DemoPip:completeAnimation() --[[ @ 0]]
	f19_arg0.PlayerWidgetWZBleedIndicator:completeAnimation() --[[ @ 0]]
	f19_arg0.Frame:completeAnimation() --[[ @ 0]]
	f19_arg0.LEDplayer:completeAnimation() --[[ @ 0]]
	f19_arg0.LEDarmor:completeAnimation() --[[ @ 0]]
	f19_arg0.CharacterPortrait2:completeAnimation() --[[ @ 0]]
	f19_arg0.Armor:completeAnimation() --[[ @ 0]]
	f19_arg0.HealthValue:completeAnimation() --[[ @ 0]]
	f19_arg0.AmmoHeal_Prompt:completeAnimation() --[[ @ 0]]
	f19_arg0.PanelLight:completeAnimation() --[[ @ 0]]
	f19_arg0.PanelDark:completeAnimation() --[[ @ 0]]
	f19_arg0.GlowSpecialist:completeAnimation() --[[ @ 0]]
	f19_arg0.Blur:completeAnimation() --[[ @ 0]]
	f19_arg0.AmmoWidgetMPAbilityItem:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.DemoPip:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.PlayerWidgetWZBleedIndicator:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.Frame:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.LEDplayer:setAlpha( 0.2 ) --[[ @ 0]]
	f19_arg0.LEDarmor:setAlpha( 0.2 ) --[[ @ 0]]
	f19_arg0.CharacterPortrait2:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.Armor:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.HealthValue:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.AmmoHeal_Prompt:setAlpha( 0 ) --[[ @ 0]]
	f19_arg0.PanelLight:setAlpha( 0.75 ) --[[ @ 0]]
	f19_arg0.PanelDark:setAlpha( 0.94 ) --[[ @ 0]]
	f19_arg0.GlowSpecialist:setAlpha( 0.12 ) --[[ @ 0]]
	f19_arg0.Blur:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerWidgetWZ.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	HiddenHealth = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 14 ) --[[ @ 0]]
			f21_arg0.Blur:completeAnimation() --[[ @ 0]]
			f21_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Blur ) --[[ @ 0]]
			f21_arg0.GlowSpecialist:completeAnimation() --[[ @ 0]]
			f21_arg0.GlowSpecialist:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.GlowSpecialist ) --[[ @ 0]]
			f21_arg0.PanelDark:completeAnimation() --[[ @ 0]]
			f21_arg0.PanelDark:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.PanelDark ) --[[ @ 0]]
			f21_arg0.PanelLight:completeAnimation() --[[ @ 0]]
			f21_arg0.PanelLight:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.PanelLight ) --[[ @ 0]]
			f21_arg0.AmmoHeal_Prompt:completeAnimation() --[[ @ 0]]
			f21_arg0.AmmoHeal_Prompt:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.AmmoHeal_Prompt ) --[[ @ 0]]
			f21_arg0.HealthValue:completeAnimation() --[[ @ 0]]
			f21_arg0.HealthValue:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.HealthValue ) --[[ @ 0]]
			f21_arg0.Armor:completeAnimation() --[[ @ 0]]
			f21_arg0.Armor:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Armor ) --[[ @ 0]]
			f21_arg0.CharacterPortrait2:completeAnimation() --[[ @ 0]]
			f21_arg0.CharacterPortrait2:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.CharacterPortrait2 ) --[[ @ 0]]
			f21_arg0.LEDarmor:completeAnimation() --[[ @ 0]]
			f21_arg0.LEDarmor:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.LEDarmor ) --[[ @ 0]]
			f21_arg0.LEDplayer:completeAnimation() --[[ @ 0]]
			f21_arg0.LEDplayer:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.LEDplayer ) --[[ @ 0]]
			f21_arg0.Frame:completeAnimation() --[[ @ 0]]
			f21_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Frame ) --[[ @ 0]]
			f21_arg0.AmmoWidgetMPAbilityItem:completeAnimation() --[[ @ 0]]
			f21_arg0.AmmoWidgetMPAbilityItem:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.AmmoWidgetMPAbilityItem ) --[[ @ 0]]
			f21_arg0.PlayerWidgetWZBleedIndicator:completeAnimation() --[[ @ 0]]
			f21_arg0.PlayerWidgetWZBleedIndicator:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.PlayerWidgetWZBleedIndicator ) --[[ @ 0]]
			f21_arg0.DemoPip:completeAnimation() --[[ @ 0]]
			f21_arg0.DemoPip:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.DemoPip ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PlayerWidgetWZ.__onClose = function ( f22_arg0 )
	f22_arg0.AmmoHeal_Prompt:close() --[[ @ 0]]
	f22_arg0.HealthValue:close() --[[ @ 0]]
	f22_arg0.Armor:close() --[[ @ 0]]
	f22_arg0.CharacterPortrait2:close() --[[ @ 0]]
	f22_arg0.AmmoWidgetMPAbilityItem:close() --[[ @ 0]]
	f22_arg0.InventoryEquipmentSmall2:close() --[[ @ 0]]
	f22_arg0.InventoryEquipmentSmall:close() --[[ @ 0]]
	f22_arg0.PlayerWidgetWZBleedIndicator:close() --[[ @ 0]]
	f22_arg0.DemoPip:close() --[[ @ 0]]
end
 --[[ @ 0]]
