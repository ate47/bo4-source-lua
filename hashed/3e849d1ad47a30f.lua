-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:325eec9c0fe7758" ) --[[ @ 0]]
require( "x64:21744d99b88fcb45" ) --[[ @ 0]]
require( "x64:3c0436d48eab47f9" ) --[[ @ 0]]
require( "x64:2435be124ae6695" ) --[[ @ 0]]

CoD.WarzoneQuickInventoryItem = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.__defaultWidth = 70 --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.__defaultHeight = 70 --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneQuickInventoryItem ) --[[ @ 0]]
	self.id = "WarzoneQuickInventoryItem" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CycleBackground = LUI.UIImage.new( 0, 0, 0, 71, 0, 0, -2, 75 ) --[[ @ 0]]
	CycleBackground:setRGB( 0.37, 0.37, 0.35 ) --[[ @ 0]]
	CycleBackground:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CycleBackground ) --[[ @ 0]]
	self.CycleBackground = CycleBackground --[[ @ 0]]
	
	local ActiveBG = LUI.UIImage.new( 0.5, 0.5, -44, 44, 0.5, 0.5, -44.5, 43.5 ) --[[ @ 0]]
	ActiveBG:setRGB( ColorSet.T8__OCHRE.r, ColorSet.T8__OCHRE.g, ColorSet.T8__OCHRE.b ) --[[ @ 0]]
	ActiveBG:setAlpha( 0 ) --[[ @ 0]]
	ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
	ActiveBG:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_qe_glow" ) ) --[[ @ 0]]
	ActiveBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	ActiveBG:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ActiveBG ) --[[ @ 0]]
	self.ActiveBG = ActiveBG --[[ @ 0]]
	
	local MidArrow = CoD.WarzoneContextualExtraItemsArrow.new( f1_arg0, f1_arg1, 0, 0, 26, 42, 0, 0, 62, 78 ) --[[ @ 0]]
	MidArrow:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	MidArrow:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	MidArrow:setAlpha( 0 ) --[[ @ 0]]
	MidArrow:setZRot( -90 ) --[[ @ 0]]
	self:addElement( MidArrow ) --[[ @ 0]]
	self.MidArrow = MidArrow --[[ @ 0]]
	
	local Button = CoD.WarzoneInventoryMenuItemSmall_Internal_QE.new( f1_arg0, f1_arg1, 0.5, 0.5, -44, 44, 0.5, 0.5, -45, 43 ) --[[ @ 0]]
	Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
	Button:linkToElementModel( self, nil, false, function ( model )
		Button:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Button:linkToElementModel( Button, "id", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Button:linkToElementModel( Button, "availableAction", true, function ( model, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Button:linkToElementModel( Button, "type", true, function ( model, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local SquarePrompt = Button --[[ @ 0]]
	local ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	local FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["hudItems.inventory.open"], function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f1_arg1 ) ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound.isInVehicle, function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["vehicle.seatOccupantClientNum.0"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["vehicle.seatOccupantClientNum.1"], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["vehicle.seatOccupantClientNum.2"], function ( f11_arg0, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["vehicle.seatOccupantClientNum.3"], function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	SquarePrompt = Button --[[ @ 0]]
	ConsumedProgress = Button.subscribeToModel --[[ @ 0]]
	FocusSound = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	ConsumedProgress( SquarePrompt, FocusSound["vehicle.seatOccupantClientNum.4"], function ( f13_arg0, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Button:linkToElementModel( Button, "castTime", true, function ( model, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Button:registerEventHandler( "gain_focus", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f15_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f15_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		return f15_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Button, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "killstreak" ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, true ) --[[ @ 0]]
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			BlockGameFromKeyEvent( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "type", "killstreak" ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 1000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 1000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 2000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 1500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 3000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 2000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 4000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 2500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 5000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 3000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_7A45793735D89BB3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 6000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.ATTACH ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_41F7289BC37F8FA5", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return true
		elseif not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.SWAP ) and CoD.WZUtility.IsQuickInventoryOpen( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_918999DDF357263", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.IsQuickInventoryOpen( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.CONSUME ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_11B824FEE55364A2", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return true
		elseif CoD.WZUtility.IsQuickInventoryOpen( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	Button:linkToElementModel( self, "name", true, function ( model )
		local f18_local0 = Button --[[ @ 0]]
		CoD.WZUtility.UpdateSelectedItemName( f1_arg0, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Button ) --[[ @ 0]]
	self.Button = Button --[[ @ 0]]
	
	ConsumedProgress = LUI.UIImage.new( 0.5, 0.5, -25, 25, 0.5, 0.5, -24, 24 ) --[[ @ 0]]
	ConsumedProgress:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ConsumedProgress:setAlpha( 0.8 ) --[[ @ 0]]
	ConsumedProgress:setScale( 1.26, 1.26 ) --[[ @ 0]]
	ConsumedProgress:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	ConsumedProgress:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ConsumedProgress:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	ConsumedProgress:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	ConsumedProgress:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	ConsumedProgress:linkToElementModel( self, "endStartFraction", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			ConsumedProgress:setShaderVector( 0, CoD.GetVectorComponentFromString( f19_local0, 1 ), CoD.GetVectorComponentFromString( f19_local0, 2 ), CoD.GetVectorComponentFromString( f19_local0, 3 ), CoD.GetVectorComponentFromString( f19_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ConsumedProgress ) --[[ @ 0]]
	self.ConsumedProgress = ConsumedProgress --[[ @ 0]]
	
	SquarePrompt = CoD.WarzoneQuickInventoryUsePrompt.new( f1_arg0, f1_arg1, 0.5, 0.5, -75, 75, 0, 0, -36, 0 ) --[[ @ 0]]
	SquarePrompt:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SquarePrompt ) --[[ @ 0]]
	self.SquarePrompt = SquarePrompt --[[ @ 0]]
	
	FocusSound = LUI.UIElement.new( 0, 0, 95.5, 127.5, 0, 0, 55.5, 87.5 ) --[[ @ 0]]
	self:addElement( FocusSound ) --[[ @ 0]]
	self.FocusSound = FocusSound --[[ @ 0]]
	
	local Bar = LUI.UIImage.new( 0, 0, 22, 46, 0, 0, 46, 78 ) --[[ @ 0]]
	Bar:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_qe_selected_bar" ) ) --[[ @ 0]]
	Bar:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Bar ) --[[ @ 0]]
	self.Bar = Bar --[[ @ 0]]
	
	local EMP = CoD.Warzone_EMP_QuickEquip.new( f1_arg0, f1_arg1, 0, 0, -13, 75, 0, 0, -6.5, 77.5 ) --[[ @ 0]]
	self:addElement( EMP ) --[[ @ 0]]
	self.EMP = EMP --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Empty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE )
			end
		},
		{
			stateName = "CycleQuickEquip",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( self, f1_arg1, "cycle", 1 )
			end
		},
		{
			stateName = "RightScreenEdge",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "type", "attachment" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "id", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "id"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "cycle", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "cycle"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "type", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "type"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "childFocusGained", function ( element )
		CoD.WZUtility.ResetQuickInventoryAutoCloseTimer( f1_arg0, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	if CoD.isPC then
		MidArrow.id = "MidArrow" --[[ @ 0]]
	end
	Button.id = "Button" --[[ @ 0]]
	SquarePrompt:appendEventHandler( "menu_loaded", function ()
		SquarePrompt:setModel( f1_arg0.buttonModel, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SquarePrompt.id = "SquarePrompt" --[[ @ 0]]
	self.__defaultFocus = Button --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.__resetProperties = function ( f30_arg0 )
	f30_arg0.Bar:completeAnimation() --[[ @ 0]]
	f30_arg0.Button:completeAnimation() --[[ @ 0]]
	f30_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
	f30_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
	f30_arg0.FocusSound:completeAnimation() --[[ @ 0]]
	f30_arg0.ConsumedProgress:completeAnimation() --[[ @ 0]]
	f30_arg0.MidArrow:completeAnimation() --[[ @ 0]]
	f30_arg0.CycleBackground:completeAnimation() --[[ @ 0]]
	f30_arg0.Bar:setTopBottom( 0, 0, 46, 78 ) --[[ @ 0]]
	f30_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
	f30_arg0.Bar:setScale( 1, 1 ) --[[ @ 0]]
	f30_arg0.Button:setAlpha( 1 ) --[[ @ 0]]
	f30_arg0.Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
	f30_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
	f30_arg0.ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
	f30_arg0.SquarePrompt:setLeftRight( 0.5, 0.5, -75, 75 ) --[[ @ 0]]
	f30_arg0.SquarePrompt:setAlpha( 0 ) --[[ @ 0]]
	f30_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	f30_arg0.FocusSound:setPlaySoundDirect( false ) --[[ @ 0]]
	f30_arg0.ConsumedProgress:setAlpha( 0.8 ) --[[ @ 0]]
	f30_arg0.MidArrow:setAlpha( 0 ) --[[ @ 0]]
	f30_arg0.CycleBackground:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f31_arg0.Bar:completeAnimation() --[[ @ 0]]
			f31_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.Bar ) --[[ @ 0]]
		end,
		ChildFocus = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f32_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f32_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ActiveBG ) --[[ @ 0]]
			f32_arg0.Button:completeAnimation() --[[ @ 0]]
			f32_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Button ) --[[ @ 0]]
			f32_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f32_arg0.SquarePrompt:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.SquarePrompt ) --[[ @ 0]]
			f32_arg0.Bar:completeAnimation() --[[ @ 0]]
			f32_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
			f32_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.Bar ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f33_local0 = function ( f34_arg0 )
				f33_arg0.ActiveBG:beginAnimation( 120 ) --[[ @ 0]]
				f33_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
				f33_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
				f33_arg0.ActiveBG:registerEventHandler( "interrupted_keyframe", f33_arg0.clipInterrupted ) --[[ @ 0]]
				f33_arg0.ActiveBG:registerEventHandler( "transition_complete_keyframe", f33_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f33_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f33_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f33_local0( f33_arg0.ActiveBG ) --[[ @ 0]]
			local f33_local1 = function ( f35_arg0 )
				f33_arg0.Button:beginAnimation( 120, Enum[@"hash_1F50FFF429AB1890"][@"hash_2053CEB9A0427197"] ) --[[ @ 0]]
				f33_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
				f33_arg0.Button:registerEventHandler( "interrupted_keyframe", f33_arg0.clipInterrupted ) --[[ @ 0]]
				f33_arg0.Button:registerEventHandler( "transition_complete_keyframe", f33_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f33_arg0.Button:completeAnimation() --[[ @ 0]]
			f33_arg0.Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f33_local1( f33_arg0.Button ) --[[ @ 0]]
			f33_arg0.FocusSound:completeAnimation() --[[ @ 0]]
			f33_arg0.FocusSound:setPlaySoundDirect( true ) --[[ @ 0]]
			f33_arg0.FocusSound:playSound( "cac_slide_nav", f33_arg1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.FocusSound ) --[[ @ 0]]
			local f33_local2 = function ( f36_arg0 )
				f33_arg0.Bar:beginAnimation( 120 ) --[[ @ 0]]
				f33_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
				f33_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
				f33_arg0.Bar:setScale( 1, 1 ) --[[ @ 0]]
				f33_arg0.Bar:registerEventHandler( "interrupted_keyframe", f33_arg0.clipInterrupted ) --[[ @ 0]]
				f33_arg0.Bar:registerEventHandler( "transition_complete_keyframe", f33_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f33_arg0.Bar:completeAnimation() --[[ @ 0]]
			f33_arg0.Bar:setTopBottom( 0, 0, 45.5, 77.5 ) --[[ @ 0]]
			f33_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f33_local2( f33_arg0.Bar ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f37_local0 = function ( f38_arg0 )
				f37_arg0.ActiveBG:beginAnimation( 120 ) --[[ @ 0]]
				f37_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
				f37_arg0.ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f37_arg0.ActiveBG:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.ActiveBG:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f37_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
			f37_local0( f37_arg0.ActiveBG ) --[[ @ 0]]
			local f37_local1 = function ( f39_arg0 )
				f37_arg0.Button:beginAnimation( 120, Enum[@"hash_1F50FFF429AB1890"][@"hash_2053CEB9A0427197"] ) --[[ @ 0]]
				f37_arg0.Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f37_arg0.Button:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.Button:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.Button:completeAnimation() --[[ @ 0]]
			f37_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
			f37_local1( f37_arg0.Button ) --[[ @ 0]]
			local f37_local2 = function ( f40_arg0 )
				f37_arg0.Bar:beginAnimation( 120 ) --[[ @ 0]]
				f37_arg0.Bar:setTopBottom( 0, 0, 45.5, 77.5 ) --[[ @ 0]]
				f37_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
				f37_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f37_arg0.Bar:registerEventHandler( "interrupted_keyframe", f37_arg0.clipInterrupted ) --[[ @ 0]]
				f37_arg0.Bar:registerEventHandler( "transition_complete_keyframe", f37_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f37_arg0.Bar:completeAnimation() --[[ @ 0]]
			f37_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
			f37_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.Bar:setScale( 1, 1 ) --[[ @ 0]]
			f37_local2( f37_arg0.Bar ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f42_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f42_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.ActiveBG ) --[[ @ 0]]
			f42_arg0.MidArrow:completeAnimation() --[[ @ 0]]
			f42_arg0.MidArrow:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.MidArrow ) --[[ @ 0]]
			f42_arg0.Button:completeAnimation() --[[ @ 0]]
			f42_arg0.Button:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Button ) --[[ @ 0]]
			f42_arg0.ConsumedProgress:completeAnimation() --[[ @ 0]]
			f42_arg0.ConsumedProgress:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.ConsumedProgress ) --[[ @ 0]]
			f42_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f42_arg0.SquarePrompt:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.SquarePrompt ) --[[ @ 0]]
			f42_arg0.Bar:completeAnimation() --[[ @ 0]]
			f42_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Bar ) --[[ @ 0]]
		end
	},
	Empty = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	CycleQuickEquip = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f44_arg0.CycleBackground:completeAnimation() --[[ @ 0]]
			f44_arg0.CycleBackground:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.CycleBackground ) --[[ @ 0]]
			f44_arg0.MidArrow:completeAnimation() --[[ @ 0]]
			f44_arg0.MidArrow:setAlpha( 0 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.MidArrow ) --[[ @ 0]]
		end
	},
	RightScreenEdge = {
		DefaultClip = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f45_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f45_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:completeAnimation() --[[ @ 0]]
			f45_arg0.SquarePrompt:setLeftRight( 0.5, 0.5, -115, 35 ) --[[ @ 0]]
			f45_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.SquarePrompt ) --[[ @ 0]]
			f45_arg0.Bar:completeAnimation() --[[ @ 0]]
			f45_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f45_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.Bar ) --[[ @ 0]]
		end,
		ChildFocus = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f46_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f46_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.ActiveBG ) --[[ @ 0]]
			f46_arg0.Button:completeAnimation() --[[ @ 0]]
			f46_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.Button ) --[[ @ 0]]
			f46_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f46_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:completeAnimation() --[[ @ 0]]
			f46_arg0.SquarePrompt:setLeftRight( 0.5, 0.5, -115, 35 ) --[[ @ 0]]
			f46_arg0.SquarePrompt:setAlpha( 0 ) --[[ @ 0]]
			f46_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.SquarePrompt ) --[[ @ 0]]
			f46_arg0.Bar:completeAnimation() --[[ @ 0]]
			f46_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
			f46_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.Bar ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			local f47_local0 = function ( f48_arg0 )
				f47_arg0.ActiveBG:beginAnimation( 120 ) --[[ @ 0]]
				f47_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
				f47_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
				f47_arg0.ActiveBG:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.ActiveBG:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f47_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f47_local0( f47_arg0.ActiveBG ) --[[ @ 0]]
			local f47_local1 = function ( f49_arg0 )
				f47_arg0.Button:beginAnimation( 120, Enum[@"hash_1F50FFF429AB1890"][@"hash_2053CEB9A0427197"] ) --[[ @ 0]]
				f47_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
				f47_arg0.Button:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.Button:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.Button:completeAnimation() --[[ @ 0]]
			f47_arg0.Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f47_local1( f47_arg0.Button ) --[[ @ 0]]
			f47_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f47_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:completeAnimation() --[[ @ 0]]
			f47_arg0.SquarePrompt:setLeftRight( 0.5, 0.5, -115, 35 ) --[[ @ 0]]
			f47_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.SquarePrompt ) --[[ @ 0]]
			f47_arg0.FocusSound:completeAnimation() --[[ @ 0]]
			f47_arg0.FocusSound:setPlaySoundDirect( true ) --[[ @ 0]]
			f47_arg0.FocusSound:playSound( "cac_slide_nav", f47_arg1 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.FocusSound ) --[[ @ 0]]
			local f47_local2 = function ( f50_arg0 )
				f47_arg0.Bar:beginAnimation( 120 ) --[[ @ 0]]
				f47_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
				f47_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
				f47_arg0.Bar:setScale( 1, 1 ) --[[ @ 0]]
				f47_arg0.Bar:registerEventHandler( "interrupted_keyframe", f47_arg0.clipInterrupted ) --[[ @ 0]]
				f47_arg0.Bar:registerEventHandler( "transition_complete_keyframe", f47_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f47_arg0.Bar:completeAnimation() --[[ @ 0]]
			f47_arg0.Bar:setTopBottom( 0, 0, 45.5, 77.5 ) --[[ @ 0]]
			f47_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
			f47_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
			f47_local2( f47_arg0.Bar ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			local f51_local0 = function ( f52_arg0 )
				f51_arg0.ActiveBG:beginAnimation( 120 ) --[[ @ 0]]
				f51_arg0.ActiveBG:setAlpha( 0 ) --[[ @ 0]]
				f51_arg0.ActiveBG:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f51_arg0.ActiveBG:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.ActiveBG:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.ActiveBG:completeAnimation() --[[ @ 0]]
			f51_arg0.ActiveBG:setAlpha( 1 ) --[[ @ 0]]
			f51_arg0.ActiveBG:setScale( 1, 1 ) --[[ @ 0]]
			f51_local0( f51_arg0.ActiveBG ) --[[ @ 0]]
			local f51_local1 = function ( f53_arg0 )
				f51_arg0.Button:beginAnimation( 120, Enum[@"hash_1F50FFF429AB1890"][@"hash_2053CEB9A0427197"] ) --[[ @ 0]]
				f51_arg0.Button:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f51_arg0.Button:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.Button:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.Button:completeAnimation() --[[ @ 0]]
			f51_arg0.Button:setScale( 1, 1 ) --[[ @ 0]]
			f51_local1( f51_arg0.Button ) --[[ @ 0]]
			f51_arg0.SquarePrompt:completeAnimation() --[[ @ 0]]
			f51_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:completeAnimation() --[[ @ 0]]
			f51_arg0.SquarePrompt:setLeftRight( 0.5, 0.5, -115, 35 ) --[[ @ 0]]
			f51_arg0.SquarePrompt.WarzoneQuickInventoryPromptInternal.label:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.SquarePrompt ) --[[ @ 0]]
			local f51_local2 = function ( f54_arg0 )
				f51_arg0.Bar:beginAnimation( 120 ) --[[ @ 0]]
				f51_arg0.Bar:setTopBottom( 0, 0, 45.5, 77.5 ) --[[ @ 0]]
				f51_arg0.Bar:setAlpha( 0 ) --[[ @ 0]]
				f51_arg0.Bar:setScale( 0.9, 0.9 ) --[[ @ 0]]
				f51_arg0.Bar:registerEventHandler( "interrupted_keyframe", f51_arg0.clipInterrupted ) --[[ @ 0]]
				f51_arg0.Bar:registerEventHandler( "transition_complete_keyframe", f51_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f51_arg0.Bar:completeAnimation() --[[ @ 0]]
			f51_arg0.Bar:setTopBottom( 0, 0, 48.5, 80.5 ) --[[ @ 0]]
			f51_arg0.Bar:setAlpha( 1 ) --[[ @ 0]]
			f51_arg0.Bar:setScale( 1, 1 ) --[[ @ 0]]
			f51_local2( f51_arg0.Bar ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneQuickInventoryItem.__onClose = function ( f55_arg0 )
	f55_arg0.MidArrow:close() --[[ @ 0]]
	f55_arg0.Button:close() --[[ @ 0]]
	f55_arg0.ConsumedProgress:close() --[[ @ 0]]
	f55_arg0.SquarePrompt:close() --[[ @ 0]]
	f55_arg0.EMP:close() --[[ @ 0]]
end
 --[[ @ 0]]
