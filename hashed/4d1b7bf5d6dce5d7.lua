-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/widgets/craft/emblemeditor/emblemeditorbuttonprompt" ) --[[ @ 0]]
require( "x64:54d90108dbbf039d" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopchooseside" ) --[[ @ 0]]

CoD.PaintshopControlsFull = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PaintshopControlsFull.__defaultWidth = 420 --[[ @ 0]]
CoD.PaintshopControlsFull.__defaultHeight = 540 --[[ @ 0]]
CoD.PaintshopControlsFull.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PaintshopControlsFull ) --[[ @ 0]]
	self.id = "PaintshopControlsFull" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local BackingBot = LUI.UIImage.new( 0, 0, 1, 421, 0, 0, 412, 525 ) --[[ @ 0]]
	BackingBot:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	BackingBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	BackingBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingBot:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( BackingBot ) --[[ @ 0]]
	self.BackingBot = BackingBot --[[ @ 0]]
	
	local BackingMid = LUI.UIImage.new( 0, 0, 0, 420, 0, 0, 230, 377 ) --[[ @ 0]]
	BackingMid:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	BackingMid:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	BackingMid:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingMid:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( BackingMid ) --[[ @ 0]]
	self.BackingMid = BackingMid --[[ @ 0]]
	
	local BackingTop = LUI.UIImage.new( 0, 0, 0, 420, 0, 0, 0, 190 ) --[[ @ 0]]
	BackingTop:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	BackingTop:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	BackingTop:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BackingTop:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( BackingTop ) --[[ @ 0]]
	self.BackingTop = BackingTop --[[ @ 0]]
	
	local ColorPicker = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 21, 421, 0, 0, 441, 481 ) --[[ @ 0]]
	ColorPicker:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ColorPicker:appendEventHandler( "input_source_changed", function ( f3_arg0, f3_arg1 )
		f3_arg1.menu = f3_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ColorPicker, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local PaintshopChooseSide0 = ColorPicker --[[ @ 0]]
	local materialPicker = ColorPicker.subscribeToModel --[[ @ 0]]
	local rsOpacity = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	materialPicker( PaintshopChooseSide0, rsOpacity.LastInput, function ( f4_arg0 )
		f1_arg0:updateElementState( ColorPicker, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ColorPicker:linkToElementModel( ColorPicker, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( ColorPicker, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ColorPicker.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_43F334E151B36E5C" ) ) --[[ @ 0]]
	ColorPicker:subscribeToGlobalModel( f1_arg1, "Controller", "alt2_button_image", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ColorPicker.buttonPromptImage:setImage( RegisterImage( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ColorPicker ) --[[ @ 0]]
	self.ColorPicker = ColorPicker --[[ @ 0]]
	
	materialPicker = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 21, 421, 0, 0, 481, 517 ) --[[ @ 0]]
	materialPicker:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.BaseUtility.IsDvarEnabled( "enable_material_picker" )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblem_IsGroupedLayerWithSticker( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	materialPicker:appendEventHandler( "input_source_changed", function ( f9_arg0, f9_arg1 )
		f9_arg1.menu = f9_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( materialPicker, f9_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	rsOpacity = materialPicker --[[ @ 0]]
	PaintshopChooseSide0 = materialPicker.subscribeToModel --[[ @ 0]]
	local lsOpacity = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	PaintshopChooseSide0( rsOpacity, lsOpacity.LastInput, function ( f10_arg0 )
		f1_arg0:updateElementState( materialPicker, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	materialPicker:linkToElementModel( materialPicker, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( materialPicker, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	materialPicker.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6E5BDA73054BDF29" ) ) --[[ @ 0]]
	materialPicker:subscribeToGlobalModel( f1_arg1, "Controller", "dpad_up_button_image", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			materialPicker.buttonPromptImage:setImage( RegisterImage( f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( materialPicker ) --[[ @ 0]]
	self.materialPicker = materialPicker --[[ @ 0]]
	
	PaintshopChooseSide0 = CoD.PaintshopChooseSide.new( f1_arg0, f1_arg1, 0, 0, 6, 326, 0, 0, 415, 447 ) --[[ @ 0]]
	PaintshopChooseSide0:setScale( LanguageOverrideNumberForScale( "korean", 0.8, LanguageOverrideNumberForScale( "japanese", 0.8, LanguageOverrideNumberForScale( "chinese", 0.8, 1, 1 ) ) ) ) --[[ @ 0]]
	PaintshopChooseSide0.text:setText( LocalizeToUpperString( @"hash_5D9555D6F5A195F2" ) ) --[[ @ 0]]
	self:addElement( PaintshopChooseSide0 ) --[[ @ 0]]
	self.PaintshopChooseSide0 = PaintshopChooseSide0 --[[ @ 0]]
	
	rsOpacity = CoD.EmblemEditorButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 39, 75, 0, 0, 256, 292 ) --[[ @ 0]]
	rsOpacity.label:setText( "" ) --[[ @ 0]]
	rsOpacity:subscribeToGlobalModel( f1_arg1, "Controller", "right_shoulder_button_image", function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			rsOpacity.buttonPromptImage:setImage( RegisterImage( f13_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( rsOpacity ) --[[ @ 0]]
	self.rsOpacity = rsOpacity --[[ @ 0]]
	
	lsOpacity = CoD.EmblemEditorButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 3, 39, 0, 0, 256, 292 ) --[[ @ 0]]
	lsOpacity.label:setText( "" ) --[[ @ 0]]
	lsOpacity:subscribeToGlobalModel( f1_arg1, "Controller", "left_shoulder_button_image", function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			lsOpacity.buttonPromptImage:setImage( RegisterImage( f14_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( lsOpacity ) --[[ @ 0]]
	self.lsOpacity = lsOpacity --[[ @ 0]]
	
	local opacity = LUI.UIText.new( 0, 0, 82, 370, 0, 0, 260, 285 ) --[[ @ 0]]
	opacity:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6611006D6269F87D" ) ) --[[ @ 0]]
	opacity:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	opacity:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	opacity:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( opacity ) --[[ @ 0]]
	self.opacity = opacity --[[ @ 0]]
	
	local ToggleOutline = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 420, 0, 0, 292, 332 ) --[[ @ 0]]
	ToggleOutline:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblems_IsLayerGroupedOrLinked( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ToggleOutline:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( ToggleOutline, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local overrides = ToggleOutline --[[ @ 0]]
	local Clip = ToggleOutline.subscribeToModel --[[ @ 0]]
	local rightTriggerButton = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	Clip( overrides, rightTriggerButton.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( ToggleOutline, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ToggleOutline:linkToElementModel( ToggleOutline, "isLinked", true, function ( model )
		f1_arg0:updateElementState( ToggleOutline, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isLinked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ToggleOutline:linkToElementModel( ToggleOutline, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( ToggleOutline, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ToggleOutline.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1B01D7611E815CFB" ) ) --[[ @ 0]]
	ToggleOutline:subscribeToGlobalModel( f1_arg1, "Controller", "alt1_button_image", function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			ToggleOutline.buttonPromptImage:setImage( RegisterImage( f20_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ToggleOutline ) --[[ @ 0]]
	self.ToggleOutline = ToggleOutline --[[ @ 0]]
	
	Clip = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 420, 0, 0, 332, 372 ) --[[ @ 0]]
	Clip:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.BaseUtility.IsDvarEnabled( "enable_clip_mask" )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.Emblems_IsLayerGroupedOrLinked( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	Clip:appendEventHandler( "input_source_changed", function ( f23_arg0, f23_arg1 )
		f23_arg1.menu = f23_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( Clip, f23_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	rightTriggerButton = Clip --[[ @ 0]]
	overrides = Clip.subscribeToModel --[[ @ 0]]
	local leftTriggerButton = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	overrides( rightTriggerButton, leftTriggerButton.LastInput, function ( f24_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Clip:linkToElementModel( Clip, "isLinked", true, function ( model )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isLinked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Clip:linkToElementModel( Clip, "isGrouped", true, function ( model )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isGrouped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Clip.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5AB63F65EEE8AB3C" ) ) --[[ @ 0]]
	Clip:subscribeToGlobalModel( f1_arg1, "Controller", "dpad_down_button_image", function ( model )
		local f27_local0 = model:get() --[[ @ 0]]
		if f27_local0 ~= nil then
			Clip.buttonPromptImage:setImage( RegisterImage( f27_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Clip ) --[[ @ 0]]
	self.Clip = Clip --[[ @ 0]]
	
	overrides = CoD.EmblemEditorHeaderRight.new( f1_arg0, f1_arg1, 0, 0, 5, 325, 0, 0, 232, 269 ) --[[ @ 0]]
	overrides:setScale( LanguageOverrideNumberForScale( "korean", 0.8, LanguageOverrideNumberForScale( "japanese", 0.8, LanguageOverrideNumberForScale( "chinese", 0.8, 1, 1 ) ) ) ) --[[ @ 0]]
	overrides.text:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_21EE153317E38FB5" ) ) --[[ @ 0]]
	self:addElement( overrides ) --[[ @ 0]]
	self.overrides = overrides --[[ @ 0]]
	
	rightTriggerButton = CoD.EmblemEditorButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 39, 73, 0, 0, 109, 155 ) --[[ @ 0]]
	rightTriggerButton.label:setText( "" ) --[[ @ 0]]
	rightTriggerButton:subscribeToGlobalModel( f1_arg1, "Controller", "right_trigger_button_image", function ( model )
		local f28_local0 = model:get() --[[ @ 0]]
		if f28_local0 ~= nil then
			rightTriggerButton.buttonPromptImage:setImage( RegisterImage( f28_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( rightTriggerButton ) --[[ @ 0]]
	self.rightTriggerButton = rightTriggerButton --[[ @ 0]]
	
	leftTriggerButton = CoD.EmblemEditorButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 3, 39, 0, 0, 109, 155 ) --[[ @ 0]]
	leftTriggerButton.label:setText( "" ) --[[ @ 0]]
	leftTriggerButton:subscribeToGlobalModel( f1_arg1, "Controller", "left_trigger_button_image", function ( model )
		local f29_local0 = model:get() --[[ @ 0]]
		if f29_local0 ~= nil then
			leftTriggerButton.buttonPromptImage:setImage( RegisterImage( f29_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( leftTriggerButton ) --[[ @ 0]]
	self.leftTriggerButton = leftTriggerButton --[[ @ 0]]
	
	local rotateText = LUI.UIText.new( 0, 0, 82, 370, 0, 0, 117, 142 ) --[[ @ 0]]
	rotateText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_12FFF1300E166617" ) ) --[[ @ 0]]
	rotateText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	rotateText:setLetterSpacing( 2 ) --[[ @ 0]]
	rotateText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	rotateText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( rotateText ) --[[ @ 0]]
	self.rotateText = rotateText --[[ @ 0]]
	
	local Flip = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 371, 0, 0, 148, 194 ) --[[ @ 0]]
	Flip.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_480DD0DAE2D212DC" ) ) --[[ @ 0]]
	Flip:subscribeToGlobalModel( f1_arg1, "Controller", "back_button_image", function ( model )
		local f30_local0 = model:get() --[[ @ 0]]
		if f30_local0 ~= nil then
			Flip.buttonPromptImage:setImage( RegisterImage( f30_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Flip ) --[[ @ 0]]
	self.Flip = Flip --[[ @ 0]]
	
	local FixedScale = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 420, 0, 0, 71, 117 ) --[[ @ 0]]
	FixedScale.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6AD2AED6D89BCC15" ) ) --[[ @ 0]]
	FixedScale:subscribeToGlobalModel( f1_arg1, "Controller", "move_right_stick_button_image", function ( model )
		local f31_local0 = model:get() --[[ @ 0]]
		if f31_local0 ~= nil then
			FixedScale.buttonPromptImage:setImage( RegisterImage( f31_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FixedScale ) --[[ @ 0]]
	self.FixedScale = FixedScale --[[ @ 0]]
	
	local FreeScale = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 420, 0, 0, 71, 117 ) --[[ @ 0]]
	FreeScale.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7DD45E7A84A50DF9" ) ) --[[ @ 0]]
	FreeScale:subscribeToGlobalModel( f1_arg1, "Controller", "move_right_stick_button_image", function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= nil then
			FreeScale.buttonPromptImage:setImage( RegisterImage( f32_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FreeScale ) --[[ @ 0]]
	self.FreeScale = FreeScale --[[ @ 0]]
	
	local Move = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 20, 420, 0, 0, 33, 79 ) --[[ @ 0]]
	Move.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_507A3A71D9218BE" ) ) --[[ @ 0]]
	Move:subscribeToGlobalModel( f1_arg1, "Controller", "move_left_stick_button_image", function ( model )
		local f33_local0 = model:get() --[[ @ 0]]
		if f33_local0 ~= nil then
			Move.buttonPromptImage:setImage( RegisterImage( f33_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Move ) --[[ @ 0]]
	self.Move = Move --[[ @ 0]]
	
	local PaintshopChooseSide = CoD.PaintshopChooseSide.new( f1_arg0, f1_arg1, 0, 0, 5, 325, 0, 0, 4, 36 ) --[[ @ 0]]
	PaintshopChooseSide:setScale( LanguageOverrideNumberForScale( "korean", 0.8, LanguageOverrideNumberForScale( "japanese", 0.8, LanguageOverrideNumberForScale( "chinese", 0.8, 1, 1 ) ) ) ) --[[ @ 0]]
	PaintshopChooseSide.text:setText( LocalizeToUpperString( @"hash_5F5CA503839CA925" ) ) --[[ @ 0]]
	self:addElement( PaintshopChooseSide ) --[[ @ 0]]
	self.PaintshopChooseSide = PaintshopChooseSide --[[ @ 0]]
	
	local dividerH01 = LUI.UIImage.new( 0, 0, 0, 420, 0, 0, 22, 26 ) --[[ @ 0]]
	dividerH01:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH01:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH01:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH01:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH01:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH01 ) --[[ @ 0]]
	self.dividerH01 = dividerH01 --[[ @ 0]]
	
	local dividerH02 = LUI.UIImage.new( 0, 0, 1, 420, 0, 0, 253, 257 ) --[[ @ 0]]
	dividerH02:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH02:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH02:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH02:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH02:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH02 ) --[[ @ 0]]
	self.dividerH02 = dividerH02 --[[ @ 0]]
	
	local dividerH03 = LUI.UIImage.new( 0, 0, 1, 421, 0, 0, 433, 437 ) --[[ @ 0]]
	dividerH03:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH03:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH03:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH03:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH03:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH03 ) --[[ @ 0]]
	self.dividerH03 = dividerH03 --[[ @ 0]]
	
	local Frame01 = LUI.UIImage.new( 0, 1, -1, 1, 0, 0, 0, 190 ) --[[ @ 0]]
	Frame01:setAlpha( 0.2 ) --[[ @ 0]]
	Frame01:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame01:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame01:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame01:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame01 ) --[[ @ 0]]
	self.Frame01 = Frame01 --[[ @ 0]]
	
	local Frame02 = LUI.UIImage.new( 0, 1, -1, 1, 0, 0, 230, 377 ) --[[ @ 0]]
	Frame02:setAlpha( 0.2 ) --[[ @ 0]]
	Frame02:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame02:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame02:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame02:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame02 ) --[[ @ 0]]
	self.Frame02 = Frame02 --[[ @ 0]]
	
	local Frame03 = LUI.UIImage.new( 0, 1, -1, 1, 0, 0, 412, 525 ) --[[ @ 0]]
	Frame03:setAlpha( 0.2 ) --[[ @ 0]]
	Frame03:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame03:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame03:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame03:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame03 ) --[[ @ 0]]
	self.Frame03 = Frame03 --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PaintshopControlsFull.__resetProperties = function ( f34_arg0 )
	f34_arg0.rotateText:completeAnimation() --[[ @ 0]]
	f34_arg0.leftTriggerButton:completeAnimation() --[[ @ 0]]
	f34_arg0.rightTriggerButton:completeAnimation() --[[ @ 0]]
	f34_arg0.opacity:completeAnimation() --[[ @ 0]]
	f34_arg0.lsOpacity:completeAnimation() --[[ @ 0]]
	f34_arg0.rsOpacity:completeAnimation() --[[ @ 0]]
	f34_arg0.Move:completeAnimation() --[[ @ 0]]
	f34_arg0.FreeScale:completeAnimation() --[[ @ 0]]
	f34_arg0.Flip:completeAnimation() --[[ @ 0]]
	f34_arg0.ToggleOutline:completeAnimation() --[[ @ 0]]
	f34_arg0.ColorPicker:completeAnimation() --[[ @ 0]]
	f34_arg0.materialPicker:completeAnimation() --[[ @ 0]]
	f34_arg0.overrides:completeAnimation() --[[ @ 0]]
	f34_arg0.PaintshopChooseSide0:completeAnimation() --[[ @ 0]]
	f34_arg0.PaintshopChooseSide:completeAnimation() --[[ @ 0]]
	f34_arg0.BackingTop:completeAnimation() --[[ @ 0]]
	f34_arg0.BackingMid:completeAnimation() --[[ @ 0]]
	f34_arg0.BackingBot:completeAnimation() --[[ @ 0]]
	f34_arg0.FixedScale:completeAnimation() --[[ @ 0]]
	f34_arg0.Frame03:completeAnimation() --[[ @ 0]]
	f34_arg0.Frame02:completeAnimation() --[[ @ 0]]
	f34_arg0.Frame01:completeAnimation() --[[ @ 0]]
	f34_arg0.dividerH02:completeAnimation() --[[ @ 0]]
	f34_arg0.dividerH03:completeAnimation() --[[ @ 0]]
	f34_arg0.dividerH01:completeAnimation() --[[ @ 0]]
	f34_arg0.Clip:completeAnimation() --[[ @ 0]]
	f34_arg0.rotateText:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.leftTriggerButton:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.rightTriggerButton:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.opacity:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.lsOpacity:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.rsOpacity:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.Move:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.FreeScale:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.Flip:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.ToggleOutline:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.ColorPicker:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.materialPicker:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.overrides:setLeftRight( 0, 0, 5, 325 ) --[[ @ 0]]
	f34_arg0.overrides:setTopBottom( 0, 0, 232, 269 ) --[[ @ 0]]
	f34_arg0.overrides:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.PaintshopChooseSide0:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.PaintshopChooseSide:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.BackingTop:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.BackingMid:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.BackingBot:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.FixedScale:setAlpha( 1 ) --[[ @ 0]]
	f34_arg0.FixedScale.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_6AD2AED6D89BCC15" ) ) --[[ @ 0]]
	f34_arg0.Frame03:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.Frame02:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.Frame01:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.dividerH02:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.dividerH03:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.dividerH01:setAlpha( 0.2 ) --[[ @ 0]]
	f34_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PaintshopControlsFull.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f35_arg0, f35_arg1 )
			f35_arg0:__resetProperties() --[[ @ 0]]
			f35_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	BrowseModeControlsState = {
		DefaultClip = function ( f36_arg0, f36_arg1 )
			f36_arg0:__resetProperties() --[[ @ 0]]
			f36_arg0:setupElementClipCounter( 26 ) --[[ @ 0]]
			f36_arg0.BackingBot:completeAnimation() --[[ @ 0]]
			f36_arg0.BackingBot:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.BackingBot ) --[[ @ 0]]
			f36_arg0.BackingMid:completeAnimation() --[[ @ 0]]
			f36_arg0.BackingMid:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.BackingMid ) --[[ @ 0]]
			f36_arg0.BackingTop:completeAnimation() --[[ @ 0]]
			f36_arg0.BackingTop:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.BackingTop ) --[[ @ 0]]
			f36_arg0.ColorPicker:completeAnimation() --[[ @ 0]]
			f36_arg0.ColorPicker:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.ColorPicker ) --[[ @ 0]]
			f36_arg0.materialPicker:completeAnimation() --[[ @ 0]]
			f36_arg0.materialPicker:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.materialPicker ) --[[ @ 0]]
			f36_arg0.PaintshopChooseSide0:completeAnimation() --[[ @ 0]]
			f36_arg0.PaintshopChooseSide0:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.PaintshopChooseSide0 ) --[[ @ 0]]
			f36_arg0.rsOpacity:completeAnimation() --[[ @ 0]]
			f36_arg0.rsOpacity:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.rsOpacity ) --[[ @ 0]]
			f36_arg0.lsOpacity:completeAnimation() --[[ @ 0]]
			f36_arg0.lsOpacity:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.lsOpacity ) --[[ @ 0]]
			f36_arg0.opacity:completeAnimation() --[[ @ 0]]
			f36_arg0.opacity:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.opacity ) --[[ @ 0]]
			f36_arg0.ToggleOutline:completeAnimation() --[[ @ 0]]
			f36_arg0.ToggleOutline:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.ToggleOutline ) --[[ @ 0]]
			f36_arg0.Clip:beginAnimation( 210 ) --[[ @ 0]]
			f36_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.Clip:registerEventHandler( "interrupted_keyframe", f36_arg0.clipInterrupted ) --[[ @ 0]]
			f36_arg0.Clip:registerEventHandler( "transition_complete_keyframe", f36_arg0.clipFinished ) --[[ @ 0]]
			f36_arg0.overrides:completeAnimation() --[[ @ 0]]
			f36_arg0.overrides:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.overrides ) --[[ @ 0]]
			f36_arg0.rightTriggerButton:completeAnimation() --[[ @ 0]]
			f36_arg0.rightTriggerButton:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.rightTriggerButton ) --[[ @ 0]]
			f36_arg0.leftTriggerButton:completeAnimation() --[[ @ 0]]
			f36_arg0.leftTriggerButton:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.leftTriggerButton ) --[[ @ 0]]
			f36_arg0.rotateText:completeAnimation() --[[ @ 0]]
			f36_arg0.rotateText:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.rotateText ) --[[ @ 0]]
			f36_arg0.Flip:completeAnimation() --[[ @ 0]]
			f36_arg0.Flip:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Flip ) --[[ @ 0]]
			f36_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f36_arg0.FixedScale:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.FixedScale ) --[[ @ 0]]
			f36_arg0.FreeScale:completeAnimation() --[[ @ 0]]
			f36_arg0.FreeScale:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.FreeScale ) --[[ @ 0]]
			f36_arg0.Move:completeAnimation() --[[ @ 0]]
			f36_arg0.Move:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Move ) --[[ @ 0]]
			f36_arg0.PaintshopChooseSide:completeAnimation() --[[ @ 0]]
			f36_arg0.PaintshopChooseSide:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.PaintshopChooseSide ) --[[ @ 0]]
			f36_arg0.dividerH01:completeAnimation() --[[ @ 0]]
			f36_arg0.dividerH01:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.dividerH01 ) --[[ @ 0]]
			f36_arg0.dividerH02:completeAnimation() --[[ @ 0]]
			f36_arg0.dividerH02:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.dividerH02 ) --[[ @ 0]]
			f36_arg0.dividerH03:completeAnimation() --[[ @ 0]]
			f36_arg0.dividerH03:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.dividerH03 ) --[[ @ 0]]
			f36_arg0.Frame01:completeAnimation() --[[ @ 0]]
			f36_arg0.Frame01:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Frame01 ) --[[ @ 0]]
			f36_arg0.Frame02:completeAnimation() --[[ @ 0]]
			f36_arg0.Frame02:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Frame02 ) --[[ @ 0]]
			f36_arg0.Frame03:completeAnimation() --[[ @ 0]]
			f36_arg0.Frame03:setAlpha( 0 ) --[[ @ 0]]
			f36_arg0.clipFinished( f36_arg0.Frame03 ) --[[ @ 0]]
		end
	},
	FixedScale = {
		DefaultClip = function ( f37_arg0, f37_arg1 )
			f37_arg0:__resetProperties() --[[ @ 0]]
			f37_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f37_arg0.overrides:completeAnimation() --[[ @ 0]]
			f37_arg0.overrides:setLeftRight( 0, 0, 5, 325 ) --[[ @ 0]]
			f37_arg0.overrides:setTopBottom( 0, 0, 232, 269 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.overrides ) --[[ @ 0]]
			f37_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f37_arg0.FixedScale:setAlpha( 1 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.FixedScale ) --[[ @ 0]]
			f37_arg0.FreeScale:completeAnimation() --[[ @ 0]]
			f37_arg0.FreeScale:setAlpha( 0 ) --[[ @ 0]]
			f37_arg0.clipFinished( f37_arg0.FreeScale ) --[[ @ 0]]
		end
	},
	FreeScale = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f38_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f38_arg0.FixedScale:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.FixedScale ) --[[ @ 0]]
		end
	},
	StickerFixedScale = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f39_arg0.ColorPicker:completeAnimation() --[[ @ 0]]
			f39_arg0.ColorPicker:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.ColorPicker ) --[[ @ 0]]
			f39_arg0.materialPicker:completeAnimation() --[[ @ 0]]
			f39_arg0.materialPicker:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.materialPicker ) --[[ @ 0]]
			f39_arg0.rsOpacity:completeAnimation() --[[ @ 0]]
			f39_arg0.rsOpacity:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.rsOpacity ) --[[ @ 0]]
			f39_arg0.lsOpacity:completeAnimation() --[[ @ 0]]
			f39_arg0.lsOpacity:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.lsOpacity ) --[[ @ 0]]
			f39_arg0.opacity:completeAnimation() --[[ @ 0]]
			f39_arg0.opacity:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.opacity ) --[[ @ 0]]
			f39_arg0.ToggleOutline:completeAnimation() --[[ @ 0]]
			f39_arg0.ToggleOutline:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.ToggleOutline ) --[[ @ 0]]
			f39_arg0.Clip:beginAnimation( 210 ) --[[ @ 0]]
			f39_arg0.Clip:setAlpha( 0.2 ) --[[ @ 0]]
			f39_arg0.Clip:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
			f39_arg0.Clip:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			f39_arg0.overrides:completeAnimation() --[[ @ 0]]
			f39_arg0.overrides:setLeftRight( 0, 0, 5, 325 ) --[[ @ 0]]
			f39_arg0.overrides:setTopBottom( 0, 0, 232, 269 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.overrides ) --[[ @ 0]]
			f39_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f39_arg0.FixedScale:setAlpha( 1 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.FixedScale ) --[[ @ 0]]
			f39_arg0.FreeScale:completeAnimation() --[[ @ 0]]
			f39_arg0.FreeScale:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.FreeScale ) --[[ @ 0]]
		end
	},
	StickerFreeScale = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f40_arg0.ColorPicker:completeAnimation() --[[ @ 0]]
			f40_arg0.ColorPicker:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ColorPicker ) --[[ @ 0]]
			f40_arg0.materialPicker:completeAnimation() --[[ @ 0]]
			f40_arg0.materialPicker:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.materialPicker ) --[[ @ 0]]
			f40_arg0.rsOpacity:completeAnimation() --[[ @ 0]]
			f40_arg0.rsOpacity:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.rsOpacity ) --[[ @ 0]]
			f40_arg0.lsOpacity:completeAnimation() --[[ @ 0]]
			f40_arg0.lsOpacity:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.lsOpacity ) --[[ @ 0]]
			f40_arg0.opacity:completeAnimation() --[[ @ 0]]
			f40_arg0.opacity:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.opacity ) --[[ @ 0]]
			f40_arg0.ToggleOutline:completeAnimation() --[[ @ 0]]
			f40_arg0.ToggleOutline:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ToggleOutline ) --[[ @ 0]]
			f40_arg0.Clip:beginAnimation( 210 ) --[[ @ 0]]
			f40_arg0.Clip:setAlpha( 0.2 ) --[[ @ 0]]
			f40_arg0.Clip:registerEventHandler( "interrupted_keyframe", f40_arg0.clipInterrupted ) --[[ @ 0]]
			f40_arg0.Clip:registerEventHandler( "transition_complete_keyframe", f40_arg0.clipFinished ) --[[ @ 0]]
			f40_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f40_arg0.FixedScale:setAlpha( 0 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.FixedScale ) --[[ @ 0]]
		end
	},
	FixedScaleOnly = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f41_arg0.overrides:completeAnimation() --[[ @ 0]]
			f41_arg0.overrides:setLeftRight( 0, 0, 5, 325 ) --[[ @ 0]]
			f41_arg0.overrides:setTopBottom( 0, 0, 232, 269 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.overrides ) --[[ @ 0]]
			f41_arg0.FixedScale:completeAnimation() --[[ @ 0]]
			f41_arg0.FixedScale.label:completeAnimation() --[[ @ 0]]
			f41_arg0.FixedScale:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.FixedScale.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_34FA615DA76883A8" ) ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.FixedScale ) --[[ @ 0]]
			f41_arg0.FreeScale:completeAnimation() --[[ @ 0]]
			f41_arg0.FreeScale:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.FreeScale ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.PaintshopControlsFull.__onClose = function ( f42_arg0 )
	f42_arg0.ColorPicker:close() --[[ @ 0]]
	f42_arg0.materialPicker:close() --[[ @ 0]]
	f42_arg0.PaintshopChooseSide0:close() --[[ @ 0]]
	f42_arg0.rsOpacity:close() --[[ @ 0]]
	f42_arg0.lsOpacity:close() --[[ @ 0]]
	f42_arg0.ToggleOutline:close() --[[ @ 0]]
	f42_arg0.Clip:close() --[[ @ 0]]
	f42_arg0.overrides:close() --[[ @ 0]]
	f42_arg0.rightTriggerButton:close() --[[ @ 0]]
	f42_arg0.leftTriggerButton:close() --[[ @ 0]]
	f42_arg0.Flip:close() --[[ @ 0]]
	f42_arg0.FixedScale:close() --[[ @ 0]]
	f42_arg0.FreeScale:close() --[[ @ 0]]
	f42_arg0.Move:close() --[[ @ 0]]
	f42_arg0.PaintshopChooseSide:close() --[[ @ 0]]
end
 --[[ @ 0]]
