-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
CoD.PlayerStatsUtility = {} --[[ @ 0]]
CoD.PlayerStatsUtility.WZGameModeDisplayType = {
	ALL = 1,
	SOLO = 2,
	DUOS = 3,
	QUADS = 4,
	LTM = 5
} --[[ @ 0]]
CoD.PlayerStatsUtility.WZGameModeFilterNameTable = {
	[CoD.PlayerStatsUtility.WZGameModeDisplayType.ALL] = @"hash_28E89F94D2E530BA",
	[CoD.PlayerStatsUtility.WZGameModeDisplayType.SOLO] = @"hash_4C25E5099DB7AC28",
	[CoD.PlayerStatsUtility.WZGameModeDisplayType.DUOS] = @"hash_549CAE7A47C9D8DE",
	[CoD.PlayerStatsUtility.WZGameModeDisplayType.QUADS] = @"hash_2F049D2C72419C19",
	[CoD.PlayerStatsUtility.WZGameModeDisplayType.LTM] = @"hash_3968DB13DF95101A"
} --[[ @ 0]]
CoD.PlayerStatsUtility.WZGameModeInfoTable = nil --[[ @ 0]]
CoD.PlayerStatsUtility.WZDistanceTraveledStats = {
	@"distance_traveled_foot",
	@"distance_traveled_vehicle_air",
	@"distance_traveled_vehicle_land",
	@"distance_traveled_vehicle_water"
} --[[ @ 0]]
CoD.PlayerStatsUtility.ZMGameModeTable = {
	@"zclassic",
	@"zstandard"
} --[[ @ 0]]
CoD.PlayerStatsUtility.ZMMaps = {
	@"zm_escape",
	@"zm_mansion",
	@"zm_office",
	@"zm_red",
	@"zm_towers",
	@"zm_zodt8",
	@"zm_white",
	@"zm_orange"
} --[[ @ 0]]
CoD.PlayerStatsUtility.FeaturedMedalScriptRef = "headshot" --[[ @ 0]]
CoD.PlayerStatsUtility.MultiKillMedalScriptRefs = {
	"killstreak_more_than_30",
	"killstreak_30",
	"killstreak_25",
	"killstreak_20",
	"killstreak_15",
	"killstreak_10",
	"killstreak_5"
} --[[ @ 0]]
CoD.PlayerStatsUtility.KillStreakMedalScriptRefs = {
	"multikill_more_than_7",
	"multikill_7",
	"multikill_6",
	"multikill_5",
	"multikill_4",
	"multikill_3",
	"multikill_2"
} --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZModeInfoTable = function ()
	if CoD.PlayerStatsUtility.WZGameModeInfoTable == nil then
		CoD.PlayerStatsUtility.WZGameModeInfoTable = {
			[CoD.PlayerStatsUtility.WZGameModeDisplayType.ALL] = {
				filterName = @"hash_28E89F94D2E530BA",
				statPathName = CoD.GameTypeUtility.GetAllGameModes( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] )
			},
			[CoD.PlayerStatsUtility.WZGameModeDisplayType.SOLO] = {
				filterName = @"hash_4C25E5099DB7AC28",
				statPathName = @"warzone_solo"
			},
			[CoD.PlayerStatsUtility.WZGameModeDisplayType.DUOS] = {
				filterName = @"hash_549CAE7A47C9D8DE",
				statPathName = @"warzone_duo"
			},
			[CoD.PlayerStatsUtility.WZGameModeDisplayType.QUADS] = {
				filterName = @"hash_2F049D2C72419C19",
				statPathName = @"warzone_quad"
			},
			[CoD.PlayerStatsUtility.WZGameModeDisplayType.LTM] = {
				filterName = @"hash_3968DB13DF95101A",
				statPathName = CoD.GameTypeUtility.GetLimitedTimeModes( Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] )
			}
		} --[[ @ 0]]
	end
	return CoD.PlayerStatsUtility.WZGameModeInfoTable
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.HashStorageLookup = function ( f2_arg0, f2_arg1, f2_arg2 )
	if f2_arg0 == nil or type( f2_arg1 ) ~= "table" then
		return 
	end
	local f2_local0 = LUI.getTableFromFieldList( f2_arg1, f2_arg0 ) --[[ @ 0]]
	if not f2_local0 then
		return 
	end
	local f2_local1 = f2_local0[@"statvalue"] --[[ @ 0]]
	if not f2_local1 then
		return f2_local0:get()
	elseif IsArenaMode() then
		local f2_local2 = f2_local0[@"arenavalue"] --[[ @ 0]]
		if f2_local2 then
			return f2_local2:get()
		end
	elseif f2_arg2 == nil or f2_arg2 then
		local f2_local2 = f2_local0[@"arenavalue"] --[[ @ 0]]
		if f2_local2 then
			return f2_local1:get() - f2_local2:get()
		end
	end
	return f2_local1:get()
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.HashStorageLookupForMenu = function ( f3_arg0, f3_arg1 )
	return CoD.PlayerStatsUtility.HashStorageLookup( CoD.BaseUtility.GetMenuStorageBuffer( f3_arg0 ), f3_arg1 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu = function ( f4_arg0, f4_arg1, f4_arg2 )
	local f4_local0 = CoD.BaseUtility.GetMenuStorageBuffer( f4_arg0 ) --[[ @ 0]]
	if not f4_arg1 then
		f4_arg1 = {
			@"playerstatslist"
		} --[[ @ 0]]
	end
	if type( f4_arg2 ) == "table" then
		for f4_local4, f4_local5 in ipairs( f4_arg2 ) --[[ @ 0]] do
			table.insert( f4_arg1, f4_local5 ) --[[ @ 0]]
		end
	else
		table.insert( f4_arg1, f4_arg2 ) --[[ @ 0]]
	end
	return CoD.PlayerStatsUtility.HashStorageLookup( f4_local0, f4_arg1 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.HashPlayerStatsStorageNoCombinedLookupForMenu = function ( f5_arg0, f5_arg1, f5_arg2 )
	local f5_local0 = CoD.BaseUtility.GetMenuStorageBuffer( f5_arg0 ) --[[ @ 0]]
	if not f5_arg1 then
		f5_arg1 = {
			@"playerstatslist"
		} --[[ @ 0]]
	end
	if type( f5_arg2 ) == "table" then
		for f5_local4, f5_local5 in ipairs( f5_arg2 ) --[[ @ 0]] do
			table.insert( f5_arg1, f5_local5 ) --[[ @ 0]]
		end
	else
		table.insert( f5_arg1, f5_arg2 ) --[[ @ 0]]
	end
	return CoD.PlayerStatsUtility.HashStorageLookup( f5_local0, f5_arg1, false )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer = function ( f6_arg0 )
	return CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f6_arg0, nil, @"rank" ) or 0, CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f6_arg0, nil, @"plevel" ) or 0
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetCurrentRankAndXPFromMenuStorageBuffer = function ( f7_arg0 )
	return CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f7_arg0, nil, @"rank" ) or 0, CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f7_arg0, nil, @"rankxp" ) or 0
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModeTableValue = function ( f8_arg0, f8_arg1, f8_arg2 )
	local f8_local0 = CoD.PlayerStatsUtility.GetWZModeInfoTable() --[[ @ 0]]
	if f8_arg0 < 0 or #f8_local0 < f8_arg0 then
		return f8_arg2
	elseif f8_local0[f8_arg0] and f8_local0[f8_arg0][f8_arg1] then
		return f8_local0[f8_arg0][f8_arg1]
	else
		return f8_arg2
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetMedalsListTable = function ()
	local f9_local0 --[[ @ 0]]
	if Engine[@"CurrentSessionMode"]() == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
		f9_local0 = CoD.ScoreInfoTable.BaseWZTable --[[ @ 0]]
		if not f9_local0 then
		
		else
			if not CoD.PlayerStatsUtility.MedalsListTable then
				CoD.PlayerStatsUtility.MedalsListTable = {} --[[ @ 0]]
				local f9_local1 = Engine[@"GetTableRowCount"]( f9_local0 ) --[[ @ 0]]
				for f9_local2 = 1 --[[ @ 0]], f9_local1, 1 do
					local f9_local5 = Engine[@"hash_4C6F8EC444864600"]( f9_local0, f9_local2 - 1, CoD.ScoreInfoTable.ScriptRefCol ) --[[ @ 0]]
					local f9_local6 = Engine[@"hash_4C6F8EC444864600"]( f9_local0, f9_local2 - 1, CoD.ScoreInfoTable.MedalCategoryCol ) --[[ @ 0]]
					local f9_local7 = Engine[@"hash_4C6F8EC444864600"]( f9_local0, f9_local2 - 1, CoD.ScoreInfoTable.MedalRefCol ) --[[ @ 0]]
					local f9_local8 = Engine[@"hash_4C6F8EC444864600"]( f9_local0, f9_local2 - 1, CoD.ScoreInfoTable.MedalAssetCol ) --[[ @ 0]]
					local f9_local9 = tonumber( Engine[@"hash_25DC2BA4A99CE43E"]( f9_local0, f9_local2 - 1, CoD.ScoreInfoTable.MedalXPCol ) ) or 0 --[[ @ 0]]
					local f9_local10 = Engine[@"hash_2E00B2F29271C60B"]( f9_local8 ) --[[ @ 0]]
					if f9_local10 and f9_local5 and f9_local7 and f9_local7 ~= @"hash_0" then
						CoD.PlayerStatsUtility.MedalsListTable[f9_local5] = {
							name = f9_local10[@"stringref"] or @"hash_0",
							description = f9_local10[@"description"] or @"hash_0",
							iconSmall = f9_local10[@"hash_5DA32D2BFAA81507"],
							iconLarge = f9_local10[@"hash_78027A8209C5D65F"],
							timesEarned = 0,
							medalReference = f9_local7,
							medalCategory = f9_local6,
							baseMedalXP = f9_local9
						} --[[ @ 0]]
					end
				end
			end
			return CoD.PlayerStatsUtility.MedalsListTable
		end
	end
	f9_local0 = CoD.ScoreInfoTable.BaseMPTable --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetEarnedMedalsListTable = function ( f10_arg0 )
	if not CoD.PlayerStatsUtility.EarnedMedalsListTable then
		CoD.PlayerStatsUtility.EarnedMedalsListTable = {} --[[ @ 0]]
		for f10_local4, f10_local5 in pairs( CoD.PlayerStatsUtility.GetMedalsListTable() ) --[[ @ 0]] do
			local f10_local6 = f10_local5.medalReference --[[ @ 0]]
			if f10_local6 then
				local f10_local3 = 0 --[[ @ 0]]
				if LuaUtils.IsArenaMode() then
					f10_local3 = f10_arg0[f10_local6].arenaValue:get() --[[ @ 0]]
				else
					f10_local3 = f10_arg0[f10_local6].statValue:get() --[[ @ 0]]
				end
				if f10_local3 > 0 then
					if not CoD.PlayerStatsUtility.EarnedMedalsListTable[f10_local6] then
						CoD.PlayerStatsUtility.EarnedMedalsListTable[f10_local6] = f10_local3 --[[ @ 0]]
					else
						CoD.PlayerStatsUtility.EarnedMedalsListTable[f10_local6] = CoD.PlayerStatsUtility.EarnedMedalsListTable[f10_local6] + f10_local3 --[[ @ 0]]
					end
				end
			end
		end
	end
	return CoD.PlayerStatsUtility.EarnedMedalsListTable
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.IsPrestigeMasterForMenu = function ( f11_arg0, f11_arg1 )
	return IsGameModeParagonCapable( f11_arg0 ) and Engine[@"GetPrestigeCap"]( f11_arg0 ) <= f11_local1
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.MedalsTabChanged = function ( f12_arg0 )
	if f12_arg0.MedalsGrid then
		f12_arg0.MedalsGrid:updateDataSource() --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.SetCombatRecordXUID = function ( f13_arg0 )
	CoD.PlayerStatsUtility.CombatRecordXUID = Engine[@"GetXUID64"]() --[[ @ 0]]
	CoD.PlayerStatsUtility.CombatRecordOtherPlayerStats = false --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.SetCombatRecordXUIDForSelectedPlayer = function ( f14_arg0 )
	local f14_local0 = Engine[@"GetModelForController"]( f14_arg0 ) --[[ @ 0]]
	local f14_local1 = f14_local0["Social.selectedFriendXUID"] --[[ @ 0]]
	if f14_local1 then
		CoD.PlayerStatsUtility.CombatRecordXUID = f14_local1:get() --[[ @ 0]]
		CoD.PlayerStatsUtility.CombatRecordOtherPlayerStats = true --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetStorageBufferForPlayer = function ( f15_arg0 )
	if CoD.PlayerStatsUtility.CombatRecordOtherPlayerStats then
		return Engine[@"GetOtherPlayerStatsBuffer"]()
	else
		local f15_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
		if f15_local0 == Enum[@"eModes"][@"hash_73723205FAE52C4A"] then
			return Engine[@"StorageGetBuffer"]( f15_arg0, Enum[@"StorageFileType"][@"hash_A57D6164B91A8FC"] )
		elseif f15_local0 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
			return Engine[@"StorageGetBuffer"]( f15_arg0, Enum[@"StorageFileType"][@"hash_1AB0E693244221BC"] )
		else
			return Engine[@"StorageGetBuffer"]( f15_arg0, Enum[@"StorageFileType"][@"hash_5D5A7695E03A7A90"] )
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetStorageBufferEnumForPlayer = function ( f16_arg0 )
	if CoD.PlayerStatsUtility.CombatRecordOtherPlayerStats then
		return nil
	else
		local f16_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
		if f16_local0 == Enum[@"eModes"][@"hash_73723205FAE52C4A"] then
			return Enum[@"StorageFileType"][@"hash_A57D6164B91A8FC"]
		elseif f16_local0 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
			return Enum[@"StorageFileType"][@"hash_1AB0E693244221BC"]
		else
			return Enum[@"StorageFileType"][@"hash_5D5A7695E03A7A90"]
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.SetShowcaseMedal = function ( f17_arg0, f17_arg1 )
	local f17_local0 = f17_arg1:getModel() --[[ @ 0]]
	if f17_local0 and f17_local0.name then
		local f17_local1 = f17_local0.medalStatName:get() --[[ @ 0]]
		if f17_local1 then
			Engine[@"hash_4D43FF04BA67F511"]( f17_arg0, f17_local1 ) --[[ @ 0]]
			DataSources.PlayerShowcase.updateShowcaseMedal( f17_arg0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetShowcaseMedal = function ( f18_arg0, f18_arg1 )
	local f18_local0 = nil --[[ @ 0]]
	if f18_arg0 then
		f18_local0 = CoD.InspectionUtility.GetXUIDForMenu( f18_arg0 ) --[[ @ 0]]
	end
	if not f18_local0 then
		f18_local0 = Engine[@"GetXUID64"]( f18_arg1 ) --[[ @ 0]]
	end
	if f18_local0 then
		return Engine[@"hash_11FDB8C006BC46BE"]( f18_local0 )
	else
		
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.SetNextPrestigeCallingCard = function ( f19_arg0, f19_arg1, f19_arg2 )
	local f19_local0, f19_local1 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f19_arg0 ) --[[ @ 0]]
	CoD.ChallengesUtility.SetCallingCardForWidget( f19_arg2, CoD.PrestigeUtility.GetBackgroundIdByPLevel( f19_arg1, math.min( f19_local1, CoD.PrestigeUtility.GetPrestigeCap() ) + 1, Engine[@"CurrentSessionMode"]() ), f19_arg0.id ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.UpdateWZStatsFilter = function ( f20_arg0 )
	local f20_local0 = DataSources.PlayerBarracksStats.getModel( f20_arg0 ) --[[ @ 0]]
	f20_local0 = f20_local0.currentFilter --[[ @ 0]]
	if f20_local0 then
		f20_local0:set( f20_local0:get() % #CoD.PlayerStatsUtility.GetWZModeInfoTable() + 1 ) --[[ @ 0]]
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModeFilterNameForType = function ( f21_arg0 )
	return CoD.PlayerStatsUtility.GetWZGameModeTableValue( f21_arg0, "filterName", @"hash_0" )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStat = function ( f22_arg0, f22_arg1, f22_arg2 )
	return CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f22_arg0, nil, f22_arg1 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStatNoCombined = function ( f23_arg0, f23_arg1, f23_arg2 )
	return CoD.PlayerStatsUtility.HashPlayerStatsStorageNoCombinedLookupForMenu( f23_arg0, nil, f23_arg1 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStatRatio = function ( f24_arg0, f24_arg1, f24_arg2, f24_arg3 )
	return CoD.GetDisplayRatioFromTwoStats( CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f24_arg0, nil, f24_arg1 ) or 0, CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f24_arg0, nil, f24_arg2 ) or 0 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStatRatioRounded = function ( f25_arg0, f25_arg1, f25_arg2, f25_arg3 )
	local f25_local0 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f25_arg0, nil, f25_arg1 ) or 0 --[[ @ 0]]
	local f25_local1 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f25_arg0, nil, f25_arg2 ) or 0 --[[ @ 0]]
	local f25_local2 = nil --[[ @ 0]]
	if f25_local1 == 0 then
		f25_local2 = 0 --[[ @ 0]]
	else
		f25_local2 = f25_local0 / f25_local1 --[[ @ 0]]
	end
	return math.floor( f25_local2 + 0.5 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStatPerMinute = function ( f26_arg0, f26_arg1, f26_arg2, f26_arg3 )
	return math.floor( (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f26_arg0, nil, f26_arg1 ) or 0) / math.max( 1, (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f26_arg0, nil, f26_arg2 ) or 0) / 60 ) + 0.5 )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPlayerStorageStatsSum = function ( f27_arg0, f27_arg1, f27_arg2, f27_arg3 )
	return (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f27_arg0, nil, f27_arg1 ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f27_arg0, nil, f27_arg2 ) or 0)
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetArenaBarracksStat = function ( f28_arg0, f28_arg1, f28_arg2, f28_arg3 )
	return CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f28_arg0, {
		"arenaBest",
		f28_arg1,
		f28_arg2
	}, nil ) or 0
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetFirestreakIcon = function ( f29_arg0, f29_arg1 )
	return CoD.ArenaLeaguePlayUtility.GetFirestreak( CoD.PlayerStatsUtility.GetArenaBarracksStat( f29_arg0, @"leagueplaystats", @"points", nil ), CoD.PlayerStatsUtility.GetArenaBarracksStat( f29_arg0, @"leagueplaystats", @"hash_5DC602053653B486", nil ) )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetGameModePlayerStorageStat = function ( f30_arg0, f30_arg1, f30_arg2, f30_arg3, f30_arg4 )
	local f30_local0 = f30_arg2 --[[ @ 0]]
	local f30_local1 = 0 --[[ @ 0]]
	if type( f30_local0 ) == "table" then
		for f30_local5, f30_local6 in ipairs( f30_local0 ) --[[ @ 0]] do
			f30_local1 = f30_local1 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f30_arg1, {
				@"playerstatsbygametype",
				f30_local6
			}, f30_arg3 ) or 0) --[[ @ 0]]
		end
	else
		f30_local1 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f30_arg1, {
			@"playerstatsbygametype",
			f30_local0
		}, f30_arg3 ) or 0 --[[ @ 0]]
	end
	return f30_local1
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModePlayerStorageStat = function ( f31_arg0, f31_arg1, f31_arg2, f31_arg3 )
	local f31_local0 = DataSources.PlayerBarracksStats.getModel( f31_arg0 ) --[[ @ 0]]
	f31_local0 = f31_local0.currentFilter --[[ @ 0]]
	if f31_local0 then
		local f31_local1 = CoD.PlayerStatsUtility.GetWZGameModeTableValue( f31_local0:get(), "statPathName", @"hash_0" ) --[[ @ 0]]
		local f31_local2 = 0 --[[ @ 0]]
		if type( f31_local1 ) == "table" then
			for f31_local6, f31_local7 in ipairs( f31_local1 ) --[[ @ 0]] do
				f31_local2 = f31_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f31_arg1, {
					@"playerstatsbygametype",
					f31_local7
				}, f31_arg2 ) or 0) --[[ @ 0]]
			end
		else
			f31_local2 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f31_arg1, {
				@"playerstatsbygametype",
				f31_local1
			}, f31_arg2 ) or 0 --[[ @ 0]]
		end
		return f31_local2
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModeAveragePlayerStorageStatRatio = function ( f32_arg0, f32_arg1, f32_arg2, f32_arg3, f32_arg4 )
	local f32_local0 = DataSources.PlayerBarracksStats.getModel( f32_arg0 ) --[[ @ 0]]
	f32_local0 = f32_local0.currentFilter --[[ @ 0]]
	if f32_local0 then
		local f32_local1 = CoD.PlayerStatsUtility.GetWZGameModeTableValue( f32_local0:get(), "statPathName", @"hash_0" ) --[[ @ 0]]
		local f32_local2 = 0 --[[ @ 0]]
		local f32_local3 = 0 --[[ @ 0]]
		if type( f32_local1 ) == "table" then
			for f32_local7, f32_local8 in ipairs( f32_local1 ) --[[ @ 0]] do
				f32_local2 = f32_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f32_arg1, {
					@"playerstatsbygametype",
					f32_local8
				}, f32_arg2 ) or 0) --[[ @ 0]]
				f32_local3 = f32_local3 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f32_arg1, {
					@"playerstatsbygametype",
					f32_local8
				}, f32_arg3 ) or 0) --[[ @ 0]]
			end
		else
			f32_local2 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f32_arg1, {
				@"playerstatsbygametype",
				f32_local1
			}, f32_arg2 ) or 0 --[[ @ 0]]
			f32_local3 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f32_arg1, {
				@"playerstatsbygametype",
				f32_local1
			}, f32_arg3 ) or 0 --[[ @ 0]]
		end
		return CoD.GetDisplayRatioFromTwoStats( f32_local2, f32_local3 )
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZCleanUpsPerGame = function ( f33_arg0, f33_arg1, f33_arg2 )
	local f33_local0 = DataSources.PlayerBarracksStats.getModel( f33_arg0 ) --[[ @ 0]]
	f33_local0 = f33_local0.currentFilter --[[ @ 0]]
	if f33_local0 then
		local f33_local1 = CoD.PlayerStatsUtility.GetWZGameModeTableValue( f33_local0:get(), "statPathName", @"hash_0" ) --[[ @ 0]]
		local f33_local2 = 0 --[[ @ 0]]
		local f33_local3 = 0 --[[ @ 0]]
		if type( f33_local1 ) == "table" then
			for f33_local7, f33_local8 in ipairs( f33_local1 ) --[[ @ 0]] do
				f33_local2 = f33_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
					@"playerstatsbygametype",
					f33_local8
				}, @"downs_eliminated" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
					@"playerstatsbygametype",
					f33_local8
				}, @"downs_eliminated_team" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
					@"playerstatsbygametype",
					f33_local8
				}, @"kills_eliminated" ) or 0) --[[ @ 0]]
				f33_local3 = f33_local3 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
					@"playerstatsbygametype",
					f33_local8
				}, @"total_games_played" ) or 0) --[[ @ 0]]
			end
		else
			f33_local2 = f33_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
				@"playerstatsbygametype",
				f33_local1
			}, @"downs_eliminated" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
				@"playerstatsbygametype",
				f33_local1
			}, @"downs_eliminated_team" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
				@"playerstatsbygametype",
				f33_local1
			}, @"kills_eliminated" ) or 0) --[[ @ 0]]
			f33_local3 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f33_arg1, {
				@"playerstatsbygametype",
				f33_local1
			}, @"total_games_played" ) or 0 --[[ @ 0]]
		end
		return CoD.GetDisplayRatioFromTwoStats( f33_local2, f33_local3 )
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModeHighestPlayerStorageStat = function ( f34_arg0, f34_arg1, f34_arg2, f34_arg3 )
	local f34_local0 = DataSources.PlayerBarracksStats.getModel( f34_arg0 ) --[[ @ 0]]
	f34_local0 = f34_local0.currentFilter --[[ @ 0]]
	if f34_local0 then
		local f34_local1 = CoD.PlayerStatsUtility.GetWZGameModeTableValue( f34_local0:get(), "statPathName", @"hash_0" ) --[[ @ 0]]
		local f34_local2 = 0 --[[ @ 0]]
		if type( f34_local1 ) == "table" then
			for f34_local6, f34_local7 in ipairs( f34_local1 ) --[[ @ 0]] do
				local f34_local8 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f34_arg1, {
					@"playerstatsbygametype",
					f34_local7
				}, f34_arg2 ) --[[ @ 0]]
				if f34_local8 ~= nil and f34_local2 < f34_local8 then
					f34_local2 = f34_local8 --[[ @ 0]]
				end
			end
		else
			f34_local2 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f34_arg1, {
				@"playerstatsbygametype",
				f34_local1
			}, f34_arg2 ) or 0 --[[ @ 0]]
		end
		return f34_local2
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZGameModeAggregatePlayerStorageStats = function ( f35_arg0, f35_arg1, f35_arg2, f35_arg3 )
	local f35_local0 = DataSources.PlayerBarracksStats.getModel( f35_arg0 ) --[[ @ 0]]
	f35_local0 = f35_local0.currentFilter --[[ @ 0]]
	if f35_local0 then
		local f35_local1 = CoD.PlayerStatsUtility.GetWZGameModeTableValue( f35_local0:get(), "statPathName", @"hash_0" ) --[[ @ 0]]
		local f35_local2 = 0 --[[ @ 0]]
		if type( f35_local1 ) == "table" then
			for f35_local9, f35_local10 in ipairs( f35_local1 ) --[[ @ 0]] do
				for f35_local6, f35_local7 in ipairs( f35_arg2 ) --[[ @ 0]] do
					f35_local2 = f35_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f35_arg1, {
						@"playerstatsbygametype",
						f35_local10
					}, f35_local7 ) or 0) --[[ @ 0]]
				end
			end
		else
			for f35_local9, f35_local10 in ipairs( f35_arg2 ) --[[ @ 0]] do
				f35_local2 = f35_local2 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f35_arg1, {
					@"playerstatsbygametype",
					f35_local1
				}, f35_local10 ) or 0) --[[ @ 0]]
			end
		end
		return f35_local2
	else
		return 0
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetWZTopPlacements = function ( f36_arg0, f36_arg1, f36_arg2 )
	return 0 + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f36_arg1, {
		@"playerstatsbygametype",
		CoD.PlayerStatsUtility.GetWZGameModeTableValue( CoD.PlayerStatsUtility.WZGameModeDisplayType.SOLO, "statPathName", @"hash_0" )
	}, @"hash_6429D1FCCDEF2C9" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f36_arg1, {
		@"playerstatsbygametype",
		CoD.PlayerStatsUtility.GetWZGameModeTableValue( CoD.PlayerStatsUtility.WZGameModeDisplayType.DUOS, "statPathName", @"hash_0" )
	}, @"hash_7B8D2C77874A1C24" ) or 0) + (CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f36_arg1, {
		@"playerstatsbygametype",
		CoD.PlayerStatsUtility.GetWZGameModeTableValue( CoD.PlayerStatsUtility.WZGameModeDisplayType.QUADS, "statPathName", @"hash_0" )
	}, @"hash_5E9A745460A10F80" ) or 0)
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetRank = function ( f37_arg0, f37_arg1 )
	local f37_local0, f37_local1 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f37_arg0 ) --[[ @ 0]]
	local f37_local2 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f37_arg0, nil, @"paragon_rank" ) or 0 --[[ @ 0]]
	local f37_local3 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f37_local3 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
		return CoD.WZUtility.GetDecoratedStringForRank( f37_local0, f37_local2, f37_local1 )
	elseif CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f37_local3, f37_arg0 ) then
		return Engine[@"GetParagonRankDisplayLevel"]( f37_local2, f37_local3 )
	else
		return Engine[@"GetRankDisplayLevel"]( f37_local0 )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetRankColor = function ( f38_arg0, f38_arg1 )
	local f38_local0, f38_local1 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f38_arg0 ) --[[ @ 0]]
	local f38_local2 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f38_local2 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] and IsGameModeParagonCapable( f38_local2 ) and Engine[@"GetPrestigeCap"]( f38_local2 ) <= f38_local1 then
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.PlayerParagonOrange )
	else
		return CoD.ColorUtility.ConvertTableToRGB( ColorSet.T8__BEIGE__HEADER )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetRankIcon = function ( f39_arg0, f39_arg1 )
	local f39_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f39_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"blacktransparent"
	else
		local f39_local1, f39_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f39_arg0 ) --[[ @ 0]]
		if f39_local2 > 0 then
			return Engine[@"hash_6E21763E1EB756F8"]( f39_local2, f39_local0 )
		else
			return CoD.RankUtility.GetRankInfoField( f39_local0, f39_local1, @"hash_5BFF4CC56C2092F0", @"blacktransparent" )
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetRankIconLarge = function ( f40_arg0, f40_arg1, f40_arg2 )
	local f40_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f40_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"blacktransparent"
	else
		local f40_local1, f40_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f40_arg0 ) --[[ @ 0]]
		if CoD.PrestigeUtility.GetPrestigeCap( f40_local0 ) <= f40_local2 then
			local f40_local3 = CoD.CustomizePrestigeIconUtility.GetCurrentParagonIconId( f40_arg1, f40_local0 ) --[[ @ 0]]
			if not f40_local3 or f40_local3 == 0 then
				return Engine[@"hash_2FC100C7712C1987"]( f40_local2, f40_local0 )
			else
				return Engine[@"hash_2C8206CA556C230"]( f40_local3, f40_local0 )
			end
		elseif f40_local2 > 0 then
			return Engine[@"hash_2FC100C7712C1987"]( f40_local2, f40_local0 )
		else
			return CoD.RankUtility.GetRankInfoField( f40_local0, f40_local1, @"hash_78027A8209C5D65F", @"blacktransparent" )
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetRankTitle = function ( f41_arg0, f41_arg1 )
	local f41_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f41_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"hash_0"
	else
		local f41_local1, f41_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f41_arg0 ) --[[ @ 0]]
		return CoD.GetRankName( f41_local1, f41_local2, f41_local0 )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetLevelString = function ( f42_arg0, f42_arg1 )
	local f42_local0, f42_local1 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f42_arg0 ) --[[ @ 0]]
	local f42_local2 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f42_local2 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"hash_0"
	elseif IsGameModeParagonCapable( f42_local2 ) and Engine[@"GetPrestigeCap"]( f42_local2 ) <= f42_local1 then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_621235EA457AB637", Engine[@"GetParagonRankDisplayLevel"]( CoD.PlayerStatsUtility.HashStorageLookupForMenu( f42_arg0, {
			@"playerstatslist",
			@"paragon_rank"
		} ), f42_local2 ) )
	elseif f42_local2 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2294790D215078A9", CoD.WZUtility.GetWZLevel( CoD.RankUtility.GetRankInfoField( f42_local2, f42_local0, @"level", 1 ) ) )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_621235EA457AB637", CoD.RankUtility.GetRankInfoField( f42_local2, f42_local0, @"level", 1 ) )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetCurrentXPForRank = function ( f43_arg0, f43_arg1 )
	local f43_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f43_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return 0
	else
		return Engine[@"hash_7330C6B74568245D"]( f43_arg0.m_ownerController, f43_local0, false )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetXPToNextRank = function ( f44_arg0, f44_arg1 )
	local f44_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f44_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return 0
	else
		return Engine[@"hash_7330C6B74568245D"]( f44_arg0.m_ownerController, f44_local0, true )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetCurrentXPOverNextRankXP = function ( f45_arg0, f45_arg1 )
	local f45_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f45_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return ""
	end
	local f45_local1, f45_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndXPFromMenuStorageBuffer( f45_arg0 ) --[[ @ 0]]
	local f45_local3 = CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f45_local0, f45_arg0 ) --[[ @ 0]]
	if f45_local3 then
		f45_local1 = CoD.PlayerStatsUtility.HashStorageLookupForMenu( f45_arg0, {
			@"playerstatslist",
			@"paragon_rank"
		} ) --[[ @ 0]]
		f45_local2 = CoD.PlayerStatsUtility.GetPrestigeMasterAbsoluteXP( f45_local0, CoD.PlayerStatsUtility.HashStorageLookupForMenu( f45_arg0, {
			@"playerstatslist",
			@"hash_5460BE5A20FCF3D8"
		} ) ) --[[ @ 0]]
	end
	local f45_local4 --[[ @ 0]]
	if f45_local3 then
		f45_local4 = Engine[@"hash_5E7C7AB06A7E4905"]( f45_local1, f45_local0 ) --[[ @ 0]]
		if not f45_local4 then
		
		else
			return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7309AC35888034C2", f45_local2, f45_local4 )
		end
	end
	f45_local4 = CoD.RankUtility.GetRankInfoField( f45_local0, f45_local1, @"maxxp", 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextRank = function ( f46_arg0, f46_arg1 )
	local f46_local0 = CoD.BaseUtility.GetMenuSessionMode( f46_arg0 ) --[[ @ 0]]
	if f46_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return 0
	else
		return CoD.RankUtility.GetRankInfoField( f46_local0, CoD.PlayerStatsUtility.GetCurrentRankAndXPFromMenuStorageBuffer( f46_arg0 ) + 1, @"level", 1 )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetCurrentRankProgress = function ( f47_arg0, f47_arg1, f47_arg2, f47_arg3, f47_arg4 )
	local f47_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f47_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return 0
	end
	local f47_local1, f47_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndXPFromMenuStorageBuffer( f47_arg0 ) --[[ @ 0]]
	local f47_local3 = CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f47_local0, f47_arg0 ) --[[ @ 0]]
	if not f47_local3 or not Engine[@"hash_109F8F1C5A3513B"]( f47_local1, f47_local0 ) then
		local f47_local4 = CoD.RankUtility.GetRankInfoField( f47_local0, f47_local1, @"minxp", 0 ) --[[ @ 0]]
	end
	if not f47_local3 or not Engine[@"hash_5E7C7AB06A7E4905"]( f47_local1, f47_local0 ) then
		local f47_local5 = CoD.RankUtility.GetRankInfoField( f47_local0, f47_local1, @"maxxp", 0 ) --[[ @ 0]]
	end
	if f47_local3 then
		f47_local1 = CoD.PlayerStatsUtility.HashStorageLookupForMenu( f47_arg0, {
			@"playerstatslist",
			@"paragon_rank"
		} ) --[[ @ 0]]
		f47_local2 = CoD.PlayerStatsUtility.GetPrestigeMasterAbsoluteXP( f47_local0, CoD.PlayerStatsUtility.HashStorageLookupForMenu( f47_arg0, {
			@"playerstatslist",
			@"hash_5460BE5A20FCF3D8"
		} ) ) --[[ @ 0]]
		local f47_local4 = Engine[@"hash_109F8F1C5A3513B"]( f47_local1, f47_local0 ) --[[ @ 0]]
		local f47_local5 = Engine[@"hash_5E7C7AB06A7E4905"]( f47_local1, f47_local0 ) --[[ @ 0]]
	end
	return (f47_local2 - f47_local4) / math.max( 1, f47_local5 - f47_local4 ) or 0, 0, 0, 0
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextRankIcon = function ( f48_arg0, f48_arg1 )
	local f48_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f48_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"blacktransparent"
	end
	local f48_local1, f48_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f48_arg0 ) --[[ @ 0]]
	local f48_local3 = CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f48_local0, f48_arg0 ) --[[ @ 0]]
	local f48_local4 = f48_local1 + 1 --[[ @ 0]]
	if f48_local4 > CoD.RankUtility.GetRankCap() and not f48_local3 then
		f48_local4 = f48_local1 --[[ @ 0]]
	end
	return Engine[@"GetRankIcon"]( f48_local4, f48_local2, f48_local0 ) or @"blacktransparent"
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextPrestigeTitle = function ( f49_arg0, f49_arg1 )
	local f49_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f49_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"hash_0"
	else
		local f49_local1, f49_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f49_arg0 ) --[[ @ 0]]
		return CoD.GetRankName( f49_local1, math.min( f49_local2 + 1, CoD.PrestigeUtility.GetPrestigeCap() ), f49_local0 )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextPrestigeIcon = function ( f50_arg0, f50_arg1, f50_arg2 )
	local f50_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
	if f50_local0 == Enum[@"eModes"][@"hash_2B22E0240605CFFE"] then
		return @"blacktransparent"
	else
		local f50_local1, f50_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f50_arg0 ) --[[ @ 0]]
		local f50_local3 = math.min( f50_local2 + 1, CoD.PrestigeUtility.GetPrestigeCap() ) --[[ @ 0]]
		if f50_arg1 then
			return Engine[@"hash_2FC100C7712C1987"]( f50_local3, f50_local0 )
		else
			return Engine[@"hash_6E21763E1EB756F8"]( f50_local3, f50_local0 )
		end
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPrestigeProgress = function ( f51_arg0, f51_arg1, f51_arg2, f51_arg3, f51_arg4 )
	local f51_local0 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f51_arg0, nil, @"rank" ) or 0 --[[ @ 0]]
	local f51_local1 = CoD.RankUtility.GetRankCap() --[[ @ 0]]
	if CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( CoD.BaseUtility.GetMenuSessionMode( f51_arg0 ), f51_arg0 ) then
		f51_local0 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f51_arg0, nil, @"paragon_rank" ) or 0 --[[ @ 0]]
		f51_local1 = CoD.RankUtility.MAX_PARAGON_RANK --[[ @ 0]]
	end
	return f51_local0 / math.max( 1, f51_local1 ), 0, 0, 0
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPrestigeProgressFractionString = function ( f52_arg0, f52_arg1 )
	local f52_local0 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f52_arg0, nil, @"rank" ) or 0 --[[ @ 0]]
	local f52_local1 = CoD.RankUtility.GetRankCap() --[[ @ 0]]
	local f52_local2 = CoD.BaseUtility.GetMenuSessionMode( f52_arg0 ) --[[ @ 0]]
	if CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f52_local2, f52_arg0 ) then
		f52_local0 = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f52_arg0, nil, @"paragon_rank" ) or 0 --[[ @ 0]]
		f52_local1 = CoD.RankUtility.MAX_PARAGON_RANK --[[ @ 0]]
	end
	if f52_local2 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] and not CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f52_local2, f52_arg0 ) then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_631CF0F51CCA3A27", f52_local0 + 1, @"hash_54008CE61FE52DCD" )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_631CF0F51CCA3A27", f52_local0 + 1, math.max( 1, f52_local1 + 1 ) )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPrestigeRequirementString = function ( f53_arg0, f53_arg1 )
	local f53_local0 = CoD.BaseUtility.GetMenuSessionMode( f53_arg0 ) --[[ @ 0]]
	if f53_local0 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] and not CoD.PlayerStatsUtility.IsPrestigeMasterForMenu( f53_local0, f53_arg0 ) then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5E84CE29A8B160AD", @"hash_54008CE61FE52DCD" )
	else
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5E84CE29A8B160AD", math.max( 1, CoD.RankUtility.GetRankCap() + 1 ) )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPrestigeRewardsString = function ( f54_arg0, f54_arg1 )
	local f54_local0 = CoD.BaseUtility.GetMenuSessionMode( f54_arg0 ) --[[ @ 0]]
	local f54_local1, f54_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f54_arg0 ) --[[ @ 0]]
	local f54_local3 = math.min( f54_local2 + 1, CoD.PrestigeUtility.GetPrestigeCap() ) --[[ @ 0]]
	if CoD.RankUtility.GetRankCap() <= f54_local1 then
		return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4345CB99AE756A05", f54_local3 )
	else
		return CoD.GetRankName( 0, f54_local3, f54_local0 )
	end
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextPrestigeString = function ( f55_arg0, f55_arg1 )
	local f55_local0 = CoD.BaseUtility.GetMenuSessionMode( f55_arg0 ) --[[ @ 0]]
	local f55_local1, f55_local2 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f55_arg0 ) --[[ @ 0]]
	return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_39E3050512D6C49B", math.min( f55_local2 + 1, CoD.PrestigeUtility.GetPrestigeCap() ) )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetNextPrestigeFanfareText = function ( f56_arg0, f56_arg1 )
	local f56_local0, f56_local1 = CoD.PlayerStatsUtility.GetCurrentRankAndPrestigeFromMenuStorageBuffer( f56_arg0 ) --[[ @ 0]]
	return Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2157400D2DF93470", math.min( f56_local1 + 1, CoD.PrestigeUtility.GetPrestigeCap() ) )
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.GetPrestigeMasterAbsoluteXP = function ( f57_arg0, f57_arg1 )
	return Engine[@"hash_109F8F1C5A3513B"]( CoD.RankUtility.GetRankCap( f57_arg0 ) + 1, f57_arg0 ) + f57_arg1
end
 --[[ @ 0]]
CoD.PlayerStatsUtility.UpdateZMHighestStats = function ( f58_arg0, f58_arg1 )
	DataSources.PlayerBarracksStats.updateZMHighestStats( f58_arg0, f58_arg1 ) --[[ @ 0]]
end
 --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "PlayerBarracksStats", "PlayerBarracksStats", function ( f59_arg0, f59_arg1 )
	local f59_local0 = f59_arg0:create( "currentFilter" ) --[[ @ 0]]
	f59_local0:set( CoD.PlayerStatsUtility.WZGameModeDisplayType.ALL ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound1" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound1Map" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound2" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound2Map" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound3" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestRound3Map" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore1" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore1Map" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore2" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore2Map" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore3" ) --[[ @ 0]]
	f59_arg0:create( "zmHighestScore3Map" ) --[[ @ 0]]
end, false, {
	updateZMHighestStats = function ( f60_arg0, f60_arg1 )
		local f60_local0 = DataSources.PlayerBarracksStats.getModel( f60_arg1 ) --[[ @ 0]]
		local f60_local1 = {} --[[ @ 0]]
		local f60_local2 = {} --[[ @ 0]]
		for f60_local6, f60_local7 in ipairs( CoD.PlayerStatsUtility.ZMMaps ) --[[ @ 0]] do
			table.insert( f60_local1, {
				mapName = f60_local7,
				highestRoundReached = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f60_arg0, {
					@"playerstatsbymap",
					f60_local7,
					@"hash_74E26CA9652802FB",
					@"zclassic",
					@"stats"
				}, @"highest_round_reached" ) or 0
			} ) --[[ @ 0]]
			table.insert( f60_local2, {
				mapName = f60_local7,
				highestScore = CoD.PlayerStatsUtility.HashPlayerStatsStorageLookupForMenu( f60_arg0, {
					@"playerstatsbymap",
					f60_local7,
					@"hash_74E26CA9652802FB",
					@"zstandard",
					@"stats"
				}, @"highest_score" ) or 0
			} ) --[[ @ 0]]
		end
		if f60_local1 then
			table.sort( f60_local1, function ( f61_arg0, f61_arg1 )
				return f61_arg1.highestRoundReached < f61_arg0.highestRoundReached
			end ) --[[ @ 0]]
			if f60_local1[1] then
				f60_local0.zmHighestRound1:set( f60_local1[1].highestRoundReached ) --[[ @ 0]]
				f60_local0.zmHighestRound1Map:set( CoD.MapUtility.GetMapValue( f60_local1[1].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
			if f60_local1[2] then
				f60_local0.zmHighestRound2:set( f60_local1[2].highestRoundReached ) --[[ @ 0]]
				f60_local0.zmHighestRound2Map:set( CoD.MapUtility.GetMapValue( f60_local1[2].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
			if f60_local1[3] then
				f60_local0.zmHighestRound3:set( f60_local1[3].highestRoundReached ) --[[ @ 0]]
				f60_local0.zmHighestRound3Map:set( CoD.MapUtility.GetMapValue( f60_local1[3].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
		end
		if f60_local2 then
			table.sort( f60_local2, function ( f62_arg0, f62_arg1 )
				return f62_arg1.highestScore < f62_arg0.highestScore
			end ) --[[ @ 0]]
			if f60_local2[1] then
				f60_local0.zmHighestScore1:set( f60_local2[1].highestScore ) --[[ @ 0]]
				f60_local0.zmHighestScore1Map:set( CoD.MapUtility.GetMapValue( f60_local2[1].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
			if f60_local2[2] then
				f60_local0.zmHighestScore2:set( f60_local2[2].highestScore ) --[[ @ 0]]
				f60_local0.zmHighestScore2Map:set( CoD.MapUtility.GetMapValue( f60_local2[2].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
			if f60_local2[3] then
				f60_local0.zmHighestScore3:set( f60_local2[3].highestScore ) --[[ @ 0]]
				f60_local0.zmHighestScore3Map:set( CoD.MapUtility.GetMapValue( f60_local2[3].mapName, "mapName", @"hash_0" ) ) --[[ @ 0]]
			end
		end
	end
} ) --[[ @ 0]]
DataSourceHelpers.PerControllerDataSourceSetup( "PlayerBarracksMerits", "PlayerBarracksMerits", function ( f63_arg0, f63_arg1 )
	local f63_local0 = CoD.PlayerStatsUtility.GetStorageBufferForPlayer( f63_arg1 ) --[[ @ 0]]
	local f63_local1 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"killxp"
	} ) --[[ @ 0]]
	local f63_local2 = f63_arg0:create( "kills" ) --[[ @ 0]]
	local f63_local3 = f63_local2:create( "statMerits" ) --[[ @ 0]]
	f63_local3:set( f63_local1 ) --[[ @ 0]]
	f63_local3 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"placementxp"
	} ) --[[ @ 0]]
	local f63_local4 = f63_arg0:create( "top5" ) --[[ @ 0]]
	local f63_local5 = f63_local4:create( "statMerits" ) --[[ @ 0]]
	f63_local5:set( f63_local3 ) --[[ @ 0]]
	f63_local5 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"winxp"
	} ) --[[ @ 0]]
	local f63_local6 = f63_arg0:create( "wins" ) --[[ @ 0]]
	local f63_local7 = f63_local6:create( "statMerits" ) --[[ @ 0]]
	f63_local7:set( f63_local5 ) --[[ @ 0]]
	f63_local7 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"challengexp"
	} ) --[[ @ 0]]
	local f63_local8 = f63_arg0:create( "challenges" ) --[[ @ 0]]
	local f63_local9 = f63_local8:create( "statMerits" ) --[[ @ 0]]
	f63_local9:set( f63_local7 ) --[[ @ 0]]
	f63_local9 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"contractxp"
	} ) --[[ @ 0]]
	local f63_local10 = f63_arg0:create( "contracts" ) --[[ @ 0]]
	local f63_local11 = f63_local10:create( "statMerits" ) --[[ @ 0]]
	f63_local11:set( f63_local9 ) --[[ @ 0]]
	f63_local11 = CoD.PlayerStatsUtility.HashStorageLookup( f63_local0, {
		@"playerstatslist",
		@"medalxp"
	} ) --[[ @ 0]]
	local f63_local12 = f63_arg0:create( "medals" ) --[[ @ 0]]
	local f63_local13 = f63_local12:create( "statMerits" ) --[[ @ 0]]
	f63_local13:set( f63_local11 ) --[[ @ 0]]
end ) --[[ @ 0]]
DataSources.MPMedalTabs = ListHelper_SetupDataSource( "MPMedalTabs", function ( f64_arg0 )
	if IsWarzone() then
		return {}
	else
		local f64_local0 = function ( f65_arg0, f65_arg1 )
			return f65_arg1.models.timesEarned < f65_arg0.models.timesEarned
		end
		 --[[ @ 0]]
		local f64_local1 = function ( f66_arg0, f66_arg1 )
			return f66_arg0.models.timesEarned < f66_arg1.models.timesEarned
		end
		 --[[ @ 0]]
		local f64_local2 = {} --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_211443FB63782639"
			},
			properties = {
				category = @"combat",
				sortFunc = f64_local1
			}
		} ) --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_18B0D8B4A861BBC5"
			},
			properties = {
				category = @"specialist",
				sortFunc = f64_local0
			}
		} ) --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_2EB1D30BFD69C119"
			},
			properties = {
				category = @"hash_4A67E776BB68E95C",
				sortFunc = f64_local0
			}
		} ) --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_2D17CC7D16033AEA"
			},
			properties = {
				category = @"scorestreak",
				sortFunc = f64_local0
			}
		} ) --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_1079C859C8600D9E"
			},
			properties = {
				category = @"hash_625ABA2BF94A7D7B",
				sortFunc = f64_local0
			}
		} ) --[[ @ 0]]
		table.insert( f64_local2, {
			models = {
				name = @"hash_5ED2FACC41C9E672"
			},
			properties = {
				category = @"gamemode",
				sortFunc = f64_local0
			}
		} ) --[[ @ 0]]
		return f64_local2
	end
end ) --[[ @ 0]]
DataSources.MedalsList = ListHelper_SetupDataSource( "MedalsList", function ( f67_arg0, f67_arg1 )
	local f67_local0 = {} --[[ @ 0]]
	local f67_local1 = nil --[[ @ 0]]
	local f67_local2 = CoD.BaseUtility.GetMenuStorageBuffer( f67_arg1.menu ) --[[ @ 0]]
	if f67_local2 then
		f67_local1 = f67_local2.PlayerStatsList --[[ @ 0]]
	end
	local f67_local3 = CoD.PlayerStatsUtility.GetMedalsListTable() --[[ @ 0]]
	local f67_local4 = CoD.PlayerStatsUtility.GetEarnedMedalsListTable( f67_local1 ) --[[ @ 0]]
	if f67_local4 then
		local f67_local5 = nil --[[ @ 0]]
		for f67_local11, f67_local12 in pairs( f67_local3 ) --[[ @ 0]] do
			local f67_local13 = f67_local4[f67_local12.medalReference] --[[ @ 0]]
			local f67_local9 --[[ @ 0]]
			if (not f67_arg1.menu._category or f67_arg1.menu._category ~= f67_local12.medalCategory) and Engine[@"CurrentSessionMode"]() ~= Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
				f67_local9 = false --[[ @ 0]]
			else
				f67_local9 = true --[[ @ 0]]
			end
			if f67_local13 and f67_local13 > 0 and f67_local9 then
				local f67_local10 = nil --[[ @ 0]]
				if not IsWarzone() then
					f67_local10 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_7D6137AA2004DB90", f67_local12.baseMedalXP * f67_local13 ) --[[ @ 0]]
				else
					f67_local10 = Engine[@"hash_4F9F1239CFD921FE"]( @"hash_1BCE3D9B07DE63B7", f67_local12.baseMedalXP * f67_local13 ) --[[ @ 0]]
				end
				if f67_local5 and f67_local12.name == @"hash_6A3BB5B3F6DB9EF" then
					f67_local5.timesEarned = f67_local5.timesEarned + f67_local13 --[[ @ 0]]
				end
				table.insert( f67_local0, {
					models = {
						name = f67_local12.name,
						medalStatName = f67_local12.medalReference,
						description = f67_local12.description,
						timesEarned = f67_local13,
						iconSmall = f67_local12.iconSmall,
						iconLarge = f67_local12.iconLarge,
						xpValue = f67_local10
					}
				} ) --[[ @ 0]]
				if f67_local12.name == @"hash_6A3BB5B3F6DB9EF" then
					f67_local5 = f67_local0[#f67_local0].models --[[ @ 0]]
				end
			end
		end
		if f67_arg1.menu._sortFunc then
			table.sort( f67_local0, f67_arg1.menu._sortFunc ) --[[ @ 0]]
		end
	end
	return f67_local0
end, true ) --[[ @ 0]]
DataSources.FeaturedMedals = {
	preparedForController = {},
	preparedForArenaPerController = {},
	getHighestValueEarnedMedal = function ( f68_arg0, f68_arg1, f68_arg2 )
		for f68_local7, f68_local8 in ipairs( f68_arg2 ) --[[ @ 0]] do
			if f68_local7 == #f68_arg2 then
				return f68_local8
			end
			local f68_local3 = Engine[@"TableFindRows"]( DataSources.FeaturedMedals.MedalTable, CoD.ScoreInfoTable.ScriptRefCol, f68_local8 ) --[[ @ 0]]
			local f68_local4 = f68_local3 and f68_local3[1] --[[ @ 0]]
			if f68_local4 then
				local f68_local5 = Engine[@"hash_4C6F8EC444864600"]( DataSources.FeaturedMedals.MedalTable, f68_local4, CoD.ScoreInfoTable.MedalRefCol ) --[[ @ 0]]
				if f68_arg1 and f68_arg1[f68_local5] then
					local f68_local6 = 0 --[[ @ 0]]
					if LuaUtils.IsArenaMode() then
						f68_local6 = f68_arg1[f68_local5].arenaValue:get() --[[ @ 0]]
					else
						f68_local6 = f68_arg1[f68_local5].statValue:get() --[[ @ 0]]
					end
					if f68_local6 and f68_local6 > 0 then
						return f68_local8
					end
				end
			end
		end
		return nil
	end,
	getHighestValueWZMedals = function ( f69_arg0, f69_arg1 )
		local f69_local0 = CoD.PlayerStatsUtility.GetMedalsListTable() --[[ @ 0]]
		local f69_local1 = {} --[[ @ 0]]
		local f69_local2, f69_local3 = nil --[[ @ 0]]
		f69_local1[1] = nil --[[ @ 0]]
		f69_local1[2] = f69_local2 --[[ @ 0]]
		f69_local1[3] = f69_local3 --[[ @ 0]]
		local f69_local4 = {
			0,
			0,
			0
		} --[[ @ 0]]
		for f69_local7, f69_local8 in pairs( f69_local0 ) --[[ @ 0]] do
			local f69_local9 = f69_local8.medalReference --[[ @ 0]]
			if f69_arg1 and f69_arg1[f69_local9] then
				local f69_local6 = f69_arg1[f69_local9].statValue:get() --[[ @ 0]]
				if f69_local6 then
					if f69_local4[1] <= f69_local6 then
						f69_local4[3] = f69_local4[2] --[[ @ 0]]
						f69_local4[2] = f69_local4[1] --[[ @ 0]]
						f69_local1[3] = f69_local1[2] --[[ @ 0]]
						f69_local1[2] = f69_local1[1] --[[ @ 0]]
						f69_local4[1] = f69_local6 --[[ @ 0]]
						f69_local1[1] = f69_local7 --[[ @ 0]]
					end
					if f69_local4[2] <= f69_local6 then
						f69_local4[3] = f69_local4[2] --[[ @ 0]]
						f69_local1[3] = f69_local1[2] --[[ @ 0]]
						f69_local4[2] = f69_local6 --[[ @ 0]]
						f69_local1[2] = f69_local7 --[[ @ 0]]
					end
					if f69_local4[3] <= f69_local6 then
						f69_local4[3] = f69_local6 --[[ @ 0]]
						f69_local1[3] = f69_local7 --[[ @ 0]]
					end
				end
			end
		end
		return f69_local1[1], f69_local1[2], f69_local1[3]
	end,
	createModelsFn = function ( f70_arg0, f70_arg1, f70_arg2, f70_arg3 )
		local f70_local0 = {} --[[ @ 0]]
		local f70_local1 = Engine[@"TableFindRows"]( DataSources.FeaturedMedals.MedalTable, CoD.ScoreInfoTable.ScriptRefCol, f70_arg3 ) --[[ @ 0]]
		local f70_local2 = f70_local1 and f70_local1[1] --[[ @ 0]]
		if f70_local2 then
			local f70_local3 = Engine[@"hash_4C6F8EC444864600"]( DataSources.FeaturedMedals.MedalTable, f70_local2, CoD.ScoreInfoTable.MedalRefCol ) --[[ @ 0]]
			local f70_local4 = Engine[@"hash_2E00B2F29271C60B"]( Engine[@"hash_4C6F8EC444864600"]( DataSources.FeaturedMedals.MedalTable, f70_local2, CoD.ScoreInfoTable.MedalAssetCol ) ) --[[ @ 0]]
			local f70_local5 = 0 --[[ @ 0]]
			if f70_arg1 and f70_arg1[f70_local3] then
				if LuaUtils.IsArenaMode() then
					f70_local5 = f70_arg1[f70_local3].arenaValue:get() --[[ @ 0]]
				else
					f70_local5 = f70_arg1[f70_local3].statValue:get() --[[ @ 0]]
				end
			end
			if f70_local4 and f70_local3 and f70_local3 ~= @"hash_0" then
				f70_local0 = {
					name = f70_local4[@"stringref"] or @"hash_0",
					iconSmall = f70_local4[@"hash_5DA32D2BFAA81507"],
					timesEarned = f70_local5,
					medalReference = f70_local3
				} --[[ @ 0]]
			end
		end
		local f70_local3 = Engine[@"GetModelForController"]( f70_arg0 ) --[[ @ 0]]
		f70_local3 = f70_local3:create( "FeaturedMedals" ) --[[ @ 0]]
		f70_local3 = f70_local3:create( f70_arg2 ) --[[ @ 0]]
		for f70_local7, f70_local8 in pairs( f70_local0 ) --[[ @ 0]] do
			local f70_local9 = f70_local3:create( f70_local7 ) --[[ @ 0]]
			f70_local9:set( f70_local8 ) --[[ @ 0]]
		end
	end,
	prepare = function ( f71_arg0 )
		if not DataSources.FeaturedMedals.preparedForController then
			DataSources.FeaturedMedals.preparedForController = {} --[[ @ 0]]
		end
		if not DataSources.FeaturedMedals.preparedForArenaPerController then
			DataSources.FeaturedMedals.preparedForArenaPerController = {} --[[ @ 0]]
		end
		DataSources.FeaturedMedals.preparedForController[f71_arg0] = true --[[ @ 0]]
		DataSources.FeaturedMedals.preparedForArenaPerController[f71_arg0] = LuaUtils.IsArenaMode() --[[ @ 0]]
		local f71_local0 = nil --[[ @ 0]]
		local f71_local1 = CoD.PlayerStatsUtility.GetStorageBufferForPlayer( f71_arg0 ) --[[ @ 0]]
		if f71_local1 then
			f71_local0 = f71_local1.PlayerStatsList --[[ @ 0]]
		end
		if Engine[@"CurrentSessionMode"]() ~= Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "FeaturedMedal", CoD.PlayerStatsUtility.FeaturedMedalScriptRef ) --[[ @ 0]]
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "MultiKillMedal", DataSources.FeaturedMedals.getHighestValueEarnedMedal( f71_arg0, f71_local0, CoD.PlayerStatsUtility.MultiKillMedalScriptRefs ) ) --[[ @ 0]]
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "KillStreakMedal", DataSources.FeaturedMedals.getHighestValueEarnedMedal( f71_arg0, f71_local0, CoD.PlayerStatsUtility.KillStreakMedalScriptRefs ) ) --[[ @ 0]]
		else
			local f71_local2, f71_local3, f71_local4 = DataSources.FeaturedMedals.getHighestValueWZMedals( f71_arg0, f71_local0 ) --[[ @ 0]]
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "FeaturedMedal", f71_local2 ) --[[ @ 0]]
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "MultiKillMedal", f71_local3 ) --[[ @ 0]]
			DataSources.FeaturedMedals.createModelsFn( f71_arg0, f71_local0, "KillStreakMedal", f71_local4 ) --[[ @ 0]]
		end
	end,
	getModel = function ( f72_arg0 )
		local f72_local0 = Engine[@"CurrentSessionMode"]() --[[ @ 0]]
		local f72_local1 = f72_local0 ~= DataSources.FeaturedMedals.mode --[[ @ 0]]
		DataSources.FeaturedMedals.mode = f72_local0 --[[ @ 0]]
		if f72_local0 == Enum[@"eModes"][@"hash_3BF1DCC8138A9D39"] then
			DataSources.FeaturedMedals.MedalTable = CoD.ScoreInfoTable.BaseWZTable --[[ @ 0]]
		else
			DataSources.FeaturedMedals.MedalTable = CoD.ScoreInfoTable.BaseMPTable --[[ @ 0]]
		end
		if f72_local1 or not DataSources.FeaturedMedals.preparedForController or not DataSources.FeaturedMedals.preparedForController[f72_arg0] or not DataSources.FeaturedMedals.preparedForArenaPerController or DataSources.FeaturedMedals.preparedForArenaPerController[f72_arg0] ~= LuaUtils.IsArenaMode() then
			DataSources.FeaturedMedals.prepare( f72_arg0 ) --[[ @ 0]]
		end
		local f72_local2 = Engine[@"GetModelForController"]( f72_arg0 ) --[[ @ 0]]
		return f72_local2:create( "FeaturedMedals" )
	end
} --[[ @ 0]]
DataSources.BarrackWinsWZ = {
	preparedForController = {},
	prepare = function ( f73_arg0 )
		if not DataSources.BarrackWinsWZ.preparedForController then
			DataSources.BarrackWinsWZ.preparedForController = {} --[[ @ 0]]
		end
		DataSources.BarrackWinsWZ.preparedForController[f73_arg0] = true --[[ @ 0]]
		local f73_local0 = Engine[@"GetModelForController"]( f73_arg0 ) --[[ @ 0]]
		f73_local0 = f73_local0:create( "BarrackWinsWZ" ) --[[ @ 0]]
		local f73_local1 = CoD.GetCurrentPlayerStats( f73_arg0 ) --[[ @ 0]]
		if f73_local1 then
			local f73_local2 = f73_local1.PlayerStatsByGameType.warzone_solo.WINS.StatValue:get() --[[ @ 0]]
			local f73_local3 = f73_local0:create( "soloWins" ) --[[ @ 0]]
			f73_local3:set( f73_local2 ) --[[ @ 0]]
			f73_local3 = f73_local1.PlayerStatsByGameType.warzone_duo.WINS.StatValue:get() --[[ @ 0]]
			local f73_local4 = f73_local0:create( "duoWins" ) --[[ @ 0]]
			f73_local4:set( f73_local3 ) --[[ @ 0]]
			f73_local4 = f73_local1.PlayerStatsByGameType.warzone_quad.WINS.StatValue:get() --[[ @ 0]]
			local f73_local5 = f73_local0:create( "quadWins" ) --[[ @ 0]]
			f73_local5:set( f73_local4 ) --[[ @ 0]]
			f73_local5 = f73_local1.PlayerStatsByGameType.warzone_dbno.WINS.StatValue:get() --[[ @ 0]]
			local f73_local6 = f73_local0:create( "dbnoWins" ) --[[ @ 0]]
			f73_local6:set( f73_local5 ) --[[ @ 0]]
		end
	end,
	getModel = function ( f74_arg0 )
		if not DataSources.BarrackWinsWZ.preparedForController or not DataSources.BarrackWinsWZ.preparedForController[f74_arg0] then
			DataSources.BarrackWinsWZ.prepare( f74_arg0 ) --[[ @ 0]]
		end
		local f74_local0 = Engine[@"GetModelForController"]( f74_arg0 ) --[[ @ 0]]
		return f74_local0:create( "BarrackWinsWZ" )
	end
} --[[ @ 0]]
DataSources.PlayerShowcase = {
	getModel = function ( f75_arg0 )
		local f75_local0 = Engine[@"GetModelForController"]( f75_arg0 ) --[[ @ 0]]
		f75_local0 = f75_local0:create( "PlayerShowcase" ) --[[ @ 0]]
		f75_local0:create( "callingcards" ) --[[ @ 0]]
		f75_local0:create( "medal" ) --[[ @ 0]]
		DataSources.PlayerShowcase.updateShowcaseMedal( f75_arg0 ) --[[ @ 0]]
		return f75_local0
	end,
	updateShowcaseMedal = function ( f76_arg0 )
		local f76_local0 = Engine[@"GetModelForController"]( f76_arg0 ) --[[ @ 0]]
		f76_local0 = f76_local0:create( "PlayerShowcase" ) --[[ @ 0]]
		f76_local0 = f76_local0.medal --[[ @ 0]]
		local f76_local1 = CoD.PlayerStatsUtility.GetStorageBufferForPlayer( f76_arg0 ) --[[ @ 0]]
		local f76_local2 = nil --[[ @ 0]]
		if f76_local1 then
			f76_local2 = f76_local1.PlayerStatsList --[[ @ 0]]
		end
		local f76_local3 = @"hash_0" --[[ @ 0]]
		local f76_local4 = @"blacktransparent" --[[ @ 0]]
		local f76_local5 = 0 --[[ @ 0]]
		local f76_local6 = CoD.PlayerStatsUtility.GetShowcaseMedal( nil, f76_arg0 ) --[[ @ 0]]
		if not f76_local6 or f76_local6 == @"hash_0" then
			f76_local6 = @"stats_headshot" --[[ @ 0]]
		end
		local f76_local7 = Engine[@"TableLookup"]( CoD.ScoreInfoTable.BaseMPTable, CoD.ScoreInfoTable.MedalAssetCol, CoD.ScoreInfoTable.MedalRefCol, f76_local6 ) --[[ @ 0]]
		if f76_local7 and f76_local7 ~= @"hash_0" then
			local f76_local8 = Engine[@"hash_2E00B2F29271C60B"]( f76_local7 ) --[[ @ 0]]
			if f76_local8 then
				f76_local3 = f76_local8[@"stringref"] or @"hash_0" --[[ @ 0]]
				f76_local4 = f76_local8[@"hash_5DA32D2BFAA81507"] --[[ @ 0]]
			end
			if f76_local2 and f76_local2[f76_local6] then
				if LuaUtils.IsArenaMode() then
					f76_local5 = f76_local2[f76_local6].arenaValue:get() --[[ @ 0]]
				else
					f76_local5 = f76_local2[f76_local6].statValue:get() --[[ @ 0]]
				end
			end
		end
		local f76_local8 = f76_local0:create( "name" ) --[[ @ 0]]
		f76_local8:set( f76_local3 ) --[[ @ 0]]
		f76_local8 = f76_local0:create( "iconSmall" ) --[[ @ 0]]
		f76_local8:set( f76_local4 ) --[[ @ 0]]
		f76_local8 = f76_local0:create( "timesEarned" ) --[[ @ 0]]
		f76_local8:set( f76_local5 ) --[[ @ 0]]
	end
} --[[ @ 0]]
