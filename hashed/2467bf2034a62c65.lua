-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/cac/cactabbuttoninternal" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/newbreadcrumbcount" ) --[[ @ 0]]

CoD.CACTextTab = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CACTextTab.__defaultWidth = 240 --[[ @ 0]]
CoD.CACTextTab.__defaultHeight = 35 --[[ @ 0]]
CoD.CACTextTab.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CACTextTab ) --[[ @ 0]]
	self.id = "CACTextTab" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CACTabButtonInternal = CoD.CACTabButtonInternal.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	CACTabButtonInternal:linkToElementModel( self, nil, false, function ( model )
		CACTabButtonInternal.RestrictedIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CACTabButtonInternal:linkToElementModel( self, "name", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			CACTabButtonInternal.Text:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	CACTabButtonInternal:linkToElementModel( self, "name", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			CACTabButtonInternal.TextFocus:setText( LocalizeToUpperString( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CACTabButtonInternal ) --[[ @ 0]]
	self.CACTabButtonInternal = CACTabButtonInternal --[[ @ 0]]
	
	local newIcon = CoD.NewBreadcrumbCount.new( f1_arg0, f1_arg1, 0, 0, 218, 236, 0.5, 0.5, -26.5, -8.5 ) --[[ @ 0]]
	newIcon:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "breadcrumbCount", 0 )
			end
		}
	} ) --[[ @ 0]]
	newIcon:linkToElementModel( newIcon, "breadcrumbCount", true, function ( model )
		f1_arg0:updateElementState( newIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "breadcrumbCount"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	newIcon:linkToElementModel( self, "breadcrumb", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			newIcon:setModel( f7_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( newIcon ) --[[ @ 0]]
	self.newIcon = newIcon --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Unavailable",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNilOrTrue( self, f1_arg1, "available" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "available", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "available"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CACTabButtonInternal.id = "CACTabButtonInternal" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CACTextTab.__resetProperties = function ( f10_arg0 )
	f10_arg0.CACTabButtonInternal:completeAnimation() --[[ @ 0]]
	f10_arg0.CACTabButtonInternal:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CACTextTab.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Active = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f12_arg0.CACTabButtonInternal:completeAnimation() --[[ @ 0]]
			f12_arg0.CACTabButtonInternal:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.CACTabButtonInternal ) --[[ @ 0]]
		end
	},
	Unavailable = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CACTextTab.__onClose = function ( f14_arg0 )
	f14_arg0.CACTabButtonInternal:close() --[[ @ 0]]
	f14_arg0.newIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
