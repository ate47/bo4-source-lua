-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/scrollbars/listcounterbutton" ) --[[ @ 0]]

CoD.horizontalCounter = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.horizontalCounter.__defaultWidth = 300 --[[ @ 0]]
CoD.horizontalCounter.__defaultHeight = 37 --[[ @ 0]]
CoD.horizontalCounter.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.horizontalCounter ) --[[ @ 0]]
	self.id = "horizontalCounter" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local currentItem = LUI.UIText.new( 0.5, 0.5, -57, -12, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	currentItem:setAlpha( 0.65 ) --[[ @ 0]]
	currentItem:setText( "" ) --[[ @ 0]]
	currentItem:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	currentItem:setAlignment( Enum[@"luialignment"][@"lui_alignment_right"] ) --[[ @ 0]]
	currentItem:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( currentItem ) --[[ @ 0]]
	self.currentItem = currentItem --[[ @ 0]]
	
	local dividor = LUI.UIText.new( 0.5, 0.5, -4.5, 4.5, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	dividor:setAlpha( 0.65 ) --[[ @ 0]]
	dividor:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"mp/slash" ) ) --[[ @ 0]]
	dividor:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	dividor:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	self:addElement( dividor ) --[[ @ 0]]
	self.dividor = dividor --[[ @ 0]]
	
	local count = LUI.UIText.new( 0.5, 0.5, 12, 57, 0.5, 0.5, -9, 9 ) --[[ @ 0]]
	count:setAlpha( 0.65 ) --[[ @ 0]]
	count:setText( 200 ) --[[ @ 0]]
	count:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	count:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	count:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( count ) --[[ @ 0]]
	self.count = count --[[ @ 0]]
	
	local rightArrowBtn = CoD.listCounterButton.new( f1_arg0, f1_arg1, 0.5, 0.5, 50, 100, 0.5, 0.5, -25, 25 ) --[[ @ 0]]
	rightArrowBtn:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsElementInAnyState( self, "AtLeftAndRight", "NoItems" )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return IsElementInAnyState( self, "AtRight" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local5 = rightArrowBtn --[[ @ 0]]
	local leftArrowBtn = rightArrowBtn.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	leftArrowBtn( f1_local5, f1_local7.usingCursorInput, function ( f4_arg0 )
		f1_arg0:updateElementState( rightArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = rightArrowBtn --[[ @ 0]]
	leftArrowBtn = rightArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	leftArrowBtn( f1_local5, f1_local7.hidden, function ( f5_arg0 )
		f1_arg0:updateElementState( rightArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "hidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = rightArrowBtn --[[ @ 0]]
	leftArrowBtn = rightArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	leftArrowBtn( f1_local5, f1_local7.activeKeys, function ( f6_arg0 )
		f1_arg0:updateElementState( rightArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "activeKeys"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	rightArrowBtn:setZRot( -90 ) --[[ @ 0]]
	rightArrowBtn:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = rightArrowBtn --[[ @ 0]]
	leftArrowBtn = rightArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	leftArrowBtn( f1_local5, f1_local7.LastInput, function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	rightArrowBtn:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( rightArrowBtn, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsGamepad( controller ) then
			NavigateScrollButtonRight( self ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( self, controller, true ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( rightArrowBtn ) --[[ @ 0]]
	self.rightArrowBtn = rightArrowBtn --[[ @ 0]]
	
	leftArrowBtn = CoD.listCounterButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -99, -49, 0.5, 0.5, -25, 25 ) --[[ @ 0]]
	leftArrowBtn:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsElementInAnyState( self, "AtLeftAndRight", "NoItems" )
			end
		},
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return IsElementInAnyState( self, "AtLeft" )
			end
		}
	} ) --[[ @ 0]]
	f1_local7 = leftArrowBtn --[[ @ 0]]
	f1_local5 = leftArrowBtn.subscribeToModel --[[ @ 0]]
	local f1_local8 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.usingCursorInput, function ( f14_arg0 )
		f1_arg0:updateElementState( leftArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = leftArrowBtn --[[ @ 0]]
	f1_local5 = leftArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.hidden, function ( f15_arg0 )
		f1_arg0:updateElementState( leftArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "hidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local7 = leftArrowBtn --[[ @ 0]]
	f1_local5 = leftArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.activeKeys, function ( f16_arg0 )
		f1_arg0:updateElementState( leftArrowBtn, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "activeKeys"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	leftArrowBtn:setZRot( 90 ) --[[ @ 0]]
	leftArrowBtn:appendEventHandler( "input_source_changed", function ( f17_arg0, f17_arg1 )
		f17_arg1.menu = f17_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local7 = leftArrowBtn --[[ @ 0]]
	f1_local5 = leftArrowBtn.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local7, f1_local8.LastInput, function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	leftArrowBtn:registerEventHandler( "gain_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f19_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f19_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( leftArrowBtn, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if IsGamepad( controller ) then
			NavigateScrollButtonLeft( self ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) then
			CoD.GridAndListUtility.NavigateGridItemOnParentGridOrList( self, controller, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		elseif IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( leftArrowBtn ) --[[ @ 0]]
	self.leftArrowBtn = leftArrowBtn --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "AtLeftAndRight",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtLeftAndRight" )
			end
		},
		{
			stateName = "AtLeft",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtLeft" )
			end
		},
		{
			stateName = "AtRight",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "AtRight" )
			end
		},
		{
			stateName = "NoItems",
			condition = function ( menu, element, event )
				return IsSelfInState( self, "NoItems" )
			end
		}
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f26_arg2, f26_arg3, f26_arg4 )
		UpdateElementState( self, "leftArrowBtn", controller ) --[[ @ 0]]
		UpdateElementState( self, "rightArrowBtn", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	rightArrowBtn.id = "rightArrowBtn" --[[ @ 0]]
	leftArrowBtn.id = "leftArrowBtn" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.horizontalCounter.__resetProperties = function ( f27_arg0 )
	f27_arg0.currentItem:completeAnimation() --[[ @ 0]]
	f27_arg0.dividor:completeAnimation() --[[ @ 0]]
	f27_arg0.count:completeAnimation() --[[ @ 0]]
	f27_arg0.leftArrowBtn:completeAnimation() --[[ @ 0]]
	f27_arg0.rightArrowBtn:completeAnimation() --[[ @ 0]]
	f27_arg0.currentItem:setAlpha( 0.65 ) --[[ @ 0]]
	f27_arg0.dividor:setAlpha( 0.65 ) --[[ @ 0]]
	f27_arg0.count:setAlpha( 0.65 ) --[[ @ 0]]
	f27_arg0.leftArrowBtn:setLeftRight( 0.5, 0.5, -99, -49 ) --[[ @ 0]]
	f27_arg0.leftArrowBtn:setAlpha( 1 ) --[[ @ 0]]
	f27_arg0.rightArrowBtn:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.horizontalCounter.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f28_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f28_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.currentItem ) --[[ @ 0]]
			f28_arg0.dividor:completeAnimation() --[[ @ 0]]
			f28_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.dividor ) --[[ @ 0]]
			f28_arg0.count:completeAnimation() --[[ @ 0]]
			f28_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.count ) --[[ @ 0]]
		end
	},
	AtLeftAndRight = {
		DefaultClip = function ( f29_arg0, f29_arg1 )
			f29_arg0:__resetProperties() --[[ @ 0]]
			f29_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f29_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f29_arg0.currentItem:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.currentItem ) --[[ @ 0]]
			f29_arg0.dividor:completeAnimation() --[[ @ 0]]
			f29_arg0.dividor:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.dividor ) --[[ @ 0]]
			f29_arg0.count:completeAnimation() --[[ @ 0]]
			f29_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.count ) --[[ @ 0]]
			f29_arg0.rightArrowBtn:completeAnimation() --[[ @ 0]]
			f29_arg0.rightArrowBtn:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.rightArrowBtn ) --[[ @ 0]]
			f29_arg0.leftArrowBtn:completeAnimation() --[[ @ 0]]
			f29_arg0.leftArrowBtn:setLeftRight( 0.5, 0.5, -98, -48 ) --[[ @ 0]]
			f29_arg0.leftArrowBtn:setAlpha( 0 ) --[[ @ 0]]
			f29_arg0.clipFinished( f29_arg0.leftArrowBtn ) --[[ @ 0]]
		end
	},
	AtLeft = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f30_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f30_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.currentItem ) --[[ @ 0]]
			f30_arg0.dividor:completeAnimation() --[[ @ 0]]
			f30_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.dividor ) --[[ @ 0]]
			f30_arg0.count:completeAnimation() --[[ @ 0]]
			f30_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f30_arg0.clipFinished( f30_arg0.count ) --[[ @ 0]]
		end
	},
	AtRight = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f31_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f31_arg0.currentItem:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.currentItem ) --[[ @ 0]]
			f31_arg0.dividor:completeAnimation() --[[ @ 0]]
			f31_arg0.dividor:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.dividor ) --[[ @ 0]]
			f31_arg0.count:completeAnimation() --[[ @ 0]]
			f31_arg0.count:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.count ) --[[ @ 0]]
		end
	},
	NoItems = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f32_arg0.currentItem:completeAnimation() --[[ @ 0]]
			f32_arg0.currentItem:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.currentItem ) --[[ @ 0]]
			f32_arg0.dividor:completeAnimation() --[[ @ 0]]
			f32_arg0.dividor:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.dividor ) --[[ @ 0]]
			f32_arg0.count:completeAnimation() --[[ @ 0]]
			f32_arg0.count:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.count ) --[[ @ 0]]
			f32_arg0.rightArrowBtn:completeAnimation() --[[ @ 0]]
			f32_arg0.rightArrowBtn:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.rightArrowBtn ) --[[ @ 0]]
			f32_arg0.leftArrowBtn:completeAnimation() --[[ @ 0]]
			f32_arg0.leftArrowBtn:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.leftArrowBtn ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.horizontalCounter.__onClose = function ( f33_arg0 )
	f33_arg0.rightArrowBtn:close() --[[ @ 0]]
	f33_arg0.leftArrowBtn:close() --[[ @ 0]]
end
 --[[ @ 0]]
