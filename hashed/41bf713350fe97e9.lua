-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:21833dc97a387a38" ) --[[ @ 0]]

CoD.zm_towers_pap_hud = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.zm_towers_pap_hud = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "zm_towers_pap_hud", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	self:setClass( CoD.zm_towers_pap_hud ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.ignoreCursor = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local title = LUI.UIText.new( 0, 0, 1610.5, 1892.5, 0, 0, 412.5, 449.5 ) --[[ @ 0]]
	title:setRGB( 0.93, 0.85, 0.03 ) --[[ @ 0]]
	title:setScale( 0.75, 0.75 ) --[[ @ 0]]
	title:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_497FED8769504E5E" ) ) --[[ @ 0]]
	title:setTTF( "default" ) --[[ @ 0]]
	title:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	title:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( title ) --[[ @ 0]]
	self.title = title --[[ @ 0]]
	
	local danuComplete = CoD.towers_pap_head.new( f1_local1, f1_arg0, 0, 0, 1720.5, 1816.5, 0, 0, 431, 527 ) --[[ @ 0]]
	danuComplete:mergeStateConditions( {
		{
			stateName = "Acquired",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, f1_arg0, "danu_acquired", 1 )
			end
		}
	} ) --[[ @ 0]]
	danuComplete:linkToElementModel( danuComplete, "danu_acquired", true, function ( model )
		f1_local1:updateElementState( danuComplete, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "danu_acquired"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	danuComplete:setRGB( 0.17, 0.98, 0.01 ) --[[ @ 0]]
	danuComplete:setScale( 0.5, 0.5 ) --[[ @ 0]]
	danuComplete:linkToElementModel( self, nil, false, function ( model )
		danuComplete:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( danuComplete ) --[[ @ 0]]
	self.danuComplete = danuComplete --[[ @ 0]]
	
	local raComplete = CoD.towers_pap_head.new( f1_local1, f1_arg0, 0, 0, 1720.5, 1816.5, 0, 0, 486, 582 ) --[[ @ 0]]
	raComplete:mergeStateConditions( {
		{
			stateName = "Acquired",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, f1_arg0, "ra_acquired", 1 )
			end
		}
	} ) --[[ @ 0]]
	raComplete:linkToElementModel( raComplete, "ra_acquired", true, function ( model )
		f1_local1:updateElementState( raComplete, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "ra_acquired"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	raComplete:setRGB( 1, 0.01, 0 ) --[[ @ 0]]
	raComplete:setScale( 0.5, 0.5 ) --[[ @ 0]]
	raComplete:linkToElementModel( self, nil, false, function ( model )
		raComplete:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( raComplete ) --[[ @ 0]]
	self.raComplete = raComplete --[[ @ 0]]
	
	local zeusComplete = CoD.towers_pap_head.new( f1_local1, f1_arg0, 0, 0, 1671.5, 1767.5, 0, 0, 431, 527 ) --[[ @ 0]]
	zeusComplete:mergeStateConditions( {
		{
			stateName = "Acquired",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, f1_arg0, "zeus_acquired", 1 )
			end
		}
	} ) --[[ @ 0]]
	zeusComplete:linkToElementModel( zeusComplete, "zeus_acquired", true, function ( model )
		f1_local1:updateElementState( zeusComplete, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "zeus_acquired"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	zeusComplete:setRGB( 0.83, 0.37, 1 ) --[[ @ 0]]
	zeusComplete:setScale( 0.5, 0.5 ) --[[ @ 0]]
	zeusComplete:linkToElementModel( self, nil, false, function ( model )
		zeusComplete:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( zeusComplete ) --[[ @ 0]]
	self.zeusComplete = zeusComplete --[[ @ 0]]
	
	local zeusComplete2 = CoD.towers_pap_head.new( f1_local1, f1_arg0, 0, 0, 1672.5, 1768.5, 0, 0, 486, 582 ) --[[ @ 0]]
	zeusComplete2:mergeStateConditions( {
		{
			stateName = "Acquired",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelPathValueEqualTo( element, f1_arg0, "odin_acquired", 1 )
			end
		}
	} ) --[[ @ 0]]
	zeusComplete2:linkToElementModel( zeusComplete2, "odin_acquired", true, function ( model )
		f1_local1:updateElementState( zeusComplete2, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = model:get(),
			modelName = "odin_acquired"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	zeusComplete2:setRGB( 0, 0.84, 1 ) --[[ @ 0]]
	zeusComplete2:setScale( 0.5, 0.5 ) --[[ @ 0]]
	zeusComplete2:linkToElementModel( self, nil, false, function ( model )
		zeusComplete2:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( zeusComplete2 ) --[[ @ 0]]
	self.zeusComplete2 = zeusComplete2 --[[ @ 0]]
	
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.zm_towers_pap_hud.__onClose = function ( f14_arg0 )
	f14_arg0.danuComplete:close() --[[ @ 0]]
	f14_arg0.raComplete:close() --[[ @ 0]]
	f14_arg0.zeusComplete:close() --[[ @ 0]]
	f14_arg0.zeusComplete2:close() --[[ @ 0]]
end
 --[[ @ 0]]
