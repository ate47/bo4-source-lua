-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/cac/weaponattributestat" ) --[[ @ 0]]

CoD.StartMenu_InventoryDescription_Internal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.__defaultWidth = 600 --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.__defaultHeight = 383 --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_InventoryDescription_Internal ) --[[ @ 0]]
	self.id = "StartMenu_InventoryDescription_Internal" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 383 ) --[[ @ 0]]
	backing:setRGB( 0.45, 0.45, 0.45 ) --[[ @ 0]]
	backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local description = LUI.UIText.new( 0, 0.89, 0, 0, 0, 0, 3, 23 ) --[[ @ 0]]
	description:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	description:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	description:setLetterSpacing( 1 ) --[[ @ 0]]
	description:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_left"] ) ) --[[ @ 0]]
	description:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_top"] ) ) --[[ @ 0]]
	description:linkToElementModel( self, "description", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			description:setText( Engine[@"hash_4F9F1239CFD921FE"]( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( description ) --[[ @ 0]]
	self.description = description --[[ @ 0]]
	
	local DamageAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 1, 1, -452, -15, 0, 0, 92.5, 110.5 ) --[[ @ 0]]
	DamageAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "damage" )
			end
		}
	} ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( DamageAttribute, "damage", true, function ( model )
		f1_arg0:updateElementState( DamageAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "damage"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DamageAttribute.attributeName:setText( LocalizeToUpperString( @"hash_6CFFC6656E99316E" ) ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( self, "attributes.damage", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			DamageAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DamageAttribute:linkToElementModel( self, "attributes.damage", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			DamageAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f6_local0, 1 ), CoD.GetVectorComponentFromString( f6_local0, 2 ), CoD.GetVectorComponentFromString( f6_local0, 3 ), CoD.GetVectorComponentFromString( f6_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DamageAttribute ) --[[ @ 0]]
	self.DamageAttribute = DamageAttribute --[[ @ 0]]
	
	local RangeAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 1, 1, -452, -15, 0, 0, 115.5, 133.5 ) --[[ @ 0]]
	RangeAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "range" )
			end
		}
	} ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( RangeAttribute, "range", true, function ( model )
		f1_arg0:updateElementState( RangeAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "range"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RangeAttribute.attributeName:setText( LocalizeToUpperString( @"hash_7470B2F1C3BDE7F4" ) ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( self, "attributes.range", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			RangeAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f9_local0, 1 ), CoD.GetVectorComponentFromString( f9_local0, 2 ), CoD.GetVectorComponentFromString( f9_local0, 3 ), CoD.GetVectorComponentFromString( f9_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RangeAttribute:linkToElementModel( self, "attributes.range", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			RangeAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f10_local0, 1 ), CoD.GetVectorComponentFromString( f10_local0, 2 ), CoD.GetVectorComponentFromString( f10_local0, 3 ), CoD.GetVectorComponentFromString( f10_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( RangeAttribute ) --[[ @ 0]]
	self.RangeAttribute = RangeAttribute --[[ @ 0]]
	
	local FireRateAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 1, 1, -452, -15, 0, 0, 138.5, 156.5 ) --[[ @ 0]]
	FireRateAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "fireRate" )
			end
		}
	} ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( FireRateAttribute, "fireRate", true, function ( model )
		f1_arg0:updateElementState( FireRateAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "fireRate"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FireRateAttribute.attributeName:setText( LocalizeToUpperString( @"hash_2A995770D23477EE" ) ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( self, "attributes.fireRate", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			FireRateAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f13_local0, 1 ), CoD.GetVectorComponentFromString( f13_local0, 2 ), CoD.GetVectorComponentFromString( f13_local0, 3 ), CoD.GetVectorComponentFromString( f13_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FireRateAttribute:linkToElementModel( self, "attributes.fireRate", true, function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			FireRateAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f14_local0, 1 ), CoD.GetVectorComponentFromString( f14_local0, 2 ), CoD.GetVectorComponentFromString( f14_local0, 3 ), CoD.GetVectorComponentFromString( f14_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FireRateAttribute ) --[[ @ 0]]
	self.FireRateAttribute = FireRateAttribute --[[ @ 0]]
	
	local AccuracyAttribute = CoD.WeaponAttributeStat.new( f1_arg0, f1_arg1, 1, 1, -452, -15, 0, 0, 161.5, 179.5 ) --[[ @ 0]]
	AccuracyAttribute:mergeStateConditions( {
		{
			stateName = "Increase",
			condition = function ( menu, element, event )
				return IsCACWeaponAttributeIncrease( element, f1_arg1, "accuracy" )
			end
		}
	} ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( AccuracyAttribute, "accuracy", true, function ( model )
		f1_arg0:updateElementState( AccuracyAttribute, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "accuracy"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AccuracyAttribute.attributeName:setText( LocalizeToUpperString( @"hash_4F669512DF581896" ) ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( self, "attributes.accuracy", true, function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			AccuracyAttribute.weaponAttribute:setShaderVector( 0, GetWeaponAttributes( f1_arg0, CoD.GetVectorComponentFromString( f17_local0, 1 ), CoD.GetVectorComponentFromString( f17_local0, 2 ), CoD.GetVectorComponentFromString( f17_local0, 3 ), CoD.GetVectorComponentFromString( f17_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AccuracyAttribute:linkToElementModel( self, "attributes.accuracy", true, function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			AccuracyAttribute.attachmentAttribute:setShaderVector( 0, GetWeaponAttributesForAttachment( f1_arg0, CoD.GetVectorComponentFromString( f18_local0, 1 ), CoD.GetVectorComponentFromString( f18_local0, 2 ), CoD.GetVectorComponentFromString( f18_local0, 3 ), CoD.GetVectorComponentFromString( f18_local0, 4 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AccuracyAttribute ) --[[ @ 0]]
	self.AccuracyAttribute = AccuracyAttribute --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "WeaponStats",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "attributes.valid" )
			end
		},
		{
			stateName = "DefaultAsianLanguages",
			condition = function ( menu, element, event )
				return CoD.BaseUtility.IsCurrentLanguageAsian()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "attributes.valid", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "attributes.valid"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.__resetProperties = function ( f22_arg0 )
	f22_arg0.DamageAttribute:completeAnimation() --[[ @ 0]]
	f22_arg0.RangeAttribute:completeAnimation() --[[ @ 0]]
	f22_arg0.FireRateAttribute:completeAnimation() --[[ @ 0]]
	f22_arg0.AccuracyAttribute:completeAnimation() --[[ @ 0]]
	f22_arg0.backing:completeAnimation() --[[ @ 0]]
	f22_arg0.description:completeAnimation() --[[ @ 0]]
	f22_arg0.DamageAttribute:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.RangeAttribute:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.FireRateAttribute:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.AccuracyAttribute:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.backing:setTopBottom( 0, 0, 0, 383 ) --[[ @ 0]]
	f22_arg0.description:setTopBottom( 0, 0, 3, 23 ) --[[ @ 0]]
	f22_arg0.description:setLetterSpacing( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f23_arg0.backing:completeAnimation() --[[ @ 0]]
			f23_arg0.backing:setTopBottom( 0, 0, 0, 178 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.backing ) --[[ @ 0]]
			f23_arg0.DamageAttribute:completeAnimation() --[[ @ 0]]
			f23_arg0.DamageAttribute:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.DamageAttribute ) --[[ @ 0]]
			f23_arg0.RangeAttribute:completeAnimation() --[[ @ 0]]
			f23_arg0.RangeAttribute:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.RangeAttribute ) --[[ @ 0]]
			f23_arg0.FireRateAttribute:completeAnimation() --[[ @ 0]]
			f23_arg0.FireRateAttribute:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.FireRateAttribute ) --[[ @ 0]]
			f23_arg0.AccuracyAttribute:completeAnimation() --[[ @ 0]]
			f23_arg0.AccuracyAttribute:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.AccuracyAttribute ) --[[ @ 0]]
		end
	},
	WeaponStats = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f24_arg0.backing:completeAnimation() --[[ @ 0]]
			f24_arg0.backing:setTopBottom( 0, 0, 0, 221 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.backing ) --[[ @ 0]]
		end
	},
	DefaultAsianLanguages = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f25_arg0.backing:completeAnimation() --[[ @ 0]]
			f25_arg0.backing:setTopBottom( 0, 0, 0, 221 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.backing ) --[[ @ 0]]
			f25_arg0.description:completeAnimation() --[[ @ 0]]
			f25_arg0.description:setTopBottom( 0, 0, 3, 15 ) --[[ @ 0]]
			f25_arg0.description:setLetterSpacing( 2 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.description ) --[[ @ 0]]
			f25_arg0.DamageAttribute:completeAnimation() --[[ @ 0]]
			f25_arg0.DamageAttribute:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.DamageAttribute ) --[[ @ 0]]
			f25_arg0.RangeAttribute:completeAnimation() --[[ @ 0]]
			f25_arg0.RangeAttribute:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.RangeAttribute ) --[[ @ 0]]
			f25_arg0.FireRateAttribute:completeAnimation() --[[ @ 0]]
			f25_arg0.FireRateAttribute:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.FireRateAttribute ) --[[ @ 0]]
			f25_arg0.AccuracyAttribute:completeAnimation() --[[ @ 0]]
			f25_arg0.AccuracyAttribute:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.AccuracyAttribute ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_InventoryDescription_Internal.__onClose = function ( f26_arg0 )
	f26_arg0.description:close() --[[ @ 0]]
	f26_arg0.DamageAttribute:close() --[[ @ 0]]
	f26_arg0.RangeAttribute:close() --[[ @ 0]]
	f26_arg0.FireRateAttribute:close() --[[ @ 0]]
	f26_arg0.AccuracyAttribute:close() --[[ @ 0]]
end
 --[[ @ 0]]
