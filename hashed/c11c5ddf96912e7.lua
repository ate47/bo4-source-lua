-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "lua/lobby/lobbydebug" ) --[[ @ 0]]

Lobby.ProcessQueue = {} --[[ @ 0]]
Lobby.ProcessQueue.INVALID_ACTION_ID = 0 --[[ @ 0]]
Lobby.ProcessQueue.EVENT_START_ERROR = -1 --[[ @ 0]]
Lobby.ProcessQueue.ACTIONSTATE = {
	PENDING = 0,
	RUNNING = 1,
	SUCCESS = 2,
	FAILURE = 3,
	ERROR = 4,
	UPDATE = 5,
	THROTTLED = 6
} --[[ @ 0]]
Lobby.ProcessQueue.queue = nil --[[ @ 0]]
Lobby.ProcessQueue.actionId = 1 --[[ @ 0]]
Lobby.ProcessQueue.queueSize = 10 --[[ @ 0]]
Lobby.ProcessQueue.ClearQueue = function ()
	Lobby.ProcessQueue.queue = {
		processName = "",
		head = nil,
		history = nil,
		interrupt = nil,
		cancellable = nil
	} --[[ @ 0]]
	Lobby.ProcessQueue.SetQueueEmptyModel( true ) --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.SetQueueEmptyModel = function ( f2_arg0 )
	Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "lobbyRoot", true ), "queueEmpty", true ), f2_arg0 ) --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.ReplaceWith = function ( f3_arg0 )
	Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyProcessQueue: Process: '" .. Lobby.ProcessQueue.queue.processName .. "', Replacing '" .. Lobby.ProcessQueue.queue.head.name .. "' with '" .. f3_arg0.name .. "' in process queue.\n" ) --[[ @ 0]]
	f3_arg0.state = Lobby.ProcessQueue.ACTIONSTATE.PENDING --[[ @ 0]]
	Lobby.ProcessQueue.queue.head = f3_arg0 --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.CreateInterrupt = function ( f4_arg0, f4_arg1 )
	Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyProcessQueue: Process: '" .. Lobby.ProcessQueue.queue.processName .. "', '" .. Lobby.ProcessQueue.queue.head.name .. "' is interrupted in process queue.\n" ) --[[ @ 0]]
	local f4_local0 = f4_arg1:createFuncPtr( f4_arg0 ) --[[ @ 0]]
	return f4_local0.head
end
 --[[ @ 0]]
Lobby.ProcessQueue.Init = function ()
	Lobby.ProcessQueue.ClearQueue() --[[ @ 0]]
	Lobby.ProcessQueue.TaskHistory = {} --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.IsQueueEmpty = function ()
	if Lobby.ProcessQueue.queue.head ~= nil then
		return false
	else
		return true
	end
end
 --[[ @ 0]]
Lobby.ProcessQueue.CopyProcess = function ( f7_arg0 )
	local f7_local0 = type( f7_arg0 ) --[[ @ 0]]
	local f7_local1 = nil --[[ @ 0]]
	if f7_local0 == "table" then
		f7_local1 = {} --[[ @ 0]]
		local f7_local2 = next --[[ @ 0]]
		local f7_local3 = f7_arg0 --[[ @ 0]]
		local f7_local4 = nil --[[ @ 0]]
		goto basicblock_6:
		local f7_local5, f7_local6 = f7_local2( f7_local3, f7_local4 ) --[[ @ 0]]
		while f7_local5 ~= nil do
			f7_local4 = f7_local5 --[[ @ 0]]
			if f7_local5 ~= "parent" then
				f7_local1[Lobby.ProcessQueue.CopyProcess( f7_local5 )] = Lobby.ProcessQueue.CopyProcess( f7_local6 ) --[[ @ 0]]
			else
				f7_local1 = f7_arg0 --[[ @ 0]]
			end
		end
		setmetatable( f7_local1, Lobby.ProcessQueue.CopyProcess( getmetatable( f7_arg0 ) ) ) --[[ @ 0]]
	else
		f7_local1 = f7_arg0 --[[ @ 0]]
	end
	return f7_local1
end
 --[[ @ 0]]
Lobby.ProcessQueue.GetQueueHead = function ()
	return Lobby.ProcessQueue.queue.head
end
 --[[ @ 0]]
Lobby.ProcessQueue.SetCancellable = function ( f9_arg0 )
	Lobby.ProcessQueue.queue.cancellable = f9_arg0 --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.GetCurrentRunningProcessName = function ()
	if Lobby.ProcessQueue.queue == nil or Lobby.ProcessQueue.queue.processName == nil then
		return ""
	else
		return Lobby.ProcessQueue.queue.processName
	end
end
 --[[ @ 0]]
Lobby.ProcessQueue.AddToQueue = function ( f11_arg0, f11_arg1 )
	if f11_arg1 == nil then
		return 
	elseif Lobby.ProcessQueue.IsQueueEmpty() then
		Lobby.ProcessQueue.ClearQueue() --[[ @ 0]]
		f11_arg1.head.state = Lobby.ProcessQueue.ACTIONSTATE.PENDING --[[ @ 0]]
		Lobby.ProcessQueue.queue.processName = f11_arg0 --[[ @ 0]]
		Lobby.ProcessQueue.queue.history = f11_arg1.head --[[ @ 0]]
		Lobby.ProcessQueue.queue.head = f11_arg1.head --[[ @ 0]]
		Lobby.ProcessQueue.queue.interrupt = f11_arg1.interrupt --[[ @ 0]]
		Lobby.ProcessQueue.queue.cancellable = f11_arg1.cancellable --[[ @ 0]]
		Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "****************PROCESS QUEUE START****************\n" ) --[[ @ 0]]
		Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyProcessQueue: Adding process: '" .. f11_arg0 .. "', head action: '" .. f11_arg1.head.name .. "' to queue.\n" ) --[[ @ 0]]
		Lobby.Debug.OnProcessStart( f11_arg0 ) --[[ @ 0]]
	elseif Lobby.ProcessQueue.queue.cancellable == true or f11_arg1.force == true then
		Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "****************PROCESS QUEUE CHANGE****************\n" ) --[[ @ 0]]
		Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyProcessQueue: Adding process '" .. f11_arg0 .. "' when process '" .. Lobby.ProcessQueue.queue.processName .. "' is currently running.\n" ) --[[ @ 0]]
		Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "Will finish process '" .. Lobby.ProcessQueue.queue.processName .. "' current running action '" .. Lobby.ProcessQueue.queue.head.name .. "', then proceed with process '" .. f11_arg0 .. "'.\n" ) --[[ @ 0]]
		Lobby.Debug.OnProcessComplete() --[[ @ 0]]
		Lobby.Debug.OnProcessStart( f11_arg0 ) --[[ @ 0]]
		Lobby.ProcessQueue.queue.processName = f11_arg0 --[[ @ 0]]
		Lobby.ProcessQueue.queue.history = f11_arg1.head --[[ @ 0]]
		Lobby.Process.OverWriteAction( Lobby.ProcessQueue.queue.head, f11_arg1.head ) --[[ @ 0]]
		Lobby.ProcessQueue.queue.interrupt = f11_arg1.interrupt --[[ @ 0]]
		if nil ~= Lobby.ProcessQueue.queue.head.cancelFuncPtr then
			Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "Cancelling action: '" .. Lobby.ProcessQueue.queue.head.name .. "'.\n" ) --[[ @ 0]]
			Lobby.ProcessQueue.queue.head.canceled = true --[[ @ 0]]
			Lobby.ProcessQueue.queue.head:cancelFuncPtr() --[[ @ 0]]
		else
			Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "No cancel func (cancelFuncPtr) defined for action: '" .. Lobby.ProcessQueue.queue.head.name .. "'.\n" ) --[[ @ 0]]
		end
	end
	Lobby.ProcessQueue.SetQueueEmptyModel( false ) --[[ @ 0]]
	Lobby.Debug.AddDebugProcess() --[[ @ 0]]
	Lobby.ProcessQueue.Pump() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.ErrorShutdown = function ()
	if Lobby.ProcessQueue.queue.head ~= nil and Lobby.ProcessQueue.queue.head.cancelFuncPtr ~= nil then
		Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "Cancelling action: '" .. Lobby.ProcessQueue.queue.head.name .. "'.\n" ) --[[ @ 0]]
		Lobby.ProcessQueue.queue.head.canceled = true --[[ @ 0]]
		Lobby.ProcessQueue.queue.head:cancelFuncPtr() --[[ @ 0]]
	end
	Engine[@"SetModelValue"]( Engine[@"CreateModel"]( Engine[@"GetGlobalModel"](), "lobbyRoot.spinnerActive" ), false ) --[[ @ 0]]
	Lobby.ProcessQueue.ClearQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.Pump = function ()
	if not Engine[@"IsMainThreadOrProxy"]() then
		return 
	end
	local f13_local0 = Lobby.ProcessQueue.queue.head --[[ @ 0]]
	if f13_local0 == nil then
		Lobby.MatchmakingAsync.CheckEventQueue() --[[ @ 0]]
		while f13_local0 ~= nil do
			if f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.PENDING or f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.THROTTLED then
				if not Lobby.ProcessQueue.TaskHistory[f13_local0.name] then
					Lobby.ProcessQueue.TaskHistory[f13_local0.name] = {} --[[ @ 0]]
					Lobby.ProcessQueue.TaskHistory[f13_local0.name].count = 0 --[[ @ 0]]
					Lobby.ProcessQueue.TaskHistory[f13_local0.name].lastRunTime = 0 --[[ @ 0]]
				end
				if Lobby.ProcessQueue.TaskHistory[f13_local0.name].lastRunTime > 0 and f13_local0.throttle ~= nil and f13_local0.throttle > 0 then
					local f13_local1 = Engine[@"hash_69D33D652B9B0F3B"]() --[[ @ 0]]
					if f13_local1 < Lobby.ProcessQueue.TaskHistory[f13_local0.name].lastRunTime + f13_local0.throttle then
						if f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.PENDING then
							Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: Throttling '" .. f13_local0.name .. "' [ID:" .. tostring( Lobby.ProcessQueue.actionId ) .. " for: " .. tostring( Lobby.ProcessQueue.TaskHistory[f13_local0.name].lastRunTime + f13_local0.throttle - f13_local1 ) .. " ms ]...\n" ) --[[ @ 0]]
							f13_local0.state = Lobby.ProcessQueue.ACTIONSTATE.THROTTLED --[[ @ 0]]
						end
						return 
					end
				end
				f13_local0.state = Lobby.ProcessQueue.ACTIONSTATE.RUNNING --[[ @ 0]]
				f13_local0.actionId = Lobby.ProcessQueue.actionId --[[ @ 0]]
				f13_local0.startTime = Engine[@"hash_69D33D652B9B0F3B"]() --[[ @ 0]]
				Lobby.ProcessQueue.actionId = Lobby.ProcessQueue.actionId + 1 --[[ @ 0]]
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: Executing '" .. f13_local0.name .. "' [ID:" .. tostring( f13_local0.actionId ) .. "]...\n" ) --[[ @ 0]]
				Lobby.Debug.AddDebugAction( f13_local0 ) --[[ @ 0]]
				if f13_local0.startFuncPtr ~= nil then
					f13_local0:startFuncPtr() --[[ @ 0]]
				end
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: '" .. f13_local0.name .. "' [ID:" .. tostring( f13_local0.actionId ) .. "] is asynchronous.\n" ) --[[ @ 0]]
				Lobby.ProcessQueue.TaskHistory[f13_local0.name].count = Lobby.ProcessQueue.TaskHistory[f13_local0.name].count + 1 --[[ @ 0]]
				Lobby.ProcessQueue.TaskHistory[f13_local0.name].lastRunTime = f13_local0.startTime --[[ @ 0]]
			end
			if f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.RUNNING then
				if f13_local0.pumpFuncPtr ~= nil then
					f13_local0:pumpFuncPtr() --[[ @ 0]]
				end
				Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
				return 
			end
			local f13_local1 = nil --[[ @ 0]]
			local f13_local2 = -1 --[[ @ 0]]
			if f13_local0.startTime ~= nil then
				f13_local2 = Engine[@"hash_69D33D652B9B0F3B"]() - f13_local0.startTime --[[ @ 0]]
			end
			if f13_local0.endFuncPtr ~= nil then
				f13_local0:endFuncPtr() --[[ @ 0]]
			end
			if f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.SUCCESS then
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: '" .. f13_local0.name .. "' [ID:" .. tostring( f13_local0.actionId ) .. "] completed successfully in " .. tostring( f13_local2 ) .. "ms.\n" ) --[[ @ 0]]
				if f13_local0.success ~= nil and f13_local0.success.isInterrupt == true then
					Lobby.Debug.OnActionComplete( f13_local0, Lobby.ProcessQueue.CreateInterrupt( f13_local0, f13_local0.success ), true ) --[[ @ 0]]
				else
					Lobby.Debug.OnActionComplete( f13_local0, f13_local0.success, false ) --[[ @ 0]]
				end
				Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
			elseif f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.FAILURE then
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: '" .. f13_local0.name .. "' [ID:" .. tostring( f13_local0.actionId ) .. "] completed with failure in " .. tostring( f13_local2 ) .. "ms.\n" ) --[[ @ 0]]
				if f13_local0.failure ~= nil and f13_local0.failure.isInterrupt == true then
					Lobby.Debug.OnActionComplete( f13_local0, Lobby.ProcessQueue.CreateInterrupt( f13_local0, f13_local0.failure ), true ) --[[ @ 0]]
				else
					Lobby.Debug.OnActionComplete( f13_local0, f13_local0.failure, false ) --[[ @ 0]]
				end
				Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
			elseif f13_local0.state == Lobby.ProcessQueue.ACTIONSTATE.ERROR then
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: '" .. f13_local0.name .. "' [ID:" .. tostring( f13_local0.actionId ) .. "] completed with error in " .. tostring( f13_local2 ) .. "ms.\n" ) --[[ @ 0]]
				if f13_local0.error ~= nil and f13_local0.error.isInterrupt == true then
					Lobby.Debug.OnActionComplete( f13_local0, Lobby.ProcessQueue.CreateInterrupt( f13_local0, f13_local0.error ), true ) --[[ @ 0]]
				else
					Lobby.Debug.OnActionComplete( f13_local0, f13_local0.error, false ) --[[ @ 0]]
				end
				Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
			end
			if f13_local1 ~= nil then
				Lobby.ProcessQueue.ReplaceWith( f13_local1 ) --[[ @ 0]]
			else
				Lobby.ProcessQueue.ClearQueue() --[[ @ 0]]
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "LobbyAction: Process tree complete.\n" ) --[[ @ 0]]
				Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "****************PROCESS QUEUE END****************\n" ) --[[ @ 0]]
				Lobby.Debug.OnProcessComplete() --[[ @ 0]]
			end
			f13_local0 = Lobby.ProcessQueue.queue.head --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
Lobby.ProcessQueue.CompleteEvent = function ( f14_arg0, f14_arg1, f14_arg2 )
	local f14_local0 = Lobby.ProcessQueue.queue.head --[[ @ 0]]
	local f14_local1 = f14_arg2.actionId --[[ @ 0]]
	if f14_local1 <= Lobby.ProcessQueue.INVALID_ACTION_ID then
		Lobby.ProcessQueue.ProcessEvent( f14_local1, f14_arg0, f14_arg2 ) --[[ @ 0]]
		return 
	elseif f14_local0 == nil then
		Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], "^6LobbyAction: received a task completed " .. f14_arg1 .. " event but the action queue is empty. actionId: " .. tostring( f14_local1 ) .. ".\n" ) --[[ @ 0]]
	else
		local f14_local2 = "LobbyAction: task completed " .. f14_arg1 .. " event. Head: " .. f14_local0.name .. ", actionId: " .. tostring( f14_local0.actionId ) .. ".\n" --[[ @ 0]]
		if f14_arg0 == Lobby.ProcessQueue.ACTIONSTATE.FAILURE then
			Engine[@"PrintWarning"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], f14_local2 ) --[[ @ 0]]
		elseif f14_arg0 == Lobby.ProcessQueue.ACTIONSTATE.ERROR then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "***********************************************************************\n" ) --[[ @ 0]]
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], f14_local2 ) --[[ @ 0]]
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "***********************************************************************\n" ) --[[ @ 0]]
		else
			Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_59962D5EF982597"], f14_local2 ) --[[ @ 0]]
		end
		if f14_local0.actionId ~= f14_local1 then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "^6LobbyAction: mismatched task completed " .. f14_arg1 .. " event. Head: " .. f14_local0.name .. " was at actionId: " .. tostring( f14_local0.actionId ) .. " but we received actionId: " .. tostring( f14_local1 ) .. ".\n" ) --[[ @ 0]]
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LOBBY VM ERROR: Please copy full log and email to codcoreonline@treyarch.com" ) --[[ @ 0]]
			if Engine[@"hash_3573048F8D3B4E25"]() == false then
				Engine[@"hash_5BC42C678E40DBE8"]( Enum[@"errorCode"][@"hash_12FD312C2C06EC11"], "Lobby process queue error occurred, please email your logs to codcoreonline@treyarch.com" ) --[[ @ 0]]
			else
				Engine[@"hash_5BC42C678E40DBE8"]( Enum[@"errorCode"][@"hash_12FD312C2C06EC11"], Engine[@"hash_4F9F1239CFD921FE"]( @"hash_244F5E7E813DBEAB", LuaUtils.ValueToHex( LuaEnum.ERROR_CODE.TASK_MISMATCHED ) ) ) --[[ @ 0]]
			end
			return 
		elseif f14_local0.state ~= Lobby.ProcessQueue.ACTIONSTATE.RUNNING and (not f14_local0.canceled or f14_local0.canceled == false) then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "^6LobbyAction: received a task completed " .. f14_arg1 .. " event for non-running action queue head: " .. f14_local0.name .. ", actionId: " .. tostring( f14_local0.actionId ) .. ".\n" ) --[[ @ 0]]
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LOBBY VM ERROR: Please copy full log and email to codcoreonline@treyarch.com" ) --[[ @ 0]]
			if Engine[@"hash_3573048F8D3B4E25"]() == false then
				Engine[@"hash_5BC42C678E40DBE8"]( Enum[@"errorCode"][@"hash_12FD312C2C06EC11"], "Lobby process queue error occurred, please email your logs to codcoreonline@treyarch.com" ) --[[ @ 0]]
			else
				Engine[@"hash_5BC42C678E40DBE8"]( Enum[@"errorCode"][@"hash_12FD312C2C06EC11"], Engine[@"hash_4F9F1239CFD921FE"]( @"hash_244F5E7E813DBEAB", LuaUtils.ValueToHex( LuaEnum.ERROR_CODE.NONRUNNING_TASK ) ) ) --[[ @ 0]]
			end
			return 
		end
		f14_local0.state = f14_arg0 --[[ @ 0]]
		f14_local0.retData = f14_arg2 --[[ @ 0]]
	end
	Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.Success = function ( f15_arg0 )
	Lobby.ProcessQueue.CompleteEvent( Lobby.ProcessQueue.ACTIONSTATE.SUCCESS, "success", f15_arg0 ) --[[ @ 0]]
	Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.Failure = function ( f16_arg0 )
	Lobby.ProcessQueue.CompleteEvent( Lobby.ProcessQueue.ACTIONSTATE.FAILURE, "failure", f16_arg0 ) --[[ @ 0]]
	Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.Error = function ( f17_arg0 )
	Lobby.ProcessQueue.CompleteEvent( Lobby.ProcessQueue.ACTIONSTATE.ERROR, "error", f17_arg0 ) --[[ @ 0]]
	Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.PushEventUpdate = function ( f18_arg0 )
	if Lobby.ProcessQueue.IsQueueEmpty() then
		return 
	else
		local f18_local0 = Lobby.ProcessQueue.queue.head --[[ @ 0]]
		if f18_local0.eventsEnabled ~= true then
			return 
		else
			f18_arg0.actionId = f18_local0.actionId --[[ @ 0]]
			Lobby.ProcessQueue.Update( f18_arg0 ) --[[ @ 0]]
		end
	end
end
 --[[ @ 0]]
Lobby.ProcessQueue.Update = function ( f19_arg0 )
	local f19_local0 = Lobby.ProcessQueue.queue.head --[[ @ 0]]
	local f19_local1 = f19_arg0.actionId --[[ @ 0]]
	if f19_local1 <= Lobby.ProcessQueue.INVALID_ACTION_ID then
		Lobby.ProcessQueue.ProcessEvent( f19_local1, Lobby.ProcessQueue.ACTIONSTATE.UPDATE, f19_arg0 ) --[[ @ 0]]
		return 
	elseif f19_local0 == nil then
		Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LobbyAction: received an update but the action queue is empty. actionId: " .. tostring( f19_local1 ) .. ".\n" ) --[[ @ 0]]
	else
		Engine[@"PrintInfo"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LobbyAction: Lobby.ProcessQueue.Update. Head:" .. f19_local0.name .. ", actionId: " .. tostring( f19_local0.actionId ) .. ".\n" ) --[[ @ 0]]
		if f19_local0.actionId ~= f19_local1 then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LobbyAction: mismatched update. Head: " .. f19_local0.name .. " was at actionId: " .. tostring( f19_local0.actionId ) .. " but we received actionId: " .. tostring( f19_local1 ) .. ".\n" ) --[[ @ 0]]
		end
		if f19_local0.state ~= Lobby.ProcessQueue.ACTIONSTATE.RUNNING then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LobbyAction: received a update for non-running action queue head: " .. f19_local0.name .. ", actionId: " .. tostring( f19_local0.actionId ) .. ".\n" ) --[[ @ 0]]
		end
		if f19_local0.updateFuncPtr == nil then
			Engine[@"PrintError"]( Enum[@"hash_77A63DCD561B0FA8"][@"hash_4A1C4971DA015C84"], "LobbyAction: received a update for an action at head that doesn't have a head:updateFuncPtr() defined. Head: " .. f19_local0.name .. ", actionId: " .. tostring( f19_local0.actionId ) .. "\n" ) --[[ @ 0]]
		end
		f19_local0:updateFuncPtr( f19_arg0 ) --[[ @ 0]]
	end
	Lobby.Debug.UpdateProcessQueue() --[[ @ 0]]
end
 --[[ @ 0]]
Lobby.ProcessQueue.eventHandlerActionId = Lobby.ProcessQueue.INVALID_ACTION_ID --[[ @ 0]]
Lobby.ProcessQueue.eventHandler = {} --[[ @ 0]]
Lobby.ProcessQueue.RegisterEventHandler = function ( f20_arg0, f20_arg1 )
	Lobby.ProcessQueue.eventHandlerActionId = Lobby.ProcessQueue.eventHandlerActionId + 1 --[[ @ 0]]
	Lobby.ProcessQueue.eventHandler[Lobby.ProcessQueue.eventHandlerActionId] = {
		callbackFunction = f20_arg0,
		eventData = f20_arg1
	} --[[ @ 0]]
	return Lobby.ProcessQueue.eventHandlerActionId * -1
end
 --[[ @ 0]]
Lobby.ProcessQueue.UnRegisterEventHandler = function ( f21_arg0 )
	if f21_arg0 == Lobby.ProcessQueue.INVALID_ACTION_ID then
		return false
	else
		f21_arg0 = math.abs( f21_arg0 ) --[[ @ 0]]
		if Lobby.ProcessQueue.eventHandler[f21_arg0] == nil then
			return false
		else
			Lobby.ProcessQueue.eventHandler[f21_arg0] = nil --[[ @ 0]]
			return true
		end
	end
end
 --[[ @ 0]]
Lobby.ProcessQueue.ProcessEvent = function ( f22_arg0, f22_arg1, f22_arg2 )
	if f22_arg0 == Lobby.ProcessQueue.INVALID_ACTION_ID then
		return false
	else
		f22_arg0 = math.abs( f22_arg0 ) --[[ @ 0]]
		if Lobby.ProcessQueue.eventHandler[f22_arg0] == nil then
			return false
		elseif Lobby.ProcessQueue.eventHandler[f22_arg0].callbackFunction( f22_arg1, Lobby.ProcessQueue.eventHandler[f22_arg0].eventData, f22_arg2 ) == false then
			return false
		else
			Lobby.ProcessQueue.eventHandler[f22_arg0] = nil --[[ @ 0]]
			return true
		end
	end
end
 --[[ @ 0]]
