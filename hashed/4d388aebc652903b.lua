-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:6bc6e2379d2241fb" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/fullscreenpopup/fullscreenpopuptemplate" ) --[[ @ 0]]
require( "x64:368036bda8abbe94" ) --[[ @ 0]]
require( "x64:15d80cb371475b19" ) --[[ @ 0]]
require( "x64:1b175512a7a605a8" ) --[[ @ 0]]

CoD.ReplaceActiveContractOverlay = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ReplaceActiveContractOverlay = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ReplaceActiveContractOverlay", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromUserData( f1_arg0, self, f1_arg1._model ) --[[ @ 0]]
	SetMenuProperty( f1_local1, "__keepPopupButtonListPC", true ) --[[ @ 0]]
	self:setClass( CoD.ReplaceActiveContractOverlay ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FullscreenPopupTemplate = CoD.FullscreenPopupTemplate.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	FullscreenPopupTemplate:mergeStateConditions( {
		{
			stateName = "WorkingState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "WorkingState" )
			end
		},
		{
			stateName = "ErrorState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "ErrorState" )
			end
		},
		{
			stateName = "CustomState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "CustomState" )
			end
		},
		{
			stateName = "FinishedState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setWidgetType( CoD.ItemShopButton ) --[[ @ 0]]
	FullscreenPopupTemplate.ErrorSubtitle:setText( "" ) --[[ @ 0]]
	FullscreenPopupTemplate.WorkingTitle:setText( LocalizeToUpperString( @"hash_5A2A39DBF511E376" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.Title:setText( LocalizeToUpperString( @"hash_5A2A39DBF511E376" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle:setText( "" ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, nil, false, function ( model )
		FullscreenPopupTemplate:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			FullscreenPopupTemplate.Subtitle:setText( CoD.ContractUtility.GetActivateContractConfirmDesc( self:getModel(), f1_arg0, f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FullscreenPopupTemplate ) --[[ @ 0]]
	self.FullscreenPopupTemplate = FullscreenPopupTemplate --[[ @ 0]]
	
	local Linker = LUI.UIImage.new( 0.5, 0.5, -330, -326, 0.5, 0.5, -192, 205 ) --[[ @ 0]]
	Linker:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Linker:setAlpha( 0.35 ) --[[ @ 0]]
	Linker:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Linker:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Linker:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Linker:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Linker ) --[[ @ 0]]
	self.Linker = Linker --[[ @ 0]]
	
	local CornerPip = LUI.UIImage.new( 0.5, 0.5, -804, -788, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip ) --[[ @ 0]]
	self.CornerPip = CornerPip --[[ @ 0]]
	
	local CornerPip2 = LUI.UIImage.new( 0.5, 0.5, -495, -479, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip2:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip2:setZRot( 270 ) --[[ @ 0]]
	CornerPip2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip2 ) --[[ @ 0]]
	self.CornerPip2 = CornerPip2 --[[ @ 0]]
	
	local CornerPip3 = LUI.UIImage.new( 0.5, 0.5, -804, -788, 0.5, 0.5, 122, 138 ) --[[ @ 0]]
	CornerPip3:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip3:setZRot( 90 ) --[[ @ 0]]
	CornerPip3:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip3 ) --[[ @ 0]]
	self.CornerPip3 = CornerPip3 --[[ @ 0]]
	
	local CornerPip4 = LUI.UIImage.new( 0.5, 0.5, -495, -479, 0.5, 0.5, 121, 137 ) --[[ @ 0]]
	CornerPip4:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip4:setZRot( 180 ) --[[ @ 0]]
	CornerPip4:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip4 ) --[[ @ 0]]
	self.CornerPip4 = CornerPip4 --[[ @ 0]]
	
	local Black = LUI.UIImage.new( 0.5, 0.5, -957, -327, 0.5, 0.5, -214.5, 230.5 ) --[[ @ 0]]
	Black:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Black:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	Black:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 1, 0, 0.16, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Black ) --[[ @ 0]]
	self.Black = Black --[[ @ 0]]
	
	local ContentImage = CoD.PurchaseItemContentImage.new( f1_local1, f1_arg0, 0.5, 0.5, -1244, -412, 0.5, 0.5, -204, 172 ) --[[ @ 0]]
	ContentImage:linkToElementModel( self, nil, false, function ( model )
		ContentImage:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContentImage ) --[[ @ 0]]
	self.ContentImage = ContentImage --[[ @ 0]]
	
	local ActiveContractProgressBar = CoD.ContractProgressBar.new( f1_local1, f1_arg0, 0.5, 0.5, -814, -470, 0.5, 0.5, 201, 219 ) --[[ @ 0]]
	ActiveContractProgressBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ActiveContractProgressBar:setScale( 1.4, 1.4 ) --[[ @ 0]]
	ActiveContractProgressBar:linkToElementModel( self, nil, false, function ( model )
		ActiveContractProgressBar:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ActiveContractProgressBar ) --[[ @ 0]]
	self.ActiveContractProgressBar = ActiveContractProgressBar --[[ @ 0]]
	
	local ContractName = LUI.UIText.new( 0.5, 0.5, -957, -327, 0.5, 0.5, 144.5, 183.5 ) --[[ @ 0]]
	ContractName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	ContractName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ContractName:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	ContractName:linkToElementModel( self, "name", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			ContractName:setText( Engine[@"hash_4F9F1239CFD921FE"]( f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractName ) --[[ @ 0]]
	self.ContractName = ContractName --[[ @ 0]]
	
	local CommonIdentityWidgetStreamlinedPC = nil --[[ @ 0]]
	
	CommonIdentityWidgetStreamlinedPC = CoD.CommonIdentityWidgetStreamlined.new( f1_local1, f1_arg0, 0.5, 0.5, 426, 956, 0.5, 0.5, -282, -242 ) --[[ @ 0]]
	CommonIdentityWidgetStreamlinedPC:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		CommonIdentityWidgetStreamlinedPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonIdentityWidgetStreamlinedPC ) --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedPC = CommonIdentityWidgetStreamlinedPC --[[ @ 0]]
	
	local f1_local13 = nil --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedC = LUI.UIElement.createFake() --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "PC",
			condition = function ( menu, element, event )
				return IsPC()
			end
		}
	} ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "DefaultState" ) then
			CoD.ContractUtility.ReplaceActiveContract( self.FullscreenPopupTemplate, menu, controller, 5000 ) --[[ @ 0]]
			PlaySoundAlias( "uin_contract_activate" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "DefaultState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_45AB9ECEB1A97273", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "DefaultState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "DefaultState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	FullscreenPopupTemplate.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.buttonPC:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.id = "FullscreenPopupTemplate" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = FullscreenPopupTemplate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	local f1_local14 = self --[[ @ 0]]
	f1_local14 = FullscreenPopupTemplate --[[ @ 0]]
	if IsPC() then
		CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, f1_arg0, f1_local14, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ReplaceActiveContractOverlay.__resetProperties = function ( f18_arg0 )
	f18_arg0.Black:completeAnimation() --[[ @ 0]]
	f18_arg0.Black:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	f18_arg0.Black:setShaderVector( 1, 0, 0.16, 0, 0 ) --[[ @ 0]]
	f18_arg0.Black:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	f18_arg0.Black:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	f18_arg0.Black:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReplaceActiveContractOverlay.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	PC = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f20_arg0.Black:completeAnimation() --[[ @ 0]]
			f20_arg0.Black:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
			f20_arg0.Black:setShaderVector( 1, 0.16, 0.16, 0, 0 ) --[[ @ 0]]
			f20_arg0.Black:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
			f20_arg0.Black:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.Black:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Black ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReplaceActiveContractOverlay.__onClose = function ( f21_arg0 )
	f21_arg0.FullscreenPopupTemplate:close() --[[ @ 0]]
	f21_arg0.ContentImage:close() --[[ @ 0]]
	f21_arg0.ActiveContractProgressBar:close() --[[ @ 0]]
	f21_arg0.ContractName:close() --[[ @ 0]]
	f21_arg0.CommonIdentityWidgetStreamlinedPC:close() --[[ @ 0]]
	f21_arg0.CommonIdentityWidgetStreamlinedC:close() --[[ @ 0]]
end
 --[[ @ 0]]
