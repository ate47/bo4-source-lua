-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "x64:6103d565b59f1a18" ) --[[ @ 0]]
require( "x64:3fd740505876fd7b" ) --[[ @ 0]]

CoD.ReserveLarge = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReserveLarge.__defaultWidth = 310 --[[ @ 0]]
CoD.ReserveLarge.__defaultHeight = 632 --[[ @ 0]]
CoD.ReserveLarge.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReserveLarge ) --[[ @ 0]]
	self.id = "ReserveLarge" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Category = LUI.UIText.new( 0.5, 0.5, -118, 118, 0, 0, 3, 22 ) --[[ @ 0]]
	Category:setAlpha( 0.94 ) --[[ @ 0]]
	Category:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Category:setLetterSpacing( 4 ) --[[ @ 0]]
	Category:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Category:linkToElementModel( self, "rarity", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			Category:setRGB( CoD.BlackMarketUtility.LootRarityToColorBright( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Category:linkToElementModel( self, "category", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			Category:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Category ) --[[ @ 0]]
	self.Category = Category --[[ @ 0]]
	
	local UltraCategory = LUI.UIText.new( 0.5, 0.5, -118, 118, 0, 0, 3, 22 ) --[[ @ 0]]
	UltraCategory:setAlpha( 0 ) --[[ @ 0]]
	UltraCategory:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	UltraCategory:setLetterSpacing( 4 ) --[[ @ 0]]
	UltraCategory:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	UltraCategory:linkToElementModel( self, "rarity", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			UltraCategory:setRGB( CoD.BlackMarketUtility.LootRarityToColor( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	UltraCategory:linkToElementModel( self, "category", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			UltraCategory:setText( LocalizeToUpperString( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( UltraCategory ) --[[ @ 0]]
	self.UltraCategory = UltraCategory --[[ @ 0]]
	
	local Rarity = LUI.UIText.new( 0, 0, 10, 223, 0, 0, 410, 427 ) --[[ @ 0]]
	Rarity:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Rarity:setLetterSpacing( 4 ) --[[ @ 0]]
	Rarity:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Rarity:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	Rarity:linkToElementModel( self, "rarity", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			Rarity:setRGB( CoD.BlackMarketUtility.LootRarityToColorBright( f6_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Rarity:linkToElementModel( self, "rarity", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			Rarity:setText( LocalizeToUpperString( CoD.BlackMarketUtility.LootRarityToString( f7_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Rarity ) --[[ @ 0]]
	self.Rarity = Rarity --[[ @ 0]]
	
	local Name = LUI.UIText.new( 0, 0, 9, 302, 1, 1, -197, -173 ) --[[ @ 0]]
	Name:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Name:setLetterSpacing( 2 ) --[[ @ 0]]
	Name:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Name:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	Name:linkToElementModel( self, "name", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			Name:setText( Engine[@"hash_4F9F1239CFD921FE"]( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Name ) --[[ @ 0]]
	self.Name = Name --[[ @ 0]]
	
	local Desc = LUI.UIText.new( 0, 0, 9, 302, 1, 1, -168, -150 ) --[[ @ 0]]
	Desc:setTTF( "dinnext_regular" ) --[[ @ 0]]
	Desc:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	Desc:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	Desc:linkToElementModel( self, "desc", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			Desc:setText( f9_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Desc ) --[[ @ 0]]
	self.Desc = Desc --[[ @ 0]]
	
	local mainExtraText = LUI.UIText.new( 0, 0, 7, 300, 1, 1, -50, -34 ) --[[ @ 0]]
	mainExtraText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	mainExtraText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	mainExtraText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	mainExtraText:linkToElementModel( self, "mainExtraText", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			mainExtraText:setText( f10_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( mainExtraText ) --[[ @ 0]]
	self.mainExtraText = mainExtraText --[[ @ 0]]
	
	local subExtraText = LUI.UIText.new( 0, 0, 7, 300, 1, 1, -28, -12 ) --[[ @ 0]]
	subExtraText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	subExtraText:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	subExtraText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	subExtraText:linkToElementModel( self, "subExtraText", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			subExtraText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( subExtraText ) --[[ @ 0]]
	self.subExtraText = subExtraText --[[ @ 0]]
	
	local OldSignaturesBonusExpBadge = CoD.Mark2BonusExpLongBadge.new( f1_arg0, f1_arg1, 0, 0, 10, 270, 0, 0, 560, 578 ) --[[ @ 0]]
	OldSignaturesBonusExpBadge:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f12_local0 --[[ @ 0]]
				if not IsCurrentMenu( menu, "PaintjobWeaponSelect" ) then
					f12_local0 = CoD.CACUtility.IsProgressionEnabledForMenu( menu ) --[[ @ 0]]
					if f12_local0 then
						f12_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( self, f1_arg1, "itemCategory", @"signature_weapon" ) --[[ @ 0]]
					end
				else
					f12_local0 = false --[[ @ 0]]
				end
				return f12_local0
			end
		}
	} ) --[[ @ 0]]
	OldSignaturesBonusExpBadge:linkToElementModel( OldSignaturesBonusExpBadge, "itemCategory", true, function ( model )
		f1_arg0:updateElementState( OldSignaturesBonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemCategory"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OldSignaturesBonusExpBadge:linkToElementModel( OldSignaturesBonusExpBadge, "weaponModelSlot", true, function ( model )
		f1_arg0:updateElementState( OldSignaturesBonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponModelSlot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OldSignaturesBonusExpBadge:linkToElementModel( OldSignaturesBonusExpBadge, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( OldSignaturesBonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	OldSignaturesBonusExpBadge:linkToElementModel( self, nil, false, function ( model )
		OldSignaturesBonusExpBadge:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( OldSignaturesBonusExpBadge ) --[[ @ 0]]
	self.OldSignaturesBonusExpBadge = OldSignaturesBonusExpBadge --[[ @ 0]]
	
	local MK2BonusExpBadge = CoD.Mark2BonusExpLongBadge.new( f1_arg0, f1_arg1, 0, 0, 10, 270, 0, 0, 560, 578 ) --[[ @ 0]]
	MK2BonusExpBadge:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f17_local0 --[[ @ 0]]
				if not IsCurrentMenu( menu, "PaintjobWeaponSelect" ) then
					f17_local0 = CoD.CACUtility.IsProgressionEnabledForMenu( menu ) --[[ @ 0]]
					if f17_local0 then
						f17_local0 = CoD.ModelUtility.IsSelfModelValueEqualTo( self, f1_arg1, "itemCategory", @"mk2" ) --[[ @ 0]]
					end
				else
					f17_local0 = false --[[ @ 0]]
				end
				return f17_local0
			end
		}
	} ) --[[ @ 0]]
	MK2BonusExpBadge:linkToElementModel( MK2BonusExpBadge, "itemCategory", true, function ( model )
		f1_arg0:updateElementState( MK2BonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemCategory"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MK2BonusExpBadge:linkToElementModel( MK2BonusExpBadge, "weaponModelSlot", true, function ( model )
		f1_arg0:updateElementState( MK2BonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "weaponModelSlot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MK2BonusExpBadge:linkToElementModel( MK2BonusExpBadge, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( MK2BonusExpBadge, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	MK2BonusExpBadge:linkToElementModel( self, nil, false, function ( model )
		MK2BonusExpBadge:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( MK2BonusExpBadge ) --[[ @ 0]]
	self.MK2BonusExpBadge = MK2BonusExpBadge --[[ @ 0]]
	
	local FeaturedImage = CoD.ReservesContentImage.new( f1_arg0, f1_arg1, 0.5, 0.5, -146, 146, 0, 0, 28, 379 ) --[[ @ 0]]
	FeaturedImage:linkToElementModel( self, nil, false, function ( model )
		FeaturedImage:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( FeaturedImage ) --[[ @ 0]]
	self.FeaturedImage = FeaturedImage --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Ultra",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "rarity", 4 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "rarity", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rarity"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReserveLarge.__resetProperties = function ( f25_arg0 )
	f25_arg0.UltraCategory:completeAnimation() --[[ @ 0]]
	f25_arg0.Category:completeAnimation() --[[ @ 0]]
	f25_arg0.UltraCategory:setAlpha( 0 ) --[[ @ 0]]
	f25_arg0.Category:setAlpha( 0.94 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReserveLarge.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Ultra = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f27_arg0.Category:completeAnimation() --[[ @ 0]]
			f27_arg0.Category:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.Category ) --[[ @ 0]]
			f27_arg0.UltraCategory:completeAnimation() --[[ @ 0]]
			f27_arg0.UltraCategory:setAlpha( 0.94 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.UltraCategory ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReserveLarge.__onClose = function ( f28_arg0 )
	f28_arg0.Category:close() --[[ @ 0]]
	f28_arg0.UltraCategory:close() --[[ @ 0]]
	f28_arg0.Rarity:close() --[[ @ 0]]
	f28_arg0.Name:close() --[[ @ 0]]
	f28_arg0.Desc:close() --[[ @ 0]]
	f28_arg0.mainExtraText:close() --[[ @ 0]]
	f28_arg0.subExtraText:close() --[[ @ 0]]
	f28_arg0.OldSignaturesBonusExpBadge:close() --[[ @ 0]]
	f28_arg0.MK2BonusExpBadge:close() --[[ @ 0]]
	f28_arg0.FeaturedImage:close() --[[ @ 0]]
end
 --[[ @ 0]]
