-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:3d58649a93c7c23a" ) --[[ @ 0]]
require( "x64:643bb843a38237" ) --[[ @ 0]]
require( "x64:4b06ac7d487ebb93" ) --[[ @ 0]]
require( "x64:7574ad94e3056951" ) --[[ @ 0]]
require( "x64:36767134a413986e" ) --[[ @ 0]]
require( "x64:312a47386affd813" ) --[[ @ 0]]
require( "x64:72a8dac04babf8b8" ) --[[ @ 0]]
require( "x64:98f657bdbe677aa" ) --[[ @ 0]]
require( "x64:3a03e6abe332775" ) --[[ @ 0]]
require( "x64:9258f7404e4ba1d" ) --[[ @ 0]]
require( "x64:26af9b7da2a5cafd" ) --[[ @ 0]]
require( "x64:1247779f7898be87" ) --[[ @ 0]]
require( "x64:7c0f8856fca43866" ) --[[ @ 0]]
require( "x64:40776309501d0fd4" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "ui/uieditor/widgets/header/header_container_frontend" ) --[[ @ 0]]
require( "x64:713012bca0fbd2f4" ) --[[ @ 0]]
require( "x64:16be582def81a3b7" ) --[[ @ 0]]
require( "x64:2dd67ebb9f0b033a" ) --[[ @ 0]]
require( "x64:46ee653ade3452f5" ) --[[ @ 0]]
require( "x64:5c0887595cfb6bb1" ) --[[ @ 0]]

CoD.Director = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.Director = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "Director", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.DirectorUtility.SetupDirectorStateDefaultFocusCallbacks( f1_local1, f1_arg0 ) --[[ @ 0]]
	EnableAnyController( self, f1_arg0 ) --[[ @ 0]]
	CoD.DirectorUtility.CreateOfflineScreenState() --[[ @ 0]]
	CoD.BaseUtility.SelfShowsBuildInfo( self ) --[[ @ 0]]
	CoD.DirectorUtility.InitCompanionApp( self, f1_arg0 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f1_arg0, "Contracts.updateActiveContracts", 0 ) --[[ @ 0]]
	self:setClass( CoD.Director ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local ScorestreakAspectRatioFix = nil --[[ @ 0]]
	
	ScorestreakAspectRatioFix = CoD.Scorestreak_AspectRatioFix.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ScorestreakAspectRatioFix:mergeStateConditions( {
		{
			stateName = "Warzone",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	ScorestreakAspectRatioFix:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( ScorestreakAspectRatioFix ) --[[ @ 0]]
	self.ScorestreakAspectRatioFix = ScorestreakAspectRatioFix --[[ @ 0]]
	
	local FullScreenBlack = CoD.DirectorFullscreenBlack.new( f1_local1, f1_arg0, 0, 0, 0, 1920, 0, 0, 0, 1080 ) --[[ @ 0]]
	self:addElement( FullScreenBlack ) --[[ @ 0]]
	self.FullScreenBlack = FullScreenBlack --[[ @ 0]]
	
	local SearchQoSJoinList = LUI.GridLayout.new( f1_local1, f1_arg0, false, 0, 0, 2, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	SearchQoSJoinList:setLeftRight( 0, 0, 519, 1281 ) --[[ @ 0]]
	SearchQoSJoinList:setTopBottom( 0, 0, 80, 828 ) --[[ @ 0]]
	SearchQoSJoinList:setWidgetType( CoD.SessionSearchQoSJoin ) --[[ @ 0]]
	SearchQoSJoinList:setVerticalCount( 50 ) --[[ @ 0]]
	SearchQoSJoinList:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	SearchQoSJoinList:setDataSource( "DebugSessionSearchQoSJoin" ) --[[ @ 0]]
	self:addElement( SearchQoSJoinList ) --[[ @ 0]]
	self.SearchQoSJoinList = SearchQoSJoinList --[[ @ 0]]
	
	local DirectorTheater = CoD.DirectorTheater.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorTheater:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DirectorTheater ) --[[ @ 0]]
	self.DirectorTheater = DirectorTheater --[[ @ 0]]
	
	local DirectorCustom = CoD.directorCustom.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorCustom:setAlpha( 0 ) --[[ @ 0]]
	DirectorCustom:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorCustom ) --[[ @ 0]]
	self.DirectorCustom = DirectorCustom --[[ @ 0]]
	
	local DirectorTraining = CoD.directorTraining.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorTraining:setAlpha( 0 ) --[[ @ 0]]
	DirectorTraining:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorTraining ) --[[ @ 0]]
	self.DirectorTraining = DirectorTraining --[[ @ 0]]
	
	local DirectorArenaMatchmaking = CoD.directorArenaMatchmaking.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorArenaMatchmaking:setAlpha( 0 ) --[[ @ 0]]
	DirectorArenaMatchmaking:registerEventHandler( "menu_loaded", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f5_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f5_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorArenaMatchmaking ) --[[ @ 0]]
	self.DirectorArenaMatchmaking = DirectorArenaMatchmaking --[[ @ 0]]
	
	local DirectorArenaPregame = CoD.directorArenaPregame.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorArenaPregame:setAlpha( 0 ) --[[ @ 0]]
	DirectorArenaPregame:registerEventHandler( "menu_loaded", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f6_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f6_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f6_local0 then
			f6_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f6_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorArenaPregame ) --[[ @ 0]]
	self.DirectorArenaPregame = DirectorArenaPregame --[[ @ 0]]
	
	local DirectorPublic = CoD.directorPublic.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorPublic:setAlpha( 0 ) --[[ @ 0]]
	DirectorPublic:registerEventHandler( "menu_loaded", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f7_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f7_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f7_local0 then
			f7_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f7_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorPublic ) --[[ @ 0]]
	self.DirectorPublic = DirectorPublic --[[ @ 0]]
	
	local DirectorPrivate = CoD.directorPrivate.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorPrivate:setAlpha( 0 ) --[[ @ 0]]
	DirectorPrivate:registerEventHandler( "menu_loaded", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f8_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f8_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f8_local0 then
			f8_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f8_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorPrivate ) --[[ @ 0]]
	self.DirectorPrivate = DirectorPrivate --[[ @ 0]]
	
	local DirectorPregame = CoD.directorPregame.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorPregame:setAlpha( 0 ) --[[ @ 0]]
	DirectorPregame:registerEventHandler( "menu_loaded", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f9_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f9_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f9_local0 then
			f9_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorPregame ) --[[ @ 0]]
	self.DirectorPregame = DirectorPregame --[[ @ 0]]
	
	local DirectorSelect = CoD.directorSelect.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	DirectorSelect:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( DirectorSelect ) --[[ @ 0]]
	self.DirectorSelect = DirectorSelect --[[ @ 0]]
	
	local DirectorCommonSafeAreaBottomAndLeft = CoD.DirectorCommonSafeAreaBottomAndLeft.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 1, 1, -512, 0 ) --[[ @ 0]]
	DirectorCommonSafeAreaBottomAndLeft:registerEventHandler( "menu_loaded", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f10_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f10_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f10_local0 then
			f10_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
	self.DirectorCommonSafeAreaBottomAndLeft = DirectorCommonSafeAreaBottomAndLeft --[[ @ 0]]
	
	local DirectorCommonPartyList = CoD.DirectorCommonPartyLists.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0, 0, 0, 775 ) --[[ @ 0]]
	DirectorCommonPartyList:registerEventHandler( "menu_loaded", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f11_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f11_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f11_local0 then
			f11_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f11_local0
	end ) --[[ @ 0]]
	self:addElement( DirectorCommonPartyList ) --[[ @ 0]]
	self.DirectorCommonPartyList = DirectorCommonPartyList --[[ @ 0]]
	
	local ChatClient = nil --[[ @ 0]]
	
	ChatClient = CoD.FrontendChatClientContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -943, -403, 0.94, 0.94, -287, 3 ) --[[ @ 0]]
	self:addElement( ChatClient ) --[[ @ 0]]
	self.ChatClient = ChatClient --[[ @ 0]]
	
	local ChatClientPassiveEntryDisplay = nil --[[ @ 0]]
	
	ChatClientPassiveEntryDisplay = CoD.ChatClientPassiveEntryDisplay.new( f1_local1, f1_arg0, 0.5, 0.5, -943, -403, 0.94, 0.94, -287, 3 ) --[[ @ 0]]
	self:addElement( ChatClientPassiveEntryDisplay ) --[[ @ 0]]
	self.ChatClientPassiveEntryDisplay = ChatClientPassiveEntryDisplay --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:subscribeToGlobalModel( f1_arg0, "StartMenuBreadcrumbs", "themenu", function ( model )
		FooterContainerFrontendRight.LeftContainerPC.PersistentLeftContainer.FooterButtonPlayerAccount.Spacer3.newIcon:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FooterContainerFrontendRight:subscribeToGlobalModel( f1_arg0, "StartMenuBreadcrumbs", "themenu", function ( model )
		FooterContainerFrontendRight.CenterContainer.Options.newIcon:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f14_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f14_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f14_local0 then
			f14_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f14_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local BackingGrayMediumLeft = CoD.header_container_frontend.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 0, 0, 42 ) --[[ @ 0]]
	BackingGrayMediumLeft:registerEventHandler( "menu_loaded", function ( element, event )
		local f15_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f15_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f15_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f15_local0 then
			f15_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f15_local0
	end ) --[[ @ 0]]
	self:addElement( BackingGrayMediumLeft ) --[[ @ 0]]
	self.BackingGrayMediumLeft = BackingGrayMediumLeft --[[ @ 0]]
	
	local blackFade = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	blackFade:setRGB( 0, 0, 0 ) --[[ @ 0]]
	blackFade:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( blackFade ) --[[ @ 0]]
	self.blackFade = blackFade --[[ @ 0]]
	
	local FrontendBattlenetContainer = nil --[[ @ 0]]
	
	FrontendBattlenetContainer = CoD.FrontendBattlenetContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -868, -432, 0.95, 0.95, -780, 0 ) --[[ @ 0]]
	self:addElement( FrontendBattlenetContainer ) --[[ @ 0]]
	self.FrontendBattlenetContainer = FrontendBattlenetContainer --[[ @ 0]]
	
	local PCNotif = nil --[[ @ 0]]
	
	PCNotif = CoD.PC_Notif_Container.new( f1_local1, f1_arg0, 0.5, 0.5, 470, 920, 0, 0, 70, 170 ) --[[ @ 0]]
	self:addElement( PCNotif ) --[[ @ 0]]
	self.PCNotif = PCNotif --[[ @ 0]]
	
	local KoreaErrorMessage = nil --[[ @ 0]]
	
	KoreaErrorMessage = LUI.UIText.new( 0, 0, 374.5, 1583.5, 0, 0, 417, 454 ) --[[ @ 0]]
	KoreaErrorMessage:setAlpha( 0 ) --[[ @ 0]]
	KoreaErrorMessage:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2B582AE90C06D4FF" ) ) --[[ @ 0]]
	KoreaErrorMessage:setTTF( "default" ) --[[ @ 0]]
	KoreaErrorMessage:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	KoreaErrorMessage:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( KoreaErrorMessage ) --[[ @ 0]]
	self.KoreaErrorMessage = KoreaErrorMessage --[[ @ 0]]
	
	local BlackFadeForGameStart = LUI.UIImage.new( -0.05, 1.05, 0, 0, -0.05, 1.05, 0, 0 ) --[[ @ 0]]
	BlackFadeForGameStart:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( BlackFadeForGameStart ) --[[ @ 0]]
	self.BlackFadeForGameStart = BlackFadeForGameStart --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HideForGameStart",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg0, "LobbyRoot", "hideMenusForGameStart", 1 )
			end
		},
		{
			stateName = "ShowSelectKorea15Plus",
			condition = function ( menu, element, event )
				local f17_local0 = IsPC() --[[ @ 0]]
				if f17_local0 then
					f17_local0 = IsZombies() --[[ @ 0]]
					if f17_local0 then
						f17_local0 = CoD.PCKoreaUtility.ShowKorea15Plus() --[[ @ 0]]
					end
				end
				return f17_local0
			end
		},
		{
			stateName = "ShowSelect",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorSelect( f1_arg0 )
			end
		},
		{
			stateName = "ShowPregame",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorPregame( f1_arg0 )
			end
		},
		{
			stateName = "ShowPrivate",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorPrivate( self, f1_arg0 )
			end
		},
		{
			stateName = "ShowCustom",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorCustom( self, f1_arg0 )
			end
		},
		{
			stateName = "ShowArena",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorArena( f1_arg0 )
			end
		},
		{
			stateName = "ShowArenaMatchmaking",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorArenaMatchmaking( f1_arg0 )
			end
		},
		{
			stateName = "ShowTheater",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorTheater( f1_arg0 )
			end
		},
		{
			stateName = "ShowPublic",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorPublic( f1_arg0 )
			end
		},
		{
			stateName = "ShowTraining",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorTraining( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local25 = self --[[ @ 0]]
	local f1_local26 = self.subscribeToModel --[[ @ 0]]
	local f1_local27 = DataSources.LobbyRoot.getModel( f1_arg0 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27.hideMenusForGameStart, function ( f27_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f27_arg0:get(),
			modelName = "hideMenusForGameStart"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.lobbyNav"], function ( f28_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f28_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.showSelect"], function ( f29_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f29_arg0:get(),
			modelName = "lobbyRoot.showSelect"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.lobbyNetworkMode"], function ( f30_arg0, f30_arg1 )
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f30_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.lobbyNav"], function ( f31_arg0, f31_arg1 )
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f31_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.privateClient.update"], function ( f32_arg0, f32_arg1 )
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f32_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.showSelect"], function ( f33_arg0, f33_arg1 )
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f33_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f34_arg0, f34_arg1 )
		f34_arg1.menu = f34_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f34_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27.LastInput, function ( f35_arg0, f35_arg1 )
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f35_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetModelForController"]( f1_arg0 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["DirectorZMLoadoutPreview.ZMLoadoutPreviewWidgetShown"], function ( f36_arg0, f36_arg1 )
		CoD.Menu.UpdateButtonShownState( f36_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f36_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "xuid", true, function ( model, f37_arg1 )
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f37_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.lobbyTimeRemaining"], function ( f38_arg0, f38_arg1 )
		CoD.Menu.UpdateButtonShownState( f38_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f38_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.spinnerActive"], function ( f39_arg0, f39_arg1 )
		CoD.Menu.UpdateButtonShownState( f39_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f39_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.publicLobby.stage"], function ( f40_arg0, f40_arg1 )
		CoD.Menu.UpdateButtonShownState( f40_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f40_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "on_session_start", function ( f41_arg0, f41_arg1 )
		f41_arg1.menu = f41_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f41_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "on_session_end", function ( f42_arg0, f42_arg1 )
		f42_arg1.menu = f42_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f42_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f42_arg0, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["lobbyRoot.gameClient.update"], function ( f43_arg0, f43_arg1 )
		CoD.Menu.UpdateButtonShownState( f43_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f43_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "unused_gamepad_button", function ( self, event )
		local f44_local0 = nil --[[ @ 0]]
		LobbyAddLocalClient( self, event.controller or f1_arg0 ) --[[ @ 0]]
		if not f44_local0 then
			f44_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f44_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_222361E23588705A"], nil, function ( element, menu, controller, model )
		if not IsPC() then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			OpenOverlay( self, "StartMenu_Main", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_704DC58203AB2DE0", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], nil, function ( element, menu, controller, model )
		if not IsPC() and not IsLAN() and not IsPlayerAGuest( controller ) and IsPlayerAllowedToPlayOnline( controller ) and not CoD.DirectorUtility.IsSocialButtonDisabledForDemo( controller ) and not CoD.DirectorUtility.ShowDirectorTraining( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			OpenOverlay( self, "Social_Main", controller, nil ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and IsPC() and not IsLAN() then
			CoD.BaseUtility.CallCustomElementFunction( self, self.DirectorSelect, controller, menu, "_activateFeaturedWidget" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsPC() and not IsLAN() and not IsPlayerAGuest( controller ) and IsPlayerAllowedToPlayOnline( controller ) and not CoD.DirectorUtility.IsSocialButtonDisabledForDemo( controller ) and not CoD.DirectorUtility.ShowDirectorTraining( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_478E0BA47CFB4A8", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and IsPC() and not IsLAN() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.IsOfflineDemo() and IsLobbyNetworkModeLAN() and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and CoD.DirectorUtility.IsOfflineDemo() and IsLobbyNetworkModeLAN() and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.DirectorUtility.NavigateToLobby( menu, controller, LuaEnum.UI.DIRECTOR_LAN_MP ) --[[ @ 0]]
			return true
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and not IsLAN() and not IsPC() and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.BaseUtility.CallCustomElementFunction( self, self.DirectorSelect, controller, menu, "_activateFeaturedWidget" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.IsOfflineDemo() and IsLobbyNetworkModeLAN() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 1500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and CoD.DirectorUtility.IsOfflineDemo() and IsLobbyNetworkModeLAN() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_771B04FAC5BE0E35"] | 1500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return false
		elseif CoD.DirectorUtility.ShowDirectorSelect( controller ) and not IsLAN() and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "ESCAPE", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.DirectorUtility.HideLoadoutPreview( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.DirectorUtility.HideLoadoutPreview( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorPregame( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and not CoD.ArenaUtility.ArenaMatchSet( self ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() and IsPC() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.LobbyUtility.ShouldShowLeaveLobbyPopup() and not CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) then
			CoD.LobbyUtility.LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorSelect( controller ) then
			OpenPCQuit( self, menu, self, controller ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.AllowShortPressToGoBack( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_7C2E92C54C2BE289", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorPregame( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and not CoD.ArenaUtility.ArenaMatchSet( self ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_7C2E92C54C2BE289", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.LobbyUtility.ShouldShowLeaveLobbyPopup() and not CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_7C2E92C54C2BE289", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_7C2E92C54C2BE289", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.ShowDirectorSelect( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_2B2EF56B4AF147B8", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		elseif IsMouseOrKeyboard( controller ) and CoD.DirectorUtility.AllowShortPressToGoBack( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_370A9FDC87CD3D48", nil, "ESCAPE" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, true ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) and not IsPC() then
			CoD.DirectorUtility.HideLoadoutPreview( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.DirectorUtility.HideLoadoutPreview( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and not CoD.DirectorUtility.ShowDirectorPregame( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and not CoD.ArenaUtility.ArenaMatchSet( self ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			CoD.DirectorUtility.ClearSelectedClient( controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() and IsPC() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.LobbyUtility.ShouldShowLeaveLobbyPopup() and not CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) then
			CoD.LobbyUtility.LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorSelect( controller ) and IsPC() then
			OpenPCQuit( self, menu, self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.AllowShortPressToGoBack( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			LobbyGoBack( self, controller ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) and IsPC() then
			CoD.DirectorUtility.HideLoadoutPreview( controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_26287CA575B55EC0", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7C2E92C54C2BE289", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_3EF2D3320785B51A", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and not CoD.DirectorUtility.ShowDirectorPregame( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_3EF2D3320785B51A", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and not CoD.ArenaUtility.ArenaMatchSet( self ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_3EF2D3320785B51A", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.DirectorUtility.HasSelectedClient( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7C2E92C54C2BE289", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) and IsLobbyPrivateHost() and IsWarzone() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_FF006933C958CA6", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_3EF2D3320785B51A", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.LobbyUtility.ShouldShowLeaveLobbyPopup() and not CoD.DirectorUtility.ShowDirectorPublic( controller ) and not CoD.DirectorUtility.IsOfflineDemo() and not CoD.DirectorUtility.ShowDirectorArenaMatchmaking( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_3EF2D3320785B51A", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorCustom( self, controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7C2E92C54C2BE289", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorTheater( controller ) and CoD.ModelUtility.IsGlobalModelValueGreaterThan( "lobbyRoot.lobbyTimeRemaining", 0 ) and IsLobbyHostOfCurrentMenu() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_7C2E92C54C2BE289", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.ShowDirectorSelect( controller ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_2B2EF56B4AF147B8", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.AllowShortPressToGoBack( self, controller ) and not CoD.ModelUtility.IsGlobalModelValueTrue( "lobbyRoot.spinnerActive" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and CoD.DirectorUtility.IsLoadoutPreviewWidgetShown( controller ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], "ui_contextual_1", function ( element, menu, controller, model )
		if CoD.AARUtility.CanShowAAR( menu, controller ) then
			CoD.AARUtility.OpenAAR( menu, controller ) --[[ @ 0]]
			UpdateButtonPromptState( menu, element, controller, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.AARUtility.CanShowAAR( menu, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"], @"hash_5EEF90B1483C4C23", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], "ui_contextual_2", function ( element, menu, controller, model )
		if IsBooleanDvarSet( "lobby_gestures_enabled" ) and CoD.DirectorUtility[@"hash_61E20A632CB63092"]( controller ) then
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			CoD.BaseUtility.MenuPreservesButton( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], true ) --[[ @ 0]]
			OpenOverlay( self, "DirectorGestureSelector", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsBooleanDvarSet( "lobby_gestures_enabled" ) and CoD.DirectorUtility[@"hash_61E20A632CB63092"]( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3820DDD869ABBFAA"], @"hash_11C35414911C9A0E", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f59_arg2, f59_arg3, f59_arg4 )
		if IsElementInState( f1_local1, "ShowArena" ) then
			CoD.AARUtility.OpenAARIfNeeded( f1_local1, controller ) --[[ @ 0]]
			UpdateButtonPromptState( f1_local1, element, controller, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
			CoD.DirectorUtility.ForceNotifyPrivateClientUpdate() --[[ @ 0]]
			ForceNotifyControllerModel( controller, "Contracts.updateActiveContracts" ) --[[ @ 0]]
		elseif IsElementInAnyState( f1_local1, "ShowCustom", "ShowArena", "ShowPublic", "ShowPrivate", "ShowPregame" ) then
			CoD.AARUtility.OpenAARIfNeeded( f1_local1, controller ) --[[ @ 0]]
			UpdateButtonPromptState( f1_local1, element, controller, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
			ForceNotifyControllerModel( controller, "Contracts.updateActiveContracts" ) --[[ @ 0]]
		elseif IsElementInState( f1_local1, "ShowTraining" ) then
			CoD.CTUtility.InitSpecialistHeadquarters( f1_local1, controller ) --[[ @ 0]]
			UpdateButtonPromptState( f1_local1, element, controller, Enum[@"LUIButton"][@"hash_593AB4C84F113EE1"] ) --[[ @ 0]]
		elseif IsElementInState( f1_local1, "ShowArenaMatchmaking" ) then
			CoD.DirectorUtility.ForceNotifyPrivateClientUpdate() --[[ @ 0]]
			ForceNotifyControllerModel( controller, "Contracts.updateActiveContracts" ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		ClearMenuSavedState( f1_local1 ) --[[ @ 0]]
		CoD.DirectorUtility.OnDirectorClose( f1_local1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "GlobalModel", "lobbyRoot.room", function ( model )
		local f61_local0 = self --[[ @ 0]]
		RefreshLobbyRoom( f1_local1, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "isMatchmaking", function ( model )
		local f62_local0 = self --[[ @ 0]]
		RefreshLobbyRoom( f1_local1, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "LobbyRoot", "hideMenusForGameStart", function ( model )
		local f63_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualTo( model, 1 ) then
			PlayClip( self, "HideForGameStart", f1_arg0 ) --[[ @ 0]]
			SetLoseFocusToSelf( self, f1_arg0 ) --[[ @ 0]]
			MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsParamModelEqualTo( model, 0 ) then
			PlayClip( self, "DefaultClip", f1_arg0 ) --[[ @ 0]]
			MenuUnhideFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	SearchQoSJoinList.id = "SearchQoSJoinList" --[[ @ 0]]
	DirectorTheater.id = "DirectorTheater" --[[ @ 0]]
	DirectorCustom.id = "DirectorCustom" --[[ @ 0]]
	DirectorTraining.id = "DirectorTraining" --[[ @ 0]]
	DirectorArenaMatchmaking.id = "DirectorArenaMatchmaking" --[[ @ 0]]
	DirectorArenaPregame.id = "DirectorArenaPregame" --[[ @ 0]]
	DirectorPublic.id = "DirectorPublic" --[[ @ 0]]
	DirectorPrivate.id = "DirectorPrivate" --[[ @ 0]]
	DirectorPregame.id = "DirectorPregame" --[[ @ 0]]
	DirectorSelect.id = "DirectorSelect" --[[ @ 0]]
	DirectorCommonSafeAreaBottomAndLeft.id = "DirectorCommonSafeAreaBottomAndLeft" --[[ @ 0]]
	DirectorCommonPartyList.id = "DirectorCommonPartyList" --[[ @ 0]]
	if CoD.isPC then
		ChatClient.id = "ChatClient" --[[ @ 0]]
	end
	if CoD.isPC then
		ChatClientPassiveEntryDisplay.id = "ChatClientPassiveEntryDisplay" --[[ @ 0]]
	end
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	if CoD.isPC then
		FrontendBattlenetContainer.id = "FrontendBattlenetContainer" --[[ @ 0]]
	end
	if CoD.isPC then
		PCNotif.id = "PCNotif" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = DirectorTheater --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local26 = self --[[ @ 0]]
	if IsPC() then
		CoD.DirectorUtility.PostLoad( f1_arg0, self ) --[[ @ 0]]
		CoD.PCWidgetUtility.ResetAllKeysColor() --[[ @ 0]]
		CoD.PCUtility.StartTrackingFriendUpdate( f1_local1, f1_arg0 ) --[[ @ 0]]
		CoD.PCKoreaUtility.StartKoreaIndulgenceChecks( self ) --[[ @ 0]]
		PrepareNavigationInDirectorRoot( f1_arg0 ) --[[ @ 0]]
		CheckModeAvailableAndBackOut_ZM( self, f1_local1, f1_arg0 ) --[[ @ 0]]
	else
		CoD.DirectorUtility.PostLoad( f1_arg0, self ) --[[ @ 0]]
	end
	f1_local26 = FullScreenBlack --[[ @ 0]]
	if IsPC() then
		SizeToWidthOfScreen( f1_local26, f1_arg0 ) --[[ @ 0]]
	end
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorTheater, "ShowTheater" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorCustom, "ShowCustom" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorTraining, "ShowTraining" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorArenaMatchmaking, "ShowArenaMatchmaking" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorArenaPregame, "ShowArena" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorPublic, "ShowPublic" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorPregame, "ShowPregame" ) --[[ @ 0]]
	CoD.DirectorUtility.RegisterDirectorStateDefaultFocus( f1_local1, DirectorSelect, "ShowSelect" ) --[[ @ 0]]
	f1_local26 = blackFade --[[ @ 0]]
	if IsPC() then
		SizeToWidthOfScreen( f1_local26, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.Director.__resetProperties = function ( f64_arg0 )
	f64_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
	f64_arg0.KoreaErrorMessage:completeAnimation() --[[ @ 0]]
	f64_arg0.blackFade:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorSelect:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorPregame:completeAnimation() --[[ @ 0]]
	f64_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorPrivate:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorCustom:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorArenaPregame:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorArenaMatchmaking:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorTheater:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorPublic:completeAnimation() --[[ @ 0]]
	f64_arg0.BackingGrayMediumLeft:completeAnimation() --[[ @ 0]]
	f64_arg0.DirectorTraining:completeAnimation() --[[ @ 0]]
	f64_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.KoreaErrorMessage:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorSelect:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 1 ) --[[ @ 0]]
	f64_arg0.DirectorCommonPartyList:setAlpha( 1 ) --[[ @ 0]]
	f64_arg0.DirectorPregame:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.ScorestreakAspectRatioFix:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorPrivate:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorCustom:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorArenaPregame:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorArenaMatchmaking:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorTheater:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.DirectorPublic:setAlpha( 0 ) --[[ @ 0]]
	f64_arg0.BackingGrayMediumLeft:setAlpha( 1 ) --[[ @ 0]]
	f64_arg0.DirectorTraining:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Director.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f66_local0 = function ( f67_arg0 )
				f66_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f66_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f66_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f66_arg0.clipInterrupted ) --[[ @ 0]]
				f66_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f66_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f66_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f66_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f66_local0( f66_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	HideForGameStart = {
		DefaultClip = function ( f68_arg0, f68_arg1 )
			f68_arg0:__resetProperties() --[[ @ 0]]
			f68_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f68_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f68_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
			f68_arg0.clipFinished( f68_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowSelectKorea15Plus = {
		DefaultClip = function ( f69_arg0, f69_arg1 )
			f69_arg0:__resetProperties() --[[ @ 0]]
			f69_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f69_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f69_arg0.blackFade:setAlpha( 1 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.blackFade ) --[[ @ 0]]
			f69_arg0.KoreaErrorMessage:completeAnimation() --[[ @ 0]]
			f69_arg0.KoreaErrorMessage:setAlpha( 1 ) --[[ @ 0]]
			f69_arg0.clipFinished( f69_arg0.KoreaErrorMessage ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f70_arg0, f70_arg1 )
			f70_arg0:__resetProperties() --[[ @ 0]]
			f70_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f70_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f70_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.blackFade ) --[[ @ 0]]
			f70_arg0.KoreaErrorMessage:completeAnimation() --[[ @ 0]]
			f70_arg0.KoreaErrorMessage:setAlpha( 0 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.KoreaErrorMessage ) --[[ @ 0]]
			f70_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f70_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
			f70_arg0.clipFinished( f70_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowSelect = {
		DefaultClip = function ( f71_arg0, f71_arg1 )
			f71_arg0:__resetProperties() --[[ @ 0]]
			f71_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f71_arg0.DirectorSelect:completeAnimation() --[[ @ 0]]
			f71_arg0.DirectorSelect:setAlpha( 1 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.DirectorSelect ) --[[ @ 0]]
			f71_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
			f71_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
			f71_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
			f71_arg0.DirectorCommonPartyList:setAlpha( 0 ) --[[ @ 0]]
			f71_arg0.clipFinished( f71_arg0.DirectorCommonPartyList ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f72_arg0, f72_arg1 )
			f72_arg0:__resetProperties() --[[ @ 0]]
			f72_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f72_local0 = function ( f73_arg0 )
				f72_arg0.DirectorSelect:beginAnimation( 750 ) --[[ @ 0]]
				f72_arg0.DirectorSelect:setAlpha( 0 ) --[[ @ 0]]
				f72_arg0.DirectorSelect:registerEventHandler( "interrupted_keyframe", f72_arg0.clipInterrupted ) --[[ @ 0]]
				f72_arg0.DirectorSelect:registerEventHandler( "transition_complete_keyframe", f72_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f72_arg0.DirectorSelect:completeAnimation() --[[ @ 0]]
			f72_arg0.DirectorSelect:setAlpha( 1 ) --[[ @ 0]]
			f72_local0( f72_arg0.DirectorSelect ) --[[ @ 0]]
			local f72_local1 = function ( f74_arg0 )
				f72_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f72_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f72_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f72_arg0.clipInterrupted ) --[[ @ 0]]
				f72_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f72_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f72_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f72_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f72_local1( f72_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowPregame = {
		DefaultClip = function ( f75_arg0, f75_arg1 )
			f75_arg0:__resetProperties() --[[ @ 0]]
			f75_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f75_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f75_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f75_arg0.clipFinished( f75_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f75_arg0.DirectorPregame:completeAnimation() --[[ @ 0]]
			f75_arg0.DirectorPregame:setAlpha( 1 ) --[[ @ 0]]
			f75_arg0.clipFinished( f75_arg0.DirectorPregame ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f76_arg0, f76_arg1 )
			f76_arg0:__resetProperties() --[[ @ 0]]
			f76_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f76_local0 = function ( f77_arg0 )
				f76_arg0.DirectorPregame:beginAnimation( 750 ) --[[ @ 0]]
				f76_arg0.DirectorPregame:setAlpha( 0 ) --[[ @ 0]]
				f76_arg0.DirectorPregame:registerEventHandler( "interrupted_keyframe", f76_arg0.clipInterrupted ) --[[ @ 0]]
				f76_arg0.DirectorPregame:registerEventHandler( "transition_complete_keyframe", f76_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f76_arg0.DirectorPregame:completeAnimation() --[[ @ 0]]
			f76_arg0.DirectorPregame:setAlpha( 1 ) --[[ @ 0]]
			f76_local0( f76_arg0.DirectorPregame ) --[[ @ 0]]
			local f76_local1 = function ( f78_arg0 )
				f76_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f76_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f76_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f76_arg0.clipInterrupted ) --[[ @ 0]]
				f76_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f76_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f76_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f76_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f76_local1( f76_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowPrivate = {
		DefaultClip = function ( f79_arg0, f79_arg1 )
			f79_arg0:__resetProperties() --[[ @ 0]]
			f79_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f79_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f79_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f79_arg0.clipFinished( f79_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f79_arg0.DirectorPrivate:completeAnimation() --[[ @ 0]]
			f79_arg0.DirectorPrivate:setAlpha( 1 ) --[[ @ 0]]
			f79_arg0.clipFinished( f79_arg0.DirectorPrivate ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f80_arg0, f80_arg1 )
			f80_arg0:__resetProperties() --[[ @ 0]]
			f80_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f80_local0 = function ( f81_arg0 )
				f80_arg0.DirectorPrivate:beginAnimation( 750 ) --[[ @ 0]]
				f80_arg0.DirectorPrivate:setAlpha( 0 ) --[[ @ 0]]
				f80_arg0.DirectorPrivate:registerEventHandler( "interrupted_keyframe", f80_arg0.clipInterrupted ) --[[ @ 0]]
				f80_arg0.DirectorPrivate:registerEventHandler( "transition_complete_keyframe", f80_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f80_arg0.DirectorPrivate:completeAnimation() --[[ @ 0]]
			f80_arg0.DirectorPrivate:setAlpha( 1 ) --[[ @ 0]]
			f80_local0( f80_arg0.DirectorPrivate ) --[[ @ 0]]
			local f80_local1 = function ( f82_arg0 )
				f80_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f80_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f80_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f80_arg0.clipInterrupted ) --[[ @ 0]]
				f80_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f80_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f80_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f80_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f80_local1( f80_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowCustom = {
		DefaultClip = function ( f83_arg0, f83_arg1 )
			f83_arg0:__resetProperties() --[[ @ 0]]
			f83_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f83_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f83_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f83_arg0.clipFinished( f83_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f83_arg0.DirectorCustom:completeAnimation() --[[ @ 0]]
			f83_arg0.DirectorCustom:setAlpha( 1 ) --[[ @ 0]]
			f83_arg0.clipFinished( f83_arg0.DirectorCustom ) --[[ @ 0]]
			f83_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
			f83_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 0 ) --[[ @ 0]]
			f83_arg0.clipFinished( f83_arg0.DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
			f83_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
			f83_arg0.DirectorCommonPartyList:setAlpha( 0 ) --[[ @ 0]]
			f83_arg0.clipFinished( f83_arg0.DirectorCommonPartyList ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f84_arg0, f84_arg1 )
			f84_arg0:__resetProperties() --[[ @ 0]]
			f84_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f84_arg0.DirectorCustom:completeAnimation() --[[ @ 0]]
			f84_arg0.DirectorCustom:setAlpha( 1 ) --[[ @ 0]]
			f84_arg0.clipFinished( f84_arg0.DirectorCustom ) --[[ @ 0]]
			f84_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
			f84_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 0 ) --[[ @ 0]]
			f84_arg0.clipFinished( f84_arg0.DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
			f84_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
			f84_arg0.DirectorCommonPartyList:setAlpha( 0 ) --[[ @ 0]]
			f84_arg0.clipFinished( f84_arg0.DirectorCommonPartyList ) --[[ @ 0]]
			local f84_local0 = function ( f85_arg0 )
				f84_arg0.blackFade:beginAnimation( 200 ) --[[ @ 0]]
				f84_arg0.blackFade:setAlpha( 0.8 ) --[[ @ 0]]
				f84_arg0.blackFade:registerEventHandler( "interrupted_keyframe", f84_arg0.clipInterrupted ) --[[ @ 0]]
				f84_arg0.blackFade:registerEventHandler( "transition_complete_keyframe", f84_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f84_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f84_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
			f84_local0( f84_arg0.blackFade ) --[[ @ 0]]
		end
	},
	ShowArena = {
		DefaultClip = function ( f86_arg0, f86_arg1 )
			f86_arg0:__resetProperties() --[[ @ 0]]
			f86_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f86_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f86_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f86_arg0.clipFinished( f86_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f86_arg0.DirectorArenaPregame:completeAnimation() --[[ @ 0]]
			f86_arg0.DirectorArenaPregame:setAlpha( 1 ) --[[ @ 0]]
			f86_arg0.clipFinished( f86_arg0.DirectorArenaPregame ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f87_arg0, f87_arg1 )
			f87_arg0:__resetProperties() --[[ @ 0]]
			f87_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			local f87_local0 = function ( f88_arg0 )
				f87_arg0.blackFade:beginAnimation( 200 ) --[[ @ 0]]
				f87_arg0.blackFade:setAlpha( 0.8 ) --[[ @ 0]]
				f87_arg0.blackFade:registerEventHandler( "interrupted_keyframe", f87_arg0.clipInterrupted ) --[[ @ 0]]
				f87_arg0.blackFade:registerEventHandler( "transition_complete_keyframe", f87_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f87_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f87_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
			f87_local0( f87_arg0.blackFade ) --[[ @ 0]]
		end
	},
	ShowArenaMatchmaking = {
		DefaultClip = function ( f89_arg0, f89_arg1 )
			f89_arg0:__resetProperties() --[[ @ 0]]
			f89_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f89_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f89_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f89_arg0.clipFinished( f89_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f89_arg0.DirectorArenaMatchmaking:completeAnimation() --[[ @ 0]]
			f89_arg0.DirectorArenaMatchmaking:setAlpha( 1 ) --[[ @ 0]]
			f89_arg0.clipFinished( f89_arg0.DirectorArenaMatchmaking ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f90_arg0, f90_arg1 )
			f90_arg0:__resetProperties() --[[ @ 0]]
			f90_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			local f90_local0 = function ( f91_arg0 )
				f90_arg0.DirectorArenaMatchmaking:beginAnimation( 750 ) --[[ @ 0]]
				f90_arg0.DirectorArenaMatchmaking:setAlpha( 0 ) --[[ @ 0]]
				f90_arg0.DirectorArenaMatchmaking:registerEventHandler( "interrupted_keyframe", f90_arg0.clipInterrupted ) --[[ @ 0]]
				f90_arg0.DirectorArenaMatchmaking:registerEventHandler( "transition_complete_keyframe", f90_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f90_arg0.DirectorArenaMatchmaking:completeAnimation() --[[ @ 0]]
			f90_arg0.DirectorArenaMatchmaking:setAlpha( 1 ) --[[ @ 0]]
			f90_local0( f90_arg0.DirectorArenaMatchmaking ) --[[ @ 0]]
			local f90_local1 = function ( f92_arg0 )
				f90_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f90_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f90_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f90_arg0.clipInterrupted ) --[[ @ 0]]
				f90_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f90_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f90_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f90_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f90_local1( f90_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowTheater = {
		DefaultClip = function ( f93_arg0, f93_arg1 )
			f93_arg0:__resetProperties() --[[ @ 0]]
			f93_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f93_arg0.DirectorTheater:completeAnimation() --[[ @ 0]]
			f93_arg0.DirectorTheater:setAlpha( 1 ) --[[ @ 0]]
			f93_arg0.clipFinished( f93_arg0.DirectorTheater ) --[[ @ 0]]
			f93_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
			f93_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 0 ) --[[ @ 0]]
			f93_arg0.clipFinished( f93_arg0.DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
			f93_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
			f93_arg0.DirectorCommonPartyList:setAlpha( 0 ) --[[ @ 0]]
			f93_arg0.clipFinished( f93_arg0.DirectorCommonPartyList ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f94_arg0, f94_arg1 )
			f94_arg0:__resetProperties() --[[ @ 0]]
			f94_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f94_arg0.DirectorTheater:completeAnimation() --[[ @ 0]]
			f94_arg0.DirectorTheater:setAlpha( 1 ) --[[ @ 0]]
			f94_arg0.clipFinished( f94_arg0.DirectorTheater ) --[[ @ 0]]
			local f94_local0 = function ( f95_arg0 )
				f94_arg0.blackFade:beginAnimation( 200 ) --[[ @ 0]]
				f94_arg0.blackFade:setAlpha( 0.8 ) --[[ @ 0]]
				f94_arg0.blackFade:registerEventHandler( "interrupted_keyframe", f94_arg0.clipInterrupted ) --[[ @ 0]]
				f94_arg0.blackFade:registerEventHandler( "transition_complete_keyframe", f94_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f94_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f94_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
			f94_local0( f94_arg0.blackFade ) --[[ @ 0]]
		end
	},
	ShowPublic = {
		DefaultClip = function ( f96_arg0, f96_arg1 )
			f96_arg0:__resetProperties() --[[ @ 0]]
			f96_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f96_arg0.ScorestreakAspectRatioFix:completeAnimation() --[[ @ 0]]
			f96_arg0.ScorestreakAspectRatioFix:setAlpha( 1 ) --[[ @ 0]]
			f96_arg0.clipFinished( f96_arg0.ScorestreakAspectRatioFix ) --[[ @ 0]]
			f96_arg0.DirectorPublic:completeAnimation() --[[ @ 0]]
			f96_arg0.DirectorPublic:setAlpha( 1 ) --[[ @ 0]]
			f96_arg0.clipFinished( f96_arg0.DirectorPublic ) --[[ @ 0]]
			f96_arg0.BackingGrayMediumLeft:completeAnimation() --[[ @ 0]]
			f96_arg0.BackingGrayMediumLeft:setAlpha( 0 ) --[[ @ 0]]
			f96_arg0.clipFinished( f96_arg0.BackingGrayMediumLeft ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f97_arg0, f97_arg1 )
			f97_arg0:__resetProperties() --[[ @ 0]]
			f97_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			local f97_local0 = function ( f98_arg0 )
				f97_arg0.DirectorPublic:beginAnimation( 750 ) --[[ @ 0]]
				f97_arg0.DirectorPublic:setAlpha( 0 ) --[[ @ 0]]
				f97_arg0.DirectorPublic:registerEventHandler( "interrupted_keyframe", f97_arg0.clipInterrupted ) --[[ @ 0]]
				f97_arg0.DirectorPublic:registerEventHandler( "transition_complete_keyframe", f97_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f97_arg0.DirectorPublic:completeAnimation() --[[ @ 0]]
			f97_arg0.DirectorPublic:setAlpha( 1 ) --[[ @ 0]]
			f97_local0( f97_arg0.DirectorPublic ) --[[ @ 0]]
			local f97_local1 = function ( f99_arg0 )
				f97_arg0.BackingGrayMediumLeft:beginAnimation( 750 ) --[[ @ 0]]
				f97_arg0.BackingGrayMediumLeft:setAlpha( 1 ) --[[ @ 0]]
				f97_arg0.BackingGrayMediumLeft:registerEventHandler( "interrupted_keyframe", f97_arg0.clipInterrupted ) --[[ @ 0]]
				f97_arg0.BackingGrayMediumLeft:registerEventHandler( "transition_complete_keyframe", f97_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f97_arg0.BackingGrayMediumLeft:completeAnimation() --[[ @ 0]]
			f97_arg0.BackingGrayMediumLeft:setAlpha( 0 ) --[[ @ 0]]
			f97_local1( f97_arg0.BackingGrayMediumLeft ) --[[ @ 0]]
			local f97_local2 = function ( f100_arg0 )
				f97_arg0.BlackFadeForGameStart:beginAnimation( 750 ) --[[ @ 0]]
				f97_arg0.BlackFadeForGameStart:setAlpha( 1 ) --[[ @ 0]]
				f97_arg0.BlackFadeForGameStart:registerEventHandler( "interrupted_keyframe", f97_arg0.clipInterrupted ) --[[ @ 0]]
				f97_arg0.BlackFadeForGameStart:registerEventHandler( "transition_complete_keyframe", f97_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f97_arg0.BlackFadeForGameStart:completeAnimation() --[[ @ 0]]
			f97_arg0.BlackFadeForGameStart:setAlpha( 0 ) --[[ @ 0]]
			f97_local2( f97_arg0.BlackFadeForGameStart ) --[[ @ 0]]
		end
	},
	ShowTraining = {
		DefaultClip = function ( f101_arg0, f101_arg1 )
			f101_arg0:__resetProperties() --[[ @ 0]]
			f101_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f101_arg0.DirectorTraining:completeAnimation() --[[ @ 0]]
			f101_arg0.DirectorTraining:setAlpha( 1 ) --[[ @ 0]]
			f101_arg0.clipFinished( f101_arg0.DirectorTraining ) --[[ @ 0]]
			f101_arg0.DirectorCommonSafeAreaBottomAndLeft:completeAnimation() --[[ @ 0]]
			f101_arg0.DirectorCommonSafeAreaBottomAndLeft:setAlpha( 0 ) --[[ @ 0]]
			f101_arg0.clipFinished( f101_arg0.DirectorCommonSafeAreaBottomAndLeft ) --[[ @ 0]]
			f101_arg0.DirectorCommonPartyList:completeAnimation() --[[ @ 0]]
			f101_arg0.DirectorCommonPartyList:setAlpha( 0 ) --[[ @ 0]]
			f101_arg0.clipFinished( f101_arg0.DirectorCommonPartyList ) --[[ @ 0]]
		end,
		HideForGameStart = function ( f102_arg0, f102_arg1 )
			f102_arg0:__resetProperties() --[[ @ 0]]
			f102_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f102_arg0.DirectorCustom:completeAnimation() --[[ @ 0]]
			f102_arg0.DirectorCustom:setAlpha( 1 ) --[[ @ 0]]
			f102_arg0.clipFinished( f102_arg0.DirectorCustom ) --[[ @ 0]]
			local f102_local0 = function ( f103_arg0 )
				f102_arg0.blackFade:beginAnimation( 200 ) --[[ @ 0]]
				f102_arg0.blackFade:setAlpha( 0.8 ) --[[ @ 0]]
				f102_arg0.blackFade:registerEventHandler( "interrupted_keyframe", f102_arg0.clipInterrupted ) --[[ @ 0]]
				f102_arg0.blackFade:registerEventHandler( "transition_complete_keyframe", f102_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f102_arg0.blackFade:completeAnimation() --[[ @ 0]]
			f102_arg0.blackFade:setAlpha( 0 ) --[[ @ 0]]
			f102_local0( f102_arg0.blackFade ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Director.__onClose = function ( f104_arg0 )
	f104_arg0.ScorestreakAspectRatioFix:close() --[[ @ 0]]
	f104_arg0.FullScreenBlack:close() --[[ @ 0]]
	f104_arg0.SearchQoSJoinList:close() --[[ @ 0]]
	f104_arg0.DirectorTheater:close() --[[ @ 0]]
	f104_arg0.DirectorCustom:close() --[[ @ 0]]
	f104_arg0.DirectorTraining:close() --[[ @ 0]]
	f104_arg0.DirectorArenaMatchmaking:close() --[[ @ 0]]
	f104_arg0.DirectorArenaPregame:close() --[[ @ 0]]
	f104_arg0.DirectorPublic:close() --[[ @ 0]]
	f104_arg0.DirectorPrivate:close() --[[ @ 0]]
	f104_arg0.DirectorPregame:close() --[[ @ 0]]
	f104_arg0.DirectorSelect:close() --[[ @ 0]]
	f104_arg0.DirectorCommonSafeAreaBottomAndLeft:close() --[[ @ 0]]
	f104_arg0.DirectorCommonPartyList:close() --[[ @ 0]]
	f104_arg0.ChatClient:close() --[[ @ 0]]
	f104_arg0.ChatClientPassiveEntryDisplay:close() --[[ @ 0]]
	f104_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f104_arg0.BackingGrayMediumLeft:close() --[[ @ 0]]
	f104_arg0.blackFade:close() --[[ @ 0]]
	f104_arg0.FrontendBattlenetContainer:close() --[[ @ 0]]
	f104_arg0.PCNotif:close() --[[ @ 0]]
end
 --[[ @ 0]]
