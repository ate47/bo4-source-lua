-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
require( "x64:3e272191e46af824" ) --[[ @ 0]]
require( "x64:73c21aa1a96202c9" ) --[[ @ 0]]
require( "x64:795553e1dbf377f6" ) --[[ @ 0]]

CoD.ReservesMeterInternal = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReservesMeterInternal.__defaultWidth = 684 --[[ @ 0]]
CoD.ReservesMeterInternal.__defaultHeight = 67 --[[ @ 0]]
CoD.ReservesMeterInternal.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReservesMeterInternal ) --[[ @ 0]]
	self.id = "ReservesMeterInternal" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0, 0, 21, 456, 0, 0, 13.5, 33.5 ) --[[ @ 0]]
	Title:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Title:setText( LocalizeToUpperString( @"hash_44112D432F3F5906" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Title:setLetterSpacing( 2 ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local RewardName = LUI.UIText.new( 0, 0, 188.5, 433.5, 0, 0, 15.5, 33.5 ) --[[ @ 0]]
	RewardName:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
	RewardName:setAlpha( 0 ) --[[ @ 0]]
	RewardName:setText( LocalizeToUpperString( @"hash_0" ) ) --[[ @ 0]]
	RewardName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	RewardName:setLetterSpacing( 4 ) --[[ @ 0]]
	RewardName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	RewardName:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	self:addElement( RewardName ) --[[ @ 0]]
	self.RewardName = RewardName --[[ @ 0]]
	
	local ProgressBar = CoD.ReservesSpecialContractProgressBar.new( f1_arg0, f1_arg1, 0, 0, 12, 503, 0, 0, 33.5, 51.5 ) --[[ @ 0]]
	ProgressBar:mergeStateConditions( {
		{
			stateName = "Complete",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ProgressBar.Progress:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar" ) ) --[[ @ 0]]
	ProgressBar.ProgressGlow:setImage( RegisterImage( @"uie_ui_menu_aar_levelup_bar_glow" ) ) --[[ @ 0]]
	ProgressBar:subscribeToGlobalModel( f1_arg1, "LootStreamProgress", "reservesRngPercentage", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			ProgressBar.Progress:setShaderVector( 0, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:subscribeToGlobalModel( f1_arg1, "LootStreamProgress", "reservesRngPercentage", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			ProgressBar.ProgressGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f5_local0, 1 ), CoD.GetVectorComponentFromString( f5_local0, 2 ), CoD.GetVectorComponentFromString( f5_local0, 3 ), CoD.GetVectorComponentFromString( f5_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ProgressBar:subscribeToGlobalModel( f1_arg1, "LootStreamProgress", "reservesRngPercentage", function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			ProgressBar.ProgressFraction:setText( NumberAsPercent( CoD.BaseUtility.FloorFraction( 0, StringMultiply( 100, f6_local0 ) ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ProgressBar ) --[[ @ 0]]
	self.ProgressBar = ProgressBar --[[ @ 0]]
	
	local CompleteBanner = CoD.ContractCompleteBanner.new( f1_arg0, f1_arg1, 0, 0, 283.5, 433.5, 1, 1, -55.5, -30.5 ) --[[ @ 0]]
	CompleteBanner:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	CompleteBanner:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( CompleteBanner ) --[[ @ 0]]
	self.CompleteBanner = CompleteBanner --[[ @ 0]]
	
	local ItemHintText = CoD.CommonToolTip.new( f1_arg0, f1_arg1, 0.5, 0.5, -342, 342, 1, 1, 0, 45 ) --[[ @ 0]]
	ItemHintText:mergeStateConditions( {
		{
			stateName = "Mouse",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "NoHintText",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueNonEmptyString( self, f1_arg1, "toolTip" )
			end
		},
		{
			stateName = "CenterAlign",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	ItemHintText:linkToElementModel( ItemHintText, "toolTip", true, function ( model )
		f1_arg0:updateElementState( ItemHintText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "toolTip"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ItemHintText:setAlpha( 0 ) --[[ @ 0]]
	ItemHintText:linkToElementModel( self, "toolTip", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			ItemHintText.textCenterAlign:setText( Engine[@"hash_4F9F1239CFD921FE"]( f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ItemHintText ) --[[ @ 0]]
	self.ItemHintText = ItemHintText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Complete",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "allRngUnlocked" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "allRngUnlocked", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "allRngUnlocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReservesMeterInternal.__resetProperties = function ( f15_arg0 )
	f15_arg0.CompleteBanner:completeAnimation() --[[ @ 0]]
	f15_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
	f15_arg0.CompleteBanner:setAlpha( 0 ) --[[ @ 0]]
	f15_arg0.ProgressBar:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReservesMeterInternal.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Complete = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f17_arg0.ProgressBar:completeAnimation() --[[ @ 0]]
			f17_arg0.ProgressBar:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.ProgressBar ) --[[ @ 0]]
			f17_arg0.CompleteBanner:completeAnimation() --[[ @ 0]]
			f17_arg0.CompleteBanner:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.CompleteBanner ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReservesMeterInternal.__onClose = function ( f18_arg0 )
	f18_arg0.ProgressBar:close() --[[ @ 0]]
	f18_arg0.CompleteBanner:close() --[[ @ 0]]
	f18_arg0.ItemHintText:close() --[[ @ 0]]
end
 --[[ @ 0]]
