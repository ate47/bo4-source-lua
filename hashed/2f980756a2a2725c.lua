-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:f00a10fc8301da2" ) --[[ @ 0]]
require( "ui/uieditor/widgets/aar_t8/levelup/aarxpmeter" ) --[[ @ 0]]
require( "x64:7a5b6deff4bc3cab" ) --[[ @ 0]]
require( "x64:37813f9cbf9b0834" ) --[[ @ 0]]
require( "x64:7dd310064e88e674" ) --[[ @ 0]]
require( "x64:ca5faac82324b65" ) --[[ @ 0]]
require( "x64:c96de52191fe142" ) --[[ @ 0]]
require( "x64:40c7e896ee4bc3f8" ) --[[ @ 0]]
require( "x64:46ee653ade3452f5" ) --[[ @ 0]]

CoD.AARSummaryTab_WZ = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AARSummaryTab_WZ.__defaultWidth = 1920 --[[ @ 0]]
CoD.AARSummaryTab_WZ.__defaultHeight = 900 --[[ @ 0]]
CoD.AARSummaryTab_WZ.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AARSummaryTab_WZ ) --[[ @ 0]]
	self.id = "AARSummaryTab_WZ" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local ScorestreakAspectRatioFix = nil --[[ @ 0]]
	
	ScorestreakAspectRatioFix = CoD.Scorestreak_AspectRatioFix.new( f1_arg0, f1_arg1, 0, 1, 0, 0, -0.1, 1.1, 0, 0 ) --[[ @ 0]]
	ScorestreakAspectRatioFix:mergeStateConditions( {
		{
			stateName = "Warzone",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:addElement( ScorestreakAspectRatioFix ) --[[ @ 0]]
	self.ScorestreakAspectRatioFix = ScorestreakAspectRatioFix --[[ @ 0]]
	
	local AarMpBacking = CoD.AARCommonBacking.new( f1_arg0, f1_arg1, 0.5, 0.5, -358, 998, 0.5, 0.5, -409, 427 ) --[[ @ 0]]
	AarMpBacking.Backer:setRGB( 0, 0, 0 ) --[[ @ 0]]
	AarMpBacking.Backer:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( AarMpBacking ) --[[ @ 0]]
	self.AarMpBacking = AarMpBacking --[[ @ 0]]
	
	local XPMeter = CoD.AARXpMeter.new( f1_arg0, f1_arg1, 0.5, 0.5, -620, 680, 0.5, 0.5, 335, 354 ) --[[ @ 0]]
	XPMeter:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not IsPublicOnlineGame()
			end
		},
		{
			stateName = "MaxRank",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( element, f1_arg1, "rank", CoD.RankUtility.GetRankCap() + 1 ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, f1_arg1, "xpNeededToLevelUp", 0 )
			end
		}
	} ) --[[ @ 0]]
	XPMeter:linkToElementModel( XPMeter, "rank", true, function ( model )
		f1_arg0:updateElementState( XPMeter, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rank"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( XPMeter, "xpNeededToLevelUp", true, function ( model )
		f1_arg0:updateElementState( XPMeter, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "xpNeededToLevelUp"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XPMeter.maxRankText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_4F80010008304EC0" ) ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, nil, false, function ( model )
		XPMeter:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "levelProgress", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			XPMeter.EarnedXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f8_local0, 1 ), CoD.GetVectorComponentFromString( f8_local0, 2 ), CoD.GetVectorComponentFromString( f8_local0, 3 ), CoD.GetVectorComponentFromString( f8_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "levelProgress", true, function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			XPMeter.EarnedXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f9_local0, 1 ), CoD.GetVectorComponentFromString( f9_local0, 2 ), CoD.GetVectorComponentFromString( f9_local0, 3 ), CoD.GetVectorComponentFromString( f9_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "levelProgress", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			XPMeter.EarnedXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f10_local0, 1 ), CoD.GetVectorComponentFromString( f10_local0, 2 ), CoD.GetVectorComponentFromString( f10_local0, 3 ), CoD.GetVectorComponentFromString( f10_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "previousProgressThisLevel", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			XPMeter.PreviousXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f11_local0, 1 ), CoD.GetVectorComponentFromString( f11_local0, 2 ), CoD.GetVectorComponentFromString( f11_local0, 3 ), CoD.GetVectorComponentFromString( f11_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "previousProgressThisLevel", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			XPMeter.PreviousXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f12_local0, 1 ), CoD.GetVectorComponentFromString( f12_local0, 2 ), CoD.GetVectorComponentFromString( f12_local0, 3 ), CoD.GetVectorComponentFromString( f12_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "previousProgressThisLevel", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			XPMeter.PreviousXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f13_local0, 1 ), CoD.GetVectorComponentFromString( f13_local0, 2 ), CoD.GetVectorComponentFromString( f13_local0, 3 ), CoD.GetVectorComponentFromString( f13_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "xpEarnedDuringMatch", true, function ( model )
		local f14_local0 = model:get() --[[ @ 0]]
		if f14_local0 ~= nil then
			XPMeter.xpEarnedText:setText( LocalizeIntoString( @"hash_29EDF95589F9CAF1", f14_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	XPMeter:linkToElementModel( self, "xpNeededToLevelUp", true, function ( model )
		local f15_local0 = model:get() --[[ @ 0]]
		if f15_local0 ~= nil then
			XPMeter.xpNeededText:setText( LocalizeIntoString( @"hash_2C1881B67805BFCA", f15_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( XPMeter ) --[[ @ 0]]
	self.XPMeter = XPMeter --[[ @ 0]]
	
	local AARGameHistory = CoD.AARGameHistory.new( f1_arg0, f1_arg1, 0.5, 0.5, -323.5, 836.5, 0.5, 0.5, 15, 315 ) --[[ @ 0]]
	AARGameHistory:linkToElementModel( self, nil, false, function ( model )
		AARGameHistory:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( AARGameHistory ) --[[ @ 0]]
	self.AARGameHistory = AARGameHistory --[[ @ 0]]
	
	local PerformanceLabel = LUI.UIText.new( 0.5, 0.5, -321.5, 533.5, 0.5, 0.5, -255, -217 ) --[[ @ 0]]
	PerformanceLabel:setRGB( 0.9, 0.89, 0.78 ) --[[ @ 0]]
	PerformanceLabel:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_704B072C59118316" ) ) --[[ @ 0]]
	PerformanceLabel:setTTF( "dinnext_regular" ) --[[ @ 0]]
	PerformanceLabel:setLetterSpacing( 10 ) --[[ @ 0]]
	PerformanceLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PerformanceLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( PerformanceLabel ) --[[ @ 0]]
	self.PerformanceLabel = PerformanceLabel --[[ @ 0]]
	
	local AARGametypeHeader = CoD.AARGametypeHeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -351.5, 648.5, 0.5, 0.5, -400, -250 ) --[[ @ 0]]
	AARGametypeHeader:subscribeToGlobalModel( f1_arg1, "AARSummaryStats", "gametypeIcon", function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			AARGametypeHeader.GametypeImage:setImage( RegisterImage( f17_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARGametypeHeader:subscribeToGlobalModel( f1_arg1, "AARSummaryStats", "gametypeDisplay", function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			AARGametypeHeader.GametypeGlow:setText( f18_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARGametypeHeader:subscribeToGlobalModel( f1_arg1, "AARSummaryStats", "gametypeDisplay", function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			AARGametypeHeader.Gametype:setText( f19_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AARGametypeHeader ) --[[ @ 0]]
	self.AARGametypeHeader = AARGametypeHeader --[[ @ 0]]
	
	local AARTierBar = CoD.AARTierBar.new( f1_arg0, f1_arg1, 0.5, 0.5, -164.5, 677.5, 0.5, 0.5, 385, 405 ) --[[ @ 0]]
	AARTierBar:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.AARUtility.ShouldHideTierRewardMiniStatus( self, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "tierProgress", true, function ( model )
		local f21_local0 = model:get() --[[ @ 0]]
		if f21_local0 ~= nil then
			AARTierBar.EarnedXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f21_local0, 1 ), CoD.GetVectorComponentFromString( f21_local0, 2 ), CoD.GetVectorComponentFromString( f21_local0, 3 ), CoD.GetVectorComponentFromString( f21_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "tierProgress", true, function ( model )
		local f22_local0 = model:get() --[[ @ 0]]
		if f22_local0 ~= nil then
			AARTierBar.EarnedXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f22_local0, 1 ), CoD.GetVectorComponentFromString( f22_local0, 2 ), CoD.GetVectorComponentFromString( f22_local0, 3 ), CoD.GetVectorComponentFromString( f22_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "tierProgress", true, function ( model )
		local f23_local0 = model:get() --[[ @ 0]]
		if f23_local0 ~= nil then
			AARTierBar.EarnedXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f23_local0, 1 ), CoD.GetVectorComponentFromString( f23_local0, 2 ), CoD.GetVectorComponentFromString( f23_local0, 3 ), CoD.GetVectorComponentFromString( f23_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "previousTierProgress", true, function ( model )
		local f24_local0 = model:get() --[[ @ 0]]
		if f24_local0 ~= nil then
			AARTierBar.PreviousXP.Meter:setShaderVector( 0, CoD.GetVectorComponentFromString( f24_local0, 1 ), CoD.GetVectorComponentFromString( f24_local0, 2 ), CoD.GetVectorComponentFromString( f24_local0, 3 ), CoD.GetVectorComponentFromString( f24_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "previousTierProgress", true, function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			AARTierBar.PreviousXP.MeterAdd:setShaderVector( 0, CoD.GetVectorComponentFromString( f25_local0, 1 ), CoD.GetVectorComponentFromString( f25_local0, 2 ), CoD.GetVectorComponentFromString( f25_local0, 3 ), CoD.GetVectorComponentFromString( f25_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "previousTierProgress", true, function ( model )
		local f26_local0 = model:get() --[[ @ 0]]
		if f26_local0 ~= nil then
			AARTierBar.PreviousXP.MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f26_local0, 1 ), CoD.GetVectorComponentFromString( f26_local0, 2 ), CoD.GetVectorComponentFromString( f26_local0, 3 ), CoD.GetVectorComponentFromString( f26_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "barCurrentTier", true, function ( model )
		local f27_local0 = model:get() --[[ @ 0]]
		if f27_local0 ~= nil then
			AARTierBar.CurrentTier:setText( LocalizeStringWithParameter( @"hash_1E743A7E5D0C37CD", f27_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	AARTierBar:linkToElementModel( self, "barNextTier", true, function ( model )
		local f28_local0 = model:get() --[[ @ 0]]
		if f28_local0 ~= nil then
			AARTierBar.NextTier:setText( LocalizeStringWithParameter( @"hash_1E743A7E5D0C37CD", f28_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( AARTierBar ) --[[ @ 0]]
	self.AARTierBar = AARTierBar --[[ @ 0]]
	
	local f1_local8 = nil --[[ @ 0]]
	self.TrialInfoBannerWidget = LUI.UIElement.createFake() --[[ @ 0]]
	local TrialInfoBannerWidgetPC = nil --[[ @ 0]]
	
	TrialInfoBannerWidgetPC = CoD.TrialInfoBannerWidget.new( f1_arg0, f1_arg1, 0.5, 0.5, -948, -443, 0.5, 0.5, 331, 405 ) --[[ @ 0]]
	TrialInfoBannerWidgetPC:mergeStateConditions( {
		{
			stateName = "Shown",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysFalse()
			end
		},
		{
			stateName = "ShownWrap",
			condition = function ( menu, element, event )
				return IsGameTrial() and AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	TrialInfoBannerWidgetPC.InfoText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_138324BF4626CE42" ) ) --[[ @ 0]]
	self:addElement( TrialInfoBannerWidgetPC ) --[[ @ 0]]
	self.TrialInfoBannerWidgetPC = TrialInfoBannerWidgetPC --[[ @ 0]]
	
	local DamageStat = CoD.AARPerformanceWidgets.new( f1_arg0, f1_arg1, 0.5, 0.5, -321.5, 862.5, 0.5, 0.5, -203.5, -71.5 ) --[[ @ 0]]
	DamageStat:linkToElementModel( self, nil, false, function ( model )
		DamageStat:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DamageStat ) --[[ @ 0]]
	self.DamageStat = DamageStat --[[ @ 0]]
	
	local LootCaseMeter = CoD.AARTierRewardLootCaseMeter.new( f1_arg0, f1_arg1, 0.5, 0.5, 712.5, 862.5, 0, 0, 96.5, 246.5 ) --[[ @ 0]]
	LootCaseMeter:linkToElementModel( self, "lootCaseProgress", true, function ( model )
		local f32_local0 = model:get() --[[ @ 0]]
		if f32_local0 ~= nil then
			LootCaseMeter.CurrentProgressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f32_local0, 1 ), CoD.GetVectorComponentFromString( f32_local0, 2 ), CoD.GetVectorComponentFromString( f32_local0, 3 ), CoD.GetVectorComponentFromString( f32_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LootCaseMeter:linkToElementModel( self, "previousLootCaseProgress", true, function ( model )
		local f33_local0 = model:get() --[[ @ 0]]
		if f33_local0 ~= nil then
			LootCaseMeter.PreviousProgressRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f33_local0, 1 ), CoD.GetVectorComponentFromString( f33_local0, 2 ), CoD.GetVectorComponentFromString( f33_local0, 3 ), CoD.GetVectorComponentFromString( f33_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LootCaseMeter:linkToElementModel( self, "lootCaseCount", true, function ( model )
		local f34_local0 = model:get() --[[ @ 0]]
		if f34_local0 ~= nil then
			LootCaseMeter.CaseCount:setText( f34_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( LootCaseMeter ) --[[ @ 0]]
	self.LootCaseMeter = LootCaseMeter --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "AAR.activeTab", CoD.AARUtility.AARTabs.AAR_SUMMARY )
			end
		}
	} ) --[[ @ 0]]
	local f1_local12 = self --[[ @ 0]]
	local f1_local13 = self.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local13( f1_local12, f1_local14["AAR.activeTab"], function ( f36_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "AAR.activeTab"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AARGameHistory.id = "AARGameHistory" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AARSummaryTab_WZ.__resetProperties = function ( f37_arg0 )
	f37_arg0.AARGameHistory:completeAnimation() --[[ @ 0]]
	f37_arg0.XPMeter:completeAnimation() --[[ @ 0]]
	f37_arg0.AARGametypeHeader:completeAnimation() --[[ @ 0]]
	f37_arg0.PerformanceLabel:completeAnimation() --[[ @ 0]]
	f37_arg0.AarMpBacking:completeAnimation() --[[ @ 0]]
	f37_arg0.AARTierBar:completeAnimation() --[[ @ 0]]
	f37_arg0.TrialInfoBannerWidget:completeAnimation() --[[ @ 0]]
	f37_arg0.TrialInfoBannerWidgetPC:completeAnimation() --[[ @ 0]]
	f37_arg0.LootCaseMeter:completeAnimation() --[[ @ 0]]
	f37_arg0.AARGameHistory:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.XPMeter:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.AARGametypeHeader:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.PerformanceLabel:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.AarMpBacking:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.AARTierBar:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.TrialInfoBannerWidget:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.TrialInfoBannerWidgetPC:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.LootCaseMeter:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AARSummaryTab_WZ.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f38_arg0.AarMpBacking:completeAnimation() --[[ @ 0]]
			f38_arg0.AarMpBacking:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AarMpBacking ) --[[ @ 0]]
			f38_arg0.XPMeter:completeAnimation() --[[ @ 0]]
			f38_arg0.XPMeter:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.XPMeter ) --[[ @ 0]]
			f38_arg0.AARGameHistory:completeAnimation() --[[ @ 0]]
			f38_arg0.AARGameHistory:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AARGameHistory ) --[[ @ 0]]
			f38_arg0.PerformanceLabel:completeAnimation() --[[ @ 0]]
			f38_arg0.PerformanceLabel:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.PerformanceLabel ) --[[ @ 0]]
			f38_arg0.AARGametypeHeader:completeAnimation() --[[ @ 0]]
			f38_arg0.AARGametypeHeader:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AARGametypeHeader ) --[[ @ 0]]
			f38_arg0.AARTierBar:completeAnimation() --[[ @ 0]]
			f38_arg0.AARTierBar:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.AARTierBar ) --[[ @ 0]]
			f38_arg0.TrialInfoBannerWidget:completeAnimation() --[[ @ 0]]
			f38_arg0.TrialInfoBannerWidget:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.TrialInfoBannerWidget ) --[[ @ 0]]
			f38_arg0.TrialInfoBannerWidgetPC:completeAnimation() --[[ @ 0]]
			f38_arg0.TrialInfoBannerWidgetPC:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.TrialInfoBannerWidgetPC ) --[[ @ 0]]
			f38_arg0.LootCaseMeter:completeAnimation() --[[ @ 0]]
			f38_arg0.LootCaseMeter:setAlpha( 0 ) --[[ @ 0]]
			f38_arg0.clipFinished( f38_arg0.LootCaseMeter ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			local f39_local0 = function ( f40_arg0 )
				f39_arg0.AarMpBacking:beginAnimation( 150 ) --[[ @ 0]]
				f39_arg0.AarMpBacking:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.AarMpBacking:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.AarMpBacking:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.AarMpBacking:completeAnimation() --[[ @ 0]]
			f39_arg0.AarMpBacking:setAlpha( 0 ) --[[ @ 0]]
			f39_local0( f39_arg0.AarMpBacking ) --[[ @ 0]]
			local f39_local1 = function ( f41_arg0 )
				local f41_local0 = function ( f42_arg0 )
					local f42_local0 = function ( f43_arg0 )
						f43_arg0:beginAnimation( 100, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
						f43_arg0:setAlpha( 1 ) --[[ @ 0]]
						f43_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f42_arg0:beginAnimation( 239 ) --[[ @ 0]]
					f42_arg0:registerEventHandler( "transition_complete_keyframe", f42_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.XPMeter:beginAnimation( 150 ) --[[ @ 0]]
				f39_arg0.XPMeter:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.XPMeter:registerEventHandler( "transition_complete_keyframe", f41_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.XPMeter:completeAnimation() --[[ @ 0]]
			f39_arg0.XPMeter:setAlpha( 0 ) --[[ @ 0]]
			f39_local1( f39_arg0.XPMeter ) --[[ @ 0]]
			local f39_local2 = function ( f44_arg0 )
				local f44_local0 = function ( f45_arg0 )
					local f45_local0 = function ( f46_arg0 )
						f46_arg0:beginAnimation( 99, Enum[@"hash_1F50FFF429AB1890"][@"hash_66F6186B702830BC"] ) --[[ @ 0]]
						f46_arg0:setAlpha( 1 ) --[[ @ 0]]
						f46_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f45_arg0:beginAnimation( 190 ) --[[ @ 0]]
					f45_arg0:registerEventHandler( "transition_complete_keyframe", f45_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.AARGameHistory:beginAnimation( 150 ) --[[ @ 0]]
				f39_arg0.AARGameHistory:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.AARGameHistory:registerEventHandler( "transition_complete_keyframe", f44_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.AARGameHistory:completeAnimation() --[[ @ 0]]
			f39_arg0.AARGameHistory:setAlpha( 0 ) --[[ @ 0]]
			f39_local2( f39_arg0.AARGameHistory ) --[[ @ 0]]
			local f39_local3 = function ( f47_arg0 )
				local f47_local0 = function ( f48_arg0 )
					local f48_local0 = function ( f49_arg0 )
						f49_arg0:beginAnimation( 99 ) --[[ @ 0]]
						f49_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f48_arg0:beginAnimation( 80 ) --[[ @ 0]]
					f48_arg0:registerEventHandler( "transition_complete_keyframe", f48_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.PerformanceLabel:beginAnimation( 100 ) --[[ @ 0]]
				f39_arg0.PerformanceLabel:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.PerformanceLabel:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.PerformanceLabel:registerEventHandler( "transition_complete_keyframe", f47_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.PerformanceLabel:completeAnimation() --[[ @ 0]]
			f39_arg0.PerformanceLabel:setAlpha( 0 ) --[[ @ 0]]
			f39_local3( f39_arg0.PerformanceLabel ) --[[ @ 0]]
			local f39_local4 = function ( f50_arg0 )
				local f50_local0 = function ( f51_arg0 )
					f51_arg0:beginAnimation( 100 ) --[[ @ 0]]
					f51_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.AARGametypeHeader:beginAnimation( 50 ) --[[ @ 0]]
				f39_arg0.AARGametypeHeader:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.AARGametypeHeader:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.AARGametypeHeader:registerEventHandler( "transition_complete_keyframe", f50_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.AARGametypeHeader:completeAnimation() --[[ @ 0]]
			f39_arg0.AARGametypeHeader:setAlpha( 0 ) --[[ @ 0]]
			f39_local4( f39_arg0.AARGametypeHeader ) --[[ @ 0]]
			local f39_local5 = function ( f52_arg0 )
				local f52_local0 = function ( f53_arg0 )
					local f53_local0 = function ( f54_arg0 )
						f54_arg0:beginAnimation( 100 ) --[[ @ 0]]
						f54_arg0:setAlpha( 1 ) --[[ @ 0]]
						f54_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f53_arg0:beginAnimation( 239 ) --[[ @ 0]]
					f53_arg0:registerEventHandler( "transition_complete_keyframe", f53_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.AARTierBar:beginAnimation( 150 ) --[[ @ 0]]
				f39_arg0.AARTierBar:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.AARTierBar:registerEventHandler( "transition_complete_keyframe", f52_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.AARTierBar:completeAnimation() --[[ @ 0]]
			f39_arg0.AARTierBar:setAlpha( 0 ) --[[ @ 0]]
			f39_local5( f39_arg0.AARTierBar ) --[[ @ 0]]
			local f39_local6 = function ( f55_arg0 )
				f39_arg0.TrialInfoBannerWidget:beginAnimation( 490 ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidget:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidget:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidget:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.TrialInfoBannerWidget:completeAnimation() --[[ @ 0]]
			f39_arg0.TrialInfoBannerWidget:setAlpha( 0 ) --[[ @ 0]]
			f39_local6( f39_arg0.TrialInfoBannerWidget ) --[[ @ 0]]
			local f39_local7 = function ( f56_arg0 )
				f39_arg0.TrialInfoBannerWidgetPC:beginAnimation( 490 ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidgetPC:setAlpha( 1 ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidgetPC:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.TrialInfoBannerWidgetPC:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.TrialInfoBannerWidgetPC:completeAnimation() --[[ @ 0]]
			f39_arg0.TrialInfoBannerWidgetPC:setAlpha( 0 ) --[[ @ 0]]
			f39_local7( f39_arg0.TrialInfoBannerWidgetPC ) --[[ @ 0]]
			local f39_local8 = function ( f57_arg0 )
				local f57_local0 = function ( f58_arg0 )
					f58_arg0:beginAnimation( 100 ) --[[ @ 0]]
					f58_arg0:setAlpha( 1 ) --[[ @ 0]]
					f58_arg0:registerEventHandler( "transition_complete_keyframe", f39_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f39_arg0.LootCaseMeter:beginAnimation( 390 ) --[[ @ 0]]
				f39_arg0.LootCaseMeter:registerEventHandler( "interrupted_keyframe", f39_arg0.clipInterrupted ) --[[ @ 0]]
				f39_arg0.LootCaseMeter:registerEventHandler( "transition_complete_keyframe", f57_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f39_arg0.LootCaseMeter:completeAnimation() --[[ @ 0]]
			f39_arg0.LootCaseMeter:setAlpha( 0 ) --[[ @ 0]]
			f39_local8( f39_arg0.LootCaseMeter ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AARSummaryTab_WZ.__onClose = function ( f59_arg0 )
	f59_arg0.ScorestreakAspectRatioFix:close() --[[ @ 0]]
	f59_arg0.AarMpBacking:close() --[[ @ 0]]
	f59_arg0.XPMeter:close() --[[ @ 0]]
	f59_arg0.AARGameHistory:close() --[[ @ 0]]
	f59_arg0.AARGametypeHeader:close() --[[ @ 0]]
	f59_arg0.AARTierBar:close() --[[ @ 0]]
	f59_arg0.TrialInfoBannerWidget:close() --[[ @ 0]]
	f59_arg0.TrialInfoBannerWidgetPC:close() --[[ @ 0]]
	f59_arg0.DamageStat:close() --[[ @ 0]]
	f59_arg0.LootCaseMeter:close() --[[ @ 0]]
end
 --[[ @ 0]]
