-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/widgets/fileshare/fullscreenpopup/fullscreenpopuptemplate" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/corner9slice" ) --[[ @ 0]]
require( "x64:15d80cb371475b19" ) --[[ @ 0]]
require( "ui/uieditor/widgets/playercard/selfidentitybadge" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/tabbedscoreboardfuibox" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]

CoD.DiaDeLosMuertosRedemptionPopup = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.DiaDeLosMuertosRedemptionPopup = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "DiaDeLosMuertosRedemptionPopup", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromUserData( f1_arg0, self, f1_arg1._model ) --[[ @ 0]]
	self:setClass( CoD.DiaDeLosMuertosRedemptionPopup ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local FullscreenPopupTemplate = CoD.FullscreenPopupTemplate.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	FullscreenPopupTemplate:mergeStateConditions( {
		{
			stateName = "WorkingState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "WorkingState" )
			end
		},
		{
			stateName = "ErrorState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "ErrorState" )
			end
		},
		{
			stateName = "CustomState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "CustomState" )
			end
		},
		{
			stateName = "FinishedState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setWidgetType( CoD.ItemShopButton ) --[[ @ 0]]
	FullscreenPopupTemplate.ErrorSubtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_79768A66571AA0BA" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.WorkingTitle:setText( LocalizeToUpperString( @"hash_667B9487B8B4E09C" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5EF90EDFB180B9A2" ) ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, nil, false, function ( model )
		FullscreenPopupTemplate:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			FullscreenPopupTemplate.Subtitle:setText( LocalizeIntoString( @"hash_27A8CE209945317C", f7_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			FullscreenPopupTemplate.Title:setText( LocalizeToUpperString( LocalizeIntoString( @"hash_738044C9897FFD7D", f8_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( FullscreenPopupTemplate, "setState", function ( element, controller, f9_arg2, f9_arg3, f9_arg4 )
		if IsPC() and IsElementInState( element, "FinishedState" ) then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		elseif IsPC() then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FullscreenPopupTemplate ) --[[ @ 0]]
	self.FullscreenPopupTemplate = FullscreenPopupTemplate --[[ @ 0]]
	
	local Box = LUI.UIImage.new( 0.5, 0.5, -898, -383, 0.5, 0.5, -190, 140 ) --[[ @ 0]]
	Box:setRGB( 0.28, 0.34, 0.37 ) --[[ @ 0]]
	Box:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( Box ) --[[ @ 0]]
	self.Box = Box --[[ @ 0]]
	
	local DotCorner9Slice = CoD.Corner9Slice.new( f1_local1, f1_arg0, 0.5, 0.5, -897.5, -382.5, 0.5, 0.5, -190, 140 ) --[[ @ 0]]
	DotCorner9Slice:setAlpha( 0.1 ) --[[ @ 0]]
	self:addElement( DotCorner9Slice ) --[[ @ 0]]
	self.DotCorner9Slice = DotCorner9Slice --[[ @ 0]]
	
	local CostText = LUI.UIText.new( 0.5, 0.5, -959.5, -329.5, 0.5, 0.5, 166, 196 ) --[[ @ 0]]
	CostText:setRGB( ColorSet.CodPointsNumber.r, ColorSet.CodPointsNumber.g, ColorSet.CodPointsNumber.b ) --[[ @ 0]]
	CostText:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	CostText:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	CostText:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	CostText:linkToElementModel( self, "price", true, function ( model )
		local f10_local0 = model:get() --[[ @ 0]]
		if f10_local0 ~= nil then
			CostText:setText( LocalizeIntoString( @"hash_56A3CC7BE3008989", f10_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CostText ) --[[ @ 0]]
	self.CostText = CostText --[[ @ 0]]
	
	local SelfIdentityBadge = CoD.SelfIdentityBadge.new( f1_local1, f1_arg0, 0.5, 0.5, 541, 872, 0, 0, 33.5, 98.5 ) --[[ @ 0]]
	SelfIdentityBadge:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		SelfIdentityBadge:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SelfIdentityBadge ) --[[ @ 0]]
	self.SelfIdentityBadge = SelfIdentityBadge --[[ @ 0]]
	
	local StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 341, 445, 0, 0, 23.5, 103.5 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	local Linker = LUI.UIImage.new( 0.5, 0.5, -330, -326, 0.5, 0.5, -192, 205 ) --[[ @ 0]]
	Linker:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Linker:setAlpha( 0.35 ) --[[ @ 0]]
	Linker:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Linker:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Linker:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Linker:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Linker ) --[[ @ 0]]
	self.Linker = Linker --[[ @ 0]]
	
	local CornerPip = LUI.UIImage.new( 0.5, 0.5, -802.5, -786.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip ) --[[ @ 0]]
	self.CornerPip = CornerPip --[[ @ 0]]
	
	local CornerPip2 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip2:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip2:setZRot( 270 ) --[[ @ 0]]
	CornerPip2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip2 ) --[[ @ 0]]
	self.CornerPip2 = CornerPip2 --[[ @ 0]]
	
	local CornerPip3 = LUI.UIImage.new( 0.5, 0.5, -803.5, -787.5, 0.5, 0.5, 122, 138 ) --[[ @ 0]]
	CornerPip3:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip3:setZRot( 90 ) --[[ @ 0]]
	CornerPip3:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip3 ) --[[ @ 0]]
	self.CornerPip3 = CornerPip3 --[[ @ 0]]
	
	local CornerPip4 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, 121, 137 ) --[[ @ 0]]
	CornerPip4:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip4:setZRot( 180 ) --[[ @ 0]]
	CornerPip4:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip4 ) --[[ @ 0]]
	self.CornerPip4 = CornerPip4 --[[ @ 0]]
	
	local Image = LUI.UIImage.new( 0.5, 0.5, -898, -385, 0.5, 0.5, -189, 139 ) --[[ @ 0]]
	Image:setImage( RegisterImage( CoD.EntitlementUtility.GetDOTDImageRedemption( @"loot_ui_icon_outfit_dotd_base_pal_exo2_battery" ) ) ) --[[ @ 0]]
	Image:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	Image:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Image:setShaderVector( 1, 1, 1, 0, 0 ) --[[ @ 0]]
	Image:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Image ) --[[ @ 0]]
	self.Image = Image --[[ @ 0]]
	
	local TabbedScoreboardFuiBox2 = CoD.TabbedScoreboardFuiBox.new( f1_local1, f1_arg0, 0.5, 0.5, -494, -382, 0.5, 0.5, 172, 188 ) --[[ @ 0]]
	TabbedScoreboardFuiBox2:setZRot( 180 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardFuiBox2 ) --[[ @ 0]]
	self.TabbedScoreboardFuiBox2 = TabbedScoreboardFuiBox2 --[[ @ 0]]
	
	local TabbedScoreboardFuiBox = CoD.TabbedScoreboardFuiBox.new( f1_local1, f1_arg0, 0.5, 0.5, -899, -787, 0.5, 0.5, 172, 188 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardFuiBox ) --[[ @ 0]]
	self.TabbedScoreboardFuiBox = TabbedScoreboardFuiBox --[[ @ 0]]
	
	self:appendEventHandler( "input_source_changed", function ( f13_arg0, f13_arg1 )
		f13_arg1.menu = f13_arg1.menu or f1_local1 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f13_arg0, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local16 = self --[[ @ 0]]
	local f1_local17 = self.subscribeToModel --[[ @ 0]]
	local f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.LastInput, function ( f14_arg0, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) and not IsMouseOrKeyboard( controller ) then
			CoD.EntitlementUtility.GoBackAndOpenEntitlementPopups( self, controller ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			SetElementWorkingStateAndPurchaseDWSKU( self.FullscreenPopupTemplate, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) and not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/redeem", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	FullscreenPopupTemplate.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.buttonPC:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.id = "FullscreenPopupTemplate" --[[ @ 0]]
	SelfIdentityBadge.id = "SelfIdentityBadge" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = FullscreenPopupTemplate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	if CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg0, "isContract" ) then
		SetMenuProperty( f1_local1, "_isContract", true ) --[[ @ 0]]
	elseif IsPC() then
		SetMenuProperty( f1_local1, "_openEntitlementPopups", true ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.DiaDeLosMuertosRedemptionPopup.__onClose = function ( f19_arg0 )
	f19_arg0.FullscreenPopupTemplate:close() --[[ @ 0]]
	f19_arg0.DotCorner9Slice:close() --[[ @ 0]]
	f19_arg0.CostText:close() --[[ @ 0]]
	f19_arg0.SelfIdentityBadge:close() --[[ @ 0]]
	f19_arg0.StartMenuCODpoints:close() --[[ @ 0]]
	f19_arg0.TabbedScoreboardFuiBox2:close() --[[ @ 0]]
	f19_arg0.TabbedScoreboardFuiBox:close() --[[ @ 0]]
end
 --[[ @ 0]]
