-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
CoD.bleedOutHealthMP = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.bleedOutHealthMP.__defaultWidth = 210 --[[ @ 0]]
CoD.bleedOutHealthMP.__defaultHeight = 250 --[[ @ 0]]
CoD.bleedOutHealthMP.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.bleedOutHealthMP ) --[[ @ 0]]
	self.id = "bleedOutHealthMP" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local WaypointBackerBlur = LUI.UIImage.new( 0.5, 0.5, -94, 94, 0.5, 0.5, -118, 70 ) --[[ @ 0]]
	WaypointBackerBlur:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_backer" ) ) --[[ @ 0]]
	WaypointBackerBlur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	WaypointBackerBlur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( WaypointBackerBlur ) --[[ @ 0]]
	self.WaypointBackerBlur = WaypointBackerBlur --[[ @ 0]]
	
	local WaypointBacker = LUI.UIImage.new( 0.5, 0.5, -94, 94, 0.5, 0.5, -118, 70 ) --[[ @ 0]]
	WaypointBacker:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_backer" ) ) --[[ @ 0]]
	self:addElement( WaypointBacker ) --[[ @ 0]]
	self.WaypointBacker = WaypointBacker --[[ @ 0]]
	
	local WaypointProgressMeterEmpty = LUI.UIImage.new( 0.5, 0.5, -94, 94, 0.5, 0.5, -118, 70 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:setRGB( 1, 0.98, 0.91 ) --[[ @ 0]]
	WaypointProgressMeterEmpty:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_empty" ) ) --[[ @ 0]]
	self:addElement( WaypointProgressMeterEmpty ) --[[ @ 0]]
	self.WaypointProgressMeterEmpty = WaypointProgressMeterEmpty --[[ @ 0]]
	
	local WaypointPattern = LUI.UIImage.new( 0.5, 0.5, -80, 80, 0.5, 0.5, -104, 56 ) --[[ @ 0]]
	WaypointPattern:setRGB( 0.13, 0.87, 0.94 ) --[[ @ 0]]
	WaypointPattern:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_led" ) ) --[[ @ 0]]
	WaypointPattern:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	WaypointPattern:setShaderVector( 0, 2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( WaypointPattern ) --[[ @ 0]]
	self.WaypointPattern = WaypointPattern --[[ @ 0]]
	
	local reviveiconBackplate = LUI.UIImage.new( 0.5, 0.5, -60, 60, 0.5, 0.5, -84, 36 ) --[[ @ 0]]
	reviveiconBackplate:setRGB( 0, 0, 0 ) --[[ @ 0]]
	reviveiconBackplate:setAlpha( 0.66 ) --[[ @ 0]]
	reviveiconBackplate:setImage( RegisterImage( @"uie_ui_icon_bounty_hunter_revive" ) ) --[[ @ 0]]
	self:addElement( reviveiconBackplate ) --[[ @ 0]]
	self.reviveiconBackplate = reviveiconBackplate --[[ @ 0]]
	
	local reviveicon = LUI.UIImage.new( 0.5, 0.5, -55, 55, 0.5, 0.5, -79, 31 ) --[[ @ 0]]
	reviveicon:setImage( RegisterImage( @"uie_ui_icon_bounty_hunter_revive" ) ) --[[ @ 0]]
	reviveicon:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_F755127C95CF5B6" ) ) --[[ @ 0]]
	reviveicon:setShaderVector( 0, 1.16, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( reviveicon ) --[[ @ 0]]
	self.reviveicon = reviveicon --[[ @ 0]]
	
	local bleedingOutRing = LUI.UIImage.new( 0.5, 0.5, -87, 87, 0.5, 0.5, -111, 63 ) --[[ @ 0]]
	bleedingOutRing:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_fill_02" ) ) --[[ @ 0]]
	bleedingOutRing:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	bleedingOutRing:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	bleedingOutRing:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	bleedingOutRing:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	bleedingOutRing:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	bleedingOutRing:linkToElementModel( self, "health", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			bleedingOutRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( bleedingOutRing ) --[[ @ 0]]
	self.bleedingOutRing = bleedingOutRing --[[ @ 0]]
	
	local revivingRing = LUI.UIImage.new( 0.5, 0.5, -87, 87, 0.5, 0.5, -111, 63 ) --[[ @ 0]]
	revivingRing:setRGB( 0.13, 0.87, 0.94 ) --[[ @ 0]]
	revivingRing:setImage( RegisterImage( @"uie_ui_hud_core_waypoint_domination_fill_02" ) ) --[[ @ 0]]
	revivingRing:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	revivingRing:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	revivingRing:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	revivingRing:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	revivingRing:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	revivingRing:linkToElementModel( self, "reviveProgress", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			revivingRing:setShaderVector( 0, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( revivingRing ) --[[ @ 0]]
	self.revivingRing = revivingRing --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Reviving",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueGreaterThan( element, f1_arg1, "reviveProgress", 0 )
			end
		},
		{
			stateName = "BleedingOut_Low",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, f1_arg1, "health", 0.2 )
			end
		},
		{
			stateName = "BleedingOut",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "reviveProgress", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "reviveProgress"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "health", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "health"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.bleedOutHealthMP.__onClose = function ( f9_arg0 )
	f9_arg0.bleedingOutRing:close() --[[ @ 0]]
	f9_arg0.revivingRing:close() --[[ @ 0]]
end
 --[[ @ 0]]
