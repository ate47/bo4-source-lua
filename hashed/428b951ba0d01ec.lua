-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "ui/uieditor/menus/charactercustomization/personalizecharacter" ) --[[ @ 0]]
require( "x64:486b4582183041dd" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/tabbedscoreboardfuibox" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]
require( "x64:31bbde4283bb35f8" ) --[[ @ 0]]

CoD.CharacterSelection_StandardFrameWidget = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.__defaultWidth = 1718 --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.__defaultHeight = 800 --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CharacterSelection_StandardFrameWidget ) --[[ @ 0]]
	self.id = "CharacterSelection_StandardFrameWidget" --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Characters = LUI.UIList.new( f1_arg0, f1_arg1, 0, 0, nil, false, false, false, false ) --[[ @ 0]]
	Characters:setLeftRight( 1, 1, -790, 0 ) --[[ @ 0]]
	Characters:setTopBottom( 0, 0, 162, 782 ) --[[ @ 0]]
	Characters:setWidgetType( CoD.CharacterSelection_CharacterListWidget ) --[[ @ 0]]
	Characters:setHorizontalCount( 5 ) --[[ @ 0]]
	Characters:setVerticalCount( 4 ) --[[ @ 0]]
	Characters:setSpacing( 0 ) --[[ @ 0]]
	Characters:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Characters:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	Characters:linkToElementModel( self, "characterDatasource", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			Characters:setDataSource( f2_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "purchasable", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "disabled", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local CharacterText = Characters --[[ @ 0]]
	local SpecialistText = Characters.subscribeToModel --[[ @ 0]]
	local HeaderLine = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	SpecialistText( CharacterText, HeaderLine["lobbyRoot.playlistId"], function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Characters:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CharacterText = Characters --[[ @ 0]]
	SpecialistText = Characters.subscribeToModel --[[ @ 0]]
	HeaderLine = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	SpecialistText( CharacterText, HeaderLine.LastInput, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Characters:linkToElementModel( Characters, "hasCustomization", true, function ( model, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Characters:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		PositionDraftOnFocusCharacter( self, element, f1_arg1 ) --[[ @ 0]]
		SetControllerModelValue( f1_arg1, "WZCharacterInfo.infoModel", element:getModel() ) --[[ @ 0]]
		CoD.ModelUtility.SetControllerModelValueToEnum( f1_arg1, "WZCharacterInfo.showInfoState", CoD.WZUtility.CharacterInfoShowState.SHOW ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	Characters:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if not CoD.BaseUtility.DoesElementOrChildHaveFocus( self, "Characters" ) then
			PositionDraftOnFocusCharacterLost( self, element, f1_arg1, false ) --[[ @ 0]]
			CoD.ModelUtility.SetControllerModelValueToEnum( f1_arg1, "WZCharacterInfo.showInfoState", CoD.WZUtility.CharacterInfoShowState.HIDE ) --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	Characters:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Characters, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "purchasable" ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.PlayerRoleUtility[@"hash_27841254A6DA6220"]( element, controller ) then
			PositionDraftSelectCharacterFrontend( self, element, controller ) --[[ @ 0]]
			GoBack( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_specialist_select" ) --[[ @ 0]]
			SaveLoadout( self, controller ) --[[ @ 0]]
			return true
		elseif IsElementInState( element, "Purchasable" ) and not IsGameTrial() and CoD.StoreUtility.IsStoreEnabled( controller ) then
			OpenStore( self, element, controller, "", menu ) --[[ @ 0]]
			return true
		elseif IsPC() and IsElementInState( element, "Selected" ) and not IsGameTrial() then
			GoBack( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_specialist_select" ) --[[ @ 0]]
			return true
		elseif IsPC() and IsElementInState( element, "Purchasable" ) and not IsGameTrial() and CoD.StoreUtility.IsStoreEnabled( controller ) then
			OpenOverlay( self, "Store", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "purchasable" ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.PlayerRoleUtility[@"hash_27841254A6DA6220"]( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsElementInState( element, "Purchasable" ) and not IsGameTrial() and CoD.StoreUtility.IsStoreEnabled( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_4191CDDA584B4408", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and IsElementInState( element, "Selected" ) and not IsGameTrial() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif IsPC() and IsElementInState( element, "Purchasable" ) and not IsGameTrial() and CoD.StoreUtility.IsStoreEnabled( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_4191CDDA584B4408", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( Characters, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], "ui_contextual_1", function ( element, menu, controller, model )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "hasCustomization" ) then
			PlaySoundAlias( "uin_cac_menu_open_2" ) --[[ @ 0]]
			OpenOverlay( self, "PersonalizeCharacter", controller, {
				model = element:getModel(),
				properties = {
					_sessionMode = menu._sessionMode,
					_storageLoadoutBuffer = menu._storageLoadoutBuffer
				}
			} ) --[[ @ 0]]
			return true
		elseif not IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "hasCustomization" ) then
			PlaySoundAlias( "uin_cac_menu_open_2" ) --[[ @ 0]]
			OpenOverlay( self, "PersonalizeCharacter", controller, {
				model = element:getModel(),
				properties = {
					_sessionMode = menu._sessionMode,
					_storageLoadoutBuffer = menu._storageLoadoutBuffer
				}
			} ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "hasCustomization" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_72AA2EA68ACC2317", nil, "ui_contextual_1" ) --[[ @ 0]]
			return true
		elseif not IsGamepad( controller ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "disabled" ) and not IsGameTrial() and CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "hasCustomization" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_72AA2EA68ACC2317", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_contextual_1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	Characters:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_72AA2EA68ACC2317", function ( f16_arg0, f16_arg1, f16_arg2, f16_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueTrue( f16_arg0, f16_arg2, "disabled" ) and not IsGameTrial() and CoD.ModelUtility.IsSelfModelValueTrue( f16_arg0, f16_arg2, "hasCustomization" ) then
			return function ( f17_arg0, f17_arg1, f17_arg2, f17_arg3 )
				PlaySoundAlias( "uin_cac_menu_open_2" ) --[[ @ 0]]
				OpenOverlay( self, "PersonalizeCharacter", f17_arg2, {
					model = f17_arg0:getModel(),
					properties = {
						_sessionMode = f17_arg1._sessionMode,
						_storageLoadoutBuffer = f17_arg1._storageLoadoutBuffer
					}
				} ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( Characters ) --[[ @ 0]]
	self.Characters = Characters --[[ @ 0]]
	
	SpecialistText = LUI.UIText.new( 1, 1, -781, -480, 0, 0, 143, 164 ) --[[ @ 0]]
	SpecialistText:setRGB( 0.38, 0.38, 0.4 ) --[[ @ 0]]
	SpecialistText:setText( LocalizeToUpperString( @"hash_E5960B3E0AF9188" ) ) --[[ @ 0]]
	SpecialistText:setTTF( "default" ) --[[ @ 0]]
	SpecialistText:setLetterSpacing( 3 ) --[[ @ 0]]
	SpecialistText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	SpecialistText:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	self:addElement( SpecialistText ) --[[ @ 0]]
	self.SpecialistText = SpecialistText --[[ @ 0]]
	
	CharacterText = LUI.UIText.new( 1, 1, -781, -480, 0, 0, 143, 164 ) --[[ @ 0]]
	CharacterText:setRGB( 0.38, 0.38, 0.4 ) --[[ @ 0]]
	CharacterText:setAlpha( 0 ) --[[ @ 0]]
	CharacterText:setText( LocalizeToUpperString( @"hash_1328B80BBA7F8455" ) ) --[[ @ 0]]
	CharacterText:setTTF( "default" ) --[[ @ 0]]
	CharacterText:setLetterSpacing( 3 ) --[[ @ 0]]
	CharacterText:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	CharacterText:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	self:addElement( CharacterText ) --[[ @ 0]]
	self.CharacterText = CharacterText --[[ @ 0]]
	
	HeaderLine = LUI.UIImage.new( 1, 1, -781, -6, 0, 0, 164, 165 ) --[[ @ 0]]
	HeaderLine:setRGB( 0.38, 0.38, 0.4 ) --[[ @ 0]]
	HeaderLine:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( HeaderLine ) --[[ @ 0]]
	self.HeaderLine = HeaderLine --[[ @ 0]]
	
	local TabbedScoreboardFuiBox = CoD.TabbedScoreboardFuiBox.new( f1_arg0, f1_arg1, 0, 0, 1624, 1736, 0, 0, 150.5, 166.5 ) --[[ @ 0]]
	TabbedScoreboardFuiBox:setAlpha( 0.6 ) --[[ @ 0]]
	TabbedScoreboardFuiBox:setScale( 0.6, 0.6 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardFuiBox ) --[[ @ 0]]
	self.TabbedScoreboardFuiBox = TabbedScoreboardFuiBox --[[ @ 0]]
	
	local DotPipR = LUI.UIImage.new( 0, 0, 1710, 1714, 0, 0, 162.5, 166.5 ) --[[ @ 0]]
	DotPipR:setRGB( 0.38, 0.38, 0.4 ) --[[ @ 0]]
	DotPipR:setAlpha( 0.2 ) --[[ @ 0]]
	DotPipR:setImage( RegisterImage( @"hash_73854665C02218EF" ) ) --[[ @ 0]]
	DotPipR:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( DotPipR ) --[[ @ 0]]
	self.DotPipR = DotPipR --[[ @ 0]]
	
	local DotPipL = LUI.UIImage.new( 0, 0, 935, 939, 0, 0, 162.5, 166.5 ) --[[ @ 0]]
	DotPipL:setRGB( 0.38, 0.38, 0.4 ) --[[ @ 0]]
	DotPipL:setAlpha( 0.2 ) --[[ @ 0]]
	DotPipL:setImage( RegisterImage( @"hash_73854665C02218EF" ) ) --[[ @ 0]]
	DotPipL:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( DotPipL ) --[[ @ 0]]
	self.DotPipL = DotPipL --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Zombies",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "mode", Enum[@"eModes"][@"hash_73723205FAE52C4A"] )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "mode", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "mode"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local8 = self --[[ @ 0]]
	local f1_local9 = self.subscribeToModel --[[ @ 0]]
	local f1_local10 = DataSources.CharacterBreadcrumbs.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local9( f1_local8, f1_local10.breadcrumbCount, function ( f20_arg0, f20_arg1 )
		CoD.Menu.UpdateButtonShownState( f20_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( self, f1_arg1, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "CharacterBreadcrumbs", "breadcrumbCount", 0 ) and not IsPC() then
			CoD.BreadcrumbUtility.ClearAllPersonalizationBreadcrumbs( menu, controller ) --[[ @ 0]]
			UpdateElementState( self, "specialists", controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( controller, "CharacterBreadcrumbs", "breadcrumbCount", 0 ) and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_229E5695FF1401AD"], @"hash_65619D8212EDA599", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	Characters.id = "Characters" --[[ @ 0]]
	self.__defaultFocus = Characters --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local9 = self --[[ @ 0]]
	f1_local9 = Characters --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local9, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.__resetProperties = function ( f23_arg0 )
	f23_arg0.CharacterText:completeAnimation() --[[ @ 0]]
	f23_arg0.SpecialistText:completeAnimation() --[[ @ 0]]
	f23_arg0.CharacterText:setAlpha( 0 ) --[[ @ 0]]
	f23_arg0.SpecialistText:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Zombies = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f25_arg0.SpecialistText:completeAnimation() --[[ @ 0]]
			f25_arg0.SpecialistText:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.SpecialistText ) --[[ @ 0]]
			f25_arg0.CharacterText:completeAnimation() --[[ @ 0]]
			f25_arg0.CharacterText:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.CharacterText ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CharacterSelection_StandardFrameWidget.__onClose = function ( f26_arg0 )
	f26_arg0.Characters:close() --[[ @ 0]]
	f26_arg0.TabbedScoreboardFuiBox:close() --[[ @ 0]]
end
 --[[ @ 0]]
