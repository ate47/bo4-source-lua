-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:32
CoD.SelectedFilmSummaryScoreColumn = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.SelectedFilmSummaryScoreColumn.__defaultWidth = 131 --[[ @ 0]]
CoD.SelectedFilmSummaryScoreColumn.__defaultHeight = 65 --[[ @ 0]]
CoD.SelectedFilmSummaryScoreColumn.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.SelectedFilmSummaryScoreColumn ) --[[ @ 0]]
	self.id = "SelectedFilmSummaryScoreColumn" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HeaderText = LUI.UIText.new( 0, 1, 0, 0, 0, 0, 0, 26 ) --[[ @ 0]]
	HeaderText:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	HeaderText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_393E719493E9E18F" ) ) --[[ @ 0]]
	HeaderText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	HeaderText:setLetterSpacing( 1 ) --[[ @ 0]]
	HeaderText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	HeaderText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( HeaderText ) --[[ @ 0]]
	self.HeaderText = HeaderText --[[ @ 0]]
	
	local ValueText = LUI.UIText.new( 0.5, 0.5, -99.5, 99.5, 1, 1, -34, -1 ) --[[ @ 0]]
	ValueText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_393E719493E9E18F" ) ) --[[ @ 0]]
	ValueText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	ValueText:setLetterSpacing( 1 ) --[[ @ 0]]
	ValueText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	self:addElement( ValueText ) --[[ @ 0]]
	self.ValueText = ValueText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "isValid" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isValid", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isValid"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
