-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:295a71fda29b6a0a" ) --[[ @ 0]]

CoD.CompassAwarenessRingSegment = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CompassAwarenessRingSegment.__defaultWidth = 330 --[[ @ 0]]
CoD.CompassAwarenessRingSegment.__defaultHeight = 330 --[[ @ 0]]
CoD.CompassAwarenessRingSegment.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.CompassAwarenessRingSegment ) --[[ @ 0]]
	self.id = "CompassAwarenessRingSegment" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local Inner = CoD.CompassAwarenessRingZone.new( f1_arg0, f1_arg1, 0.5, 0.5, -165, 165, 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	Inner:mergeStateConditions( {
		{
			stateName = "Detect_CUAV",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_INNER_BIT ) and IsVisibilityBitSet( f1_arg1, Enum[@"uivisibilitybit"][@"bit_counter_uav_active"] )
			end
		},
		{
			stateName = "Detect_Jammed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_INNER_BIT ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "HUDItems", "jammedStrength", 0 )
			end
		},
		{
			stateName = "Detect",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_INNER_BIT )
			end
		}
	} ) --[[ @ 0]]
	Inner:linkToElementModel( Inner, "segmentValue", true, function ( model )
		f1_arg0:updateElementState( Inner, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "segmentValue"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = Inner --[[ @ 0]]
	local Outer = Inner.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	Outer( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_counter_uav_active"]], function ( f6_arg0 )
		f1_arg0:updateElementState( Inner, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_counter_uav_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = Inner --[[ @ 0]]
	Outer = Inner.subscribeToModel --[[ @ 0]]
	f1_local4 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	Outer( f1_local2, f1_local4.jammedStrength, function ( f7_arg0 )
		f1_arg0:updateElementState( Inner, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "jammedStrength"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Inner:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	Inner:linkToElementModel( self, nil, false, function ( model )
		Inner:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Inner ) --[[ @ 0]]
	self.Inner = Inner --[[ @ 0]]
	
	Outer = CoD.CompassAwarenessRingZone.new( f1_arg0, f1_arg1, 0.5, 0.5, -165, 165, 0.5, 0.5, -165, 165 ) --[[ @ 0]]
	Outer:mergeStateConditions( {
		{
			stateName = "Detect_CUAV",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_OUTER_BIT ) and IsVisibilityBitSet( f1_arg1, Enum[@"uivisibilitybit"][@"bit_counter_uav_active"] )
			end
		},
		{
			stateName = "Detect_Jammed",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_OUTER_BIT ) and CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "HUDItems", "jammedStrength", 0 )
			end
		},
		{
			stateName = "Detect",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueBitSet( element, f1_arg1, "segmentValue", CoD.HUDUtility.AwarenessLevels.AWARENESS_LEVEL_OUTER_BIT )
			end
		}
	} ) --[[ @ 0]]
	Outer:linkToElementModel( Outer, "segmentValue", true, function ( model )
		f1_arg0:updateElementState( Outer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "segmentValue"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = Outer --[[ @ 0]]
	f1_local2 = Outer.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_counter_uav_active"]], function ( f13_arg0 )
		f1_arg0:updateElementState( Outer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_counter_uav_active"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4 = Outer --[[ @ 0]]
	f1_local2 = Outer.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.jammedStrength, function ( f14_arg0 )
		f1_arg0:updateElementState( Outer, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "jammedStrength"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Outer:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	Outer:linkToElementModel( self, nil, false, function ( model )
		Outer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Outer ) --[[ @ 0]]
	self.Outer = Outer --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CompassAwarenessRingSegment.__onClose = function ( f16_arg0 )
	f16_arg0.Inner:close() --[[ @ 0]]
	f16_arg0.Outer:close() --[[ @ 0]]
end
 --[[ @ 0]]
