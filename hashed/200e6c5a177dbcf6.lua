-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:351793fe51beaa2" ) --[[ @ 0]]
require( "x64:2bf776923c7291f4" ) --[[ @ 0]]

CoD.StartMenu_ArmorPlatesList = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.__defaultWidth = 215 --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.__defaultHeight = 124 --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_ArmorPlatesList ) --[[ @ 0]]
	self.id = "StartMenu_ArmorPlatesList" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 0.4, 0, 0, -0.1, 0.5, 37, 5 ) --[[ @ 0]]
	Backing:setRGB( 0.45, 0.45, 0.45 ) --[[ @ 0]]
	Backing:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local BottomBracket9Slice = LUI.UIImage.new( 0, 0, 1, 209, 0, 0, -7, 2 ) --[[ @ 0]]
	BottomBracket9Slice:setRGB( 0.55, 0.54, 0.49 ) --[[ @ 0]]
	BottomBracket9Slice:setZRot( 180 ) --[[ @ 0]]
	BottomBracket9Slice:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	BottomBracket9Slice:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_normal" ) ) --[[ @ 0]]
	BottomBracket9Slice:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	BottomBracket9Slice:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( BottomBracket9Slice ) --[[ @ 0]]
	self.BottomBracket9Slice = BottomBracket9Slice --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0, 0, 17.5, 117.5, 0, 0, -4.5, 17.5 ) --[[ @ 0]]
	Title:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Title:setText( LocalizeToUpperString( @"hash_5FF2F205B4F34F1D" ) ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setLetterSpacing( 4 ) --[[ @ 0]]
	Title:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	Title:setBackingType( 1 ) --[[ @ 0]]
	Title:setBackingWidget( CoD.WZBox9Slice, f1_arg0, f1_arg1 ) --[[ @ 0]]
	Title:setBackingColor( 0.55, 0.54, 0.49 ) --[[ @ 0]]
	Title:setBackingXPadding( 16 ) --[[ @ 0]]
	Title:setBackingYPadding( 2 ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local List = LUI.UIList.new( f1_arg0, f1_arg1, 20, 0, nil, false, false, false, false ) --[[ @ 0]]
	List:setLeftRight( 0, 0, 0, 212 ) --[[ @ 0]]
	List:setTopBottom( 0, 0, 28, 124 ) --[[ @ 0]]
	List:setWidgetType( CoD.WarzoneInventoryMenuItemSmall ) --[[ @ 0]]
	List:setHorizontalCount( 2 ) --[[ @ 0]]
	List:setSpacing( 20 ) --[[ @ 0]]
	List:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	List:setDataSource( "WarzoneShards" ) --[[ @ 0]]
	List:linkToElementModel( List, "id", true, function ( model, f2_arg1 )
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f2_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:linkToElementModel( List, "availableAction", true, function ( model, f3_arg1 )
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f3_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:linkToElementModel( List, "castTime", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = List --[[ @ 0]]
	local f1_local6 = List.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.HUDItems.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.armorType, function ( f5_arg0, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f1_arg1 ) ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.armor, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f1_arg1 ) ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.armorMax, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"hash_E4D2F32833CFA6C"]( Engine[@"GetClientNum"]( f1_arg1 ) ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.isInVehicle, function ( f8_arg0, f8_arg1 )
		CoD.Menu.UpdateButtonShownState( f8_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.0"], function ( f9_arg0, f9_arg1 )
		CoD.Menu.UpdateButtonShownState( f9_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.1"], function ( f10_arg0, f10_arg1 )
		CoD.Menu.UpdateButtonShownState( f10_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.2"], function ( f11_arg0, f11_arg1 )
		CoD.Menu.UpdateButtonShownState( f11_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.3"], function ( f12_arg0, f12_arg1 )
		CoD.Menu.UpdateButtonShownState( f12_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7["vehicle.seatOccupantClientNum.4"], function ( f13_arg0, f13_arg1 )
		CoD.Menu.UpdateButtonShownState( f13_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:linkToElementModel( List, "stackCount", true, function ( model, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List:appendEventHandler( "input_source_changed", function ( f15_arg0, f15_arg1 )
		f15_arg1.menu = f15_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f15_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	f1_local6 = List.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.LastInput, function ( f16_arg0, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	List:registerEventHandler( "list_active_changed", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		CoD.GridAndListUtility.AlignElementToListItem2D( f1_arg1, element, self.InventorySplitter ) --[[ @ 0]]
		return f17_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f18_local0 = nil --[[ @ 0]]
		CoD.WZUtility.SendInventoryItemFocusNotify( f1_arg1, element ) --[[ @ 0]]
		CoD.BaseUtility.SetElementModelToOtherElementModel( f1_arg1, self, element ) --[[ @ 0]]
		return f18_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "lose_list_focus", function ( element, event )
		local f19_local0 = nil --[[ @ 0]]
		CoD.WZUtility.SendInventoryItemFocusNoneNotify( f1_arg1 ) --[[ @ 0]]
		return f19_local0
	end ) --[[ @ 0]]
	List:registerEventHandler( "gain_focus", function ( element, event )
		local f20_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f20_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f20_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f20_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.WZUtility.SendInventoryEquipNotify( controller, element, menu, false ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 1 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 1000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 1000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 2 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 2000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 1500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 3 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 3000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 2000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 4 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 4000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 2500 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.ModelUtility.IsSelfModelValueLessThanOrEqualTo( element, controller, "castTime", 5 ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 5000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and CoD.HUDUtility.PlayerHasPerk( controller, @"hash_2EA01DCD66EB31BC" ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 3000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		elseif not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) and not CoD.WZUtility.CurrentlyIsDriverOrGunner( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 6000 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not IsPC() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.SetupSplitCount( controller, element ) --[[ @ 0]]
			MenuHidesFreeCursor( menu, controller ) --[[ @ 0]]
			SetElementState( self, self.InventorySplitter, controller, "Open" ) --[[ @ 0]]
			SetLoseFocusToElement( self, "List", controller ) --[[ @ 0]]
			SetFocusToElement( self, "InventorySplitter", controller ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not IsPC() and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_5DCD547765767788", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsPC() and IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_5DCD547765767788", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_144DB3A08BE7FB92", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		elseif IsGamepad( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"] | Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_72919C98A7A845F0"] | 400 << Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_176ADD225D738C93"], nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_222361E23588705A"], "F", function ( element, menu, controller, model )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_222361E23588705A"], @"hash_5DCD547765767788", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "F" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], "ui_remove", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1E6DB407A2AF8B09"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], "MOUSE1", function ( element, menu, controller, model )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) then
			CoD.WZUtility.SendInventoryConsumeNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsMouseOrKeyboard( controller ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3D2F467A6C6DA1AC"], @"hash_42C27E2320C64A74", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) then
			CoD.WZUtility.SendInventoryConsumeNotify( controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( controller, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "MOUSE3", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.OpenPCSplitterWidgetForElement( self, menu, controller, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 1 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_5DCD547765767788", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE3" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( List, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "MOUSE2", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WZUtility.SendInventoryDropNotify( controller, element ) --[[ @ 0]]
			CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, controller, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( element, controller, "stackCount", 0 ) and CoD.WZUtility.ScoreboardVisibilitySetAndPC( controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_2FFD03BF8361AC75", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "MOUSE2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_42C27E2320C64A74", function ( f37_arg0, f37_arg1, f37_arg2, f37_arg3 )
		if not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f37_arg2 ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f37_arg0, f37_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueEqualToEnum( f37_arg0, f37_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.REPAIR ) and not CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f37_arg2, "HUDItems", "armorType", 0 ) and not CoD.HUDUtility.IsArmorAtFullHealth( f37_arg2 ) then
			return function ( f38_arg0, f38_arg1, f38_arg2, f38_arg3 )
				CoD.WZUtility.SendInventoryConsumeNotify( f38_arg2, f38_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_2FFD03BF8361AC75", function ( f39_arg0, f39_arg1, f39_arg2, f39_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f39_arg0, f39_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f39_arg0, f39_arg2, "availableAction", CoD.WZUtility.ItemAvailableAction.DISCARD ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( f39_arg0, f39_arg2, "stackCount", 0 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f39_arg2 ) then
			return function ( f40_arg0, f40_arg1, f40_arg2, f40_arg3 )
				CoD.WZUtility.SendInventoryDropNotify( f40_arg2, f40_arg0 ) --[[ @ 0]]
				CoD.WZUtility.HackUpdateListDataSourceAfterDelay( self.List, true, false, true, "500" ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	List:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_5DCD547765767788", function ( f41_arg0, f41_arg1, f41_arg2, f41_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualToEnum( f41_arg0, f41_arg2, "id", CoD.WZUtility.InventoryItem.INVENTORY_ITEM_NONE ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( f41_arg0, f41_arg2, "stackCount", 1 ) and not CoD.WZUtility.ScoreboardVisibilitySetAndPC( f41_arg2 ) then
			return function ( f42_arg0, f42_arg1, f42_arg2, f42_arg3 )
				CoD.WZUtility.OpenPCSplitterWidgetForElement( self, f42_arg1, f42_arg2, f42_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( List ) --[[ @ 0]]
	self.List = List --[[ @ 0]]
	
	f1_local6 = nil --[[ @ 0]]
	f1_local6 = LUI.UIElement.createFake() --[[ @ 0]]
	self.InventorySplitter = f1_local6 --[[ @ 0]]
	self.__on_onStartMenuOpened_self = function ( f43_arg0, f43_arg1 )
		local f43_local0 = self --[[ @ 0]]
		CoD.GridAndListUtility.UpdateDataSource( self.List, false, false, true ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f44_arg2, f44_arg3, f44_arg4 )
		CoD.GridAndListUtility.UpdateDataSource( self.List, false, false, true ) --[[ @ 0]]
	end ) --[[ @ 0]]
	List.id = "List" --[[ @ 0]]
	f1_local6.id = "InventorySplitter" --[[ @ 0]]
	self.__defaultFocus = List --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuOpened", self.__on_onStartMenuOpened_self ) --[[ @ 0]]
		LUI.OverrideFunction_Remove( f1_arg0, "onStartMenuClosed", self.__on_onStartMenuClosed_InventorySplitter ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local5 = self --[[ @ 0]]
	f1_local5 = List --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local5, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.__resetProperties = function ( f46_arg0 )
	f46_arg0.List:completeAnimation() --[[ @ 0]]
	f46_arg0.Title:completeAnimation() --[[ @ 0]]
	f46_arg0.BottomBracket9Slice:completeAnimation() --[[ @ 0]]
	f46_arg0.InventorySplitter:completeAnimation() --[[ @ 0]]
	f46_arg0.Backing:completeAnimation() --[[ @ 0]]
	f46_arg0.List:setTopBottom( 0, 0, 28, 124 ) --[[ @ 0]]
	f46_arg0.Title:setTopBottom( 0, 0, -4.5, 17.5 ) --[[ @ 0]]
	f46_arg0.BottomBracket9Slice:setTopBottom( 0, 0, -7, 2 ) --[[ @ 0]]
	f46_arg0.InventorySplitter:setTopBottom( 0, 0, 0, 50 ) --[[ @ 0]]
	f46_arg0.Backing:setTopBottom( -0.1, 0.5, 37, 5 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f47_arg0.Backing:completeAnimation() --[[ @ 0]]
			f47_arg0.Backing:setTopBottom( -0.1, 0.9, 73, 41 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.Backing ) --[[ @ 0]]
			f47_arg0.BottomBracket9Slice:completeAnimation() --[[ @ 0]]
			f47_arg0.BottomBracket9Slice:setTopBottom( 0, 0, 73, 82 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.BottomBracket9Slice ) --[[ @ 0]]
			f47_arg0.Title:completeAnimation() --[[ @ 0]]
			f47_arg0.Title:setTopBottom( 0, 0, 76, 100 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.Title ) --[[ @ 0]]
			f47_arg0.List:completeAnimation() --[[ @ 0]]
			f47_arg0.List:setTopBottom( 0, 0, 115.5, 211.5 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.List ) --[[ @ 0]]
			f47_arg0.InventorySplitter:completeAnimation() --[[ @ 0]]
			f47_arg0.InventorySplitter:setTopBottom( 0, 0, 97.5, 147.5 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.InventorySplitter ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_ArmorPlatesList.__onClose = function ( f48_arg0 )
	f48_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f48_arg0.List:close() --[[ @ 0]]
	f48_arg0.InventorySplitter:close() --[[ @ 0]]
end
 --[[ @ 0]]
