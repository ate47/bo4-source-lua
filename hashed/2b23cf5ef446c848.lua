-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/dynamiccontainerwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/centerconsole/centerconsole" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/deadspectate/deadspectate" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/zm_cursorhint/zmcursorhint" ) --[[ @ 0]]
require( "ui/uieditor/widgets/mphudwidgets/scorepopup/mpscr" ) --[[ @ 0]]
require( "x64:3b4608168bbee1cb" ) --[[ @ 0]]
require( "x64:54e0e602e6ad642c" ) --[[ @ 0]]
require( "x64:5390c5b1baf978f2" ) --[[ @ 0]]
require( "x64:598ced8165a20192" ) --[[ @ 0]]
require( "x64:713012bca0fbd2f4" ) --[[ @ 0]]
require( "x64:5c0887595cfb6bb1" ) --[[ @ 0]]

CoD.T7Hud_zm_factory = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.T7Hud_zm_factory = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "T7Hud_zm_factory", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BlackMarketUtility.InitInGameContractRecord( f1_arg0, f1_local1 ) --[[ @ 0]]
	self:setClass( CoD.T7Hud_zm_factory ) --[[ @ 0]]
	self.soundSet = "HUD" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local OverheadNameContainer = CoD.DynamicContainerWidget.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( OverheadNameContainer ) --[[ @ 0]]
	self.OverheadNameContainer = OverheadNameContainer --[[ @ 0]]
	
	local SafeAreaContainer = CoD.Hud_ZM_Factory_SafeAreaContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	SafeAreaContainer:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( SafeAreaContainer ) --[[ @ 0]]
	self.SafeAreaContainer = SafeAreaContainer --[[ @ 0]]
	
	local fullscreenContainer = CoD.DynamicContainerWidget.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( fullscreenContainer ) --[[ @ 0]]
	self.fullscreenContainer = fullscreenContainer --[[ @ 0]]
	
	local CursorHint = CoD.ZMCursorHint.new( f1_local1, f1_arg0, 0.5, 0.5, -375, 375, 0.8, 0.8, -81, 60 ) --[[ @ 0]]
	self:addElement( CursorHint ) --[[ @ 0]]
	self.CursorHint = CursorHint --[[ @ 0]]
	
	local DamageFeedback = CoD.MPDamageFeedback.new( f1_local1, f1_arg0, 0.5, 0.5, -30, 30, 0.5, 0.5, -30, 30 ) --[[ @ 0]]
	DamageFeedback:subscribeToGlobalModel( f1_arg0, "CurrentWeapon", nil, function ( model )
		DamageFeedback:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DamageFeedback ) --[[ @ 0]]
	self.DamageFeedback = DamageFeedback --[[ @ 0]]
	
	local ConsoleCenter = CoD.CenterConsole.new( f1_local1, f1_arg0, 0.5, 0.5, -555, 555, 0, 0, 102.5, 249.5 ) --[[ @ 0]]
	self:addElement( ConsoleCenter ) --[[ @ 0]]
	self.ConsoleCenter = ConsoleCenter --[[ @ 0]]
	
	local DeadSpectate = CoD.DeadSpectate.new( f1_local1, f1_arg0, 0.5, 0.5, -225, 225, 1, 1, -270, -180 ) --[[ @ 0]]
	self:addElement( DeadSpectate ) --[[ @ 0]]
	self.DeadSpectate = DeadSpectate --[[ @ 0]]
	
	local MPScore = CoD.MPScr.new( f1_local1, f1_arg0, 0.5, 0.5, -75, 75, 0, 0, 350, 388 ) --[[ @ 0]]
	MPScore:subscribeToGlobalModel( f1_arg0, "PerController", "scriptNotify", function ( model )
		local f4_local0 = MPScore --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"score_event" ) then
			PlayClipOnElement( self, {
				elementName = "MPScore",
				clipName = "NormalScore"
			}, f1_arg0 ) --[[ @ 0]]
			SetMPScoreText( f1_local1, f4_local0, f1_arg0, model ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MPScore ) --[[ @ 0]]
	self.MPScore = MPScore --[[ @ 0]]
	
	local WaypointContainer = CoD.DynamicContainerWidget.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( WaypointContainer ) --[[ @ 0]]
	self.WaypointContainer = WaypointContainer --[[ @ 0]]
	
	local ZMInventory = CoD.ZMInventory.new( f1_local1, f1_arg0, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	ZMInventory:registerEventHandler( "menu_loaded", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f5_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f5_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsLowAspectRatio( f1_arg0 ) and not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f5_local0 then
			f5_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f5_local0
	end ) --[[ @ 0]]
	self:addElement( ZMInventory ) --[[ @ 0]]
	self.ZMInventory = ZMInventory --[[ @ 0]]
	
	local PCNotifContainer = nil --[[ @ 0]]
	
	PCNotifContainer = CoD.PC_Notif_Container.new( f1_local1, f1_arg0, 0.5, 0.5, 470, 920, 0, 0, 106, 206 ) --[[ @ 0]]
	self:addElement( PCNotifContainer ) --[[ @ 0]]
	self.PCNotifContainer = PCNotifContainer --[[ @ 0]]
	
	local FrontendBattlenetContainer = nil --[[ @ 0]]
	
	FrontendBattlenetContainer = CoD.FrontendBattlenetContainer.new( f1_local1, f1_arg0, 0.5, 0.5, -795.5, -359.5, 1, 1, -841, -61 ) --[[ @ 0]]
	self:addElement( FrontendBattlenetContainer ) --[[ @ 0]]
	self.FrontendBattlenetContainer = FrontendBattlenetContainer --[[ @ 0]]
	
	local HUDZMServerPauseNotification = CoD.HUD_ZM_ServerPauseNotification.new( f1_local1, f1_arg0, 0.5, 0.5, -1920, 1920, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	self:addElement( HUDZMServerPauseNotification ) --[[ @ 0]]
	self.HUDZMServerPauseNotification = HUDZMServerPauseNotification --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Trials_HUDDeactivated",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.HUDUtility.IsAnyGameType( f1_arg0, "ztrials" ) --[[ @ 0]]
				if f6_local0 then
					f6_local0 = CoD.ModelUtility.IsGlobalModelValueEqualTo( "ZMHudGlobal.trials.hudDeactivated", 1 ) --[[ @ 0]]
					if f6_local0 then
						f6_local0 = not CoD.ModelUtility.IsGlobalModelValueTrue( "ZMHudGlobal.trials.infoHidden" ) --[[ @ 0]]
					end
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local15 = self --[[ @ 0]]
	local f1_local16 = self.subscribeToModel --[[ @ 0]]
	local f1_local17 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["ZMHudGlobal.trials.hudDeactivated"], function ( f7_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f7_arg0:get(),
			modelName = "ZMHudGlobal.trials.hudDeactivated"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local15 = self --[[ @ 0]]
	f1_local16 = self.subscribeToModel --[[ @ 0]]
	f1_local17 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local16( f1_local15, f1_local17["ZMHudGlobal.trials.infoHidden"], function ( f8_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f8_arg0:get(),
			modelName = "ZMHudGlobal.trials.infoHidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:registerEventHandler( "menu_loaded", function ( self, event )
		local f9_local0 = nil --[[ @ 0]]
		if self.menuLoaded then
			f9_local0 = self:menuLoaded( event ) --[[ @ 0]]
		elseif self.super.menuLoaded then
			f9_local0 = self.super:menuLoaded( event ) --[[ @ 0]]
		end
		SetAllowCursorMovement( f1_local1, false ) --[[ @ 0]]
		if not f9_local0 then
			f9_local0 = self:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_back"], nil, function ( element, menu, controller, model )
		if CoD.ScoreboardUtility.CanShowScoreboard( controller ) then
			CoD.ScoreboardUtility.ShowScoreboard( controller ) --[[ @ 0]]
			return true
		elseif CoD.ScoreboardUtility.CanHideScoreboard( controller ) then
			CoD.ScoreboardUtility.HideScoreboard( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ScoreboardUtility.CanShowScoreboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif CoD.ScoreboardUtility.CanHideScoreboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_back"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "PerController", "scriptNotify", function ( model )
		local f12_local0 = self --[[ @ 0]]
		if CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_1739C4BD5BAF83BC" ) then
			CoD.BlackMarketUtility.RecordCompletedContractInGame( f1_arg0, model, f1_local1 ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsParamModelEqualToHashString( model, @"hash_4B04B1CB4B3498D0" ) then
			CoD.BlackMarketUtility.UpdateInGameContractRecord( f1_arg0, model, f1_local1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	SafeAreaContainer.id = "SafeAreaContainer" --[[ @ 0]]
	DeadSpectate.id = "DeadSpectate" --[[ @ 0]]
	ZMInventory.id = "ZMInventory" --[[ @ 0]]
	if CoD.isPC then
		PCNotifContainer.id = "PCNotifContainer" --[[ @ 0]]
	end
	if CoD.isPC then
		FrontendBattlenetContainer.id = "FrontendBattlenetContainer" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = DeadSpectate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local16 = self --[[ @ 0]]
	CoD.ZombieUtility.CommonPostLoadHud( self, f1_arg0, f1_local1 ) --[[ @ 0]]
	CoD.HUDUtility.InitOverheadNames( self, f1_arg0, "OverheadNameContainer" ) --[[ @ 0]]
	CoD.HUDUtility.InitWaypointHandlers( f1_local1, self, f1_arg0, "WaypointContainer", "" ) --[[ @ 0]]
	f1_local16 = SafeAreaContainer --[[ @ 0]]
	if IsPC() then
		SizeToHudArea( f1_local16, f1_arg0 ) --[[ @ 0]]
	end
	f1_local16 = ZMInventory --[[ @ 0]]
	if IsPC() then
		SizeToHudArea( f1_local16, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.T7Hud_zm_factory.__resetProperties = function ( f13_arg0 )
	f13_arg0.ZMInventory:completeAnimation() --[[ @ 0]]
	f13_arg0.WaypointContainer:completeAnimation() --[[ @ 0]]
	f13_arg0.MPScore:completeAnimation() --[[ @ 0]]
	f13_arg0.DamageFeedback:completeAnimation() --[[ @ 0]]
	f13_arg0.CursorHint:completeAnimation() --[[ @ 0]]
	f13_arg0.OverheadNameContainer:completeAnimation() --[[ @ 0]]
	f13_arg0.ZMInventory:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.WaypointContainer:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.MPScore:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.DamageFeedback:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.CursorHint:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.OverheadNameContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.T7Hud_zm_factory.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Trials_HUDDeactivated = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			local f15_local0 = function ( f16_arg0 )
				f15_arg0.OverheadNameContainer:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.OverheadNameContainer:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.OverheadNameContainer:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.OverheadNameContainer:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.OverheadNameContainer:completeAnimation() --[[ @ 0]]
			f15_arg0.OverheadNameContainer:setAlpha( 1 ) --[[ @ 0]]
			f15_local0( f15_arg0.OverheadNameContainer ) --[[ @ 0]]
			local f15_local1 = function ( f17_arg0 )
				f15_arg0.CursorHint:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.CursorHint:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.CursorHint:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.CursorHint:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.CursorHint:completeAnimation() --[[ @ 0]]
			f15_arg0.CursorHint:setAlpha( 1 ) --[[ @ 0]]
			f15_local1( f15_arg0.CursorHint ) --[[ @ 0]]
			local f15_local2 = function ( f18_arg0 )
				f15_arg0.DamageFeedback:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.DamageFeedback:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.DamageFeedback:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.DamageFeedback:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.DamageFeedback:completeAnimation() --[[ @ 0]]
			f15_arg0.DamageFeedback:setAlpha( 1 ) --[[ @ 0]]
			f15_local2( f15_arg0.DamageFeedback ) --[[ @ 0]]
			local f15_local3 = function ( f19_arg0 )
				f15_arg0.MPScore:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.MPScore:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.MPScore:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.MPScore:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.MPScore:completeAnimation() --[[ @ 0]]
			f15_arg0.MPScore:setAlpha( 1 ) --[[ @ 0]]
			f15_local3( f15_arg0.MPScore ) --[[ @ 0]]
			local f15_local4 = function ( f20_arg0 )
				f15_arg0.WaypointContainer:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.WaypointContainer:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.WaypointContainer:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.WaypointContainer:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.WaypointContainer:completeAnimation() --[[ @ 0]]
			f15_arg0.WaypointContainer:setAlpha( 1 ) --[[ @ 0]]
			f15_local4( f15_arg0.WaypointContainer ) --[[ @ 0]]
			local f15_local5 = function ( f21_arg0 )
				f15_arg0.ZMInventory:beginAnimation( 3000 ) --[[ @ 0]]
				f15_arg0.ZMInventory:setAlpha( 0 ) --[[ @ 0]]
				f15_arg0.ZMInventory:registerEventHandler( "interrupted_keyframe", f15_arg0.clipInterrupted ) --[[ @ 0]]
				f15_arg0.ZMInventory:registerEventHandler( "transition_complete_keyframe", f15_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f15_arg0.ZMInventory:completeAnimation() --[[ @ 0]]
			f15_arg0.ZMInventory:setAlpha( 1 ) --[[ @ 0]]
			f15_local5( f15_arg0.ZMInventory ) --[[ @ 0]]
		end
	},
	Trials_HUDDeactivated = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f22_arg0.OverheadNameContainer:completeAnimation() --[[ @ 0]]
			f22_arg0.OverheadNameContainer:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.OverheadNameContainer ) --[[ @ 0]]
			f22_arg0.CursorHint:completeAnimation() --[[ @ 0]]
			f22_arg0.CursorHint:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.CursorHint ) --[[ @ 0]]
			f22_arg0.DamageFeedback:completeAnimation() --[[ @ 0]]
			f22_arg0.DamageFeedback:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.DamageFeedback ) --[[ @ 0]]
			f22_arg0.MPScore:completeAnimation() --[[ @ 0]]
			f22_arg0.MPScore:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.MPScore ) --[[ @ 0]]
			f22_arg0.WaypointContainer:completeAnimation() --[[ @ 0]]
			f22_arg0.WaypointContainer:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.WaypointContainer ) --[[ @ 0]]
			f22_arg0.ZMInventory:completeAnimation() --[[ @ 0]]
			f22_arg0.ZMInventory:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.ZMInventory ) --[[ @ 0]]
		end,
		DefaultState = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			local f23_local0 = function ( f24_arg0 )
				f23_arg0.OverheadNameContainer:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.OverheadNameContainer:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.OverheadNameContainer:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.OverheadNameContainer:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.OverheadNameContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.OverheadNameContainer:setAlpha( 0 ) --[[ @ 0]]
			f23_local0( f23_arg0.OverheadNameContainer ) --[[ @ 0]]
			local f23_local1 = function ( f25_arg0 )
				f23_arg0.CursorHint:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.CursorHint:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.CursorHint:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.CursorHint:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.CursorHint:completeAnimation() --[[ @ 0]]
			f23_arg0.CursorHint:setAlpha( 0 ) --[[ @ 0]]
			f23_local1( f23_arg0.CursorHint ) --[[ @ 0]]
			local f23_local2 = function ( f26_arg0 )
				f23_arg0.DamageFeedback:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.DamageFeedback:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.DamageFeedback:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.DamageFeedback:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.DamageFeedback:completeAnimation() --[[ @ 0]]
			f23_arg0.DamageFeedback:setAlpha( 0 ) --[[ @ 0]]
			f23_local2( f23_arg0.DamageFeedback ) --[[ @ 0]]
			local f23_local3 = function ( f27_arg0 )
				f23_arg0.MPScore:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.MPScore:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.MPScore:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.MPScore:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.MPScore:completeAnimation() --[[ @ 0]]
			f23_arg0.MPScore:setAlpha( 0 ) --[[ @ 0]]
			f23_local3( f23_arg0.MPScore ) --[[ @ 0]]
			local f23_local4 = function ( f28_arg0 )
				f23_arg0.WaypointContainer:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.WaypointContainer:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.WaypointContainer:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.WaypointContainer:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.WaypointContainer:completeAnimation() --[[ @ 0]]
			f23_arg0.WaypointContainer:setAlpha( 0 ) --[[ @ 0]]
			f23_local4( f23_arg0.WaypointContainer ) --[[ @ 0]]
			local f23_local5 = function ( f29_arg0 )
				f23_arg0.ZMInventory:beginAnimation( 1000 ) --[[ @ 0]]
				f23_arg0.ZMInventory:setAlpha( 1 ) --[[ @ 0]]
				f23_arg0.ZMInventory:registerEventHandler( "interrupted_keyframe", f23_arg0.clipInterrupted ) --[[ @ 0]]
				f23_arg0.ZMInventory:registerEventHandler( "transition_complete_keyframe", f23_arg0.clipFinished ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f23_arg0.ZMInventory:completeAnimation() --[[ @ 0]]
			f23_arg0.ZMInventory:setAlpha( 0 ) --[[ @ 0]]
			f23_local5( f23_arg0.ZMInventory ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.T7Hud_zm_factory.__onClose = function ( f30_arg0 )
	f30_arg0.OverheadNameContainer:close() --[[ @ 0]]
	f30_arg0.SafeAreaContainer:close() --[[ @ 0]]
	f30_arg0.fullscreenContainer:close() --[[ @ 0]]
	f30_arg0.CursorHint:close() --[[ @ 0]]
	f30_arg0.DamageFeedback:close() --[[ @ 0]]
	f30_arg0.ConsoleCenter:close() --[[ @ 0]]
	f30_arg0.DeadSpectate:close() --[[ @ 0]]
	f30_arg0.MPScore:close() --[[ @ 0]]
	f30_arg0.WaypointContainer:close() --[[ @ 0]]
	f30_arg0.ZMInventory:close() --[[ @ 0]]
	f30_arg0.PCNotifContainer:close() --[[ @ 0]]
	f30_arg0.FrontendBattlenetContainer:close() --[[ @ 0]]
	f30_arg0.HUDZMServerPauseNotification:close() --[[ @ 0]]
end
 --[[ @ 0]]
