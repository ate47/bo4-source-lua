-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/bumperbuttonwithkeymouse" ) --[[ @ 0]]

CoD.DemoControlsSpectatingBar = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DemoControlsSpectatingBar.__defaultWidth = 290 --[[ @ 0]]
CoD.DemoControlsSpectatingBar.__defaultHeight = 30 --[[ @ 0]]
CoD.DemoControlsSpectatingBar.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DemoControlsSpectatingBar ) --[[ @ 0]]
	self.id = "DemoControlsSpectatingBar" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = CoD.isPC --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local f1_local1 = nil --[[ @ 0]]
	self.leftButton = LUI.UIElement.createFake() --[[ @ 0]]
	
	local PlayerName = LUI.UIText.new( 0, 1, 34, -34, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	PlayerName:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	PlayerName:setTTF( "notosans_bold" ) --[[ @ 0]]
	PlayerName:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_171E049B161CD00A" ) ) --[[ @ 0]]
	PlayerName:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	PlayerName:setAlignment( Enum[@"LUIAlignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	PlayerName:subscribeToGlobalModel( f1_arg1, "Demo", "clientNum", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			PlayerName:setText( GetClientNameAndClanTag( f1_arg1, f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PlayerName ) --[[ @ 0]]
	self.PlayerName = PlayerName --[[ @ 0]]
	
	local f1_local3 = nil --[[ @ 0]]
	self.rightButton = LUI.UIElement.createFake() --[[ @ 0]]
	local LeftArrow = nil --[[ @ 0]]
	
	LeftArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0, 0, 0, 67, 0, 0, -7.5, 37.5 ) --[[ @ 0]]
	LeftArrow.KeyMouseImage:setYRot( 180 ) --[[ @ 0]]
	LeftArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	LeftArrow:subscribeToGlobalModel( f1_arg1, "Controller", "left_shoulder_button_image", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			LeftArrow.ControllerImage:setImage( RegisterImage( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LeftArrow:registerEventHandler( "menu_loaded", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f4_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f4_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsGamepad( f1_arg1 ) then
			HideWidget( element ) --[[ @ 0]]
		end
		if not f4_local0 then
			f4_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	LeftArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( LeftArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.DemoUtility.LeftBumperAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( LeftArrow ) --[[ @ 0]]
	self.LeftArrow = LeftArrow --[[ @ 0]]
	
	local RightArrow = nil --[[ @ 0]]
	
	RightArrow = CoD.BumperButtonWithKeyMouse.new( f1_arg0, f1_arg1, 0, 0, 223, 290, 0, 0, -7.5, 37.5 ) --[[ @ 0]]
	RightArrow.KeyMouseImage:setImage( RegisterImage( @"uie_optionswidgets_arrow" ) ) --[[ @ 0]]
	RightArrow:subscribeToGlobalModel( f1_arg1, "Controller", "right_shoulder_button_image", function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			RightArrow.ControllerImage:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	RightArrow:registerEventHandler( "menu_loaded", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f9_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f9_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if IsGamepad( f1_arg1 ) then
			HideWidget( element ) --[[ @ 0]]
		end
		if not f9_local0 then
			f9_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f9_local0
	end ) --[[ @ 0]]
	RightArrow:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"] ) --[[ @ 0]]
		return f10_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( RightArrow, f1_arg1, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], "MOUSE1", function ( element, menu, controller, model )
		CoD.DemoUtility.RightBumperAction( self, element, controller, menu ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3865DD2DB1EFE9F8"], @"hash_0", nil, "MOUSE1" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( RightArrow ) --[[ @ 0]]
	self.RightArrow = RightArrow --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "WithButtonPromptsKBM",
			condition = function ( menu, element, event )
				local f13_local0 --[[ @ 0]]
				if not IsDemoClipPlaying() and not CoD.HUDUtility.IsGameTypeEqualToString( "fr" ) and not IsFreeCameraLockedOnEntity( f1_arg1 ) then
					f13_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
					if f13_local0 then
						f13_local0 = not CoD.ModelUtility.IsGlobalModelValueTrue( "demo.isDefaultCameraMode" ) --[[ @ 0]]
					end
				else
					f13_local0 = false --[[ @ 0]]
				end
				return f13_local0
			end
		},
		{
			stateName = "WithButtonPrompts",
			condition = function ( menu, element, event )
				local f14_local0 --[[ @ 0]]
				if not IsDemoClipPlaying() and not CoD.HUDUtility.IsGameTypeEqualToString( "fr" ) and not IsFreeCameraLockedOnEntity( f1_arg1 ) then
					f14_local0 = IsGamepad( f1_arg1 ) --[[ @ 0]]
				else
					f14_local0 = false --[[ @ 0]]
				end
				return f14_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["demo.isFreeCameraLockedOnEntity"], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "demo.isFreeCameraLockedOnEntity"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f16_arg0, f16_arg1 )
		f16_arg1.menu = f16_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f16_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.LastInput, function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["demo.isDefaultCameraMode"], function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "demo.isDefaultCameraMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	if CoD.isPC then
		LeftArrow.id = "LeftArrow" --[[ @ 0]]
	end
	if CoD.isPC then
		RightArrow.id = "RightArrow" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local7 = self --[[ @ 0]]
	CoD.DemoUtility.AddSubscriptionsToUpdatePlayerNameTextfield( self.PlayerName, f1_arg1 ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( LeftArrow ) --[[ @ 0]]
	DisableKeyboardNavigationByElement( RightArrow ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.DemoControlsSpectatingBar.__resetProperties = function ( f19_arg0 )
	f19_arg0.leftButton:completeAnimation() --[[ @ 0]]
	f19_arg0.rightButton:completeAnimation() --[[ @ 0]]
	f19_arg0.LeftArrow:completeAnimation() --[[ @ 0]]
	f19_arg0.RightArrow:completeAnimation() --[[ @ 0]]
	f19_arg0.leftButton:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.rightButton:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.LeftArrow:setAlpha( 1 ) --[[ @ 0]]
	f19_arg0.RightArrow:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DemoControlsSpectatingBar.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f20_arg0.leftButton:completeAnimation() --[[ @ 0]]
			f20_arg0.leftButton:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.leftButton ) --[[ @ 0]]
			f20_arg0.rightButton:completeAnimation() --[[ @ 0]]
			f20_arg0.rightButton:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.rightButton ) --[[ @ 0]]
			f20_arg0.LeftArrow:completeAnimation() --[[ @ 0]]
			f20_arg0.LeftArrow:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.LeftArrow ) --[[ @ 0]]
			f20_arg0.RightArrow:completeAnimation() --[[ @ 0]]
			f20_arg0.RightArrow:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.RightArrow ) --[[ @ 0]]
		end
	},
	WithButtonPromptsKBM = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.leftButton:completeAnimation() --[[ @ 0]]
			f21_arg0.leftButton:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.leftButton ) --[[ @ 0]]
			f21_arg0.rightButton:completeAnimation() --[[ @ 0]]
			f21_arg0.rightButton:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.rightButton ) --[[ @ 0]]
			f21_arg0.LeftArrow:completeAnimation() --[[ @ 0]]
			f21_arg0.LeftArrow:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.LeftArrow ) --[[ @ 0]]
			f21_arg0.RightArrow:completeAnimation() --[[ @ 0]]
			f21_arg0.RightArrow:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.RightArrow ) --[[ @ 0]]
		end
	},
	WithButtonPrompts = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.leftButton:completeAnimation() --[[ @ 0]]
			f22_arg0.leftButton:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.leftButton ) --[[ @ 0]]
			f22_arg0.rightButton:completeAnimation() --[[ @ 0]]
			f22_arg0.rightButton:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.rightButton ) --[[ @ 0]]
			f22_arg0.LeftArrow:completeAnimation() --[[ @ 0]]
			f22_arg0.LeftArrow:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.LeftArrow ) --[[ @ 0]]
			f22_arg0.RightArrow:completeAnimation() --[[ @ 0]]
			f22_arg0.RightArrow:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.RightArrow ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DemoControlsSpectatingBar.__onClose = function ( f23_arg0 )
	f23_arg0.leftButton:close() --[[ @ 0]]
	f23_arg0.PlayerName:close() --[[ @ 0]]
	f23_arg0.rightButton:close() --[[ @ 0]]
	f23_arg0.LeftArrow:close() --[[ @ 0]]
	f23_arg0.RightArrow:close() --[[ @ 0]]
end
 --[[ @ 0]]
