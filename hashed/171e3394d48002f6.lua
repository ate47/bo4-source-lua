-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "ui/uieditor/menus/craft/paintshop/paintjobselectoroptions" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintjobselectoritem" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

CoD.PaintjobSelector = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.PaintjobSelector.__defaultWidth = 1920 --[[ @ 0]]
CoD.PaintjobSelector.__defaultHeight = 1080 --[[ @ 0]]
CoD.PaintjobSelector.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.PaintjobSelector ) --[[ @ 0]]
	self.id = "PaintjobSelector" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local paintjobsList = LUI.UIList.new( f1_arg0, f1_arg1, 18, 0, nil, true, false, false, false ) --[[ @ 0]]
	paintjobsList:mergeStateConditions( {
		{
			stateName = "EmptySlot",
			condition = function ( menu, element, event )
				return not Paintjobs_IsOccupied( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	paintjobsList:linkToElementModel( paintjobsList, "paintjobSlot", true, function ( model )
		f1_arg0:updateElementState( paintjobsList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "paintjobSlot"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	paintjobsList:setLeftRight( 0.5, 0.5, -721, 721 ) --[[ @ 0]]
	paintjobsList:setTopBottom( 1, 1, -384, -114 ) --[[ @ 0]]
	paintjobsList:setWidgetType( CoD.PaintjobSelectorItem ) --[[ @ 0]]
	paintjobsList:setHorizontalCount( 5 ) --[[ @ 0]]
	paintjobsList:setVerticalCount( 2 ) --[[ @ 0]]
	paintjobsList:setSpacing( 18 ) --[[ @ 0]]
	paintjobsList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	paintjobsList:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	paintjobsList:setDataSource( "PaintjobList" ) --[[ @ 0]]
	paintjobsList:linkToElementModel( paintjobsList, "paintjobSlot", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	paintjobsList:appendEventHandler( "input_source_changed", function ( f5_arg0, f5_arg1 )
		f5_arg1.menu = f5_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f5_arg0, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = paintjobsList --[[ @ 0]]
	local f1_local3 = paintjobsList.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.LastInput, function ( f6_arg0, f6_arg1 )
		CoD.Menu.UpdateButtonShownState( f6_arg1, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	paintjobsList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		PaintjobSelector_GainFocus( self, element, f1_arg1 ) --[[ @ 0]]
		return f7_local0
	end ) --[[ @ 0]]
	paintjobsList:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"luibutton"][@"lui_key_start"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( paintjobsList, f1_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CraftItemIsReadOnly( element, controller ) then
			OpenPaintjobEditor( element, menu, controller, model ) --[[ @ 0]]
			PlaySoundAlias( "uin_menu_action" ) --[[ @ 0]]
			return true
		elseif CraftItemIsReadOnly( element, controller ) then
			CoD.FileshareUtility.ShowSimpleToast( controller, CoD.FileshareUtility.ToastTypes.READONLY ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CraftItemIsReadOnly( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		elseif CraftItemIsReadOnly( element, controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( paintjobsList, f1_arg1, Enum[@"luibutton"][@"lui_key_start"], "ui_contextual_2", function ( element, menu, controller, model )
		if Paintjobs_IsOccupied( element, controller ) and not IsMouseOrKeyboard( controller ) then
			OpenPopup( self, "PaintjobSelectorOptions", controller, nil ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if Paintjobs_IsOccupied( element, controller ) and not IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_start"], @"menu/paintjob_options", nil, "ui_contextual_2" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	paintjobsList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/delete", function ( f13_arg0, f13_arg1, f13_arg2, f13_arg3 )
		if Paintjobs_IsOccupied( f13_arg0, f13_arg2 ) then
			return function ( f14_arg0, f14_arg1, f14_arg2, f14_arg3 )
				CoD.CraftUtility.PaintjobClear( self, f14_arg0, f14_arg2, "", f14_arg1 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	paintjobsList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/copy", function ( f15_arg0, f15_arg1, f15_arg2, f15_arg3 )
		if Paintjobs_IsOccupied( f15_arg0, f15_arg2 ) then
			return function ( f16_arg0, f16_arg1, f16_arg2, f16_arg3 )
				PaintjobSelector_CopyPaintjob( self, f16_arg0, f16_arg2, "", f16_arg1 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	paintjobsList:AddContextualMenuAction( f1_arg0, f1_arg1, @"menu/paintjob_options", function ( f17_arg0, f17_arg1, f17_arg2, f17_arg3 )
		if Paintjobs_IsOccupied( f17_arg0, f17_arg2 ) then
			return function ( f18_arg0, f18_arg1, f18_arg2, f18_arg3 )
				OpenPopup( self, "PaintjobSelectorOptions", f18_arg2, nil ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( paintjobsList ) --[[ @ 0]]
	self.paintjobsList = paintjobsList --[[ @ 0]]
	
	paintjobsList.id = "paintjobsList" --[[ @ 0]]
	self.__defaultFocus = paintjobsList --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.PaintjobSelector.__onClose = function ( f19_arg0 )
	f19_arg0.paintjobsList:close() --[[ @ 0]]
end
 --[[ @ 0]]
