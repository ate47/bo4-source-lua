-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:33abf882f693ea5" ) --[[ @ 0]]
require( "ui/uieditor/widgets/vehiclehuds/buttons/vhud_generic_key_mouse_layout" ) --[[ @ 0]]

CoD.vhud_generic_button_layout = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.vhud_generic_button_layout.__defaultWidth = 1920 --[[ @ 0]]
CoD.vhud_generic_button_layout.__defaultHeight = 1080 --[[ @ 0]]
CoD.vhud_generic_button_layout.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.vhud_generic_button_layout ) --[[ @ 0]]
	self.id = "vhud_generic_button_layout" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	local vhudgenerickeymouselayout = nil --[[ @ 0]]
	
	vhudgenerickeymouselayout = CoD.vhud_generic_key_mouse_layout.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	vhudgenerickeymouselayout:setAlpha( 0 ) --[[ @ 0]]
	vhudgenerickeymouselayout:linkToElementModel( self, nil, false, function ( model )
		vhudgenerickeymouselayout:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	vhudgenerickeymouselayout:registerEventHandler( "menu_loaded", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f3_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f3_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		SizeToHudArea( element, f1_arg1 ) --[[ @ 0]]
		if not f3_local0 then
			f3_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( vhudgenerickeymouselayout ) --[[ @ 0]]
	self.vhudgenerickeymouselayout = vhudgenerickeymouselayout --[[ @ 0]]
	
	local vhudgenericgamepadlayout = CoD.vhud_generic_gamepad_layout.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	vhudgenericgamepadlayout:linkToElementModel( self, nil, false, function ( model )
		vhudgenericgamepadlayout:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( vhudgenericgamepadlayout ) --[[ @ 0]]
	self.vhudgenericgamepadlayout = vhudgenericgamepadlayout --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "UsingKeyboardMouse",
			condition = function ( menu, element, event )
				return not IsGamepad( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f6_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local3 = self --[[ @ 0]]
	local f1_local4 = self.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local4( f1_local3, f1_local5.LastInput, function ( f7_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.vhud_generic_button_layout.__resetProperties = function ( f8_arg0 )
	f8_arg0.vhudgenerickeymouselayout:completeAnimation() --[[ @ 0]]
	f8_arg0.vhudgenericgamepadlayout:completeAnimation() --[[ @ 0]]
	f8_arg0.vhudgenerickeymouselayout:setAlpha( 0 ) --[[ @ 0]]
	f8_arg0.vhudgenericgamepadlayout:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.vhud_generic_button_layout.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	UsingKeyboardMouse = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f10_arg0.vhudgenerickeymouselayout:completeAnimation() --[[ @ 0]]
			f10_arg0.vhudgenerickeymouselayout:setAlpha( 1 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.vhudgenerickeymouselayout ) --[[ @ 0]]
			f10_arg0.vhudgenericgamepadlayout:completeAnimation() --[[ @ 0]]
			f10_arg0.vhudgenericgamepadlayout:setAlpha( 0 ) --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.vhudgenericgamepadlayout ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.vhud_generic_button_layout.__onClose = function ( f11_arg0 )
	f11_arg0.vhudgenerickeymouselayout:close() --[[ @ 0]]
	f11_arg0.vhudgenericgamepadlayout:close() --[[ @ 0]]
end
 --[[ @ 0]]
