-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/director/directorpartybarinternal" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpartyleader" ) --[[ @ 0]]

CoD.DirectorPartyBar = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorPartyBar.__defaultWidth = 5 --[[ @ 0]]
CoD.DirectorPartyBar.__defaultHeight = 64 --[[ @ 0]]
CoD.DirectorPartyBar.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorPartyBar ) --[[ @ 0]]
	self.id = "DirectorPartyBar" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PartyBar = CoD.DirectorPartyBarInternal.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	PartyBar:linkToElementModel( self, nil, false, function ( model )
		PartyBar:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PartyBar ) --[[ @ 0]]
	self.PartyBar = PartyBar --[[ @ 0]]
	
	local DirectorPartyLeader = CoD.DirectorPartyLeader.new( f1_arg0, f1_arg1, 0.5, 0.5, -1, 19, 0.5, 0.5, -10, 10 ) --[[ @ 0]]
	DirectorPartyLeader:linkToElementModel( self, nil, false, function ( model )
		DirectorPartyLeader:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( DirectorPartyLeader ) --[[ @ 0]]
	self.DirectorPartyLeader = DirectorPartyLeader --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "YourParty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isPartyMember" ) and CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isInAParty" )
			end
		},
		{
			stateName = "OtherParty",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg1, "isInAParty" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "isPartyMember", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isPartyMember"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "isInAParty", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "isInAParty"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorPartyBar.__resetProperties = function ( f8_arg0 )
	f8_arg0.DirectorPartyLeader:completeAnimation() --[[ @ 0]]
	f8_arg0.PartyBar:completeAnimation() --[[ @ 0]]
	f8_arg0.DirectorPartyLeader:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.PartyBar:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.PartyBar.PartyBarGlow2:setRGB( 0, 0.08, 0.61 ) --[[ @ 0]]
	f8_arg0.PartyBar.PartyBarGlow3:setRGB( 0, 0.08, 0.61 ) --[[ @ 0]]
	f8_arg0.PartyBar.PartyBar:setRGB( 0.02, 0.29, 0.49 ) --[[ @ 0]]
	f8_arg0.PartyBar.PartyBarGlow:setRGB( 0, 0.03, 0.2 ) --[[ @ 0]]
	f8_arg0.PartyBar.PartyBarhotspot:setRGB( 0, 0.56, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorPartyBar.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f9_arg0.PartyBar:completeAnimation() --[[ @ 0]]
			f9_arg0.PartyBar:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.PartyBar ) --[[ @ 0]]
			f9_arg0.DirectorPartyLeader:completeAnimation() --[[ @ 0]]
			f9_arg0.DirectorPartyLeader:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.DirectorPartyLeader ) --[[ @ 0]]
		end
	},
	YourParty = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f10_arg0.PartyBar:completeAnimation() --[[ @ 0]]
			f10_arg0.clipFinished( f10_arg0.PartyBar ) --[[ @ 0]]
		end
	},
	OtherParty = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f11_arg0.PartyBar:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow2:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow3:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBar:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarhotspot:completeAnimation() --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow2:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow3:setRGB( 0.61, 0.61, 0.61 ) --[[ @ 0]]
			f11_arg0.PartyBar.PartyBar:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarGlow:setRGB( 0.2, 0.2, 0.2 ) --[[ @ 0]]
			f11_arg0.PartyBar.PartyBarhotspot:setRGB( ColorSet.T8__BIEGE.r, ColorSet.T8__BIEGE.g, ColorSet.T8__BIEGE.b ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.PartyBar ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorPartyBar.__onClose = function ( f12_arg0 )
	f12_arg0.PartyBar:close() --[[ @ 0]]
	f12_arg0.DirectorPartyLeader:close() --[[ @ 0]]
end
 --[[ @ 0]]
