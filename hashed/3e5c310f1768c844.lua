-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/hud/corner9slice" ) --[[ @ 0]]
require( "x64:77122e658d3b8228" ) --[[ @ 0]]
require( "x64:7ef354d5c59e8994" ) --[[ @ 0]]

CoD.Waypoint_TextBGTraining = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.Waypoint_TextBGTraining.__defaultWidth = 120 --[[ @ 0]]
CoD.Waypoint_TextBGTraining.__defaultHeight = 31 --[[ @ 0]]
CoD.Waypoint_TextBGTraining.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.Waypoint_TextBGTraining ) --[[ @ 0]]
	self.id = "Waypoint_TextBGTraining" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local arrowTExt = LUI.UIImage.new( 0.5, 0.5, -15, 15, 1, 1, -9, 0 ) --[[ @ 0]]
	arrowTExt:setImage( RegisterImage( @"uie_t7_hud_waypoints_bg_arrow" ) ) --[[ @ 0]]
	self:addElement( arrowTExt ) --[[ @ 0]]
	self.arrowTExt = arrowTExt --[[ @ 0]]
	
	local WaypointTextWithBG = CoD.Waypoint_TextWithBGTraining.new( f1_arg0, f1_arg1, 0.5, 0.5, -192, 192, 1, 1, -30, 8 ) --[[ @ 0]]
	self:addElement( WaypointTextWithBG ) --[[ @ 0]]
	self.WaypointTextWithBG = WaypointTextWithBG --[[ @ 0]]
	
	local DistanceTextWithBG = CoD.Waypoint_TextWithBGTraining.new( f1_arg0, f1_arg1, 0.5, 0.5, -192, 192, 1, 1, -30, 8 ) --[[ @ 0]]
	DistanceTextWithBG:setAlpha( 0 ) --[[ @ 0]]
	DistanceTextWithBG:linkToElementModel( self, "distanceText", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			DistanceTextWithBG.text:setText( LocalizeIntoStringIfNotEmpty( @"hash_37235825812D46C6", f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DistanceTextWithBG ) --[[ @ 0]]
	self.DistanceTextWithBG = DistanceTextWithBG --[[ @ 0]]
	
	local ContestedText = LUI.UIText.new( 0, 0, -40, 160, 0, 0, 5.5, 35.5 ) --[[ @ 0]]
	ContestedText:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	ContestedText:setAlpha( 0 ) --[[ @ 0]]
	ContestedText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2E57B38B7A8EE82E" ) ) --[[ @ 0]]
	ContestedText:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	ContestedText:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
	ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	ContestedText:setShaderVector( 2, 1, 0, 0, 0.4 ) --[[ @ 0]]
	ContestedText:setLetterSpacing( 2 ) --[[ @ 0]]
	ContestedText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	ContestedText:setAlignment( Enum[@"LUIAlignment"][@"hash_670510683C22104B"] ) --[[ @ 0]]
	ContestedText:setBackingType( 1 ) --[[ @ 0]]
	ContestedText:setBackingWidget( CoD.Corner9Slice, f1_arg0, f1_arg1 ) --[[ @ 0]]
	ContestedText:setBackingAlpha( 0.7 ) --[[ @ 0]]
	ContestedText:setBackingXPadding( 12 ) --[[ @ 0]]
	ContestedText:setBackingYPadding( 4 ) --[[ @ 0]]
	self:addElement( ContestedText ) --[[ @ 0]]
	self.ContestedText = ContestedText --[[ @ 0]]
	
	local Arrow = CoD.Waypoint_ContestedArrowWidget.new( f1_arg0, f1_arg1, 0, 0, 161, 185, 0, 0, 8.5, 32.5 ) --[[ @ 0]]
	Arrow:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	Arrow:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Arrow ) --[[ @ 0]]
	self.Arrow = Arrow --[[ @ 0]]
	
	local Arrow2 = CoD.Waypoint_ContestedArrowWidget.new( f1_arg0, f1_arg1, 0, 0, -64, -40, 0, 0, 8.5, 32.5 ) --[[ @ 0]]
	Arrow2:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	Arrow2:setAlpha( 0 ) --[[ @ 0]]
	Arrow2:setYRot( 180 ) --[[ @ 0]]
	self:addElement( Arrow2 ) --[[ @ 0]]
	self.Arrow2 = Arrow2 --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Contested",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Protect",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ShowDistance",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "distanceText" ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" )
			end
		},
		{
			stateName = "Show",
			condition = function ( menu, element, event )
				local f6_local0 = CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "text" ) --[[ @ 0]]
				if f6_local0 then
					if not CoD.ModelUtility.IsSelfModelValueNonEmptyString( element, f1_arg1, "distanceText" ) then
						f6_local0 = not CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "clamped" ) --[[ @ 0]]
					else
						f6_local0 = false --[[ @ 0]]
					end
				end
				return f6_local0
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "distanceText", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "distanceText"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "clamped", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "clamped"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "text", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "text"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.Waypoint_TextBGTraining.__resetProperties = function ( f10_arg0 )
	f10_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
	f10_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
	f10_arg0.ContestedText:completeAnimation() --[[ @ 0]]
	f10_arg0.Arrow2:completeAnimation() --[[ @ 0]]
	f10_arg0.Arrow:completeAnimation() --[[ @ 0]]
	f10_arg0.DistanceTextWithBG:completeAnimation() --[[ @ 0]]
	f10_arg0.arrowTExt:setLeftRight( 0.5, 0.5, -15, 15 ) --[[ @ 0]]
	f10_arg0.arrowTExt:setTopBottom( 1, 1, -9, 0 ) --[[ @ 0]]
	f10_arg0.arrowTExt:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.WaypointTextWithBG:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.ContestedText:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	f10_arg0.ContestedText:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.ContestedText:setScale( 1, 1 ) --[[ @ 0]]
	f10_arg0.ContestedText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2E57B38B7A8EE82E" ) ) --[[ @ 0]]
	f10_arg0.ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
	f10_arg0.ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	f10_arg0.ContestedText:setShaderVector( 2, 1, 0, 0, 0.4 ) --[[ @ 0]]
	f10_arg0.Arrow2:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	f10_arg0.Arrow2:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.Arrow:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
	f10_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.DistanceTextWithBG:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.Waypoint_TextBGTraining.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f11_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
			f11_arg0.arrowTExt:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.arrowTExt ) --[[ @ 0]]
			f11_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
			f11_arg0.WaypointTextWithBG:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.WaypointTextWithBG ) --[[ @ 0]]
			f11_arg0.ContestedText:completeAnimation() --[[ @ 0]]
			f11_arg0.ContestedText:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.ContestedText ) --[[ @ 0]]
			f11_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f11_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Arrow ) --[[ @ 0]]
			f11_arg0.Arrow2:completeAnimation() --[[ @ 0]]
			f11_arg0.Arrow2:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Arrow2 ) --[[ @ 0]]
		end
	},
	Contested = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f12_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
			f12_arg0.arrowTExt:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.arrowTExt ) --[[ @ 0]]
			f12_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
			f12_arg0.WaypointTextWithBG:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.WaypointTextWithBG ) --[[ @ 0]]
			local f12_local0 = function ( f13_arg0 )
				local f13_local0 = function ( f14_arg0 )
					local f14_local0 = function ( f15_arg0 )
						local f15_local0 = function ( f16_arg0 )
							f16_arg0:beginAnimation( 490 ) --[[ @ 0]]
							f16_arg0:registerEventHandler( "transition_complete_keyframe", f12_arg0.clipFinished ) --[[ @ 0]]
						end
						 --[[ @ 0]]
						f15_arg0:beginAnimation( 30, Enum[@"hash_1F50FFF429AB1890"][@"hash_15193EA7825DC097"] ) --[[ @ 0]]
						f15_arg0:setScale( 1, 1 ) --[[ @ 0]]
						f15_arg0:registerEventHandler( "transition_complete_keyframe", f15_local0 ) --[[ @ 0]]
					end
					 --[[ @ 0]]
					f14_arg0:beginAnimation( 80, Enum[@"hash_1F50FFF429AB1890"][@"hash_15193EA7825DC097"] ) --[[ @ 0]]
					f14_arg0:setScale( 1.1, 1.1 ) --[[ @ 0]]
					f14_arg0:registerEventHandler( "transition_complete_keyframe", f14_local0 ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f12_arg0.ContestedText:beginAnimation( 380 ) --[[ @ 0]]
				f12_arg0.ContestedText:registerEventHandler( "interrupted_keyframe", f12_arg0.clipInterrupted ) --[[ @ 0]]
				f12_arg0.ContestedText:registerEventHandler( "transition_complete_keyframe", f13_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f12_arg0.ContestedText:completeAnimation() --[[ @ 0]]
			f12_arg0.ContestedText:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.ContestedText:setScale( 1, 1 ) --[[ @ 0]]
			f12_arg0.ContestedText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2E57B38B7A8EE82E" ) ) --[[ @ 0]]
			f12_arg0.ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
			f12_arg0.ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f12_arg0.ContestedText:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f12_local0( f12_arg0.ContestedText ) --[[ @ 0]]
			f12_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f12_arg0.Arrow:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
			f12_arg0.Arrow:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Arrow ) --[[ @ 0]]
			f12_arg0.Arrow2:completeAnimation() --[[ @ 0]]
			f12_arg0.Arrow2:setRGB( ColorSet.EnemyOrange.r, ColorSet.EnemyOrange.g, ColorSet.EnemyOrange.b ) --[[ @ 0]]
			f12_arg0.Arrow2:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Arrow2 ) --[[ @ 0]]
			f12_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	Protect = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f17_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
			f17_arg0.arrowTExt:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.arrowTExt ) --[[ @ 0]]
			f17_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
			f17_arg0.WaypointTextWithBG:setAlpha( 0 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.WaypointTextWithBG ) --[[ @ 0]]
			local f17_local0 = function ( f18_arg0 )
				local f18_local0 = function ( f19_arg0 )
					f19_arg0:beginAnimation( 470 ) --[[ @ 0]]
					f19_arg0:setScale( 1, 1 ) --[[ @ 0]]
					f19_arg0:registerEventHandler( "transition_complete_keyframe", f17_arg0.clipFinished ) --[[ @ 0]]
				end
				 --[[ @ 0]]
				f17_arg0.ContestedText:beginAnimation( 530 ) --[[ @ 0]]
				f17_arg0.ContestedText:setScale( 1.4, 1.4 ) --[[ @ 0]]
				f17_arg0.ContestedText:registerEventHandler( "interrupted_keyframe", f17_arg0.clipInterrupted ) --[[ @ 0]]
				f17_arg0.ContestedText:registerEventHandler( "transition_complete_keyframe", f18_local0 ) --[[ @ 0]]
			end
			 --[[ @ 0]]
			f17_arg0.ContestedText:completeAnimation() --[[ @ 0]]
			f17_arg0.ContestedText:setRGB( 0.97, 0.92, 0.49 ) --[[ @ 0]]
			f17_arg0.ContestedText:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.ContestedText:setScale( 1, 1 ) --[[ @ 0]]
			f17_arg0.ContestedText:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_2D28C08FEAA399FC" ) ) --[[ @ 0]]
			f17_arg0.ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
			f17_arg0.ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f17_arg0.ContestedText:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f17_local0( f17_arg0.ContestedText ) --[[ @ 0]]
			f17_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f17_arg0.Arrow:setRGB( 0.97, 0.92, 0.49 ) --[[ @ 0]]
			f17_arg0.Arrow:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Arrow ) --[[ @ 0]]
			f17_arg0.Arrow2:completeAnimation() --[[ @ 0]]
			f17_arg0.Arrow2:setRGB( 0.97, 0.92, 0.49 ) --[[ @ 0]]
			f17_arg0.Arrow2:setAlpha( 1 ) --[[ @ 0]]
			f17_arg0.clipFinished( f17_arg0.Arrow2 ) --[[ @ 0]]
			f17_arg0.nextClip = "DefaultClip" --[[ @ 0]]
		end
	},
	ShowDistance = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f20_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
			f20_arg0.arrowTExt:setLeftRight( 0.5, 0.5, -15, 15 ) --[[ @ 0]]
			f20_arg0.arrowTExt:setTopBottom( 1, 1, -9, 0 ) --[[ @ 0]]
			f20_arg0.arrowTExt:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.arrowTExt ) --[[ @ 0]]
			f20_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
			f20_arg0.WaypointTextWithBG:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.WaypointTextWithBG ) --[[ @ 0]]
			f20_arg0.DistanceTextWithBG:completeAnimation() --[[ @ 0]]
			f20_arg0.DistanceTextWithBG:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.DistanceTextWithBG ) --[[ @ 0]]
			f20_arg0.ContestedText:completeAnimation() --[[ @ 0]]
			f20_arg0.ContestedText:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.ContestedText:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.ContestedText ) --[[ @ 0]]
			f20_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f20_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Arrow ) --[[ @ 0]]
			f20_arg0.Arrow2:completeAnimation() --[[ @ 0]]
			f20_arg0.Arrow2:setAlpha( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.Arrow2 ) --[[ @ 0]]
		end
	},
	Show = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f21_arg0.arrowTExt:completeAnimation() --[[ @ 0]]
			f21_arg0.arrowTExt:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.arrowTExt ) --[[ @ 0]]
			f21_arg0.WaypointTextWithBG:completeAnimation() --[[ @ 0]]
			f21_arg0.WaypointTextWithBG:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.WaypointTextWithBG ) --[[ @ 0]]
			f21_arg0.ContestedText:completeAnimation() --[[ @ 0]]
			f21_arg0.ContestedText:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.ContestedText:setShaderVector( 0, 0.8, 0, 0, 0 ) --[[ @ 0]]
			f21_arg0.ContestedText:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
			f21_arg0.ContestedText:setShaderVector( 2, 1, 0, 0, 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.ContestedText ) --[[ @ 0]]
			f21_arg0.Arrow:completeAnimation() --[[ @ 0]]
			f21_arg0.Arrow:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Arrow ) --[[ @ 0]]
			f21_arg0.Arrow2:completeAnimation() --[[ @ 0]]
			f21_arg0.Arrow2:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.Arrow2 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.Waypoint_TextBGTraining.__onClose = function ( f22_arg0 )
	f22_arg0.WaypointTextWithBG:close() --[[ @ 0]]
	f22_arg0.DistanceTextWithBG:close() --[[ @ 0]]
	f22_arg0.Arrow:close() --[[ @ 0]]
	f22_arg0.Arrow2:close() --[[ @ 0]]
end
 --[[ @ 0]]
