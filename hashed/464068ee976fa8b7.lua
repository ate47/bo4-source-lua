-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:4dadb11e1c159899" ) --[[ @ 0]]
require( "ui/uieditor/widgets/cac/menuchooseclass/chooseclasslockedoverlay" ) --[[ @ 0]]
require( "x64:77046b0d9f3594f1" ) --[[ @ 0]]
require( "x64:2d13dde082cbfc3a" ) --[[ @ 0]]
require( "x64:1eddcb6b27ca1e41" ) --[[ @ 0]]
require( "x64:25dfd98ce8acdef7" ) --[[ @ 0]]
require( "x64:20602298da419f4f" ) --[[ @ 0]]

CoD.DirectorCustomizeClassZM = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorCustomizeClassZM.__defaultWidth = 1920 --[[ @ 0]]
CoD.DirectorCustomizeClassZM.__defaultHeight = 1080 --[[ @ 0]]
CoD.DirectorCustomizeClassZM.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorCustomizeClassZM ) --[[ @ 0]]
	self.id = "DirectorCustomizeClassZM" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local EquippedBGBContainer = CoD.EquippedBGBContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -899, -549, 0.5, 0.5, -289, 61 ) --[[ @ 0]]
	EquippedBGBContainer:linkToElementModel( self, nil, false, function ( model )
		EquippedBGBContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( EquippedBGBContainer ) --[[ @ 0]]
	self.EquippedBGBContainer = EquippedBGBContainer --[[ @ 0]]
	
	local PCEquippedBGBContainer = nil --[[ @ 0]]
	
	PCEquippedBGBContainer = CoD.PC_EquippedBGBContainer.new( f1_arg0, f1_arg1, 0.5, 0.5, -795, -668, 0.5, 0.5, -334, 114 ) --[[ @ 0]]
	PCEquippedBGBContainer:linkToElementModel( self, nil, false, function ( model )
		PCEquippedBGBContainer:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PCEquippedBGBContainer ) --[[ @ 0]]
	self.PCEquippedBGBContainer = PCEquippedBGBContainer --[[ @ 0]]
	
	local startWeapon = CoD.LoadoutClassItemZombie.new( f1_arg0, f1_arg1, 0.5, 0.5, 622, 922, 0.5, 0.5, 56.5, 198.5 ) --[[ @ 0]]
	startWeapon.LoadoutClassItemContainerZombie.loadoutName:setText( LocalizeToUpperString( @"hash_4B489D5E5A067675" ) ) --[[ @ 0]]
	startWeapon:linkToElementModel( self, "primary", false, function ( model )
		startWeapon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	startWeapon:registerEventHandler( "gain_focus", function ( element, event )
		local f5_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f5_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f5_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f5_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( startWeapon, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "ZMStartWeaponSelect", self, "zmStartWeapon" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( startWeapon ) --[[ @ 0]]
	self.startWeapon = startWeapon --[[ @ 0]]
	
	local primarygrenade = CoD.LoadoutClassItemZombie.new( f1_arg0, f1_arg1, 0.5, 0.5, 622, 922, 0.5, 0.5, -111, 32 ) --[[ @ 0]]
	primarygrenade.LoadoutClassItemContainerZombie.loadoutName:setText( LocalizeToUpperString( @"hash_16933F4D2B4D95C9" ) ) --[[ @ 0]]
	primarygrenade:linkToElementModel( self, "primarygrenade", false, function ( model )
		primarygrenade:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	primarygrenade:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( primarygrenade, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "ZMEquipmentSelect", self, "primarygrenade" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( primarygrenade ) --[[ @ 0]]
	self.primarygrenade = primarygrenade --[[ @ 0]]
	
	local specialWeapon = CoD.LoadoutClassItemZombie.new( f1_arg0, f1_arg1, 0.5, 0.5, 622, 922, 0.5, 0.5, -333, -133 ) --[[ @ 0]]
	specialWeapon.LoadoutClassItemContainerZombie.itemImage:setScale( 1.2, 1.2 ) --[[ @ 0]]
	specialWeapon.LoadoutClassItemContainerZombie.loadoutName:setText( LocalizeToUpperString( @"hash_20987AAEBF5D492B" ) ) --[[ @ 0]]
	specialWeapon:linkToElementModel( self, "herogadget", false, function ( model )
		specialWeapon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	specialWeapon:registerEventHandler( "gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f13_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f13_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( specialWeapon, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "ZMSpecialWeaponSelect", self, "herogadget" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	self:addElement( specialWeapon ) --[[ @ 0]]
	self.specialWeapon = specialWeapon --[[ @ 0]]
	
	local ZMTallismanStatusButton = CoD.ZMTalismanStatusButton.new( f1_arg0, f1_arg1, 0.5, 0.5, -774, -684, 0.5, 0.5, 269.5, 359.5 ) --[[ @ 0]]
	ZMTallismanStatusButton:linkToElementModel( self, "talisman1", false, function ( model )
		ZMTallismanStatusButton:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local ZMTalismanEquipLine = ZMTallismanStatusButton --[[ @ 0]]
	local PerkAltars = ZMTallismanStatusButton.subscribeToModel --[[ @ 0]]
	local LabelWeapons = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PerkAltars( ZMTalismanEquipLine, LabelWeapons["lobbyRoot.lobbyNetworkMode"], function ( f17_arg0, f17_arg1 )
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f17_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ZMTalismanEquipLine = ZMTallismanStatusButton --[[ @ 0]]
	PerkAltars = ZMTallismanStatusButton.subscribeToModel --[[ @ 0]]
	LabelWeapons = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PerkAltars( ZMTalismanEquipLine, LabelWeapons["lobbyRoot.lobbyNav"], function ( f18_arg0, f18_arg1 )
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f18_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ZMTallismanStatusButton:linkToElementModel( ZMTallismanStatusButton, "itemIndex", true, function ( model, f19_arg1 )
		CoD.Menu.UpdateButtonShownState( f19_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f19_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ZMTallismanStatusButton:appendEventHandler( "input_source_changed", function ( f20_arg0, f20_arg1 )
		f20_arg1.menu = f20_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f20_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ZMTalismanEquipLine = ZMTallismanStatusButton --[[ @ 0]]
	PerkAltars = ZMTallismanStatusButton.subscribeToModel --[[ @ 0]]
	LabelWeapons = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	PerkAltars( ZMTalismanEquipLine, LabelWeapons.LastInput, function ( f21_arg0, f21_arg1 )
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f21_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ZMTallismanStatusButton:registerEventHandler( "gain_focus", function ( element, event )
		local f22_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f22_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f22_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		return f22_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ZMTallismanStatusButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsLive() then
			CoD.CACUtility.OpenCACOverlay( self, menu, controller, "ZMTalismanSelect", self, "talisman1" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsLive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ZMTallismanStatusButton, f1_arg1, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], "ui_remove", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoD.CACUtility.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) and IsLive() then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoD.CACUtility.EmptyItemIndex ) and IsMouseOrKeyboard( controller ) and IsLive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_6A86619565BE54DB"], @"hash_1679ACA6FFC6C8F3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( ZMTallismanStatusButton, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoD.CACUtility.EmptyItemIndex ) and IsGamepad( controller ) and IsLive() then
			CoD.CACUtility.UnequipItem( controller, menu, element ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( element, controller, "itemIndex", CoD.CACUtility.EmptyItemIndex ) and IsGamepad( controller ) and IsLive() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_1679ACA6FFC6C8F3", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	ZMTallismanStatusButton:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_1679ACA6FFC6C8F3", function ( f29_arg0, f29_arg1, f29_arg2, f29_arg3 )
		if not CoD.ModelUtility.IsSelfModelValueEqualTo( f29_arg0, f29_arg2, "itemIndex", CoD.CACUtility.EmptyItemIndex ) and IsLive() then
			return function ( f30_arg0, f30_arg1, f30_arg2, f30_arg3 )
				CoD.CACUtility.UnequipItem( f30_arg2, f30_arg1, f30_arg0 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( ZMTallismanStatusButton ) --[[ @ 0]]
	self.ZMTallismanStatusButton = ZMTallismanStatusButton --[[ @ 0]]
	
	PerkAltars = LUI.UIList.new( f1_arg0, f1_arg1, 14, 0, nil, false, false, false, false ) --[[ @ 0]]
	PerkAltars:mergeStateConditions( {
		{
			stateName = "Modifier",
			condition = function ( menu, element, event )
				return IsLastListElement( element )
			end
		}
	} ) --[[ @ 0]]
	PerkAltars:setLeftRight( 0.5, 0.5, -480, 482 ) --[[ @ 0]]
	PerkAltars:setTopBottom( 0.5, 0.5, -338, 112 ) --[[ @ 0]]
	PerkAltars:setWidgetType( CoD.ZMPerkSlot ) --[[ @ 0]]
	PerkAltars:setHorizontalCount( 4 ) --[[ @ 0]]
	PerkAltars:setSpacing( 14 ) --[[ @ 0]]
	PerkAltars:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	PerkAltars:setDataSource( "ZMEquippedPerks" ) --[[ @ 0]]
	PerkAltars:registerEventHandler( "gain_focus", function ( element, event )
		local f32_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f32_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f32_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		return f32_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( PerkAltars, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.ZMPerkUtility.PerkSlotHighlighted( element, controller ) --[[ @ 0]]
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "ZMPerkSelect", self, "specialty" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	PerkAltars:linkToElementModel( self, "classNum", true, function ( model )
		CoD.GridAndListUtility.UpdateDataSource( PerkAltars, false, false, true ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( PerkAltars ) --[[ @ 0]]
	self.PerkAltars = PerkAltars --[[ @ 0]]
	
	ZMTalismanEquipLine = CoD.ZMTalismanEquipLine.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	ZMTalismanEquipLine:linkToElementModel( self, "talisman1", false, function ( model )
		ZMTalismanEquipLine:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ZMTalismanEquipLine ) --[[ @ 0]]
	self.ZMTalismanEquipLine = ZMTalismanEquipLine --[[ @ 0]]
	
	LabelWeapons = LUI.UIText.new( 0.5, 0.5, 625, 825, 0.5, 0.5, -377, -356 ) --[[ @ 0]]
	LabelWeapons:setRGB( 0.58, 0.86, 1 ) --[[ @ 0]]
	LabelWeapons:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_358AE0822C5041FC" ) ) --[[ @ 0]]
	LabelWeapons:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	LabelWeapons:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	LabelWeapons:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	LabelWeapons:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LabelWeapons:setShaderVector( 2, 0.2, 0.3, 1, 0.3 ) --[[ @ 0]]
	LabelWeapons:setLetterSpacing( 4 ) --[[ @ 0]]
	LabelWeapons:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	LabelWeapons:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( LabelWeapons ) --[[ @ 0]]
	self.LabelWeapons = LabelWeapons --[[ @ 0]]
	
	local LabelPerks = LUI.UIText.new( 0.5, 0.5, -481, -281, 0.5, 0.5, -377, -356 ) --[[ @ 0]]
	LabelPerks:setRGB( 0.58, 0.86, 1 ) --[[ @ 0]]
	LabelPerks:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5FD7640D13C9158C" ) ) --[[ @ 0]]
	LabelPerks:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	LabelPerks:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	LabelPerks:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	LabelPerks:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LabelPerks:setShaderVector( 2, 0.2, 0.3, 1, 0.3 ) --[[ @ 0]]
	LabelPerks:setLetterSpacing( 4 ) --[[ @ 0]]
	LabelPerks:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	LabelPerks:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( LabelPerks ) --[[ @ 0]]
	self.LabelPerks = LabelPerks --[[ @ 0]]
	
	local LabelElixirs = LUI.UIText.new( 0.5, 0.5, -824, -624, 0.5, 0.5, -377, -356 ) --[[ @ 0]]
	LabelElixirs:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	LabelElixirs:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_10A83642C38DB951" ) ) --[[ @ 0]]
	LabelElixirs:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	LabelElixirs:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	LabelElixirs:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	LabelElixirs:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LabelElixirs:setShaderVector( 2, 0.2, 0.3, 1, 0.3 ) --[[ @ 0]]
	LabelElixirs:setLetterSpacing( 4 ) --[[ @ 0]]
	LabelElixirs:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	LabelElixirs:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( LabelElixirs ) --[[ @ 0]]
	self.LabelElixirs = LabelElixirs --[[ @ 0]]
	
	local LabelTalisman = LUI.UIText.new( 0.5, 0.5, -824, -624, 0.5, 0.5, 181, 202 ) --[[ @ 0]]
	LabelTalisman:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	LabelTalisman:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_38C0FE859EC263E0" ) ) --[[ @ 0]]
	LabelTalisman:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	LabelTalisman:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	LabelTalisman:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	LabelTalisman:setShaderVector( 1, 0, 0, 0, 0 ) --[[ @ 0]]
	LabelTalisman:setShaderVector( 2, 0.2, 0.3, 1, 0.3 ) --[[ @ 0]]
	LabelTalisman:setLetterSpacing( 4 ) --[[ @ 0]]
	LabelTalisman:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	LabelTalisman:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( LabelTalisman ) --[[ @ 0]]
	self.LabelTalisman = LabelTalisman --[[ @ 0]]
	
	local ChooseClassLockedOverlay = CoD.ChooseClassLockedOverlay.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 1, 1, -1080, 0 ) --[[ @ 0]]
	ChooseClassLockedOverlay:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "ZombiesVisible",
			condition = function ( menu, element, event )
				return CoD.CACUtility.IsCurrentClassLocked( menu, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( ChooseClassLockedOverlay, nil, true, function ( model )
		f1_arg0:updateElementState( ChooseClassLockedOverlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( self, nil, false, function ( model )
		ChooseClassLockedOverlay:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ChooseClassLockedOverlay ) --[[ @ 0]]
	self.ChooseClassLockedOverlay = ChooseClassLockedOverlay --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "PublicKeyboard",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 ) and IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "Public",
			condition = function ( menu, element, event )
				return CoD.DirectorUtility.ShowDirectorPublic( f1_arg1 )
			end
		},
		{
			stateName = "DefaultStateKeyboard",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local f1_local14 = self --[[ @ 0]]
	local f1_local15 = self.subscribeToModel --[[ @ 0]]
	local f1_local16 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local15( f1_local14, f1_local16["lobbyRoot.lobbyNav"], function ( f44_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f44_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f45_arg0, f45_arg1 )
		f45_arg1.menu = f45_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f45_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local15 = self.subscribeToModel --[[ @ 0]]
	f1_local16 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local15( f1_local14, f1_local16.LastInput, function ( f46_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f46_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	EquippedBGBContainer.id = "EquippedBGBContainer" --[[ @ 0]]
	if CoD.isPC then
		PCEquippedBGBContainer.id = "PCEquippedBGBContainer" --[[ @ 0]]
	end
	startWeapon.id = "startWeapon" --[[ @ 0]]
	primarygrenade.id = "primarygrenade" --[[ @ 0]]
	specialWeapon.id = "specialWeapon" --[[ @ 0]]
	ZMTallismanStatusButton.id = "ZMTallismanStatusButton" --[[ @ 0]]
	PerkAltars.id = "PerkAltars" --[[ @ 0]]
	if CoD.isPC then
		ChooseClassLockedOverlay.id = "ChooseClassLockedOverlay" --[[ @ 0]]
	end
	self.__defaultFocus = PerkAltars --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local15 = self --[[ @ 0]]
	if IsPC() and AlwaysFalse() then
		CoD.PCUtility.SetLoadoutKeypadShortcut( f1_arg0, self, f1_arg1, self.customClasssList ) --[[ @ 0]]
	end
	f1_local15 = ZMTallismanStatusButton --[[ @ 0]]
	if IsPC() then
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local15, f1_arg1, "name", "", "" ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.DirectorCustomizeClassZM.__resetProperties = function ( f47_arg0 )
	f47_arg0.PCEquippedBGBContainer:completeAnimation() --[[ @ 0]]
	f47_arg0.EquippedBGBContainer:completeAnimation() --[[ @ 0]]
	f47_arg0.PCEquippedBGBContainer:setAlpha( 1 ) --[[ @ 0]]
	f47_arg0.EquippedBGBContainer:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorCustomizeClassZM.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f48_arg0.PCEquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f48_arg0.PCEquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.PCEquippedBGBContainer ) --[[ @ 0]]
		end
	},
	PublicKeyboard = {
		DefaultClip = function ( f49_arg0, f49_arg1 )
			f49_arg0:__resetProperties() --[[ @ 0]]
			f49_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f49_arg0.EquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f49_arg0.EquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.EquippedBGBContainer ) --[[ @ 0]]
		end
	},
	Public = {
		DefaultClip = function ( f50_arg0, f50_arg1 )
			f50_arg0:__resetProperties() --[[ @ 0]]
			f50_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f50_arg0.PCEquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f50_arg0.PCEquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f50_arg0.clipFinished( f50_arg0.PCEquippedBGBContainer ) --[[ @ 0]]
		end
	},
	DefaultStateKeyboard = {
		DefaultClip = function ( f51_arg0, f51_arg1 )
			f51_arg0:__resetProperties() --[[ @ 0]]
			f51_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f51_arg0.EquippedBGBContainer:completeAnimation() --[[ @ 0]]
			f51_arg0.EquippedBGBContainer:setAlpha( 0 ) --[[ @ 0]]
			f51_arg0.clipFinished( f51_arg0.EquippedBGBContainer ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorCustomizeClassZM.__onClose = function ( f52_arg0 )
	f52_arg0.EquippedBGBContainer:close() --[[ @ 0]]
	f52_arg0.PCEquippedBGBContainer:close() --[[ @ 0]]
	f52_arg0.startWeapon:close() --[[ @ 0]]
	f52_arg0.primarygrenade:close() --[[ @ 0]]
	f52_arg0.specialWeapon:close() --[[ @ 0]]
	f52_arg0.ZMTallismanStatusButton:close() --[[ @ 0]]
	f52_arg0.PerkAltars:close() --[[ @ 0]]
	f52_arg0.ZMTalismanEquipLine:close() --[[ @ 0]]
	f52_arg0.ChooseClassLockedOverlay:close() --[[ @ 0]]
end
 --[[ @ 0]]
