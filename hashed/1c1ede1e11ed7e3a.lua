-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:2138e9e2c9b4c476" ) --[[ @ 0]]
require( "x64:579177e5d8aa2dec" ) --[[ @ 0]]
require( "x64:3c6d39e92d5c23e7" ) --[[ @ 0]]
require( "x64:35a605d9025cfe2d" ) --[[ @ 0]]

CoD.WarzoneKills = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneKills.__defaultWidth = 548 --[[ @ 0]]
CoD.WarzoneKills.__defaultHeight = 189 --[[ @ 0]]
CoD.WarzoneKills.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneKills ) --[[ @ 0]]
	self.id = "WarzoneKills" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Obituary = CoD.WZObituary.new( f1_arg0, f1_arg1, 1, 1, -592, -92, 0, 0, 48.5, 258.5 ) --[[ @ 0]]
	self:addElement( Obituary ) --[[ @ 0]]
	self.Obituary = Obituary --[[ @ 0]]
	
	local DeathCamLabel = CoD.WarzoneDeathCamLabel.new( f1_arg0, f1_arg1, 1, 1, -259, -83, 0, 0, 49.5, 89.5 ) --[[ @ 0]]
	self:addElement( DeathCamLabel ) --[[ @ 0]]
	self.DeathCamLabel = DeathCamLabel --[[ @ 0]]
	
	local PlayersAndKills = CoD.WarzoneKillsInternal.new( f1_arg0, f1_arg1, 0, 0, 312, 468, 0, 0, 0, 44 ) --[[ @ 0]]
	PlayersAndKills:setAlpha( 0 ) --[[ @ 0]]
	PlayersAndKills:subscribeToGlobalModel( f1_arg1, "PerController", "predictedClientModel", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			PlayersAndKills:setModel( f2_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PlayersAndKills ) --[[ @ 0]]
	self.PlayersAndKills = PlayersAndKills --[[ @ 0]]
	
	local f1_local4 = nil --[[ @ 0]]
	f1_local4 = LUI.UIElement.createFake() --[[ @ 0]]
	self.WarzoneGameStatusIndicatorDisplay = f1_local4 --[[ @ 0]]
	local PCWarzoneGameStatusIndicatorDisplay = nil --[[ @ 0]]
	
	PCWarzoneGameStatusIndicatorDisplay = CoD.WarzoneGameStatusIndicatorDisplay.new( f1_arg0, f1_arg1, 0, 0, 85, 430, 0, 0, 0, 44 ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay:mergeStateConditions( {
		{
			stateName = "Right",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		},
		{
			stateName = "Left",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsRightSolo:setFilter( function ( f5_arg0 )
		return f5_arg0.type:get() == "gameInformation"
	end ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsRightSolo:setDataSource( "WarzoneGameStatusIndicatorListHUDRight" ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsLeftSolo:setFilter( function ( f6_arg0 )
		return f6_arg0.type:get() == "hudGameStat"
	end ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay.GameStatusIndicatorsLeftSolo:setDataSource( "WarzoneGameStatusIndicatorListHUDRight" ) --[[ @ 0]]
	PCWarzoneGameStatusIndicatorDisplay.GameStatusIndicators:setDataSource( "WarzoneGameStatusIndicatorListHUDRight" ) --[[ @ 0]]
	self:addElement( PCWarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
	self.PCWarzoneGameStatusIndicatorDisplay = PCWarzoneGameStatusIndicatorDisplay --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "HiddenForDemoPlayback",
			condition = function ( menu, element, event )
				local f7_local0 = IsDemoPlaying() --[[ @ 0]]
				if f7_local0 then
					f7_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"] ) --[[ @ 0]]
					if not f7_local0 then
						f7_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"] ) --[[ @ 0]]
					end
				end
				return f7_local0
			end
		},
		{
			stateName = "Killcam",
			condition = function ( menu, element, event )
				local f8_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"] ) --[[ @ 0]]
				if not f8_local0 then
					f8_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"] ) --[[ @ 0]]
					if not f8_local0 then
						f8_local0 = Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"] ) --[[ @ 0]]
					end
				end
				return f8_local0
			end
		},
		{
			stateName = "HiddenObituary",
			condition = function ( menu, element, event )
				return Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) and CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideObituaryUI", "warzoneHideObituary" )
			end
		},
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) and not CoD.WZUtility.IsPcInventoryOpen( f1_arg1 )
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"] ) and CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideObituaryUI", "warzoneHideObituary" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local6 = self --[[ @ 0]]
	local f1_local7 = self.subscribeToModel --[[ @ 0]]
	local f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"]], function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4B8E9B69F4B87954"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"]], function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_5D3ABF9A2753CE40"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"]], function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_11CDCB451655ABCF"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]], function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_68A5E996D4528DA2"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"]], function ( f16_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_54828BED794DA0A5"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]], function ( f17_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_7ADC477DDE486DD7"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.PlayerSettingsUpdate, function ( f18_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f18_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f19_arg0, f19_arg1 )
		f19_arg1.menu = f19_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f19_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.LastInput, function ( f20_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f20_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local7 = self.subscribeToModel --[[ @ 0]]
	f1_local8 = DataSources.WarzoneInventory.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local7( f1_local6, f1_local8.isOpen, function ( f21_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f21_arg0:get(),
			modelName = "isOpen"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local4.id = "WarzoneGameStatusIndicatorDisplay" --[[ @ 0]]
	if CoD.isPC then
		PCWarzoneGameStatusIndicatorDisplay.id = "PCWarzoneGameStatusIndicatorDisplay" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local7 = self --[[ @ 0]]
	f1_local7 = PCWarzoneGameStatusIndicatorDisplay --[[ @ 0]]
	if IsPC() then
		CoD.HUDUtility.SetUseCylinderMapping( f1_local7, false ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.WarzoneKills.__resetProperties = function ( f22_arg0 )
	f22_arg0.Obituary:completeAnimation() --[[ @ 0]]
	f22_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
	f22_arg0.PlayersAndKills:completeAnimation() --[[ @ 0]]
	f22_arg0.WarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
	f22_arg0.PCWarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
	f22_arg0.Obituary:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.DeathCamLabel:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.PlayersAndKills:setAlpha( 0 ) --[[ @ 0]]
	f22_arg0.WarzoneGameStatusIndicatorDisplay:setAlpha( 1 ) --[[ @ 0]]
	f22_arg0.PCWarzoneGameStatusIndicatorDisplay:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneKills.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f23_arg0.Obituary:completeAnimation() --[[ @ 0]]
			f23_arg0.Obituary:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.Obituary ) --[[ @ 0]]
			f23_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
			f23_arg0.DeathCamLabel:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.DeathCamLabel ) --[[ @ 0]]
			f23_arg0.PlayersAndKills:completeAnimation() --[[ @ 0]]
			f23_arg0.PlayersAndKills:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.PlayersAndKills ) --[[ @ 0]]
			f23_arg0.WarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f23_arg0.WarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.WarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
		end
	},
	HiddenForDemoPlayback = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f24_arg0.Obituary:completeAnimation() --[[ @ 0]]
			f24_arg0.Obituary:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.Obituary ) --[[ @ 0]]
			f24_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
			f24_arg0.DeathCamLabel:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.DeathCamLabel ) --[[ @ 0]]
			f24_arg0.WarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f24_arg0.WarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.WarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
			f24_arg0.PCWarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f24_arg0.PCWarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.PCWarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
		end
	},
	Killcam = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f25_arg0.Obituary:completeAnimation() --[[ @ 0]]
			f25_arg0.Obituary:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.Obituary ) --[[ @ 0]]
			f25_arg0.WarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f25_arg0.WarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.WarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
		end
	},
	HiddenObituary = {
		DefaultClip = function ( f26_arg0, f26_arg1 )
			f26_arg0:__resetProperties() --[[ @ 0]]
			f26_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f26_arg0.Obituary:completeAnimation() --[[ @ 0]]
			f26_arg0.Obituary:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.Obituary ) --[[ @ 0]]
			f26_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
			f26_arg0.DeathCamLabel:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.DeathCamLabel ) --[[ @ 0]]
			f26_arg0.WarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f26_arg0.WarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.WarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
			f26_arg0.PCWarzoneGameStatusIndicatorDisplay:completeAnimation() --[[ @ 0]]
			f26_arg0.PCWarzoneGameStatusIndicatorDisplay:setAlpha( 0 ) --[[ @ 0]]
			f26_arg0.clipFinished( f26_arg0.PCWarzoneGameStatusIndicatorDisplay ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f27_arg0, f27_arg1 )
			f27_arg0:__resetProperties() --[[ @ 0]]
			f27_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f27_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
			f27_arg0.DeathCamLabel:setAlpha( 0 ) --[[ @ 0]]
			f27_arg0.clipFinished( f27_arg0.DeathCamLabel ) --[[ @ 0]]
		end
	},
	Hidden = {
		DefaultClip = function ( f28_arg0, f28_arg1 )
			f28_arg0:__resetProperties() --[[ @ 0]]
			f28_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f28_arg0.Obituary:completeAnimation() --[[ @ 0]]
			f28_arg0.Obituary:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.Obituary ) --[[ @ 0]]
			f28_arg0.DeathCamLabel:completeAnimation() --[[ @ 0]]
			f28_arg0.DeathCamLabel:setAlpha( 0 ) --[[ @ 0]]
			f28_arg0.clipFinished( f28_arg0.DeathCamLabel ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneKills.__onClose = function ( f29_arg0 )
	f29_arg0.Obituary:close() --[[ @ 0]]
	f29_arg0.DeathCamLabel:close() --[[ @ 0]]
	f29_arg0.PlayersAndKills:close() --[[ @ 0]]
	f29_arg0.WarzoneGameStatusIndicatorDisplay:close() --[[ @ 0]]
	f29_arg0.PCWarzoneGameStatusIndicatorDisplay:close() --[[ @ 0]]
end
 --[[ @ 0]]
