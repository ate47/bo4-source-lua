-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
CoD.ReticleColorSlot = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ReticleColorSlot.__defaultWidth = 110 --[[ @ 0]]
CoD.ReticleColorSlot.__defaultHeight = 80 --[[ @ 0]]
CoD.ReticleColorSlot.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ReticleColorSlot ) --[[ @ 0]]
	self.id = "ReticleColorSlot" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Backing:setAlpha( 0.2 ) --[[ @ 0]]
	self:addElement( Backing ) --[[ @ 0]]
	self.Backing = Backing --[[ @ 0]]
	
	local Image = LUI.UIImage.new( 0, 0, 15, 95, 0, 0, 0, 80 ) --[[ @ 0]]
	Image:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	Image:setShaderVector( 0, 0.5, 0.5, 0, 0 ) --[[ @ 0]]
	Image:setShaderVector( 1, 1, 1, 0, 0 ) --[[ @ 0]]
	Image:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	Image:linkToElementModel( self, "image", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			Image:setImage( RegisterImage( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Image ) --[[ @ 0]]
	self.Image = Image --[[ @ 0]]
	
	local EquippedMarkerBG = LUI.UIImage.new( 1, 1, -35, 9, 0, 0, -9, 35 ) --[[ @ 0]]
	EquippedMarkerBG:setAlpha( 0 ) --[[ @ 0]]
	EquippedMarkerBG:setZoom( 4 ) --[[ @ 0]]
	EquippedMarkerBG:setImage( RegisterImage( @"uie_ui_menu_cac_equipped_marker_bg" ) ) --[[ @ 0]]
	EquippedMarkerBG:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( EquippedMarkerBG ) --[[ @ 0]]
	self.EquippedMarkerBG = EquippedMarkerBG --[[ @ 0]]
	
	local EquippedMarkerTick = LUI.UIImage.new( 1, 1, -35, 9, 0, 0, -9, 35 ) --[[ @ 0]]
	EquippedMarkerTick:setAlpha( 0 ) --[[ @ 0]]
	EquippedMarkerTick:setZoom( 4 ) --[[ @ 0]]
	EquippedMarkerTick:setImage( RegisterImage( @"uie_ui_menu_cac_equipped_marker_tick" ) ) --[[ @ 0]]
	self:addElement( EquippedMarkerTick ) --[[ @ 0]]
	self.EquippedMarkerTick = EquippedMarkerTick --[[ @ 0]]
	
	local LockedX = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	LockedX:setRGB( ColorSet.Title.r, ColorSet.Title.g, ColorSet.Title.b ) --[[ @ 0]]
	LockedX:setAlpha( 0 ) --[[ @ 0]]
	LockedX:setImage( RegisterImage( @"uie_spawnselect_crosshair_auto" ) ) --[[ @ 0]]
	self:addElement( LockedX ) --[[ @ 0]]
	self.LockedX = LockedX --[[ @ 0]]
	
	local LockedIcon = LUI.UIImage.new( 0.5, 0.5, -15, 15, 0.5, 0.5, -15, 15 ) --[[ @ 0]]
	LockedIcon:setAlpha( 0 ) --[[ @ 0]]
	LockedIcon:setImage( RegisterImage( @"uie_icon_locks_lock_01" ) ) --[[ @ 0]]
	self:addElement( LockedIcon ) --[[ @ 0]]
	self.LockedIcon = LockedIcon --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Locked",
			condition = function ( menu, element, event )
				return CoD.WeaponOptionsUtility.IsItemWeaponOptionLocked( menu, element, f1_arg1 )
			end
		},
		{
			stateName = "Previewing",
			condition = function ( menu, element, event )
				return CoD.WeaponOptionsUtility.IsReticlePreviewing( f1_arg1, element, menu )
			end
		},
		{
			stateName = "KBM",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "itemIndex", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "itemIndex"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f7_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local7 = self --[[ @ 0]]
	local f1_local8 = self.subscribeToModel --[[ @ 0]]
	local f1_local9 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local8( f1_local7, f1_local9.LastInput, function ( f8_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ReticleColorSlot.__resetProperties = function ( f9_arg0 )
	f9_arg0.EquippedMarkerTick:completeAnimation() --[[ @ 0]]
	f9_arg0.EquippedMarkerBG:completeAnimation() --[[ @ 0]]
	f9_arg0.Backing:completeAnimation() --[[ @ 0]]
	f9_arg0.LockedX:completeAnimation() --[[ @ 0]]
	f9_arg0.LockedIcon:completeAnimation() --[[ @ 0]]
	f9_arg0.Image:completeAnimation() --[[ @ 0]]
	f9_arg0.EquippedMarkerTick:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.EquippedMarkerBG:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.Backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	f9_arg0.Backing:setAlpha( 0.2 ) --[[ @ 0]]
	f9_arg0.LockedX:setRGB( ColorSet.Title.r, ColorSet.Title.g, ColorSet.Title.b ) --[[ @ 0]]
	f9_arg0.LockedX:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.LockedIcon:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.LockedIcon:setAlpha( 0 ) --[[ @ 0]]
	f9_arg0.Image:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f9_arg0.Image:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ReticleColorSlot.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Active = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f11_arg0.Backing:completeAnimation() --[[ @ 0]]
			f11_arg0.Backing:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Backing ) --[[ @ 0]]
			f11_arg0.EquippedMarkerBG:completeAnimation() --[[ @ 0]]
			f11_arg0.EquippedMarkerBG:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.EquippedMarkerBG ) --[[ @ 0]]
			f11_arg0.EquippedMarkerTick:completeAnimation() --[[ @ 0]]
			f11_arg0.EquippedMarkerTick:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.EquippedMarkerTick ) --[[ @ 0]]
		end
	},
	Locked = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f12_arg0.Image:completeAnimation() --[[ @ 0]]
			f12_arg0.Image:setRGB( 0.29, 0.29, 0.29 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Image ) --[[ @ 0]]
			f12_arg0.LockedX:completeAnimation() --[[ @ 0]]
			f12_arg0.LockedX:setRGB( 0.29, 0.29, 0.29 ) --[[ @ 0]]
			f12_arg0.LockedX:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.LockedX ) --[[ @ 0]]
			f12_arg0.LockedIcon:completeAnimation() --[[ @ 0]]
			f12_arg0.LockedIcon:setRGB( 0.29, 0.29, 0.29 ) --[[ @ 0]]
			f12_arg0.LockedIcon:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.LockedIcon ) --[[ @ 0]]
		end
	},
	Previewing = {
		DefaultClip = function ( f13_arg0, f13_arg1 )
			f13_arg0:__resetProperties() --[[ @ 0]]
			f13_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f13_arg0.Backing:completeAnimation() --[[ @ 0]]
			f13_arg0.Backing:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.Backing ) --[[ @ 0]]
			f13_arg0.Image:completeAnimation() --[[ @ 0]]
			f13_arg0.Image:setAlpha( 0 ) --[[ @ 0]]
			f13_arg0.clipFinished( f13_arg0.Image ) --[[ @ 0]]
		end
	},
	KBM = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Active = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f15_arg0.Backing:completeAnimation() --[[ @ 0]]
			f15_arg0.Backing:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.Backing ) --[[ @ 0]]
			f15_arg0.EquippedMarkerBG:completeAnimation() --[[ @ 0]]
			f15_arg0.EquippedMarkerBG:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.EquippedMarkerBG ) --[[ @ 0]]
			f15_arg0.EquippedMarkerTick:completeAnimation() --[[ @ 0]]
			f15_arg0.EquippedMarkerTick:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.EquippedMarkerTick ) --[[ @ 0]]
		end,
		Focus = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f16_arg0.Backing:completeAnimation() --[[ @ 0]]
			f16_arg0.Backing:setRGB( 0.41, 0.41, 0.41 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Backing ) --[[ @ 0]]
			f16_arg0.LockedIcon:completeAnimation() --[[ @ 0]]
			f16_arg0.LockedIcon:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.LockedIcon ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ReticleColorSlot.__onClose = function ( f17_arg0 )
	f17_arg0.Image:close() --[[ @ 0]]
end
 --[[ @ 0]]
