-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:34
require( "x64:14173a91ca2044e4" ) --[[ @ 0]]
require( "x64:6301dadc9491523e" ) --[[ @ 0]]
require( "x64:7fbc104452b6a2c6" ) --[[ @ 0]]
require( "x64:2072900fb9775b37" ) --[[ @ 0]]
require( "x64:2adb728c3ce7a4d3" ) --[[ @ 0]]
require( "x64:329d84fa68c2a9ef" ) --[[ @ 0]]

CoD.WarzoneInventory = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WarzoneInventory.__defaultWidth = 800 --[[ @ 0]]
CoD.WarzoneInventory.__defaultHeight = 100 --[[ @ 0]]
CoD.WarzoneInventory.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WarzoneInventory ) --[[ @ 0]]
	self.id = "WarzoneInventory" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local HintTexts = CoD.WarzoneInventoryHintItems.new( f1_arg0, f1_arg1, 0, 0, 369, 469, 0, 0, -23, 77 ) --[[ @ 0]]
	self:addElement( HintTexts ) --[[ @ 0]]
	self.HintTexts = HintTexts --[[ @ 0]]
	
	local RightConsumed = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 3, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	RightConsumed:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return IsPC() and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "endStartFraction", 0 )
			end
		}
	} ) --[[ @ 0]]
	RightConsumed:linkToElementModel( RightConsumed, "endStartFraction", true, function ( model )
		f1_arg0:updateElementState( RightConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "endStartFraction"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumed:linkToElementModel( RightConsumed, "disabled", true, function ( model )
		f1_arg0:updateElementState( RightConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumed:linkToElementModel( RightConsumed, "notAvailable", true, function ( model )
		f1_arg0:updateElementState( RightConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "notAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumed:setLeftRight( 0, 0, 472, 834 ) --[[ @ 0]]
	RightConsumed:setTopBottom( 0, 0, -8, 62 ) --[[ @ 0]]
	RightConsumed:setWidgetType( CoD.WarzoneQuickInventoryMenuItemSmall ) --[[ @ 0]]
	RightConsumed:setHorizontalCount( 5 ) --[[ @ 0]]
	RightConsumed:setSpacing( 3 ) --[[ @ 0]]
	RightConsumed:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	RightConsumed:setDataSource( "WarzoneConsumed" ) --[[ @ 0]]
	self:addElement( RightConsumed ) --[[ @ 0]]
	self.RightConsumed = RightConsumed --[[ @ 0]]
	
	local RightConsumedHidden = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 3, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	RightConsumedHidden:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return IsPC() and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "endStartFraction", 0 )
			end
		}
	} ) --[[ @ 0]]
	RightConsumedHidden:linkToElementModel( RightConsumedHidden, "endStartFraction", true, function ( model )
		f1_arg0:updateElementState( RightConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "endStartFraction"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumedHidden:linkToElementModel( RightConsumedHidden, "disabled", true, function ( model )
		f1_arg0:updateElementState( RightConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumedHidden:linkToElementModel( RightConsumedHidden, "notAvailable", true, function ( model )
		f1_arg0:updateElementState( RightConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "notAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumedHidden:setLeftRight( 0, 0, 423, 785 ) --[[ @ 0]]
	RightConsumedHidden:setTopBottom( 0, 0, -8, 62 ) --[[ @ 0]]
	RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
	RightConsumedHidden:setWidgetType( CoD.WarzoneQuickInventoryMenuItemSmall ) --[[ @ 0]]
	RightConsumedHidden:setHorizontalCount( 5 ) --[[ @ 0]]
	RightConsumedHidden:setSpacing( 3 ) --[[ @ 0]]
	RightConsumedHidden:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	RightConsumedHidden:setDataSource( "WarzoneConsumed" ) --[[ @ 0]]
	self:addElement( RightConsumedHidden ) --[[ @ 0]]
	self.RightConsumedHidden = RightConsumedHidden --[[ @ 0]]
	
	local LeftConsumed = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 3, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	LeftConsumed:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return IsPC() and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "endStartFraction", 0 )
			end
		}
	} ) --[[ @ 0]]
	LeftConsumed:linkToElementModel( LeftConsumed, "endStartFraction", true, function ( model )
		f1_arg0:updateElementState( LeftConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "endStartFraction"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumed:linkToElementModel( LeftConsumed, "disabled", true, function ( model )
		f1_arg0:updateElementState( LeftConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumed:linkToElementModel( LeftConsumed, "notAvailable", true, function ( model )
		f1_arg0:updateElementState( LeftConsumed, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "notAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumed:setLeftRight( 1, 1, -795, -433 ) --[[ @ 0]]
	LeftConsumed:setTopBottom( 0, 0, -8, 62 ) --[[ @ 0]]
	LeftConsumed:setWidgetType( CoD.WarzoneQuickInventoryMenuItemSmall ) --[[ @ 0]]
	LeftConsumed:setHorizontalCount( 5 ) --[[ @ 0]]
	LeftConsumed:setSpacing( 3 ) --[[ @ 0]]
	LeftConsumed:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	LeftConsumed:setDataSource( "WarzoneConsumed" ) --[[ @ 0]]
	self:addElement( LeftConsumed ) --[[ @ 0]]
	self.LeftConsumed = LeftConsumed --[[ @ 0]]
	
	local LeftConsumedHidden = LUI.GridLayout.new( f1_arg0, f1_arg1, false, 0, 0, 3, 0, nil, nil, false, false, false, false ) --[[ @ 0]]
	LeftConsumedHidden:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return IsPC() and CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "endStartFraction", 0 )
			end
		}
	} ) --[[ @ 0]]
	LeftConsumedHidden:linkToElementModel( LeftConsumedHidden, "endStartFraction", true, function ( model )
		f1_arg0:updateElementState( LeftConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "endStartFraction"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumedHidden:linkToElementModel( LeftConsumedHidden, "disabled", true, function ( model )
		f1_arg0:updateElementState( LeftConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "disabled"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumedHidden:linkToElementModel( LeftConsumedHidden, "notAvailable", true, function ( model )
		f1_arg0:updateElementState( LeftConsumedHidden, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "notAvailable"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LeftConsumedHidden:setLeftRight( 1, 1, -743, -381 ) --[[ @ 0]]
	LeftConsumedHidden:setTopBottom( 0, 0, -8, 62 ) --[[ @ 0]]
	LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
	LeftConsumedHidden:setWidgetType( CoD.WarzoneQuickInventoryMenuItemSmall ) --[[ @ 0]]
	LeftConsumedHidden:setHorizontalCount( 5 ) --[[ @ 0]]
	LeftConsumedHidden:setSpacing( 3 ) --[[ @ 0]]
	LeftConsumedHidden:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	LeftConsumedHidden:setDataSource( "WarzoneConsumed" ) --[[ @ 0]]
	self:addElement( LeftConsumedHidden ) --[[ @ 0]]
	self.LeftConsumedHidden = LeftConsumedHidden --[[ @ 0]]
	
	local InventoryEquipmentSmall = CoD.WarzoneContextualExtraItems.new( f1_arg0, f1_arg1, 0, 0, 240.5, 534.5, 0, 0, -112, -16 ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentLarge:setHorizontalCount( 10 ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentLarge:setFilter( function ( f18_arg0 )
		local f18_local0 --[[ @ 0]]
		if f18_arg0.equipped:get() ~= 0 or f18_arg0.availableAction:get() ~= CoD.WZUtility.ItemAvailableAction.CONSUME or f18_arg0.quickEquip:get() ~= 1 then
			f18_local0 = false --[[ @ 0]]
		else
			f18_local0 = true --[[ @ 0]]
		end
		return f18_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentLarge:setDataSource( "WarzoneInventory" ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentSmall:setHorizontalCount( 10 ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentSmall:setFilter( function ( f19_arg0 )
		local f19_local0 --[[ @ 0]]
		if f19_arg0.equipped:get() ~= 0 or f19_arg0.availableAction:get() ~= CoD.WZUtility.ItemAvailableAction.CONSUME or f19_arg0.quickEquip:get() ~= 1 then
			f19_local0 = false --[[ @ 0]]
		else
			f19_local0 = true --[[ @ 0]]
		end
		return f19_local0
	end ) --[[ @ 0]]
	InventoryEquipmentSmall.InventoryEquipmentSmall:setDataSource( "WarzoneInventory" ) --[[ @ 0]]
	self:addElement( InventoryEquipmentSmall ) --[[ @ 0]]
	self.InventoryEquipmentSmall = InventoryEquipmentSmall --[[ @ 0]]
	
	local QuickLabel = LUI.UIText.new( 0, 0, 319, 519, 0, 0, -22, -4 ) --[[ @ 0]]
	QuickLabel:setText( LocalizeToUpperString( @"hash_5AC24C20650F01A4" ) ) --[[ @ 0]]
	QuickLabel:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	QuickLabel:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_90D57B1E92D39D7" ) ) --[[ @ 0]]
	QuickLabel:setShaderVector( 0, 0.6, 0, 0, 0 ) --[[ @ 0]]
	QuickLabel:setShaderVector( 1, 0.3, 0, 0, 0 ) --[[ @ 0]]
	QuickLabel:setShaderVector( 2, 0, 0, 0, 1 ) --[[ @ 0]]
	QuickLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	QuickLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	QuickLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( QuickLabel ) --[[ @ 0]]
	self.QuickLabel = QuickLabel --[[ @ 0]]
	
	local InventoryPromptImazge = CoD.WarzoneInventoryNag.new( f1_arg0, f1_arg1, 0.5, 0.5, -102.5, 134.5, 0, 0, 58, 95 ) --[[ @ 0]]
	self:addElement( InventoryPromptImazge ) --[[ @ 0]]
	self.InventoryPromptImazge = InventoryPromptImazge --[[ @ 0]]
	
	local QuickLabel3 = CoD.WarzoneInventoryCalloutGestureHintText.new( f1_arg0, f1_arg1, 0, 0, 184, 654, 0, 0, 18, 36 ) --[[ @ 0]]
	self:addElement( QuickLabel3 ) --[[ @ 0]]
	self.QuickLabel3 = QuickLabel3 --[[ @ 0]]
	
	local WarzoneQuickConsumeSlotPC = nil --[[ @ 0]]
	
	WarzoneQuickConsumeSlotPC = CoD.WarzoneQuickConsumeSlotPC.new( f1_arg0, f1_arg1, 0, 0, 355.5, 485.5, 0, 0, -25, 105 ) --[[ @ 0]]
	WarzoneQuickConsumeSlotPC:setScale( 1.07, 1.07 ) --[[ @ 0]]
	self:addElement( WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
	self.WarzoneQuickConsumeSlotPC = WarzoneQuickConsumeSlotPC --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "KeyboardAndMouse",
			condition = function ( menu, element, event )
				local f20_local0 = IsMouseOrKeyboard( f1_arg1 ) --[[ @ 0]]
				if f20_local0 then
					if not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
						f20_local0 = not CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
					else
						f20_local0 = false --[[ @ 0]]
					end
				end
				return f20_local0
			end
		},
		{
			stateName = "KeyboardAndMouseHidden",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		},
		{
			stateName = "InventoryOpenHiddenAllPreference",
			condition = function ( menu, element, event )
				local f22_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f22_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.open", true ) --[[ @ 0]]
					if f22_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f22_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
							if f22_local0 then
								f22_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
							end
						else
							f22_local0 = false --[[ @ 0]]
						end
					end
				else
					f22_local0 = false --[[ @ 0]]
				end
				return f22_local0
			end
		},
		{
			stateName = "InventoryOpenHiddenButtonsPreference",
			condition = function ( menu, element, event )
				local f23_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f23_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.open", true ) --[[ @ 0]]
					if f23_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f23_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
						else
							f23_local0 = false --[[ @ 0]]
						end
					end
				else
					f23_local0 = false --[[ @ 0]]
				end
				return f23_local0
			end
		},
		{
			stateName = "InventoryOpenHiddenPerksPreference",
			condition = function ( menu, element, event )
				local f24_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f24_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.open", true ) --[[ @ 0]]
					if f24_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f24_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
						else
							f24_local0 = false --[[ @ 0]]
						end
					end
				else
					f24_local0 = false --[[ @ 0]]
				end
				return f24_local0
			end
		},
		{
			stateName = "InventoryOpen",
			condition = function ( menu, element, event )
				local f25_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f25_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.open", true ) --[[ @ 0]]
					if f25_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) then
							f25_local0 = not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) --[[ @ 0]]
						else
							f25_local0 = false --[[ @ 0]]
						end
					end
				else
					f25_local0 = false --[[ @ 0]]
				end
				return f25_local0
			end
		},
		{
			stateName = "InventoryVisibleHiddenAllPreference",
			condition = function ( menu, element, event )
				local f26_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f26_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.canUseQuickInventory", true ) --[[ @ 0]]
					if f26_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f26_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
							if f26_local0 then
								f26_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
							end
						else
							f26_local0 = false --[[ @ 0]]
						end
					end
				else
					f26_local0 = false --[[ @ 0]]
				end
				return f26_local0
			end
		},
		{
			stateName = "InventoryVisibleHiddenButtonsPreference",
			condition = function ( menu, element, event )
				local f27_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f27_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.canUseQuickInventory", true ) --[[ @ 0]]
					if f27_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f27_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
						else
							f27_local0 = false --[[ @ 0]]
						end
					end
				else
					f27_local0 = false --[[ @ 0]]
				end
				return f27_local0
			end
		},
		{
			stateName = "InventoryVisibleHiddenPerksPreference",
			condition = function ( menu, element, event )
				local f28_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f28_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.canUseQuickInventory", true ) --[[ @ 0]]
					if f28_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f28_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
						else
							f28_local0 = false --[[ @ 0]]
						end
					end
				else
					f28_local0 = false --[[ @ 0]]
				end
				return f28_local0
			end
		},
		{
			stateName = "InventoryVisible",
			condition = function ( menu, element, event )
				local f29_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) then
					f29_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.inventory.canUseQuickInventory", true ) --[[ @ 0]]
					if f29_local0 then
						if not CoD.ModelUtility.IsModelValueTrue( f1_arg1, "vehicle.hidePlayerInfo" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
							f29_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.playerOnInfectedPlatoon", 0 ) --[[ @ 0]]
						else
							f29_local0 = false --[[ @ 0]]
						end
					end
				else
					f29_local0 = false --[[ @ 0]]
				end
				return f29_local0
			end
		},
		{
			stateName = "QuickInventoryEmptyHiddenAllPreference",
			condition = function ( menu, element, event )
				local f30_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
					f30_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
					if f30_local0 then
						f30_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
					end
				else
					f30_local0 = false --[[ @ 0]]
				end
				return f30_local0
			end
		},
		{
			stateName = "QuickInventoryEmptyHiddenButtonsPreference",
			condition = function ( menu, element, event )
				local f31_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
					f31_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideOnScreenButtonsUI", "warzoneHideOnScreenButtons" ) --[[ @ 0]]
				else
					f31_local0 = false --[[ @ 0]]
				end
				return f31_local0
			end
		},
		{
			stateName = "QuickInventoryEmptyHiddenPerksPreference",
			condition = function ( menu, element, event )
				local f32_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
					f32_local0 = CoD.WZUtility.IsWarzoneUIHidden( f1_arg1, "wzHideActivePerksUI", "warzoneHideActivePerks" ) --[[ @ 0]]
				else
					f32_local0 = false --[[ @ 0]]
				end
				return f32_local0
			end
		},
		{
			stateName = "QuickInventoryEmpty",
			condition = function ( menu, element, event )
				local f33_local0 --[[ @ 0]]
				if not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"] ) and not Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"] ) and Engine[@"IsVisibilityBitSet"]( f1_arg1, Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"] ) and not CoD.WZUtility.IsInLastStand( f1_arg1, "hudItems.lastStand" ) and not CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.infiltrationVehicle", 1 ) then
					f33_local0 = CoD.ModelUtility.IsModelValueEqualTo( f1_arg1, "hudItems.playerOnInfectedPlatoon", 0 ) --[[ @ 0]]
				else
					f33_local0 = false --[[ @ 0]]
				end
				return f33_local0
			end
		}
	} ) --[[ @ 0]]
	self:appendEventHandler( "input_source_changed", function ( f34_arg0, f34_arg1 )
		f34_arg1.menu = f34_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( self, f34_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local11 = self --[[ @ 0]]
	local f1_local12 = self.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13.LastInput, function ( f35_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.lastStand.progress"], function ( f36_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "hudItems.lastStand.progress"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.lastStand.beingRevived"], function ( f37_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f37_arg0:get(),
			modelName = "hudItems.lastStand.beingRevived"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]], function ( f38_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f38_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_3D567EDB5609CCEC"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"]], function ( f39_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f39_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_534C7B2375D2D47"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]], function ( f40_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f40_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_4F4EDA8B636F3F04"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]], function ( f41_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f41_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_66FFF566DCC09BBD"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]], function ( f42_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f42_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_2A69E34E231CE8B6"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"]], function ( f43_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f43_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"UIVisibilityBit"][@"hash_BB045E46E88E762"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["vehicle.hidePlayerInfo"], function ( f44_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f44_arg0:get(),
			modelName = "vehicle.hidePlayerInfo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.infiltrationVehicle"], function ( f45_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f45_arg0:get(),
			modelName = "hudItems.infiltrationVehicle"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13.PlayerSettingsUpdate, function ( f46_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f46_arg0:get(),
			modelName = "PlayerSettingsUpdate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.inventory.open"], function ( f47_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f47_arg0:get(),
			modelName = "hudItems.inventory.open"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.inventory.canUseQuickInventory"], function ( f48_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f48_arg0:get(),
			modelName = "hudItems.inventory.canUseQuickInventory"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local11 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local11, f1_local13["hudItems.playerOnInfectedPlatoon"], function ( f49_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f49_arg0:get(),
			modelName = "hudItems.playerOnInfectedPlatoon"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f50_arg2, f50_arg3, f50_arg4 )
		if CoD.BaseUtility.IsSelfInEitherState( self, "MultiPickupVisible", "MultiPickupVisibleBackpack" ) then
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			CoD.HUDUtility.PushAllowButtonRepeats( self, controller ) --[[ @ 0]]
		elseif CoD.BaseUtility.IsSelfInEitherState( self, "InventoryVisible", "QuickInventoryEmpty" ) then
			SetFocusToSelf( self, controller ) --[[ @ 0]]
			CoD.HUDUtility.PopAllowButtonRepeats( self, controller ) --[[ @ 0]]
		else
			SetLoseFocusToSelf( self, controller ) --[[ @ 0]]
			CoD.HUDUtility.PopAllowButtonRepeats( self, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "close", function ( element )
		CoD.HUDUtility.PopAllowButtonRepeats( self, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RightConsumed.id = "RightConsumed" --[[ @ 0]]
	RightConsumedHidden.id = "RightConsumedHidden" --[[ @ 0]]
	LeftConsumed.id = "LeftConsumed" --[[ @ 0]]
	LeftConsumedHidden.id = "LeftConsumedHidden" --[[ @ 0]]
	InventoryEquipmentSmall.id = "InventoryEquipmentSmall" --[[ @ 0]]
	if CoD.isPC then
		WarzoneQuickConsumeSlotPC.id = "WarzoneQuickConsumeSlotPC" --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local12 = self --[[ @ 0]]
	CoD.WZUtility.SetUpPassCustomFunctionToChildElement( self, self.HintTexts, "_cancelInventoryHints" ) --[[ @ 0]]
	CoD.WZUtility.SetUpPassCustomFunctionToChildElement( self, self.HintTexts, "_showInventoryHints" ) --[[ @ 0]]
	CoD.WZUtility.SetUpPassCustomFunctionToChildElement( self, self.HintTexts, "_showInventoryHints_NoEquip" ) --[[ @ 0]]
	SetElementProperty( RightConsumed, "secondHalf", true ) --[[ @ 0]]
	SetElementProperty( RightConsumedHidden, "secondHalf", true ) --[[ @ 0]]
	SetElementProperty( LeftConsumed, "firstHalf", true ) --[[ @ 0]]
	SetElementProperty( LeftConsumedHidden, "firstHalf", true ) --[[ @ 0]]
	CoD.WZUtility.AddQuickAccessInventoryWidget( f1_arg0, f1_arg1, InventoryEquipmentSmall, 3, false ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.WarzoneInventory.__resetProperties = function ( f52_arg0 )
	f52_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
	f52_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
	f52_arg0.HintTexts:completeAnimation() --[[ @ 0]]
	f52_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
	f52_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
	f52_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
	f52_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
	f52_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
	f52_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
	f52_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
	f52_arg0.InventoryEquipmentSmall:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.QuickLabel:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.HintTexts:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.InventoryPromptImazge:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.QuickLabel3:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
	f52_arg0.LeftConsumed:setAlpha( 1 ) --[[ @ 0]]
	f52_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
	f52_arg0.RightConsumed:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.WarzoneInventory.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f53_arg0, f53_arg1 )
			f53_arg0:__resetProperties() --[[ @ 0]]
			f53_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f53_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f53_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.HintTexts ) --[[ @ 0]]
			f53_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f53_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f53_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f53_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.QuickLabel ) --[[ @ 0]]
			f53_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f53_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f53_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f53_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f53_arg0.clipFinished( f53_arg0.QuickLabel3 ) --[[ @ 0]]
		end
	},
	KeyboardAndMouse = {
		DefaultClip = function ( f54_arg0, f54_arg1 )
			f54_arg0:__resetProperties() --[[ @ 0]]
			f54_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f54_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f54_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.HintTexts ) --[[ @ 0]]
			f54_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f54_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f54_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f54_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.QuickLabel ) --[[ @ 0]]
			f54_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f54_arg0.InventoryPromptImazge:setAlpha( 1 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f54_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f54_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.QuickLabel3 ) --[[ @ 0]]
			f54_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f54_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 1 ) --[[ @ 0]]
			f54_arg0.clipFinished( f54_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	KeyboardAndMouseHidden = {
		DefaultClip = function ( f55_arg0, f55_arg1 )
			f55_arg0:__resetProperties() --[[ @ 0]]
			f55_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f55_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f55_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.HintTexts ) --[[ @ 0]]
			f55_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f55_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.RightConsumed ) --[[ @ 0]]
			f55_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f55_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.RightConsumedHidden ) --[[ @ 0]]
			f55_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f55_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.LeftConsumed ) --[[ @ 0]]
			f55_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f55_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f55_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f55_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f55_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f55_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.QuickLabel ) --[[ @ 0]]
			f55_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f55_arg0.InventoryPromptImazge:setAlpha( 1 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f55_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f55_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.QuickLabel3 ) --[[ @ 0]]
			f55_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f55_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f55_arg0.clipFinished( f55_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryOpenHiddenAllPreference = {
		DefaultClip = function ( f56_arg0, f56_arg1 )
			f56_arg0:__resetProperties() --[[ @ 0]]
			f56_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f56_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f56_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.HintTexts ) --[[ @ 0]]
			f56_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f56_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.RightConsumed ) --[[ @ 0]]
			f56_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f56_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.RightConsumedHidden ) --[[ @ 0]]
			f56_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f56_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.LeftConsumed ) --[[ @ 0]]
			f56_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f56_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f56_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f56_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.QuickLabel ) --[[ @ 0]]
			f56_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f56_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f56_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f56_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.QuickLabel3 ) --[[ @ 0]]
			f56_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f56_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f56_arg0.clipFinished( f56_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryOpenHiddenButtonsPreference = {
		DefaultClip = function ( f57_arg0, f57_arg1 )
			f57_arg0:__resetProperties() --[[ @ 0]]
			f57_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f57_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f57_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.HintTexts ) --[[ @ 0]]
			f57_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f57_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.RightConsumed ) --[[ @ 0]]
			f57_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f57_arg0.RightConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.RightConsumedHidden ) --[[ @ 0]]
			f57_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f57_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.LeftConsumed ) --[[ @ 0]]
			f57_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f57_arg0.LeftConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f57_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f57_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.QuickLabel ) --[[ @ 0]]
			f57_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f57_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f57_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f57_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.QuickLabel3 ) --[[ @ 0]]
			f57_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f57_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f57_arg0.clipFinished( f57_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryOpenHiddenPerksPreference = {
		DefaultClip = function ( f58_arg0, f58_arg1 )
			f58_arg0:__resetProperties() --[[ @ 0]]
			f58_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f58_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f58_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.RightConsumed ) --[[ @ 0]]
			f58_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f58_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.LeftConsumed ) --[[ @ 0]]
			f58_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f58_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.QuickLabel ) --[[ @ 0]]
			f58_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f58_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f58_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f58_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.QuickLabel3 ) --[[ @ 0]]
			f58_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f58_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f58_arg0.clipFinished( f58_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryOpen = {
		DefaultClip = function ( f59_arg0, f59_arg1 )
			f59_arg0:__resetProperties() --[[ @ 0]]
			f59_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f59_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f59_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.QuickLabel ) --[[ @ 0]]
			f59_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f59_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f59_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f59_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.QuickLabel3 ) --[[ @ 0]]
			f59_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f59_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f59_arg0.clipFinished( f59_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryVisibleHiddenAllPreference = {
		DefaultClip = function ( f60_arg0, f60_arg1 )
			f60_arg0:__resetProperties() --[[ @ 0]]
			f60_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f60_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f60_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.HintTexts ) --[[ @ 0]]
			f60_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f60_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.RightConsumed ) --[[ @ 0]]
			f60_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f60_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.RightConsumedHidden ) --[[ @ 0]]
			f60_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f60_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.LeftConsumed ) --[[ @ 0]]
			f60_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f60_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f60_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f60_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.QuickLabel ) --[[ @ 0]]
			f60_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f60_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f60_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f60_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.QuickLabel3 ) --[[ @ 0]]
			f60_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f60_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f60_arg0.clipFinished( f60_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryVisibleHiddenButtonsPreference = {
		DefaultClip = function ( f61_arg0, f61_arg1 )
			f61_arg0:__resetProperties() --[[ @ 0]]
			f61_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f61_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f61_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.HintTexts ) --[[ @ 0]]
			f61_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f61_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.RightConsumed ) --[[ @ 0]]
			f61_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f61_arg0.RightConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.RightConsumedHidden ) --[[ @ 0]]
			f61_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f61_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LeftConsumed ) --[[ @ 0]]
			f61_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f61_arg0.LeftConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f61_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f61_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.QuickLabel ) --[[ @ 0]]
			f61_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f61_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f61_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f61_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.QuickLabel3 ) --[[ @ 0]]
			f61_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f61_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f61_arg0.clipFinished( f61_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryVisibleHiddenPerksPreference = {
		DefaultClip = function ( f62_arg0, f62_arg1 )
			f62_arg0:__resetProperties() --[[ @ 0]]
			f62_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f62_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f62_arg0.HintTexts:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.HintTexts ) --[[ @ 0]]
			f62_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f62_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.RightConsumed ) --[[ @ 0]]
			f62_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f62_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.RightConsumedHidden ) --[[ @ 0]]
			f62_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f62_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LeftConsumed ) --[[ @ 0]]
			f62_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f62_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f62_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f62_arg0.QuickLabel:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.QuickLabel ) --[[ @ 0]]
			f62_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f62_arg0.InventoryPromptImazge:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f62_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f62_arg0.QuickLabel3:setAlpha( 1 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.QuickLabel3 ) --[[ @ 0]]
			f62_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f62_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f62_arg0.clipFinished( f62_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	InventoryVisible = {
		DefaultClip = function ( f63_arg0, f63_arg1 )
			f63_arg0:__resetProperties() --[[ @ 0]]
			f63_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f63_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f63_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f63_arg0.clipFinished( f63_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	QuickInventoryEmptyHiddenAllPreference = {
		DefaultClip = function ( f64_arg0, f64_arg1 )
			f64_arg0:__resetProperties() --[[ @ 0]]
			f64_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f64_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f64_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.HintTexts ) --[[ @ 0]]
			f64_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f64_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.RightConsumed ) --[[ @ 0]]
			f64_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f64_arg0.RightConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.RightConsumedHidden ) --[[ @ 0]]
			f64_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f64_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.LeftConsumed ) --[[ @ 0]]
			f64_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f64_arg0.LeftConsumedHidden:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f64_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f64_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f64_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f64_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.QuickLabel ) --[[ @ 0]]
			f64_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f64_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f64_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f64_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.QuickLabel3 ) --[[ @ 0]]
			f64_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f64_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f64_arg0.clipFinished( f64_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	QuickInventoryEmptyHiddenButtonsPreference = {
		DefaultClip = function ( f65_arg0, f65_arg1 )
			f65_arg0:__resetProperties() --[[ @ 0]]
			f65_arg0:setupElementClipCounter( 10 ) --[[ @ 0]]
			f65_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f65_arg0.HintTexts:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.HintTexts ) --[[ @ 0]]
			f65_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f65_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.RightConsumed ) --[[ @ 0]]
			f65_arg0.RightConsumedHidden:completeAnimation() --[[ @ 0]]
			f65_arg0.RightConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.RightConsumedHidden ) --[[ @ 0]]
			f65_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f65_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.LeftConsumed ) --[[ @ 0]]
			f65_arg0.LeftConsumedHidden:completeAnimation() --[[ @ 0]]
			f65_arg0.LeftConsumedHidden:setAlpha( 1 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.LeftConsumedHidden ) --[[ @ 0]]
			f65_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f65_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f65_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f65_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.QuickLabel ) --[[ @ 0]]
			f65_arg0.InventoryPromptImazge:completeAnimation() --[[ @ 0]]
			f65_arg0.InventoryPromptImazge:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.InventoryPromptImazge ) --[[ @ 0]]
			f65_arg0.QuickLabel3:completeAnimation() --[[ @ 0]]
			f65_arg0.QuickLabel3:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.QuickLabel3 ) --[[ @ 0]]
			f65_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f65_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f65_arg0.clipFinished( f65_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	QuickInventoryEmptyHiddenPerksPreference = {
		DefaultClip = function ( f66_arg0, f66_arg1 )
			f66_arg0:__resetProperties() --[[ @ 0]]
			f66_arg0:setupElementClipCounter( 6 ) --[[ @ 0]]
			f66_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f66_arg0.HintTexts:setAlpha( 1 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.HintTexts ) --[[ @ 0]]
			f66_arg0.RightConsumed:completeAnimation() --[[ @ 0]]
			f66_arg0.RightConsumed:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.RightConsumed ) --[[ @ 0]]
			f66_arg0.LeftConsumed:completeAnimation() --[[ @ 0]]
			f66_arg0.LeftConsumed:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.LeftConsumed ) --[[ @ 0]]
			f66_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f66_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f66_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f66_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.QuickLabel ) --[[ @ 0]]
			f66_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f66_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f66_arg0.clipFinished( f66_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	},
	QuickInventoryEmpty = {
		DefaultClip = function ( f67_arg0, f67_arg1 )
			f67_arg0:__resetProperties() --[[ @ 0]]
			f67_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f67_arg0.HintTexts:completeAnimation() --[[ @ 0]]
			f67_arg0.HintTexts:setAlpha( 1 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.HintTexts ) --[[ @ 0]]
			f67_arg0.InventoryEquipmentSmall:completeAnimation() --[[ @ 0]]
			f67_arg0.InventoryEquipmentSmall:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.InventoryEquipmentSmall ) --[[ @ 0]]
			f67_arg0.QuickLabel:completeAnimation() --[[ @ 0]]
			f67_arg0.QuickLabel:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.QuickLabel ) --[[ @ 0]]
			f67_arg0.WarzoneQuickConsumeSlotPC:completeAnimation() --[[ @ 0]]
			f67_arg0.WarzoneQuickConsumeSlotPC:setAlpha( 0 ) --[[ @ 0]]
			f67_arg0.clipFinished( f67_arg0.WarzoneQuickConsumeSlotPC ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.WarzoneInventory.__onClose = function ( f68_arg0 )
	f68_arg0.HintTexts:close() --[[ @ 0]]
	f68_arg0.RightConsumed:close() --[[ @ 0]]
	f68_arg0.RightConsumedHidden:close() --[[ @ 0]]
	f68_arg0.LeftConsumed:close() --[[ @ 0]]
	f68_arg0.LeftConsumedHidden:close() --[[ @ 0]]
	f68_arg0.InventoryEquipmentSmall:close() --[[ @ 0]]
	f68_arg0.InventoryPromptImazge:close() --[[ @ 0]]
	f68_arg0.QuickLabel3:close() --[[ @ 0]]
	f68_arg0.WarzoneQuickConsumeSlotPC:close() --[[ @ 0]]
end
 --[[ @ 0]]
