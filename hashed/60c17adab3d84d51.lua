-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:20714a8bb51b2892" ) --[[ @ 0]]
require( "x64:4286cf531f95c8bd" ) --[[ @ 0]]

CoD.ZMLoadoutPreview = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMLoadoutPreview.__defaultWidth = 272 --[[ @ 0]]
CoD.ZMLoadoutPreview.__defaultHeight = 379 --[[ @ 0]]
CoD.ZMLoadoutPreview.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMLoadoutPreview ) --[[ @ 0]]
	self.id = "ZMLoadoutPreview" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local PerkList = LUI.UIList.new( f1_arg0, f1_arg1, 0, 0, nil, false, false, false, false ) --[[ @ 0]]
	PerkList:mergeStateConditions( {
		{
			stateName = "PerkModifier",
			condition = function ( menu, element, event )
				local f2_local0 --[[ @ 0]]
				if not CoD.ModelUtility.IsSelfModelValueEqualToEitherValue( element, f1_arg1, "image", @"hash_0", @"blacktransparent" ) then
					f2_local0 = IsLastListElement( element ) --[[ @ 0]]
				else
					f2_local0 = false --[[ @ 0]]
				end
				return f2_local0
			end
		}
	} ) --[[ @ 0]]
	PerkList:linkToElementModel( PerkList, "image", true, function ( model )
		f1_arg0:updateElementState( PerkList, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "image"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkList:setLeftRight( 0, 0, 0, 272 ) --[[ @ 0]]
	PerkList:setTopBottom( 0, 0, 311, 379 ) --[[ @ 0]]
	PerkList:setWidgetType( CoD.ZMLoadoutPreviewItem ) --[[ @ 0]]
	PerkList:setHorizontalCount( 4 ) --[[ @ 0]]
	PerkList:setSpacing( 0 ) --[[ @ 0]]
	PerkList:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	PerkList:setDataSource( "ZMEquippedPerks" ) --[[ @ 0]]
	PerkList:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f4_local0
	end ) --[[ @ 0]]
	PerkList:linkToElementModel( self, "classNum", true, function ( model )
		CoD.GridAndListUtility.UpdateDataSource( PerkList, false, false, true ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkList:subscribeToGlobalModel( f1_arg1, "ZMEquippedPerks", "slotIndex", function ( model )
		local f6_local0 = PerkList --[[ @ 0]]
		if IsElementInFocus( f6_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f6_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( PerkList ) --[[ @ 0]]
	self.PerkList = PerkList --[[ @ 0]]
	
	local BGB4 = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 204, 272, 0, 0, 242, 310 ) --[[ @ 0]]
	BGB4.itemImage:setScale( 1.2, 1.2 ) --[[ @ 0]]
	BGB4:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Left", function ( model )
		BGB4:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BGB4:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	BGB4:subscribeToGlobalModel( f1_arg1, "PerController", "BGBLoadout.Left", function ( model )
		local f9_local0 = BGB4 --[[ @ 0]]
		if IsElementInFocus( f9_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f9_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BGB4 ) --[[ @ 0]]
	self.BGB4 = BGB4 --[[ @ 0]]
	
	local BGB3 = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 136, 204, 0, 0, 242, 310 ) --[[ @ 0]]
	BGB3.itemImage:setScale( 1.2, 1.2 ) --[[ @ 0]]
	BGB3:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Down", function ( model )
		BGB3:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BGB3:registerEventHandler( "gain_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f11_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f11_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	BGB3:subscribeToGlobalModel( f1_arg1, "PerController", "BGBLoadout.Down", function ( model )
		local f12_local0 = BGB3 --[[ @ 0]]
		if IsElementInFocus( f12_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f12_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BGB3 ) --[[ @ 0]]
	self.BGB3 = BGB3 --[[ @ 0]]
	
	local BGB2 = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 68, 136, 0, 0, 242, 310 ) --[[ @ 0]]
	BGB2.itemImage:setScale( 1.2, 1.2 ) --[[ @ 0]]
	BGB2:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Right", function ( model )
		BGB2:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BGB2:registerEventHandler( "gain_focus", function ( element, event )
		local f14_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f14_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f14_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f14_local0
	end ) --[[ @ 0]]
	BGB2:subscribeToGlobalModel( f1_arg1, "PerController", "BGBLoadout.Right", function ( model )
		local f15_local0 = BGB2 --[[ @ 0]]
		if IsElementInFocus( f15_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f15_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BGB2 ) --[[ @ 0]]
	self.BGB2 = BGB2 --[[ @ 0]]
	
	local BGB1 = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 0, 68, 0, 0, 242, 310 ) --[[ @ 0]]
	BGB1.itemImage:setScale( 1.2, 1.2 ) --[[ @ 0]]
	BGB1:subscribeToGlobalModel( f1_arg1, "BGBLoadout", "Up", function ( model )
		BGB1:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	BGB1:registerEventHandler( "gain_focus", function ( element, event )
		local f17_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f17_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f17_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f17_local0
	end ) --[[ @ 0]]
	BGB1:subscribeToGlobalModel( f1_arg1, "PerController", "BGBLoadout.Up", function ( model )
		local f18_local0 = BGB1 --[[ @ 0]]
		if IsElementInFocus( f18_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f18_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( BGB1 ) --[[ @ 0]]
	self.BGB1 = BGB1 --[[ @ 0]]
	
	local Talisman = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 0, 272, 0, 0, 160, 242 ) --[[ @ 0]]
	Talisman:mergeStateConditions( {
		{
			stateName = "ShowName",
			condition = function ( menu, element, event )
				return AlwaysTrue()
			end
		}
	} ) --[[ @ 0]]
	Talisman.itemImage:setScale( 1.04, 1.04 ) --[[ @ 0]]
	Talisman:linkToElementModel( self, "talisman1", false, function ( model )
		Talisman:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Talisman:registerEventHandler( "gain_focus", function ( element, event )
		local f21_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f21_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f21_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f21_local0
	end ) --[[ @ 0]]
	Talisman:linkToElementModel( self, "talisman1", true, function ( model )
		local f22_local0 = Talisman --[[ @ 0]]
		if IsElementInFocus( f22_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f22_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Talisman ) --[[ @ 0]]
	self.Talisman = Talisman --[[ @ 0]]
	
	local Equipment = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 136, 272, 0, 0, 100, 160 ) --[[ @ 0]]
	Equipment.itemImage:setScale( 0.9, 0.9 ) --[[ @ 0]]
	Equipment:linkToElementModel( self, "primarygrenade", false, function ( model )
		Equipment:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Equipment:registerEventHandler( "gain_focus", function ( element, event )
		local f24_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f24_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f24_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f24_local0
	end ) --[[ @ 0]]
	Equipment:linkToElementModel( self, "primarygrenade", true, function ( model )
		local f25_local0 = Equipment --[[ @ 0]]
		if IsElementInFocus( f25_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f25_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Equipment ) --[[ @ 0]]
	self.Equipment = Equipment --[[ @ 0]]
	
	local StartWeapon = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 0, 136, 0, 0, 100, 160 ) --[[ @ 0]]
	StartWeapon.itemImage:setScale( 0.9, 0.9 ) --[[ @ 0]]
	StartWeapon:linkToElementModel( self, "primary", false, function ( model )
		StartWeapon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	StartWeapon:registerEventHandler( "gain_focus", function ( element, event )
		local f27_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f27_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f27_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f27_local0
	end ) --[[ @ 0]]
	StartWeapon:linkToElementModel( self, "primary", true, function ( model )
		local f28_local0 = StartWeapon --[[ @ 0]]
		if IsElementInFocus( f28_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f28_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartWeapon ) --[[ @ 0]]
	self.StartWeapon = StartWeapon --[[ @ 0]]
	
	local SpecialWeapon = CoD.ZMLoadoutPreviewItem.new( f1_arg0, f1_arg1, 0, 0, 0, 272, 0, 0, 0, 100 ) --[[ @ 0]]
	SpecialWeapon.itemImage:setScale( 1.66, 1.66 ) --[[ @ 0]]
	SpecialWeapon:linkToElementModel( self, "herogadget", false, function ( model )
		SpecialWeapon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SpecialWeapon:registerEventHandler( "gain_focus", function ( element, event )
		local f30_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f30_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f30_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, element, f1_arg1 ) --[[ @ 0]]
		return f30_local0
	end ) --[[ @ 0]]
	SpecialWeapon:linkToElementModel( self, "heroGadget", true, function ( model )
		local f31_local0 = SpecialWeapon --[[ @ 0]]
		if IsElementInFocus( f31_local0 ) then
			CoD.ZombieUtility.SetZMLoadoutPreviewInfoElement( self, f31_local0, f1_arg1 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SpecialWeapon ) --[[ @ 0]]
	self.SpecialWeapon = SpecialWeapon --[[ @ 0]]
	
	local ChooseClassLockedOverlay = CoD.ZMLoadoutPreviewLockedOverlay.new( f1_arg0, f1_arg1, 0.5, 0.5, -136, 136, 1, 1, -379, 0 ) --[[ @ 0]]
	ChooseClassLockedOverlay:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.ZMLoadoutUtility.IsCurrentPreviewClassLocked( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( ChooseClassLockedOverlay, nil, true, function ( model )
		f1_arg0:updateElementState( ChooseClassLockedOverlay, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	ChooseClassLockedOverlay:linkToElementModel( self, nil, false, function ( model )
		ChooseClassLockedOverlay:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ChooseClassLockedOverlay ) --[[ @ 0]]
	self.ChooseClassLockedOverlay = ChooseClassLockedOverlay --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ClassLocked",
			condition = function ( menu, element, event )
				return CoD.ZMLoadoutUtility.IsCurrentPreviewClassLocked( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	PerkList.id = "PerkList" --[[ @ 0]]
	BGB4.id = "BGB4" --[[ @ 0]]
	BGB3.id = "BGB3" --[[ @ 0]]
	BGB2.id = "BGB2" --[[ @ 0]]
	BGB1.id = "BGB1" --[[ @ 0]]
	Talisman.id = "Talisman" --[[ @ 0]]
	Equipment.id = "Equipment" --[[ @ 0]]
	StartWeapon.id = "StartWeapon" --[[ @ 0]]
	SpecialWeapon.id = "SpecialWeapon" --[[ @ 0]]
	if CoD.isPC then
		ChooseClassLockedOverlay.id = "ChooseClassLockedOverlay" --[[ @ 0]]
	end
	self.__defaultFocus = SpecialWeapon --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	local f1_local11 = self --[[ @ 0]]
	UpdateDataSource( self, PerkList, f1_arg1 ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.ZMLoadoutPreview.__resetProperties = function ( f37_arg0 )
	f37_arg0.PerkList:completeAnimation() --[[ @ 0]]
	f37_arg0.BGB4:completeAnimation() --[[ @ 0]]
	f37_arg0.BGB3:completeAnimation() --[[ @ 0]]
	f37_arg0.BGB2:completeAnimation() --[[ @ 0]]
	f37_arg0.BGB1:completeAnimation() --[[ @ 0]]
	f37_arg0.Talisman:completeAnimation() --[[ @ 0]]
	f37_arg0.Equipment:completeAnimation() --[[ @ 0]]
	f37_arg0.StartWeapon:completeAnimation() --[[ @ 0]]
	f37_arg0.SpecialWeapon:completeAnimation() --[[ @ 0]]
	f37_arg0.PerkList:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.BGB4:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.BGB3:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.BGB2:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.BGB1:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.Talisman:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.Equipment:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.StartWeapon:setAlpha( 1 ) --[[ @ 0]]
	f37_arg0.SpecialWeapon:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMLoadoutPreview.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f38_arg0, f38_arg1 )
			f38_arg0:__resetProperties() --[[ @ 0]]
			f38_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ClassLocked = {
		DefaultClip = function ( f39_arg0, f39_arg1 )
			f39_arg0:__resetProperties() --[[ @ 0]]
			f39_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f39_arg0.PerkList:completeAnimation() --[[ @ 0]]
			f39_arg0.PerkList:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.PerkList ) --[[ @ 0]]
			f39_arg0.BGB4:completeAnimation() --[[ @ 0]]
			f39_arg0.BGB4:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.BGB4 ) --[[ @ 0]]
			f39_arg0.BGB3:completeAnimation() --[[ @ 0]]
			f39_arg0.BGB3:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.BGB3 ) --[[ @ 0]]
			f39_arg0.BGB2:completeAnimation() --[[ @ 0]]
			f39_arg0.BGB2:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.BGB2 ) --[[ @ 0]]
			f39_arg0.BGB1:completeAnimation() --[[ @ 0]]
			f39_arg0.BGB1:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.BGB1 ) --[[ @ 0]]
			f39_arg0.Talisman:completeAnimation() --[[ @ 0]]
			f39_arg0.Talisman:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.Talisman ) --[[ @ 0]]
			f39_arg0.Equipment:completeAnimation() --[[ @ 0]]
			f39_arg0.Equipment:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.Equipment ) --[[ @ 0]]
			f39_arg0.StartWeapon:completeAnimation() --[[ @ 0]]
			f39_arg0.StartWeapon:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.StartWeapon ) --[[ @ 0]]
			f39_arg0.SpecialWeapon:completeAnimation() --[[ @ 0]]
			f39_arg0.SpecialWeapon:setAlpha( 0 ) --[[ @ 0]]
			f39_arg0.clipFinished( f39_arg0.SpecialWeapon ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ZMLoadoutPreview.__onClose = function ( f40_arg0 )
	f40_arg0.PerkList:close() --[[ @ 0]]
	f40_arg0.BGB4:close() --[[ @ 0]]
	f40_arg0.BGB3:close() --[[ @ 0]]
	f40_arg0.BGB2:close() --[[ @ 0]]
	f40_arg0.BGB1:close() --[[ @ 0]]
	f40_arg0.Talisman:close() --[[ @ 0]]
	f40_arg0.Equipment:close() --[[ @ 0]]
	f40_arg0.StartWeapon:close() --[[ @ 0]]
	f40_arg0.SpecialWeapon:close() --[[ @ 0]]
	f40_arg0.ChooseClassLockedOverlay:close() --[[ @ 0]]
end
 --[[ @ 0]]
