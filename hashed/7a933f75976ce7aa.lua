-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/bumperbuttonwithkeymousetext" ) --[[ @ 0]]

CoD.MultiItemPickupTab = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.MultiItemPickupTab.__defaultWidth = 50 --[[ @ 0]]
CoD.MultiItemPickupTab.__defaultHeight = 34 --[[ @ 0]]
CoD.MultiItemPickupTab.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.MultiItemPickupTab ) --[[ @ 0]]
	self.id = "MultiItemPickupTab" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Empty = LUI.UIImage.new( 0.5, 0.5, -16, 16, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	Empty:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_qe_pip_empty" ) ) --[[ @ 0]]
	self:addElement( Empty ) --[[ @ 0]]
	self.Empty = Empty --[[ @ 0]]
	
	local Selected = LUI.UIImage.new( 0.5, 0.5, -16, 16, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	Selected:setImage( RegisterImage( @"uie_ui_hud_wz_hud_core_qe_pip" ) ) --[[ @ 0]]
	self:addElement( Selected ) --[[ @ 0]]
	self.Selected = Selected --[[ @ 0]]
	
	local RB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0, 0, 4, 204, 0, 0, 0, 34 ) --[[ @ 0]]
	RB:setAlpha( 0 ) --[[ @ 0]]
	RB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BFED5292621DA9A" ) ) --[[ @ 0]]
	self:addElement( RB ) --[[ @ 0]]
	self.RB = RB --[[ @ 0]]
	
	local LB = CoD.BumperButtonWithKeyMouseText.new( f1_arg0, f1_arg1, 0, 0, -154, 46, 0, 0, 0, 34 ) --[[ @ 0]]
	LB:setAlpha( 0 ) --[[ @ 0]]
	LB.GamepadPrompt:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_5BDCD5292604F434" ) ) --[[ @ 0]]
	LB.GamepadPrompt:setAlignment( Enum[@"LUIAlignment"][@"hash_3830CFD395E6AA0A"] ) --[[ @ 0]]
	self:addElement( LB ) --[[ @ 0]]
	self.LB = LB --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Selected",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "selected" )
			end
		},
		{
			stateName = "LeftBumper",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "leftBumper" )
			end
		},
		{
			stateName = "RightBumper",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "rightBumper" )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, "selected", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "selected"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "leftBumper", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "leftBumper"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "rightBumper", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "rightBumper"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.MultiItemPickupTab.__resetProperties = function ( f8_arg0 )
	f8_arg0.Selected:completeAnimation() --[[ @ 0]]
	f8_arg0.LB:completeAnimation() --[[ @ 0]]
	f8_arg0.Empty:completeAnimation() --[[ @ 0]]
	f8_arg0.RB:completeAnimation() --[[ @ 0]]
	f8_arg0.Selected:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.LB:setAlpha( 0 ) --[[ @ 0]]
	f8_arg0.Empty:setAlpha( 1 ) --[[ @ 0]]
	f8_arg0.RB:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.MultiItemPickupTab.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f9_arg0.Selected:completeAnimation() --[[ @ 0]]
			f9_arg0.Selected:setAlpha( 0 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.Selected ) --[[ @ 0]]
		end
	},
	Selected = {
		DefaultClip = function ( f10_arg0, f10_arg1 )
			f10_arg0:__resetProperties() --[[ @ 0]]
			f10_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	LeftBumper = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f11_arg0.Empty:completeAnimation() --[[ @ 0]]
			f11_arg0.Empty:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Empty ) --[[ @ 0]]
			f11_arg0.Selected:completeAnimation() --[[ @ 0]]
			f11_arg0.Selected:setAlpha( 0 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.Selected ) --[[ @ 0]]
			f11_arg0.LB:completeAnimation() --[[ @ 0]]
			f11_arg0.LB:setAlpha( 1 ) --[[ @ 0]]
			f11_arg0.clipFinished( f11_arg0.LB ) --[[ @ 0]]
		end
	},
	RightBumper = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f12_arg0.Empty:completeAnimation() --[[ @ 0]]
			f12_arg0.Empty:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Empty ) --[[ @ 0]]
			f12_arg0.Selected:completeAnimation() --[[ @ 0]]
			f12_arg0.Selected:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Selected ) --[[ @ 0]]
			f12_arg0.RB:completeAnimation() --[[ @ 0]]
			f12_arg0.RB:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.RB ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.MultiItemPickupTab.__onClose = function ( f13_arg0 )
	f13_arg0.RB:close() --[[ @ 0]]
	f13_arg0.LB:close() --[[ @ 0]]
end
 --[[ @ 0]]
