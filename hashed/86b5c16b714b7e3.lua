-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:55f8cf56752aa71b" ) --[[ @ 0]]
require( "x64:3e38247e77bdfbff" ) --[[ @ 0]]
require( "x64:3c4fa18438e51aa4" ) --[[ @ 0]]
require( "ui/uieditor/widgets/director/directorpartyleaderonlyprompt" ) --[[ @ 0]]
require( "x64:60fe5982d27a41c8" ) --[[ @ 0]]

CoD.DirectorPreGameSetUpMatchContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.__defaultWidth = 372 --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.__defaultHeight = 216 --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.DirectorPreGameSetUpMatchContainer ) --[[ @ 0]]
	self.id = "DirectorPreGameSetUpMatchContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local MapImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	MapImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	MapImage:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	MapImage:setShaderVector( 1, 1, 1, 0, 0 ) --[[ @ 0]]
	MapImage:setShaderVector( 2, 0, 0, 0, 0 ) --[[ @ 0]]
	MapImage:subscribeToGlobalModel( f1_arg1, "MapVote", "mapVoteMapNext", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MapImage:setImage( RegisterImage( MapNameToMapImage( f2_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MapImage ) --[[ @ 0]]
	self.MapImage = MapImage --[[ @ 0]]
	
	local FrontendFrame = LUI.UIImage.new( 0, 1, -1, 1, 0, 1, -1, 1 ) --[[ @ 0]]
	FrontendFrame:setAlpha( 0.2 ) --[[ @ 0]]
	FrontendFrame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	FrontendFrame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	FrontendFrame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FrontendFrame:setupNineSliceShader( 12, 12 ) --[[ @ 0]]
	self:addElement( FrontendFrame ) --[[ @ 0]]
	self.FrontendFrame = FrontendFrame --[[ @ 0]]
	
	local GamemodeIcon = LUI.UIImage.new( 0.5, 0.5, -68, 68, 0, 0, 42, 178 ) --[[ @ 0]]
	GamemodeIcon:setAlpha( 0 ) --[[ @ 0]]
	GamemodeIcon:setZoom( 5 ) --[[ @ 0]]
	GamemodeIcon:subscribeToGlobalModel( f1_arg1, "MapVote", "mapVoteGameModeNext", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			GamemodeIcon:setImage( RegisterImage( CoD.GameTypeUtility.GameTypeToImage( f3_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( GamemodeIcon ) --[[ @ 0]]
	self.GamemodeIcon = GamemodeIcon --[[ @ 0]]
	
	local DirectorMapAndGameTypeInternalTitles = CoD.DirectorMapAndGameTypeInternalTitles.new( f1_arg0, f1_arg1, 0, 0, 2, 386, 1, 1, -58, -6 ) --[[ @ 0]]
	DirectorMapAndGameTypeInternalTitles:subscribeToGlobalModel( f1_arg1, "MapVote", "mapVoteGameModeNext", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			DirectorMapAndGameTypeInternalTitles.Label:setText( CoD.GameTypeUtility.GameTypeToLocalizeToUpperName( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	DirectorMapAndGameTypeInternalTitles:subscribeToGlobalModel( f1_arg1, "MapVote", "mapVoteMapNext", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			DirectorMapAndGameTypeInternalTitles.SubTitle:setText( MapNameToLocalizedMapName( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
	self.DirectorMapAndGameTypeInternalTitles = DirectorMapAndGameTypeInternalTitles --[[ @ 0]]
	
	local LockImage = LUI.UIImage.new( 1, 1, -50, 0, 0, 0, 0, 50 ) --[[ @ 0]]
	LockImage:setAlpha( 0 ) --[[ @ 0]]
	LockImage:setScale( 0.6, 0.6 ) --[[ @ 0]]
	LockImage:setImage( RegisterImage( @"uie_ui_icon_global_lock" ) ) --[[ @ 0]]
	self:addElement( LockImage ) --[[ @ 0]]
	self.LockImage = LockImage --[[ @ 0]]
	
	local DirectorPartyLeaderOnlyPrompt = CoD.DirectorPartyLeaderOnlyPrompt.new( f1_arg0, f1_arg1, 0, 1, 5, -5, 0.5, 0.5, -12, 12 ) --[[ @ 0]]
	DirectorPartyLeaderOnlyPrompt:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	DirectorPartyLeaderOnlyPrompt:appendEventHandler( "on_session_start", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( DirectorPartyLeaderOnlyPrompt, f7_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DirectorPartyLeaderOnlyPrompt:appendEventHandler( "on_session_end", function ( f8_arg0, f8_arg1 )
		f8_arg1.menu = f8_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( DirectorPartyLeaderOnlyPrompt, f8_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local PlaylistHeader = DirectorPartyLeaderOnlyPrompt --[[ @ 0]]
	local PlaylistHeaderBacking = DirectorPartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	local CommonButtonOutline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PlaylistHeaderBacking( PlaylistHeader, CommonButtonOutline["lobbyRoot.lobbyNav"], function ( f9_arg0 )
		f1_arg0:updateElementState( DirectorPartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PlaylistHeader = DirectorPartyLeaderOnlyPrompt --[[ @ 0]]
	PlaylistHeaderBacking = DirectorPartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	CommonButtonOutline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PlaylistHeaderBacking( PlaylistHeader, CommonButtonOutline["lobbyRoot.gameClient.update"], function ( f10_arg0 )
		f1_arg0:updateElementState( DirectorPartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "lobbyRoot.gameClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	PlaylistHeader = DirectorPartyLeaderOnlyPrompt --[[ @ 0]]
	PlaylistHeaderBacking = DirectorPartyLeaderOnlyPrompt.subscribeToModel --[[ @ 0]]
	CommonButtonOutline = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	PlaylistHeaderBacking( PlaylistHeader, CommonButtonOutline["lobbyRoot.privateClient.update"], function ( f11_arg0 )
		f1_arg0:updateElementState( DirectorPartyLeaderOnlyPrompt, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "lobbyRoot.privateClient.update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( DirectorPartyLeaderOnlyPrompt ) --[[ @ 0]]
	self.DirectorPartyLeaderOnlyPrompt = DirectorPartyLeaderOnlyPrompt --[[ @ 0]]
	
	PlaylistHeaderBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 0, 0, 30 ) --[[ @ 0]]
	PlaylistHeaderBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	PlaylistHeaderBacking:setAlpha( 0.8 ) --[[ @ 0]]
	self:addElement( PlaylistHeaderBacking ) --[[ @ 0]]
	self.PlaylistHeaderBacking = PlaylistHeaderBacking --[[ @ 0]]
	
	PlaylistHeader = CoD.DirectorSelectButtonMode.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 0, 30 ) --[[ @ 0]]
	self:addElement( PlaylistHeader ) --[[ @ 0]]
	self.PlaylistHeader = PlaylistHeader --[[ @ 0]]
	
	CommonButtonOutline = CoD.CommonButtonOutline.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	CommonButtonOutline:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.BaseUtility.IsSelfInState( self, "Disabled" )
			end
		}
	} ) --[[ @ 0]]
	local f1_local10 = CommonButtonOutline --[[ @ 0]]
	local CustomGamesOfficialBadgeIcon = CommonButtonOutline.subscribeToModel --[[ @ 0]]
	local f1_local12 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	CustomGamesOfficialBadgeIcon( f1_local10, f1_local12["lobbyRoot.lobbyNav"], function ( f13_arg0 )
		f1_arg0:updateElementState( CommonButtonOutline, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CommonButtonOutline ) --[[ @ 0]]
	self.CommonButtonOutline = CommonButtonOutline --[[ @ 0]]
	
	CustomGamesOfficialBadgeIcon = CoD.CustomGames_OfficialBadgeIcon.new( f1_arg0, f1_arg1, 1, 1, -64, 0, 0, 0, 0, 64 ) --[[ @ 0]]
	CustomGamesOfficialBadgeIcon:mergeStateConditions( {
		{
			stateName = "IsOfficial",
			condition = function ( menu, element, event )
				return IsCustomMPLobby() and CoD.OptionsUtility.AreAllCustomGameOptionsDefault( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local12 = CustomGamesOfficialBadgeIcon --[[ @ 0]]
	f1_local10 = CustomGamesOfficialBadgeIcon.subscribeToModel --[[ @ 0]]
	local f1_local13 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local10( f1_local12, f1_local13["lobbyRoot.lobbyNav"], function ( f15_arg0 )
		f1_arg0:updateElementState( CustomGamesOfficialBadgeIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local12 = CustomGamesOfficialBadgeIcon --[[ @ 0]]
	f1_local10 = CustomGamesOfficialBadgeIcon.subscribeToModel --[[ @ 0]]
	f1_local13 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local10( f1_local12, f1_local13["GametypeSettings.Update"], function ( f16_arg0 )
		f1_arg0:updateElementState( CustomGamesOfficialBadgeIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f16_arg0:get(),
			modelName = "GametypeSettings.Update"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CustomGamesOfficialBadgeIcon ) --[[ @ 0]]
	self.CustomGamesOfficialBadgeIcon = CustomGamesOfficialBadgeIcon --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f17_arg2, f17_arg3, f17_arg4 )
		UpdateElementState( self, "CommonButtonOutline", controller ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CommonButtonOutline.id = "CommonButtonOutline" --[[ @ 0]]
	self.__defaultFocus = CommonButtonOutline --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.__resetProperties = function ( f18_arg0 )
	f18_arg0.GamemodeIcon:completeAnimation() --[[ @ 0]]
	f18_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
	f18_arg0.MapImage:completeAnimation() --[[ @ 0]]
	f18_arg0.LockImage:completeAnimation() --[[ @ 0]]
	f18_arg0.GamemodeIcon:setZoom( 5 ) --[[ @ 0]]
	f18_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.DirectorMapAndGameTypeInternalTitles:setZoom( 0 ) --[[ @ 0]]
	f18_arg0.MapImage:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.MapImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
	f18_arg0.LockImage:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f19_arg0.GamemodeIcon:completeAnimation() --[[ @ 0]]
			f19_arg0.GamemodeIcon:setZoom( 5 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.GamemodeIcon ) --[[ @ 0]]
			f19_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
			f19_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 1 ) --[[ @ 0]]
			f19_arg0.DirectorMapAndGameTypeInternalTitles:setZoom( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
		end,
		GainChildFocus = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f20_arg0.GamemodeIcon:completeAnimation() --[[ @ 0]]
			f20_arg0.GamemodeIcon:setZoom( 5 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.GamemodeIcon ) --[[ @ 0]]
			f20_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
			f20_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 1 ) --[[ @ 0]]
			f20_arg0.DirectorMapAndGameTypeInternalTitles:setZoom( 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
		end,
		LoseChildFocus = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f21_arg0.GamemodeIcon:completeAnimation() --[[ @ 0]]
			f21_arg0.GamemodeIcon:setZoom( 5 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.GamemodeIcon ) --[[ @ 0]]
			f21_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
			f21_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 1 ) --[[ @ 0]]
			f21_arg0.DirectorMapAndGameTypeInternalTitles:setZoom( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f22_arg0.MapImage:setAlpha( 0.5 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.MapImage ) --[[ @ 0]]
			f22_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
			f22_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 1 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
		end
	},
	Unselectable = {
		DefaultClip = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Locked = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f24_arg0.MapImage:completeAnimation() --[[ @ 0]]
			f24_arg0.MapImage:setAlpha( 0.5 ) --[[ @ 0]]
			f24_arg0.MapImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_1A02C44161370F6D" ) ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.MapImage ) --[[ @ 0]]
			f24_arg0.DirectorMapAndGameTypeInternalTitles:completeAnimation() --[[ @ 0]]
			f24_arg0.DirectorMapAndGameTypeInternalTitles:setAlpha( 0.1 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.DirectorMapAndGameTypeInternalTitles ) --[[ @ 0]]
			f24_arg0.LockImage:completeAnimation() --[[ @ 0]]
			f24_arg0.LockImage:setAlpha( 0.3 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.LockImage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.DirectorPreGameSetUpMatchContainer.__onClose = function ( f25_arg0 )
	f25_arg0.MapImage:close() --[[ @ 0]]
	f25_arg0.GamemodeIcon:close() --[[ @ 0]]
	f25_arg0.DirectorMapAndGameTypeInternalTitles:close() --[[ @ 0]]
	f25_arg0.DirectorPartyLeaderOnlyPrompt:close() --[[ @ 0]]
	f25_arg0.PlaylistHeader:close() --[[ @ 0]]
	f25_arg0.CommonButtonOutline:close() --[[ @ 0]]
	f25_arg0.CustomGamesOfficialBadgeIcon:close() --[[ @ 0]]
end
 --[[ @ 0]]
