-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/director/directorselectbuttonlines" ) --[[ @ 0]]
require( "ui/uieditor/widgets/footer/footercontainer_frontend_right" ) --[[ @ 0]]
require( "x64:3dec4adeaa0cc751" ) --[[ @ 0]]
require( "x64:274864184d366296" ) --[[ @ 0]]
require( "ui/uieditor/widgets/onofftext" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scoreboard/tabbedscoreboardfuibox" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_background" ) --[[ @ 0]]
require( "x64:3f027dcc6409e42c" ) --[[ @ 0]]

CoD.FTUEInfoScreen = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.FTUEInfoScreen = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "FTUEInfoScreen", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	EnableAnyController( self, f1_arg0 ) --[[ @ 0]]
	self:setClass( CoD.FTUEInfoScreen ) --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local StartMenuBackground = CoD.StartMenu_Background.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	StartMenuBackground:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( StartMenuBackground ) --[[ @ 0]]
	self.StartMenuBackground = StartMenuBackground --[[ @ 0]]
	
	local backing = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	backing:setRGB( 0, 0, 0 ) --[[ @ 0]]
	backing:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	backing:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( backing ) --[[ @ 0]]
	self.backing = backing --[[ @ 0]]
	
	local BackgroundImage = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BackgroundImage:setAlpha( 0.85 ) --[[ @ 0]]
	BackgroundImage:setImage( RegisterImage( @"uie_fe_cp_background" ) ) --[[ @ 0]]
	self:addElement( BackgroundImage ) --[[ @ 0]]
	self.BackgroundImage = BackgroundImage --[[ @ 0]]
	
	local FooterContainerFrontendRight = CoD.FooterContainer_Frontend_Right.new( f1_local1, f1_arg0, 0, 1, 0, 0, 1, 1, -48, 0 ) --[[ @ 0]]
	FooterContainerFrontendRight:registerEventHandler( "menu_loaded", function ( element, event )
		local f2_local0 = nil --[[ @ 0]]
		if element.menuLoaded then
			f2_local0 = element:menuLoaded( event ) --[[ @ 0]]
		elseif element.super.menuLoaded then
			f2_local0 = element.super:menuLoaded( event ) --[[ @ 0]]
		end
		if not IsPC() then
			SizeToSafeArea( element, f1_arg0 ) --[[ @ 0]]
		end
		if not f2_local0 then
			f2_local0 = element:dispatchEventToChildren( event ) --[[ @ 0]]
		end
		return f2_local0
	end ) --[[ @ 0]]
	self:addElement( FooterContainerFrontendRight ) --[[ @ 0]]
	self.FooterContainerFrontendRight = FooterContainerFrontendRight --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0.5, 0.5, -631, 648, 0.5, 0.5, 87.5, 336.5 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local Title = LUI.UIText.new( 0.5, 0.5, -632, 649, 0.5, 0.5, -438, -373 ) --[[ @ 0]]
	Title:setRGB( ColorSet.GroupName.r, ColorSet.GroupName.g, ColorSet.GroupName.b ) --[[ @ 0]]
	Title:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	Title:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_left"] ) ) --[[ @ 0]]
	Title:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_top"] ) ) --[[ @ 0]]
	Title:subscribeToGlobalModel( f1_arg0, "FTUEInfo", "mainTitle", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			Title:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Title ) --[[ @ 0]]
	self.Title = Title --[[ @ 0]]
	
	local List = LUI.UIList.new( f1_local1, f1_arg0, 90, 0, nil, false, false, false, false ) --[[ @ 0]]
	List:setLeftRight( 0.5, 0.5, -718, 736 ) --[[ @ 0]]
	List:setTopBottom( 0.5, 0.5, -338, 86 ) --[[ @ 0]]
	List:setWidgetType( CoD.FTUEGameIntroductionInfo ) --[[ @ 0]]
	List:setHorizontalCount( 4 ) --[[ @ 0]]
	List:setSpacing( 90 ) --[[ @ 0]]
	List:setBalanceGridRows( true ) --[[ @ 0]]
	List:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	List:setDataSource( "FTUEEntries" ) --[[ @ 0]]
	self:addElement( List ) --[[ @ 0]]
	self.List = List --[[ @ 0]]
	
	local infoBracketBot = LUI.UIImage.new( 0.5, 0.5, -632, 649, 0.5, 0.5, 327, 335 ) --[[ @ 0]]
	infoBracketBot:setAlpha( 0 ) --[[ @ 0]]
	infoBracketBot:setImage( RegisterImage( @"hash_4C325BED3F226657" ) ) --[[ @ 0]]
	infoBracketBot:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	infoBracketBot:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	infoBracketBot:setupNineSliceShader( 16, 4 ) --[[ @ 0]]
	self:addElement( infoBracketBot ) --[[ @ 0]]
	self.infoBracketBot = infoBracketBot --[[ @ 0]]
	
	local SingleEntryImage = LUI.UIImage.new( 0.5, 0.5, -631, 649, 0.5, 0.5, -338.5, 85.5 ) --[[ @ 0]]
	SingleEntryImage:setAlpha( 0 ) --[[ @ 0]]
	SingleEntryImage:subscribeToGlobalModel( f1_arg0, "FTUEInfo", "mainImage", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			SingleEntryImage:setImage( RegisterImage( BlackTransparentIfNilOrEmpty( f4_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SingleEntryImage ) --[[ @ 0]]
	self.SingleEntryImage = SingleEntryImage --[[ @ 0]]
	
	local SingleEntryText = LUI.UIText.new( 0.5, 0.5, -619, 635, 0.5, 0.5, 95, 120 ) --[[ @ 0]]
	SingleEntryText:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	SingleEntryText:setAlpha( 0 ) --[[ @ 0]]
	SingleEntryText:setTTF( "dinnext_regular" ) --[[ @ 0]]
	SingleEntryText:setLineSpacing( 1 ) --[[ @ 0]]
	SingleEntryText:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_left"] ) ) --[[ @ 0]]
	SingleEntryText:setAlignment( Engine[@"hash_67F8853DC3581AA4"]( Enum[@"luialignment"][@"lui_alignment_top"] ) ) --[[ @ 0]]
	SingleEntryText:subscribeToGlobalModel( f1_arg0, "FTUEInfo", "mainText", function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			SingleEntryText:setText( Engine[@"hash_4F9F1239CFD921FE"]( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( SingleEntryText ) --[[ @ 0]]
	self.SingleEntryText = SingleEntryText --[[ @ 0]]
	
	local ContentWarningText = CoD.onOffText.new( f1_local1, f1_arg0, 0.5, 0.5, -619.5, 649.5, 0.5, 0.5, 192.5, 217.5 ) --[[ @ 0]]
	ContentWarningText:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return not CoD.CTUtility.IsMatureContent( f1_arg0 )
			end
		}
	} ) --[[ @ 0]]
	local PCButton2 = ContentWarningText --[[ @ 0]]
	local PCButton = ContentWarningText.subscribeToModel --[[ @ 0]]
	local Lines = Engine[@"getglobalmodel"]() --[[ @ 0]]
	PCButton( PCButton2, Lines["storageGlobalRoot.user_settings"], function ( f7_arg0 )
		f1_local1:updateElementState( ContentWarningText, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f7_arg0:get(),
			modelName = "storageGlobalRoot.user_settings"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ContentWarningText:setAlpha( 0 ) --[[ @ 0]]
	ContentWarningText.TextBox:setRGB( 0.76, 0.28, 0.28 ) --[[ @ 0]]
	ContentWarningText.TextBox:setText( Engine[@"hash_4F9F1239CFD921FE"]( SetStringRefPlatformDependant( @"hash_465916AB4A7E637A", @"hash_6ED2BAA9C2D148DA" ) ) ) --[[ @ 0]]
	ContentWarningText.TextBox:setLetterSpacing( 0 ) --[[ @ 0]]
	self:addElement( ContentWarningText ) --[[ @ 0]]
	self.ContentWarningText = ContentWarningText --[[ @ 0]]
	
	PCButton = nil --[[ @ 0]]
	
	PCButton = CoD.PC_MOTD_Buttons.new( f1_local1, f1_arg0, 0.5, 0.5, -632.5, -392.5, 0.5, 0.5, 372.5, 452.5 ) --[[ @ 0]]
	PCButton.OptionText:setText( LocalizeToUpperString( @"menu/continue" ) ) --[[ @ 0]]
	PCButton:linkToElementModel( self, "image", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			PCButton.Icon:setImage( RegisterImage( f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PCButton:registerEventHandler( "gain_focus", function ( element, event )
		local f9_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f9_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f9_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f9_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( PCButton, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PCButton ) --[[ @ 0]]
	self.PCButton = PCButton --[[ @ 0]]
	
	PCButton2 = nil --[[ @ 0]]
	
	PCButton2 = CoD.PC_MOTD_Buttons.new( f1_local1, f1_arg0, 0.5, 0.5, -380, -140, 0.5, 0.5, 372.5, 452.5 ) --[[ @ 0]]
	PCButton2:setAlpha( 0 ) --[[ @ 0]]
	PCButton2.OptionText:setText( LocalizeToUpperString( @"menu/continue" ) ) --[[ @ 0]]
	PCButton2:linkToElementModel( self, "image", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			PCButton2.Icon:setImage( RegisterImage( f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	PCButton2:registerEventHandler( "gain_focus", function ( element, event )
		local f13_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f13_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f13_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f13_local0
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( PCButton2, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		CoD.FTUEUtility.WriteMPStats( controller ) --[[ @ 0]]
		CoD.FTUEUtility.DismissPromoEventPC( menu, controller ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"hash_0", nil, "ui_confirm" ) --[[ @ 0]]
		return false
	end, false ) --[[ @ 0]]
	self:addElement( PCButton2 ) --[[ @ 0]]
	self.PCButton2 = PCButton2 --[[ @ 0]]
	
	Lines = CoD.DirectorSelectButtonLines.new( f1_local1, f1_arg0, 0.5, 0.5, -631, 649, 0.5, 0.5, -339, 86 ) --[[ @ 0]]
	Lines:setRGB( 0.64, 0.71, 0.78 ) --[[ @ 0]]
	Lines:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( Lines ) --[[ @ 0]]
	self.Lines = Lines --[[ @ 0]]
	
	local dotline = LUI.UIImage.new( 0.5, 0.5, -632.5, 649.5, 0.5, 0.5, 355.5, 359.5 ) --[[ @ 0]]
	dotline:setAlpha( 0.25 ) --[[ @ 0]]
	dotline:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline" ) ) --[[ @ 0]]
	dotline:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	dotline:setShaderVector( 0, 1.2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( dotline ) --[[ @ 0]]
	self.dotline = dotline --[[ @ 0]]
	
	local dotline2 = LUI.UIImage.new( 0.5, 0.5, -631.5, 649.5, 0.5, 0.5, -348, -344 ) --[[ @ 0]]
	dotline2:setAlpha( 0.25 ) --[[ @ 0]]
	dotline2:setImage( RegisterImage( @"uie_ui_menu_social_emblem_dotline" ) ) --[[ @ 0]]
	dotline2:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_31CC85D0A86303B0" ) ) --[[ @ 0]]
	dotline2:setShaderVector( 0, 1.2, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( dotline2 ) --[[ @ 0]]
	self.dotline2 = dotline2 --[[ @ 0]]
	
	local CornerPip = LUI.UIImage.new( 0.5, 0.5, -674, -651, 0.5, 0.5, -367, -344 ) --[[ @ 0]]
	CornerPip:setAlpha( 0.25 ) --[[ @ 0]]
	CornerPip:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip ) --[[ @ 0]]
	self.CornerPip = CornerPip --[[ @ 0]]
	
	local CornerPip3 = LUI.UIImage.new( 0.5, 0.5, 670, 693, 0.5, 0.5, 353.5, 376.5 ) --[[ @ 0]]
	CornerPip3:setAlpha( 0.25 ) --[[ @ 0]]
	CornerPip3:setZRot( 180 ) --[[ @ 0]]
	CornerPip3:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip3 ) --[[ @ 0]]
	self.CornerPip3 = CornerPip3 --[[ @ 0]]
	
	local CornerPip4 = LUI.UIImage.new( 0.5, 0.5, 670, 693, 0.5, 0.5, -367, -344 ) --[[ @ 0]]
	CornerPip4:setAlpha( 0.25 ) --[[ @ 0]]
	CornerPip4:setZRot( 270 ) --[[ @ 0]]
	CornerPip4:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip4 ) --[[ @ 0]]
	self.CornerPip4 = CornerPip4 --[[ @ 0]]
	
	local CornerPip2 = LUI.UIImage.new( 0, 0, 297.5, 320.5, 0.5, 0.5, 353.5, 376.5 ) --[[ @ 0]]
	CornerPip2:setAlpha( 0.25 ) --[[ @ 0]]
	CornerPip2:setZRot( 90 ) --[[ @ 0]]
	CornerPip2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip2 ) --[[ @ 0]]
	self.CornerPip2 = CornerPip2 --[[ @ 0]]
	
	local BoxHighlighted = CoD.CommonBgLayoutElement03.new( f1_local1, f1_arg0, 0, 0, 253.5, 329.5, 0.5, 0.5, -455.5, -75.5 ) --[[ @ 0]]
	BoxHighlighted:setScale( 0.4, 0.4 ) --[[ @ 0]]
	self:addElement( BoxHighlighted ) --[[ @ 0]]
	self.BoxHighlighted = BoxHighlighted --[[ @ 0]]
	
	local TabbedScoreboardFuiBox = CoD.TabbedScoreboardFuiBox.new( f1_local1, f1_arg0, 0, 0, 1511.5, 1609.5, 0.5, 0.5, -361.5, -349.5 ) --[[ @ 0]]
	self:addElement( TabbedScoreboardFuiBox ) --[[ @ 0]]
	self.TabbedScoreboardFuiBox = TabbedScoreboardFuiBox --[[ @ 0]]
	
	local FixedAspectRatioImage = LUI.UIFixedAspectRatioImage.new( 0.5, 0.5, -631, 649, 0.5, 0.5, -338.5, 85.5 ) --[[ @ 0]]
	FixedAspectRatioImage:setAlpha( 0 ) --[[ @ 0]]
	FixedAspectRatioImage:subscribeToGlobalModel( f1_arg0, "FTUEInfo", "mainImage", function ( model )
		local f16_local0 = model:get() --[[ @ 0]]
		if f16_local0 ~= nil then
			FixedAspectRatioImage:setImage( RegisterImage( f16_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FixedAspectRatioImage ) --[[ @ 0]]
	self.FixedAspectRatioImage = FixedAspectRatioImage --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "SingleEntry",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEitherEnum( f1_arg0, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.Entries1, CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 )
			end
		},
		{
			stateName = "SingleEntryWarning",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.WarningEntry )
			end
		},
		{
			stateName = "UpsellEntry",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.StoreUpsell )
			end
		},
		{
			stateName = "PromoEvent",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg0, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent )
			end
		}
	} ) --[[ @ 0]]
	local f1_local25 = self --[[ @ 0]]
	local f1_local26 = self.subscribeToModel --[[ @ 0]]
	local f1_local27 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["FTUEInfo.layout"], function ( f21_arg0 )
		f1_local1:updateElementState( self, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f21_arg0:get(),
			modelName = "FTUEInfo.layout"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local25 = self --[[ @ 0]]
	f1_local26 = self.subscribeToModel --[[ @ 0]]
	f1_local27 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local26( f1_local25, f1_local27["FTUEInfo.layout"], function ( f22_arg0, f22_arg1 )
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_local1, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], "MOUSE1", function ( element, menu, controller, model )
		if not IsPC() and not IsRepeatButtonPress( model ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.StoreUpsell ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( model ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( model ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsRepeatButtonPress( model ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) and CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( model ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsRepeatButtonPress( model ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) and not CoD.BaseUtility.IsButtonHoldFinished( model ) then
			CoD.FTUEUtility.AdvanceCurrentSequence( self, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_toggle_generic" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		local f24_local0 = nil --[[ @ 0]]
		if not IsPC() and not IsRepeatButtonPress( f24_local0 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.StoreUpsell ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/purchase", Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 750 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( f24_local0 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/black_market", Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 750 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( f24_local0 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 750 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsRepeatButtonPress( f24_local0 ) and CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", Enum[@"luibuttonpromptflags"][@"hash_771B04FAC5BE0E35"] | 750 << Enum[@"luibuttonpromptflags"][@"hash_176ADD225D738C93"], "MOUSE1" ) --[[ @ 0]]
			return true
		elseif not IsPC() and not IsRepeatButtonPress( f24_local0 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, "MOUSE1" ) --[[ @ 0]]
			return true
		elseif IsPC() and not IsRepeatButtonPress( f24_local0 ) and not CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.HoldButtonEntries1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, "MOUSE1" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.WarningEntry ) then
			CoD.FTUEUtility.BackOutCurrentSequence( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.StoreUpsell ) then
			CoD.FTUEUtility.DismissCurrentSequence( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) and not IsPC() then
			CoD.FTUEUtility.WriteMPStats( controller ) --[[ @ 0]]
			CoD.FTUEUtility.DismissCurrentSequence( self, controller ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) and IsPC() then
			CoD.FTUEUtility.WriteMPStats( controller ) --[[ @ 0]]
			CoD.FTUEUtility.DismissPromoEventPC( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.WarningEntry ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.StoreUpsell ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/dismiss", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) and not IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/dismiss", nil, nil ) --[[ @ 0]]
			return true
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( controller, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) and IsPC() then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/dismiss", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f27_arg0, f27_arg1, f27_arg2, f27_arg3 )
		local f27_local0 = self --[[ @ 0]]
		if IsPC() and CoD.ModelUtility.IsModelValueEqualToEnum( f27_arg1, "FTUEInfo.layout", CoD.FTUEUtility.FTUELayouts.PromoEvent ) then
			PlaySoundAlias( "uin_message_screen_open" ) --[[ @ 0]]
			CoD.PCUtility.LockUIShortcutInput( f27_arg2, f27_arg1 ) --[[ @ 0]]
		else
			PlaySoundAlias( "uin_message_screen_open" ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_local1:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	FooterContainerFrontendRight:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	if CoD.isPC then
		FooterContainerFrontendRight.id = "FooterContainerFrontendRight" --[[ @ 0]]
	end
	List.id = "List" --[[ @ 0]]
	if CoD.isPC then
		PCButton.id = "PCButton" --[[ @ 0]]
	end
	if CoD.isPC then
		PCButton2.id = "PCButton2" --[[ @ 0]]
	end
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_local1:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	f1_local26 = self --[[ @ 0]]
	if IsPC() then
		UpdateButtonPromptState( f1_local1, f1_local26, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
		ChangeDefaultFocus( self, self.PCButton ) --[[ @ 0]]
	else
		MenuHidesFreeCursor( f1_local1, f1_arg0 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.FTUEInfoScreen.__resetProperties = function ( f29_arg0 )
	f29_arg0.SingleEntryImage:completeAnimation() --[[ @ 0]]
	f29_arg0.SingleEntryText:completeAnimation() --[[ @ 0]]
	f29_arg0.List:completeAnimation() --[[ @ 0]]
	f29_arg0.Lines:completeAnimation() --[[ @ 0]]
	f29_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
	f29_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f29_arg0.PCButton2:completeAnimation() --[[ @ 0]]
	f29_arg0.ContentWarningText:completeAnimation() --[[ @ 0]]
	f29_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
	f29_arg0.PCButton:completeAnimation() --[[ @ 0]]
	f29_arg0.SingleEntryImage:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.SingleEntryText:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.List:setAlpha( 1 ) --[[ @ 0]]
	f29_arg0.Lines:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.infoBracketBot:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.PCButton2:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.PCButton2.OptionText:setText( LocalizeToUpperString( @"menu/continue" ) ) --[[ @ 0]]
	f29_arg0.ContentWarningText:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.FixedAspectRatioImage:setAlpha( 0 ) --[[ @ 0]]
	f29_arg0.PCButton.OptionText:setText( LocalizeToUpperString( @"menu/continue" ) ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.FTUEInfoScreen.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f30_arg0, f30_arg1 )
			f30_arg0:__resetProperties() --[[ @ 0]]
			f30_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	SingleEntry = {
		DefaultClip = function ( f31_arg0, f31_arg1 )
			f31_arg0:__resetProperties() --[[ @ 0]]
			f31_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f31_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f31_arg0.NoiseTiledBacking:setAlpha( 0.7 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f31_arg0.List:completeAnimation() --[[ @ 0]]
			f31_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.List ) --[[ @ 0]]
			f31_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
			f31_arg0.infoBracketBot:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.infoBracketBot ) --[[ @ 0]]
			f31_arg0.SingleEntryImage:completeAnimation() --[[ @ 0]]
			f31_arg0.SingleEntryImage:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.SingleEntryImage ) --[[ @ 0]]
			f31_arg0.SingleEntryText:completeAnimation() --[[ @ 0]]
			f31_arg0.SingleEntryText:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.SingleEntryText ) --[[ @ 0]]
			f31_arg0.PCButton2:completeAnimation() --[[ @ 0]]
			f31_arg0.PCButton2:setAlpha( 0 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.PCButton2 ) --[[ @ 0]]
			f31_arg0.Lines:completeAnimation() --[[ @ 0]]
			f31_arg0.Lines:setAlpha( 1 ) --[[ @ 0]]
			f31_arg0.clipFinished( f31_arg0.Lines ) --[[ @ 0]]
		end
	},
	SingleEntryWarning = {
		DefaultClip = function ( f32_arg0, f32_arg1 )
			f32_arg0:__resetProperties() --[[ @ 0]]
			f32_arg0:setupElementClipCounter( 5 ) --[[ @ 0]]
			f32_arg0.List:completeAnimation() --[[ @ 0]]
			f32_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.List ) --[[ @ 0]]
			f32_arg0.SingleEntryImage:completeAnimation() --[[ @ 0]]
			f32_arg0.SingleEntryImage:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.SingleEntryImage ) --[[ @ 0]]
			f32_arg0.SingleEntryText:completeAnimation() --[[ @ 0]]
			f32_arg0.SingleEntryText:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.SingleEntryText ) --[[ @ 0]]
			f32_arg0.ContentWarningText:completeAnimation() --[[ @ 0]]
			f32_arg0.ContentWarningText:setAlpha( 1 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.ContentWarningText ) --[[ @ 0]]
			f32_arg0.PCButton2:completeAnimation() --[[ @ 0]]
			f32_arg0.PCButton2:setAlpha( 0 ) --[[ @ 0]]
			f32_arg0.clipFinished( f32_arg0.PCButton2 ) --[[ @ 0]]
		end
	},
	UpsellEntry = {
		DefaultClip = function ( f33_arg0, f33_arg1 )
			f33_arg0:__resetProperties() --[[ @ 0]]
			f33_arg0:setupElementClipCounter( 8 ) --[[ @ 0]]
			f33_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f33_arg0.NoiseTiledBacking:setAlpha( 0.7 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f33_arg0.List:completeAnimation() --[[ @ 0]]
			f33_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.List ) --[[ @ 0]]
			f33_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
			f33_arg0.infoBracketBot:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.infoBracketBot ) --[[ @ 0]]
			f33_arg0.SingleEntryImage:completeAnimation() --[[ @ 0]]
			f33_arg0.SingleEntryImage:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.SingleEntryImage ) --[[ @ 0]]
			f33_arg0.SingleEntryText:completeAnimation() --[[ @ 0]]
			f33_arg0.SingleEntryText:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.SingleEntryText ) --[[ @ 0]]
			f33_arg0.PCButton2:completeAnimation() --[[ @ 0]]
			f33_arg0.PCButton2:setAlpha( 0 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.PCButton2 ) --[[ @ 0]]
			f33_arg0.Lines:completeAnimation() --[[ @ 0]]
			f33_arg0.Lines:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.Lines ) --[[ @ 0]]
			f33_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
			f33_arg0.FixedAspectRatioImage:setAlpha( 1 ) --[[ @ 0]]
			f33_arg0.clipFinished( f33_arg0.FixedAspectRatioImage ) --[[ @ 0]]
		end
	},
	PromoEvent = {
		DefaultClip = function ( f34_arg0, f34_arg1 )
			f34_arg0:__resetProperties() --[[ @ 0]]
			f34_arg0:setupElementClipCounter( 9 ) --[[ @ 0]]
			f34_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f34_arg0.NoiseTiledBacking:setAlpha( 0.7 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f34_arg0.List:completeAnimation() --[[ @ 0]]
			f34_arg0.List:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.List ) --[[ @ 0]]
			f34_arg0.infoBracketBot:completeAnimation() --[[ @ 0]]
			f34_arg0.infoBracketBot:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.infoBracketBot ) --[[ @ 0]]
			f34_arg0.SingleEntryImage:completeAnimation() --[[ @ 0]]
			f34_arg0.SingleEntryImage:setAlpha( 0 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.SingleEntryImage ) --[[ @ 0]]
			f34_arg0.SingleEntryText:completeAnimation() --[[ @ 0]]
			f34_arg0.SingleEntryText:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.SingleEntryText ) --[[ @ 0]]
			f34_arg0.PCButton:completeAnimation() --[[ @ 0]]
			f34_arg0.PCButton.OptionText:completeAnimation() --[[ @ 0]]
			f34_arg0.PCButton.OptionText:setText( LocalizeToUpperString( @"menu/black_market" ) ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.PCButton ) --[[ @ 0]]
			f34_arg0.PCButton2:completeAnimation() --[[ @ 0]]
			f34_arg0.PCButton2.OptionText:completeAnimation() --[[ @ 0]]
			f34_arg0.PCButton2:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.PCButton2.OptionText:setText( LocalizeToUpperString( @"menu/dismiss" ) ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.PCButton2 ) --[[ @ 0]]
			f34_arg0.Lines:completeAnimation() --[[ @ 0]]
			f34_arg0.Lines:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.Lines ) --[[ @ 0]]
			f34_arg0.FixedAspectRatioImage:completeAnimation() --[[ @ 0]]
			f34_arg0.FixedAspectRatioImage:setAlpha( 1 ) --[[ @ 0]]
			f34_arg0.clipFinished( f34_arg0.FixedAspectRatioImage ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.FTUEInfoScreen.__onClose = function ( f35_arg0 )
	f35_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f35_arg0.StartMenuBackground:close() --[[ @ 0]]
	f35_arg0.FooterContainerFrontendRight:close() --[[ @ 0]]
	f35_arg0.Title:close() --[[ @ 0]]
	f35_arg0.List:close() --[[ @ 0]]
	f35_arg0.SingleEntryImage:close() --[[ @ 0]]
	f35_arg0.SingleEntryText:close() --[[ @ 0]]
	f35_arg0.ContentWarningText:close() --[[ @ 0]]
	f35_arg0.PCButton:close() --[[ @ 0]]
	f35_arg0.PCButton2:close() --[[ @ 0]]
	f35_arg0.Lines:close() --[[ @ 0]]
	f35_arg0.BoxHighlighted:close() --[[ @ 0]]
	f35_arg0.TabbedScoreboardFuiBox:close() --[[ @ 0]]
	f35_arg0.FixedAspectRatioImage:close() --[[ @ 0]]
end
 --[[ @ 0]]
