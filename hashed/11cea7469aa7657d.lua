-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:6bc6e2379d2241fb" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/fullscreenpopup/fullscreenpopuptemplate" ) --[[ @ 0]]
require( "x64:7ef9c1900ac4bdfe" ) --[[ @ 0]]
require( "x64:15d80cb371475b19" ) --[[ @ 0]]
require( "x64:1b175512a7a605a8" ) --[[ @ 0]]
require( "ui/uieditor/widgets/playercard/selfidentitybadge" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]

CoD.PurchaseContractConfirmationSunset = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.PurchaseContractConfirmationSunset = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "PurchaseContractConfirmationSunset", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromUserData( f1_arg0, self, f1_arg1._model ) --[[ @ 0]]
	SetMenuProperty( f1_local1, "_closeAndGoBack", true ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModel( f1_arg0, "purchaseContractNoActivate", false ) --[[ @ 0]]
	SetMenuProperty( f1_local1, "__keepPopupButtonListPC", not CoD.ContractUtility.IsActiveContractSlotOpen( f1_arg0 ) ) --[[ @ 0]]
	self:setClass( CoD.PurchaseContractConfirmationSunset ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local FullscreenPopupTemplate = CoD.FullscreenPopupTemplate.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	FullscreenPopupTemplate:mergeStateConditions( {
		{
			stateName = "WorkingState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "WorkingState" )
			end
		},
		{
			stateName = "ErrorState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "ErrorState" )
			end
		},
		{
			stateName = "CustomState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "CustomState" )
			end
		},
		{
			stateName = "FinishedState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setWidgetType( CoD.ItemShopButton ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setDataSource( "PurchaseContractConfirmationButtons" ) --[[ @ 0]]
	FullscreenPopupTemplate.ErrorSubtitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/purchase_error" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.WorkingTitle:setText( LocalizeToUpperString( @"menu/purchase_processing" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.Title:setText( LocalizeToUpperString( @"hash_DDD82D5235E28E7" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle.__Done_Title = function ()
		FullscreenPopupTemplate.DoneTitle:setText( Engine[@"hash_4F9F1239CFD921FE"]( CoD.ContractUtility.UsePurchaseAndActivateContractCompleteTitleIfNeeded( f1_arg0, @"hash_12D662663ACE5444" ) ) ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle.__Done_Title() --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, nil, false, function ( model )
		FullscreenPopupTemplate:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, function ( model )
		local f8_local0 = model:get() --[[ @ 0]]
		if f8_local0 ~= nil then
			FullscreenPopupTemplate.Subtitle:setText( CoD.ContractUtility.GetPurchaseContractConfirmDesc( self:getModel(), f1_arg0, f8_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneSubtitle.__Done_Subtitle = function ( f9_arg0 )
		local f9_local0 = f9_arg0:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			FullscreenPopupTemplate.DoneSubtitle:setText( CoD.ContractUtility.GetPurchaseContractCompleteDesc( self:getModel(), f1_arg0, f9_local0 ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, FullscreenPopupTemplate.DoneSubtitle.__Done_Subtitle ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneSubtitle.__Done_Subtitle_FullPath = function ()
		local f10_local0 = self:getModel() --[[ @ 0]]
		if f10_local0 then
			f10_local0 = self:getModel() --[[ @ 0]]
			f10_local0 = f10_local0.name --[[ @ 0]]
		end
		if f10_local0 then
			FullscreenPopupTemplate.DoneSubtitle.__Done_Subtitle( f10_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( FullscreenPopupTemplate, "setState", function ( element, controller, f11_arg2, f11_arg3, f11_arg4 )
		if IsPC() and IsElementInState( element, "FinishedState" ) then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
			UpdateSelfElementState( f1_local1, self.StateIndicator, controller ) --[[ @ 0]]
		elseif IsPC() and IsElementInState( element, "ErrorState" ) then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
			UpdateSelfElementState( f1_local1, self.StateIndicator, controller ) --[[ @ 0]]
		elseif IsPC() then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"luibutton"][@"lui_key_xbb_pscircle"] ) --[[ @ 0]]
			UpdateSelfElementState( f1_local1, self.StateIndicator, controller ) --[[ @ 0]]
		else
			UpdateSelfElementState( f1_local1, self.StateIndicator, controller ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FullscreenPopupTemplate ) --[[ @ 0]]
	self.FullscreenPopupTemplate = FullscreenPopupTemplate --[[ @ 0]]
	
	local SelfIdentityBadge = CoD.SelfIdentityBadge.new( f1_local1, f1_arg0, 0.5, 0.5, 541, 872, 0, 0, 33.5, 98.5 ) --[[ @ 0]]
	SelfIdentityBadge:setAlpha( 0 ) --[[ @ 0]]
	SelfIdentityBadge:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		SelfIdentityBadge:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SelfIdentityBadge ) --[[ @ 0]]
	self.SelfIdentityBadge = SelfIdentityBadge --[[ @ 0]]
	
	local Linker = LUI.UIImage.new( 0.5, 0.5, -330, -326, 0.5, 0.5, -192, 205 ) --[[ @ 0]]
	Linker:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Linker:setAlpha( 0.35 ) --[[ @ 0]]
	Linker:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Linker:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Linker:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Linker:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Linker ) --[[ @ 0]]
	self.Linker = Linker --[[ @ 0]]
	
	local CornerPip = LUI.UIImage.new( 0.5, 0.5, -802.5, -786.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip ) --[[ @ 0]]
	self.CornerPip = CornerPip --[[ @ 0]]
	
	local CornerPip2 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip2:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip2:setZRot( 270 ) --[[ @ 0]]
	CornerPip2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip2 ) --[[ @ 0]]
	self.CornerPip2 = CornerPip2 --[[ @ 0]]
	
	local CornerPip3 = LUI.UIImage.new( 0.5, 0.5, -803.5, -787.5, 0.5, 0.5, 122, 138 ) --[[ @ 0]]
	CornerPip3:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip3:setZRot( 90 ) --[[ @ 0]]
	CornerPip3:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip3 ) --[[ @ 0]]
	self.CornerPip3 = CornerPip3 --[[ @ 0]]
	
	local CornerPip4 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, 121, 137 ) --[[ @ 0]]
	CornerPip4:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip4:setZRot( 180 ) --[[ @ 0]]
	CornerPip4:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip4 ) --[[ @ 0]]
	self.CornerPip4 = CornerPip4 --[[ @ 0]]
	
	local Black = LUI.UIImage.new( 0.5, 0.5, -960, -330, 0.5, 0.5, -214.5, 230.5 ) --[[ @ 0]]
	Black:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Black:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	Black:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 1, 0, 0.16, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	Black:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Black ) --[[ @ 0]]
	self.Black = Black --[[ @ 0]]
	
	local ContentImage = CoD.PurchaseItemContentImage.new( f1_local1, f1_arg0, 0.5, 0.5, -1244, -412, 0.5, 0.5, -204, 172 ) --[[ @ 0]]
	ContentImage:linkToElementModel( self, nil, false, function ( model )
		ContentImage:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContentImage ) --[[ @ 0]]
	self.ContentImage = ContentImage --[[ @ 0]]
	
	local StateIndicator = CoD.PurchaseContract_StateIndicator.new( f1_local1, f1_arg0, 0.5, 0.5, -960, -330, 0.5, 0.5, 183.5, 226.5 ) --[[ @ 0]]
	StateIndicator:mergeStateConditions( {
		{
			stateName = "Purchased",
			condition = function ( menu, element, event )
				return IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsControllerModelValueTrue( f1_arg0, "purchaseContractNoActivate" )
			end
		},
		{
			stateName = "Active",
			condition = function ( menu, element, event )
				return IsElementInState( self.FullscreenPopupTemplate, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	local CommonIdentityWidgetStreamlinedPC = StateIndicator --[[ @ 0]]
	local StartMenuCODpoints = StateIndicator.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	StartMenuCODpoints( CommonIdentityWidgetStreamlinedPC, f1_local14.purchaseContractNoActivate, function ( f16_arg0 )
		f1_local1:updateElementState( StateIndicator, {
			name = "model_validation",
			menu = f1_local1,
			controller = f1_arg0,
			modelValue = f16_arg0:get(),
			modelName = "purchaseContractNoActivate"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	StateIndicator:linkToElementModel( self, "price", true, function ( model )
		local f17_local0 = model:get() --[[ @ 0]]
		if f17_local0 ~= nil then
			StateIndicator.CostText:setText( LocalizeIntoString( @"hash_56A3CC7BE3008989", f17_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StateIndicator ) --[[ @ 0]]
	self.StateIndicator = StateIndicator --[[ @ 0]]
	
	StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 341, 445, 0, 0, 23.5, 103.5 ) --[[ @ 0]]
	StartMenuCODpoints:setAlpha( 0 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	CommonIdentityWidgetStreamlinedPC = nil --[[ @ 0]]
	
	CommonIdentityWidgetStreamlinedPC = CoD.CommonIdentityWidgetStreamlined.new( f1_local1, f1_arg0, 0.5, 0.5, 426, 956, 0.5, 0.5, -282, -242 ) --[[ @ 0]]
	CommonIdentityWidgetStreamlinedPC:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		CommonIdentityWidgetStreamlinedPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonIdentityWidgetStreamlinedPC ) --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedPC = CommonIdentityWidgetStreamlinedPC --[[ @ 0]]
	
	f1_local14 = nil --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedC = LUI.UIElement.createFake() --[[ @ 0]]
	
	local ContractName = LUI.UIText.new( 0.5, 0.5, -960, -330, 0.5, 0.5, 144.5, 183.5 ) --[[ @ 0]]
	ContractName:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	ContractName:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	ContractName:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	ContractName:linkToElementModel( self, "name", true, function ( model )
		local f20_local0 = model:get() --[[ @ 0]]
		if f20_local0 ~= nil then
			ContractName:setText( Engine[@"hash_4F9F1239CFD921FE"]( f20_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ContractName ) --[[ @ 0]]
	self.ContractName = ContractName --[[ @ 0]]
	
	local f1_local16 = FullscreenPopupTemplate --[[ @ 0]]
	local f1_local17 = FullscreenPopupTemplate.subscribeToModel --[[ @ 0]]
	local f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.purchaseContractNoActivate, FullscreenPopupTemplate.DoneSubtitle.__Done_Subtitle_FullPath ) --[[ @ 0]]
	f1_local16 = FullscreenPopupTemplate --[[ @ 0]]
	f1_local17 = FullscreenPopupTemplate.subscribeToModel --[[ @ 0]]
	f1_local18 = Engine[@"getmodelforcontroller"]( f1_arg0 ) --[[ @ 0]]
	f1_local17( f1_local16, f1_local18.purchaseContractNoActivate, FullscreenPopupTemplate.DoneTitle.__Done_Title ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], nil, function ( element, menu, controller, model )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xbb_pscircle"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"luibutton"][@"lui_key_xba_pscross"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			DelayCloseAndGoBack( menu, controller, 0 ) --[[ @ 0]]
			ForceNotifyGlobalModel( controller, "ContractsForceUpdate" ) --[[ @ 0]]
			CoD.BlackMarketUtility.UpdateSunsetPurchasedSlotModel( controller, self ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not MenuPropertyIsTrue( menu, "__keepPopupButtonListPC" ) then
			SetElementWorkingStateAndPurchaseDWSKU( self.FullscreenPopupTemplate, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/continue", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/back", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not MenuPropertyIsTrue( menu, "__keepPopupButtonListPC" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/purchase", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "ItemshopRotation", "cycled", function ( model )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) and CoD.ContractUtility.OpenedContractExpired( self, self, f1_arg0 ) then
			GoBack( self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "AutoEvents", "cycled", function ( model )
		local f26_local0 = self --[[ @ 0]]
		if IsElementInAnyState( self.FullscreenPopupTemplate, "WorkingState", "ErrorState", "CustomState", "FinishedState" ) then
			DelayCloseAndGoBack( f1_local1, f1_arg0, 0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FullscreenPopupTemplate.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.buttonPC:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.id = "FullscreenPopupTemplate" --[[ @ 0]]
	SelfIdentityBadge.id = "SelfIdentityBadge" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = FullscreenPopupTemplate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	
	f1_local17 = self --[[ @ 0]]
	SetMenuProperty( f1_local1, "_isContract", true ) --[[ @ 0]]
	return self
end
 --[[ @ 0]]
CoD.PurchaseContractConfirmationSunset.__onClose = function ( f27_arg0 )
	f27_arg0.FullscreenPopupTemplate:close() --[[ @ 0]]
	f27_arg0.SelfIdentityBadge:close() --[[ @ 0]]
	f27_arg0.ContentImage:close() --[[ @ 0]]
	f27_arg0.StateIndicator:close() --[[ @ 0]]
	f27_arg0.StartMenuCODpoints:close() --[[ @ 0]]
	f27_arg0.CommonIdentityWidgetStreamlinedPC:close() --[[ @ 0]]
	f27_arg0.CommonIdentityWidgetStreamlinedC:close() --[[ @ 0]]
	f27_arg0.ContractName:close() --[[ @ 0]]
end
 --[[ @ 0]]
