-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/cac/restricteditemwarning" ) --[[ @ 0]]
require( "x64:6341ce33d59fafd1" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/corner9slice" ) --[[ @ 0]]

CoD.ZMLoadoutPreviewInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.ZMLoadoutPreviewInfo.__defaultWidth = 934 --[[ @ 0]]
CoD.ZMLoadoutPreviewInfo.__defaultHeight = 126 --[[ @ 0]]
CoD.ZMLoadoutPreviewInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.ZMLoadoutPreviewInfo ) --[[ @ 0]]
	self.id = "ZMLoadoutPreviewInfo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Blur = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Blur:setAlpha( 0.7 ) --[[ @ 0]]
	Blur:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	Blur:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( Blur ) --[[ @ 0]]
	self.Blur = Blur --[[ @ 0]]
	
	local Panel = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	Panel:setRGB( 0, 0, 0 ) --[[ @ 0]]
	Panel:setAlpha( 0.02 ) --[[ @ 0]]
	self:addElement( Panel ) --[[ @ 0]]
	self.Panel = Panel --[[ @ 0]]
	
	local TiledBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	TiledBacking:setAlpha( 0.4 ) --[[ @ 0]]
	TiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	TiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	TiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	TiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( TiledBacking ) --[[ @ 0]]
	self.TiledBacking = TiledBacking --[[ @ 0]]
	
	local LinePattern = LUI.UIImage.new( 0, 0, 0, 313, 0, 1, 0, 0 ) --[[ @ 0]]
	LinePattern:setAlpha( 0.5 ) --[[ @ 0]]
	LinePattern:setImage( RegisterImage( @"uie_ui_menu_zombies_cac_grunge_pattern" ) ) --[[ @ 0]]
	LinePattern:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	LinePattern:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	LinePattern:setupNineSliceShader( 256, 256 ) --[[ @ 0]]
	self:addElement( LinePattern ) --[[ @ 0]]
	self.LinePattern = LinePattern --[[ @ 0]]
	
	local itemImage = LUI.UIFixedAspectRatioImage.new( 0, 0, 6.5, 306.5, 0.5, 0.5, -59, 61 ) --[[ @ 0]]
	itemImage:setScale( 0.84, 0.84 ) --[[ @ 0]]
	itemImage:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewItemImage", function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			itemImage:setImage( CoD.BaseUtility.AlreadyRegisteredIfUserData( f2_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( itemImage ) --[[ @ 0]]
	self.itemImage = itemImage --[[ @ 0]]
	
	local detailedDesc = LUI.UIText.new( 0, 0, 330, 922, 0.5, 0.5, -24, -8 ) --[[ @ 0]]
	detailedDesc:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	detailedDesc:setTTF( "dinnext_regular" ) --[[ @ 0]]
	detailedDesc:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	detailedDesc:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	detailedDesc:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewItemDesc", function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			detailedDesc:setText( Engine[@"hash_4F9F1239CFD921FE"]( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( detailedDesc ) --[[ @ 0]]
	self.detailedDesc = detailedDesc --[[ @ 0]]
	
	local SubHeaderDivider = LUI.UIImage.new( 0, 0, 331, 929, 0.5, 0.5, -33, -31 ) --[[ @ 0]]
	SubHeaderDivider:setRGB( 0.92, 0.92, 0.92 ) --[[ @ 0]]
	SubHeaderDivider:setAlpha( 0.25 ) --[[ @ 0]]
	SubHeaderDivider:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 1, 0, 1.24, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	SubHeaderDivider:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( SubHeaderDivider ) --[[ @ 0]]
	self.SubHeaderDivider = SubHeaderDivider --[[ @ 0]]
	
	local name = LUI.UIText.new( 0, 0, 330, 922, 0.5, 0.5, -58, -36 ) --[[ @ 0]]
	name:setRGB( 0.58, 0.85, 1 ) --[[ @ 0]]
	name:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	name:setLetterSpacing( 10 ) --[[ @ 0]]
	name:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	name:setAlignment( Enum[@"luialignment"][@"hash_E821F0ECFF8D1C7"] ) --[[ @ 0]]
	name:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewItemName", function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			name:setText( LocalizeToUpperString( f4_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( name ) --[[ @ 0]]
	self.name = name --[[ @ 0]]
	
	local Corner9Slice2 = CoD.Corner9Slice.new( f1_arg0, f1_arg1, 0.01, 0.01, 302.5, 923.5, -0.01, 1.01, 1, -1 ) --[[ @ 0]]
	Corner9Slice2:setAlpha( 0.6 ) --[[ @ 0]]
	Corner9Slice2:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Corner9Slice2 ) --[[ @ 0]]
	self.Corner9Slice2 = Corner9Slice2 --[[ @ 0]]
	
	local Corner9Slice = CoD.Corner9Slice.new( f1_arg0, f1_arg1, 0.01, 0.01, -6, 308, 0.17, 1.19, -22, -24 ) --[[ @ 0]]
	Corner9Slice:setAlpha( 0.6 ) --[[ @ 0]]
	Corner9Slice:setRFTMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( Corner9Slice ) --[[ @ 0]]
	self.Corner9Slice = Corner9Slice --[[ @ 0]]
	
	local RestrictionIcon = CoD.RestrictedItemWarning.new( f1_arg0, f1_arg1, 0.5, 0.5, -460, -400, 0.5, 0.5, -56, -6 ) --[[ @ 0]]
	RestrictionIcon:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f5_local0 --[[ @ 0]]
				if not CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) and not IsPublicWZLobby() then
					f5_local0 = CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "ZMLoadoutPreviewItemIsRestricted" ) --[[ @ 0]]
				else
					f5_local0 = false --[[ @ 0]]
				end
				return f5_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local12 = RestrictionIcon --[[ @ 0]]
	local RestrictedText = RestrictionIcon.subscribeToModel --[[ @ 0]]
	local f1_local14 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	RestrictedText( f1_local12, f1_local14["lobbyRoot.lobbyNav"], function ( f6_arg0 )
		f1_arg0:updateElementState( RestrictionIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RestrictionIcon:linkToElementModel( RestrictionIcon, "ZMLoadoutPreviewItemIsRestricted", true, function ( model )
		f1_arg0:updateElementState( RestrictionIcon, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ZMLoadoutPreviewItemIsRestricted"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RestrictionIcon:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", nil, function ( model )
		RestrictionIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RestrictionIcon ) --[[ @ 0]]
	self.RestrictionIcon = RestrictionIcon --[[ @ 0]]
	
	RestrictedText = CoD.RestrictedItemWarningText.new( f1_arg0, f1_arg1, 0.5, 0.5, -27, 467, 0.5, 0.5, 69, 99 ) --[[ @ 0]]
	RestrictedText:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				local f9_local0 --[[ @ 0]]
				if not CoD.DirectorUtility.ShowDirectorPregame( f1_arg1 ) and not IsPublicWZLobby() then
					f9_local0 = CoD.ModelUtility.IsSelfModelValueTrue( element, f1_arg1, "ZMLoadoutPreviewItemIsRestricted" ) --[[ @ 0]]
				else
					f9_local0 = false --[[ @ 0]]
				end
				return f9_local0
			end
		}
	} ) --[[ @ 0]]
	f1_local14 = RestrictedText --[[ @ 0]]
	f1_local12 = RestrictedText.subscribeToModel --[[ @ 0]]
	local f1_local15 = Engine[@"getglobalmodel"]() --[[ @ 0]]
	f1_local12( f1_local14, f1_local15["lobbyRoot.lobbyNav"], function ( f10_arg0 )
		f1_arg0:updateElementState( RestrictedText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	RestrictedText:linkToElementModel( RestrictedText, "ZMLoadoutPreviewItemIsRestricted", true, function ( model )
		f1_arg0:updateElementState( RestrictedText, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "ZMLoadoutPreviewItemIsRestricted"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	RestrictedText:subscribeToGlobalModel( f1_arg1, "DirectorZMLoadoutPreview", nil, function ( model )
		RestrictedText:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( RestrictedText ) --[[ @ 0]]
	self.RestrictedText = RestrictedText --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Invisible",
			condition = function ( menu, element, event )
				return not CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "DirectorZMLoadoutPreview", "ZMLoadoutPreviewInfoShown" )
			end
		},
		{
			stateName = "DefaultState_TraditionalChinesePC",
			condition = function ( menu, element, event )
				return IsPC() and IsCurrentLanguageTraditionalChinese()
			end
		}
	} ) --[[ @ 0]]
	f1_local14 = self --[[ @ 0]]
	f1_local12 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.DirectorZMLoadoutPreview.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local12( f1_local14, f1_local15.ZMLoadoutPreviewInfoShown, function ( f15_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f15_arg0:get(),
			modelName = "ZMLoadoutPreviewInfoShown"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.ZMLoadoutPreviewInfo.__resetProperties = function ( f16_arg0 )
	f16_arg0.name:completeAnimation() --[[ @ 0]]
	f16_arg0.SubHeaderDivider:completeAnimation() --[[ @ 0]]
	f16_arg0.detailedDesc:completeAnimation() --[[ @ 0]]
	f16_arg0.itemImage:completeAnimation() --[[ @ 0]]
	f16_arg0.Panel:completeAnimation() --[[ @ 0]]
	f16_arg0.Blur:completeAnimation() --[[ @ 0]]
	f16_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
	f16_arg0.LinePattern:completeAnimation() --[[ @ 0]]
	f16_arg0.RestrictionIcon:completeAnimation() --[[ @ 0]]
	f16_arg0.RestrictedText:completeAnimation() --[[ @ 0]]
	f16_arg0.Corner9Slice2:completeAnimation() --[[ @ 0]]
	f16_arg0.Corner9Slice:completeAnimation() --[[ @ 0]]
	f16_arg0.name:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.SubHeaderDivider:setAlpha( 0.25 ) --[[ @ 0]]
	f16_arg0.detailedDesc:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.itemImage:setTopBottom( 0.5, 0.5, -59, 61 ) --[[ @ 0]]
	f16_arg0.itemImage:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.Panel:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f16_arg0.Panel:setAlpha( 0.02 ) --[[ @ 0]]
	f16_arg0.Blur:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f16_arg0.Blur:setAlpha( 0.7 ) --[[ @ 0]]
	f16_arg0.TiledBacking:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f16_arg0.TiledBacking:setAlpha( 0.4 ) --[[ @ 0]]
	f16_arg0.LinePattern:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f16_arg0.LinePattern:setAlpha( 0.5 ) --[[ @ 0]]
	f16_arg0.RestrictionIcon:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.RestrictedText:setAlpha( 1 ) --[[ @ 0]]
	f16_arg0.Corner9Slice2:setTopBottom( -0.01, 1.01, 1, -1 ) --[[ @ 0]]
	f16_arg0.Corner9Slice2:setAlpha( 0.6 ) --[[ @ 0]]
	f16_arg0.Corner9Slice:setTopBottom( 0.17, 1.19, -22, -24 ) --[[ @ 0]]
	f16_arg0.Corner9Slice:setAlpha( 0.6 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ZMLoadoutPreviewInfo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Invisible = {
		DefaultClip = function ( f18_arg0, f18_arg1 )
			f18_arg0:__resetProperties() --[[ @ 0]]
			f18_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f18_arg0.Blur:completeAnimation() --[[ @ 0]]
			f18_arg0.Blur:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Blur ) --[[ @ 0]]
			f18_arg0.Panel:completeAnimation() --[[ @ 0]]
			f18_arg0.Panel:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Panel ) --[[ @ 0]]
			f18_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f18_arg0.TiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.TiledBacking ) --[[ @ 0]]
			f18_arg0.LinePattern:completeAnimation() --[[ @ 0]]
			f18_arg0.LinePattern:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.LinePattern ) --[[ @ 0]]
			f18_arg0.itemImage:completeAnimation() --[[ @ 0]]
			f18_arg0.itemImage:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.itemImage ) --[[ @ 0]]
			f18_arg0.detailedDesc:completeAnimation() --[[ @ 0]]
			f18_arg0.detailedDesc:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.detailedDesc ) --[[ @ 0]]
			f18_arg0.SubHeaderDivider:completeAnimation() --[[ @ 0]]
			f18_arg0.SubHeaderDivider:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.SubHeaderDivider ) --[[ @ 0]]
			f18_arg0.name:completeAnimation() --[[ @ 0]]
			f18_arg0.name:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.name ) --[[ @ 0]]
			f18_arg0.Corner9Slice2:completeAnimation() --[[ @ 0]]
			f18_arg0.Corner9Slice2:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Corner9Slice2 ) --[[ @ 0]]
			f18_arg0.Corner9Slice:completeAnimation() --[[ @ 0]]
			f18_arg0.Corner9Slice:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.Corner9Slice ) --[[ @ 0]]
			f18_arg0.RestrictionIcon:completeAnimation() --[[ @ 0]]
			f18_arg0.RestrictionIcon:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.RestrictionIcon ) --[[ @ 0]]
			f18_arg0.RestrictedText:completeAnimation() --[[ @ 0]]
			f18_arg0.RestrictedText:setAlpha( 0 ) --[[ @ 0]]
			f18_arg0.clipFinished( f18_arg0.RestrictedText ) --[[ @ 0]]
		end
	},
	DefaultState_TraditionalChinesePC = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f19_arg0.Blur:completeAnimation() --[[ @ 0]]
			f19_arg0.Blur:setTopBottom( 0, 0, 0, 110 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Blur ) --[[ @ 0]]
			f19_arg0.Panel:completeAnimation() --[[ @ 0]]
			f19_arg0.Panel:setTopBottom( 0, 0, 0, 110 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Panel ) --[[ @ 0]]
			f19_arg0.TiledBacking:completeAnimation() --[[ @ 0]]
			f19_arg0.TiledBacking:setTopBottom( 0.21, 0.21, -36, 74 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.TiledBacking ) --[[ @ 0]]
			f19_arg0.LinePattern:completeAnimation() --[[ @ 0]]
			f19_arg0.LinePattern:setTopBottom( 0, 0, 0, 110 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.LinePattern ) --[[ @ 0]]
			f19_arg0.itemImage:completeAnimation() --[[ @ 0]]
			f19_arg0.itemImage:setTopBottom( 0.5, 0.5, -78, 12 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.itemImage ) --[[ @ 0]]
			f19_arg0.Corner9Slice2:completeAnimation() --[[ @ 0]]
			f19_arg0.Corner9Slice2:setTopBottom( 0.1, 0.73, -17, -19 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Corner9Slice2 ) --[[ @ 0]]
			f19_arg0.Corner9Slice:completeAnimation() --[[ @ 0]]
			f19_arg0.Corner9Slice:setTopBottom( 0.1, 0.73, -17, -19 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.Corner9Slice ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.ZMLoadoutPreviewInfo.__clipsPerState.DefaultState_TraditionalChinesePC.DefaultClip = nil --[[ @ 0]]
end
CoD.ZMLoadoutPreviewInfo.__onClose = function ( f20_arg0 )
	f20_arg0.itemImage:close() --[[ @ 0]]
	f20_arg0.detailedDesc:close() --[[ @ 0]]
	f20_arg0.name:close() --[[ @ 0]]
	f20_arg0.Corner9Slice2:close() --[[ @ 0]]
	f20_arg0.Corner9Slice:close() --[[ @ 0]]
	f20_arg0.RestrictionIcon:close() --[[ @ 0]]
	f20_arg0.RestrictedText:close() --[[ @ 0]]
end
 --[[ @ 0]]
