-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "x64:4031a96cffe9fd2d" ) --[[ @ 0]]

CoD.WeaponPersonalizeSlotContainer = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.WeaponPersonalizeSlotContainer.__defaultWidth = 130 --[[ @ 0]]
CoD.WeaponPersonalizeSlotContainer.__defaultHeight = 268 --[[ @ 0]]
CoD.WeaponPersonalizeSlotContainer.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.WeaponPersonalizeSlotContainer ) --[[ @ 0]]
	self.id = "WeaponPersonalizeSlotContainer" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	
	local DeathFxButton = CoD.WeaponPersonalizeSlot.new( f1_arg0, f1_arg1, 0, 0, 0, 115, 0, 0, 153, 268 ) --[[ @ 0]]
	DeathFxButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.WeaponOptionsUtility.CanEquipDeathFxForWeapon( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	DeathFxButton.ButtonName:setText( LocalizeToUpperString( @"hash_30D527320A0F9B5A" ) ) --[[ @ 0]]
	DeathFxButton:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "deathfx", function ( model )
		DeathFxButton.newIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	DeathFxButton.WeaponPersonalizationItem.ItemImage.__Icon = function ( f4_arg0 )
		local f4_local0 = f4_arg0:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			DeathFxButton.WeaponPersonalizationItem.ItemImage:setImage( RegisterImage( CoD.WeaponOptionsUtility.GetWeaponDeathFxIconForItemIndex( f4_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DeathFxButton:linkToElementModel( self, "equippedDeathFxIndex", true, DeathFxButton.WeaponPersonalizationItem.ItemImage.__Icon ) --[[ @ 0]]
	DeathFxButton.WeaponPersonalizationItem.ItemImage.__Icon_FullPath = function ()
		local f5_local0 = self:getModel() --[[ @ 0]]
		if f5_local0 then
			f5_local0 = self:getModel() --[[ @ 0]]
			f5_local0 = f5_local0.equippedDeathFxIndex --[[ @ 0]]
		end
		if f5_local0 then
			DeathFxButton.WeaponPersonalizationItem.ItemImage.__Icon( f5_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	DeathFxButton:appendEventHandler( "input_source_changed", function ( f6_arg0, f6_arg1 )
		f6_arg1.menu = f6_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f6_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local2 = DeathFxButton --[[ @ 0]]
	local AccessoriesButton = DeathFxButton.subscribeToModel --[[ @ 0]]
	local f1_local4 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	AccessoriesButton( f1_local2, f1_local4.LastInput, function ( f7_arg0, f7_arg1 )
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f7_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	DeathFxButton:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DeathFxButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "WeaponDeathFxSelect", element, "" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DeathFxButton, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.WeaponOptionsUtility.IsDeathFxEquippedForWeapon( menu, controller ) and IsGamepad( controller ) then
			CoD.WeaponOptionsUtility.ClearDeathFx( menu, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WeaponOptionsUtility.IsDeathFxEquippedForWeapon( menu, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_1679ACA6FFC6C8F3", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( DeathFxButton, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "ui_remove", function ( element, menu, controller, model )
		if CoD.WeaponOptionsUtility.IsDeathFxEquippedForWeapon( menu, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WeaponOptionsUtility.ClearDeathFx( menu, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WeaponOptionsUtility.IsDeathFxEquippedForWeapon( menu, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_1679ACA6FFC6C8F3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	DeathFxButton:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_1679ACA6FFC6C8F3", function ( f15_arg0, f15_arg1, f15_arg2, f15_arg3 )
		if CoD.WeaponOptionsUtility.IsDeathFxEquippedForWeapon( f15_arg1, f15_arg2 ) then
			return function ( f16_arg0, f16_arg1, f16_arg2, f16_arg3 )
				CoD.WeaponOptionsUtility.ClearDeathFx( f16_arg1, f16_arg2 ) --[[ @ 0]]
				UpdateAllMenuButtonPrompts( f16_arg1, f16_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( DeathFxButton ) --[[ @ 0]]
	self.DeathFxButton = DeathFxButton --[[ @ 0]]
	
	AccessoriesButton = CoD.WeaponPersonalizeSlot.new( f1_arg0, f1_arg1, 0, 0, 0, 115, 0, 0, 0, 115 ) --[[ @ 0]]
	AccessoriesButton:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.WeaponOptionsUtility.CanEquipCharmForWeapon( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	AccessoriesButton.ButtonName:setText( LocalizeToUpperString( @"hash_70FA6E6FE616EF67" ) ) --[[ @ 0]]
	AccessoriesButton:subscribeToGlobalModel( f1_arg1, "LoadoutBreadcrumbs", "accessory", function ( model )
		AccessoriesButton.newIcon:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	AccessoriesButton.WeaponPersonalizationItem.ItemImage.__Icon = function ( f19_arg0 )
		local f19_local0 = f19_arg0:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			AccessoriesButton.WeaponPersonalizationItem.ItemImage:setImage( RegisterImage( CoD.WeaponOptionsUtility.GetWeaponAccessoryIconForItemIndex( f1_arg0, f1_arg1, f19_local0 ) ) ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	AccessoriesButton:linkToElementModel( self, "equippedAccessoryIndex", true, AccessoriesButton.WeaponPersonalizationItem.ItemImage.__Icon ) --[[ @ 0]]
	AccessoriesButton.WeaponPersonalizationItem.ItemImage.__Icon_FullPath = function ()
		local f20_local0 = self:getModel() --[[ @ 0]]
		if f20_local0 then
			f20_local0 = self:getModel() --[[ @ 0]]
			f20_local0 = f20_local0.equippedAccessoryIndex --[[ @ 0]]
		end
		if f20_local0 then
			AccessoriesButton.WeaponPersonalizationItem.ItemImage.__Icon( f20_local0 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	AccessoriesButton:appendEventHandler( "input_source_changed", function ( f21_arg0, f21_arg1 )
		f21_arg1.menu = f21_arg1.menu or f1_arg0 --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f21_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f21_arg0, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local4 = AccessoriesButton --[[ @ 0]]
	f1_local2 = AccessoriesButton.subscribeToModel --[[ @ 0]]
	local f1_local5 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.LastInput, function ( f22_arg0, f22_arg1 )
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( f22_arg1, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	AccessoriesButton:registerEventHandler( "gain_focus", function ( element, event )
		local f23_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f23_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f23_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"] ) --[[ @ 0]]
		CoD.Menu.UpdateButtonShownState( element, f1_arg0, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"] ) --[[ @ 0]]
		return f23_local0
	end ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( AccessoriesButton, f1_arg1, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		CoD.CACUtility.OpenCACOverlay( self, menu, controller, "WeaponAccessoriesSelect", element, "" ) --[[ @ 0]]
		return true
	end, function ( element, menu, controller )
		CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_6D0BB36CD318F55F", nil, nil ) --[[ @ 0]]
		return true
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( AccessoriesButton, f1_arg1, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], nil, function ( element, menu, controller, model )
		if CoD.WeaponOptionsUtility.IsCharmEquippedForWeapon( menu, controller ) and IsGamepad( controller ) then
			CoD.WeaponOptionsUtility.ClearWeaponAccessory( menu, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WeaponOptionsUtility.IsCharmEquippedForWeapon( menu, controller ) and IsGamepad( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_4C083113BC81F23F"], @"hash_1679ACA6FFC6C8F3", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_arg0:AddButtonCallbackFunction( AccessoriesButton, f1_arg1, Enum[@"LUIButton"][@"hash_64D2505E19049444"], "ui_remove", function ( element, menu, controller, model )
		if CoD.WeaponOptionsUtility.IsCharmEquippedForWeapon( menu, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.WeaponOptionsUtility.ClearWeaponAccessory( menu, controller ) --[[ @ 0]]
			UpdateAllMenuButtonPrompts( menu, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if CoD.WeaponOptionsUtility.IsCharmEquippedForWeapon( menu, controller ) and IsMouseOrKeyboard( controller ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_64D2505E19049444"], @"hash_1679ACA6FFC6C8F3", Enum[@"hash_3BEBDBAEEB3ECCCA"][@"hash_4B6372335C630AD3"], "ui_remove" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	AccessoriesButton:AddContextualMenuAction( f1_arg0, f1_arg1, @"hash_1679ACA6FFC6C8F3", function ( f30_arg0, f30_arg1, f30_arg2, f30_arg3 )
		if CoD.WeaponOptionsUtility.IsCharmEquippedForWeapon( f30_arg1, f30_arg2 ) then
			return function ( f31_arg0, f31_arg1, f31_arg2, f31_arg3 )
				CoD.WeaponOptionsUtility.ClearWeaponAccessory( f31_arg1, f31_arg2 ) --[[ @ 0]]
				UpdateAllMenuButtonPrompts( f31_arg1, f31_arg2 ) --[[ @ 0]]
			end
			
		else
			
		end
	end ) --[[ @ 0]]
	self:addElement( AccessoriesButton ) --[[ @ 0]]
	self.AccessoriesButton = AccessoriesButton --[[ @ 0]]
	
	f1_local4 = DeathFxButton --[[ @ 0]]
	f1_local2 = DeathFxButton.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.WeaponPersonalization.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.equippedDeathFxIndex, DeathFxButton.WeaponPersonalizationItem.ItemImage.__Icon_FullPath ) --[[ @ 0]]
	f1_local4 = AccessoriesButton --[[ @ 0]]
	f1_local2 = AccessoriesButton.subscribeToModel --[[ @ 0]]
	f1_local5 = DataSources.WeaponPersonalization.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local2( f1_local4, f1_local5.equippedAccessoryIndex, AccessoriesButton.WeaponPersonalizationItem.ItemImage.__Icon_FullPath ) --[[ @ 0]]
	DeathFxButton.id = "DeathFxButton" --[[ @ 0]]
	AccessoriesButton.id = "AccessoriesButton" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local2 = self --[[ @ 0]]
	f1_local2 = DeathFxButton --[[ @ 0]]
	if IsPC() then
		CoD.BaseUtility.SetElementModelFromPropertyModel( f1_arg1, f1_arg0, f1_local2 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local2, f1_arg1, "name", "", "" ) --[[ @ 0]]
	else
		CoD.BaseUtility.SetElementModelFromPropertyModel( f1_arg1, f1_arg0, f1_local2 ) --[[ @ 0]]
	end
	f1_local2 = AccessoriesButton --[[ @ 0]]
	if IsPC() then
		CoD.BaseUtility.SetElementModelFromPropertyModel( f1_arg1, f1_arg0, f1_local2 ) --[[ @ 0]]
		CoD.PCWidgetUtility.SetupContextualMenu( f1_local2, f1_arg1, "name", "", "" ) --[[ @ 0]]
	else
		CoD.BaseUtility.SetElementModelFromPropertyModel( f1_arg1, f1_arg0, f1_local2 ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.WeaponPersonalizeSlotContainer.__onClose = function ( f32_arg0 )
	f32_arg0.DeathFxButton:close() --[[ @ 0]]
	f32_arg0.AccessoriesButton:close() --[[ @ 0]]
end
 --[[ @ 0]]
