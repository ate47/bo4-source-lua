-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "ui/uieditor/widgets/buttonprogressringcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/keyprompt" ) --[[ @ 0]]

CoD.CodCasterButtonPrompt = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CodCasterButtonPrompt.__defaultWidth = 150 --[[ @ 0]]
CoD.CodCasterButtonPrompt.__defaultHeight = 48 --[[ @ 0]]
CoD.CodCasterButtonPrompt.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIHorizontalList.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9, 0, false ) --[[ @ 0]]
	self:setAlignment( LUI.Alignment.Left ) --[[ @ 0]]
	self:setClass( CoD.CodCasterButtonPrompt ) --[[ @ 0]]
	self.id = "CodCasterButtonPrompt" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local progressRing = CoD.ButtonProgressRingContainer.new( f1_arg0, f1_arg1, 0, 0, 0, 42, 0, 0, 3, 45 ) --[[ @ 0]]
	progressRing:linkToElementModel( self, nil, false, function ( model )
		progressRing:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( progressRing ) --[[ @ 0]]
	self.progressRing = progressRing --[[ @ 0]]
	
	local buttonPromptImage = LUI.UIImage.new( 0, 0, 42, 72, 0, 0, 9, 39 ) --[[ @ 0]]
	buttonPromptImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
	buttonPromptImage:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( buttonPromptImage ) --[[ @ 0]]
	self.buttonPromptImage = buttonPromptImage --[[ @ 0]]
	
	local KeyPrompt = CoD.KeyPrompt.new( f1_arg0, f1_arg1, 0, 0, 72, 108, 0, 0, 6, 42 ) --[[ @ 0]]
	KeyPrompt:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( KeyPrompt ) --[[ @ 0]]
	self.KeyPrompt = KeyPrompt --[[ @ 0]]
	
	local label = LUI.UIText.new( 0, 0, 108, 177, 0, 0, 14, 34 ) --[[ @ 0]]
	label:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	label:setLetterSpacing( 6 ) --[[ @ 0]]
	label:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	label:linkToElementModel( self, "Label", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			label:setText( LocalizeToUpperString( f3_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( label, "setText", function ( element, controller )
		ScaleWidgetToLabel( self, element, -40 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( label ) --[[ @ 0]]
	self.label = label --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Disabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"LUIButtonPromptStates"][@"hash_242F62C12777D074"] ) and not CoD.FreeCursorUtility.ShowingContextualPromptForFlags( element, f1_arg1 )
			end
		},
		{
			stateName = "Enabled",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"LUIButtonPromptStates"][@"hash_5901DFC093ED4187"] ) and not CoD.FreeCursorUtility.ShowingContextualPromptForFlags( element, f1_arg1 )
			end
		},
		{
			stateName = "InitialState",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Gamepad",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualToEnum( element, f1_arg1, "", Enum[@"LUIButtonPromptStates"][@"hash_5901DFC093ED4187"] ) and not CoD.FreeCursorUtility.ShowingContextualPromptForFlags( element, f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	self:linkToElementModel( self, nil, true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = nil
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local f1_local5 = self --[[ @ 0]]
	local f1_local6 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.usingCursorInput, function ( f10_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "usingCursorInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.FreeCursor.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.hidden, function ( f11_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "hidden"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = self --[[ @ 0]]
	f1_local6 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = Engine[@"GetModelForController"]( f1_arg1 ) --[[ @ 0]]
	f1_local6( f1_local5, f1_local7.activeKeys, function ( f12_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f12_arg0:get(),
			modelName = "activeKeys"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:linkToElementModel( self, "flags", true, function ( model )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "flags"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( self, "setState", function ( element, controller, f14_arg2, f14_arg3, f14_arg4 )
		if IsSelfInState( self, "DefaultState" ) and not IsPC() then
			HideWidget( element ) --[[ @ 0]]
		elseif not IsPC() then
			ShowWidget( element ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f15_arg0, f15_arg1, f15_arg2, f15_arg3 )
		local f15_local0 = self --[[ @ 0]]
		if IsPC() then
			HideWidget( self.buttonPromptImage ) --[[ @ 0]]
			HideWidget( self.progressRing ) --[[ @ 0]]
			ShowWidget( self.KeyPrompt ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg1, "PerController", "LastInput", function ( model )
		local f16_local0 = self --[[ @ 0]]
		if IsCodCaster( f1_arg1 ) and IsMouseOrKeyboard( f1_arg1 ) then
			HideWidget( self.buttonPromptImage ) --[[ @ 0]]
			HideWidget( self.progressRing ) --[[ @ 0]]
			ShowWidget( self.KeyPrompt ) --[[ @ 0]]
		elseif IsCodCaster( f1_arg1 ) and IsGamepad( f1_arg1 ) then
			ShowWidget( self.buttonPromptImage ) --[[ @ 0]]
			ShowWidget( self.progressRing ) --[[ @ 0]]
			HideWidget( self.KeyPrompt ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PreLoadFunc then
		PreLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	f1_local6 = self --[[ @ 0]]
	if IsPC() then
		DisableKeyboardNavigationByElement( self ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.CodCasterButtonPrompt.__resetProperties = function ( f18_arg0 )
	f18_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
	f18_arg0.label:completeAnimation() --[[ @ 0]]
	f18_arg0.progressRing:completeAnimation() --[[ @ 0]]
	f18_arg0.KeyPrompt:completeAnimation() --[[ @ 0]]
	f18_arg0.buttonPromptImage:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f18_arg0.buttonPromptImage:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.buttonPromptImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
	f18_arg0.buttonPromptImage:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	f18_arg0.label:setLeftRight( 0, 0, 108, 177 ) --[[ @ 0]]
	f18_arg0.label:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f18_arg0.label:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.progressRing:setLeftRight( 0, 0, 0, 42 ) --[[ @ 0]]
	f18_arg0.progressRing:setAlpha( 1 ) --[[ @ 0]]
	f18_arg0.KeyPrompt:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CodCasterButtonPrompt.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f19_arg0, f19_arg1 )
			f19_arg0:__resetProperties() --[[ @ 0]]
			f19_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f19_arg0.progressRing:completeAnimation() --[[ @ 0]]
			f19_arg0.progressRing:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.progressRing ) --[[ @ 0]]
			f19_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
			f19_arg0.buttonPromptImage:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.buttonPromptImage ) --[[ @ 0]]
			f19_arg0.KeyPrompt:completeAnimation() --[[ @ 0]]
			f19_arg0.KeyPrompt:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.KeyPrompt ) --[[ @ 0]]
			f19_arg0.label:completeAnimation() --[[ @ 0]]
			f19_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f19_arg0.clipFinished( f19_arg0.label ) --[[ @ 0]]
		end
	},
	Disabled = {
		DefaultClip = function ( f20_arg0, f20_arg1 )
			f20_arg0:__resetProperties() --[[ @ 0]]
			f20_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f20_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
			f20_arg0.buttonPromptImage:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
			f20_arg0.buttonPromptImage:setAlpha( 0.5 ) --[[ @ 0]]
			f20_arg0.buttonPromptImage:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_saturation_normal" ) ) --[[ @ 0]]
			f20_arg0.buttonPromptImage:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.buttonPromptImage ) --[[ @ 0]]
			f20_arg0.label:completeAnimation() --[[ @ 0]]
			f20_arg0.label:setRGB( 0.5, 0.5, 0.5 ) --[[ @ 0]]
			f20_arg0.label:setAlpha( 0.5 ) --[[ @ 0]]
			f20_arg0.clipFinished( f20_arg0.label ) --[[ @ 0]]
		end
	},
	Enabled = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end,
		Hide = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f22_arg0.buttonPromptImage:completeAnimation() --[[ @ 0]]
			f22_arg0.buttonPromptImage:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.buttonPromptImage ) --[[ @ 0]]
			f22_arg0.label:completeAnimation() --[[ @ 0]]
			f22_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.label ) --[[ @ 0]]
		end,
		Focus = function ( f23_arg0, f23_arg1 )
			f23_arg0:__resetProperties() --[[ @ 0]]
			f23_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f23_arg0.label:completeAnimation() --[[ @ 0]]
			f23_arg0.label:setAlpha( 1 ) --[[ @ 0]]
			f23_arg0.clipFinished( f23_arg0.label ) --[[ @ 0]]
		end
	},
	InitialState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Gamepad = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f25_arg0.progressRing:completeAnimation() --[[ @ 0]]
			f25_arg0.progressRing:setLeftRight( 0, 0, 0, 0 ) --[[ @ 0]]
			f25_arg0.progressRing:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.progressRing ) --[[ @ 0]]
			f25_arg0.KeyPrompt:completeAnimation() --[[ @ 0]]
			f25_arg0.KeyPrompt:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.KeyPrompt ) --[[ @ 0]]
			f25_arg0.label:completeAnimation() --[[ @ 0]]
			f25_arg0.label:setLeftRight( 0, 0, 142.5, 142.5 ) --[[ @ 0]]
			f25_arg0.label:setAlpha( 0 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.label ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
if not CoD.isPC then
	CoD.CodCasterButtonPrompt.__clipsPerState.Enabled.Focus = nil --[[ @ 0]]
end
CoD.CodCasterButtonPrompt.__onClose = function ( f26_arg0 )
	f26_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f26_arg0.progressRing:close() --[[ @ 0]]
	f26_arg0.buttonPromptImage:close() --[[ @ 0]]
	f26_arg0.KeyPrompt:close() --[[ @ 0]]
	f26_arg0.label:close() --[[ @ 0]]
end
 --[[ @ 0]]
