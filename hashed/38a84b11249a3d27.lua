-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:33
require( "ui/uieditor/widgets/hud/core_ammowidget/ammowidgetmp_clipcontainerhero" ) --[[ @ 0]]
require( "ui/uieditor/widgets/hud/core_ammowidget/ammowidgetmp_clipcontainernew" ) --[[ @ 0]]

CoD.AmmoWidgetMP_ClipInfo = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.__defaultWidth = 64 --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.__defaultHeight = 61 --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.AmmoWidgetMP_ClipInfo ) --[[ @ 0]]
	self.id = "AmmoWidgetMP_ClipInfo" --[[ @ 0]]
	self.soundSet = "default" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local Clip = CoD.AmmoWidgetMP_ClipContainerNew.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 0, 3.5, 29.5 ) --[[ @ 0]]
	Clip:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsGlobalDataSourceModelValueEqualTo( f1_arg1, "CurrentWeapon", "weapon", 0 ) and not IsCampaign()
			end
		},
		{
			stateName = "LowAmmo",
			condition = function ( menu, element, event )
				local f3_local0 = IsLowAmmoClip( f1_arg1 ) --[[ @ 0]]
				if f3_local0 then
					f3_local0 = WeaponHasAmmo( f1_arg1 ) --[[ @ 0]]
					if f3_local0 then
						f3_local0 = not IsSignatureWeaponInUse( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f3_local0
			end
		},
		{
			stateName = "NoAmmo",
			condition = function ( menu, element, event )
				local f4_local0 --[[ @ 0]]
				if not WeaponHasAmmo( f1_arg1 ) then
					f4_local0 = WeaponUsesAmmo( f1_arg1 ) --[[ @ 0]]
					if f4_local0 then
						f4_local0 = not CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenAmmo( f1_arg1 ) --[[ @ 0]]
					end
				else
					f4_local0 = false --[[ @ 0]]
				end
				return f4_local0
			end
		},
		{
			stateName = "Hero",
			condition = function ( menu, element, event )
				return IsSignatureWeaponInUse( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	local ClipHero = Clip --[[ @ 0]]
	local ClipDual = Clip.subscribeToModel --[[ @ 0]]
	local TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel.weapon, function ( f6_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "weapon"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	TotalAmmoLabel = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel["lobbyRoot.lobbyNav"], function ( f7_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel.ammoLow, function ( f8_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "ammoLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel.weaponHasAmmo, function ( f9_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f9_arg0:get(),
			modelName = "weaponHasAmmo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel.equippedWeaponReference, function ( f10_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f10_arg0:get(),
			modelName = "equippedWeaponReference"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero = Clip --[[ @ 0]]
	ClipDual = Clip.subscribeToModel --[[ @ 0]]
	TotalAmmoLabel = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipDual( ClipHero, TotalAmmoLabel.viewmodelWeaponName, function ( f11_arg0 )
		f1_arg0:updateElementState( Clip, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f11_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	Clip:setRGB( ColorSet.T8__OFF__WHITE.r, ColorSet.T8__OFF__WHITE.g, ColorSet.T8__OFF__WHITE.b ) --[[ @ 0]]
	Clip:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			Clip.Clip.Clip:setText( CoD.BaseUtility.AlreadyLocalized( f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	Clip:linkToElementModel( self, "ammoInClip", true, function ( model )
		local f13_local0 = model:get() --[[ @ 0]]
		if f13_local0 ~= nil then
			Clip.ClipContainerPress.Clip:setText( CoD.BaseUtility.AlreadyLocalized( f13_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Clip ) --[[ @ 0]]
	self.Clip = Clip --[[ @ 0]]
	
	ClipDual = CoD.AmmoWidgetMP_ClipContainerNew.new( f1_arg0, f1_arg1, 1, 1, -198, -10, 1, 1, -86.5, 30.5 ) --[[ @ 0]]
	ClipDual:mergeStateConditions( {
		{
			stateName = "LowAmmo",
			condition = function ( menu, element, event )
				return IsLowAmmoDWClip( f1_arg1 )
			end
		},
		{
			stateName = "NoAmmo",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hero",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		}
	} ) --[[ @ 0]]
	TotalAmmoLabel = ClipDual --[[ @ 0]]
	ClipHero = ClipDual.subscribeToModel --[[ @ 0]]
	local f1_local5 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	ClipHero( TotalAmmoLabel, f1_local5.ammoDWLow, function ( f17_arg0 )
		f1_arg0:updateElementState( ClipDual, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f17_arg0:get(),
			modelName = "ammoDWLow"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipDual:setAlpha( 0 ) --[[ @ 0]]
	ClipDual:setZoom( 3 ) --[[ @ 0]]
	ClipDual:linkToElementModel( self, "ammoInDWClip", true, function ( model )
		local f18_local0 = model:get() --[[ @ 0]]
		if f18_local0 ~= nil then
			ClipDual.Clip.Clip:setText( CoD.BaseUtility.AlreadyLocalized( f18_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	ClipDual:linkToElementModel( self, "ammoInDWClip", true, function ( model )
		local f19_local0 = model:get() --[[ @ 0]]
		if f19_local0 ~= nil then
			ClipDual.ClipContainerPress.Clip:setText( CoD.BaseUtility.AlreadyLocalized( f19_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( ClipDual ) --[[ @ 0]]
	self.ClipDual = ClipDual --[[ @ 0]]
	
	ClipHero = CoD.AmmoWidgetMP_ClipContainerHero.new( f1_arg0, f1_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ClipHero:mergeStateConditions( {
		{
			stateName = "Weapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 ) and CoD.ModelUtility.IsGlobalDataSourceModelValueEqualToEnum( f1_arg1, "PlayerAbilities", "playerGadget3.state", Enum[@"hash_F0447219F15F7F3"][@"hash_51873A43E9D1620E"] )
			end
		},
		{
			stateName = "Ability",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	f1_local5 = ClipHero --[[ @ 0]]
	TotalAmmoLabel = ClipHero.subscribeToModel --[[ @ 0]]
	local f1_local6 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( f1_local5, f1_local6["playerGadget2.state"], function ( f22_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f22_arg0:get(),
			modelName = "playerGadget2.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = ClipHero --[[ @ 0]]
	TotalAmmoLabel = ClipHero.subscribeToModel --[[ @ 0]]
	f1_local6 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( f1_local5, f1_local6["playerGadget3.state"], function ( f23_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f23_arg0:get(),
			modelName = "playerGadget3.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local5 = ClipHero --[[ @ 0]]
	TotalAmmoLabel = ClipHero.subscribeToModel --[[ @ 0]]
	f1_local6 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	TotalAmmoLabel( f1_local5, f1_local6.viewmodelWeaponName, function ( f24_arg0 )
		f1_arg0:updateElementState( ClipHero, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f24_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	ClipHero:setAlpha( 0 ) --[[ @ 0]]
	ClipHero:setZoom( 3 ) --[[ @ 0]]
	self:addElement( ClipHero ) --[[ @ 0]]
	self.ClipHero = ClipHero --[[ @ 0]]
	
	TotalAmmoLabel = LUI.UIText.new( 0, 1, 0, 0, 0, 0, 47, 63 ) --[[ @ 0]]
	TotalAmmoLabel:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
	TotalAmmoLabel:setTTF( "0arame_mono_stencil" ) --[[ @ 0]]
	TotalAmmoLabel:setLetterSpacing( 2 ) --[[ @ 0]]
	TotalAmmoLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	TotalAmmoLabel:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	TotalAmmoLabel:linkToElementModel( self, "ammoStock", true, function ( model )
		local f25_local0 = model:get() --[[ @ 0]]
		if f25_local0 ~= nil then
			TotalAmmoLabel:setText( f25_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( TotalAmmoLabel ) --[[ @ 0]]
	self.TotalAmmoLabel = TotalAmmoLabel --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "DisposableMags",
			condition = function ( menu, element, event )
				return IsMultiplayer()
			end
		},
		{
			stateName = "HiddenGamemodeWeapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenAmmo( f1_arg1 )
			end
		},
		{
			stateName = "HeroWeapon",
			condition = function ( menu, element, event )
				return CoD.HUDUtility.UsingPlayerGadgetWithBar( f1_arg1 )
			end
		},
		{
			stateName = "WeaponDual",
			condition = function ( menu, element, event )
				local f29_local0 = WeaponUsesAmmo( f1_arg1 ) --[[ @ 0]]
				if f29_local0 then
					f29_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueGreaterThan( f1_arg1, "CurrentWeapon", "ammoInDWClip", -1 ) --[[ @ 0]]
					if f29_local0 then
						f29_local0 = not CoD.HUDUtility.IsCurrentViewmodelWeaponGamemodeHiddenDWAmmo( f1_arg1 ) --[[ @ 0]]
					end
				end
				return f29_local0
			end
		},
		{
			stateName = "Weapon",
			condition = function ( menu, element, event )
				return WeaponUsesAmmo( f1_arg1 ) and not IsWeaponClipGreaterThanOrEqualTo( f1_arg1, 100 )
			end
		},
		{
			stateName = "Weapon3Digits",
			condition = function ( menu, element, event )
				return IsWeaponClipGreaterThanOrEqualTo( f1_arg1, 100 )
			end
		}
	} ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	local f1_local7 = Engine[@"GetGlobalModel"]() --[[ @ 0]]
	f1_local5( f1_local6, f1_local7["lobbyRoot.lobbyNav"], function ( f32_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f32_arg0:get(),
			modelName = "lobbyRoot.lobbyNav"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7.viewmodelWeaponName, function ( f33_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f33_arg0:get(),
			modelName = "viewmodelWeaponName"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7["playerGadget2.state"], function ( f34_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f34_arg0:get(),
			modelName = "playerGadget2.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.PlayerAbilities.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7["playerGadget3.state"], function ( f35_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f35_arg0:get(),
			modelName = "playerGadget3.state"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7.weapon, function ( f36_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f36_arg0:get(),
			modelName = "weapon"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7.ammoInDWClip, function ( f37_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f37_arg0:get(),
			modelName = "ammoInDWClip"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local6 = self --[[ @ 0]]
	f1_local5 = self.subscribeToModel --[[ @ 0]]
	f1_local7 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local5( f1_local6, f1_local7.clipMaxAmmo, function ( f38_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f38_arg0:get(),
			modelName = "clipMaxAmmo"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.__resetProperties = function ( f39_arg0 )
	f39_arg0.ClipHero:completeAnimation() --[[ @ 0]]
	f39_arg0.Clip:completeAnimation() --[[ @ 0]]
	f39_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
	f39_arg0.ClipDual:completeAnimation() --[[ @ 0]]
	f39_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f39_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	f39_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f39_arg0.ClipHero:setAlpha( 0 ) --[[ @ 0]]
	f39_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f39_arg0.Clip:setTopBottom( 0, 0, 3.5, 29.5 ) --[[ @ 0]]
	f39_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
	f39_arg0.TotalAmmoLabel:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f39_arg0.TotalAmmoLabel:setTopBottom( 0, 0, 47, 63 ) --[[ @ 0]]
	f39_arg0.TotalAmmoLabel:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	f39_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
	f39_arg0.ClipDual:setLeftRight( 1, 1, -198, -10 ) --[[ @ 0]]
	f39_arg0.ClipDual:setTopBottom( 1, 1, -86.5, 30.5 ) --[[ @ 0]]
	f39_arg0.ClipDual:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f40_arg0, f40_arg1 )
			f40_arg0:__resetProperties() --[[ @ 0]]
			f40_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f40_arg0.Clip:completeAnimation() --[[ @ 0]]
			f40_arg0.Clip:setTopBottom( 0, 0, 17.5, 43.5 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.Clip ) --[[ @ 0]]
			f40_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f40_arg0.ClipHero:setLeftRight( 1, 2, -159, -159 ) --[[ @ 0]]
			f40_arg0.ClipHero:setTopBottom( 1, 2, -96, -96 ) --[[ @ 0]]
			f40_arg0.clipFinished( f40_arg0.ClipHero ) --[[ @ 0]]
		end
	},
	DisposableMags = {
		DefaultClip = function ( f41_arg0, f41_arg1 )
			f41_arg0:__resetProperties() --[[ @ 0]]
			f41_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f41_arg0.Clip:completeAnimation() --[[ @ 0]]
			f41_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f41_arg0.Clip:setTopBottom( 0, 0, 17.5, 43.5 ) --[[ @ 0]]
			f41_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.Clip ) --[[ @ 0]]
			f41_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f41_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f41_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f41_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.ClipHero ) --[[ @ 0]]
			f41_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f41_arg0.TotalAmmoLabel:setRGB( 0.8, 0.77, 0.64 ) --[[ @ 0]]
			f41_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f41_arg0.clipFinished( f41_arg0.TotalAmmoLabel ) --[[ @ 0]]
		end
	},
	HiddenGamemodeWeapon = {
		DefaultClip = function ( f42_arg0, f42_arg1 )
			f42_arg0:__resetProperties() --[[ @ 0]]
			f42_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f42_arg0.Clip:completeAnimation() --[[ @ 0]]
			f42_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.Clip ) --[[ @ 0]]
			f42_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f42_arg0.ClipHero:setLeftRight( 1, 2, 371, 371 ) --[[ @ 0]]
			f42_arg0.ClipHero:setTopBottom( 1, 2, -96, -96 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.ClipHero ) --[[ @ 0]]
			f42_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f42_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f42_arg0.clipFinished( f42_arg0.TotalAmmoLabel ) --[[ @ 0]]
		end
	},
	HeroWeapon = {
		DefaultClip = function ( f43_arg0, f43_arg1 )
			f43_arg0:__resetProperties() --[[ @ 0]]
			f43_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f43_arg0.Clip:completeAnimation() --[[ @ 0]]
			f43_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f43_arg0.Clip:setTopBottom( 0, 0, 17.5, 43.5 ) --[[ @ 0]]
			f43_arg0.Clip:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.Clip ) --[[ @ 0]]
			f43_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f43_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f43_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f43_arg0.ClipHero:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f43_arg0.ClipHero:setAlpha( 1 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.ClipHero ) --[[ @ 0]]
			f43_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f43_arg0.TotalAmmoLabel:setAlpha( 0 ) --[[ @ 0]]
			f43_arg0.clipFinished( f43_arg0.TotalAmmoLabel ) --[[ @ 0]]
		end
	},
	WeaponDual = {
		DefaultClip = function ( f44_arg0, f44_arg1 )
			f44_arg0:__resetProperties() --[[ @ 0]]
			f44_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f44_arg0.Clip:completeAnimation() --[[ @ 0]]
			f44_arg0.Clip:setLeftRight( 0, 0, 32, 64 ) --[[ @ 0]]
			f44_arg0.Clip:setTopBottom( 0, 0, 5, 31 ) --[[ @ 0]]
			f44_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.Clip ) --[[ @ 0]]
			f44_arg0.ClipDual:completeAnimation() --[[ @ 0]]
			f44_arg0.ClipDual:setLeftRight( 0, 0, 0, 32 ) --[[ @ 0]]
			f44_arg0.ClipDual:setTopBottom( 0, 0, 5, 31 ) --[[ @ 0]]
			f44_arg0.ClipDual:setAlpha( 1 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.ClipDual ) --[[ @ 0]]
			f44_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f44_arg0.ClipHero:setLeftRight( 1, 1, -218, -30 ) --[[ @ 0]]
			f44_arg0.ClipHero:setTopBottom( 1, 1, -78.5, 38.5 ) --[[ @ 0]]
			f44_arg0.clipFinished( f44_arg0.ClipHero ) --[[ @ 0]]
		end,
		Weapon3Digits = function ( f45_arg0, f45_arg1 )
			f45_arg0:__resetProperties() --[[ @ 0]]
			f45_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f45_arg0.Clip:completeAnimation() --[[ @ 0]]
			f45_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f45_arg0.clipFinished( f45_arg0.Clip ) --[[ @ 0]]
		end
	},
	Weapon = {
		DefaultClip = function ( f46_arg0, f46_arg1 )
			f46_arg0:__resetProperties() --[[ @ 0]]
			f46_arg0:setupElementClipCounter( 3 ) --[[ @ 0]]
			f46_arg0.Clip:completeAnimation() --[[ @ 0]]
			f46_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f46_arg0.Clip:setTopBottom( 0, 0, 4, 30 ) --[[ @ 0]]
			f46_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.Clip ) --[[ @ 0]]
			f46_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f46_arg0.ClipHero:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f46_arg0.ClipHero:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.ClipHero ) --[[ @ 0]]
			f46_arg0.TotalAmmoLabel:completeAnimation() --[[ @ 0]]
			f46_arg0.TotalAmmoLabel:setLeftRight( -0.48, 0.52, 31, 31 ) --[[ @ 0]]
			f46_arg0.TotalAmmoLabel:setTopBottom( 0, 0, 40, 56 ) --[[ @ 0]]
			f46_arg0.clipFinished( f46_arg0.TotalAmmoLabel ) --[[ @ 0]]
		end,
		Weapon3Digits = function ( f47_arg0, f47_arg1 )
			f47_arg0:__resetProperties() --[[ @ 0]]
			f47_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f47_arg0.Clip:completeAnimation() --[[ @ 0]]
			f47_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f47_arg0.clipFinished( f47_arg0.Clip ) --[[ @ 0]]
		end
	},
	Weapon3Digits = {
		DefaultClip = function ( f48_arg0, f48_arg1 )
			f48_arg0:__resetProperties() --[[ @ 0]]
			f48_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f48_arg0.Clip:completeAnimation() --[[ @ 0]]
			f48_arg0.Clip:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f48_arg0.Clip:setTopBottom( 0, 0, 4, 30 ) --[[ @ 0]]
			f48_arg0.Clip:setAlpha( 1 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.Clip ) --[[ @ 0]]
			f48_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f48_arg0.ClipHero:setLeftRight( 1, 2, -248, -248 ) --[[ @ 0]]
			f48_arg0.ClipHero:setTopBottom( 1, 2, -96, -96 ) --[[ @ 0]]
			f48_arg0.clipFinished( f48_arg0.ClipHero ) --[[ @ 0]]
		end,
		HeroWeapon = function ( f49_arg0, f49_arg1 )
			f49_arg0:__resetProperties() --[[ @ 0]]
			f49_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f49_arg0.ClipHero:completeAnimation() --[[ @ 0]]
			f49_arg0.ClipHero:setAlpha( 1 ) --[[ @ 0]]
			f49_arg0.clipFinished( f49_arg0.ClipHero ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.AmmoWidgetMP_ClipInfo.__onClose = function ( f50_arg0 )
	f50_arg0.Clip:close() --[[ @ 0]]
	f50_arg0.ClipDual:close() --[[ @ 0]]
	f50_arg0.ClipHero:close() --[[ @ 0]]
	f50_arg0.TotalAmmoLabel:close() --[[ @ 0]]
end
 --[[ @ 0]]
