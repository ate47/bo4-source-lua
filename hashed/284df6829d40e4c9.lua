-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:48
require( "x64:4c1fb01b47dac728" ) --[[ @ 0]]

CoD.BM_ContractProgress = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BM_ContractProgress.__defaultWidth = 400 --[[ @ 0]]
CoD.BM_ContractProgress.__defaultHeight = 400 --[[ @ 0]]
CoD.BM_ContractProgress.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.BM_ContractProgress ) --[[ @ 0]]
	self.id = "BM_ContractProgress" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local MeterGlowComplete = LUI.UIImage.new( 0.5, 0.5, -134, 134, 0.5, 0.5, -180, 88 ) --[[ @ 0]]
	MeterGlowComplete:setAlpha( 0 ) --[[ @ 0]]
	MeterGlowComplete:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_glow_complete" ) ) --[[ @ 0]]
	MeterGlowComplete:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_add" ) ) --[[ @ 0]]
	MeterGlowComplete:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	MeterGlowComplete:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterGlowComplete:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterGlowComplete:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterGlowComplete:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( MeterGlowComplete ) --[[ @ 0]]
	self.MeterGlowComplete = MeterGlowComplete --[[ @ 0]]
	
	local MeterGlow = LUI.UIImage.new( 0.5, 0.5, -133, 135, 0.5, 0.5, -180, 88 ) --[[ @ 0]]
	MeterGlow:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_glow" ) ) --[[ @ 0]]
	MeterGlow:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_add" ) ) --[[ @ 0]]
	MeterGlow:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterGlow:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterGlow:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterGlow:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterGlow:linkToElementModel( self, "progressRatio", true, function ( model )
		local f2_local0 = model:get() --[[ @ 0]]
		if f2_local0 ~= nil then
			MeterGlow:setShaderVector( 0, CoD.GetVectorComponentFromString( f2_local0, 1 ), CoD.GetVectorComponentFromString( f2_local0, 2 ), CoD.GetVectorComponentFromString( f2_local0, 3 ), CoD.GetVectorComponentFromString( f2_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MeterGlow ) --[[ @ 0]]
	self.MeterGlow = MeterGlow --[[ @ 0]]
	
	local MeterBack = LUI.UIImage.new( 0.5, 0.5, -116, 116, 0.5, 0.5, -162, 70 ) --[[ @ 0]]
	MeterBack:setRGB( 0.45, 0.45, 0.45 ) --[[ @ 0]]
	MeterBack:setAlpha( 0.96 ) --[[ @ 0]]
	MeterBack:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_empty" ) ) --[[ @ 0]]
	MeterBack:setMaterial( LUI.UIImage.GetCachedMaterial( @"ui_add" ) ) --[[ @ 0]]
	self:addElement( MeterBack ) --[[ @ 0]]
	self.MeterBack = MeterBack --[[ @ 0]]
	
	local MeterFrontIngame = LUI.UIImage.new( 0.5, 0.5, -116, 116, 0.5, 0.5, -162, 70 ) --[[ @ 0]]
	MeterFrontIngame:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_delta" ) ) --[[ @ 0]]
	MeterFrontIngame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	MeterFrontIngame:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontIngame:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontIngame:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontIngame:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontIngame:linkToElementModel( self, "progressRatioIngame", true, function ( model )
		local f3_local0 = model:get() --[[ @ 0]]
		if f3_local0 ~= nil then
			MeterFrontIngame:setShaderVector( 0, CoD.GetVectorComponentFromString( f3_local0, 1 ), CoD.GetVectorComponentFromString( f3_local0, 2 ), CoD.GetVectorComponentFromString( f3_local0, 3 ), CoD.GetVectorComponentFromString( f3_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MeterFrontIngame ) --[[ @ 0]]
	self.MeterFrontIngame = MeterFrontIngame --[[ @ 0]]
	
	local MeterFront = LUI.UIImage.new( 0.5, 0.5, -116, 116, 0.5, 0.5, -162, 70 ) --[[ @ 0]]
	MeterFront:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_fill" ) ) --[[ @ 0]]
	MeterFront:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	MeterFront:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFront:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFront:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterFront:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterFront:linkToElementModel( self, "progressRatio", true, function ( model )
		local f4_local0 = model:get() --[[ @ 0]]
		if f4_local0 ~= nil then
			MeterFront:setShaderVector( 0, CoD.GetVectorComponentFromString( f4_local0, 1 ), CoD.GetVectorComponentFromString( f4_local0, 2 ), CoD.GetVectorComponentFromString( f4_local0, 3 ), CoD.GetVectorComponentFromString( f4_local0, 4 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( MeterFront ) --[[ @ 0]]
	self.MeterFront = MeterFront --[[ @ 0]]
	
	local MeterFrontComplete = LUI.UIImage.new( 0.5, 0.5, -116, 116, 0.5, 0.5, -162, 70 ) --[[ @ 0]]
	MeterFrontComplete:setAlpha( 0 ) --[[ @ 0]]
	MeterFrontComplete:setImage( RegisterImage( @"uie_ui_menu_contracts_ring_complete" ) ) --[[ @ 0]]
	MeterFrontComplete:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_clock_normal" ) ) --[[ @ 0]]
	MeterFrontComplete:setShaderVector( 0, 1, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontComplete:setShaderVector( 1, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontComplete:setShaderVector( 2, 0.5, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontComplete:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	MeterFrontComplete:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( MeterFrontComplete ) --[[ @ 0]]
	self.MeterFrontComplete = MeterFrontComplete --[[ @ 0]]
	
	local Icon = LUI.UIImage.new( 0.5, 0.5, -75, 75, 0.5, 0.5, -119, 31 ) --[[ @ 0]]
	Icon:linkToElementModel( self, "contractIcon", true, function ( model )
		local f5_local0 = model:get() --[[ @ 0]]
		if f5_local0 ~= nil then
			Icon:setImage( RegisterImage( f5_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( Icon ) --[[ @ 0]]
	self.Icon = Icon --[[ @ 0]]
	
	local NumericProgress = LUI.UIText.new( 0.5, 0.5, -200, 200, 1, 1, -120, -68 ) --[[ @ 0]]
	NumericProgress:setTTF( "ttmussels_regular" ) --[[ @ 0]]
	NumericProgress:setLetterSpacing( 4 ) --[[ @ 0]]
	NumericProgress:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	NumericProgress:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	NumericProgress:linkToElementModel( self, "progressRatioText", true, function ( model )
		local f6_local0 = model:get() --[[ @ 0]]
		if f6_local0 ~= nil then
			NumericProgress:setText( f6_local0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( NumericProgress ) --[[ @ 0]]
	self.NumericProgress = NumericProgress --[[ @ 0]]
	
	local Difficulty = CoD.BM_ContractDifficultyIndicator.new( f1_arg0, f1_arg1, 0.5, 0.5, -200, 200, 0.5, 0.5, -200, 200 ) --[[ @ 0]]
	Difficulty:mergeStateConditions( {
		{
			stateName = "Hard",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueEqualTo( element, f1_arg1, "difficulty", 1 )
			end
		}
	} ) --[[ @ 0]]
	Difficulty:linkToElementModel( Difficulty, "difficulty", true, function ( model )
		f1_arg0:updateElementState( Difficulty, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = model:get(),
			modelName = "difficulty"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	Difficulty:linkToElementModel( self, nil, false, function ( model )
		Difficulty:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( Difficulty ) --[[ @ 0]]
	self.Difficulty = Difficulty --[[ @ 0]]
	
	local Completed = LUI.UIText.new( 0.5, 0.5, -200, 200, 1, 1, -108, -78 ) --[[ @ 0]]
	Completed:setRGB( ColorSet.T8__GREEN.r, ColorSet.T8__GREEN.g, ColorSet.T8__GREEN.b ) --[[ @ 0]]
	Completed:setAlpha( 0 ) --[[ @ 0]]
	Completed:setText( LocalizeToUpperString( @"menu/completed" ) ) --[[ @ 0]]
	Completed:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	Completed:setLetterSpacing( 2 ) --[[ @ 0]]
	Completed:setAlignment( Enum[@"luialignment"][@"lui_alignment_center"] ) --[[ @ 0]]
	Completed:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( Completed ) --[[ @ 0]]
	self.Completed = Completed --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BM_ContractProgress.__resetProperties = function ( f10_arg0 )
	f10_arg0.NumericProgress:completeAnimation() --[[ @ 0]]
	f10_arg0.Completed:completeAnimation() --[[ @ 0]]
	f10_arg0.MeterFront:completeAnimation() --[[ @ 0]]
	f10_arg0.MeterFrontComplete:completeAnimation() --[[ @ 0]]
	f10_arg0.MeterGlow:completeAnimation() --[[ @ 0]]
	f10_arg0.MeterGlowComplete:completeAnimation() --[[ @ 0]]
	f10_arg0.MeterFrontIngame:completeAnimation() --[[ @ 0]]
	f10_arg0.NumericProgress:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.Completed:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.MeterFront:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f10_arg0.MeterFront:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.MeterFrontComplete:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.MeterGlow:setAlpha( 1 ) --[[ @ 0]]
	f10_arg0.MeterGlowComplete:setRGB( 1, 1, 1 ) --[[ @ 0]]
	f10_arg0.MeterGlowComplete:setAlpha( 0 ) --[[ @ 0]]
	f10_arg0.MeterFrontIngame:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BM_ContractProgress.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f11_arg0, f11_arg1 )
			f11_arg0:__resetProperties() --[[ @ 0]]
			f11_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	Completed = {
		DefaultClip = function ( f12_arg0, f12_arg1 )
			f12_arg0:__resetProperties() --[[ @ 0]]
			f12_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f12_arg0.MeterGlowComplete:completeAnimation() --[[ @ 0]]
			f12_arg0.MeterGlowComplete:setRGB( 0.54, 1, 0 ) --[[ @ 0]]
			f12_arg0.MeterGlowComplete:setAlpha( 0.6 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.MeterGlowComplete ) --[[ @ 0]]
			f12_arg0.MeterGlow:completeAnimation() --[[ @ 0]]
			f12_arg0.MeterGlow:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.MeterGlow ) --[[ @ 0]]
			f12_arg0.MeterFrontIngame:completeAnimation() --[[ @ 0]]
			f12_arg0.MeterFrontIngame:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.MeterFrontIngame ) --[[ @ 0]]
			f12_arg0.MeterFront:completeAnimation() --[[ @ 0]]
			f12_arg0.MeterFront:setRGB( ColorSet.SelectedGreen.r, ColorSet.SelectedGreen.g, ColorSet.SelectedGreen.b ) --[[ @ 0]]
			f12_arg0.MeterFront:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.MeterFront ) --[[ @ 0]]
			f12_arg0.MeterFrontComplete:completeAnimation() --[[ @ 0]]
			f12_arg0.MeterFrontComplete:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.MeterFrontComplete ) --[[ @ 0]]
			f12_arg0.NumericProgress:completeAnimation() --[[ @ 0]]
			f12_arg0.NumericProgress:setAlpha( 0 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.NumericProgress ) --[[ @ 0]]
			f12_arg0.Completed:completeAnimation() --[[ @ 0]]
			f12_arg0.Completed:setAlpha( 1 ) --[[ @ 0]]
			f12_arg0.clipFinished( f12_arg0.Completed ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BM_ContractProgress.__onClose = function ( f13_arg0 )
	f13_arg0.MeterGlow:close() --[[ @ 0]]
	f13_arg0.MeterFrontIngame:close() --[[ @ 0]]
	f13_arg0.MeterFront:close() --[[ @ 0]]
	f13_arg0.Icon:close() --[[ @ 0]]
	f13_arg0.NumericProgress:close() --[[ @ 0]]
	f13_arg0.Difficulty:close() --[[ @ 0]]
end
 --[[ @ 0]]
