-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/craft/emblemeditor/colorpicker/emblemcolorelement" ) --[[ @ 0]]
require( "x64:b6da5f5f17e9c79" ) --[[ @ 0]]
require( "ui/uieditor/widgets/craft/paintshop/paintshopbuttonprompt" ) --[[ @ 0]]

CoD.EmblemEditorGradientColorSwatch = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.__defaultWidth = 1020 --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.__defaultHeight = 240 --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	self:setClass( CoD.EmblemEditorGradientColorSwatch ) --[[ @ 0]]
	self.id = "EmblemEditorGradientColorSwatch" --[[ @ 0]]
	self.soundSet = "SelectColor_ColorSwatchPicker" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local ColorPickerBkgd0 = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	ColorPickerBkgd0:setAlpha( 0.5 ) --[[ @ 0]]
	ColorPickerBkgd0:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_E2354BE557C4C7A" ) ) --[[ @ 0]]
	ColorPickerBkgd0:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( ColorPickerBkgd0 ) --[[ @ 0]]
	self.ColorPickerBkgd0 = ColorPickerBkgd0 --[[ @ 0]]
	
	local NoiseTiledBacking = LUI.UIImage.new( 0, 0, 0, 1020, 0, 0, 0, 240 ) --[[ @ 0]]
	NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	NoiseTiledBacking:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_repeat_bg" ) ) --[[ @ 0]]
	NoiseTiledBacking:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	NoiseTiledBacking:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	NoiseTiledBacking:setupNineSliceShader( 196, 88 ) --[[ @ 0]]
	self:addElement( NoiseTiledBacking ) --[[ @ 0]]
	self.NoiseTiledBacking = NoiseTiledBacking --[[ @ 0]]
	
	local Frame = LUI.UIImage.new( 0, 1, -1, 1, 0, 1, -1, 1 ) --[[ @ 0]]
	Frame:setAlpha( 0.2 ) --[[ @ 0]]
	Frame:setImage( RegisterImage( @"uie_ui_menu_store_common_frame" ) ) --[[ @ 0]]
	Frame:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_nineslice_add" ) ) --[[ @ 0]]
	Frame:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Frame:setupNineSliceShader( 16, 16 ) --[[ @ 0]]
	self:addElement( Frame ) --[[ @ 0]]
	self.Frame = Frame --[[ @ 0]]
	
	local BarBacking = LUI.UIImage.new( 0, 0, 0, 1020, 0, 0, 0, 240 ) --[[ @ 0]]
	BarBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( BarBacking ) --[[ @ 0]]
	self.BarBacking = BarBacking --[[ @ 0]]
	
	local ColorBacking = LUI.UIImage.new( 0, 0, 0, 1020, 0, 0, 0, 202 ) --[[ @ 0]]
	ColorBacking:setRGB( 0, 0, 0 ) --[[ @ 0]]
	ColorBacking:setAlpha( 0.3 ) --[[ @ 0]]
	self:addElement( ColorBacking ) --[[ @ 0]]
	self.ColorBacking = ColorBacking --[[ @ 0]]
	
	local FooterStripe1 = LUI.UIImage.new( 0, 1, 0, 0, 1, 1, -38, 0 ) --[[ @ 0]]
	FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	FooterStripe1:setImage( RegisterImage( @"hash_2C7A051F5EFC70E5" ) ) --[[ @ 0]]
	FooterStripe1:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	FooterStripe1:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	FooterStripe1:setupNineSliceShader( 245, 40 ) --[[ @ 0]]
	self:addElement( FooterStripe1 ) --[[ @ 0]]
	self.FooterStripe1 = FooterStripe1 --[[ @ 0]]
	
	local lastSavedColor = CoD.EmblemColorSaved.new( f1_arg0, f1_arg1, 0, 0, 69, 126, 0, 0, 6, 196 ) --[[ @ 0]]
	lastSavedColor:linkToElementModel( self, nil, false, function ( model )
		lastSavedColor:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	lastSavedColor:registerEventHandler( "gain_focus", function ( element, event )
		local f3_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f3_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f3_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		if CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_0"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor0NoColor", false ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_1"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor1NoColor", false ) --[[ @ 0]]
		end
		return f3_local0
	end ) --[[ @ 0]]
	self:addElement( lastSavedColor ) --[[ @ 0]]
	self.lastSavedColor = lastSavedColor --[[ @ 0]]
	
	local emblemColorSwatch = LUI.UIList.new( f1_arg0, f1_arg1, -1, 0, nil, false, false, false, false ) --[[ @ 0]]
	emblemColorSwatch:setLeftRight( 0, 0, 142, 1014 ) --[[ @ 0]]
	emblemColorSwatch:setTopBottom( 0, 0, 6, 196 ) --[[ @ 0]]
	emblemColorSwatch:setWidgetType( CoD.EmblemColorElement ) --[[ @ 0]]
	emblemColorSwatch:setHorizontalCount( 13 ) --[[ @ 0]]
	emblemColorSwatch:setVerticalCount( 9 ) --[[ @ 0]]
	emblemColorSwatch:setSpacing( -1 ) --[[ @ 0]]
	emblemColorSwatch:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	emblemColorSwatch:setDataSource( "EmblemColorList" ) --[[ @ 0]]
	emblemColorSwatch:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f4_local0 = nil --[[ @ 0]]
		if CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_0"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor0NoColor", false ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_1"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectionChanged( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor1NoColor", false ) --[[ @ 0]]
		end
		return f4_local0
	end ) --[[ @ 0]]
	self:addElement( emblemColorSwatch ) --[[ @ 0]]
	self.emblemColorSwatch = emblemColorSwatch --[[ @ 0]]
	
	local toggleColorMixerButton = CoD.PaintshopButtonPrompt.new( f1_arg0, f1_arg1, 0, 0, 16, 366, 0, 0, 202, 248 ) --[[ @ 0]]
	toggleColorMixerButton:mergeStateConditions( {
		{
			stateName = "KM",
			condition = function ( menu, element, event )
				return AlwaysFalse()
			end
		},
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return IsMouseOrKeyboard( f1_arg1 )
			end
		}
	} ) --[[ @ 0]]
	toggleColorMixerButton:appendEventHandler( "input_source_changed", function ( f7_arg0, f7_arg1 )
		f7_arg1.menu = f7_arg1.menu or f1_arg0 --[[ @ 0]]
		f1_arg0:updateElementState( toggleColorMixerButton, f7_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	local dividerV = toggleColorMixerButton --[[ @ 0]]
	local noColor = toggleColorMixerButton.subscribeToModel --[[ @ 0]]
	local dividerH = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	noColor( dividerV, dividerH.LastInput, function ( f8_arg0 )
		f1_arg0:updateElementState( toggleColorMixerButton, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "LastInput"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	toggleColorMixerButton.label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_C8E4DA2A7FB0D28" ) ) --[[ @ 0]]
	toggleColorMixerButton:subscribeToGlobalModel( f1_arg1, "Controller", "back_button_image", function ( model )
		local f9_local0 = model:get() --[[ @ 0]]
		if f9_local0 ~= nil then
			toggleColorMixerButton.buttonPromptImage:setImage( RegisterImage( f9_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( toggleColorMixerButton ) --[[ @ 0]]
	self.toggleColorMixerButton = toggleColorMixerButton --[[ @ 0]]
	
	noColor = CoD.EmblemColorSaved.new( f1_arg0, f1_arg1, 0, 0, 7.5, 64.5, 0, 0, 6, 196 ) --[[ @ 0]]
	noColor.colorElement:setImage( RegisterImage( @"uie_t7_menu_paintshop_transparent" ) ) --[[ @ 0]]
	noColor:registerEventHandler( "gain_focus", function ( element, event )
		local f10_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f10_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f10_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		if CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_0"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectNoColor( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor0NoColor", true ) --[[ @ 0]]
		elseif CoD.ModelUtility.IsModelValueEqualToEnum( f1_arg1, "Emblem.EmblemProperties.colorNum", Enum[@"customizationcolornum"][@"customization_color_1"] ) then
			CoD.CraftUtility.EmblemChooseColor_SelectNoColor( self, element, f1_arg1 ) --[[ @ 0]]
			SetProperty( self, "isColor1NoColor", true ) --[[ @ 0]]
		end
		return f10_local0
	end ) --[[ @ 0]]
	noColor:registerEventHandler( "lose_focus", function ( element, event )
		local f11_local0 = nil --[[ @ 0]]
		if element.loseFocus then
			f11_local0 = element:loseFocus( event ) --[[ @ 0]]
		elseif element.super.loseFocus then
			f11_local0 = element.super:loseFocus( event ) --[[ @ 0]]
		end
		CoD.CraftUtility.EmblemChooseColor_NoColorLoseFocus( self, element, f1_arg1 ) --[[ @ 0]]
		return f11_local0
	end ) --[[ @ 0]]
	self:addElement( noColor ) --[[ @ 0]]
	self.noColor = noColor --[[ @ 0]]
	
	dividerV = LUI.UIImage.new( 0.5, 0.5, -379.5, -375.5, 0, 0, 0, 202 ) --[[ @ 0]]
	dividerV:setAlpha( 0.2 ) --[[ @ 0]]
	dividerV:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	dividerV:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	dividerV:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerV:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( dividerV ) --[[ @ 0]]
	self.dividerV = dividerV --[[ @ 0]]
	
	dividerH = LUI.UIImage.new( 0, 0, 0, 960, 0, 0, 201, 205 ) --[[ @ 0]]
	dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	dividerH:setImage( RegisterImage( @"hash_484B43D5B04D263A" ) ) --[[ @ 0]]
	dividerH:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_16CBE95C250C6D15" ) ) --[[ @ 0]]
	dividerH:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	dividerH:setupNineSliceShader( 8, 4 ) --[[ @ 0]]
	self:addElement( dividerH ) --[[ @ 0]]
	self.dividerH = dividerH --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "Visible",
			condition = function ( menu, element, event )
				return CoD.CraftUtility.IsEmblemEditorPropertyEqualTo( f1_arg1, "isGradientMode", 1 ) and CoD.CraftUtility.IsEmblemEditorPropertyEqualToEnum( f1_arg1, "colorMode", Enum[@"customizationcolormode"][@"customization_color_mode_solid"] )
			end
		}
	} ) --[[ @ 0]]
	local f1_local13 = self --[[ @ 0]]
	local f1_local14 = self.subscribeToModel --[[ @ 0]]
	local f1_local15 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local14( f1_local13, f1_local15.isGradientMode, function ( f13_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f13_arg0:get(),
			modelName = "isGradientMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local13 = self --[[ @ 0]]
	f1_local14 = self.subscribeToModel --[[ @ 0]]
	f1_local15 = DataSources.EmblemProperties.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local14( f1_local13, f1_local15.colorMode, function ( f14_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f14_arg0:get(),
			modelName = "colorMode"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	lastSavedColor.id = "lastSavedColor" --[[ @ 0]]
	emblemColorSwatch.id = "emblemColorSwatch" --[[ @ 0]]
	noColor.id = "noColor" --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.__resetProperties = function ( f15_arg0 )
	f15_arg0.emblemColorSwatch:completeAnimation() --[[ @ 0]]
	f15_arg0.lastSavedColor:completeAnimation() --[[ @ 0]]
	f15_arg0.ColorPickerBkgd0:completeAnimation() --[[ @ 0]]
	f15_arg0.toggleColorMixerButton:completeAnimation() --[[ @ 0]]
	f15_arg0.noColor:completeAnimation() --[[ @ 0]]
	f15_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
	f15_arg0.BarBacking:completeAnimation() --[[ @ 0]]
	f15_arg0.ColorBacking:completeAnimation() --[[ @ 0]]
	f15_arg0.FooterStripe1:completeAnimation() --[[ @ 0]]
	f15_arg0.dividerV:completeAnimation() --[[ @ 0]]
	f15_arg0.dividerH:completeAnimation() --[[ @ 0]]
	f15_arg0.Frame:completeAnimation() --[[ @ 0]]
	f15_arg0.emblemColorSwatch:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.lastSavedColor:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.ColorPickerBkgd0:setAlpha( 0.5 ) --[[ @ 0]]
	f15_arg0.toggleColorMixerButton:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.noColor:setAlpha( 1 ) --[[ @ 0]]
	f15_arg0.NoiseTiledBacking:setAlpha( 0.5 ) --[[ @ 0]]
	f15_arg0.BarBacking:setAlpha( 0.3 ) --[[ @ 0]]
	f15_arg0.ColorBacking:setAlpha( 0.3 ) --[[ @ 0]]
	f15_arg0.FooterStripe1:setAlpha( 0.1 ) --[[ @ 0]]
	f15_arg0.dividerV:setAlpha( 0.2 ) --[[ @ 0]]
	f15_arg0.dividerH:setAlpha( 0.2 ) --[[ @ 0]]
	f15_arg0.Frame:setAlpha( 0.2 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 12 ) --[[ @ 0]]
			f16_arg0.ColorPickerBkgd0:completeAnimation() --[[ @ 0]]
			f16_arg0.ColorPickerBkgd0:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ColorPickerBkgd0 ) --[[ @ 0]]
			f16_arg0.NoiseTiledBacking:completeAnimation() --[[ @ 0]]
			f16_arg0.NoiseTiledBacking:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.NoiseTiledBacking ) --[[ @ 0]]
			f16_arg0.Frame:completeAnimation() --[[ @ 0]]
			f16_arg0.Frame:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.Frame ) --[[ @ 0]]
			f16_arg0.BarBacking:completeAnimation() --[[ @ 0]]
			f16_arg0.BarBacking:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.BarBacking ) --[[ @ 0]]
			f16_arg0.ColorBacking:completeAnimation() --[[ @ 0]]
			f16_arg0.ColorBacking:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.ColorBacking ) --[[ @ 0]]
			f16_arg0.FooterStripe1:completeAnimation() --[[ @ 0]]
			f16_arg0.FooterStripe1:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.FooterStripe1 ) --[[ @ 0]]
			f16_arg0.lastSavedColor:completeAnimation() --[[ @ 0]]
			f16_arg0.lastSavedColor:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.lastSavedColor ) --[[ @ 0]]
			f16_arg0.emblemColorSwatch:completeAnimation() --[[ @ 0]]
			f16_arg0.emblemColorSwatch:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.emblemColorSwatch ) --[[ @ 0]]
			f16_arg0.toggleColorMixerButton:completeAnimation() --[[ @ 0]]
			f16_arg0.toggleColorMixerButton:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.toggleColorMixerButton ) --[[ @ 0]]
			f16_arg0.noColor:completeAnimation() --[[ @ 0]]
			f16_arg0.noColor:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.noColor ) --[[ @ 0]]
			f16_arg0.dividerV:completeAnimation() --[[ @ 0]]
			f16_arg0.dividerV:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.dividerV ) --[[ @ 0]]
			f16_arg0.dividerH:completeAnimation() --[[ @ 0]]
			f16_arg0.dividerH:setAlpha( 0 ) --[[ @ 0]]
			f16_arg0.clipFinished( f16_arg0.dividerH ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f17_arg0, f17_arg1 )
			f17_arg0:__resetProperties() --[[ @ 0]]
			f17_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.EmblemEditorGradientColorSwatch.__onClose = function ( f18_arg0 )
	f18_arg0.lastSavedColor:close() --[[ @ 0]]
	f18_arg0.emblemColorSwatch:close() --[[ @ 0]]
	f18_arg0.toggleColorMixerButton:close() --[[ @ 0]]
	f18_arg0.noColor:close() --[[ @ 0]]
end
 --[[ @ 0]]
