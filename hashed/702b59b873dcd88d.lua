-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 20-02-2025 19:35
require( "x64:6bc6e2379d2241fb" ) --[[ @ 0]]
require( "ui/uieditor/widgets/fileshare/fullscreenpopup/fullscreenpopuptemplate" ) --[[ @ 0]]
require( "x64:15d80cb371475b19" ) --[[ @ 0]]
require( "x64:179ffb6336ac6e4c" ) --[[ @ 0]]
require( "x64:6156d841adc02c80" ) --[[ @ 0]]
require( "ui/uieditor/widgets/playercard/selfidentitybadge" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_codpoints" ) --[[ @ 0]]

CoD.ItemShopConfirmation = InheritFrom( CoD.Menu ) --[[ @ 0]]
LUI.createMenu.ItemShopConfirmation = function ( f1_arg0, f1_arg1 )
	local self = CoD.Menu.NewForUIEditor( "ItemShopConfirmation", f1_arg0 ) --[[ @ 0]]
	local f1_local1 = self --[[ @ 0]]
	CoD.BaseUtility.SetModelFromUserData( f1_arg0, self, f1_arg1._model ) --[[ @ 0]]
	SetMenuProperty( f1_local1, "_closeAndGoBack", true ) --[[ @ 0]]
	CoD.BaseUtility.SetPropertiesFromUserData( self, f1_arg1._properties ) --[[ @ 0]]
	self:setClass( CoD.ItemShopConfirmation ) --[[ @ 0]]
	self.soundSet = "FrontendMain" --[[ @ 0]]
	self:setOwner( f1_arg0 ) --[[ @ 0]]
	self:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	self:setTopBottom( 0, 1, 0, 0 ) --[[ @ 0]]
	self:playSound( "menu_open", f1_arg0 ) --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_local1:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local FullscreenPopupTemplate = CoD.FullscreenPopupTemplate.new( f1_local1, f1_arg0, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	FullscreenPopupTemplate:mergeStateConditions( {
		{
			stateName = "WorkingState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "WorkingState" )
			end
		},
		{
			stateName = "ErrorState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "ErrorState" )
			end
		},
		{
			stateName = "CustomState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "CustomState" )
			end
		},
		{
			stateName = "FinishedState",
			condition = function ( menu, element, event )
				return IsElementInState( element, "FinishedState" )
			end
		}
	} ) --[[ @ 0]]
	FullscreenPopupTemplate.ButtonList:setWidgetType( CoD.ItemShopButton ) --[[ @ 0]]
	FullscreenPopupTemplate.Subtitle:setText( CoD.BlackMarketUtility.FreePromptDescIfPriceIsZero( self:getModel(), @"hash_490DD4B440AD5949" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.ErrorSubtitle:setText( LocalizeToUpperString( @"hash_5306208DB7BBE129" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.WorkingTitle:setText( LocalizeToUpperString( @"hash_9D00A7D3D969F6E" ) ) --[[ @ 0]]
	FullscreenPopupTemplate.DoneTitle:setText( LocalizeToUpperString( @"hash_583048BBBD98FC6A" ) ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, nil, false, function ( model )
		FullscreenPopupTemplate:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	FullscreenPopupTemplate:linkToElementModel( self, "name", true, function ( model )
		local f7_local0 = model:get() --[[ @ 0]]
		if f7_local0 ~= nil then
			FullscreenPopupTemplate.Title:setText( CoD.BlackMarketUtility.FreePromptTitleIfPriceIsZero( self:getModel(), LocalizeIntoString( @"hash_663FCD1B0849669E", f7_local0 ) ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalFirst( FullscreenPopupTemplate, "setState", function ( element, controller, f8_arg2, f8_arg3, f8_arg4 )
		if IsPC() and IsElementInState( element, "FinishedState" ) then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		elseif IsPC() and IsElementInState( element, "ErrorState" ) then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
		elseif IsPC() then
			CoD.PCUtility.LinkPCSmallCloseButtonToInput( f1_local1, controller, element, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"] ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( FullscreenPopupTemplate ) --[[ @ 0]]
	self.FullscreenPopupTemplate = FullscreenPopupTemplate --[[ @ 0]]
	
	local SelfIdentityBadge = CoD.SelfIdentityBadge.new( f1_local1, f1_arg0, 0.5, 0.5, 541, 872, 0, 0, 33.5, 98.5 ) --[[ @ 0]]
	SelfIdentityBadge:setAlpha( 0 ) --[[ @ 0]]
	SelfIdentityBadge:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		SelfIdentityBadge:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SelfIdentityBadge ) --[[ @ 0]]
	self.SelfIdentityBadge = SelfIdentityBadge --[[ @ 0]]
	
	local Linker = LUI.UIImage.new( 0.5, 0.5, -330, -326, 0.5, 0.5, -192, 205 ) --[[ @ 0]]
	Linker:setRGB( ColorSet.T8__BEIGE__HEADER.r, ColorSet.T8__BEIGE__HEADER.g, ColorSet.T8__BEIGE__HEADER.b ) --[[ @ 0]]
	Linker:setAlpha( 0.35 ) --[[ @ 0]]
	Linker:setImage( RegisterImage( @"hash_C49B0C8991A541F" ) ) --[[ @ 0]]
	Linker:setMaterial( LUI.UIImage.GetCachedMaterial( @"hash_67C9C02F608D0A75" ) ) --[[ @ 0]]
	Linker:setShaderVector( 0, 0, 0, 0, 0 ) --[[ @ 0]]
	Linker:setupNineSliceShader( 4, 8 ) --[[ @ 0]]
	self:addElement( Linker ) --[[ @ 0]]
	self.Linker = Linker --[[ @ 0]]
	
	local CornerPip = LUI.UIImage.new( 0.5, 0.5, -802.5, -786.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip ) --[[ @ 0]]
	self.CornerPip = CornerPip --[[ @ 0]]
	
	local CornerPip2 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, -187, -171 ) --[[ @ 0]]
	CornerPip2:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip2:setZRot( 270 ) --[[ @ 0]]
	CornerPip2:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip2 ) --[[ @ 0]]
	self.CornerPip2 = CornerPip2 --[[ @ 0]]
	
	local CornerPip3 = LUI.UIImage.new( 0.5, 0.5, -803.5, -787.5, 0.5, 0.5, 122, 138 ) --[[ @ 0]]
	CornerPip3:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip3:setZRot( 90 ) --[[ @ 0]]
	CornerPip3:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip3 ) --[[ @ 0]]
	self.CornerPip3 = CornerPip3 --[[ @ 0]]
	
	local CornerPip4 = LUI.UIImage.new( 0.5, 0.5, -494.5, -478.5, 0.5, 0.5, 121, 137 ) --[[ @ 0]]
	CornerPip4:setAlpha( 0.4 ) --[[ @ 0]]
	CornerPip4:setZRot( 180 ) --[[ @ 0]]
	CornerPip4:setImage( RegisterImage( @"uie_ui_menu_specialist_hub_window_corner" ) ) --[[ @ 0]]
	self:addElement( CornerPip4 ) --[[ @ 0]]
	self.CornerPip4 = CornerPip4 --[[ @ 0]]
	
	local f1_local9 = nil --[[ @ 0]]
	self.Black = LUI.UIElement.createFake() --[[ @ 0]]
	local BlackPC = nil --[[ @ 0]]
	
	BlackPC = LUI.UIImage.new( 0.5, 0.5, -960, -330, 0.5, 0.5, -214.5, 230.5 ) --[[ @ 0]]
	BlackPC:setRGB( 0, 0, 0 ) --[[ @ 0]]
	BlackPC:setMaterial( LUI.UIImage.GetCachedMaterial( @"uie_wipe_delta_normal" ) ) --[[ @ 0]]
	BlackPC:setShaderVector( 0, 0, 1, 0, 0 ) --[[ @ 0]]
	BlackPC:setShaderVector( 1, 0.16, 0.16, 0, 0 ) --[[ @ 0]]
	BlackPC:setShaderVector( 2, 0, 1, 0, 0 ) --[[ @ 0]]
	BlackPC:setShaderVector( 3, 0, 0, 0, 0 ) --[[ @ 0]]
	BlackPC:setShaderVector( 4, 0, 0, 0, 0 ) --[[ @ 0]]
	self:addElement( BlackPC ) --[[ @ 0]]
	self.BlackPC = BlackPC --[[ @ 0]]
	
	local ContentImage = CoD.PurchaseItemShopContentImage.new( f1_local1, f1_arg0, 0.5, 0.5, -1244, -412, 0.5, 0.5, -204, 172 ) --[[ @ 0]]
	ContentImage:linkToElementModel( self, nil, false, function ( model )
		ContentImage:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( ContentImage ) --[[ @ 0]]
	self.ContentImage = ContentImage --[[ @ 0]]
	
	local CostText = LUI.UIText.new( 0.5, 0.5, -960, -330, 0.5, 0.5, 196, 226 ) --[[ @ 0]]
	CostText:setRGB( ColorSet.CodPointsNumber.r, ColorSet.CodPointsNumber.g, ColorSet.CodPointsNumber.b ) --[[ @ 0]]
	CostText:setTTF( "ttmussels_demibold" ) --[[ @ 0]]
	CostText:setAlignment( Enum[@"LUIAlignment"][@"hash_1FEEB12BCB0D7041"] ) --[[ @ 0]]
	CostText:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	CostText:linkToElementModel( self, "price", true, function ( model )
		local f11_local0 = model:get() --[[ @ 0]]
		if f11_local0 ~= nil then
			CostText:setText( LocalizeIntoStringIfNotEmpty( @"hash_56A3CC7BE3008989", f11_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( CostText ) --[[ @ 0]]
	self.CostText = CostText --[[ @ 0]]
	
	local StartMenuCODpoints = CoD.StartMenu_CODpoints.new( f1_local1, f1_arg0, 0.5, 0.5, 341, 445, 0, 0, 23.5, 103.5 ) --[[ @ 0]]
	StartMenuCODpoints:setAlpha( 0 ) --[[ @ 0]]
	StartMenuCODpoints:subscribeToGlobalModel( f1_arg0, "LootStreamProgress", "codPoints", function ( model )
		local f12_local0 = model:get() --[[ @ 0]]
		if f12_local0 ~= nil then
			StartMenuCODpoints.codpointsCount:setText( SetValueIfNumberEqualTo( -1, "-", f12_local0 ) ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:addElement( StartMenuCODpoints ) --[[ @ 0]]
	self.StartMenuCODpoints = StartMenuCODpoints --[[ @ 0]]
	
	local CommonIdentityWidgetStreamlinedPC = nil --[[ @ 0]]
	
	CommonIdentityWidgetStreamlinedPC = CoD.CommonIdentityWidgetStreamlined.new( f1_local1, f1_arg0, 0.5, 0.5, 426, 956, 0.5, 0.5, -282, -242 ) --[[ @ 0]]
	CommonIdentityWidgetStreamlinedPC:subscribeToGlobalModel( f1_arg0, "PerController", "identityBadge", function ( model )
		CommonIdentityWidgetStreamlinedPC:setModel( model, f1_arg0 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( CommonIdentityWidgetStreamlinedPC ) --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedPC = CommonIdentityWidgetStreamlinedPC --[[ @ 0]]
	
	local f1_local15 = nil --[[ @ 0]]
	self.CommonIdentityWidgetStreamlinedC = LUI.UIElement.createFake() --[[ @ 0]]
	
	local SpinnerLoadingAnimation = CoD.SpinnerLoadingAnimation.new( f1_local1, f1_arg0, 0.5, 0.5, -285, -225, 0.5, 0.5, -64, -4 ) --[[ @ 0]]
	SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( SpinnerLoadingAnimation ) --[[ @ 0]]
	self.SpinnerLoadingAnimation = SpinnerLoadingAnimation --[[ @ 0]]
	
	local TextBox = LUI.UIText.new( 0.5, 0.5, -269, 471, 0.5, 0.5, -132, -110 ) --[[ @ 0]]
	TextBox:setRGB( ColorSet.T8__OFF__GRAY.r, ColorSet.T8__OFF__GRAY.g, ColorSet.T8__OFF__GRAY.b ) --[[ @ 0]]
	TextBox:setAlpha( 0 ) --[[ @ 0]]
	TextBox:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"hash_65F5E0C5965105B7" ) ) --[[ @ 0]]
	TextBox:setTTF( "dinnext_regular" ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"LUIAlignment"][@"hash_558C8A85F2048829"] ) --[[ @ 0]]
	TextBox:setAlignment( Enum[@"LUIAlignment"][@"hash_3F41D595A2B0EDF3"] ) --[[ @ 0]]
	self:addElement( TextBox ) --[[ @ 0]]
	self.TextBox = TextBox --[[ @ 0]]
	
	self:linkToElementModel( self, "includesTiers", true, function ( model, f14_arg1 )
		CoD.Menu.UpdateButtonShownState( f14_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "price", true, function ( model, f15_arg1 )
		CoD.Menu.UpdateButtonShownState( f15_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:linkToElementModel( self, "openCrate", true, function ( model, f16_arg1 )
		CoD.Menu.UpdateButtonShownState( f16_arg1, f1_local1, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], nil, function ( element, menu, controller, model )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_1805EFA15E9E7E5A"], @"hash_370A9FDC87CD3D48", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	f1_local1:AddButtonCallbackFunction( self, f1_arg0, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], nil, function ( element, menu, controller, model )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and MenuPropertyIsTrue( menu, "_isContract" ) then
			DelayCloseAndGoBack( menu, controller, 0 ) --[[ @ 0]]
			ForceNotifyGlobalModel( controller, "ContractsForceUpdate" ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			GoBack( self, controller ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( self, controller, "price", 0 ) then
			SetElementWorkingStateAndPurchaseDWSKU( self.FullscreenPopupTemplate, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, controller, "openCrate", 1 ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( self, controller, "price", 0 ) then
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			local f19_local0 = CoD.BlackMarketUtility.OpenSpecialDealBribeCrate --[[ @ 0]]
			local f19_local1 = self --[[ @ 0]]
			local f19_local2 = controller --[[ @ 0]]
			local f19_local3 = menu --[[ @ 0]]
			local f19_local4 = {} --[[ @ 0]]
			local f19_local5 = self:getModel() --[[ @ 0]]
			f19_local4.crateType = f19_local5.openCrate:get() --[[ @ 0]]
			f19_local0( f19_local1, f19_local2, f19_local3, f19_local4 ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, controller, "openCrate", 1 ) then
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			local f19_local0 = CoD.BlackMarketUtility.OpenSpecialDealBribeCrate --[[ @ 0]]
			local f19_local1 = self --[[ @ 0]]
			local f19_local2 = controller --[[ @ 0]]
			local f19_local3 = menu --[[ @ 0]]
			local f19_local4 = {} --[[ @ 0]]
			local f19_local5 = self:getModel() --[[ @ 0]]
			f19_local4.crateType = f19_local5.openCrate:get() --[[ @ 0]]
			f19_local0( f19_local1, f19_local2, f19_local3, f19_local4 ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) then
			local f19_local0 = CoD.BlackMarketUtility.PurchaseSpecialDeal --[[ @ 0]]
			local f19_local1 = self --[[ @ 0]]
			local f19_local2 = self --[[ @ 0]]
			local f19_local3 = controller --[[ @ 0]]
			local f19_local4 = {} --[[ @ 0]]
			local f19_local5 = self:getModel() --[[ @ 0]]
			f19_local4.skuID = f19_local5.skuID:get() --[[ @ 0]]
			f19_local4.goBackMultiple = true --[[ @ 0]]
			f19_local4.triplePlay = true --[[ @ 0]]
			f19_local0( f19_local1, f19_local2, f19_local3, f19_local4 ) --[[ @ 0]]
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) then
			SetElementWorkingStateAndPurchaseDWSKU( self.FullscreenPopupTemplate, controller ) --[[ @ 0]]
			PlaySoundAlias( "uin_points_purchase" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and MenuPropertyIsTrue( menu, "_isContract" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_66393FF34EA56966", nil, nil ) --[[ @ 0]]
			return true
		elseif IsElementInState( self.FullscreenPopupTemplate, "ErrorState" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_0", nil, nil ) --[[ @ 0]]
			return false
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( self, controller, "price", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_685952ACC6D0C1B0", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, controller, "openCrate", 1 ) and CoD.ModelUtility.IsSelfModelValueGreaterThan( self, controller, "price", 0 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_685952ACC6D0C1B0", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueGreaterThanOrEqualTo( self, controller, "openCrate", 1 ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_1867BE59364DD53B", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_685952ACC6D0C1B0", nil, nil ) --[[ @ 0]]
			return true
		elseif not IsElementInState( self.FullscreenPopupTemplate, "WorkingState" ) and not IsElementInState( self.FullscreenPopupTemplate, "FinishedState" ) and not CoD.ModelUtility.IsSelfModelValueTrue( self, controller, "includesTiers" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"LUIButton"][@"hash_3755DA1E2E7C263F"], @"hash_1867BE59364DD53B", nil, nil ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "AutoEvents", "cycled", function ( model )
		if MenuPropertyIsTrue( f1_local1, "_isContract" ) and CoD.ContractUtility.OpenedContractExpired( self, self, f1_arg0 ) then
			GoBack( self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:subscribeToGlobalModel( f1_arg0, "GlobalModel", "ItemshopRotation.cycled", function ( model )
		if CoD.ModelUtility.IsGlobalModelValueTrue( "ItemshopRotation.cycled" ) and CoD.BlackMarketUtility.WasItemCycled( f1_arg0, self ) then
			GoBack( self, f1_arg0 ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	FullscreenPopupTemplate.buttons:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.buttonPC:setModel( self.buttonModel, f1_arg0 ) --[[ @ 0]]
	FullscreenPopupTemplate.id = "FullscreenPopupTemplate" --[[ @ 0]]
	SelfIdentityBadge.id = "SelfIdentityBadge" --[[ @ 0]]
	self:processEvent( {
		name = "menu_loaded",
		controller = f1_arg0
	} ) --[[ @ 0]]
	self.__defaultFocus = FullscreenPopupTemplate --[[ @ 0]]
	if CoD.isPC and (IsKeyboard( f1_arg0 ) or self.ignoreCursor) then
		self:restoreState( f1_arg0 ) --[[ @ 0]]
	end
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg0 ) --[[ @ 0]]
	end
	if CoD.ModelUtility.IsSelfModelValueTrue( self, f1_arg0, "isContract" ) then
		SetMenuProperty( f1_local1, "_isContract", true ) --[[ @ 0]]
	end
	return self
end
 --[[ @ 0]]
CoD.ItemShopConfirmation.__resetProperties = function ( f23_arg0 )
	f23_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
	f23_arg0.TextBox:completeAnimation() --[[ @ 0]]
	f23_arg0.SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
	f23_arg0.TextBox:setTopBottom( 0.5, 0.5, -132, -110 ) --[[ @ 0]]
	f23_arg0.TextBox:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.ItemShopConfirmation.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f24_arg0, f24_arg1 )
			f24_arg0:__resetProperties() --[[ @ 0]]
			f24_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f24_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
			f24_arg0.SpinnerLoadingAnimation:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.SpinnerLoadingAnimation ) --[[ @ 0]]
			f24_arg0.TextBox:completeAnimation() --[[ @ 0]]
			f24_arg0.TextBox:setAlpha( 0 ) --[[ @ 0]]
			f24_arg0.clipFinished( f24_arg0.TextBox ) --[[ @ 0]]
		end
	},
	UnlockingTiers = {
		DefaultClip = function ( f25_arg0, f25_arg1 )
			f25_arg0:__resetProperties() --[[ @ 0]]
			f25_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f25_arg0.SpinnerLoadingAnimation:completeAnimation() --[[ @ 0]]
			f25_arg0.SpinnerLoadingAnimation:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.SpinnerLoadingAnimation ) --[[ @ 0]]
			f25_arg0.TextBox:completeAnimation() --[[ @ 0]]
			f25_arg0.TextBox:setTopBottom( 0, 0, 406, 428 ) --[[ @ 0]]
			f25_arg0.TextBox:setAlpha( 1 ) --[[ @ 0]]
			f25_arg0.clipFinished( f25_arg0.TextBox ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.ItemShopConfirmation.__onClose = function ( f26_arg0 )
	f26_arg0.FullscreenPopupTemplate:close() --[[ @ 0]]
	f26_arg0.SelfIdentityBadge:close() --[[ @ 0]]
	f26_arg0.ContentImage:close() --[[ @ 0]]
	f26_arg0.CostText:close() --[[ @ 0]]
	f26_arg0.StartMenuCODpoints:close() --[[ @ 0]]
	f26_arg0.CommonIdentityWidgetStreamlinedPC:close() --[[ @ 0]]
	f26_arg0.CommonIdentityWidgetStreamlinedC:close() --[[ @ 0]]
	f26_arg0.SpinnerLoadingAnimation:close() --[[ @ 0]]
end
 --[[ @ 0]]
