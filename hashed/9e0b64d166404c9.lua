-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:51
require( "ui/uieditor/widgets/lobby/common/fe_focusbarcontainer" ) --[[ @ 0]]
require( "ui/uieditor/widgets/lobby/common/fe_titlenumbrdr" ) --[[ @ 0]]
require( "ui/uieditor/widgets/startmenu/startmenu_frame_nobg" ) --[[ @ 0]]
require( "x64:159857b73a9a23ab" ) --[[ @ 0]]

local f0_local0 = function ( f1_arg0, f1_arg1 )
	local f1_local0, f1_local1, f1_local2, f1_local3 = f1_arg0.FilledPartBg:getRect() --[[ @ 0]]
	local f1_local4 = f1_local2 - f1_local0 --[[ @ 0]]
	f1_arg0:processEvent( {
		name = "slider_updated",
		fraction = CoD.ColorUtility.ClampColor( f1_arg1.x - f1_local0, 0, f1_local4 ) / f1_local4,
		controller = f1_arg1.controller
	} ) --[[ @ 0]]
end
 --[[ @ 0]]
local f0_local1 = function ( f2_arg0 )
	local f2_local0, f2_local1, f2_local2, f2_local3 = f2_arg0.FilledPartBg:getLocalRect() --[[ @ 0]]
	local f2_local4 = f2_arg0.m_fraction * (f2_local2 - f2_local0) --[[ @ 0]]
	local f2_local5 = string.format( f2_arg0.m_formatString, f2_arg0.m_currentValue ) --[[ @ 0]]
	if f2_local5 == string.format( f2_arg0.m_formatString, -0 ) then
		f2_local5 = string.format( f2_arg0.m_formatString, -0 ) --[[ @ 0]]
	end
	f2_arg0.numeric:setText( f2_local5 ) --[[ @ 0]]
	f2_arg0.Bar:setLeftRight( true, false, f2_local0 + f2_local4 - f2_arg0.m_markerHalfWidth, f2_local0 + f2_local4 + f2_arg0.m_markerHalfWidth ) --[[ @ 0]]
	f2_arg0.FilledPart:setLeftRight( true, false, f2_local0, f2_local0 + f2_local4 ) --[[ @ 0]]
end
 --[[ @ 0]]
local PostLoadFunc = function ( self, controller, menu )
	self.m_forceMouseEventDispatch = true --[[ @ 0]]
	local f3_local0, f3_local1, f3_local2, f3_local3 = self.Bar:getLocalRect() --[[ @ 0]]
	self.m_markerHalfWidth = (f3_local2 - f3_local0) / 2 --[[ @ 0]]
	self.m_formatString = "%.2f" --[[ @ 0]]
	self.m_speedMaxMultiplier = 25 --[[ @ 0]]
	self.m_ownerController = controller --[[ @ 0]]
	self:registerEventHandler( "options_refresh", function ( element, event )
		if type( element.sliderRefresh ) == "function" then
			element.sliderRefresh( controller, element ) --[[ @ 0]]
			f0_local1( element ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:registerEventHandler( "slider_updated", function ( element, event )
		if type( element.sliderUpdated ) == "function" then
			element.sliderUpdated( controller, element, event.fraction ) --[[ @ 0]]
			f0_local1( element ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self:registerEventHandler( "update_bar", function ( element, event )
		local f6_local0 = element.m_slideDirection --[[ @ 0]]
		local f6_local1 = element.m_fraction --[[ @ 0]]
		local f6_local2 = element.m_currentSpeed --[[ @ 0]]
		if f6_local0 then
			element:processEvent( {
				name = "slider_updated",
				fraction = CoD.ColorUtility.ClampColor( f6_local1 + f6_local2 * f6_local0 * event.timeElapsed / 1000, 0, 1 ),
				controller = element.m_ownerController
			} ) --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.updateSlideDirection = function ( f7_arg0, f7_arg1 )
		f7_arg0.m_slideDirection = f7_arg1 --[[ @ 0]]
	end
	 --[[ @ 0]]
	self:registerEventHandler( "lose_focus", function ( element, event )
		element:updateSlideDirection( nil ) --[[ @ 0]]
		element.m_timer:close() --[[ @ 0]]
	end ) --[[ @ 0]]
	self:registerEventHandler( "check_pulse", function ( element, event )
		if self.m_beat then
			self.m_timer:close() --[[ @ 0]]
			self.m_heartbeat:close() --[[ @ 0]]
			self.m_beat = nil --[[ @ 0]]
		end
	end ) --[[ @ 0]]
	self.m_timer = LUI.UITimer.new( 1, "update_bar", false ) --[[ @ 0]]
	self.m_heartbeat = LUI.UITimer.new( 100, "check_pulse", false ) --[[ @ 0]]
	CoD.Menu.AddButtonCallbackFunction( menu, self, controller, Enum[@"luibutton"][@"lui_key_left"], "ui_navleft", function ( element, menu, controller, f10_arg3 )
		if not self.m_disableNavigation then
			if not self.m_beat then
				self:updateSlideDirection( -1 ) --[[ @ 0]]
				self:addElement( self.m_timer ) --[[ @ 0]]
				self.m_currentSpeed = self.m_sliderSpeed --[[ @ 0]]
				
				self.m_speedMax = self.m_sliderSpeed * self.m_speedMaxMultiplier --[[ @ 0]]
				self.m_beat = true --[[ @ 0]]
				self:addElement( self.m_heartbeat ) --[[ @ 0]]
			else
				self.m_heartbeat:reset() --[[ @ 0]]
				self.m_currentSpeed = math.min( self.m_currentSpeed * 1.1, self.m_speedMax ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
	CoD.Menu.AddButtonCallbackFunction( menu, self, controller, Enum[@"luibutton"][@"lui_key_right"], "ui_navright", function ( element, menu, controller, f11_arg3 )
		if not self.m_disableNavigation then
			if not self.m_beat then
				self:updateSlideDirection( 1 ) --[[ @ 0]]
				self:addElement( self.m_timer ) --[[ @ 0]]
				self.m_currentSpeed = self.m_sliderSpeed --[[ @ 0]]
				
				self.m_speedMax = self.m_sliderSpeed * self.m_speedMaxMultiplier --[[ @ 0]]
				self.m_beat = true --[[ @ 0]]
				self:addElement( self.m_heartbeat ) --[[ @ 0]]
			else
				self.m_heartbeat:reset() --[[ @ 0]]
				self.m_currentSpeed = math.min( self.m_currentSpeed * 1.1, self.m_speedMax ) --[[ @ 0]]
			end
		end
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Options_SliderBar = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.__defaultWidth = 750 --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.__defaultHeight = 60 --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.new = function ( f12_arg0, f12_arg1, f12_arg2, f12_arg3, f12_arg4, f12_arg5, f12_arg6, f12_arg7, f12_arg8, f12_arg9 )
	local self = LUI.UIElement.new( f12_arg2, f12_arg3, f12_arg4, f12_arg5, f12_arg6, f12_arg7, f12_arg8, f12_arg9 ) --[[ @ 0]]
	self:setClass( CoD.StartMenu_Options_SliderBar ) --[[ @ 0]]
	self.id = "StartMenu_Options_SliderBar" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	f12_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local fullBacking = LUI.UIImage.new( 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	fullBacking:setRGB( 0.1, 0.1, 0.1 ) --[[ @ 0]]
	fullBacking:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( fullBacking ) --[[ @ 0]]
	self.fullBacking = fullBacking --[[ @ 0]]
	
	local frameOutline = CoD.StartMenu_frame_noBG.new( f12_arg0, f12_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	frameOutline:setRGB( 0.87, 0.37, 0 ) --[[ @ 0]]
	frameOutline:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( frameOutline ) --[[ @ 0]]
	self.frameOutline = frameOutline --[[ @ 0]]
	
	local label = LUI.UIText.new( 0, 0, 12, 352, 0, 0, 8, 46 ) --[[ @ 0]]
	label:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	label:setTTF( "default" ) --[[ @ 0]]
	label:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	label:setAlignment( Enum[@"luialignment"][@"lui_alignment_top"] ) --[[ @ 0]]
	self:addElement( label ) --[[ @ 0]]
	self.label = label --[[ @ 0]]
	
	local numeric = LUI.UIText.new( 0, 0, 679, 741, 0, 0, 8, 46 ) --[[ @ 0]]
	numeric:setText( Engine[@"hash_4F9F1239CFD921FE"]( @"menu/new" ) ) --[[ @ 0]]
	numeric:setTTF( "default" ) --[[ @ 0]]
	numeric:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	self:addElement( numeric ) --[[ @ 0]]
	self.numeric = numeric --[[ @ 0]]
	
	local FilledPartBg = LUI.UIImage.new( 0, 0, 382, 652, 0.5, 0.5, -1, 1 ) --[[ @ 0]]
	FilledPartBg:setRGB( 0.55, 0.55, 0.55 ) --[[ @ 0]]
	FilledPartBg:setAlpha( 0 ) --[[ @ 0]]
	self:addElement( FilledPartBg ) --[[ @ 0]]
	self.FilledPartBg = FilledPartBg --[[ @ 0]]
	
	local FilledPart = LUI.UIImage.new( 0, 0, 385, 568, 0.5, 0.5, -3.5, 3.5 ) --[[ @ 0]]
	FilledPart:setRGB( 0.87, 0.37, 0 ) --[[ @ 0]]
	self:addElement( FilledPart ) --[[ @ 0]]
	self.FilledPart = FilledPart --[[ @ 0]]
	
	local StartMenuframenoBG00 = CoD.StartMenu_frame_noBG.new( f12_arg0, f12_arg1, 0, 1, 0, 0, 0, 1, 0, 0 ) --[[ @ 0]]
	self:addElement( StartMenuframenoBG00 ) --[[ @ 0]]
	self.StartMenuframenoBG00 = StartMenuframenoBG00 --[[ @ 0]]
	
	local FocusBarT = CoD.FE_FocusBarContainer.new( f12_arg0, f12_arg1, 0, 1, 0, 0, 0, 0, 0, 6 ) --[[ @ 0]]
	FocusBarT:setAlpha( 0 ) --[[ @ 0]]
	FocusBarT:setZoom( 1 ) --[[ @ 0]]
	self:addElement( FocusBarT ) --[[ @ 0]]
	self.FocusBarT = FocusBarT --[[ @ 0]]
	
	local FocusBarB = CoD.FE_FocusBarContainer.new( f12_arg0, f12_arg1, 0, 1, 0, 0, 1, 1, -8, 0 ) --[[ @ 0]]
	FocusBarB:setAlpha( 0 ) --[[ @ 0]]
	FocusBarB:setZoom( 1 ) --[[ @ 0]]
	self:addElement( FocusBarB ) --[[ @ 0]]
	self.FocusBarB = FocusBarB --[[ @ 0]]
	
	local FETitleNumBrdr0 = CoD.FE_TitleNumBrdr.new( f12_arg0, f12_arg1, 0, 1, 379, -91, 0, 1, 23, -23 ) --[[ @ 0]]
	self:addElement( FETitleNumBrdr0 ) --[[ @ 0]]
	self.FETitleNumBrdr0 = FETitleNumBrdr0 --[[ @ 0]]
	
	local Bar = CoD.StartMenu_Options_SliderBar_Bar.new( f12_arg0, f12_arg1, 0, 0, 567.5, 576.5, 0.5, 0.5, -16, 16 ) --[[ @ 0]]
	self:addElement( Bar ) --[[ @ 0]]
	self.Bar = Bar --[[ @ 0]]
	
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f12_arg1, f12_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.__resetProperties = function ( f13_arg0 )
	f13_arg0.FilledPart:completeAnimation() --[[ @ 0]]
	f13_arg0.numeric:completeAnimation() --[[ @ 0]]
	f13_arg0.frameOutline:completeAnimation() --[[ @ 0]]
	f13_arg0.FocusBarT:completeAnimation() --[[ @ 0]]
	f13_arg0.FocusBarB:completeAnimation() --[[ @ 0]]
	f13_arg0.Bar:completeAnimation() --[[ @ 0]]
	f13_arg0.FilledPart:setRGB( 0.87, 0.37, 0 ) --[[ @ 0]]
	f13_arg0.numeric:setAlpha( 1 ) --[[ @ 0]]
	f13_arg0.frameOutline:setAlpha( 0 ) --[[ @ 0]]
	f13_arg0.FocusBarT:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
	f13_arg0.FocusBarT:setTopBottom( 0, 0, 0, 6 ) --[[ @ 0]]
	f13_arg0.FocusBarT:setAlpha( 0 ) --[[ @ 0]]
	f13_arg0.FocusBarB:setAlpha( 0 ) --[[ @ 0]]
	f13_arg0.Bar:setRGB( 1, 1, 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f14_arg0, f14_arg1 )
			f14_arg0:__resetProperties() --[[ @ 0]]
			f14_arg0:setupElementClipCounter( 2 ) --[[ @ 0]]
			f14_arg0.numeric:completeAnimation() --[[ @ 0]]
			f14_arg0.numeric:setAlpha( 0.5 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.numeric ) --[[ @ 0]]
			f14_arg0.FilledPart:completeAnimation() --[[ @ 0]]
			f14_arg0.FilledPart:setRGB( 1, 1, 1 ) --[[ @ 0]]
			f14_arg0.clipFinished( f14_arg0.FilledPart ) --[[ @ 0]]
		end,
		Focus = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 4 ) --[[ @ 0]]
			f15_arg0.frameOutline:completeAnimation() --[[ @ 0]]
			f15_arg0.frameOutline:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.frameOutline ) --[[ @ 0]]
			f15_arg0.FocusBarT:completeAnimation() --[[ @ 0]]
			f15_arg0.FocusBarT:setLeftRight( 0, 1, 0, 0 ) --[[ @ 0]]
			f15_arg0.FocusBarT:setTopBottom( 0, 0, 0, 8 ) --[[ @ 0]]
			f15_arg0.FocusBarT:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.FocusBarT ) --[[ @ 0]]
			f15_arg0.FocusBarB:completeAnimation() --[[ @ 0]]
			f15_arg0.FocusBarB:setAlpha( 1 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.FocusBarB ) --[[ @ 0]]
			f15_arg0.Bar:completeAnimation() --[[ @ 0]]
			f15_arg0.Bar:setRGB( 0.87, 0.37, 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.Bar ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.StartMenu_Options_SliderBar.__onClose = function ( f16_arg0 )
	f16_arg0.frameOutline:close() --[[ @ 0]]
	f16_arg0.StartMenuframenoBG00:close() --[[ @ 0]]
	f16_arg0.FocusBarT:close() --[[ @ 0]]
	f16_arg0.FocusBarB:close() --[[ @ 0]]
	f16_arg0.FETitleNumBrdr0:close() --[[ @ 0]]
	f16_arg0.Bar:close() --[[ @ 0]]
end
 --[[ @ 0]]
