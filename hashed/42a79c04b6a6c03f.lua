-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:49
require( "ui/uieditor/widgets/reticles/blackcell/blackcellinternal" ) --[[ @ 0]]

CoD.BlackCell = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.BlackCell.__defaultWidth = 1920 --[[ @ 0]]
CoD.BlackCell.__defaultHeight = 1080 --[[ @ 0]]
CoD.BlackCell.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.HUDUtility.SetUpReticle( self, f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.BlackCell ) --[[ @ 0]]
	self.id = "BlackCell" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local internal = CoD.BlackCellInternal.new( f1_arg0, f1_arg1, 0.5, 0.5, -960, 960, 0.5, 0.5, -540, 540 ) --[[ @ 0]]
	internal:setAlpha( 0 ) --[[ @ 0]]
	internal:subscribeToGlobalModel( f1_arg1, "CurrentWeapon", nil, function ( model )
		internal:setModel( model, f1_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( internal ) --[[ @ 0]]
	self.internal = internal --[[ @ 0]]
	
	self:mergeStateConditions( {
		{
			stateName = "ADS",
			condition = function ( menu, element, event )
				local f3_local0 = CoD.ModelUtility.IsGlobalDataSourceModelValueTrue( f1_arg1, "CurrentWeapon", "lookingDownSights" ) --[[ @ 0]]
				if f3_local0 then
					if Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_draw_reticle"] ) then
						f3_local0 = not Engine[@"isvisibilitybitset"]( f1_arg1, Enum[@"uivisibilitybit"][@"bit_is_third_person"] ) --[[ @ 0]]
					else
						f3_local0 = true --[[ @ 0]]
					end
				end
				return f3_local0
			end
		}
	} ) --[[ @ 0]]
	local f1_local2 = self --[[ @ 0]]
	local f1_local3 = self.subscribeToModel --[[ @ 0]]
	local f1_local4 = DataSources.CurrentWeapon.getModel( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4.lookingDownSights, function ( f4_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "lookingDownSights"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_draw_reticle"]], function ( f5_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f5_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_draw_reticle"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	f1_local2 = self --[[ @ 0]]
	f1_local3 = self.subscribeToModel --[[ @ 0]]
	f1_local4 = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	f1_local3( f1_local2, f1_local4["UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_third_person"]], function ( f6_arg0 )
		f1_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f6_arg0:get(),
			modelName = "UIVisibilityBit." .. Enum[@"uivisibilitybit"][@"bit_is_third_person"]
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.BlackCell.__resetProperties = function ( f7_arg0 )
	f7_arg0.internal:completeAnimation() --[[ @ 0]]
	f7_arg0.internal:setAlpha( 0 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.BlackCell.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f8_arg0, f8_arg1 )
			f8_arg0:__resetProperties() --[[ @ 0]]
			f8_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	},
	ADS = {
		DefaultClip = function ( f9_arg0, f9_arg1 )
			f9_arg0:__resetProperties() --[[ @ 0]]
			f9_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f9_arg0.internal:completeAnimation() --[[ @ 0]]
			f9_arg0.internal:setAlpha( 1 ) --[[ @ 0]]
			f9_arg0.clipFinished( f9_arg0.internal ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.BlackCell.__onClose = function ( f10_arg0 )
	f10_arg0.internal:close() --[[ @ 0]]
end
 --[[ @ 0]]
