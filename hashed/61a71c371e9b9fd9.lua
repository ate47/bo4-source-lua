-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "ui/uieditor/widgets/callingcards/callingcards_cardwidget" ) --[[ @ 0]]
require( "ui/uieditor/widgets/challenges/challenges_callingcardprofiler" ) --[[ @ 0]]
require( "x64:79fe6ac43673588" ) --[[ @ 0]]
require( "x64:676f82c814686c59" ) --[[ @ 0]]
require( "x64:6c438d75d63d852f" ) --[[ @ 0]]
require( "ui/uieditor/widgets/scrollbars/verticalcounter" ) --[[ @ 0]]

local PostLoadFunc = function ( self, controller )
	self:registerEventHandler( "update_tier_list", function ( element, event )
		element.CallingCardProfiler.TierList:updateDataSource() --[[ @ 0]]
	end ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CallingCardsStickerbook = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CallingCardsStickerbook.__defaultWidth = 1696 --[[ @ 0]]
CoD.CallingCardsStickerbook.__defaultHeight = 850 --[[ @ 0]]
CoD.CallingCardsStickerbook.new = function ( f3_arg0, f3_arg1, f3_arg2, f3_arg3, f3_arg4, f3_arg5, f3_arg6, f3_arg7, f3_arg8, f3_arg9 )
	local self = LUI.UIElement.new( f3_arg2, f3_arg3, f3_arg4, f3_arg5, f3_arg6, f3_arg7, f3_arg8, f3_arg9 ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f3_arg1, "hudItems.callingCardProfilingType", "default" ) --[[ @ 0]]
	CoD.BaseUtility.InitControllerModelIfNotSet( f3_arg1, "hudItems.evalEquippedCard", 0 ) --[[ @ 0]]
	self:setClass( CoD.CallingCardsStickerbook ) --[[ @ 0]]
	self.id = "CallingCardsStickerbook" --[[ @ 0]]
	self.soundSet = "ChooseDecal" --[[ @ 0]]
	self.onlyChildrenFocusable = true --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f3_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CardGrid = LUI.UIList.new( f3_arg0, f3_arg1, 20, 0, nil, true, false, false, false ) --[[ @ 0]]
	CardGrid:setLeftRight( 0, 0, 32, 1152 ) --[[ @ 0]]
	CardGrid:setTopBottom( 0.5, 0.5, -375, 375 ) --[[ @ 0]]
	CardGrid:setWidgetType( CoD.CallingCards_CardWidget ) --[[ @ 0]]
	CardGrid:setHorizontalCount( 3 ) --[[ @ 0]]
	CardGrid:setVerticalCount( 7 ) --[[ @ 0]]
	CardGrid:setSpacing( 20 ) --[[ @ 0]]
	CardGrid:setAlignment( Enum[@"luialignment"][@"lui_alignment_left"] ) --[[ @ 0]]
	CardGrid:setVerticalCounter( CoD.verticalCounter ) --[[ @ 0]]
	CardGrid:setDataSource( "CallingCardsSorted" ) --[[ @ 0]]
	CardGrid:linkToElementModel( CardGrid, "isLocked", true, function ( model, f4_arg1 )
		CoD.Menu.UpdateButtonShownState( f4_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CardGrid:linkToElementModel( CardGrid, "trialLocked", true, function ( model, f5_arg1 )
		CoD.Menu.UpdateButtonShownState( f5_arg1, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CardGrid:registerEventHandler( "list_item_gain_focus", function ( element, event )
		local f6_local0 = nil --[[ @ 0]]
		CoD.ChallengesUtility.UpdateCallingCardProfilerType( f3_arg1, element ) --[[ @ 0]]
		return f6_local0
	end ) --[[ @ 0]]
	CardGrid:registerEventHandler( "list_item_lose_focus", function ( element, event )
		local f7_local0 = nil --[[ @ 0]]
		CoD.BreadcrumbUtility.SetCallingCardsAsOld( f3_arg0, element, f3_arg1 ) --[[ @ 0]]
		return f7_local0
	end ) --[[ @ 0]]
	CardGrid:registerEventHandler( "gain_focus", function ( element, event )
		local f8_local0 = nil --[[ @ 0]]
		if element.gainFocus then
			f8_local0 = element:gainFocus( event ) --[[ @ 0]]
		elseif element.super.gainFocus then
			f8_local0 = element.super:gainFocus( event ) --[[ @ 0]]
		end
		CoD.Menu.UpdateButtonShownState( element, f3_arg0, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"] ) --[[ @ 0]]
		return f8_local0
	end ) --[[ @ 0]]
	f3_arg0:AddButtonCallbackFunction( CardGrid, f3_arg1, Enum[@"luibutton"][@"lui_key_xba_pscross"], "ui_confirm", function ( element, menu, controller, model )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isLocked" ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			CallingCards_SetPlayerBackground( menu, element, controller ) --[[ @ 0]]
			ForceNotifyModel( controller, "hudItems.evalEquippedCard" ) --[[ @ 0]]
			return true
		else
			
		end
	end, function ( element, menu, controller )
		if not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "isLocked" ) and not CoD.ModelUtility.IsSelfModelValueTrue( element, controller, "trialLocked" ) then
			CoD.Menu.SetButtonLabel( menu, Enum[@"luibutton"][@"lui_key_xba_pscross"], @"menu/select", nil, "ui_confirm" ) --[[ @ 0]]
			return true
		else
			return false
		end
	end, false ) --[[ @ 0]]
	self:addElement( CardGrid ) --[[ @ 0]]
	self.CardGrid = CardGrid --[[ @ 0]]
	
	local TitleBG = CoD.Challenges_FrameWidget_TitleBackground.new( f3_arg0, f3_arg1, 0, 0, 1152, 1685, 0, 0, 31, 709 ) --[[ @ 0]]
	TitleBG.HeaderStripeBot:setAlpha( 0.5 ) --[[ @ 0]]
	self:addElement( TitleBG ) --[[ @ 0]]
	self.TitleBG = TitleBG --[[ @ 0]]
	
	local CallingCardProfiler = CoD.Challenges_CallingCardProfiler.new( f3_arg0, f3_arg1, 1, 1, -534.5, -9.5, 0, 0, 50, 774 ) --[[ @ 0]]
	self:addElement( CallingCardProfiler ) --[[ @ 0]]
	self.CallingCardProfiler = CallingCardProfiler --[[ @ 0]]
	
	local CallingCardProfilerGlobal = CoD.ChallengesCallingCardProfilerGlobal.new( f3_arg0, f3_arg1, 1, 1, -534.5, -9.5, 0, 0, 50, 774 ) --[[ @ 0]]
	self:addElement( CallingCardProfilerGlobal ) --[[ @ 0]]
	self.CallingCardProfilerGlobal = CallingCardProfilerGlobal --[[ @ 0]]
	
	local SelfIdentityBadgePreview = CoD.SelfIdentityBadgePreview.new( f3_arg0, f3_arg1, 0, 0, 1161.5, 1685.5, 0, 0, 710, 800 ) --[[ @ 0]]
	SelfIdentityBadgePreview:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsSelfModelValueNilOrTrue( element, f3_arg1, "trialLocked" )
			end
		}
	} ) --[[ @ 0]]
	SelfIdentityBadgePreview:linkToElementModel( SelfIdentityBadgePreview, "trialLocked", true, function ( model )
		f3_arg0:updateElementState( SelfIdentityBadgePreview, {
			name = "model_validation",
			menu = f3_arg0,
			controller = f3_arg1,
			modelValue = model:get(),
			modelName = "trialLocked"
		} ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:addElement( SelfIdentityBadgePreview ) --[[ @ 0]]
	self.SelfIdentityBadgePreview = SelfIdentityBadgePreview --[[ @ 0]]
	
	CallingCardProfiler:linkToElementModel( CardGrid, nil, false, function ( model )
		CallingCardProfiler:setModel( model, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	CallingCardProfilerGlobal:linkToElementModel( CardGrid, nil, false, function ( model )
		CallingCardProfilerGlobal:setModel( model, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	SelfIdentityBadgePreview:linkToElementModel( CardGrid, nil, false, function ( model )
		SelfIdentityBadgePreview:setModel( model, f3_arg1 ) --[[ @ 0]]
	end ) --[[ @ 0]]
	self:mergeStateConditions( {
		{
			stateName = "ProfilingGlobalCard",
			condition = function ( menu, element, event )
				return CoD.ModelUtility.IsModelValueEqualTo( f3_arg1, "hudItems.callingCardProfilingType", "global" )
			end
		}
	} ) --[[ @ 0]]
	local f3_local6 = self --[[ @ 0]]
	local f3_local7 = self.subscribeToModel --[[ @ 0]]
	local f3_local8 = Engine[@"getmodelforcontroller"]( f3_arg1 ) --[[ @ 0]]
	f3_local7( f3_local6, f3_local8["hudItems.callingCardProfilingType"], function ( f17_arg0 )
		f3_arg0:updateElementState( self, {
			name = "model_validation",
			menu = f3_arg0,
			controller = f3_arg1,
			modelValue = f17_arg0:get(),
			modelName = "hudItems.callingCardProfilingType"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self.__on_menuOpened_self = function ( f18_arg0, f18_arg1, f18_arg2, f18_arg3 )
		local f18_local0 = self --[[ @ 0]]
		if IsPC() and HasProperty( f18_arg2, "callingCardShowcaseSlot" ) then
			CoD.PCUtility.LockUIShortcutInput( f18_arg2, f18_arg1 ) --[[ @ 0]]
		end
	end
	 --[[ @ 0]]
	f3_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	CardGrid.id = "CardGrid" --[[ @ 0]]
	CallingCardProfiler.id = "CallingCardProfiler" --[[ @ 0]]
	CallingCardProfilerGlobal.id = "CallingCardProfilerGlobal" --[[ @ 0]]
	SelfIdentityBadgePreview.id = "SelfIdentityBadgePreview" --[[ @ 0]]
	self.__defaultFocus = CardGrid --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f3_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f3_arg1, f3_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CallingCardsStickerbook.__resetProperties = function ( f20_arg0 )
	f20_arg0.CallingCardProfilerGlobal:completeAnimation() --[[ @ 0]]
	f20_arg0.CallingCardProfiler:completeAnimation() --[[ @ 0]]
	f20_arg0.CallingCardProfilerGlobal:setAlpha( 1 ) --[[ @ 0]]
	f20_arg0.CallingCardProfiler:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CallingCardsStickerbook.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f21_arg0, f21_arg1 )
			f21_arg0:__resetProperties() --[[ @ 0]]
			f21_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f21_arg0.CallingCardProfilerGlobal:completeAnimation() --[[ @ 0]]
			f21_arg0.CallingCardProfilerGlobal:setAlpha( 0 ) --[[ @ 0]]
			f21_arg0.clipFinished( f21_arg0.CallingCardProfilerGlobal ) --[[ @ 0]]
		end
	},
	ProfilingGlobalCard = {
		DefaultClip = function ( f22_arg0, f22_arg1 )
			f22_arg0:__resetProperties() --[[ @ 0]]
			f22_arg0:setupElementClipCounter( 1 ) --[[ @ 0]]
			f22_arg0.CallingCardProfiler:completeAnimation() --[[ @ 0]]
			f22_arg0.CallingCardProfiler:setAlpha( 0 ) --[[ @ 0]]
			f22_arg0.clipFinished( f22_arg0.CallingCardProfiler ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CallingCardsStickerbook.__onClose = function ( f23_arg0 )
	f23_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f23_arg0.CallingCardProfiler:close() --[[ @ 0]]
	f23_arg0.CallingCardProfilerGlobal:close() --[[ @ 0]]
	f23_arg0.SelfIdentityBadgePreview:close() --[[ @ 0]]
	f23_arg0.CardGrid:close() --[[ @ 0]]
	f23_arg0.TitleBG:close() --[[ @ 0]]
end
 --[[ @ 0]]
