-- Generated by CoDLuaDecompiler
-- Version: 2.4.2
-- Date: 21-02-2025 19:50
require( "x64:195a97da93538517" ) --[[ @ 0]]
require( "x64:7cf052d7532754d9" ) --[[ @ 0]]
require( "x64:75dc6cf80349818a" ) --[[ @ 0]]
require( "x64:5972a15b60b6833" ) --[[ @ 0]]
require( "x64:6c5031fde3726237" ) --[[ @ 0]]
require( "x64:18a228085bff138c" ) --[[ @ 0]]
require( "x64:16ae8165b7fb8565" ) --[[ @ 0]]

CoD.CodCasterObjectiveStatus = InheritFrom( LUI.UIElement ) --[[ @ 0]]
CoD.CodCasterObjectiveStatus.__defaultWidth = 520 --[[ @ 0]]
CoD.CodCasterObjectiveStatus.__defaultHeight = 64 --[[ @ 0]]
CoD.CodCasterObjectiveStatus.new = function ( f1_arg0, f1_arg1, f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 )
	local self = LUI.UIElement.new( f1_arg2, f1_arg3, f1_arg4, f1_arg5, f1_arg6, f1_arg7, f1_arg8, f1_arg9 ) --[[ @ 0]]
	CoD.CodCasterUtility.InitDataSources( self, f1_arg1 ) --[[ @ 0]]
	self:setClass( CoD.CodCasterObjectiveStatus ) --[[ @ 0]]
	self.id = "CodCasterObjectiveStatus" --[[ @ 0]]
	self.soundSet = "none" --[[ @ 0]]
	self.anyChildUsesUpdateState = true --[[ @ 0]]
	f1_arg0:addElementToPendingUpdateStateList( self ) --[[ @ 0]]
	
	local CodCasterObjectiveStatusControl = CoD.CodCasterObjectiveStatusControl.new( f1_arg0, f1_arg1, 0.5, 0.5, -206, 206, 0.49, 0.49, -48, 16 ) --[[ @ 0]]
	CodCasterObjectiveStatusControl:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "control" )
			end
		}
	} ) --[[ @ 0]]
	local CodCasterObjectiveStatusHardpoint = CodCasterObjectiveStatusControl --[[ @ 0]]
	local CodCasterObjectiveStatusLifeCount = CodCasterObjectiveStatusControl.subscribeToModel --[[ @ 0]]
	local CodCasterObjectiveStatusSD = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CodCasterObjectiveStatusLifeCount( CodCasterObjectiveStatusHardpoint, CodCasterObjectiveStatusSD["hudItems.codcaster.ObjectiveB.progress"], function ( f3_arg0 )
		f1_arg0:updateElementState( CodCasterObjectiveStatusControl, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f3_arg0:get(),
			modelName = "hudItems.codcaster.ObjectiveB.progress"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CodCasterObjectiveStatusHardpoint = CodCasterObjectiveStatusControl --[[ @ 0]]
	CodCasterObjectiveStatusLifeCount = CodCasterObjectiveStatusControl.subscribeToModel --[[ @ 0]]
	CodCasterObjectiveStatusSD = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CodCasterObjectiveStatusLifeCount( CodCasterObjectiveStatusHardpoint, CodCasterObjectiveStatusSD["hudItems.codcaster.ObjectiveA.progress"], function ( f4_arg0 )
		f1_arg0:updateElementState( CodCasterObjectiveStatusControl, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f4_arg0:get(),
			modelName = "hudItems.codcaster.ObjectiveA.progress"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusControl ) --[[ @ 0]]
	self.CodCasterObjectiveStatusControl = CodCasterObjectiveStatusControl --[[ @ 0]]
	
	CodCasterObjectiveStatusLifeCount = CoD.CodCasterObjectiveStatusLifeCount.new( f1_arg0, f1_arg1, 0.5, 0.5, -260, 260, 0.5, 0.5, 4, 36 ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusLifeCount ) --[[ @ 0]]
	self.CodCasterObjectiveStatusLifeCount = CodCasterObjectiveStatusLifeCount --[[ @ 0]]
	
	CodCasterObjectiveStatusHardpoint = CoD.CodCasterObjectiveStatusHardpoint.new( f1_arg0, f1_arg1, 0.5, 0.5, -206, 206, 0.5, 0.5, -48, 16 ) --[[ @ 0]]
	CodCasterObjectiveStatusHardpoint:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "koth" )
			end
		}
	} ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusHardpoint ) --[[ @ 0]]
	self.CodCasterObjectiveStatusHardpoint = CodCasterObjectiveStatusHardpoint --[[ @ 0]]
	
	CodCasterObjectiveStatusSD = CoD.CodCasterObjectiveStatusSD.new( f1_arg0, f1_arg1, 0.5, 0.5, -206, 206, 0.49, 0.49, -48, 16 ) --[[ @ 0]]
	CodCasterObjectiveStatusSD:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "sd" )
			end
		}
	} ) --[[ @ 0]]
	local CodCasterObjectiveStatusCTF = CodCasterObjectiveStatusSD --[[ @ 0]]
	local CodCasterObjectiveStatusDomination = CodCasterObjectiveStatusSD.subscribeToModel --[[ @ 0]]
	local CodCasterObjectiveStatusSafeGuard = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CodCasterObjectiveStatusDomination( CodCasterObjectiveStatusCTF, CodCasterObjectiveStatusSafeGuard["HUDItems.codcaster.BombA"], function ( f7_arg0 )
		f1_arg0:updateElementState( CodCasterObjectiveStatusSD, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f7_arg0:get(),
			modelName = "HUDItems.codcaster.BombA"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	CodCasterObjectiveStatusCTF = CodCasterObjectiveStatusSD --[[ @ 0]]
	CodCasterObjectiveStatusDomination = CodCasterObjectiveStatusSD.subscribeToModel --[[ @ 0]]
	CodCasterObjectiveStatusSafeGuard = Engine[@"getmodelforcontroller"]( f1_arg1 ) --[[ @ 0]]
	CodCasterObjectiveStatusDomination( CodCasterObjectiveStatusCTF, CodCasterObjectiveStatusSafeGuard["HUDItems.codcaster.BombB"], function ( f8_arg0 )
		f1_arg0:updateElementState( CodCasterObjectiveStatusSD, {
			name = "model_validation",
			menu = f1_arg0,
			controller = f1_arg1,
			modelValue = f8_arg0:get(),
			modelName = "HUDItems.codcaster.BombB"
		} ) --[[ @ 0]]
	end, false ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusSD ) --[[ @ 0]]
	self.CodCasterObjectiveStatusSD = CodCasterObjectiveStatusSD --[[ @ 0]]
	
	CodCasterObjectiveStatusDomination = CoD.CodCasterObjectiveStatusDomination.new( f1_arg0, f1_arg1, 0.5, 0.5, -206, 206, 0.44, 0.44, -48, 16 ) --[[ @ 0]]
	CodCasterObjectiveStatusDomination:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "dom" )
			end
		}
	} ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusDomination ) --[[ @ 0]]
	self.CodCasterObjectiveStatusDomination = CodCasterObjectiveStatusDomination --[[ @ 0]]
	
	CodCasterObjectiveStatusCTF = CoD.CodCasterObjectiveStatusCTF.new( f1_arg0, f1_arg1, 0.5, 0.5, -206, 206, 0.5, 0.5, -38, 26 ) --[[ @ 0]]
	CodCasterObjectiveStatusCTF:mergeStateConditions( {
		{
			stateName = "Hidden",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "ctf" )
			end
		}
	} ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusCTF ) --[[ @ 0]]
	self.CodCasterObjectiveStatusCTF = CodCasterObjectiveStatusCTF --[[ @ 0]]
	
	CodCasterObjectiveStatusSafeGuard = CoD.CodCasterObjectiveStatusSafeGuard.new( f1_arg0, f1_arg1, 0, 0, 178, 342, 0, 0, -8.5, 35.5 ) --[[ @ 0]]
	CodCasterObjectiveStatusSafeGuard:mergeStateConditions( {
		{
			stateName = "HiddenCodcaster",
			condition = function ( menu, element, event )
				return not CoD.HUDUtility.IsGameTypeEqualToString( "escort" )
			end
		}
	} ) --[[ @ 0]]
	CodCasterObjectiveStatusSafeGuard:setScale( 0.5, 0.5 ) --[[ @ 0]]
	self:addElement( CodCasterObjectiveStatusSafeGuard ) --[[ @ 0]]
	self.CodCasterObjectiveStatusSafeGuard = CodCasterObjectiveStatusSafeGuard --[[ @ 0]]
	
	self.__on_menuOpened_self = function ( f12_arg0, f12_arg1, f12_arg2, f12_arg3 )
		local f12_local0 = self --[[ @ 0]]
		UpdateSelfElementState( f12_arg2, self.CodCasterObjectiveStatusSD, f12_arg1 ) --[[ @ 0]]
		UpdateSelfElementState( f12_arg2, self.CodCasterObjectiveStatusHardpoint, f12_arg1 ) --[[ @ 0]]
		UpdateSelfElementState( f12_arg2, self.CodCasterObjectiveStatusControl, f12_arg1 ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	f1_arg0:addMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	self.__on_close_removeOverrides = function ()
		f1_arg0:removeMenuOpenedCallback( self.__on_menuOpened_self ) --[[ @ 0]]
	end
	 --[[ @ 0]]
	LUI.OverrideFunction_CallOriginalSecond( self, "close", self.__onClose ) --[[ @ 0]]
	
	if PostLoadFunc then
		PostLoadFunc( self, f1_arg1, f1_arg0 ) --[[ @ 0]]
	end
	
	return self
end
 --[[ @ 0]]
CoD.CodCasterObjectiveStatus.__resetProperties = function ( f14_arg0 )
	f14_arg0.CodCasterObjectiveStatusSD:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusHardpoint:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusControl:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusLifeCount:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusDomination:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusCTF:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusSafeGuard:completeAnimation() --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusSD:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusHardpoint:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusControl:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusLifeCount:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusDomination:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusCTF:setAlpha( 1 ) --[[ @ 0]]
	f14_arg0.CodCasterObjectiveStatusSafeGuard:setAlpha( 1 ) --[[ @ 0]]
end
 --[[ @ 0]]
CoD.CodCasterObjectiveStatus.__clipsPerState = {
	DefaultState = {
		DefaultClip = function ( f15_arg0, f15_arg1 )
			f15_arg0:__resetProperties() --[[ @ 0]]
			f15_arg0:setupElementClipCounter( 7 ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusControl:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusControl:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusControl ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusLifeCount:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusLifeCount:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusLifeCount ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusHardpoint:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusHardpoint:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusHardpoint ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusSD:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusSD:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusSD ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusDomination:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusDomination:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusDomination ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusCTF:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusCTF:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusCTF ) --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusSafeGuard:completeAnimation() --[[ @ 0]]
			f15_arg0.CodCasterObjectiveStatusSafeGuard:setAlpha( 0 ) --[[ @ 0]]
			f15_arg0.clipFinished( f15_arg0.CodCasterObjectiveStatusSafeGuard ) --[[ @ 0]]
		end
	},
	Visible = {
		DefaultClip = function ( f16_arg0, f16_arg1 )
			f16_arg0:__resetProperties() --[[ @ 0]]
			f16_arg0:setupElementClipCounter( 0 ) --[[ @ 0]]
		end
	}
} --[[ @ 0]]
CoD.CodCasterObjectiveStatus.__onClose = function ( f17_arg0 )
	f17_arg0.__on_close_removeOverrides() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusControl:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusLifeCount:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusHardpoint:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusSD:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusDomination:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusCTF:close() --[[ @ 0]]
	f17_arg0.CodCasterObjectiveStatusSafeGuard:close() --[[ @ 0]]
end
 --[[ @ 0]]
